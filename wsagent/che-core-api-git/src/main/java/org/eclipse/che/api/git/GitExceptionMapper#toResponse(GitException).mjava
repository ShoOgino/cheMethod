    /**
     * check the exception type and build Response with the status body and the type of the error
     */
    @Override
    public Response toResponse(GitException exception) {
        if (exception instanceof GitRefNotFoundException)
            return Response.status(Response.Status.NOT_FOUND)
                           .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                           .type(MediaType.APPLICATION_JSON).build();
        else if (exception instanceof GitInvalidRefNameException)
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                           .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                           .type(MediaType.APPLICATION_JSON).build();
        else if (exception instanceof GitRefAlreadyExistsException)
            return Response.status(Response.Status.INTERNAL_SERVER_ERROR)
                           .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                           .type(MediaType.APPLICATION_JSON).build();
        else if (exception instanceof GitConflictException) {
            ConflictExceptionError conflictExceptionError = newDto(ConflictExceptionError.class).withMessage(exception.getServiceError().getMessage())
                                                                                                .withConflictingPaths(((GitConflictException) exception).getConflictPaths());
            return Response.status(Response.Status.CONFLICT)
                           .entity(DtoFactory.getInstance().toJson(conflictExceptionError))
                           .type(MediaType.APPLICATION_JSON).build();
        }
        return Response.serverError()
                       .entity(DtoFactory.getInstance()
                       .toJson(exception.getServiceError()))
                       .type(MediaType.APPLICATION_JSON).build();
    }

