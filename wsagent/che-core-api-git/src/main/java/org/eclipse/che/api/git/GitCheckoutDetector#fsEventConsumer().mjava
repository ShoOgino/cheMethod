  private Consumer<String> fsEventConsumer() {
    return it -> {
      try {
        String content = fsManager.readAsString(it);
        Type type = content.contains("ref:") ? BRANCH : REVISION;
        String name = type == REVISION ? content : PATTERN.split(content)[1];
        String project = it.substring(1, it.indexOf('/', 1));

        // Update project attributes with new git values

        String wsPath = absolutize(it.split("/")[1]);
        projectManager.setType(wsPath, GitProjectType.TYPE_ID, true);

        endpointIds.forEach(transmitConsumer(type, name, project));

      } catch (ServerException | ForbiddenException e) {
        LOG.error("Error trying to read {} file and broadcast it", it, e);
      } catch (NotFoundException | ConflictException | BadRequestException e) {
        LOG.error("Error trying to update project attributes", it, e);
      }
    };
  }

