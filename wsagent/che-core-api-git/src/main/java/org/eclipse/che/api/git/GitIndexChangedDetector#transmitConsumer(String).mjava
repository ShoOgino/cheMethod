    private Consumer<String> transmitConsumer(String path) {
        return id -> {
            String project = (path.startsWith("/") ? path.substring(1) : path).split("/")[0];
            try {
                Status status = gitConnectionFactory.getConnection(project).status(StatusFormat.SHORT);
                Status statusDto = newDto(Status.class);
                statusDto.setAdded(status.getAdded());
                statusDto.setUntracked(status.getUntracked());
                statusDto.setChanged(status.getChanged());
                statusDto.setModified(status.getModified());
                statusDto.setMissing(status.getMissing());
                statusDto.setRemoved(status.getRemoved());
                statusDto.setConflicting(status.getConflicting());
                transmitter.newRequest()
                           .endpointId(id)
                           .methodName(OUTGOING_METHOD)
                           .paramsAsDto(statusDto)
                           .sendAndSkipResult();
            } catch (GitException e) {
                String errorMessage = e.getMessage();
                if (!("Not a git repository".equals(errorMessage))) {
                    LOG.error(errorMessage);
                }
            }
        };
    }

