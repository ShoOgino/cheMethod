  /** {@inheritDoc} */
  @Override
  protected void configure() {
    Multibinder<ProjectImporter> projectImporterMultibinder =
        Multibinder.newSetBinder(binder(), ProjectImporter.class);
    projectImporterMultibinder.addBinding().to(GitProjectImporter.class);
    Multibinder.newSetBinder(binder(), ProjectTypeDef.class).addBinding().to(GitProjectType.class);
    bind(GitConfigurationChecker.class).asEagerSingleton();

    Multibinder<VcsStatusProvider> vcsStatusProviderMultibinder =
        newSetBinder(binder(), VcsStatusProvider.class);
    vcsStatusProviderMultibinder.addBinding().to(CachedGitStatusProvider.class);

    Multibinder<ValueProviderFactory> multiBinder =
        Multibinder.newSetBinder(binder(), ValueProviderFactory.class);
    multiBinder.addBinding().to(GitValueProviderFactory.class);

    bind(GitUserResolver.class).to(LocalGitUserResolver.class);

    bind(GitService.class);
    bind(GitExceptionMapper.class);
    bind(BranchListWriter.class);
    bind(CommitMessageWriter.class);
    bind(MergeResultWriter.class);
    bind(RemoteListWriter.class);
    bind(StatusPageWriter.class);
    bind(TagListWriter.class);
    bind(GitJsonRpcMessenger.class);

    Multibinder.newSetBinder(binder(), CredentialsProvider.class)
        .addBinding()
        .to(GitBasicAuthenticationCredentialsProvider.class);

    bind(GitCheckoutDetector.class).asEagerSingleton();
    bind(GitChangesDetector.class).asEagerSingleton();
    bind(GitStatusChangedDetector.class).asEagerSingleton();
  }

