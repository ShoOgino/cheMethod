    @Override
    public ValueProvider newInstance(final FolderEntry folder) {
        return new ReadonlyValueProvider() {
            @Override
            public List<String> getValues(String attributeName) throws ValueStorageException {
                if (folder == null) {
                    return Collections.emptyList();
                }
                try (GitConnection gitConnection = gitConnectionFactory.getConnection(resolveLocalPath(folder))) {
                    //check whether the folder belongs to git repository
                    if (!gitConnection.isInsideWorkTree()) {
                        return Collections.emptyList();
                    }

                    switch (attributeName) {
                        case VCS_PROVIDER_NAME:
                            return Collections.singletonList("git");
                        case GIT_CURRENT_BRANCH_NAME:
                            return Collections.singletonList(gitConnection.status(StatusFormat.LONG).getBranchName());
                        case GIT_REPOSITORY_REMOTES:
                            return gitConnection.remoteList(newDto(RemoteListRequest.class))
                                                .stream()
                                                .map(Remote::getUrl)
                                                .collect(Collectors.toList());
                        default:
                            return Collections.emptyList();
                    }
                } catch (ApiException e) {
                    throw new ValueStorageException(e.getMessage());
                }
            }
        };
    }

