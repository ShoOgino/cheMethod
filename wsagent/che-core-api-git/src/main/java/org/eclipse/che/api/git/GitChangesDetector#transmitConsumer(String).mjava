  private Consumer<String> transmitConsumer(String path) {
    return id -> {
      try {
        String normalizedPath = path.startsWith("/") ? path.substring(1) : path;
        String itemPath = normalizedPath.substring(normalizedPath.indexOf("/") + 1);
        String projectPath =
            projectManagerProvider
                .get()
                .getProject(normalizedPath.split("/")[0])
                .getBaseFolder()
                .getVirtualFile()
                .toIoFile()
                .getAbsolutePath();
        Status status =
            gitConnectionFactory.getConnection(projectPath).status(singletonList(itemPath));
        GitChangeEventDto.Type type;
        if (status.getAdded().contains(itemPath)) {
          type = ADDED;
        } else if (status.getUntracked().contains(itemPath)) {
          type = UNTRACKED;
        } else if (status.getModified().contains(itemPath)
            || status.getChanged().contains(itemPath)) {
          type = MODIFIED;
        } else {
          type = GitChangeEventDto.Type.NOT_MODIFIED;
        }

        transmitter
            .newRequest()
            .endpointId(id)
            .methodName(OUTGOING_METHOD)
            .paramsAsDto(newDto(GitChangeEventDto.class).withPath(path).withType(type))
            .sendAndSkipResult();
      } catch (NotFoundException | ServerException e) {
        String errorMessage = e.getMessage();
        if (!("Not a git repository".equals(errorMessage))) {
          LOG.error(errorMessage);
        }
      }
    };
  }

