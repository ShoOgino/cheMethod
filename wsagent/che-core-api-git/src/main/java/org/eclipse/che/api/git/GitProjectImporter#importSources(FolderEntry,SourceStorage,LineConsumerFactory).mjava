    @Override
    public void importSources(FolderEntry baseFolder,
                              SourceStorage storage,
                              LineConsumerFactory consumerFactory) throws ForbiddenException,
                                                                          ConflictException,
                                                                          UnauthorizedException,
                                                                          IOException,
                                                                          ServerException {
        GitConnection git = null;
        try {
            // For factory: checkout particular commit after clone
            String commitId = null;
            // For factory: github pull request feature
            String fetch = null;
            String branch = null;
            String startPoint = null;
            // For factory or probably for our projects templates:
            // If git repository contains more than one project need clone all repository but after cloning keep just
            // sub-project that is specified in parameter "keepDir".
            String keepDir = null;
            // For factory and for our projects templates:
            // Keep all info related to the vcs. In case of Git: ".git" directory and ".gitignore" file.
            // Delete vcs info if false.
            String branchMerge = null;
            boolean keepVcs = true;
            boolean recursiveEnabled = false;

            Map<String, String> parameters = storage.getParameters();
            if (parameters != null) {
                commitId = parameters.get("commitId");
                branch = parameters.get("branch");
                startPoint = parameters.get("startPoint");
                fetch = parameters.get("fetch");
                keepDir = parameters.get("keepDir");
                if (parameters.containsKey("keepVcs")) {
                    keepVcs = Boolean.parseBoolean(parameters.get("keepVcs"));
                }
                if (parameters.containsKey("recursive")) {
                    recursiveEnabled = true;
                }
                branchMerge = parameters.get("branchMerge");
            }
            // Get path to local file. Git works with local filesystem only.
            final String localPath = baseFolder.getVirtualFile().toIoFile().getAbsolutePath();
            final DtoFactory dtoFactory = DtoFactory.getInstance();
            final String location = storage.getLocation();
            final String projectName = baseFolder.getName();
            git = gitConnectionFactory.getConnection(localPath, consumerFactory);
            if (keepDir != null) {
                git.cloneWithSparseCheckout(keepDir, location, branch == null ? "master" : branch);
            } else {
                if (baseFolder.getChildren().size() == 0) {
                    cloneRepository(git, "origin", location, dtoFactory, recursiveEnabled);
                    if (commitId != null) {
                        checkoutCommit(git, commitId, dtoFactory);
                    } else if (fetch != null) {
                        git.getConfig().add("remote.origin.fetch", fetch);
                        fetch(git, "origin", dtoFactory);
                        if (branch != null) {
                            checkoutBranch(git, projectName, branch, startPoint, dtoFactory);
                        }
                    } else if (branch != null) {
                        checkoutBranch(git, projectName, branch, startPoint, dtoFactory);
                    }
                } else {
                    initRepository(git, dtoFactory);
                    addRemote(git, "origin", location, dtoFactory);
                    if (commitId != null) {
                        fetchBranch(git, "origin", branch == null ? "*" : branch, dtoFactory);
                        checkoutCommit(git, commitId, dtoFactory);
                    } else if (fetch != null) {
                        git.getConfig().add("remote.origin.fetch", fetch);
                        fetch(git, "origin", dtoFactory);
                        if (branch != null) {
                            checkoutBranch(git, projectName, branch, startPoint, dtoFactory);
                        }
                    } else {
                        fetchBranch(git, "origin", branch == null ? "*" : branch, dtoFactory);

                        List<Branch> branchList = git.branchList(dtoFactory.createDto(BranchListRequest.class).withListMode("r"));
                        if (!branchList.isEmpty()) {
                            checkoutBranch(git, projectName, branch == null ? "master" : branch, startPoint, dtoFactory);
                        }
                    }
                }
                if (branchMerge != null) {
                    git.getConfig().set("branch." + (branch == null ? "master" : branch) + ".merge", branchMerge);
                }
                if (!keepVcs) {
                    cleanGit(git.getWorkingDir());
                }
            }
        } catch (URISyntaxException e) {
            throw new ServerException(
                    "Your project cannot be imported. The issue is either from git configuration, a malformed URL, " +
                    "or file system corruption. Please contact support for assistance.",
                    e);
        } finally {
            if (git != null) {
                git.close();
            }
        }
    }

