  private void updateCachedStatus(String project, List<String> paths, Status changes) {
    Status cachedStatus = statusCache.get(project);

    if (cachedStatus == null) {
      statusCache.put(project, changes);
      return;
    }

    paths.forEach(
        path -> {
          cachedStatus.getAdded().remove(path);
          cachedStatus.getChanged().remove(path);
          cachedStatus.getModified().remove(path);
          cachedStatus.getUntracked().remove(path);
          cachedStatus.getMissing().remove(path);
          cachedStatus.getRemoved().remove(path);
          cachedStatus.getConflicting().remove(path);
          cachedStatus.getUntrackedFolders().remove(path);
        });

    changes.getAdded().forEach(added -> cachedStatus.getAdded().add(added));
    changes.getChanged().forEach(changed -> cachedStatus.getChanged().add(changed));
    changes.getModified().forEach(modified -> cachedStatus.getModified().add(modified));
    changes.getUntracked().forEach(untracked -> cachedStatus.getUntracked().add(untracked));
    changes.getMissing().forEach(missing -> cachedStatus.getMissing().add(missing));
    changes.getRemoved().forEach(removed -> cachedStatus.getRemoved().add(removed));
    changes.getConflicting().forEach(conflicting -> cachedStatus.getConflicting().add(conflicting));
    changes
        .getUntrackedFolders()
        .forEach(untrackedFolders -> cachedStatus.getUntrackedFolders().add(untrackedFolders));

    statusCache.put(project, cachedStatus);
  }

