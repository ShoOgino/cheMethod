  private void updateCachedStatus(String project, List<String> paths, Status changes) {
    Status cachedStatus = statusCache.get(project);

    if (cachedStatus == null) {
      statusCache.put(project, changes);
      return;
    }

    List<String> added =
        cachedStatus.getAdded().stream().filter(path -> !paths.contains(path)).collect(toList());
    added.addAll(changes.getAdded());

    List<String> changed =
        cachedStatus.getChanged().stream().filter(path -> !paths.contains(path)).collect(toList());
    changed.addAll(changes.getChanged());

    List<String> modified =
        cachedStatus.getModified().stream().filter(path -> !paths.contains(path)).collect(toList());
    modified.addAll(changes.getModified());

    List<String> untracked =
        cachedStatus.getModified().stream().filter(path -> !paths.contains(path)).collect(toList());
    untracked.addAll(changes.getUntracked());

    List<String> missing =
        cachedStatus.getMissing().stream().filter(path -> !paths.contains(path)).collect(toList());
    missing.addAll(changes.getMissing());

    List<String> removed =
        cachedStatus.getRemoved().stream().filter(path -> !paths.contains(path)).collect(toList());
    removed.addAll(changes.getRemoved());

    List<String> conflicting =
        cachedStatus
            .getConflicting()
            .stream()
            .filter(path -> !paths.contains(path))
            .collect(toList());
    conflicting.addAll(changes.getConflicting());

    List<String> untrackedFolders =
        cachedStatus
            .getUntrackedFolders()
            .stream()
            .filter(path -> !paths.contains(path))
            .collect(toList());
    untrackedFolders.addAll(changes.getUntrackedFolders());

    Status status = newDto(Status.class);
    status.setAdded(added);
    status.setChanged(changed);
    status.setModified(modified);
    status.setUntracked(untracked);
    status.setMissing(missing);
    status.setRemoved(removed);
    status.setConflicting(conflicting);
    status.setUntrackedFolders(untrackedFolders);

    statusCache.put(project, status);
  }

