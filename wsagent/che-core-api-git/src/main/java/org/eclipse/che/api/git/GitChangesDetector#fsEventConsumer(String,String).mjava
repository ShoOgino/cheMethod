  private Consumer<String> fsEventConsumer(String endpointId, String path) {
    return it -> {
      try {
        String normalizedPath = path.startsWith("/") ? path.substring(1) : path;
        String itemPath = normalizedPath.substring(normalizedPath.indexOf("/") + 1);
        String projectPath =
            projectManager
                .getProject(normalizedPath.split("/")[0])
                .getBaseFolder()
                .getVirtualFile()
                .toIoFile()
                .getAbsolutePath();
        GitConnection connection = gitConnectionFactory.getConnection(projectPath);
        Status status = connection.status(singletonList(itemPath));
        FileChangedEventDto.Status fileStatus;
        if (status.getAdded().contains(itemPath)) {
          fileStatus = ADDED;
        } else if (status.getUntracked().contains(itemPath)) {
          fileStatus = UNTRACKED;
        } else if (status.getModified().contains(itemPath)
            || status.getChanged().contains(itemPath)) {
          fileStatus = MODIFIED;
        } else {
          fileStatus = NOT_MODIFIED;
        }

        transmitter
            .newRequest()
            .endpointId(endpointId)
            .methodName(OUTGOING_METHOD)
            .paramsAsDto(
                newDto(FileChangedEventDto.class)
                    .withPath(path)
                    .withStatus(fileStatus)
                    .withEditedRegions(
                        gitConnectionFactory.getConnection(projectPath).getEditedRegions(itemPath)))
            .sendAndSkipResult();
      } catch (NotFoundException | ServerException e) {
        String errorMessage = e.getMessage();
        if (!("Not a git repository".equals(errorMessage))) {
          LOG.error(errorMessage);
        }
      }
    };
  }

