  @Override
  public ValueProvider newInstance(String wsPath) {
    return new ReadonlyValueProvider() {
      @Override
      public List<String> getValues(String attributeName) throws ValueStorageException {
        if (isNullOrEmpty(wsPath)) {
          return emptyList();
        }

        String fsPath = pathTransformer.transform(wsPath).toString();

        try (GitConnection gitConnection = gitConnectionFactory.getConnection(fsPath)) {
          // check whether the folder belongs to git repository
          if (!gitConnection.isInsideWorkTree()) {
            return emptyList();
          }

          switch (attributeName) {
            case VCS_PROVIDER_NAME:
              return singletonList("git");
            case GIT_CURRENT_HEAD_NAME:
              return singletonList(gitConnection.getCurrentReference().getName());
            case GIT_REPOSITORY_REMOTES:
              return gitConnection
                  .remoteList(null, false)
                  .stream()
                  .map(Remote::getUrl)
                  .collect(Collectors.toList());
            default:
              return emptyList();
          }
        } catch (ApiException e) {
          throw new ValueStorageException(e.getMessage());
        }
      }
    };
  }

