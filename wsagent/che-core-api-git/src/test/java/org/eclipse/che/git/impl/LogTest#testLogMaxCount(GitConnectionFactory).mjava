  @Test(
      dataProvider = "GitConnectionFactory",
      dataProviderClass = GitConnectionFactoryProvider.class)
  public void testLogMaxCount(GitConnectionFactory connectionFactory)
      throws GitException, IOException {
    // given
    GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
    addFile(connection, "1.txt", "someChanges");
    connection.add(AddParams.create());
    connection.commit(CommitParams.create("add 1.txt file"));

    addFile(connection, "2.txt", "newChanges");
    connection.add(AddParams.create());
    connection.commit(CommitParams.create("add 2.txt file"));

    addFile(connection, "3.txt", "otherChanges");
    connection.add(AddParams.create());
    connection.commit(CommitParams.create("add 3.txt file"));

    addFile(connection, "4.txt", "someChanges");
    connection.add(AddParams.create());
    connection.commit(CommitParams.create("add 4.txt file"));

    // when
    List<Revision> allCommits = connection.log(LogParams.create()).getCommits();
    List<Revision> firstBucketOfCommits =
        connection.log(LogParams.create().withMaxCount(4)).getCommits();
    List<Revision> secondBucketOfCommits =
        connection.log(LogParams.create().withMaxCount(2)).getCommits();

    // then
    assertEquals(4, allCommits.size());

    assertEquals(4, firstBucketOfCommits.size());
    assertEquals(firstBucketOfCommits.get(0).getMessage(), "add 4.txt file");
    assertEquals(firstBucketOfCommits.get(1).getMessage(), "add 3.txt file");
    assertEquals(firstBucketOfCommits.get(2).getMessage(), "add 2.txt file");
    assertEquals(firstBucketOfCommits.get(3).getMessage(), "add 1.txt file");

    assertEquals(2, secondBucketOfCommits.size());
    assertEquals(secondBucketOfCommits.get(0).getMessage(), "add 4.txt file");
    assertEquals(secondBucketOfCommits.get(1).getMessage(), "add 3.txt file");
  }

