  @Test(
    dataProvider = "GitConnectionFactory",
    dataProviderClass = org.eclipse.che.git.impl.GitConnectionFactoryProvider.class
  )
  public void testCheckoutTwoFiles(GitConnectionFactory connectionFactory)
      throws GitException, IOException {
    //given
    GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
    addFile(connection, "README.txt", org.eclipse.che.git.impl.GitTestUtil.CONTENT);

    String ORIG_CONTENT_1_TXT = "1.txt original content";
    String ORIG_CONTENT_2_TXT = "2.txt original content";
    addFile(connection, "1.txt", ORIG_CONTENT_1_TXT);
    addFile(connection, "2.txt", ORIG_CONTENT_2_TXT);
    connection.add(AddParams.create(ImmutableList.of("README.txt", "1.txt", "2.txt")));
    connection.commit(CommitParams.create("Initial addd"));

    //when
    //modify the two files
    String MODIFIED_CONTENT_1_TXT = "1.txt modified content";
    String MODIFIED_CONTENT_2_TXT = "2.txt modified content";
    addFile(connection, "1.txt", MODIFIED_CONTENT_1_TXT);
    addFile(connection, "2.txt", MODIFIED_CONTENT_2_TXT);

    //then
    assertTrue(new File(repository, "1.txt").exists());
    assertTrue(new File(repository, "2.txt").exists());
    assertEquals(
        MODIFIED_CONTENT_1_TXT,
        Files.toString(new File(connection.getWorkingDir(), "1.txt"), Charsets.UTF_8));
    assertEquals(
        MODIFIED_CONTENT_2_TXT,
        Files.toString(new File(connection.getWorkingDir(), "2.txt"), Charsets.UTF_8));

    //when
    connection.checkout(CheckoutParams.create(null).withFiles(ImmutableList.of("1.txt", "2.txt")));

    //then
    assertTrue(new File(repository, "1.txt").exists());
    assertTrue(new File(repository, "2.txt").exists());
    assertEquals(
        ORIG_CONTENT_1_TXT,
        Files.toString(new File(connection.getWorkingDir(), "1.txt"), Charsets.UTF_8));
    assertEquals(
        ORIG_CONTENT_2_TXT,
        Files.toString(new File(connection.getWorkingDir(), "2.txt"), Charsets.UTF_8));
  }

