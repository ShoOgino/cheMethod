  @Test(
    dataProvider = "GitConnectionFactory",
    dataProviderClass = org.eclipse.che.git.impl.GitConnectionFactoryProvider.class
  )
  public void testSimpleDelete(GitConnectionFactory connectionFactory)
      throws GitException, IOException, UnauthorizedException {
    //given
    GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
    addFile(connection, "README.txt", org.eclipse.che.git.impl.GitTestUtil.CONTENT);
    connection.add(AddParams.create(singletonList("README.txt")));
    connection.commit(CommitParams.create("Initial addd"));
    connection.branchCreate("newbranch", null);

    assertTrue(
        Sets.symmetricDifference(
                Sets.newHashSet(connection.branchList(LIST_LOCAL)),
                Sets.newHashSet(
                    newDto(Branch.class)
                        .withName("refs/heads/master")
                        .withDisplayName("master")
                        .withActive(true)
                        .withRemote(false),
                    newDto(Branch.class)
                        .withName("refs/heads/newbranch")
                        .withDisplayName("newbranch")
                        .withActive(false)
                        .withRemote(false)))
            .isEmpty());
    //when
    connection.branchDelete("newbranch", false);
    //then
    assertTrue(
        Sets.symmetricDifference(
                Sets.newHashSet(connection.branchList(LIST_LOCAL)),
                Sets.newHashSet(
                    newDto(Branch.class)
                        .withName("refs/heads/master")
                        .withDisplayName("master")
                        .withActive(true)
                        .withRemote(false)))
            .isEmpty());
  }

