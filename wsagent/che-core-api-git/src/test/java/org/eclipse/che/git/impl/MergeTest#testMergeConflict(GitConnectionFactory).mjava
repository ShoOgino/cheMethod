    @Test(dataProvider = "GitConnectionFactory", dataProviderClass = org.eclipse.che.git.impl.GitConnectionFactoryProvider.class)
    public void testMergeConflict(GitConnectionFactory connectionFactory) throws Exception {
        //given
        GitConnection connection = connectToGitRepositoryWithContent(connectionFactory, repository);
        connection.checkout(CheckoutParams.create(branchName).withCreateNew(true));
        addFile(connection, "t-merge-conflict", "aaa\n");
        connection.add(AddParams.create(new ArrayList<>(singletonList("."))));
        connection.commit(CommitParams.create("add file in new branch"));

        connection.checkout(CheckoutParams.create("master"));
        addFile(connection, "t-merge-conflict", "bbb\n");
        connection.add(AddParams.create(new ArrayList<>(singletonList("."))));
        connection.commit(CommitParams.create("add file in new branch"));
        //when
        MergeResult mergeResult = connection.merge(branchName);
        //then
        List<String> conflicts = mergeResult.getConflicts();
        assertEquals(conflicts.size(), 1);
        assertEquals(conflicts.get(0), "t-merge-conflict");

        assertEquals(mergeResult.getMergeStatus(), MergeResult.MergeStatus.CONFLICTING);

        String expContent = "<<<<<<< HEAD\n" //
                            + "bbb\n" //
                            + "=======\n" //
                            + "aaa\n" //
                            + ">>>>>>> MergeTestBranch\n";
        String actual = Files.toString(new File(connection.getWorkingDir(), "t-merge-conflict"), Charsets.UTF_8);
        assertEquals(actual, expContent);
    }

