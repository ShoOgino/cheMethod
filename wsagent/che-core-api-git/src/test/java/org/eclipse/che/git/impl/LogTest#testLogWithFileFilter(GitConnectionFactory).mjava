  @Test(
    dataProvider = "GitConnectionFactory",
    dataProviderClass = GitConnectionFactoryProvider.class
  )
  public void testLogWithFileFilter(GitConnectionFactory connectionFactory)
      throws GitException, IOException {
    //given
    GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
    addFile(connection, "README.txt", "someChanges");
    connection.add(AddParams.create(ImmutableList.of("README.txt")));
    connection.commit(CommitParams.create("Initial add"));

    addFile(connection, "README.txt", "newChanges");
    connection.add(AddParams.create(ImmutableList.of("README.txt")));
    connection.commit(CommitParams.create("Second commit"));

    addFile(connection, "README.txt", "otherChanges");
    connection.add(AddParams.create(ImmutableList.of("README.txt")));
    connection.commit(CommitParams.create("Third commit"));

    addFile(connection, "newFile.txt", "someChanges");
    connection.add(AddParams.create(ImmutableList.of("newFile.txt")));
    connection.commit(CommitParams.create("Add newFile.txt"));

    //when
    int readMeCommitCount =
        connection
            .log(LogParams.create().withFileFilter(Collections.singletonList("README.txt")))
            .getCommits()
            .size();
    int newFileCommitCount =
        connection
            .log(LogParams.create().withFileFilter(Collections.singletonList("newFile.txt")))
            .getCommits()
            .size();
    List<String> fileFilter = new ArrayList<>();
    fileFilter.add("README.txt");
    fileFilter.add("newFile.txt");
    int allFilesCommitCount =
        connection.log(LogParams.create().withFileFilter(fileFilter)).getCommits().size();

    //then
    assertEquals(3, readMeCommitCount);
    assertEquals(1, newFileCommitCount);
    assertEquals(4, allFilesCommitCount);
  }

