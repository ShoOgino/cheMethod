    @Test(dataProvider = "GitConnectionFactory", dataProviderClass = GitConnectionFactoryProvider.class)
    public void testFetchBranch(GitConnectionFactory connectionFactory)
            throws ServerException, IOException, UnauthorizedException, URISyntaxException {

        //given
        GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
        GitConnection fetchConnection = connectionFactory.getConnection(fetchTestRepo.getAbsolutePath());

        addFile(connection, "README", "readme content");
        connection.add(AddParams.create(singletonList(".")));
        connection.commit(CommitParams.create("fetch test"));
        //clone default repo into fetchRepo
        fetchConnection.clone(CloneParams.create(repository.getAbsolutePath()));

        //add new File into defaultRepository
        addFile(connection, "newfile1", "newfile1 content");
        //add file to index and make commit
        connection.add(AddParams.create(singletonList(".")));
        connection.commit(CommitParams.create("fetch test"));

        String branchName = "branch";
        connection.checkout(CheckoutParams.create(branchName).withCreateNew(true));
        addFile(connection, "otherfile1", "otherfile1 content");
        addFile(connection, "otherfile2", "otherfile2 content");
        connection.add(AddParams.create(singletonList(".")));
        connection.commit(CommitParams.create("fetch branch test"));

        //when
        fetchConnection.fetch(FetchParams.create(repository.getAbsolutePath()));
        //then
        //make merge with FETCH_HEAD
        fetchConnection.merge("FETCH_HEAD");
        assertTrue(new File(fetchTestRepo, "otherfile1").exists());
        assertTrue(new File(fetchTestRepo, "otherfile2").exists());
        assertEquals(fetchConnection.log(LogParams.create()).getCommits().get(0).getMessage(), "fetch branch test");
    }

