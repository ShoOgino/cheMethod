  @Test(
      dataProvider = "GitConnectionFactory",
      dataProviderClass = GitConnectionFactoryProvider.class)
  public void testLogSince(GitConnectionFactory connectionFactory)
      throws GitException, IOException, InterruptedException {
    // given
    GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
    addFile(connection, "1.txt", "someChanges");
    connection.add(AddParams.create());
    String firstCommitId = connection.commit(CommitParams.create("add 1.txt file")).getId();

    addFile(connection, "2.txt", "secondChanges");
    connection.add(AddParams.create());
    String secondCommitId = connection.commit(CommitParams.create("add 2.txt file")).getId();

    addFile(connection, "3.txt", "thirdChanges");
    connection.add(AddParams.create());
    String thirdCommitId = connection.commit(CommitParams.create("add 3.txt file")).getId();

    addFile(connection, "4.txt", "fourthChanges");
    connection.add(AddParams.create());
    String fourthCommitId = connection.commit(CommitParams.create("add 4.txt file")).getId();

    // when
    List<Revision> allCommits = connection.log(LogParams.create()).getCommits();
    List<Revision> secondAndThirdAndFourthCommits =
        connection
            .log(
                LogParams.create()
                    .withRevisionRangeSince(firstCommitId)
                    .withRevisionRangeUntil(fourthCommitId))
            .getCommits();
    List<Revision> thirdAndFourthCommits =
        connection
            .log(
                LogParams.create()
                    .withRevisionRangeSince(secondCommitId)
                    .withRevisionRangeUntil(fourthCommitId))
            .getCommits();

    // then
    assertEquals(4, allCommits.size());
    assertEquals(3, secondAndThirdAndFourthCommits.size());
    assertEquals(2, thirdAndFourthCommits.size());

    assertEquals(secondAndThirdAndFourthCommits.get(0).getMessage(), "add 4.txt file");
    assertEquals(secondAndThirdAndFourthCommits.get(1).getMessage(), "add 3.txt file");
    assertEquals(secondAndThirdAndFourthCommits.get(2).getMessage(), "add 2.txt file");

    assertEquals(thirdAndFourthCommits.get(0).getMessage(), "add 4.txt file");
    assertEquals(thirdAndFourthCommits.get(1).getMessage(), "add 3.txt file");
  }

