    @Test(dataProvider = "GitConnectionFactory", dataProviderClass = GitConnectionFactoryProvider.class)
    public void testLogSkip(GitConnectionFactory connectionFactory) throws GitException, IOException {
        //given
        GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
        addFile(connection, "1.txt", "someChanges");
        connection.add(newDto(AddRequest.class));
        connection.commit(newDto(CommitRequest.class).withMessage("add 1.txt file"));

        addFile(connection, "2.txt", "newChanges");
        connection.add(newDto(AddRequest.class));
        connection.commit(newDto(CommitRequest.class).withMessage("add 2.txt file"));

        addFile(connection, "3.txt", "otherChanges");
        connection.add(newDto(AddRequest.class));
        connection.commit(newDto(CommitRequest.class).withMessage("add 3.txt file"));

        addFile(connection, "4.txt", "someChanges");
        connection.add(newDto(AddRequest.class));
        connection.commit(newDto(CommitRequest.class).withMessage("add 4.txt file"));

        //when
        List<Revision> allCommits =
            connection.log(newDto(LogRequest.class)).getCommits();
        List<Revision> firstBucketOfCommits =
            connection.log(newDto(LogRequest.class).withSkip(1)).getCommits();
        List<Revision> secondBucketOfCommits =
            connection.log(newDto(LogRequest.class).withSkip(3)).getCommits();

        //then
        assertEquals(4, allCommits.size());

        assertEquals(3, firstBucketOfCommits.size());
        assertEquals(firstBucketOfCommits.get(0).getMessage(), "add 3.txt file");
        assertEquals(firstBucketOfCommits.get(0).getBranches().get(0).getName(), "refs/heads/master");
        assertEquals(firstBucketOfCommits.get(0).getDiffCommitFile().get(0).getOldPath(), "/dev/null");
        assertEquals(firstBucketOfCommits.get(0).getDiffCommitFile().get(0).getNewPath(), "3.txt");
        assertEquals(firstBucketOfCommits.get(0).getDiffCommitFile().get(0).getChangeType(), "ADD");

        assertEquals(firstBucketOfCommits.get(1).getMessage(), "add 2.txt file");
        assertEquals(firstBucketOfCommits.get(1).getBranches().get(0).getName(), "refs/heads/master");
        assertEquals(firstBucketOfCommits.get(1).getDiffCommitFile().get(0).getOldPath(), "/dev/null");
        assertEquals(firstBucketOfCommits.get(1).getDiffCommitFile().get(0).getNewPath(), "2.txt");
        assertEquals(firstBucketOfCommits.get(1).getDiffCommitFile().get(0).getChangeType(), "ADD");

        assertEquals(firstBucketOfCommits.get(2).getMessage(), "add 1.txt file");
        assertEquals(firstBucketOfCommits.get(2).getBranches().get(0).getName(), "refs/heads/master");
        assertEquals(firstBucketOfCommits.get(2).getDiffCommitFile().get(0).getOldPath(), "/dev/null");
        assertEquals(firstBucketOfCommits.get(2).getDiffCommitFile().get(0).getNewPath(), "1.txt");
        assertEquals(firstBucketOfCommits.get(2).getDiffCommitFile().get(0).getChangeType(), "ADD");

        assertEquals(1, secondBucketOfCommits.size());

        assertEquals(secondBucketOfCommits.get(0).getMessage(), "add 1.txt file");
        assertEquals(secondBucketOfCommits.get(0).getBranches().get(0).getName(), "refs/heads/master");
        assertEquals(secondBucketOfCommits.get(0).getDiffCommitFile().get(0).getOldPath(), "/dev/null");
        assertEquals(secondBucketOfCommits.get(0).getDiffCommitFile().get(0).getNewPath(), "1.txt");
        assertEquals(secondBucketOfCommits.get(0).getDiffCommitFile().get(0).getChangeType(), "ADD");
    }

