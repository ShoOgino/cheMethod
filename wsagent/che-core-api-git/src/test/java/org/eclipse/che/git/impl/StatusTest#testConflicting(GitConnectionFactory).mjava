  @Test(
    dataProvider = "GitConnectionFactory",
    dataProviderClass = org.eclipse.che.git.impl.GitConnectionFactoryProvider.class
  )
  public void testConflicting(GitConnectionFactory connectionFactory) throws Exception {
    // given
    GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
    addFile(connection, "a", "a content");
    addFile(connection, "b", "b content");
    // add "a" and "b"
    connection.add(AddParams.create(ImmutableList.of("a", "b")));
    // commit "a" and "b"
    connection.commit(CommitParams.create("add 2 test files"));
    // switch to other branch
    connection.checkout(CheckoutParams.create("new_branch").withCreateNew(true));
    // modify and commit "a"
    addFile(connection, "a", "new_branch a content");
    connection.commit(CommitParams.create("a changed in new_branch").withAll(true));
    // switch back to master
    connection.checkout(CheckoutParams.create("master"));
    // modify and commit "a"
    addFile(connection, "a", "master content");
    connection.commit(CommitParams.create("a changed in master").withAll(true));
    // merge with "new_branch" to get conflict
    connection.merge("new_branch");
    // when
    final Status status = connection.status(emptyList());
    // then
    assertEquals(status.getConflicting(), ImmutableList.of("a"));
    assertTrue(status.getModified().isEmpty());
    assertTrue(status.getAdded().isEmpty());
    assertTrue(status.getUntracked().isEmpty());
    assertTrue(status.getMissing().isEmpty());
    assertTrue(status.getRemoved().isEmpty());
    assertTrue(status.getUntrackedFolders().isEmpty());
  }

