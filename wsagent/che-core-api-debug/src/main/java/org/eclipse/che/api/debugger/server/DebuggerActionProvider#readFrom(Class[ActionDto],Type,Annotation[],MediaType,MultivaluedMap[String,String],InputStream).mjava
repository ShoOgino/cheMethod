    @Override
    public ActionDto readFrom(Class<ActionDto> type,
                              Type genericType,
                              Annotation[] annotations,
                              MediaType mediaType,
                              MultivaluedMap<String, String> httpHeaders,
                              InputStream entityStream) throws IOException, WebApplicationException {
        String json = CharStreams.toString(new BufferedReader(new InputStreamReader(entityStream)));

        JsonParser jsonParser = new JsonParser();
        JsonElement jsonElement = jsonParser.parse(json);
        JsonObject jsonObject = jsonElement.getAsJsonObject();


        if (!jsonObject.has("type")) {
            throw new IOException("Json is broken. There is not type key in json object");
        }

        Action.TYPE actionType = Action.TYPE.valueOf(jsonObject.get("type").getAsString());
        switch (actionType) {
            case RESUME:
                return DtoFactory.getInstance().createDtoFromJson(json, ResumeActionDto.class);
            case START:
                return DtoFactory.getInstance().createDtoFromJson(json, StartActionDto.class);
            case STEP_INTO:
                return DtoFactory.getInstance().createDtoFromJson(json, StepIntoActionDto.class);
            case STEP_OUT:
                return DtoFactory.getInstance().createDtoFromJson(json, StepOutActionDto.class);
            case STEP_OVER:
                return DtoFactory.getInstance().createDtoFromJson(json, StepOverActionDto.class);
            default:
                throw new IOException("Can't parse json. Unknown action type: "  + actionType);
        }
    }

