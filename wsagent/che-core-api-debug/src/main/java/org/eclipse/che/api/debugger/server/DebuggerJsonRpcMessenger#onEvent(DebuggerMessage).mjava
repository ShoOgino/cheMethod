  @Override
  public void onEvent(DebuggerMessage event) {
    switch (event.getDebuggerEvent().getType()) {
      case SUSPEND:
        SuspendEvent suspendEvent = (SuspendEvent) event.getDebuggerEvent();
        final SuspendEventDto suspendEventDto =
            newDto(SuspendEventDto.class)
                .withType(DebuggerEvent.TYPE.SUSPEND)
                .withLocation(asDto(suspendEvent.getLocation()))
                .withSuspendPolicy(suspendEvent.getSuspendPolicy());
        endpointIds.forEach(
            it ->
                transmitter
                    .newRequest()
                    .endpointId(it)
                    .methodName(EVENT_DEBUGGER_MESSAGE_SUSPEND)
                    .paramsAsDto(suspendEventDto)
                    .sendAndSkipResult());
        break;
      case BREAKPOINT_ACTIVATED:
        final BreakpointDto breakpointDto =
            asDto(((BreakpointActivatedEvent) event.getDebuggerEvent()).getBreakpoint());
        final BreakpointActivatedEventDto breakpointActivatedEvent =
            newDto(BreakpointActivatedEventDto.class)
                .withType(DebuggerEvent.TYPE.BREAKPOINT_ACTIVATED)
                .withBreakpoint(breakpointDto);
        endpointIds.forEach(
            it ->
                transmitter
                    .newRequest()
                    .endpointId(it)
                    .methodName(EVENT_DEBUGGER_MESSAGE_BREAKPOINT)
                    .paramsAsDto(breakpointActivatedEvent)
                    .sendAndSkipResult());
        break;
      case DISCONNECT:
        final DisconnectEventDto disconnectEvent =
            newDto(DisconnectEventDto.class).withType(DebuggerEvent.TYPE.DISCONNECT);
        endpointIds.forEach(
            it ->
                transmitter
                    .newRequest()
                    .endpointId(it)
                    .methodName(EVENT_DEBUGGER_MESSAGE_DISCONNECT)
                    .paramsAsDto(disconnectEvent)
                    .sendAndSkipResult());
        break;
      default:
    }
  }

