    /**
     * Show changes between specified revision and index. If
     * <code>commitId == null</code> then view changes between HEAD and index.
     *
     * @param commitId
     *            id of commit, pass <code>null</code> is the same as pass HEAD
     * @param formatter
     *            diff formatter
     * @return list of diff entries
     * @throws IOException
     *             if any i/o errors occurs
     */
    private List<DiffEntry> commitToIndex(String commitId, DiffFormatter formatter) throws IOException {
        if (commitId == null) {
            commitId = Constants.HEAD;
        }

        ObjectId commitA = repository.resolve(commitId);
        if (commitA == null) {
            throw new IllegalArgumentException("Invalid commit id " + commitId);
        }
        RevTree treeA;
        try (RevWalk revWalkA = new RevWalk(repository)) {
            treeA = revWalkA.parseTree(commitA);
        }

        DirCache dirCache = null;
        List<DiffEntry> diff;
        try (ObjectReader reader = repository.newObjectReader()) {
            dirCache = repository.lockDirCache();
            CanonicalTreeParser iterA = new CanonicalTreeParser();
            iterA.reset(reader, treeA);
            DirCacheIterator iterB = new DirCacheIterator(dirCache);
            if (!params.isNoRenames()) {
                // Use embedded RenameDetector it works well with index and
                // revision history.
                formatter.setDetectRenames(true);
                int renameLimit = params.getRenameLimit();
                if (renameLimit > 0) {
                    formatter.getRenameDetector().setRenameLimit(renameLimit);
                }
            }
            diff = formatter.scan(iterA, iterB);
        } finally {
            if (dirCache != null) {
                dirCache.unlock();
            }
        }
        return diff;
    }

