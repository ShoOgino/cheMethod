  @Override
  public void remoteAdd(RemoteAddParams params) throws GitException {
    String remoteName = params.getName();
    if (isNullOrEmpty(remoteName)) {
      throw new GitException(ERROR_ADD_REMOTE_NAME_MISSING);
    }

    StoredConfig config = repository.getConfig();
    Set<String> remoteNames = config.getSubsections("remote");
    if (remoteNames.contains(remoteName)) {
      throw new GitException(format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS, remoteName));
    }

    String url = params.getUrl();
    if (isNullOrEmpty(url)) {
      throw new GitException(ERROR_ADD_REMOTE_URL_MISSING);
    }

    RemoteConfig remoteConfig;
    try {
      remoteConfig = new RemoteConfig(config, remoteName);
    } catch (URISyntaxException exception) {
      // Not happen since it is newly created remote.
      throw new GitException(exception.getMessage(), exception);
    }

    try {
      remoteConfig.addURI(new URIish(url));
    } catch (URISyntaxException exception) {
      throw new GitException("Remote url " + url + " is invalid. ");
    }

    List<String> branches = params.getBranches();
    if (branches.isEmpty()) {
      remoteConfig.addFetchRefSpec(
          new RefSpec(R_HEADS + "*" + ":" + R_REMOTES + remoteName + "/*").setForceUpdate(true));
    } else {
      for (String branch : branches) {
        remoteConfig.addFetchRefSpec(
            new RefSpec(R_HEADS + branch + ":" + R_REMOTES + remoteName + "/" + branch)
                .setForceUpdate(true));
      }
    }

    remoteConfig.update(config);

    try {
      config.save();
    } catch (IOException exception) {
      throw new GitException(exception.getMessage(), exception);
    }
  }

