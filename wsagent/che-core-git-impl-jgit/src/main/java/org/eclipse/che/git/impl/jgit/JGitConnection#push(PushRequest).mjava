    @Override
    public PushResponse push(PushRequest request) throws GitException, UnauthorizedException {
        String remoteName = request.getRemote();
        String remoteUri = getRepository().getConfig().getString(ConfigConstants.CONFIG_REMOTE_SECTION, remoteName,
                ConfigConstants.CONFIG_KEY_URL);
        PushResponse pushResponseDto = newDto(PushResponse.class);
        try {
            PushCommand pushCommand = getGit().push();

            if (request.getRemote() != null) {
                pushCommand.setRemote(remoteName);
            }
            List<String> refSpec = request.getRefSpec();
            if (!refSpec.isEmpty()) {
                List<RefSpec> refSpecInst = new ArrayList<>(refSpec.size());
                refSpecInst.addAll(refSpec.stream().map(RefSpec::new).collect(Collectors.toList()));
                pushCommand.setRefSpecs(refSpecInst);
            }

            pushCommand.setForce(request.isForce());

            int timeout = request.getTimeout();
            if (timeout > 0) {
                pushCommand.setTimeout(timeout);
            }

            @SuppressWarnings("unchecked")
            Iterable<PushResult> pushResults = (Iterable<PushResult>)executeRemoteCommand(remoteUri, pushCommand);
            PushResult pushResult = pushResults.iterator().next();
            return addCommandOutputUpdates(pushResponseDto, request, pushResult);
        } catch (GitAPIException exception) {
            if ("origin: not found.".equals(exception.getMessage())) {
                throw new GitException(ERROR_NO_REMOTE_REPOSITORY, exception);
            } else {
                throw new GitException(exception.getMessage(), exception);
            }
        }
    }

