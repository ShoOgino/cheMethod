    @Override
    public Revision commit(CommitParams params) throws GitException {
        try {
            String message = params.getMessage();
            GitUser committer = getUser();
            if (message == null) {
                throw new GitException("Message wasn't set");
            }
            if (committer == null) {
                throw new GitException("Committer can't be null");
            }

            //Check that there are staged changes present for commit, or any changes if is 'isAll' enabled, otherwise throw exception
            Status status = status(StatusFormat.SHORT);
            if (!params.isAmend() && !params.isAll()
                && status.getAdded().isEmpty() && status.getChanged().isEmpty() && status.getRemoved().isEmpty()) {
                throw new GitException("No changes added to commit");
            } else if (!params.isAmend() && params.isAll() && status.isClean()) {
                throw new GitException("Nothing to commit, working directory clean");
            }

            String committerName = committer.getName();
            String committerEmail = committer.getEmail();
            if (committerName == null || committerEmail == null) {
                throw new GitException("Git user name and (or) email wasn't set", ErrorCodes.NO_COMMITTER_NAME_OR_EMAIL_DEFINED);
            }
            if (!repository.getRepositoryState().canCommit()) {
                Revision rev = newDto(Revision.class);
                rev.setMessage(format(MESSAGE_COMMIT_NOT_POSSIBLE, repository.getRepositoryState().getDescription()));
                return rev;
            }

            if (params.isAmend() && !repository.getRepositoryState().canAmend()) {
                Revision rev = newDto(Revision.class);
                rev.setMessage(format(MESSAGE_COMMIT_AMEND_NOT_POSSIBLE, repository.getRepositoryState().getDescription()));
                return rev;
            }

            CommitCommand commitCommand = getGit().commit()
                                                  .setCommitter(committerName, committerEmail).setAuthor(committerName, committerEmail)
                                                  .setMessage(message)
                                                  .setAll(params.isAll())
                                                  .setAmend(params.isAmend());

            if (!params.isAll()) {
                params.getFiles().forEach(commitCommand::setOnly);
            }

            // Check if repository is configured with Gerrit Support
            String gerritSupportConfigValue = repository.getConfig().getString(ConfigConstants.CONFIG_GERRIT_SECTION, null,
                                                                               ConfigConstants.CONFIG_KEY_CREATECHANGEID);
            boolean isGerritSupportConfigured = gerritSupportConfigValue != null ? Boolean.valueOf(gerritSupportConfigValue) : false;
            commitCommand.setInsertChangeId(isGerritSupportConfigured);
            RevCommit result = commitCommand.call();
            GitUser gitUser = newDto(GitUser.class).withName(committerName).withEmail(committerEmail);

            return newDto(Revision.class).withBranch(getCurrentBranch())
                                         .withId(result.getId().getName()).withMessage(result.getFullMessage())
                                         .withCommitTime(MILLISECONDS.convert(result.getCommitTime(), SECONDS)).withCommitter(gitUser);
        } catch (GitAPIException exception) {
            throw new GitException(exception.getMessage(), exception);
        }
    }

