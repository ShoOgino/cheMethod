    /**
     * Execute remote jgit command.
     *
     * @param remoteUrl
     *         remote url
     * @param command
     *         command to execute
     * @return executed command
     * @throws GitException
     * @throws GitAPIException
     * @throws UnauthorizedException
     */
    private Object executeRemoteCommand(String remoteUrl, TransportCommand command)
            throws GitException, GitAPIException, UnauthorizedException {
        File keyDirectory = null;
        UserCredential credentials = null;
        try {
            if (GitUrlUtils.isSSH(remoteUrl)) {
                keyDirectory =  Files.createTempDir();
                final File sshKey = writePrivateKeyFile(remoteUrl, keyDirectory);

                SshSessionFactory sshSessionFactory = new JschConfigSessionFactory() {
                    @Override
                    protected void configure(OpenSshConfig.Host host, Session session) {
                        session.setConfig("StrictHostKeyChecking", "no");
                    }

                    @Override
                    protected JSch getJSch(final OpenSshConfig.Host hc, FS fs) throws JSchException {
                        JSch jsch = super.getJSch(hc, fs);
                        jsch.removeAllIdentity();
                        jsch.addIdentity(sshKey.getAbsolutePath());
                        return jsch;
                    }
                };
                command.setTransportConfigCallback(new TransportConfigCallback() {
                    @Override
                    public void configure(Transport transport) {
                        SshTransport sshTransport = (SshTransport)transport;
                        sshTransport.setSshSessionFactory(sshSessionFactory);
                    }
                });
            } else {
                credentials = credentialsLoader.getUserCredential(remoteUrl);
                if (credentials != null) {
                    command.setCredentialsProvider(new UsernamePasswordCredentialsProvider(credentials.getUserName(),
                                                                                           credentials.getPassword()));
                }
            }

            ProxyAuthenticator.initAuthenticator(remoteUrl);

            return command.call();
        } catch (GitException | TransportException exception) {
            if ("Unable get private ssh key".equals(exception.getMessage())) {
                throw new UnauthorizedException(exception.getMessage(), ErrorCodes.UNABLE_GET_PRIVATE_SSH_KEY);
            } else if (exception.getMessage().contains(ERROR_AUTHENTICATION_REQUIRED)) {
                final ProviderInfo info = credentialsLoader.getProviderInfo(remoteUrl);
                if (info != null) {
                    throw new UnauthorizedException(exception.getMessage(),
                                                    ErrorCodes.UNAUTHORIZED_GIT_OPERATION,
                                                    ImmutableMap.of(PROVIDER_NAME, info.getProviderName(),
                                                                    AUTHENTICATE_URL, info.getAuthenticateUrl(),
                                                                    "authenticated", Boolean.toString(credentials != null)));
                }
                throw new UnauthorizedException(exception.getMessage(), ErrorCodes.UNAUTHORIZED_GIT_OPERATION);
            } else {
                throw exception;
            }
        } finally {
            if (keyDirectory != null && keyDirectory.exists()) {
                try {
                    FileUtils.delete(keyDirectory, FileUtils.RECURSIVE);
                } catch (IOException exception) {
                    throw new GitException("Can't remove SSH key directory", exception);
                }
            }

            ProxyAuthenticator.resetAuthenticator();
        }
    }

