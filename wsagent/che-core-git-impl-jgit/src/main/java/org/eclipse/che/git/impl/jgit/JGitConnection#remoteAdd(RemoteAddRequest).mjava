    @Override
    public void remoteAdd(RemoteAddRequest request) throws GitException {
        String remoteName = request.getName();
        if (isNullOrEmpty(remoteName)) {
            throw new IllegalArgumentException(ERROR_ADD_REMOTE_NAME_MISSING);
        }

        StoredConfig config = repository.getConfig();
        Set<String> remoteNames = config.getSubsections("remote");
        if (remoteNames.contains(remoteName)) {
            throw new IllegalArgumentException(String.format(ERROR_ADD_REMOTE_NAME_ALREADY_EXISTS, remoteName));
        }

        String url = request.getUrl();
        if (isNullOrEmpty(url)) {
            throw new IllegalArgumentException(ERROR_ADD_REMOTE_URL_MISSING);
        }

        RemoteConfig remoteConfig;
        try {
            remoteConfig = new RemoteConfig(config, remoteName);
        } catch (URISyntaxException exception) {
            // Not happen since it is newly created remote.
            throw new GitException(exception.getMessage(), exception);
        }

        try {
            remoteConfig.addURI(new URIish(url));
        } catch (URISyntaxException exception) {
            throw new IllegalArgumentException("Remote url " + url + " is invalid. ");
        }

        List<String> branches = request.getBranches();
        if (branches.isEmpty()) {
            remoteConfig.addFetchRefSpec(
                    new RefSpec(Constants.R_HEADS + "*" + ":" + Constants.R_REMOTES + remoteName + "/*").setForceUpdate(true));
        } else {
            for (String branch : branches) {
                remoteConfig.addFetchRefSpec(new RefSpec(Constants.R_HEADS + branch + ":" + Constants.R_REMOTES + remoteName + "/" + branch)
                                                     .setForceUpdate(true));
            }
        }

        remoteConfig.update(config);

        try {
            config.save();
        } catch (IOException exception) {
            throw new GitException(exception.getMessage(), exception);
        }
    }

