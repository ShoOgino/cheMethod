    @GET
    @Path("/item/{path:.*}")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Get file or folder",
            response = ItemReference.class)
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 403, message = "User not authorized to call this operation"),
                   @ApiResponse(code = 404, message = "Not found"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    public ItemReference getItem(@ApiParam(value = "Workspace ID", required = true)
                                 @PathParam("ws-id") String workspace,
                                 @ApiParam(value = "Path to resource. Can be project or its folders", required = true)
                                 @PathParam("path") String path) throws NotFoundException,
                                                                        ForbiddenException,
                                                                        ServerException,
                                                                        ValueStorageException,
                                                                        ProjectTypeConstraintException {
        final VirtualFileEntry entry = projectManager.getProjectsRoot().getChild(path);

        if (entry == null) {
            throw new NotFoundException("Project " + path + " was not found");
        }

        final UriBuilder uriBuilder = getServiceContext().getServiceUriBuilder();

        final ItemReference item;
        if (entry.isFile()) {
            item = DtoConverter.toItemReference((FileEntry)entry, workspace, uriBuilder.clone());
        } else {
            item = DtoConverter.toItemReference((FolderEntry)entry, workspace, uriBuilder.clone());
        }

        return item;
    }

