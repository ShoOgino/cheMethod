    private BiConsumer<String, FileTrackingOperationDto> getFileTrackingOperationConsumer() {
        return (String endpointId, FileTrackingOperationDto operation) -> {
            Type type = operation.getType();
            String path = operation.getPath();
            String oldPath = operation.getOldPath();

            switch (type) {
                case START: {
                    String key = path + endpointId;
                    LOG.debug("Received file tracking operation START trigger key : {}", key);
                    if (watchIdRegistry.containsKey(key)) {
                        LOG.debug("Already registered {}", key);
                        return;
                    }
                    int id = fileWatcherManager.registerByPath(path,
                                                               getCreateConsumer(endpointId, path),
                                                               getModifyConsumer(endpointId, path),
                                                               getDeleteConsumer(endpointId, path));
                    watchIdRegistry.put(key, id);
                    break;
                }
                case STOP: {
                    LOG.debug("Received file tracking operation STOP trigger.");

                    int id = watchIdRegistry.remove(path + endpointId);
                    fileWatcherManager.unRegisterByPath(id);

                    break;
                }
                case SUSPEND: {
                    LOG.debug("Received file tracking operation SUSPEND trigger.");

                    fileWatcherManager.suspend();

                    break;
                }
                case RESUME: {
                    LOG.debug("Received file tracking operation RESUME trigger.");

                    fileWatcherManager.resume();

                    break;
                }
                case MOVE: {
                    LOG.debug("Received file tracking operation MOVE trigger.");

                    int oldId = watchIdRegistry.remove(oldPath + endpointId);
                    fileWatcherManager.unRegisterByPath(oldId);

                    int newId = fileWatcherManager.registerByPath(path,
                                                                  getCreateConsumer(endpointId, path),
                                                                  getModifyConsumer(endpointId, path),
                                                                  getDeleteConsumer(endpointId, path));
                    watchIdRegistry.put(path + endpointId, newId);


                    break;
                }
                default: {
                    LOG.error("Received file tracking operation UNKNOWN trigger.");

                    break;
                }
            }
        };
    }

