    ProjectTypes(String projectPath,
                 String type,
                 List<String> mixinTypes,
                 ProjectTypeRegistry projectTypeRegistry,
                 List<Problem> problems) {
        mixins = new HashMap<>();
        all = new HashMap<>();
        attributeDefs = new HashMap<>();
        this.problems = problems != null ? problems : newArrayList();

        this.projectTypeRegistry = projectTypeRegistry;
        this.projectPath = projectPath;

        ProjectTypeDef tmpPrimary;
        if (type == null) {
            this.problems.add(new Problem(12, "No primary type defined for " + projectPath + " Base Project Type assigned."));
            tmpPrimary = ProjectTypeRegistry.BASE_TYPE;
        } else {
            try {
                tmpPrimary = projectTypeRegistry.getProjectType(type);
            } catch (NotFoundException e) {
                this.problems.add(new Problem(12, "Primary type " + type + " defined for " + projectPath +
                                             " is not registered. Base Project Type assigned."));
                tmpPrimary = ProjectTypeRegistry.BASE_TYPE;
            }

            if (!tmpPrimary.isPrimaryable()) {
                this.problems.add(new Problem(12, "Project type " + tmpPrimary.getId() + " is not allowable to be primary type. Base Project Type assigned."));
                tmpPrimary = ProjectTypeRegistry.BASE_TYPE;
            }
        }

        this.primary = tmpPrimary;
        all.put(primary.getId(), primary);

        List<String> mixinsFromConfig = mixinTypes;

        if (mixinsFromConfig == null) {
            mixinsFromConfig = new ArrayList<>();
        }

        for (Attribute attr : primary.getAttributes()) {
            attributeDefs.put(attr.getName(), attr);
        }

        for (String mixinFromConfig : mixinsFromConfig) {
            if (mixinFromConfig.equals(primary.getId())) {
                continue;
            }

            final ProjectTypeDef mixin;
            try {
                mixin = projectTypeRegistry.getProjectType(mixinFromConfig);
            } catch (NotFoundException e) {
                this.problems.add(new Problem(12, "Project type " + mixinFromConfig + " is not registered. Skipped."));
                continue;
            }

            if (!mixin.isMixable()) {
                this.problems.add(new Problem(12, "Project type " + mixin + " is not allowable to be mixin. It not mixable. Skipped."));
                continue;
            }

            if (!mixin.isPersisted()) {
                continue;
            }

            // detect duplicated attributes
            for (Attribute attr : mixin.getAttributes()) {
                final String attrName = attr.getName();
                if (attributeDefs.containsKey(attrName)) {
                    this.problems.add(new Problem(13,
                                                  format("Attribute name conflict. Duplicated attributes detected for %s. " +
                                                         "Attribute %s declared in %s already declared in %s. Skipped.",
                                                         projectPath, attrName, mixin.getId(), attributeDefs.get(attrName).getProjectType())));
                    continue;
                }
                attributeDefs.put(attrName, attr);
            }

            // Silently remove repeated items from mixins if any
            mixins.put(mixinFromConfig, mixin);
            all.put(mixinFromConfig, mixin);
        }
    }

