    /**
     * Prepare result for client, add additional information like line number and line content where found given text
     * @param searchResultEntries
     * @return
     * @throws ServerException
     */
    private List<SearchResultDto> prepareResults(List<SearchResultEntry> searchResultEntries) throws ServerException {
        List<SearchResultDto> results = new ArrayList<>(searchResultEntries.size());
        FolderEntry root = projectManager.getProjectsRoot();

        for (SearchResultEntry searchResultEntry : searchResultEntries) {
            VirtualFileEntry child = root.getChild(searchResultEntry.getFilePath());
            if (child != null && child.isFile()) {
                ItemReference itemReference = injectFileLinks(asDto((FileEntry)child));
                File file = child.getVirtualFile().toIoFile();
                List<LuceneSearcher.OffsetData> datas = searchResultEntry.getData();
                List<SearchOccurrenceDto> searchOccurrences = new ArrayList<>(datas.size());
                for (LuceneSearcher.OffsetData data : datas) {
                    try {
                        Line line = getLine(file, data.startOffset);
                        SearchOccurrenceDto searchOccurrenceDto = DtoFactory.getInstance().createDto(SearchOccurrenceDto.class)
                                                                            .withPhrase(data.phrase)
                                                                            .withScore(data.score)
                                                                            .withStartOffset(data.startOffset)
                                                                            .withEndOffset(data.endOffset)
                                                                            .withLineNumber(line.getLineNumber())
                                                                            .withLineContent(line.getLineContent());
                        searchOccurrences.add(searchOccurrenceDto);
                    } catch (IOException e) {
                        throw new ServerException(e);
                    }
                }
                SearchResultDto searchResultDto = DtoFactory.getInstance().createDto(SearchResultDto.class);
                results.add(searchResultDto.withItemReference(itemReference).withSearchOccurrences(searchOccurrences));
            }
        }
        return results;
    }

