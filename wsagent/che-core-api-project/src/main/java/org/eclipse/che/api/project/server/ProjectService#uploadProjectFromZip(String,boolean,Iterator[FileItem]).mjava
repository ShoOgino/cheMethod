  @POST
  @Path("/upload/zipproject/{path:.*}")
  @Consumes({MediaType.MULTIPART_FORM_DATA})
  @Produces(MediaType.APPLICATION_JSON)
  @ApiOperation(
      value = "Upload zip project",
      notes = "Upload project from local zip",
      response = ProjectConfigDto.class)
  @ApiResponses({
    @ApiResponse(code = 200, message = ""),
    @ApiResponse(code = 401, message = "User not authorized to call this operation"),
    @ApiResponse(code = 403, message = "Forbidden operation"),
    @ApiResponse(code = 409, message = "Resource already exists"),
    @ApiResponse(code = 500, message = "Unsupported source type")
  })
  public List<SourceEstimation> uploadProjectFromZip(
      @ApiParam(value = "Path in the project", required = true) @PathParam("path") String wsPath,
      @ApiParam(value = "Force rewrite existing project", allowableValues = "true,false")
          @QueryParam("force")
          boolean force,
      Iterator<FileItem> formData)
      throws ServerException, ConflictException, ForbiddenException, NotFoundException,
          BadRequestException {

    return getProjectServiceApi().uploadProjectFromZip(wsPath, force, formData);
  }

