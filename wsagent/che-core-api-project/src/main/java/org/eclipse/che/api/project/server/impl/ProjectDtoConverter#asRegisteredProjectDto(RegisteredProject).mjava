  /**
   * Converts abstract RegisteredProject to RegisteredProjectDto
   *
   * @param project RegisteredProject
   * @return RegisteredProjectDto
   */
  public static RegisteredProjectDto asRegisteredProjectDto(RegisteredProject project) {
    return newDto(RegisteredProjectDto.class)
        .withName(project.getName())
        .withPath(project.getPath())
        .withDescription(project.getDescription())
        .withSource(asDto(project.getSource()))
        .withAttributes(project.getAttributes())
        .withType(project.getType())
        .withMixins(project.getMixins())
        .withBaseFolder(project.getBaseFolder())
        .withDetected(project.isDetected())
        .withSynced(project.isSynced())
        .withPersistableAttributes(project.getPersistableAttributes())
        .withProblems(
            project
                .getProblems()
                .stream()
                .map(ProjectDtoConverter::asDto)
                .collect(Collectors.toList()));
  }

