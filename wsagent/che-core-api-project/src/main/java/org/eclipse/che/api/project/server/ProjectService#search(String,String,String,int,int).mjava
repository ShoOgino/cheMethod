  @GET
  @Path("/search/{path:.*}")
  @Produces(MediaType.APPLICATION_JSON)
  @ApiOperation(
    value = "Search for resources",
    notes = "Search for resources applying a number of search filters as query parameters",
    response = SearchResult.class,
    responseContainer = "List"
  )
  @ApiResponses({
    @ApiResponse(code = 200, message = "OK"),
    @ApiResponse(code = 403, message = "User not authorized to call this operation"),
    @ApiResponse(code = 404, message = "Not found"),
    @ApiResponse(code = 409, message = "Conflict error"),
    @ApiResponse(code = 500, message = "Internal Server Error")
  })
  public ProjectSearchResponseDto search(
      @ApiParam(value = "Path to resource, i.e. where to search?", required = true)
          @PathParam("path")
          String wsPath,
      @ApiParam(value = "Resource name") @QueryParam("name") String name,
      @ApiParam(value = "Search keywords") @QueryParam("text") String text,
      @ApiParam(
            value = "Maximum items to display. If this parameter is dropped, there are no limits"
          )
          @QueryParam("maxItems")
          @DefaultValue("-1")
          int maxItems,
      @ApiParam(value = "Skip count") @QueryParam("skipCount") int skipCount)
      throws NotFoundException, ServerException, BadRequestException {

    return getProjectServiceApi().search(wsPath, name, text, maxItems, skipCount);
  }

