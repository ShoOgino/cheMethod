    @Override
    public Optional<HiEvent<ProjectTreeChangesDetector>> detect(EventTreeNode eventTreeNode) {
        if (!eventTreeNode.isRoot() || eventTreeNode.getChildren().isEmpty()) {
            return Optional.empty();
        }

        if (state == State.RESUMED) {
            final Set<EventTreeNode> directories = new HashSet<>();

            for (EventTreeNode candidateDir : eventTreeNode.stream()
                                                           .filter(EventTreeNode::modificationOccurred)
                                                           .filter(EventTreeNode::isDir)
                                                           .collect(toSet())) {
                directories.removeIf(dir -> dir.getPath().contains(candidateDir.getPath()));

                if (directories.stream().noneMatch(dir -> candidateDir.getPath().contains(dir.getPath()))) {
                    directories.add(candidateDir);
                }
            }

            for (EventTreeNode node : directories) {
                final String path = node.getPath();
                final FileWatcherEventType lastEventType = node.getLastEventType();

                transmit(path, lastEventType);
            }
        }

        return Optional.empty();
    }

