  @Override
  public void accept(Path path) {
    if (!exists(path)) {
      if (pathWatchRegistrations.containsKey(path)) {
        pathWatchRegistrations.remove(path).forEach(watcher::unwatch);
      }
      paths.values().forEach(it -> it.remove(path));
      paths.entrySet().removeIf(it -> it.getValue().isEmpty());
      return;
    }

    for (PathMatcher matcher : matchers.keySet()) {
      if (matcher.matches(path)) {
        for (int operationId : matchers.get(matcher)) {
          paths.putIfAbsent(operationId, newConcurrentHashSet());
          if (paths.get(operationId).contains(path)) {
            return;
          }

          paths.get(operationId).add(path);

          Operation operation = operations.get(operationId);
          int pathWatcherOperationId =
              watcher.watch(path, operation.create, operation.modify, operation.delete);
          pathWatchRegistrations.putIfAbsent(path, newConcurrentHashSet());
          pathWatchRegistrations.get(path).add(pathWatcherOperationId);
          operation.create.accept(toInternalPath(root.toPath(), path));
        }
      }
    }
  }

