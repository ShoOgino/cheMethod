    /**
     * Create project:
     * - take project config
     *
     * @param projectConfig
     *         project configuration
     * @param options
     *         options for generator
     *
     * @return new project
     *
     * @throws ConflictException
     * @throws ForbiddenException
     * @throws ServerException
     * @throws NotFoundException
     */
    public RegisteredProject createProject(ProjectConfig projectConfig, Map<String, String> options) throws ConflictException,
                                                                                                            ForbiddenException,
                                                                                                            ServerException,
                                                                                                            NotFoundException {
        projectTreeChangesDetector.suspend();
        try {
            // path and primary type is mandatory
            if (projectConfig.getPath() == null) {
                throw new ConflictException("Path for new project should be defined ");
            }

            final String path = ProjectRegistry.absolutizePath(projectConfig.getPath());

            if (projectConfig.getType() == null) {
                throw new ConflictException("Project Type is not defined " + path);
            }

            if (projectRegistry.getProject(path) != null) {
                throw new ConflictException("Project config already exists " + path);
            }

            final FolderEntry projectFolder = new FolderEntry(vfs.getRoot().createFolder(path), projectRegistry);
            final CreateProjectHandler generator = handlers.getCreateProjectHandler(projectConfig.getType());

            if (generator != null) {
                Map<String, AttributeValue> valueMap = new HashMap<>();
                Map<String, List<String>> attributes = projectConfig.getAttributes();

                if (attributes != null) {
                    for (Map.Entry<String, List<String>> entry : attributes.entrySet()) {
                        valueMap.put(entry.getKey(), new AttributeValue(entry.getValue()));
                    }
                }

                if (options == null) {
                    options = new HashMap<>();
                }
                generator.onCreateProject(projectFolder, valueMap, options);
            }

            final RegisteredProject project;
            try {
                project = projectRegistry.putProject(projectConfig, projectFolder, true, false);
            } catch (Exception e) {
                // rollback project folder
                projectFolder.getVirtualFile().delete();
                throw e;
            }

            // unlike imported it is not appropriate for newly created project to have problems
            if(!project.getProblems().isEmpty()) {

                // rollback project folder
                projectFolder.getVirtualFile().delete();
                // remove project entry
                projectRegistry.removeProjects(projectConfig.getPath());
                throw new ServerException("Problems occured: " + project.getProblemsStr());
            }


            workspaceProjectsHolder.sync(projectRegistry);

            projectRegistry.fireInitHandlers(project);

            return project;
        } finally {
            projectTreeChangesDetector.resume();
        }
    }

