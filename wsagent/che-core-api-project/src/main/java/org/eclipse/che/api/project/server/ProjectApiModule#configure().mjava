  @Override
  protected void configure() {
    bind(ProjectService.class);
    bind(ProjectImportersService.class);
    bind(ProjectTypeService.class);

    bind(OnWorkspaceStartProjectInitializer.class);
    bind(ProjectImporterRegistry.class);
    bind(ProjectHandlerRegistry.class);

    bind(RootDirCreationHandler.class).asEagerSingleton();
    bind(RootDirRemovalHandler.class).asEagerSingleton();

    bind(ProjectManager.class).to(ValidatingProjectManager.class);
    bind(ProjectQualifier.class).to(SimpleProjectQualifier.class);
    bind(ProjectTypeResolver.class).to(SimpleProjectTypeResolver.class);

    bind(ProjectConfigRegistry.class).to(InmemoryProjectRegistry.class);

    bind(ProjectJsonRpcServiceConfigurator.class).asEagerSingleton();

    newSetBinder(binder(), ProjectImporter.class).addBinding().to(ZipProjectImporter.class);

    newSetBinder(binder(), ProjectTypeDef.class).addBinding().to(BaseProjectType.class);

    Multibinder<ProjectHandler> projectHandlers = newSetBinder(binder(), ProjectHandler.class);
    projectHandlers.addBinding().to(CreateBaseProjectTypeHandler.class);
    projectHandlers.addBinding().to(InitBaseProjectTypeHandler.class);

    install(
        new FactoryModuleBuilder()
            .implement(ProjectConfig.class, RegisteredProjectImpl.class)
            .build(RegisteredProjectFactory.class));

    install(
        new FactoryModuleBuilder()
            .implement(ProjectTypes.class, ProjectTypes.class)
            .build(ProjectTypesFactory.class));

    install(
        new FactoryModuleBuilder()
            .implement(ProjectServiceApi.class, ProjectServiceApi.class)
            .build(ProjectServiceApiFactory.class));
  }

