  @Override
  protected void configure() {
    Multibinder<ProjectImporter> projectImportersMultibinder =
        newSetBinder(binder(), ProjectImporter.class);
    projectImportersMultibinder.addBinding().to(ZipProjectImporter.class);

    newSetBinder(binder(), ProjectTypeDef.class).addBinding().to(BaseProjectType.class);

    Multibinder<ProjectHandler> projectHandlersMultibinder =
        newSetBinder(binder(), ProjectHandler.class);
    projectHandlersMultibinder.addBinding().to(CreateBaseProjectTypeHandler.class);
    projectHandlersMultibinder.addBinding().to(InitBaseProjectTypeHandler.class);

    bind(ProjectRegistry.class).asEagerSingleton();
    bind(ProjectService.class);
    bind(ProjectTypeService.class);
    bind(ProjectImportersService.class);
    bind(ProjectImportOutputJsonRpcRegistrar.class);

    bind(WorkspaceProjectsSyncer.class).to(WorkspaceHolder.class);

    // configure VFS
    Multibinder<VirtualFileFilter> filtersMultibinder =
        newSetBinder(binder(), VirtualFileFilter.class, Names.named("vfs.index_filter"));

    filtersMultibinder.addBinding().to(MediaTypeFilter.class);

    Multibinder<PathMatcher> indexExcludesMatcher =
        newSetBinder(binder(), PathMatcher.class, Names.named("vfs.index_filter_matcher"));
    Multibinder<PathMatcher> fileWatcherExcludes =
        newSetBinder(
            binder(), PathMatcher.class, Names.named("che.user.workspaces.storage.excludes"));

    bind(SearcherProvider.class).to(FSLuceneSearcherProvider.class);
    bind(VirtualFileSystemProvider.class).to(LocalVirtualFileSystemProvider.class);

    bind(FileWatcherNotificationHandler.class).to(DefaultFileWatcherNotificationHandler.class);

    bind(EditorChangesTracker.class).asEagerSingleton();
    bind(EditorWorkingCopyManager.class).asEagerSingleton();
    bind(FileWatcherIgnoreFileTracker.class).asEagerSingleton();

    indexExcludesMatcher.addBinding().to(DotCheMatcher.class);
    indexExcludesMatcher.addBinding().to(DotNumberSignMatcher.class);
    indexExcludesMatcher.addBinding().to(HiddenItemPathMatcher.class);

    fileWatcherExcludes.addBinding().to(DotCheMatcher.class);
    fileWatcherExcludes.addBinding().to(DotNumberSignMatcher.class);

    configureVfsEvent();
    configureTreeWalker();
  }

