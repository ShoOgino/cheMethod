  @PostConstruct
  void initialize() {
    try {
      walkFileTree(
          root.toPath(),
          new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {
              for (PathMatcher matcher : directoryExcludes) {
                if (matcher.matches(dir)) {
                  return SKIP_SUBTREE;
                }
              }

              directories.put(dir, attrs.lastModifiedTime().toMillis());

              return CONTINUE;
            }

            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {
              for (PathMatcher matcher : fileExcludes) {
                if (matcher.matches(file)) {
                  return CONTINUE;
                }
              }

              files.put(file, attrs.lastModifiedTime().toMillis());

              return CONTINUE;
            }
          });
    } catch (IOException e) {
      LOG.error("Error while walking file tree", e);
    }

    initialized = true;
  }

