    @POST
    @Path("/import/{path:.*}")
    @Consumes(ExtMediaType.APPLICATION_ZIP)
    @ApiOperation(value = "Import zip",
                  notes = "Import resources as zip")
    @ApiResponses({@ApiResponse(code = 201, message = ""),
                   @ApiResponse(code = 403, message = "User not authorized to call this operation"),
                   @ApiResponse(code = 404, message = "Not found"),
                   @ApiResponse(code = 409, message = "Resource already exists"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    public Response importZip(@ApiParam(value = "Path to a location (where import to?)")
                              @PathParam("path") String path,
                              InputStream zip,
                              @DefaultValue("false") @QueryParam("skipFirstLevel") Boolean skipFirstLevel) throws NotFoundException,
                                                                                                                  ConflictException,
                                                                                                                  ForbiddenException,
                                                                                                                  ServerException {
        final FolderEntry parent = projectManager.asFolder(path);

        if (parent == null) {
            throw new NotFoundException("Parent not found for " + path);
        }

        importZip(parent.getVirtualFile(), zip, true, skipFirstLevel);

        try {
            final RegisteredProject project = projectManager.getProject(path);
            eventService.publish(new ProjectCreatedEvent(workspace, project.getPath()));
            final String projectType = project.getProjectType().getId();
            logProjectCreatedEvent(path, projectType);
        } catch (NotFoundException ignore) {
        }

        return Response.created(getServiceContext().getServiceUriBuilder()
                                                   .path(getClass(), "getChildren")
                                                   .build(parent.getPath().toString().substring(1))).build();
    }

