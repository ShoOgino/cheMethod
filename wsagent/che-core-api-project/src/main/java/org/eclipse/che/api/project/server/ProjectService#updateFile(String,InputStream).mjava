  @PUT
  @Path("/file/{path:.*}")
  @Consumes({MediaType.MEDIA_TYPE_WILDCARD})
  @ApiOperation(value = "Update file", notes = "Update an existing file with new content")
  @ApiResponses({
    @ApiResponse(code = 200, message = ""),
    @ApiResponse(code = 403, message = "User not authorized to call this operation"),
    @ApiResponse(code = 404, message = "Not found"),
    @ApiResponse(code = 500, message = "Internal Server Error")
  })
  public Response updateFile(
      @ApiParam(value = "Full path to a file", required = true) @PathParam("path") String path,
      InputStream content)
      throws NotFoundException, ForbiddenException, ServerException {
    final FileEntry file = projectManager.asFile(path);

    if (file == null) {
      throw new NotFoundException("File not found for " + path);
    }

    file.updateContent(content);

    eventService.publish(
        new ProjectItemModifiedEvent(
            ProjectItemModifiedEvent.EventType.UPDATED,
            workspace,
            file.getProject(),
            file.getPath().toString(),
            false));

    return Response.ok().build();
  }

