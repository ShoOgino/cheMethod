    /**
     * Updating project means:
     * - getting the project (should exist)
     * - updating name and description
     * - changing project types and provided attributes
     * - refreshing provided (transient) project types and attributes
     *
     * @param newConfig
     *         new config
     *
     * @return updated config
     *
     * @throws ForbiddenException
     * @throws ServerException
     * @throws NotFoundException
     * @throws ConflictException
     */
    public RegisteredProject updateProject(ProjectConfig newConfig) throws ForbiddenException,
                                                                           ServerException,
                                                                           NotFoundException,
                                                                           ConflictException {
        String path = newConfig.getPath();

        if (path == null) {
            throw new ConflictException("Project path is not defined");
        }

        final FolderEntry baseFolder = asFolder(path);

        // If a project does not exist in the target path, create a new one
        if (baseFolder == null) {
            throw new NotFoundException(String.format("Folder '%s' doesn't exist.", path));
        }

        ProjectConfig oldConfig = projectRegistry.getProject(path);

        final RegisteredProject project = projectRegistry.putProject(newConfig, baseFolder, true, false);

        // unlike imported it is not appropriate for updated project to have problems
        if(!project.getProblems().isEmpty()) {

            // rollback project folder
            projectRegistry.putProject(oldConfig, baseFolder, false, false);
            throw new ServerException("Problems occured: " + project.getProblemsStr());
        }

        workspaceProjectsHolder.sync(projectRegistry);

        projectRegistry.fireInitHandlers(project);

        // TODO move to register?
        reindexProject(project);

        return project;
    }

