    /**
     * Start watching a file system item by specifying its path. If path points
     * to a file than only file related events are taken into account, if path
     * points to a folder than all folder entries related events are taken into
     * account. Path is expected to be in absolute form in internal virtual
     * file system format.
     *
     * To react on events related to an aforementioned item you can
     * specify {@link Consumer} for create, modify and delete
     * event correspondingly. It is possible to omit one ore more event
     * consumers if it is needed by using {@link this#EMPTY_CONSUMER} stub.
     *
     * On successful start you receive a registration identifier to distinguish
     * your specific consumer set as there can be registered arbitrary number of
     * consumers to a single path.
     *
     * @param path
     *         absolute internal path
     * @param create
     *         consumer for create event
     * @param modify
     *         consumer for modify event
     * @param delete
     *         consumer for delete event
     *
     * @return operation set identifier
     */
    public int registerByPath(String path, Consumer<String> create, Consumer<String> modify, Consumer<String> delete) {
        LOG.debug("Registering operations to an item with path '{}'", path);

        return fileWatcherByPathValue.watch(toNormalPath(root, path), create, modify, delete);
    }

