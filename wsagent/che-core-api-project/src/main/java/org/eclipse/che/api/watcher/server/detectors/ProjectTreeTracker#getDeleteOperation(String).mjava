  private Consumer<String> getDeleteOperation(String endpointId) {
    return it -> {
      if (isExcluded(it)) {
        return;
      }

      timers.add(it);
      new Timer()
          .schedule(
              new TimerTask() {
                @Override
                public void run() {
                  if (timers.contains(it)) {
                    timers.remove(it);
                    ProjectTreeStateUpdateDto params =
                        newDto(ProjectTreeStateUpdateDto.class).withPath(it).withType(DELETED);
                    transmitter
                        .newRequest()
                        .endpointId(endpointId)
                        .methodName(OUTGOING_METHOD)
                        .paramsAsDto(params)
                        .sendAndSkipResult();
                  }
                }
              },
              1_000L);
    };
  }

