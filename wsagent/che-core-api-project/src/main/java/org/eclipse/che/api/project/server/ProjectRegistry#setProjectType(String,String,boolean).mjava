    /**
     * Extension writer should call this method to apply changes which (supposedly) change
     * Attributes defined with particular Project Type
     * If incoming Project Type is primary and:
     * - If the folder located on projectPath is a Project, its Primary PT will be converted to incoming PT
     * - If the folder located on projectPath is NOT a Project the folder will be converted to "detected" Project with incoming Primary PT
     * If incoming Project Type is mixin and:
     * - If the folder located on projectPath is a Project, this PT will be added (if not already there) to its Mixin PTs
     * - If the folder located on projectPath is NOT a Project - ConflictException will be thrown
     * For example:
     * - extension code knows that particular file content is used by Value Provider
     * so this method should be called when content of this file changed to check
     * and update attributes.
     * OR
     * If Extension writer wants to force initializing folder to be Project
     * For example:
     * - extension code knows that particular folder inside should (or may) be treated
     * as sub-project of same as "parent" project type
     *
     * @param projectPath
     *         absolute project path
     * @param type
     *         type to be updated or added
     * @param asMixin
     *         whether the type supposed to be mixin (true) or primary (false)
     * @return refreshed project
     * @throws ConflictException
     * @throws NotFoundException
     * @throws ServerException
     */
    public RegisteredProject setProjectType(String projectPath,
                                            String type,
                                            boolean asMixin) throws ConflictException,
                                                                    NotFoundException,
                                                                    ServerException {
        final RegisteredProject project = getProject(projectPath);
        final NewProjectConfig conf;
        List<String> newMixins = new ArrayList<>();


        if (project == null) {
            if (asMixin) {
                throw new ConflictException("Can not assign as mixin type '" + type +
                                            "' since the " + projectPath + " is not a project.");
            } else {

                final String path = absolutizePath(projectPath);
                final String name = Path.of(projectPath).getName();

                conf = new NewProjectConfigImpl(path, type, newMixins, name, name, null, null, null);

                return putProject(conf, root.getChildFolder(path), true, true);
            }
        } else {
            newMixins = project.getMixins();
            String newType = project.getType();
            if (asMixin) {
                if (!newMixins.contains(type)) {
                    newMixins.add(type);
                }
            } else {
                newType = type;
            }

            conf = new NewProjectConfigImpl(project.getPath(),
                                        newType,
                                        newMixins,
                                        project.getName(),
                                        project.getDescription(),
                                        project.getAttributes(),
                                        null,
                                        project.getSource());

            return putProject(conf, project.getBaseFolder(), true, project.isDetected());
        }
    }

