    private void configureTreeWalker() {
        bind(FileTreeWalker.class).asEagerSingleton();

        Multibinder<Consumer<Path>> directoryUpdateConsumers =
                newSetBinder(binder(), new TypeLiteral<Consumer<Path>>(){}, Names.named("che.fs.directory.update"));
        Multibinder<Consumer<Path>> directoryCreateConsumers =
                newSetBinder(binder(), new TypeLiteral<Consumer<Path>>(){}, Names.named("che.fs.directory.create"));
        Multibinder<Consumer<Path>> directoryDeleteConsumers =
                newSetBinder(binder(), new TypeLiteral<Consumer<Path>>(){}, Names.named("che.fs.directory.delete"));
        Multibinder<PathMatcher> directoryExcludes =
                newSetBinder(binder(), new TypeLiteral<PathMatcher>(){}, Names.named("che.fs.directory.excludes"));

        Multibinder<Consumer<Path>> fileUpdateConsumers =
                newSetBinder(binder(), new TypeLiteral<Consumer<Path>>(){}, Names.named("che.fs.file.update"));
        Multibinder<Consumer<Path>> fileCreateConsumers =
                newSetBinder(binder(), new TypeLiteral<Consumer<Path>>(){}, Names.named("che.fs.file.create"));
        Multibinder<Consumer<Path>> fileDeleteConsumers =
                newSetBinder(binder(), new TypeLiteral<Consumer<Path>>(){}, Names.named("che.fs.file.delete"));
        Multibinder<PathMatcher> fileExcludes =
                newSetBinder(binder(), new TypeLiteral<PathMatcher>(){}, Names.named("che.fs.file.excludes"));

        fileCreateConsumers.addBinding().to(IndexedFileCreateConsumer.class);
        fileUpdateConsumers.addBinding().to(IndexedFileUpdateConsumer.class);
        fileDeleteConsumers.addBinding().to(IndexedFileDeleteConsumer.class);

        fileCreateConsumers.addBinding().to(FileWatcherByPathMatcher.class);
        fileDeleteConsumers.addBinding().to(FileWatcherByPathMatcher.class);
        directoryCreateConsumers.addBinding().to(FileWatcherByPathMatcher.class);
        directoryDeleteConsumers.addBinding().to(FileWatcherByPathMatcher.class);
    }

