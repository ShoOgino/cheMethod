  /**
   * Preform search with specified parameters
   *
   * @param wsPath search root
   * @param name file name
   * @param text text
   * @param maxItems maximum number of items
   * @param skipCount number of items to be skipped
   */
  public ProjectSearchResponseDto search(
      String wsPath, String name, String text, int maxItems, int skipCount)
      throws BadRequestException, ServerException, NotFoundException {
    if (skipCount < 0) {
      throw new BadRequestException(String.format("Invalid 'skipCount' parameter: %d.", skipCount));
    }
    wsPath = absolutize(wsPath);

    QueryExpression expr =
        new QueryExpression()
            .setPath(wsPath)
            .setName(name)
            .setText(text)
            .setMaxItems(maxItems)
            .setSkipCount(skipCount)
            .setIncludePositions(true);

    try {
      SearchResult result = searcher.search(expr);
      List<SearchResultEntry> searchResultEntries = result.getResults();
      return DtoFactory.newDto(ProjectSearchResponseDto.class)
          .withTotalHits(result.getTotalHits())
          .withItemReferences(prepareResults(searchResultEntries));
    } catch (InvalidQueryException e) {
      throw new BadRequestException(e.getMessage());
    } catch (QueryExecutionException e) {
      LOG.warn(e.getLocalizedMessage());
      throw new ServerException(e.getMessage());
    }
  }

