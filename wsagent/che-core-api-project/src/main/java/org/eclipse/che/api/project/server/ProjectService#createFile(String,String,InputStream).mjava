    @POST
    @Path("/file/{parent:.*}")
    @Consumes({MediaType.MEDIA_TYPE_WILDCARD})
    @Produces({MediaType.APPLICATION_JSON})
    @ApiOperation(value = "Create file",
                  notes = "Create a new file in a project. If file type isn't specified the server will resolve its type.")
    @ApiResponses({@ApiResponse(code = 201, message = ""),
                   @ApiResponse(code = 403, message = "User not authorized to call this operation"),
                   @ApiResponse(code = 404, message = "Not found"),
                   @ApiResponse(code = 409, message = "File already exists"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    public Response createFile(@ApiParam(value = "Path to a target directory", required = true)
                               @PathParam("parent") String parentPath,
                               @ApiParam(value = "New file name", required = true)
                               @QueryParam("name") String fileName,
                               InputStream content) throws NotFoundException, ConflictException, ForbiddenException, ServerException {
        final FolderEntry parent = projectManager.asFolder(parentPath);

        if (parent == null) {
            throw new NotFoundException("Parent not found for " + parentPath);
        }

        final FileEntry newFile = parent.createFile(fileName, content);

        eventService.publish(new ProjectItemModifiedEvent(ProjectItemModifiedEvent.EventType.CREATED,
                                                          workspace,
                                                          newFile.getProject(),
                                                          newFile.getPath().toString(),
                                                          false));

        final URI location = getServiceContext().getServiceUriBuilder().clone()
                                                .path(getClass(), "getFile")
                                                .build(new String[]{newFile.getPath().toString().substring(1)}, false);
        return Response.created(location)
                       .entity(injectFileLinks(vcsStatusInjector.injectVcsStatus(asDto(newFile))))
                       .build();
    }

