    private Consumer<String> getDeleteConsumer(String endpointId, String path) {
        return it -> new Timer().schedule(new TimerTask() {
            @Override
            public void run() {
                if (!Files.exists(FileWatcherUtils.toNormalPath(root.toPath(), it))) {
                    hashRegistry.remove(path + endpointId);
                    FileStateUpdateDto params = newDto(FileStateUpdateDto.class).withPath(path).withType(DELETED);
                    transmitter.newRequest()
                               .endpointId(endpointId)
                               .methodName(OUTGOING_METHOD)
                               .paramsAsDto(params)
                               .sendAndSkipResult();

                }

            }
        }, 1_000L);
    }

