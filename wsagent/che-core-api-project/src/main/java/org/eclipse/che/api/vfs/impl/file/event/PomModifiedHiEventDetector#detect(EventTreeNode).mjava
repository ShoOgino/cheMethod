    @Override
    public Optional<HiEvent<PomModifiedEventDto>> detect(EventTreeNode eventTreeNode) {
        if (!eventTreeNode.isRoot() || eventTreeNode.getChildren().isEmpty()) {
            return empty();
        }

        final Optional<EventTreeNode> highestPom = eventTreeNode.stream()
                                                          .filter(EventTreeNode::modificationOccurred)
                                                          .filter(EventTreeNode::isFile)
                                                          .filter(event -> POM_XML.equals(event.getName()))
                                                          .filter(event -> MODIFIED.equals(event.getLastEventType()))
                                                          // note the revers order of o1 and o2
                                                          .sorted((o1, o2) -> o2.getPath().compareTo(o1.getPath()))
                                                          .findFirst();

        if (!highestPom.isPresent()) {
            return empty();
        }

        PomModifiedEventDto dto = newDto(PomModifiedEventDto.class).withPath(highestPom.get().getPath());

        return Optional.of((HiEvent.newInstance(PomModifiedEventDto.class)
                                   .withCategory(PROJECT_INFRASTRUCTURE.withPriority(50))
                                   .withBroadcaster(broadcaster)
                                   .withDto(dto)));
    }

