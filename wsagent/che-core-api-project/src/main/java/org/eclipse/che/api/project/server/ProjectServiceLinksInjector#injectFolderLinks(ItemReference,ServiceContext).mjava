    /**
     * Adds links for working with a folder.
     * Operations which are supported:
     * <p>get children</p>
     * <p>get tree</p>
     * <p>delete</p>
     *
     * @param itemReference
     *         information about node
     * @param serviceContext
     *         context of {@link ProjectService}
     * @return node with injected folder's links
     */
    public ItemReference injectFolderLinks(ItemReference itemReference, ServiceContext serviceContext) {
        final UriBuilder uriBuilder = getUriBuilder(serviceContext);
        final List<Link> links = new ArrayList<>();
        final String relPath = itemReference.getPath().substring(1);

        links.add(createLink(GET,
                             tuneUrl(uriBuilder.clone()
                                               .path(ProjectService.class)
                                               .path(ProjectService.class, "getChildren")
                                               .build(new String[]{relPath}, false)),
                             APPLICATION_JSON,
                             LINK_REL_CHILDREN));
        links.add(createLink(GET,
                             tuneUrl(uriBuilder.clone()
                                               .path(ProjectService.class)
                                               .path(ProjectService.class, "getTree")
                                               .build(new String[]{relPath}, false)),
                             APPLICATION_JSON,
                             LINK_REL_TREE));
        links.add(createLink(DELETE,
                             tuneUrl(uriBuilder.clone()
                                               .path(ProjectService.class)
                                               .path(ProjectService.class, "delete")
                                               .build(new String[]{relPath}, false)),
                             LINK_REL_DELETE));

        return itemReference.withLinks(links);
    }

