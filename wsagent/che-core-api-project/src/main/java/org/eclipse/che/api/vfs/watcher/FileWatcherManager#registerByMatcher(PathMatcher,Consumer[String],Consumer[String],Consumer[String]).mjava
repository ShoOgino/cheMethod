    /**
     * Start watching a file system item by specifying its path matcher. Any
     * item on file system that matches is registered and being watched. If
     * matched path points to a file than only file related events are taken
     * into account, if matched path points to a folder than all folder entries
     * related events are taken into account.
     *
     * To react on events related to an aforementioned item you can
     * specify {@link Consumer} for create, modify and delete
     * event correspondingly. It is possible to omit one ore more event
     * consumers if it is needed by using {@link this#EMPTY_CONSUMER} stub.
     *
     * On successful start you receive a registration identifier to distinguish
     * specific consumer sets as there can be registered arbitrary number of
     * consumers to a single path matcher.
     *
     * @param matcher
     *         absolute internal path
     * @param create
     *         consumer for create event
     * @param modify
     *         consumer for modify event
     * @param delete
     *         consumer for delete event
     *
     * @return operation set identifier
     */
    public int registerByMatcher(PathMatcher matcher, Consumer<String> create, Consumer<String> modify, Consumer<String> delete) {
        LOG.debug("Registering operations to an item with matcher '{}'", matcher);

        return fileWatcherByPathMatcher.watch(matcher, create, modify, delete);
    }

