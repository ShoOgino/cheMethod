  /**
   * Find related VCS provider and set VCS status of {@link TreeElement} file to it's attributes to
   * each item of the given list, if VCS provider is present.
   *
   * @param treeElements list of {@link TreeElement} files to update
   */
  List<TreeElement> injectVcsStatusTreeElements(List<TreeElement> treeElements)
      throws ServerException, NotFoundException {
    Optional<TreeElement> treeElementOptional =
        treeElements
            .stream()
            .filter(treeElement -> "file".equals(treeElement.getNode().getType()))
            .findAny();
    if (treeElementOptional.isPresent()) {
      String project = normalizeProjectPath(treeElementOptional.get().getNode().getProject());
      Optional<VcsStatusProvider> vcsStatusProviderOptional = getVcsStatusProvider(project);
      if (vcsStatusProviderOptional.isPresent()) {
        List<String> treeElementFiles =
            treeElements
                .stream()
                .filter(treeElement -> "file".equals(treeElement.getNode().getType()))
                .map(treeElement -> normalizeFilePath(treeElement.getNode().getPath()))
                .collect(Collectors.toList());
        Map<String, VcsStatusProvider.VcsStatus> status =
            vcsStatusProviderOptional.get().getStatus(project, treeElementFiles);

        treeElements
            .stream()
            .filter(itemReference -> "file".equals(itemReference.getNode().getType()))
            .forEach(
                itemReference -> {
                  Map<String, String> attributes =
                      new HashMap<>(itemReference.getNode().getAttributes());
                  attributes.put(
                      "vcs.status", status.get(itemReference.getNode().getPath()).toString());
                  itemReference.getNode().setAttributes(attributes);
                });
      }
    }

    return treeElements;
  }

