    @Override
    public Optional<HiEvent<GitBranchCheckoutEventDto>> detect(EventTreeNode eventTreeNode) {
        if (!eventTreeNode.isRoot() || eventTreeNode.getChildren().isEmpty()) {
            return empty();
        }

        final Optional<EventTreeNode> headFile = eventTreeNode.getFirstChild()
                                                              .flatMap(o -> o.getChild(GIT_DIR))
                                                              .flatMap(o -> o.getChild(HEAD_FILE));

        if (headFile.isPresent()
            && headFile.get().modificationOccurred()
            && MODIFIED.equals(headFile.get().getLastEventType())) {

            final GitBranchCheckoutEventDto dto = newDto(GitBranchCheckoutEventDto.class).withBranchName(getBranchName(headFile.get()));

            return Optional.of(HiEvent.newInstance(GitBranchCheckoutEventDto.class)
                                      .withCategory(UNDEFINED.withPriority(PRIORITY))
                                      .withBroadcaster(broadcaster)
                                      .withChannel(GIT_OPERATION_WS_CHANNEL)
                                      .withDto(dto));
        } else {
            return empty();
        }
    }

