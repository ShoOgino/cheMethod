    @Override
    public Optional<HiEvent<FileUpdatedDto>> detect(EventTreeNode eventTreeNode) {
        if (!eventTreeNode.isRoot() || eventTreeNode.getChildren().isEmpty()) {
            return empty();
        }

        final Collection<String> registeredFiles = endpointRegistry.keySet();

        final List<EventTreeNode> files = eventTreeNode.stream()
                                                       .filter(EventTreeNode::modificationOccurred)
                                                       .filter(EventTreeNode::isFile)
                                                       .filter(event -> registeredFiles.contains(event.getPath()))
                                                       .filter(event -> MODIFIED.equals(event.getLastEventType()))
                                                       .collect(Collectors.toList());


        for (EventTreeNode file : files) {
            final String path = file.getPath();

            if (!ignoranceRegistry.contains(path)) {

                final Integer endpoint = endpointRegistry.get(path);

                final FileUpdatedDto fileUpdatedDto = DtoFactory.getInstance()
                                                                .createDto(FileUpdatedDto.class)
                                                                .withPath(path);

                final JsonRpcRequest notification = DtoFactory.getInstance()
                                                              .createDto(JsonRpcRequest.class)
                                                              .withMethod("event:file-updated")
                                                              .withJsonrpc("2.0")
                                                              .withParams(fileUpdatedDto.toString());
                transmitter.transmit(notification, endpoint);
            } else {
                ignoranceRegistry.remove(path);
            }
        }
        return Optional.empty();
    }

