  /**
   * Find related VCS provider and set VCS status of {@link ItemReference} file to it's attributes
   * to each item of the given list, if VCS provider is present.
   *
   * @param itemReferences list of {@link ItemReference} files to update
   */
  public List<ItemReference> injectVcsStatus(List<ItemReference> itemReferences)
      throws ServerException, NotFoundException {
    Optional<ItemReference> itemReferenceOptional =
        itemReferences
            .stream()
            .filter(itemReference -> "file".equals(itemReference.getType()))
            .findAny();
    if (itemReferenceOptional.isPresent()) {
      Optional<VcsStatusProvider> vcsStatusProviderOptional =
          getVcsStatusProvider(itemReferenceOptional.get());
      if (vcsStatusProviderOptional.isPresent()) {
        List<String> itemReferenceFiles =
            itemReferences
                .stream()
                .filter(itemReference -> "file".equals(itemReference.getType()))
                .map(this::getFilePathWithoutProject)
                .collect(Collectors.toList());
        Map<String, VcsStatusProvider.VcsStatus> statusMap =
            vcsStatusProviderOptional
                .get()
                .getStatus(itemReferenceOptional.get().getProject(), itemReferenceFiles);

        itemReferences
            .stream()
            .filter(itemReference -> "file".equals(itemReference.getType()))
            .forEach(
                itemReference -> {
                  Map<String, String> attributes = new HashMap<>(itemReference.getAttributes());
                  attributes.put("vcs.status", statusMap.get(itemReference.getPath()).toString());
                  itemReference.setAttributes(attributes);
                });
      }
    }
    return itemReferences;
  }

