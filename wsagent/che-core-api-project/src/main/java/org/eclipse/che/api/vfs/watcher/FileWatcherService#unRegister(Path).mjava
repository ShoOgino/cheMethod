  /**
   * Cancels registration of a directory for being watched. Each call of this method decreases by
   * one registration counter that corresponds to directory specified by the argument. If
   * registration counter comes to zero directory watching is totally cancelled.
   *
   * <p>If this method is called for not existing directory nothing happens.
   *
   * <p>If this method is called for not registered directory nothing happens.
   *
   * @param dir directory
   */
  void unRegister(Path dir) {
    LOG.debug("Canceling directory '{}' registration", dir);

    Predicate<Entry<WatchKey, Path>> equalsDir = it -> it.getValue().equals(dir);

    if (!exists(dir)) {
      LOG.debug("Trying to unregister directory '{}' while it does not exist", dir);

      registrations.remove(dir);

      keys.entrySet().stream().filter(equalsDir).map(Entry::getKey).forEach(WatchKey::cancel);
      keys.entrySet().removeIf(equalsDir);

      return;
    }

    if (!registrations.containsKey(dir)) {
      LOG.debug("Trying to unregister directory '{}' while it is not registered", dir);
      return;
    }

    int previous = registrations.get(dir);
    if (previous == 1) {
      LOG.debug("Stopping watching directory '{}'", dir);
      registrations.remove(dir);

      keys.entrySet().stream().filter(equalsDir).map(Entry::getKey).forEach(WatchKey::cancel);
      keys.entrySet().removeIf(equalsDir);
    } else {
      LOG.debug(
          "Directory is being watched by someone else, decreasing watch counter, previous value: {}",
          previous);
      registrations.put(dir, previous - 1);
    }
  }

