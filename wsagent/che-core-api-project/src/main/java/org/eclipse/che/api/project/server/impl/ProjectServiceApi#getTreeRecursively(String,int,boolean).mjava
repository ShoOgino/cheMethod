  private List<TreeElement> getTreeRecursively(String wsPath, int depth, boolean includeFiles)
      throws ServerException, NotFoundException {
    if (depth == 0) {
      return null;
    }

    Set<String> childrenWsPaths =
        includeFiles
            ? applyTreeFilter(wsPath, fsManager.getAllChildrenWsPaths(wsPath))
            : applyTreeFilter(wsPath, fsManager.getDirWsPaths(wsPath));

    List<TreeElement> nodes = new ArrayList<>(childrenWsPaths.size());
    for (String childWsPath : childrenWsPaths) {
      ItemReference asDto = fsDtoConverter.asDto(childWsPath);
      ItemReference asLinkedDto =
          fsManager.isDir(childWsPath) ? injectFolderLinks(asDto) : injectFileLinks(asDto);
      TreeElement treeElement = newDto(TreeElement.class).withNode(asLinkedDto);
      nodes.add(treeElement);

      if (fsManager.isDir(childWsPath)) {
        List<TreeElement> treeElements = getTreeRecursively(childWsPath, depth - 1, includeFiles);
        if (treeElements != null) {
          treeElement.setChildren(treeElements);
        }
      }
    }

    return vcsStatusInjector.injectVcsStatusTreeElements(nodes);
  }

