  private Map<Path, Set<String>> groupExcludes(List<String> locationsToExclude) {
    Map<Path, Set<String>> groupedExcludes = new HashMap<>();
    try {
      for (String location : locationsToExclude) {
        if (isNullOrEmpty(location)) {
          throw new NotFoundException("The path to exclude should not be empty");
        }

        VirtualFileEntry itemToExclude =
            projectManagerProvider.get().getProjectsRoot().getChild(location);
        if (itemToExclude == null) {
          throw new NotFoundException("The file is not found by path " + location);
        }

        String projectLocation = itemToExclude.getProject();
        if (isNullOrEmpty(projectLocation)) {
          throw new ServerException("The project is not recognized for " + location);
        }

        Path pathToExclude = toNormalPath(root, location);
        Path projectPath = toNormalPath(root, projectLocation);
        Path ignoreFilePath = toNormalPath(root, projectLocation + FILE_WATCHER_IGNORE_FILE_PATH);

        Set<String> excludesToWrite =
            groupedExcludes.computeIfAbsent(ignoreFilePath, k -> new HashSet<>());
        String excludeToWrite =
            pathToExclude.equals(projectPath)
                ? "/"
                : projectPath.relativize(pathToExclude).toString();
        excludesToWrite.add(excludeToWrite);
      }
    } catch (NotFoundException e) {
      String errorMessage = "Can not add path to File Watcher excludes: " + e.getLocalizedMessage();

      LOG.error(errorMessage);

      throw new JsonRpcException(400, errorMessage);

    } catch (ServerException e) {
      String errorMessage = "Can not add path to File Watcher excludes ";

      LOG.error(errorMessage + e.getLocalizedMessage());

      throw new JsonRpcException(500, errorMessage);
    }
    return groupedExcludes;
  }

