    private BiConsumer<String, ProjectTreeTrackingOperationDto> getProjectTreeTrackingOperationConsumer() {
        return (String endpointId, ProjectTreeTrackingOperationDto operation) -> {
            final Type type = operation.getType();
            final String path = operation.getPath();

            switch (type) {
                case START: {
                    LOG.debug("Received project tree tracking operation START trigger.");

                    int pathRegistrationId = fileWatcherManager.registerByPath(path,
                                                                               getCreateOperation(endpointId),
                                                                               getModifyConsumer(endpointId),
                                                                               getDeleteOperation(endpointId));
                    watchIdRegistry.put(path + endpointId, pathRegistrationId);
                    break;
                }
                case STOP: {
                    LOG.debug("Received project tree tracking operation STOP trigger.");

                    Predicate<Entry<String, Integer>> isSubPath = it -> it.getKey().startsWith(path) && it.getKey().endsWith(endpointId);

                    watchIdRegistry.entrySet()
                                   .stream()
                                   .filter(isSubPath)
                                   .map(Entry::getKey)
                                   .collect(toSet())
                                   .stream()
                                   .map(watchIdRegistry::remove)
                                   .forEach(fileWatcherManager::unRegisterByPath);

                    break;
                }
                case SUSPEND: {
                    LOG.debug("Received project tree tracking operation SUSPEND trigger.");

                    fileWatcherManager.suspend();

                    break;
                }
                case RESUME: {
                    LOG.debug("Received project tree tracking operation RESUME trigger.");

                    fileWatcherManager.resume();

                    break;
                }
                default: {
                    LOG.error("Received file tracking operation UNKNOWN trigger.");

                    break;
                }
            }
        };
    }

