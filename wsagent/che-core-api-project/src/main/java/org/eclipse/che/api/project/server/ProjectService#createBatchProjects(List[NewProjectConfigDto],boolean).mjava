    @POST
    @Path("/batch")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Creates batch of projects according to their configurations",
                  notes = "A project will be created by importing when project configuration contains source object. " +
                          "For creating a project by generator options should be specified.",
                  response = ProjectConfigDto.class)
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 400, message = "Path for new project should be defined"),
                   @ApiResponse(code = 403, message = "Operation is forbidden"),
                   @ApiResponse(code = 409, message = "Project with specified name already exist in workspace"),
                   @ApiResponse(code = 500, message = "Server error")})
    @GenerateLink(rel = LINK_REL_CREATE_BATCH_PROJECTS)
    public List<ProjectConfigDto> createBatchProjects(
            @Description("list of descriptors for projects") List<NewProjectConfigDto> projectConfigList,
            @ApiParam(value = "Force rewrite existing project", allowableValues = "true,false")
            @QueryParam("force") boolean rewrite)
            throws ConflictException, ForbiddenException, ServerException, NotFoundException, IOException, UnauthorizedException,
                   BadRequestException {

        List<ProjectConfigDto> result = new ArrayList<>(projectConfigList.size());
        final ProjectOutputLineConsumerFactory outputOutputConsumerFactory = new ProjectOutputLineConsumerFactory(workspace, 300);

        for (RegisteredProject registeredProject : projectManager.createBatchProjects(projectConfigList, rewrite, outputOutputConsumerFactory)) {

            ProjectConfigDto projectConfig = injectProjectLinks(asDto(registeredProject));
            result.add(projectConfig);

            eventService.publish(new ProjectCreatedEvent(workspace, registeredProject.getPath()));
        }
        return result;
    }

