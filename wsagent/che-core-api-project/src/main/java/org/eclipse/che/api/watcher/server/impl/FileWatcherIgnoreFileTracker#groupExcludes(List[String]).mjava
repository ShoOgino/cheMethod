  private Map<Path, Set<Path>> groupExcludes(List<String> locationsToExclude) {
    Map<Path, Set<Path>> groupedExcludes = new HashMap<>();
    try {
      for (String location : locationsToExclude) {
        if (isNullOrEmpty(location)) {
          throw new NotFoundException("The path to exclude should not be empty");
        }

        Path fsPath = pathTransformer.transform(location);
        if (!fsPath.toFile().exists()) {
          throw new NotFoundException("The file is not found by path " + location);
        }

        String projectWsPath =
            projectManager
                .getClosest(location)
                .orElseThrow(
                    () -> new ServerException("The project is not recognized for " + location))
                .getPath();

        Path pathToExclude = pathTransformer.transform(location);
        Path projectPath = pathTransformer.transform(projectWsPath);

        groupedExcludes.putIfAbsent(projectPath, new HashSet<>());
        groupedExcludes.get(projectPath).add(pathToExclude);
      }
    } catch (NotFoundException e) {
      String errorMessage = "Can not add path to File Watcher excludes: " + e.getLocalizedMessage();

      LOG.error(errorMessage);

      throw new JsonRpcException(400, errorMessage);

    } catch (ServerException e) {
      String errorMessage = "Can not add path to File Watcher excludes ";

      LOG.error(errorMessage + e.getLocalizedMessage());

      throw new JsonRpcException(500, errorMessage);
    }
    return groupedExcludes;
  }

