    /**
     * Create batch of projects according to their configurations.
     * <p/>
     * Notes: - a project will be created by importing when project configuration contains {@link SourceStorage} object,
     * otherwise this one will be created corresponding its {@link NewProjectConfig}:
     * <li> - {@link NewProjectConfig} object contains only one mandatory {@link NewProjectConfig#setPath(String)} field.
     * In this case Project will be created as project of {@link BaseProjectType} type </li>
     * <li> - a project will be created as project of {@link BaseProjectType} type with {@link Problem#code} = 12
     * when declared primary project type is not registered, </li>
     * <li> - a project will be created with {@link Problem#code} = 12 and without mixin project type
     * when declared mixin project type is not registered</li>
     * <li> - for creating a project by generator {@link NewProjectConfig#getOptions()} should be specified.</li>
     *
     * @param projectConfigList
     *         the list of configurations to create projects
     * @param rewrite
     *         whether rewrite or not (throw exception otherwise) if such a project exists
     * @return the list of new projects
     * @throws BadRequestException
     *         when {@link NewProjectConfig} object not contains mandatory {@link NewProjectConfig#setPath(String)} field.
     * @throws ConflictException
     *         when the same path project exists and {@code rewrite} is {@code false}
     * @throws ForbiddenException
     *         when trying to overwrite the project and this one contains at least one locked file
     * @throws NotFoundException
     *         when parent folder does not exist
     * @throws UnauthorizedException
     *         if user isn't authorized to access to location at importing source code
     * @throws ServerException
     *         if other error occurs
     */
    public List<RegisteredProject> createBatchProjects(List<? extends NewProjectConfig> projectConfigList, boolean rewrite, ProjectOutputLineConsumerFactory lineConsumerFactory)
            throws BadRequestException, ConflictException, ForbiddenException, NotFoundException, ServerException, UnauthorizedException,
                   IOException {
        projectTreeChangesDetector.suspend();
        try {
            final List<RegisteredProject> projects = new ArrayList<>(projectConfigList.size());
            validateProjectConfigurations(projectConfigList, rewrite);

            final List<NewProjectConfig> sortedConfigList = projectConfigList
                    .stream()
                    .sorted((config1, config2) -> config1.getPath().compareTo(config2.getPath()))
                    .collect(Collectors.toList());

            for (NewProjectConfig projectConfig : sortedConfigList) {
                RegisteredProject registeredProject;
                final String pathToProject = projectConfig.getPath();

                //creating project(by config or by importing source code)
                try {
                    final SourceStorage sourceStorage = projectConfig.getSource();
                    if (sourceStorage != null && !isNullOrEmpty(sourceStorage.getLocation())) {
                        doImportProject(pathToProject, sourceStorage, rewrite, lineConsumerFactory.setProjectName(projectConfig.getPath()));
                    } else if (!isVirtualFileExist(pathToProject)) {
                        registeredProject = doCreateProject(projectConfig, projectConfig.getOptions());
                        projects.add(registeredProject);
                        continue;
                    }
                } catch (Exception e) {
                    if (!isVirtualFileExist(pathToProject)) {//project folder is absent
                        rollbackCreatingBatchProjects(projects);
                        throw e;
                    }
                }

                //update project
                if (isVirtualFileExist(pathToProject)) {
                    try {
                        registeredProject = updateProject(projectConfig);
                    } catch (Exception e) {
                        registeredProject = projectRegistry.putProject(projectConfig, asFolder(pathToProject), true, false);
                        registeredProject.getProblems().add(new Problem(14, "The project is not updated, caused by " + e.getLocalizedMessage()));
                    }
                } else {
                    registeredProject = projectRegistry.putProject(projectConfig, null, true, false);
                }

                projects.add(registeredProject);
            }

            return projects;

        } finally {
            projectTreeChangesDetector.resume();
        }
    }

