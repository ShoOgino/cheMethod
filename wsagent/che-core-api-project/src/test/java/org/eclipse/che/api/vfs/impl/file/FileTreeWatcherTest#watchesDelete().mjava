  @Test
  public void watchesDelete() throws Exception {
    fileWatcherTestTree.createDirectory("", "watched");
    String deletedDir1 = fileWatcherTestTree.createDirectory("watched");
    String deletedFile1 = fileWatcherTestTree.createFile("watched");
    Set<String> deleted = newHashSet("watched", deletedDir1, deletedFile1);

    FileWatcherNotificationHandler notificationHandler = aNotificationHandler();
    fileWatcher = new FileTreeWatcher(testDirectory, newHashSet(), notificationHandler);
    fileWatcher.startup();

    Thread.sleep(500);

    fileWatcherTestTree.delete("watched");

    Thread.sleep(5000);

    verify(notificationHandler, never()).errorOccurred(eq(testDirectory), any(Throwable.class));
    verify(notificationHandler, never())
        .handleFileWatcherEvent(eq(CREATED), eq(testDirectory), anyString(), anyBoolean());
    verify(notificationHandler, never())
        .handleFileWatcherEvent(eq(MODIFIED), eq(testDirectory), anyString(), anyBoolean());

    ArgumentCaptor<String> deletedEvents = ArgumentCaptor.forClass(String.class);
    verify(notificationHandler, times(3))
        .handleFileWatcherEvent(
            eq(DELETED), eq(testDirectory), deletedEvents.capture(), anyBoolean());
    assertEquals(deleted, newHashSet(deletedEvents.getAllValues()));
  }

