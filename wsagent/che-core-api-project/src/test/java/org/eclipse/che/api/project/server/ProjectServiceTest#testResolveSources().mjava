    @Test
    public void testResolveSources() throws Exception {

        VirtualFile root = pm.getProjectsRoot().getVirtualFile();
        root.createFolder("testEstimateProjectGood").createFolder("check");
        root.createFolder("testEstimateProjectBad");

        final ValueProviderFactory vpf1 = projectFolder -> new ReadonlyValueProvider() {
            @Override
            public List<String> getValues(String attributeName) throws ValueStorageException {

                VirtualFileEntry file;
                try {
                    file = projectFolder.getChild("check");
                } catch (ServerException e) {
                    throw new ValueStorageException(e.getMessage());
                }

                if (file == null) {
                    throw new ValueStorageException("Check not found");
                }
                return (List<String>)singletonList("checked");
            }

        };

        ProjectTypeDef pt = new ProjectTypeDef("testEstimateProjectPT", "my testEstimateProject type", true, false) {
            {
                addVariableDefinition("calculated_attribute", "attr description", true, vpf1);
                addVariableDefinition("my_property_1", "attr description", true);
                addVariableDefinition("my_property_2", "attr description", false);
            }
        };

        ptRegistry.registerProjectType(pt);

        ContainerResponse response =
                launcher.service(GET, String.format("http://localhost:8080/api/project/%s/resolve/%s",
                                                    workspace, "testEstimateProjectGood"),
                                 "http://localhost:8080/api", null, null, null);
        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
        List<SourceEstimation> result = (List<SourceEstimation>) response.getEntity();

        assertTrue(result.size() > 0);
        boolean m = false;
        for(SourceEstimation est : result) {
            if(est.getType().equals("testEstimateProjectPT")) {
                assertTrue(est.isMatched());
                m = true;
            }

        }
        assertTrue(m);

    }

