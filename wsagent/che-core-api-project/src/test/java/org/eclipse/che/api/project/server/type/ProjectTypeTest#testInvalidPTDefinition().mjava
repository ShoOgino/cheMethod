  @Test
  public void testInvalidPTDefinition() throws Exception {
    ProjectTypeDef pt = new ProjectTypeDef("my", "second", true, false) {};

    Set<ProjectTypeDef> pts = new HashSet<>();
    pts.add(new MyProjectType(null));
    pts.add(pt);
    ProjectTypeRegistry reg = new ProjectTypeRegistry(pts);

    // BASE and MY (
    assertEquals(2, reg.getProjectTypes().size());

    // Invalid names
    pts.clear();
    pts.add(new ProjectTypeDef(null, "null id", true, false) {});
    pts.add(new ProjectTypeDef("", "empty id", true, false) {});
    pts.add(new ProjectTypeDef("invalid id", "invalid id", true, false) {});
    pts.add(new ProjectTypeDef("id1", null, true, false) {});
    pts.add(new ProjectTypeDef("id2", "", true, false) {});
    reg = new ProjectTypeRegistry(pts);
    // BASE only
    assertEquals(1, reg.getProjectTypes().size());

    // Invalid parent
    final ProjectTypeDef invalidParent = new ProjectTypeDef("i-parent", "parent", true, false) {};
    pts.add(
        new ProjectTypeDef("notRegParent", "not reg parent", true, false) {
          {
            addParent("i-parent");
          }
        });
    reg = new ProjectTypeRegistry(pts);
    // BASE only
    assertEquals(1, reg.getProjectTypes().size());
  }

