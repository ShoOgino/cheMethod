    @Test
    public void testUpdateProject() throws Exception {
        Map<String, List<String>> headers = new HashMap<>();
        headers.put("Content-Type", singletonList(APPLICATION_JSON));

        ProjectTypeDef pt = new ProjectTypeDef("testUpdateProject", "my project type", true, false) {
        };
        ptRegistry.registerProjectType(pt);

        pm.createProject(DtoFactory.getInstance().createDto(ProjectConfigDto.class).withDescription("created project").withType(
                "testUpdateProject").withPath("/testUpdateProject"), null);

        Map<String, List<String>> attributeValues = new LinkedHashMap<>();
        attributeValues.put("my_attribute", singletonList("to be or not to be"));

        ProjectConfigDto descriptor = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                .withName("module1")
                                                .withType("testUpdateProject")
                                                .withDescription("updated project")
                                                .withAttributes(attributeValues);


        ContainerResponse response = launcher.service(PUT,
                                                      "http://localhost:8080/api/project/testUpdateProject",
                                                      "http://localhost:8080/api",
                                                      headers,
                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(Charset.defaultCharset()),
                                                      null);

        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());

        RegisteredProject project = pm.getProject("/testUpdateProject");
        assertNotNull(project);
        //ProjectConfig config = project.getConfig();

        assertEquals(project.getDescription(), "updated project");
        assertEquals(project.getProjectType().getId(), "testUpdateProject");
    }

