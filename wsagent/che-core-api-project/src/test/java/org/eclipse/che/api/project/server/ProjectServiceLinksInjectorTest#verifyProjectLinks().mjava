  @Test
  public void verifyProjectLinks() throws Exception {
    ProjectConfigDto projectConfigDto = DtoFactory.newDto(ProjectConfigDto.class);
    projectConfigDto.withPath(PROJECT_PATH);

    ProjectConfigDto result =
        projectServiceLinksInjector.injectProjectLinks(projectConfigDto, serviceContext);

    final List<Link> links = result.getLinks();
    assertEquals(4, links.size());

    final Link updateProjectLink = links.get(0);
    assertNotNull(updateProjectLink);
    assertEquals("localhost:8080/project/project_path", updateProjectLink.getHref());
    assertEquals(HttpMethod.PUT, updateProjectLink.getMethod());
    assertEquals(LINK_REL_UPDATE_PROJECT, updateProjectLink.getRel());
    assertEquals(APPLICATION_JSON, updateProjectLink.getConsumes());
    assertEquals(APPLICATION_JSON, updateProjectLink.getProduces());

    final Link childrenProjectLink = links.get(1);
    assertNotNull(childrenProjectLink);
    assertEquals("localhost:8080/project/children/project_path", childrenProjectLink.getHref());
    assertEquals(HttpMethod.GET, childrenProjectLink.getMethod());
    assertEquals(LINK_REL_CHILDREN, childrenProjectLink.getRel());
    assertEquals(APPLICATION_JSON, childrenProjectLink.getProduces());

    final Link treeProjectLink = links.get(2);
    assertNotNull(treeProjectLink);
    assertEquals("localhost:8080/project/tree/project_path", treeProjectLink.getHref());
    assertEquals(HttpMethod.GET, treeProjectLink.getMethod());
    assertEquals(LINK_REL_TREE, treeProjectLink.getRel());
    assertEquals(APPLICATION_JSON, treeProjectLink.getProduces());

    final Link deleteProjectLink = links.get(3);
    assertNotNull(deleteProjectLink);
    assertEquals("localhost:8080/project/project_path", deleteProjectLink.getHref());
    assertEquals(HttpMethod.DELETE, deleteProjectLink.getMethod());
    assertEquals(LINK_REL_DELETE, deleteProjectLink.getRel());
  }

