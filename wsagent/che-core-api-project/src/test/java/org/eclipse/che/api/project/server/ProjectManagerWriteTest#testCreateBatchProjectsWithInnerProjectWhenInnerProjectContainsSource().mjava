    @Test
    public void testCreateBatchProjectsWithInnerProjectWhenInnerProjectContainsSource() throws Exception {
        final String rootProjectPath = "/rootProject";
        final String innerProjectPath = "/rootProject/innerProject";
        final String rootImportType = "rootImportType";
        final String innerImportType = "innerImportType";

        final String innerProjectType = "pt2";

        Map<String, List<String>> attributes = new HashMap<>();
        attributes.put("pt2-var2", new AttributeValue("test").getList());

        final String [] paths1 = {"folder1/", "folder1/file1.txt"};
        final List<String> children1 = new ArrayList<>(Arrays.asList(paths1));
        registerImporter(rootImportType, prepareZipArchiveBasedOn(children1));

        final String [] paths2 = {"folder2/", "folder2/file2.txt"};
        final List<String> children2 = new ArrayList<>(Arrays.asList(paths2));
        registerImporter(innerImportType, prepareZipArchiveBasedOn(children2));

        final SourceStorageDto source1 = DtoFactory.newDto(SourceStorageDto.class).withLocation("someLocation").withType(rootImportType);
        final NewProjectConfigDto config1 = createProjectConfigObject("testProject1", rootProjectPath, BaseProjectType.ID, source1);

        final SourceStorageDto source2 = DtoFactory.newDto(SourceStorageDto.class).withLocation("someLocation").withType(innerImportType);
        final NewProjectConfigDto config2 = createProjectConfigObject("testProject2", innerProjectPath, innerProjectType, source2);
        config2.setAttributes(attributes);

        final List<NewProjectConfig> configs = new ArrayList<>(2);
        configs.add(config2);
        configs.add(config1);

        pm.createBatchProjects(configs, false, new ProjectOutputLineConsumerFactory("ws", 300));

        RegisteredProject rootProject = projectRegistry.getProject(rootProjectPath);
        FolderEntry rootProjectFolder = rootProject.getBaseFolder();
        checkProjectExist(rootProjectPath);
        checkChildrenFor(rootProjectFolder, children1);

        RegisteredProject innerProject = projectRegistry.getProject(innerProjectPath);
        FolderEntry innerProjectFolder = innerProject.getBaseFolder();
        assertNotNull(innerProject);
        assertTrue(innerProjectFolder.getVirtualFile().exists());
        assertEquals(innerProjectPath, innerProject.getPath());
        assertEquals(innerProjectType, innerProject.getType());
        checkChildrenFor(innerProjectFolder, children2);
    }

