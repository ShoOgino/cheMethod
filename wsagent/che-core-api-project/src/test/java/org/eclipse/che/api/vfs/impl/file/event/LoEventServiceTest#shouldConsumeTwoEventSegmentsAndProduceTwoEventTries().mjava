    @Test
    public void shouldConsumeTwoEventSegmentsAndProduceTwoEventTries() throws Exception {
        final LoEvent loEventI = getLoEvent(separator + FOLDER_NAME + 1 + separator + FILE_NAME + 1, FILE_NAME + 1);
        loEventQueueHolder.put(loEventI);
        final Optional<EventTreeNode> rootOptionalI = eventTreeQueueHolder.take();

        sleep(TIMEOUT); // this is required to properly simulate delay between events, should exceed max event interval

        final LoEvent loEventII = getLoEvent(separator + FOLDER_NAME + 2 + separator + FILE_NAME + 2, FILE_NAME + 2);
        loEventQueueHolder.put(loEventII);
        final Optional<EventTreeNode> rootOptionalII = eventTreeQueueHolder.take();

        assertNotNull(rootOptionalI);
        assertTrue(rootOptionalI.isPresent());
        assertNotNull(rootOptionalII);
        assertTrue(rootOptionalII.isPresent());

        final EventTreeNode rootI = rootOptionalI.get();
        final EventTreeNode rootII = rootOptionalII.get();

        assertEquals(1, rootI.getChildren().size());
        assertEquals(1, rootII.getChildren().size());

        final Optional<EventTreeNode> folderOptionalI = rootI.getChild(FOLDER_NAME + 1);
        final Optional<EventTreeNode> folderOptionalII = rootII.getChild(FOLDER_NAME + 2);

        assertNotNull(folderOptionalI);
        assertTrue(folderOptionalI.isPresent());
        assertNotNull(folderOptionalI);
        assertTrue(folderOptionalII.isPresent());

        final EventTreeNode folderI = folderOptionalI.get();
        final EventTreeNode folderII = folderOptionalII.get();

        assertEquals(1, folderI.getChildren().size());
        assertEquals(1, folderII.getChildren().size());

        final Optional<EventTreeNode> fileOptionalI = folderI.getChild(FILE_NAME + 1);
        final Optional<EventTreeNode> fileOptionalII = folderII.getChild(FILE_NAME + 2);

        assertNotNull(fileOptionalI);
        assertTrue(fileOptionalI.isPresent());
        assertNotNull(fileOptionalII);
        assertTrue(fileOptionalII.isPresent());

        final EventTreeNode fileI = fileOptionalI.get();
        final EventTreeNode fileII = fileOptionalII.get();

        assertEquals(FILE_NAME + 1, fileI.getName());
        assertEquals(FILE_NAME + 2, fileII.getName());
    }

