    @Test
    public void shouldConsumeSimpleEventSegmentAndProduceEventTree() throws Exception {
        final LoEvent loEvent = getLoEvent(PATH, FILE_NAME);
        loEventQueueHolder.put(loEvent);
        final Optional<EventTreeNode> rootOptional = eventTreeQueueHolder.take();

        assertNotNull(rootOptional);
        assertTrue(rootOptional.isPresent());

        final EventTreeNode root = rootOptional.get();
        assertTrue(root.isRoot());
        assertFalse(root.modificationOccurred());

        final Optional<EventTreeNode> dirOptional = root.getChild(FOLDER_NAME);
        assertNotNull(dirOptional);
        assertTrue(dirOptional.isPresent());

        final EventTreeNode dir = dirOptional.get();
        assertEquals(1, dir.getChildren().size());
        assertFalse(dir.modificationOccurred());

        final Optional<EventTreeNode> fileOptional = dir.getChild(FILE_NAME);

        assertNotNull(fileOptional);
        assertTrue(fileOptional.isPresent());

        final EventTreeNode file = fileOptional.get();
        assertTrue(file.modificationOccurred());
        assertEquals(MODIFIED, file.getLastEventType());
        assertTrue(file.isFile());
        assertEquals(PATH, file.getPath());
        assertEquals(FILE_NAME, file.getName());
    }

