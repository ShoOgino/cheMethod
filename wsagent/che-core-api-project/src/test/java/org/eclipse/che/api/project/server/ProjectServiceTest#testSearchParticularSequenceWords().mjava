    @SuppressWarnings("unchecked")
    @Test
    public void testSearchParticularSequenceWords() throws Exception {
        String queryToSearch = "?text=" + URL_ENCODED_QUOTES +
                               "To" + URL_ENCODED_SPACE +
                               "be" + URL_ENCODED_SPACE +
                               "or" + URL_ENCODED_SPACE +
                               "not" + URL_ENCODED_SPACE +
                               "to" + URL_ENCODED_SPACE +
                               "be" + URL_ENCODED_QUOTES;
        RegisteredProject myProject = pm.getProject("my_project");
        myProject.getBaseFolder().createFolder("x/y")
                 .createFile("containsSearchText.txt", "To be or not to be that is the question".getBytes(
                         Charset.defaultCharset()));
        myProject.getBaseFolder().createFolder("a/b").createFile("test.txt", "Pay attention! To be or to be that is the question".getBytes(
                Charset.defaultCharset()));
        myProject.getBaseFolder().createFolder("c")
                 .createFile("_test", "Pay attention! To be or to not be that is the question".getBytes(Charset.defaultCharset()));

        ContainerResponse response =
                launcher.service(GET, "http://localhost:8080/api/project/search/my_project" + queryToSearch,
                                 "http://localhost:8080/api", null, null, null);
        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
        List<SearchResultDto> result = (List<SearchResultDto>)response.getEntity();
        assertEquals(result.size(), 1);
        Set<String> paths = new LinkedHashSet<>(1);
        paths.addAll(result.stream().map((SearchResultDto t) -> t.getItemReference().getPath()).collect(Collectors.toList()));
        Assert.assertTrue(paths.contains("/my_project/x/y/containsSearchText.txt"));
    }

