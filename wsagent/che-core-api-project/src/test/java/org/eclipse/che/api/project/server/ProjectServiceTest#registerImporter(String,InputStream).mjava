  private void registerImporter(String importType, InputStream zip) throws Exception {
    final ValueHolder<FolderEntry> folderHolder = new ValueHolder<>();
    importerRegistry.register(
        new ProjectImporter() {
          @Override
          public String getId() {
            return importType;
          }

          @Override
          public boolean isInternal() {
            return false;
          }

          @Override
          public String getDescription() {
            return "Chuck importer";
          }

          @Override
          public void importSources(FolderEntry baseFolder, SourceStorage storage)
              throws ConflictException, ServerException, ForbiddenException {
            importSources(baseFolder, storage, LineConsumerFactory.NULL);
          }

          @Override
          public void importSources(
              FolderEntry baseFolder,
              SourceStorage storage,
              LineConsumerFactory importOutputConsumerFactory)
              throws ConflictException, ServerException, ForbiddenException {
            // Don't really use location in this test.
            baseFolder.getVirtualFile().unzip(zip, true, 0);
            folderHolder.set(baseFolder);
          }

          @Override
          public ImporterCategory getCategory() {
            return ImporterCategory.ARCHIVE;
          }
        });
  }

