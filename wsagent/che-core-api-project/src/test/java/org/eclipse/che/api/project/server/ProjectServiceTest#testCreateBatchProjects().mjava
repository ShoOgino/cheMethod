    @Test
    public void testCreateBatchProjects() throws Exception {
        //prepare first project
        final String projectName1 = "testProject1";
        final String projectTypeId1 = "testProjectType1";
        final String projectPath1 = "/testProject1";

        createTestProjectType(projectTypeId1);
        phRegistry.register(createProjectHandlerFor(projectName1, projectTypeId1));

        //prepare inner project
        final String innerProjectName = "innerProject";
        final String innerProjectTypeId = "testProjectType2";
        final String innerProjectPath = "/testProject1/innerProject";

        createTestProjectType(innerProjectTypeId);
        phRegistry.register(createProjectHandlerFor(innerProjectName, innerProjectTypeId));

        //prepare project to import
        final String importProjectName = "testImportProject";
        final String importProjectTypeId = "testImportProjectType";
        final String importProjectPath = "/testImportProject";
        final String importType = "importType";
        final String[] paths = {"a", "b", "test.txt"};

        final List<String> children = new ArrayList<>(Arrays.asList(paths));
        registerImporter(importType, prepareZipArchiveBasedOn(children));
        createTestProjectType(importProjectTypeId);

        Map<String, List<String>> headers = new HashMap<>();
        headers.put("Content-Type", singletonList(APPLICATION_JSON));

        try (InputStream content = getClass().getResourceAsStream("batchNewProjectConfigs.json")) {
            ContainerResponse response = launcher.service(POST,
                                                          "http://localhost:8080/api/project/batch",
                                                          "http://localhost:8080/api",
                                                          headers,
                                                          ByteStreams.toByteArray(content), null);

            assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());

            final List<ProjectConfigDto> result = (List<ProjectConfigDto>)response.getEntity();
            assertNotNull(result);
            assertEquals(result.size(), 3);

            final ProjectConfigDto importProjectConfig = result.get(0);
            checkProjectIsCreated(importProjectName, importProjectPath, importProjectTypeId, importProjectConfig);

            final ProjectConfigDto config1 = result.get(1);
            checkProjectIsCreated(projectName1, projectPath1, projectTypeId1, config1);

            final ProjectConfigDto innerProjectConfig = result.get(2);
            checkProjectIsCreated(innerProjectName, innerProjectPath, innerProjectTypeId, innerProjectConfig);
        }
    }

