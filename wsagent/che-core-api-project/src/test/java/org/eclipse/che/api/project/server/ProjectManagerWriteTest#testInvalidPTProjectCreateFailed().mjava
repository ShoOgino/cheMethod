    @Test
    public void testInvalidPTProjectCreateFailed() throws Exception {
        // SPECS:
        // project will be created as project of "blank" type
        // with problem code 12(Primary type "someType" is not registered. Base Project Type assigned.)
        // when primary project type is not registered in PT registry
        final String path = "/testInvalidPTProjectCreateFailed";
        ProjectConfig pc = new NewProjectConfigImpl(path, "invalid", null, "name", "descr", null, null, null);

        pm.createProject(pc, null);

        RegisteredProject project = projectRegistry.getProject(path);
        assertNotNull(project);
        assertNotNull(pm.getProjectsRoot().getChild(path));
        assertEquals(BaseProjectType.ID, project.getType());

        List<Problem> problems = project.getProblems();
        assertNotNull(problems);
        assertFalse(problems.isEmpty());
        assertEquals(1, problems.size());
        assertEquals(12, problems.get(0).code);

        //clean up
        project.getBaseFolder().getVirtualFile().delete();
        projectRegistry.removeProjects(path);
        assertNull(projectRegistry.getProject(path));


        // SPECS:
        // project will be created without mixin project type and
        // with problem code 12(Project type "someType" is not registered. Skipped.)
        // when mixin project type is not registered in PT registry
        List<String> ms = new ArrayList<>();
        ms.add("invalid");

        pc = new NewProjectConfigImpl(path, "blank", ms, "name", "descr", null, null, null);
        pm.createProject(pc, null);

        project = projectRegistry.getProject(path);
        assertNotNull(project);
        assertNotNull(pm.getProjectsRoot().getChild(path));
        assertTrue(project.getMixins().isEmpty());

        problems = project.getProblems();
        assertNotNull(problems);
        assertFalse(problems.isEmpty());
        assertEquals(1, problems.size());
        assertEquals(12, problems.get(0).code);
    }

