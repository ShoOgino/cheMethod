    @Before
    public void setUp() throws Exception {

        super.setUp();

        new File(root, "/project1").mkdir();


        List<ProjectConfigDto> projects = new ArrayList<>();
        projects.add(DtoFactory.newDto(ProjectConfigDto.class)
                               .withPath("/project1")
                               .withName("project1Name")
                               .withType("primary1"));


        workspaceHolder = new TestWorkspaceHolder(projects);
        ProjectTypeRegistry projectTypeRegistry = new ProjectTypeRegistry(new HashSet<>());
        projectTypeRegistry.registerProjectType(new PT1());
        //projectTypeRegistry.registerProjectType(new PT3());

        //ProjectHandlerRegistry projectHandlerRegistry = new ProjectHandlerRegistry(new HashSet<>());


        projectRegistry = new ProjectRegistry(workspaceHolder, vfsProvider, projectTypeRegistry, projectHandlerRegistry, eventService);
        projectRegistry.initProjects();

        pm = new ProjectManager(vfsProvider, null, projectTypeRegistry, projectRegistry, projectHandlerRegistry,
                                null, fileWatcherNotificationHandler, fileTreeWatcher);
        pm.initWatcher();


        projectHandlerRegistry.register(new ProjectInitHandler() {
            @Override
            public void onProjectInitialized(ProjectRegistry registry, FolderEntry projectFolder)
                    throws ServerException, NotFoundException, ConflictException, ForbiddenException {

                projectFolder.createFile("generated", "test".getBytes());
                projectFolder.createFolder("project2");
                projectRegistry.setProjectType("/project1/project2", BaseProjectType.ID, false);

                //System.out.println(">>S>>> "+projectRegistry);

            }

            @Override
            public String getProjectType() {
                return "primary1";
            }
        });

    }

