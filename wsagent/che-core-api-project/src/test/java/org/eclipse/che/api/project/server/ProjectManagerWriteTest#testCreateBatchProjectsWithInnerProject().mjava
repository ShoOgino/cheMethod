    @Test
    public void testCreateBatchProjectsWithInnerProject() throws Exception {
        final String rootProjectPath = "/testProject1";
        final String innerProjectPath = "/testProject1/innerProject";
        final String importType = "importType1";
        final String innerProjectType = "pt2";

        Map<String, List<String>> attributes = new HashMap<>();
        attributes.put("pt2-var2", new AttributeValue("test").getList());

        final String [] paths1 = {"folder1/", "folder1/file1.txt"};
        final String [] paths2 = {"innerProject/", "innerProject/folder2/", "innerProject/folder2/file2.txt"};
        final List<String> children1 = Arrays.asList(paths1);
        final List<String> children2 = Arrays.asList(paths2);
        final List<String> children = new ArrayList<>(children1);
        children.addAll(children2);
        registerImporter(importType, prepareZipArchiveBasedOn(children));

        SourceStorageDto source = DtoFactory.newDto(SourceStorageDto.class).withLocation("someLocation").withType(importType);
        NewProjectConfigDto config1 = createProjectConfigObject("testProject1", rootProjectPath, BaseProjectType.ID, source);
        NewProjectConfigDto config2 = createProjectConfigObject("innerProject", innerProjectPath, innerProjectType, null);
        config2.setAttributes(attributes);

        List<NewProjectConfig> configs = new ArrayList<>(2);
        configs.add(config1);
        configs.add(config2);

        pm.createBatchProjects(configs, false);

        RegisteredProject rootProject = projectRegistry.getProject(rootProjectPath);
        FolderEntry rootProjectFolder = rootProject.getBaseFolder();
        RegisteredProject innerProject = projectRegistry.getProject(innerProjectPath);
        FolderEntry innerProjectFolder = innerProject.getBaseFolder();


        assertNotNull(rootProject);
        assertTrue(rootProjectFolder.getVirtualFile().exists());
        assertEquals(rootProjectPath, rootProject.getPath());
        checkChildrenFor(rootProjectFolder, children1);

        assertNotNull(innerProject);
        assertTrue(innerProjectFolder.getVirtualFile().exists());
        assertEquals(innerProjectPath, innerProject.getPath());
        assertEquals(innerProjectType, innerProject.getType());
        checkChildrenFor(rootProjectFolder, children2);
    }

