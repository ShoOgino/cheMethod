  @Test
  public void verifyFileLinks() throws Exception {
    ItemReference itemReference = DtoFactory.newDto(ItemReference.class);
    itemReference.withPath(FILE_PATH);

    ItemReference result =
        projectServiceLinksInjector.injectFileLinks(itemReference, serviceContext);

    assertEquals(3, result.getLinks().size());

    Link updateLink = result.getLink("update content");
    assertNotNull(updateLink);
    assertEquals("localhost:8080/project/file/project1/folder/file", updateLink.getHref());
    assertEquals(HttpMethod.PUT, updateLink.getMethod());
    assertEquals(LINK_REL_UPDATE_CONTENT, updateLink.getRel());
    assertEquals(null, updateLink.getProduces());
    assertEquals(MediaType.WILDCARD, updateLink.getConsumes());

    Link getContentLink = result.getLink("get content");
    assertNotNull(getContentLink);
    assertEquals("localhost:8080/project/file/project1/folder/file", getContentLink.getHref());
    assertEquals(HttpMethod.GET, getContentLink.getMethod());
    assertEquals(LINK_REL_GET_CONTENT, getContentLink.getRel());
    assertEquals(APPLICATION_JSON, getContentLink.getProduces());

    Link deleteLink = result.getLink("delete");
    assertNotNull(deleteLink);
    assertEquals("localhost:8080/project/project1/folder/file", deleteLink.getHref());
    assertEquals(HttpMethod.DELETE, deleteLink.getMethod());
    assertEquals(LINK_REL_DELETE, deleteLink.getRel());
  }

