    @Override
    public void launch(Instance machine, Agent agent) throws ServerException {
        final String wsAgentPingUrl;
        try {
            wsAgentPingUrl = wsAgentPingRequestFactory.createRequest(machine).getUrl();
        } catch (ServerException e) {
            throw new MachineException(e.getServiceError());
        }

        String script = agent.getScript() + "\n" + firstNonNull(wsAgentRunCommand, DEFAULT_WS_AGENT_RUN_COMMAND);
        try {
            // for server side type of command mean nothing
            // but we will use it as marker on
            // client side for track this command
            CommandImpl command = new CommandImpl(getAgentId(), script, WS_AGENT_PROCESS_NAME);

            machineProcessManagerProvider.get().exec(machine.getWorkspaceId(),
                                                     machine.getId(),
                                                     command,
                                                     getWsAgentProcessOutputChannel(machine.getWorkspaceId()));

            final long pingStartTimestamp = System.currentTimeMillis();
            LOG.debug("Starts pinging ws agent. Workspace ID:{}. Url:{}. Timestamp:{}",
                      machine.getWorkspaceId(),
                      wsAgentPingUrl,
                      pingStartTimestamp);

            while (System.currentTimeMillis() - pingStartTimestamp < wsAgentMaxStartTimeMs) {
                if (pingWsAgent(machine)) {
                    return;
                } else {
                    Thread.sleep(wsAgentPingDelayMs);
                }
            }
        } catch (BadRequestException | ServerException | NotFoundException e) {
            throw new ServerException(e.getServiceError());
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new ServerException("Ws agent pinging is interrupted");
        }
        LOG.error("Fail pinging ws agent with {} url in {} workspace in {} machine on {} node.",
                  wsAgentPingUrl,
                  machine.getWorkspaceId(),
                  machine.getId(),
                  machine.getNode().getHost());
        throw new ServerException(pingTimedOutErrorMessage);
    }

