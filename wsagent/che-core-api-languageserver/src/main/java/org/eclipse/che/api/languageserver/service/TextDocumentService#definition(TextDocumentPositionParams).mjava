    private List<LocationDto> definition(TextDocumentPositionParams textDocumentPositionParams) {
        try {
            textDocumentPositionParams.getTextDocument().setUri(prefixURI(textDocumentPositionParams.getTextDocument().getUri()));
            LanguageServer server = getServer(textDocumentPositionParams.getTextDocument().getUri());
            if (server == null) {
                return Collections.emptyList();
            }

            List<? extends Location> locations = server.getTextDocumentService().definition(textDocumentPositionParams).get();
            locations.forEach(o -> o.setUri(removePrefixUri(o.getUri())));
            return locations.stream().map(LocationDto::new).collect(Collectors.toList());
        } catch (InterruptedException | ExecutionException | LanguageServerException e) {
            throw new JsonRpcException(-27000, e.getMessage());
        }
    }

