  @Override
  public CompletableFuture<Pair<LanguageServer, InitializeResult>> initialize(
      LanguageServerLauncher launcher, LanguageClient client, String projectPath)
      throws LanguageServerException {
    InitializeParams initializeParams = prepareInitializeParams(launcher, projectPath);
    String launcherId = launcher.getDescription().getId();
    CompletableFuture<Pair<LanguageServer, InitializeResult>> result =
        new CompletableFuture<Pair<LanguageServer, InitializeResult>>();

    long threadId = Thread.currentThread().getId();
    LanguageServer server;
    try {
      server = launcher.launch(projectPath, client);
      LOG.info(
          "Launched language server {} on thread {} and project {}",
          launcherId,
          threadId,
          projectPath);
    } catch (LanguageServerException e) {
      result.completeExceptionally(
          new LanguageServerException(
              "Can't initialize Language Server "
                  + launcherId
                  + " on "
                  + projectPath
                  + ". "
                  + e.getMessage(),
              e));
      return result;
    }
    registerCallbacks(server, launcher);

    LOG.info(
        "Initializing language server {} on thread {} and project {}",
        launcherId,
        threadId,
        projectPath);

    CompletableFuture<InitializeResult> completableFuture = server.initialize(initializeParams);
    completableFuture
        .thenAccept(
            (InitializeResult res) -> {
              LOG.info(
                  "Initialized language server {} on thread {} and project {}",
                  launcherId,
                  threadId,
                  projectPath);
              onServerInitialized(launcher, server, res.getCapabilities(), projectPath);
              result.complete(Pair.of(server, res));
            })
        .exceptionally(
            (Throwable e) -> {
              server.shutdown();
              server.exit(); // TODO: WAIT FOR SHUTDOWN TO COMPLETE
              result.completeExceptionally(e);
              return null;
            });
    return result;
  }

