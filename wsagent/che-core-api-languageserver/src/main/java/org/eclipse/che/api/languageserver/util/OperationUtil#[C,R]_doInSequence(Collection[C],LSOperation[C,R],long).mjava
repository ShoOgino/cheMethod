  /**
   * Execute the given operation on each element of the collection in sequence. Stops as soon as
   * {@link LSOperation#canDo(Object)} returns true.
   *
   * @param collection
   * @param op
   * @param timeoutMillis
   */
  public static <C, R> void doInSequence(
      Collection<C> collection, LSOperation<C, R> op, long timeoutMillis) {
    long endTime = System.currentTimeMillis() + timeoutMillis;
    for (C element : collection) {
      if (op.canDo(element)) {
        CompletableFuture<R> future = op.start(element);
        try {
          R result = future.get(Math.max(endTime - timeoutMillis, 1), TimeUnit.MILLISECONDS);
          if (op.handleResult(element, result)) {
            return;
          }
        } catch (InterruptedException e) {
          LOG.info("Thread interrupted", e);
          Thread.currentThread().interrupt();
        } catch (ExecutionException e) {
          LOG.info("Exception occurred in op", e);
        } catch (TimeoutException e) {
          future.cancel(true);
        }
      }
    }
  }

