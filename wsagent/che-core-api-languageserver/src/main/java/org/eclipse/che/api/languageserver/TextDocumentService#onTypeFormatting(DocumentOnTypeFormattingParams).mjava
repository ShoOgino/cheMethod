  private List<TextEditDto> onTypeFormatting(
      DocumentOnTypeFormattingParams documentOnTypeFormattingParams) {
    try {
      String wsPath = documentOnTypeFormattingParams.getTextDocument().getUri();
      Optional<ExtendedLanguageServer> serverOptional =
          findServer
              .byPath(wsPath)
              .stream()
              .filter(it -> it.getCapabilities().getDocumentOnTypeFormattingProvider() != null)
              .findFirst();
      if (serverOptional.isPresent()) {
        String lsId = serverOptional.get().getId();
        URI uri = languageServerPathTransformer.toFsURI(lsId, wsPath);
        documentOnTypeFormattingParams.getTextDocument().setUri(uri.toString());

        return serverOptional
            .get()
            .getTextDocumentService()
            .onTypeFormatting(documentOnTypeFormattingParams)
            .get()
            .stream()
            .map(TextEditDto::new)
            .collect(Collectors.toList());
      } else {
        return emptyList();
      }
    } catch (InterruptedException | ExecutionException e) {
      throw new JsonRpcException(-27000, e.getMessage());
    }
  }

