  private DocumentHighlightDto documentHighlight(
      TextDocumentPositionParams textDocumentPositionParams) {
    String wsPath = textDocumentPositionParams.getTextDocument().getUri();
    String uri = prefixURI(wsPath);
    textDocumentPositionParams.getTextDocument().setUri(uri);
    @SuppressWarnings("unchecked")
    List<DocumentHighlightDto>[] result = new List[1];
    LSOperation<ExtendedLanguageServer, List<DocumentHighlightDto>> op =
        new LSOperation<ExtendedLanguageServer, List<DocumentHighlightDto>>() {

          @Override
          public boolean canDo(ExtendedLanguageServer servers) {
            return true;
          }

          @Override
          public CompletableFuture<List<DocumentHighlightDto>> start(
              ExtendedLanguageServer element) {
            return CompletableFuture.supplyAsync(
                () -> {
                  List<DocumentHighlightDto> res = new ArrayList<>();
                  LSOperation<ExtendedLanguageServer, List<? extends DocumentHighlight>> op2 =
                      new LSOperation<ExtendedLanguageServer, List<? extends DocumentHighlight>>() {

                        @Override
                        public boolean canDo(ExtendedLanguageServer lsProxy) {
                          return truish(lsProxy.getCapabilities().getDocumentHighlightProvider());
                        }

                        @Override
                        public CompletableFuture<List<? extends DocumentHighlight>> start(
                            ExtendedLanguageServer element) {
                          return element
                              .getTextDocumentService()
                              .documentHighlight(textDocumentPositionParams);
                        }

                        @Override
                        public boolean handleResult(
                            ExtendedLanguageServer element,
                            List<? extends DocumentHighlight> result) {

                          return false;
                        }
                      };
                  OperationUtil.doInParallel(Collections.singleton(element), op2, 10000);

                  return res;
                });
          }

          @Override
          public boolean handleResult(
              ExtendedLanguageServer element, List<DocumentHighlightDto> list) {
            result[0] = list;
            return !list.isEmpty();
          }
        };
    OperationUtil.doInSequence(findServer.byPath(wsPath), op, 10000);

    if (!result[0].isEmpty()) {
      return result[0].get(0);
    }
    return null;
  }

