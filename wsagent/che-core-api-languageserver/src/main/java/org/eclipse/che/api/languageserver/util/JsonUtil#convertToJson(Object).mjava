    public static JsonElement convertToJson(Object value) {
        Class<?> t = value.getClass();
        if (Enum.class.isAssignableFrom(t)) {
            return new JsonPrimitive(((Enum<?>)value).name());
        } else if (String.class.isAssignableFrom(t)) {
            return new JsonPrimitive((String)value);
        } else if (Number.class.isAssignableFrom(t)) {
            return new JsonPrimitive(((Number)value).doubleValue());
        } else if (Boolean.class.isAssignableFrom(t)) {
            return new JsonPrimitive((boolean)value);
        } else if (JsonSerializable.class.isAssignableFrom(t)) {
            return ((JsonSerializable)value).toJsonElement();
        } else if (value instanceof JsonElement) {
            return (JsonElement)value;
        } else if (value instanceof Map) {
            // assumption here is that this is a json-like structure with map for object, list for array, etc.
            @SuppressWarnings("unchecked")
            Map<String, Object> object= (Map<String, Object>) value;
            JsonObject result= new JsonObject();
            for (Entry<String, Object> prop : object.entrySet()) {
                result.add(prop.getKey(), convertToJson(prop.getValue()));
            }
            return result;
        } else if (value instanceof List) {
            // assumption here is that this is a json-like structure with map for object, list for array, etc.
            @SuppressWarnings("unchecked")
            List<Object> array= (List<Object>) value;
            JsonArray result= new JsonArray();
            for (Object object : array) {
                result.add(convertToJson(object));
            }
            return result;
        }
        throw new RuntimeException("Unexpected runtime value: " + value);
    }

