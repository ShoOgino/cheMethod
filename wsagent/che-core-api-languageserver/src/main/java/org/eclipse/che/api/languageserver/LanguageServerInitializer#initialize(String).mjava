  /**
   * Initialize all language servers that match a specified workspace path. If some servers are
   * already initialized does nothing. If some servers can't be initialized due to some errors at
   * any point - skips them and proceeds with the rest.
   *
   * @param wsPath absolute workspace path
   * @return accumulated server capabilities of all initialized language servers or empty
   *     capabilities if none language server was found for current path
   */
  public CompletableFuture<ServerCapabilities> initialize(String wsPath) {
    return supplyAsync(
        () -> {
          LOG.debug("Started language servers initialization, file path '{}'", wsPath);

          configInitializer.initialize();
          Set<ServerCapabilities> serverCapabilitiesSet =
              findId
                  .byPath(wsPath)
                  .stream()
                  .map(this::initializeIOStreams)
                  .filter(Objects::nonNull)
                  .map(this::createServerInstance)
                  .filter(Objects::nonNull)
                  .map(id -> initializeServerInstance(id, wsPath))
                  .filter(Objects::nonNull)
                  .map(serverCapabilitiesRegistry::getOrNull)
                  .filter(Objects::nonNull)
                  .collect(toSet());

          LOG.debug("Finished language servers initialization, file path '{}'", wsPath);

          LOG.debug("Calculating number of initialized servers and accumulating capabilities");
          if (serverCapabilitiesSet.isEmpty()) {
            // None language server was found for current path
            return new ServerCapabilities();
          } else {
            return serverCapabilitiesSet
                .stream()
                .reduce(new ServerCapabilities(), serverCapabilitiesAccumulator);
          }
        },
        executor);
  }

