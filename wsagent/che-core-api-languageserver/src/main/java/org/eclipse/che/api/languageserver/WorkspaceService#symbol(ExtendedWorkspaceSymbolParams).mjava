  private List<SymbolInformationDto> symbol(ExtendedWorkspaceSymbolParams workspaceSymbolParams) {
    List<SymbolInformationDto> result = new ArrayList<>();
    String wsPath = workspaceSymbolParams.getFileUri();
    Set<ExtendedLanguageServer> servers = findServer.byPath(wsPath);
    OperationUtil.doInParallel(
        servers,
        new LSOperation<ExtendedLanguageServer, List<? extends SymbolInformation>>() {

          @Override
          public boolean canDo(ExtendedLanguageServer element) {
            return truish(element.getCapabilities().getWorkspaceSymbolProvider());
          }

          @Override
          public CompletableFuture<List<? extends SymbolInformation>> start(
              ExtendedLanguageServer element) {
            return element.getWorkspaceService().symbol(workspaceSymbolParams);
          }

          @Override
          public boolean handleResult(
              ExtendedLanguageServer server, List<? extends SymbolInformation> locations) {
            locations.forEach(
                location -> {
                  String uri = location.getLocation().getUri();
                  String wsPath = languageServerPathTransformer.toWsPath(server.getId(), uri);
                  location.getLocation().setUri(wsPath);
                  result.add(new SymbolInformationDto(location));
                });
            return true;
          }
        },
        10000);
    return result;
  }

