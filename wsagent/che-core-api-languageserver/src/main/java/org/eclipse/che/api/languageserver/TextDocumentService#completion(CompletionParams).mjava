  private ExtendedCompletionListDto completion(CompletionParams completionParams) {
    TextDocumentIdentifier textDocument = completionParams.getTextDocument();
    String wsPath = textDocument.getUri();

    ExtendedCompletionListDto[] result = new ExtendedCompletionListDto[1];
    result[0] = new ExtendedCompletionListDto();
    result[0].setInComplete(true);
    result[0].setItems(newLinkedList());

    LSOperation<ExtendedLanguageServer, Either<List<CompletionItem>, CompletionList>> lsOperation =
        new LSOperation<ExtendedLanguageServer, Either<List<CompletionItem>, CompletionList>>() {
          @Override
          public boolean canDo(ExtendedLanguageServer element) {
            return element.getCapabilities().getCompletionProvider() != null;
          }

          @Override
          public CompletableFuture<Either<List<CompletionItem>, CompletionList>> start(
              ExtendedLanguageServer element) {
            CompletionParams clonedCompletionParams = lsParamsCloner.clone(completionParams);
            URI uri = languageServerPathTransformer.toFsURI(element.getId(), wsPath);
            clonedCompletionParams.getTextDocument().setUri(uri.toString());

            return element.getTextDocumentService().completion(clonedCompletionParams);
          }

          @Override
          public boolean handleResult(
              ExtendedLanguageServer element, Either<List<CompletionItem>, CompletionList> r) {
            List<ExtendedCompletionItem> items = newLinkedList();

            List<CompletionItem> itemList;
            if (r.isRight()) {
              result[0].setInComplete(result[0].isInComplete() && r.getRight().isIncomplete());
              itemList = r.getRight().getItems();
            } else {
              itemList = r.getLeft();
            }

            for (CompletionItem item : itemList) {
              ExtendedCompletionItem exItem = new ExtendedCompletionItemDto();
              exItem.setItem(new CompletionItemDto(item));
              exItem.setLanguageServerId(element.getId());
              items.add(exItem);
            }

            result[0].getItems().addAll(items);
            return false;
          }
        };

    Set<ExtendedLanguageServer> languageServers = findServer.byPath(wsPath);
    OperationUtil.doInSequence(languageServers, lsOperation, 10000);

    return result[0];
  }

