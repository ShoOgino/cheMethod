  private List<TextEditDto> formatting(DocumentFormattingParams documentFormattingParams) {
    try {
      String wsPath = documentFormattingParams.getTextDocument().getUri();

      Optional<ExtendedLanguageServer> serverOptional =
          findServer
              .byPath(wsPath)
              .stream()
              .filter(s -> truish(s.getCapabilities().getDocumentFormattingProvider()))
              .findFirst();
      if (serverOptional.isPresent()) {
        String lsId = serverOptional.get().getId();
        URI uri = languageServerPathTransformer.toFsURI(lsId, wsPath);
        documentFormattingParams.getTextDocument().setUri(uri.toString());
        return serverOptional
            .get()
            .getTextDocumentService()
            .formatting(documentFormattingParams)
            .get(5000, TimeUnit.MILLISECONDS)
            .stream()
            .map(TextEditDto::new)
            .collect(Collectors.toList());
      } else {
        return emptyList();
      }
    } catch (InterruptedException | ExecutionException | TimeoutException e) {
      throw new JsonRpcException(-27000, e.getMessage());
    }
  }

