  private String getFileContent(String uri) {
    String[] result = new String[1];
    try {

      List<InitializedLanguageServer> servers =
          languageServerRegistry
              .getApplicableLanguageServers(uri)
              .stream()
              .flatMap(Collection::stream)
              .collect(Collectors.toList());
      LSOperation<InitializedLanguageServer, String> op =
          new LSOperation<InitializedLanguageServer, String>() {
            @Override
            public boolean canDo(InitializedLanguageServer server) {
              return server.getServer() instanceof FileContentAccess;
            }

            @Override
            public CompletableFuture<String> start(InitializedLanguageServer element) {
              return ((FileContentAccess) element.getServer()).getFileContent(uri);
            }

            @Override
            public boolean handleResult(InitializedLanguageServer element, String res) {
              result[0] = res;
              return res != null;
            }
          };
      OperationUtil.doInSequence(servers, op, TimeUnit.SECONDS.toMillis(30));

    } catch (LanguageServerException e) {
      throw new JsonRpcException(-27000, e.getMessage());
    }
    return result[0];
  }

