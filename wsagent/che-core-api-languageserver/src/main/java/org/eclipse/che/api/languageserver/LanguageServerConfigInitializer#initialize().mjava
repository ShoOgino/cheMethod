  @PostConstruct
  void initialize() {
    LOG.info("Language server config processing: started");
    for (LanguageServerConfigProvider provider : providers) {
      Map<String, LanguageServerConfig> configs = provider.getAll();
      for (Entry<String, LanguageServerConfig> entry : configs.entrySet()) {
        String id = entry.getKey();
        LOG.debug("Processing for language server {}: started", id);

        if (idRegistry.contains(id)) {
          LOG.debug("Language server with such id is already registered");
          continue;
        }

        LanguageServerConfig config = entry.getValue();

        InstallerStatusProvider installerStatusProvider = config.getInstallerStatusProvider();
        boolean isLocal = installerStatusProvider != null;
        LOG.debug("Locality: {}", isLocal);

        if (isLocal && !installerStatusProvider.isSuccessfullyInstalled()) {
          String cause = installerStatusProvider.getCause();
          LOG.debug("Installation for a language server with id '{}' is not performed", id);
          LOG.debug("The cause: {}", cause);
          LOG.debug("Skipping this language server configuration");

          continue;
        }

        CommunicationProvider communicationProvider = config.getCommunicationProvider();

        InstanceProvider instanceProvider = config.getInstanceProvider();

        Map<String, String> languageRegexes = config.getRegexpProvider().getLanguageRegexes();
        LOG.debug("Language regexes: {}", languageRegexes);

        Set<String> fileWatchPatterns = config.getRegexpProvider().getFileWatchPatterns();
        LOG.debug("File watch patterns: {}", fileWatchPatterns);

        Set<Pattern> patterns =
            languageRegexes.values().stream().map(Pattern::compile).collect(toSet());

        FileSystem fileSystem = FileSystems.getDefault();
        Set<PathMatcher> pathMatchers =
            fileWatchPatterns.stream().map(fileSystem::getPathMatcher).collect(toSet());

        idRegistry.add(id, id);
        pathMatcherRegistry.add(id, pathMatchers);
        patternRegistry.add(id, patterns);
        instanceProviderRegistry.add(id, instanceProvider);
        communicationProviderRegistry.add(id, communicationProvider);
        localityRegistry.add(id, isLocal);

        languageRegexes.forEach(languageFilterRegistry::add);

        LOG.debug("Processing for language server {}: finished", id);
      }
    }
    LOG.debug("Language server config processing: finished");
  }

