  public ServerCapabilities initialize(String fileUri) throws LanguageServerException {
    long thread = Thread.currentThread().getId();
    List<LanguageServerLauncher> interestedLaunchers = findApplicableLaunchers(fileUri);
    LOG.info("interested launchers for thread {} : {} ", thread, interestedLaunchers);
    // launchers is the set of things we need to have initialized
    Set<String> requiredServers = new HashSet<>();

    for (LanguageServerLauncher launcher : interestedLaunchers) {
      LaunchingStrategy launchingStrategy = launcher.getLaunchingStrategy();
      String key = launchingStrategy.getLaunchKey(fileUri);
      requiredServers.add(key);
      synchronized (initializedServers) {
        if (!launchedServers.contains(key)) {
          launchedServers.add(key);
          String id = String.valueOf(serverId.incrementAndGet());
          String launcherId = launcher.getDescription().getId();
          long threadId = Thread.currentThread().getId();
          try {
            LanguageServer server = launcher.launch(fileUri, clientFactory.create(id));
            LOG.info(
                "Launched language server {} on thread {} and fileUri {}",
                launcherId,
                threadId,
                fileUri);
            registerCallbacks(server);

            LOG.info(
                "Initializing language server {} on thread {} and fileUri {}",
                launcherId,
                threadId,
                fileUri);
            String rootUri = launchingStrategy.getRootUri(fileUri);
            InitializeParams initializeParams = prepareInitializeParams(rootUri);
            CompletableFuture<InitializeResult> completableFuture =
                server.initialize(initializeParams);
            completableFuture
                .thenAccept(
                    (InitializeResult res) -> {
                      LOG.info(
                          "Initialized language server {} on thread {} and fileUri {}",
                          launcherId,
                          threadId,
                          fileUri);
                      fireServerInitialized(launcher, server, res.getCapabilities(), fileUri);
                      synchronized (initializedServers) {
                        initializedServers.add(
                            new InitializedLanguageServer(id, server, res, launcher, key));
                        LOG.info("launched for  {} : {}", thread, key);
                        requiredServers.remove(key);
                        initializedServers.notifyAll();
                      }
                    })
                .exceptionally(
                    (Throwable e) -> {
                      synchronized (initializedServers) {
                        requiredServers.remove(key);
                        launchedServers.remove(key);
                        initializedServers.notifyAll();
                      }
                      server.shutdown();
                      server.exit(); // TODO: WAIT FOR SHUTDOWN TO COMPLETE
                      return null;
                    });
          } catch (LanguageServerException e) {
            eventService.publish(
                new MessageParams(
                    MessageType.Error,
                    "Failed to initialized LS "
                        + launcher.getDescription().getId()
                        + ": "
                        + e.getMessage()));
            LOG.error("Error launching language server for thread  {}, {}", thread, launcher, e);
            synchronized (initializedServers) {
              requiredServers.remove(key);
              launchedServers.remove(key);
              initializedServers.notifyAll();
            }
          }
        }
      }
    }

    // now wait for all launchers to arrive at initialized
    // eventually, all launchers will either fail or succeed, regardless of
    // which request thread started them. Thus the loop below will
    // end.
    synchronized (initializedServers) {
      for (InitializedLanguageServer initialized : initializedServers) {
        requiredServers.remove(initialized.getLaunchKey());
      }
      while (!requiredServers.isEmpty()) {
        LOG.info("waiting for launched servers on thread {} : {}", thread, requiredServers);
        try {
          initializedServers.wait();
          for (InitializedLanguageServer initialized : initializedServers) {
            requiredServers.remove(initialized.getLaunchKey());
          }
        } catch (InterruptedException e) {
          Thread.currentThread().interrupt();
          return null;
        }
      }
    }
    return getCapabilities(fileUri);
  }

