  public ServerCapabilities initialize(String fileUri) throws LanguageServerException {
    String projectPath = extractProjectPath(fileUri);
    if (projectPath == null) {
      return null;
    }
    long thread = Thread.currentThread().getId();
    List<LanguageServerLauncher> requiredToLaunch = findLaunchersToLaunch(projectPath, fileUri);
    LOG.info("required to launch for thread " + thread + ": " + requiredToLaunch);
    // launchers is the set of things we need to have initialized

    for (LanguageServerLauncher launcher : new ArrayList<>(requiredToLaunch)) {
      synchronized (initializedServers) {
        List<LanguageServerLauncher> servers =
            launchedServers.computeIfAbsent(projectPath, k -> new ArrayList<>());

        if (!servers.contains(launcher)) {
          servers.add(launcher);
          String id = String.valueOf(serverId.incrementAndGet());
          initializer
              .initialize(launcher, clientFactory.create(id), projectPath)
              .thenAccept(
                  pair -> {
                    synchronized (initializedServers) {
                      List<InitializedLanguageServer> initialized =
                          initializedServers.computeIfAbsent(projectPath, k -> new ArrayList<>());
                      initialized.add(
                          new InitializedLanguageServer(id, pair.first, pair.second, launcher));
                      LOG.info("launched for  " + thread + ": " + requiredToLaunch);

                      requiredToLaunch.remove(launcher);
                      initializedServers.notifyAll();
                    }
                  })
              .exceptionally(
                  t -> {
                    eventService.publish(
                        new MessageParams(
                            MessageType.Error,
                            "Failed to initialized LS "
                                + launcher.getDescription().getId()
                                + ": "
                                + t.getMessage()));
                    LOG.error(
                        "Error launching language server for thread  " + thread + "  launcher", t);
                    synchronized (initializedServers) {
                      requiredToLaunch.remove(launcher);
                      servers.remove(launcher);
                      initializedServers.notifyAll();
                    }
                    return null;
                  });
        }
      }
    }

    // now wait for all launchers to arrive at initialized
    // eventually, all launchers will either fail or succeed, regardless of
    // which request thread started them. Thus the loop below will
    // end.
    synchronized (initializedServers) {
      List<InitializedLanguageServer> initForProject = initializedServers.get(projectPath);
      if (initForProject != null) {
        for (InitializedLanguageServer initialized : initForProject) {
          requiredToLaunch.remove(initialized.getLauncher());
        }
      }
      while (!requiredToLaunch.isEmpty()) {
        LOG.info("waiting for launched servers on thread " + thread + ": " + requiredToLaunch);
        try {
          initializedServers.wait();
          initForProject = initializedServers.get(projectPath);
          if (initForProject != null) {
            for (InitializedLanguageServer initialized : initForProject) {
              requiredToLaunch.remove(initialized.getLauncher());
            }
          }
        } catch (InterruptedException e) {
          Thread.currentThread().interrupt();
          return null;
        }
      }
    }
    return getCapabilities(fileUri);
  }

