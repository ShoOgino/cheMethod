  private SignatureHelpDto signatureHelp(TextDocumentPositionParams positionParams) {
    String wsPath = positionParams.getTextDocument().getUri();

    SignatureHelpDto[] result = new SignatureHelpDto[1];
    Set<ExtendedLanguageServer> servers = findServer.byPath(wsPath);
    LSOperation<ExtendedLanguageServer, SignatureHelp> op =
        new LSOperation<ExtendedLanguageServer, SignatureHelp>() {

          @Override
          public boolean canDo(ExtendedLanguageServer element) {
            return element.getCapabilities().getSignatureHelpProvider() != null;
          }

          @Override
          public CompletableFuture<SignatureHelp> start(ExtendedLanguageServer element) {
            TextDocumentPositionParams clonedPositionParams = lsParamsCloner.clone(positionParams);
            URI uri = languageServerPathTransformer.toFsURI(element.getId(), wsPath);
            clonedPositionParams.getTextDocument().setUri(uri.toString());

            return element.getTextDocumentService().signatureHelp(clonedPositionParams);
          }

          @Override
          public boolean handleResult(ExtendedLanguageServer element, SignatureHelp res) {
            if (res != null && !res.getSignatures().isEmpty()) {
              result[0] = new SignatureHelpDto(res);
              return true;
            }
            return false;
          }
        };
    OperationUtil.doInSequence(servers, op, 10000);
    return result[0];
  }

