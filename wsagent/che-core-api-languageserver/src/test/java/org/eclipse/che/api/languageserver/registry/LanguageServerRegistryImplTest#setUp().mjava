  @BeforeMethod
  public void setUp() throws Exception {

    this.serverCapabilities = new ServerCapabilities();
    serverDescription =
        new LanguageServerDescription(
            "foo", Collections.singletonList("id"), Collections.emptyList());
    initializeResult = new InitializeResult(serverCapabilities);

    completableFuture = completedFuture(initializeResult);

    when(languageServerLauncher.isAbleToLaunch()).thenReturn(true);
    when(languageServerLauncher.getDescription()).thenReturn(serverDescription);
    when(languageServerLauncher.isLocal()).thenReturn(true);
    when(languageServerLauncher.getLaunchingStrategy())
            .thenReturn(PerWorkspaceLaunchingStrategy.INSTANCE);
    when(languageServerLauncher.launch(anyString(), any(LanguageClient.class)))
            .thenReturn(languageServer);
    when(languageDescription.getLanguageId()).thenReturn("id");
    when(languageDescription.getFileExtensions()).thenReturn(Collections.singletonList("txt"));
    when(languageDescription.getMimeType()).thenReturn("plain/text");

    when(languageServer.getTextDocumentService()).thenReturn(mock(TextDocumentService.class));
    when(languageServer.initialize(any(InitializeParams.class))).thenReturn(completableFuture);

    when(languageRecognizer.recognizeByPath(anyString())).thenReturn(languageDescription);
    when(languageRecognizer.recognizeById(anyString())).thenReturn(languageDescription);

    when(pmp.get()).thenReturn(pm);

    when(clientFactory.create(anyString())).thenReturn(languageClient);

    when(httpJsonRequestFactory.fromUrl(any(String.class))).thenReturn(httpJsonRequest);
    when(httpJsonRequest.useGetMethod()).thenReturn(httpJsonRequest);
    when(httpJsonRequest.request()).thenReturn(httpJsonResponse);
    when(httpJsonResponse.asDto(any())).thenReturn(workspace);

    registry =
        spy(
            new LanguageServerRegistryImpl(
                "",
                "",
                httpJsonRequestFactory,
                new HashSet<>(),
                Collections.singleton(languageServerLauncher),
                Collections.singleton(languageDescription),
                pmp,
                null,
                clientFactory,
                languageRecognizer) {
              @Override
              protected String extractProjectPath(String filePath) throws LanguageServerException {
                return PROJECT_PATH;
              }
            });
  }

