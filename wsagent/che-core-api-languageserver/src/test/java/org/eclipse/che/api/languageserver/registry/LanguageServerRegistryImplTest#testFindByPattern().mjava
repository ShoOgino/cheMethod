    @Test
    void testFindByPattern() throws Exception {
        LanguageServerLauncher xmlLauncher = createLauncher("xml", null);
        LanguageServerLauncher pomLauncher = createLauncher("pom", null);
        LanguageDescription xmlDesc = createDescription("xml", Arrays.asList("xml"), Collections.emptyList());
        LanguageDescription pomDesc = createDescription("pom", Arrays.asList(), Arrays.asList("pom.xml"));
        LanguageServer xmlServer = mock(LanguageServer.class);
        LanguageServer pomServer = mock(LanguageServer.class);
        ServerInitializer initializer = mock(ServerInitializer.class);
        when(initializer.initialize(eq(pomDesc), any(LanguageServerLauncher.class), anyString())).thenReturn(pomServer);
        when(initializer.initialize(eq(xmlDesc), any(LanguageServerLauncher.class), anyString())).thenReturn(xmlServer);
        LanguageServerRegistryImpl registry = spy(new LanguageServerRegistryImpl(new HashSet<>(Arrays.asList(xmlLauncher, pomLauncher)),
                        new HashSet<>(Arrays.asList(xmlDesc, pomDesc)), null, initializer) {
            @Override
            protected String extractProjectPath(String filePath) throws LanguageServerException {
                return PROJECT_PATH;
            }
        });

        assertEquals(xmlServer, registry.findServer("/foo/bar/foo.xml"));
        assertEquals(pomServer, registry.findServer("/foo/bar/pom.xml"));
    }

