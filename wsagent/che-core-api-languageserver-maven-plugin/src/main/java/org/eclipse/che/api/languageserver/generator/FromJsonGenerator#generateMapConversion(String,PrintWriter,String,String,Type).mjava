  private void generateMapConversion(
      String indent, PrintWriter out, String varName, String jsonValName, Type inputParamType) {
    Type paramType = inputParamType;
    if (!(paramType instanceof ParameterizedType)) {
      paramType = ((Class<?>) paramType).getGenericSuperclass();
    }
    ParameterizedType genericType = (ParameterizedType) paramType;
    Type containedType = genericType.getActualTypeArguments()[1];
    String objectName = varName + "o";
    String containedName = objectName + "X";
    String typeName = inputParamType.getTypeName();
    String instantiateTypeName = typeName;
    if (getRawClass(inputParamType).isInterface()) {
      if (inputParamType instanceof ParameterizedType) {
        instantiateTypeName = String.format("HashMap<String, %1$s>", containedType.getTypeName());
      } else {
        throw new RuntimeException(
            "Unsupported Map Conversion. Generator needs to be updated for new LSP4J construct");
      }
    }
    out.println(
        indent + String.format("%1$s %2$s= new %3$s();", typeName, varName, instantiateTypeName));
    out.println(
        indent
            + String.format(
                "%1$s %2$s = %3$s;", json.object(), objectName, json.objectValue(jsonValName)));

    json.iterateObject(
        indent,
        out,
        objectName,
        (String keyName, String valueName) -> {
          generateFromJson(indent + INDENT, out, containedName, valueName, containedType);
          out.println(
              indent
                  + INDENT
                  + String.format("%1$s.put(%2$s, %3$s);", varName, keyName, containedName));
        });
  }

