  @Override
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
      throws IOException, ServletException {
    final HttpServletRequest httpRequest = (HttpServletRequest) request;
    final HttpSession session = httpRequest.getSession(false);

    // sets subject from session
    final Subject sessionSubject;
    if (session != null && (sessionSubject = (Subject) session.getAttribute("principal")) != null) {
      try {
        EnvironmentContext.getCurrent().setSubject(sessionSubject);
        chain.doFilter(request, response);
        return;
      } finally {
        EnvironmentContext.reset();
      }
    }

    // retrieves a token from a request and verify it
    final String token = tokenExtractor.getToken(httpRequest);
    if (isNullOrEmpty(token)) {
      sendErr(response, SC_UNAUTHORIZED, "Authentication on machine failed, token is missed.");
      return;
    }

    // checks token signature and workspace identifier if ok then sets subject into the context
    try {
      final Jws<Claims> jwt = Jwts.parser().setSigningKey(publicKey).parseClaimsJws(token);
      final Claims claims = jwt.getBody();
      if (!isValidToken(jwt)) {
        sendErr(
            response, SC_UNAUTHORIZED, "Authentication on machine failed, invalid token provided.");
        return;
      }

      try {
        final SubjectImpl subject =
            new SubjectImpl(
                claims.get(USER_NAME_CLAIM, String.class),
                claims.get(USER_ID_CLAIM, String.class),
                token,
                false);
        EnvironmentContext.getCurrent().setSubject(subject);
        final HttpSession httpSession = httpRequest.getSession(true);
        httpSession.setAttribute("principal", subject);
        chain.doFilter(request, response);
      } finally {
        EnvironmentContext.reset();
      }
    } catch (ExpiredJwtException
        | UnsupportedJwtException
        | MalformedJwtException
        | SignatureException
        | IllegalArgumentException ex) {
      sendErr(
          response,
          SC_UNAUTHORIZED,
          format("Authentication on machine failed cause: '%s'", ex.getMessage()));
    }
  }

