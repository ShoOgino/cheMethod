  @Inject
  public SignatureKeyManager(
      @Named("che.auth.signature_key_size") int keySize,
      @Named("che.auth.signature_key_algorithm") String algorithm,
      EventService eventService,
      SignatureKeyDao signatureKeyDao) {
    this.keySize = keySize;
    this.algorithm = algorithm;
    this.eventService = eventService;
    this.signatureKeyDao = signatureKeyDao;

    this.cachedPair =
        CacheBuilder.newBuilder()
            .maximumSize(100)
            .expireAfterAccess(2, TimeUnit.HOURS)
            .build(
                new CacheLoader<String, KeyPair>() {
                  @Override
                  public KeyPair load(String key) throws Exception {
                    return loadKeyPair(key);
                  }
                });

    this.workspaceEventsSubscriber =
        new EventSubscriber<WorkspaceStatusEvent>() {
          @Override
          public void onEvent(WorkspaceStatusEvent event) {
            if (event.getStatus() == STOPPED) {
              removeKeyPair(event.getWorkspaceId());
            }
          }
        };
  }

