  /**
   * Gets the access token for current user for particular workspace with following rules:
   *
   * <ul>
   *   <li>If workspace is started by this user, token was generated on startup time, this method
   *       will just return it.
   *   <li/>
   *   <li>If workspace is started by other user, but current user has permissions to use it, token
   *       will be generated on demand.
   *   <li/>
   *       <ul/>
   *
   * @param wsId id of workspace to generate token for.
   * @return entity of machine token
   * @throws NotFoundException if no workspace exists with given id
   */
  @GET
  @Path("/{wsId}")
  @Produces(MediaType.APPLICATION_JSON)
  public MachineTokenDto getMachineToken(@PathParam("wsId") String wsId) throws NotFoundException {
    final String userId = EnvironmentContext.getCurrent().getSubject().getUserId();
    return newDto(MachineTokenDto.class)
        .withUserId(userId)
        .withWorkspaceId(wsId)
        .withMachineToken(registry.getOrCreateToken(userId, wsId));
  }

