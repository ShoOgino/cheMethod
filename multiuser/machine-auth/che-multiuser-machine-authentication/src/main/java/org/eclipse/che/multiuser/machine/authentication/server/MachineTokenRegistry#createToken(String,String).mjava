  /** Creates new token with given data. */
  private String createToken(String userId, String workspaceId)
      throws NotFoundException, ServerException {
    final PrivateKey privateKey = signatureKeyManager.getKeyPair(workspaceId).getPrivate();
    final User user = userManager.getById(userId);
    final Map<String, Object> header = new HashMap<>(2);
    header.put("kind", MACHINE_TOKEN_KIND);
    header.put("kid", workspaceId);
    final Map<String, Object> claims = new HashMap<>();
    // to ensure that each token is unique
    claims.put(Claims.ID, UUID.randomUUID().toString());
    claims.put(Constants.USER_ID_CLAIM, userId);
    claims.put(Constants.USER_NAME_CLAIM, user.getName());
    claims.put(Constants.WORKSPACE_ID_CLAIM, workspaceId);
    // jwtproxy required claims
    claims.put(Claims.ISSUER, "wsmaster");
    claims.put(Claims.AUDIENCE, workspaceId);
    claims.put(Claims.EXPIRATION, Instant.now().plus(365, DAYS).getEpochSecond());
    claims.put(Claims.NOT_BEFORE, -1); // always
    claims.put(Claims.ISSUED_AT, Instant.now().getEpochSecond());
    final String token =
        Jwts.builder().setClaims(claims).setHeader(header).signWith(RS256, privateKey).compact();
    tokens.put(workspaceId, userId, token);
    return token;
  }

