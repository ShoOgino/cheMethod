  @BeforeMethod
  public void setUp() throws Throwable {

    Module module =
        new AbstractModule() {
          public void configure() {
            // Bind manager and his dep-s. To bind interceptor, guice must create intercepted class
            // by himself.
            bind(WorkspaceDao.class).toInstance(mock(WorkspaceDao.class));
            bind(WorkspaceRuntimes.class).toInstance(mock(WorkspaceRuntimes.class));
            bind(EventService.class).toInstance(mock(EventService.class));
            bind(MachineProcessManager.class).toInstance(mock(MachineProcessManager.class));
            bind(AccountDao.class).toInstance(mock(AccountDao.class));
            bindConstant().annotatedWith(Names.named("che.workspace.auto_restore")).to(false);
            bindConstant().annotatedWith(Names.named("che.workspace.auto_snapshot")).to(false);
            bind(WorkspaceSharedPool.class)
                .toInstance(new WorkspaceSharedPool("cached", null, null));
            bind(WorkspaceManager.class);
            bind(SnapshotDao.class).toInstance(mock(SnapshotDao.class));
            bind(WorkspaceFilesCleaner.class).toInstance(workspaceFilesCleaner);

            bind(MachineTokenRegistry.class).toInstance(tokenRegistry);

            // Main injection
            install(new InterceptorModule());

            // To prevent real methods of manager calling
            bindInterceptor(
                subclassesOf(WorkspaceManager.class), names("stopWorkspace"), invocation -> null);
            bindInterceptor(
                subclassesOf(WorkspaceManager.class),
                names("startWorkspace"),
                invocation -> workspaceImpl);
          }
        };

    injector = Guice.createInjector(module);
    workspaceManager = injector.getInstance(WorkspaceManager.class);
    EnvironmentContext.setCurrent(
        new EnvironmentContext() {
          @Override
          public Subject getSubject() {
            return new SubjectImpl(USER_NAME, USER_ID, "token", false);
          }
        });
  }

