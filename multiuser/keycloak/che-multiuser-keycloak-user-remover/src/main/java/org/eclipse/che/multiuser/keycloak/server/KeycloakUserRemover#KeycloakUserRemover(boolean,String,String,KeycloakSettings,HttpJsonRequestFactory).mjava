  @Inject
  public KeycloakUserRemover(
      @Nullable @Named("che.keycloak.cascade_user_removal_enabled") boolean userRemovalEnabled,
      @Nullable @Named("che.keycloak.admin_username") String keycloakUser,
      @Nullable @Named("che.keycloak.admin_password") String keycloakPassword,
      KeycloakSettings keycloakSettings,
      HttpJsonRequestFactory requestFactory) {
    this.keycloakUser = keycloakUser;
    this.keycloakPassword = keycloakPassword;
    this.requestFactory = requestFactory;
    if (userRemovalEnabled) {
      String serverUrl = keycloakSettings.get().get(AUTH_SERVER_URL_SETTING);
      if (serverUrl == null) {
        throw new ConfigurationException(AUTH_SERVER_URL_SETTING + " is not configured");
      }
      String realm = keycloakSettings.get().get(REALM_SETTING);
      if (realm == null) {
        throw new ConfigurationException(REALM_SETTING + " is not configured");
      }
      if (Strings.isNullOrEmpty(keycloakUser) || Strings.isNullOrEmpty(keycloakPassword)) {
        throw new ConfigurationException("Keycloak administrator username or password not set.");
      }
      this.keycloakTokenEndpoint = serverUrl + "/realms/master/protocol/openid-connect/token";
      this.keycloakRemoveUserUrl = serverUrl + "/admin/realms/" + realm + "/users/";
    }
  }

