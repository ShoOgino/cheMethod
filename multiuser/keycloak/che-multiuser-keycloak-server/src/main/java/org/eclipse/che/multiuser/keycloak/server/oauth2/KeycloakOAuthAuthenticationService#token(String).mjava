  /**
   * Gets OAuth token for user from Keycloak.
   *
   * @param oauthProvider OAuth provider name
   * @return OAuthToken
   * @throws ServerException
   */
  @GET
  @Path("token")
  @Produces(MediaType.APPLICATION_JSON)
  public OAuthToken token(@Required @QueryParam("oauth_provider") String oauthProvider)
      throws ForbiddenException, BadRequestException, ConflictException, NotFoundException,
          ServerException, UnauthorizedException {

    try {
      String token =
          requestFactory
              .fromUrl(
                  UriBuilder.fromUri(keycloakConfiguration.get().get(AUTH_SERVER_URL_SETTING))
                      .path("/realms/{realm}/broker/{provider}/token")
                      .build(keycloakConfiguration.get().get(REALM_SETTING), oauthProvider)
                      .toString())
              .request()
              .asString();
      Map<String, String> params = splitQuery(token);
      return DtoFactory.newDto(OAuthToken.class)
          .withToken(params.get("access_token"))
          .withScope(params.get("scope"));
    } catch (IOException e) {
      throw new ServerException(e.getMessage());
    }
  }

