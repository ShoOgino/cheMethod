  /**
   * Method is used to retrieve user object from Che DB for given user {@code id}, {@code email},
   * and {@code username}. Various actualization operations may be performed:
   *
   * <p>- if user is found in Che DB by the given {@code id}, then it will check, if it's email,
   * matches the {@code email} , and update it in DB if necessary.
   *
   * <p>- if user is not found in Che DB by the given {@code id} , then attempt to create one. But
   * also, it will attempt to get one by {@code email}. If such is found, he will be removed. That
   * way, there will be no conflict with existing user id or email upon recreation. In case of
   * conflict with user name, it may be prepended randomized symbols
   *
   * @param id - user id from
   * @param email - user email
   * @param username - user name
   * @return user object from Che Database, with all needed actualization operations performed on
   *     him
   * @throws ServerException if this exception during user creation, removal, or retrieval
   * @throws ConflictException if this exception occurs during user creation or removal
   */
  public User getOrCreateUser(String id, String email, String username)
      throws ServerException, ConflictException {
    Optional<User> userById = getUserById(id);
    if (!userById.isPresent()) {
      synchronized (this) {
        userById = getUserById(id);
        if (!userById.isPresent()) {
          Optional<User> userByEmail = getUserByEmail(email);
          if (userByEmail.isPresent()) {
            remove(userByEmail.get().getId());
          }
          final UserImpl cheUser = new UserImpl(id, email, username, generate("", 12), emptyList());
          try {
            return create(cheUser, false);
          } catch (ConflictException ex) {
            cheUser.setName(generate(cheUser.getName(), 4));
            return create(cheUser, false);
          }
        }
      }
    }
    return actualizeUserEmail(userById.get(), email);
  }

