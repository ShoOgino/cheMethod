  @Override
  public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)
      throws IOException, ServletException {
    HttpServletRequest request = (HttpServletRequest) req;

    final String token = tokenExtractor.getToken(request);
    if (shouldSkipAuthentication(request, token)) {
      chain.doFilter(req, res);
      return;
    }

    if (token == null) {
      send403(res, "Authorization token is missed");
      return;
    }

    Jws<Claims> jwt;
    try {
      jwt =
          Jwts.parser()
              .setAllowedClockSkewSeconds(allowedClockSkewSec)
              .setSigningKeyResolver(
                  new SigningKeyResolverAdapter() {
                    @Override
                    public Key resolveSigningKey(
                        @SuppressWarnings("rawtypes") JwsHeader header, Claims claims) {
                      try {
                        return getJwtPublicKey(header);
                      } catch (JwkException e) {
                        throw new JwtException(
                            "Error during the retrieval of the public key during JWT token validation",
                            e);
                      }
                    }
                  })
              .parseClaimsJws(token);
      LOG.debug("JWT = ", jwt);
      // OK, we can trust this JWT
    } catch (SignatureException
        | IllegalArgumentException
        | MalformedJwtException
        | UnsupportedJwtException e) {
      send403(res, "The specified token is not a valid. " + e.getMessage());
      return;
    } catch (ExpiredJwtException e) {
      send403(res, "The specified token is expired");
      return;
    }

    request.setAttribute("token", jwt);
    chain.doFilter(req, res);
  }

