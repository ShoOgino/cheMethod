  @Inject
  public KeycloakProvider(AppContext appContext) {
    if (Keycloak.isConfigured()) {
      keycloak = Keycloak.get();
      return;
    }

    String keycloakSettings =
        getKeycloakSettings(KeycloakConstants.getEndpoint(appContext.getMasterApiEndpoint()));
    Map<String, String> settings;
    try {
      settings = JsonHelper.toMap(keycloakSettings);
    } catch (Exception e) {
      return;
    }

    String keycloakServerUrl = settings.get(AUTH_SERVER_URL_SETTING);
    String jsAdapterUrl = settings.get(JS_ADAPTER_URL_SETTING);

    keycloak =
        CallbackPromiseHelper.createFromCallback(
                new CallbackPromiseHelper.Call<Void, Throwable>() {
                  @Override
                  public void makeCall(final Callback<Void, Throwable> callback) {
                    ScriptInjector.fromUrl(jsAdapterUrl)
                        .setCallback(
                            new Callback<Void, Exception>() {
                              @Override
                              public void onSuccess(Void result) {
                                callback.onSuccess(null);
                              }

                              @Override
                              public void onFailure(Exception reason) {
                                callback.onFailure(reason);
                              }
                            })
                        .setWindow(getWindow())
                        .inject();
                  }
                })
            .thenPromise(
                (v) ->
                    Keycloak.init(
                        keycloakServerUrl,
                        settings.get(REALM_SETTING),
                        settings.get(CLIENT_ID_SETTING),
                        settings.get(OIDC_PROVIDER_SETTING),
                        Boolean.valueOf(settings.get(USE_NONCE_SETTING)).booleanValue()));
    Log.debug(getClass(), "Keycloak init complete: ", this);
  }

