  @Override
  public void onEvent(PermissionsEvent event) {
    final Permissions permissions = event.getPermissions();
    if (OrganizationDomain.DOMAIN_ID.equals(permissions.getDomainId())) {
      try {
        switch (event.getType()) {
          case PERMISSIONS_ADDED:
            {
              final String initiator = event.getInitiator();
              final User addedMember = userManager.getById(permissions.getUserId());
              final Organization org = organizationManager.getById(permissions.getInstanceId());
              eventService.publish(asDto(new MemberAddedEvent(initiator, addedMember, org)));
              break;
            }
          case PERMISSIONS_REMOVED:
            {
              final String initiator = event.getInitiator();
              final User removedMember = userManager.getById(permissions.getUserId());
              final Organization org = organizationManager.getById(permissions.getInstanceId());
              eventService.publish(asDto(new MemberRemovedEvent(initiator, removedMember, org)));
              break;
            }
          default:
            // do nothing
        }
      } catch (NotFoundException | ServerException ignored) {
      }
    }
  }

