  /**
   * Removes organization with given id
   *
   * @param organizationId organization id
   * @throws NullPointerException when {@code organizationId} is null
   * @throws ServerException when any other error occurs during organization removing
   */
  @Transactional(rollbackOn = {RuntimeException.class, ApiException.class})
  public void remove(String organizationId) throws ServerException {
    requireNonNull(organizationId, "Required non-null organization id");
    try {
      OrganizationImpl organization = organizationDao.getById(organizationId);
      eventService
          .publish(new BeforeAccountRemovedEvent(organization.getAccount()))
          .propagateException();
      eventService.publish(new BeforeOrganizationRemovedEvent(organization)).propagateException();
      removeSuborganizations(organizationId);
      final List<Member> members = removeMembers(organizationId);
      organizationDao.remove(organizationId);
      final String initiator = EnvironmentContext.getCurrent().getSubject().getUserName();
      eventService.publish(new OrganizationRemovedEvent(initiator, organization, members));
    } catch (NotFoundException e) {
      // organization is already removed
    }
  }

