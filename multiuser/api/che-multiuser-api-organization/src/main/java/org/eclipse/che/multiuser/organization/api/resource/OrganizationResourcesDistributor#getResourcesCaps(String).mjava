  /**
   * Returns resources cap or empty list.
   *
   * @param suborganizationId suborganization id to fetch resources cap
   * @return resources cap or empty list
   * @throws NotFoundException when specified suborganization was not found
   * @throws ConflictException when organization with specified id is root organization
   * @throws ServerException when any other error occurs
   */
  public List<? extends Resource> getResourcesCaps(String suborganizationId)
      throws NotFoundException, ConflictException, ServerException {
    requireNonNull(suborganizationId, "Required non-null suborganization id");
    checkIsSuborganization(suborganizationId);
    try {
      return organizationDistributedResourcesDao.get(suborganizationId).getResourcesCap();
    } catch (NotFoundException e) {
      return emptyList();
    }
  }

