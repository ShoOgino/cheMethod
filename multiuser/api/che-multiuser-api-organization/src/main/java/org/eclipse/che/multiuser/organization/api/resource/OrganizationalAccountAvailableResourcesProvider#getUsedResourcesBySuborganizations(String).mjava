  /**
   * Returns resources which are used by suborganizations of specified organization.
   *
   * <p>Note that the result will includes used resources of all direct and nested suborganizations.
   *
   * @param parentQualifiedName parent qualified name, e.g. 'parentName/suborgName
   * @return resources which are used by suborganizations of specified organization.
   * @throws ServerException when any other exception occurs on calculation of used resources
   */
  @VisibleForTesting
  List<Resource> getUsedResourcesBySuborganizations(String parentQualifiedName)
      throws NotFoundException, ServerException {
    ResourceUsageManager resourceUsageManager = resourceUsageManagerProvider.get();
    List<Resource> usedResources = new ArrayList<>();
    for (Organization suborganization :
        Pages.iterate(
            (maxItems, skipCount) ->
                organizationManager.getSuborganizations(
                    parentQualifiedName, maxItems, skipCount))) {
      usedResources.addAll(resourceUsageManager.getUsedResources(suborganization.getId()));
    }
    return usedResources;
  }

