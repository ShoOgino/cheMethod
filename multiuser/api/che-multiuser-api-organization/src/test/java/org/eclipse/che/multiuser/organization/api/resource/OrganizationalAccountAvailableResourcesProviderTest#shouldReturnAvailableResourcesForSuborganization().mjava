  @Test
  public void shouldReturnAvailableResourcesForSuborganization() throws Exception {
    //given
    ResourceImpl parentAvailableResource = new ResourceImpl("test", 3000, "unit");
    prepareAvailableResource(ROOT_ORG_ID, parentAvailableResource);
    ResourceImpl suborgAvailableResource = new ResourceImpl("test", 5000, "unit");
    prepareAvailableResource(SUBORG_ID, suborgAvailableResource);
    doReturn(asList(parentAvailableResource, suborgAvailableResource))
        .when(resourceAggregator)
        .intersection(anyList(), anyList());
    doReturn(singletonList(parentAvailableResource)).when(resourceAggregator).min(anyList());

    //when
    List<? extends Resource> availableResources =
        availableResourcesProvider.getAvailableResources(SUBORG_ID);

    //then
    assertEquals(availableResources.size(), 1);
    assertEquals(availableResources.get(0), parentAvailableResource);
    verify(availableResourcesProvider).getAvailableOrganizationResources(rootOrganization);
    verify(availableResourcesProvider).getAvailableOrganizationResources(suborganization);
    verify(resourceAggregator)
        .intersection(
            singletonList(parentAvailableResource), singletonList(suborgAvailableResource));
    verify(resourceAggregator).min(asList(parentAvailableResource, suborgAvailableResource));
  }

