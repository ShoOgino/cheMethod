  @Test
  public void shouldReturnAvailableResourcesAsTotalMinusUsedByItselfAndItsSuborganizations()
      throws Exception {
    // given
    ResourceImpl totalResource = new ResourceImpl("test", 9000, "unit");
    doReturn(singletonList(totalResource))
        .when(resourceUsageManager)
        .getTotalResources(anyString());

    ResourceImpl usedResource = new ResourceImpl("test", 3000, "unit");
    doReturn(singletonList(usedResource)).when(resourceUsageManager).getUsedResources(anyString());

    ResourceImpl usedBySuborgResource = new ResourceImpl("test", 1500, "unit");
    ResourceImpl usedBySubsuborgResource = new ResourceImpl("test", 2000, "unit");
    doReturn(asList(usedBySuborgResource, usedBySubsuborgResource))
        .when(availableResourcesProvider)
        .getUsedResourcesBySuborganizations(anyString());

    ResourceImpl availableResource = new ResourceImpl("test", 2500, "unit");
    doReturn(singletonList(availableResource))
        .when(resourceAggregator)
        .deduct(anyList(), anyList());

    // when
    List<? extends Resource> availableResources =
        availableResourcesProvider.getAvailableOrganizationResources(rootOrganization);

    // then
    assertEquals(availableResources.size(), 1);
    assertEquals(availableResources.get(0), availableResource);
    verify(resourceUsageManager).getTotalResources(ROOT_ORG_ID);
    verify(resourceUsageManager).getUsedResources(ROOT_ORG_ID);
    verify(availableResourcesProvider).getUsedResourcesBySuborganizations(ROOT_ORG_NAME);
    verify(resourceAggregator)
        .deduct(
            singletonList(totalResource),
            asList(usedResource, usedBySuborgResource, usedBySubsuborgResource));
  }

