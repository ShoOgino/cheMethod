  @Test
  public void shouldCalculateUsedResourceBySuborganizations() throws Exception {
    // given
    doReturn(new Page<>(singletonList(suborganization), 0, 1, 2))
        .doReturn(new Page<>(singletonList(subsuborganization), 1, 1, 2))
        .when(organizationManager)
        .getSuborganizations(anyString(), anyInt(), anyLong());
    ResourceImpl usedBySuborgResource = new ResourceImpl("test", 1500, "unit");
    doReturn(singletonList(usedBySuborgResource)).when(resourceManager).getUsedResources(SUBORG_ID);
    ResourceImpl usedBySubsuborgResource = new ResourceImpl("test", 2000, "unit");
    doReturn(singletonList(usedBySubsuborgResource))
        .when(resourceManager)
        .getUsedResources(SUBSUBORG_ID);

    // when
    List<? extends Resource> usedResources =
        availableResourcesProvider.getUsedResourcesBySuborganizations(ROOT_ORG_NAME);

    // then
    assertEquals(usedResources.size(), 2);
    assertTrue(usedResources.contains(usedBySuborgResource));
    assertTrue(usedResources.contains(usedBySubsuborgResource));
    verify(organizationManager, times(2))
        .getSuborganizations(eq(ROOT_ORG_NAME), anyInt(), anyLong());
    verify(resourceManager).getUsedResources(SUBORG_ID);
    verify(resourceManager).getUsedResources(SUBSUBORG_ID);
  }

