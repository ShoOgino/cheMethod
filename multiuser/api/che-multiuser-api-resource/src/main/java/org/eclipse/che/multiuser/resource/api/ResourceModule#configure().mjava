  @Override
  protected void configure() {
    bind(ResourceService.class);

    bind(FreeResourcesLimitService.class);
    bind(FreeResourcesLimitDao.class).to(JpaFreeResourcesLimitDao.class);
    bind(JpaFreeResourcesLimitDao.RemoveFreeResourcesLimitSubscriber.class).asEagerSingleton();

    bind(WorkspaceManager.class).to(LimitsCheckingWorkspaceManager.class);

    MapBinder.newMapBinder(binder(), String.class, AvailableResourcesProvider.class);
    Multibinder.newSetBinder(binder(), DefaultResourcesProvider.class);
    Multibinder.newSetBinder(binder(), ResourceLockKeyProvider.class);
    Multibinder.newSetBinder(binder(), AccountPermissionsChecker.class);

    Multibinder.newSetBinder(binder(), ResourcesProvider.class)
        .addBinding()
        .to(FreeResourcesProvider.class);

    MapBinder.newMapBinder(binder(), String.class, AvailableResourcesProvider.class);

    Multibinder<ResourceType> resourcesTypesBinder =
        Multibinder.newSetBinder(binder(), ResourceType.class);
    resourcesTypesBinder.addBinding().to(RamResourceType.class);
    resourcesTypesBinder.addBinding().to(WorkspaceResourceType.class);
    resourcesTypesBinder.addBinding().to(RuntimeResourceType.class);
    resourcesTypesBinder.addBinding().to(TimeoutResourceType.class);

    Multibinder<ResourceUsageTracker> usageTrackersBinder =
        Multibinder.newSetBinder(binder(), ResourceUsageTracker.class);
    usageTrackersBinder.addBinding().to(RamResourceUsageTracker.class);
    usageTrackersBinder.addBinding().to(WorkspaceResourceUsageTracker.class);
    usageTrackersBinder.addBinding().to(RuntimeResourceUsageTracker.class);
  }

