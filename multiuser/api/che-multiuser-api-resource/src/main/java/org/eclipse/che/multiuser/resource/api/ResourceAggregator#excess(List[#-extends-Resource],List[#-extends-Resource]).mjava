  /**
   * Returns list which contains resources from specified {@code sourceResources} which have
   * excessive amount in compare to specified {@code resourcesToCompare}.
   *
   * <p>Example :
   *
   * <pre>
   * |      \      | Source    | To compare| Result   |
   * |:------------|:----------|:----------|:---------|
   * | Resource1   | 5         | 3         | 2        |
   * | ----------- | --------- | --------- | -------- |
   * | Resource2   | -         | 9         | -        |
   * | ----------- | --------- | --------- | -------- |
   * | Resource3   | 1         | -         | 1        |
   * | ----------- | --------- | --------- | -------- |
   * </pre>
   *
   * @param sourceResources the source resources
   * @param resourcesToCompare the resources which should be compared to {@code sourceResources}
   * @throws IllegalArgumentException when {@code sourceResources} or {@code resourcesToCompare}
   *     contain resource with not supported type
   */
  public List<? extends Resource> excess(
      List<? extends Resource> sourceResources, List<? extends Resource> resourcesToCompare) {
    checkSupporting(sourceResources);
    checkSupporting(resourcesToCompare);

    final Map<String, Resource> result =
        sourceResources.stream().collect(Collectors.toMap(Resource::getType, Function.identity()));
    for (Resource toCompare : resourcesToCompare) {
      String resourceType = toCompare.getType();
      final Resource sourceResource = result.get(resourceType);
      if (sourceResource != null) {
        if (sourceResource.getAmount() == toCompare.getAmount()) {
          // source resource doesn't have excessive amount
          result.remove(resourceType);
          continue;
        }
        try {
          Resource excess = deduct(sourceResource, toCompare);
          if (excess.getAmount() == 0) {
            // source resource doesn't have excessive amount
            result.remove(resourceType);
          } else {
            result.put(resourceType, excess);
          }
        } catch (NoEnoughResourcesException e) {
          // source resource doesn't have excessive amount
          result.remove(resourceType);
        }
      }
    }

    return new ArrayList<>(result.values());
  }

