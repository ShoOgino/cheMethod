  /**
   * Validates given {@code resource}
   *
   * <p>{@link ResourceDto#getUnit()} can be null then {@link ResourceType#getDefaultUnit() default
   * unit} of {@link ResourceDto#getType() specified type} will be set.
   *
   * @param resource resource to validate
   * @throws BadRequestException when {@code resource} is null
   * @throws BadRequestException when {@code resource} has non supported type
   * @throws BadRequestException when {@code resource} has non supported unit
   */
  public void validate(ResourceDto resource) throws BadRequestException {
    if (resource == null) {
      throw new BadRequestException("Missed resource");
    }

    final Set<String> units = resourcesTypesToUnits.get(resource.getType());

    if (units == null) {
      throw new BadRequestException(
          "Specified resources type '" + resource.getType() + "' is not supported");
    }

    if (resource.getUnit() == null) {
      resource.setUnit(resourcesTypesToDefaultUnit.get(resource.getType()));
    } else {
      if (!units.contains(resource.getUnit())) {
        throw new BadRequestException(
            "Specified resources type '"
                + resource.getType()
                + "' support only following units: "
                + units.stream().collect(Collectors.joining(", ")));
      }
    }

    if (resource.getAmount() < -1) {
      throw new BadRequestException(
          "Resources with type '" + resource.getType() + "' has negative amount");
    }
  }

