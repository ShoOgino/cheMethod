  /** Creates runtime workspace object based on the machines RAM. */
  public static WorkspaceImpl createRuntime(String devMachineRam, String... machineRams)
      throws Exception {
    /*
    final WorkspaceImpl workspace = createWorkspace(DEFAULT_USER_NAME, devMachineRam, machineRams);
    final String envName = workspace.getConfig().getDefaultEnv();
    EnvironmentImpl env = workspace.getConfig().getEnvironments().get(envName);
    String devMachineName = getDevMachineName(env);
    if (devMachineName == null) {
      throw new Exception("ws-machine is not found");
    }
    ExtendedMachineImpl devMachine = env.getMachines().get(devMachineName);
    final WorkspaceRuntimeImpl runtime =
        new WorkspaceRuntimeImpl(
            workspace.getConfig().getDefaultEnv(),
            null,
            env.getMachines()
                .entrySet()
                .stream()
                .map(
                    entry ->
                        createMachine(
                            workspace.getId(),
                            envName,
                            entry.getKey(),
                            devMachineName.equals(entry.getKey()),
                            entry.getValue().getAttributes().get("memoryLimitBytes")))
                .collect(toList()),
            createMachine(
                workspace.getId(),
                envName,
                devMachineName,
                true,
                devMachine.getAttributes().get("memoryLimitBytes")));
    workspace.setStatus(RUNNING);
    workspace.setRuntime(runtime);
    return workspace;
    */
    return null;
  }
  /*
  private static MachineImpl createMachine(
      String workspaceId, String envName, String machineName, boolean isDev, String memoryBytes) {

    return MachineImpl.builder()
        .setConfig(
            MachineConfigImpl.builder()
                .setDev(isDev)
                .setName(machineName)
                .setSource(new MachineSourceImpl("some-type").setContent("some-content"))
                .setLimits(
                    new MachineLimitsImpl((int) Size.parseSizeToMegabytes(memoryBytes + "b")))
                .setType("someType")
                .build())
        .setId(NameGenerator.generate("machine", 10))
        .setOwner(DEFAULT_USER_NAME)
        .setStatus(MachineStatus.RUNNING)
        .setWorkspaceId(workspaceId)
        .setEnvName(envName)
        .setRuntime(new MachineRuntimeInfoImpl(emptyMap(), emptyMap(), emptyMap()))
        .build();
  }

  private static ComposeServiceImpl createService() {
    ComposeServiceImpl service = new ComposeServiceImpl();
    service.setImage("image");
    return service;
  }
  */

