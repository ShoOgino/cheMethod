    @Override
    public Promise<List<UsersWorkspaceDto>> getWorkspaces(int skip, int limit) {
        return newPromise(new RequestCall<List<UsersWorkspaceDto>>() {
            @Override
            public void makeCall(AsyncCallback<List<UsersWorkspaceDto>> callback) {
                getWorkspaces(callback);
            }
        }).then(new Function<List<UsersWorkspaceDto>, List<UsersWorkspaceDto>>() {
            @Override
            public List<UsersWorkspaceDto> apply(List<UsersWorkspaceDto> arg) throws FunctionException {
                final List<UsersWorkspaceDto> descriptors = new ArrayList<>();
                for (UsersWorkspaceDto descriptor : arg) {
                    descriptors.add(descriptor);
                }
                return descriptors;
            }
        });
    }

