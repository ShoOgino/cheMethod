    /**
     * Imports sources project.
     */
    @Override
    public Promise<Void> importProject(final String workspaceId,
                                       final String path,
                                       final boolean force,
                                       final SourceStorageDto sourceStorage) {
        return PromiseHelper.newPromise(new AsyncPromiseHelper.RequestCall<Void>() {
            @Override
            public void makeCall(final AsyncCallback<Void> callback) {
                final StringBuilder requestUrl = new StringBuilder("/project/" + workspaceId);
                requestUrl.append("/import").append(normalizePath(path));
                if (force) {
                    requestUrl.append("?force=true");
                }

                MessageBuilder builder = new MessageBuilder(POST, requestUrl.toString());
                builder.data(dtoFactory.toJson(sourceStorage)).header(CONTENTTYPE, APPLICATION_JSON);
                final Message message = builder.build();
                extServerStateController.getMessageBus().then(new Operation<MessageBus>() {
                    @Override
                    public void apply(MessageBus messageBus) throws OperationException {
                        try {
                            messageBus.send(message, new RequestCallback<Void>() {
                                @Override
                                protected void onSuccess(Void result) {
                                    callback.onSuccess(result);
                                }

                                @Override
                                protected void onFailure(Throwable exception) {
                                    callback.onFailure(exception);
                                }
                            });
                        } catch (WebSocketException e) {
                            callback.onFailure(e);
                        }
                    }
                }).catchError(new Operation<PromiseError>() {
                    @Override
                    public void apply(PromiseError arg) throws OperationException {
                        callback.onFailure(arg.getCause());
                    }
                });
            }
        });
    }

