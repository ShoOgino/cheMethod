  /**
   * Creates a new instance of flyway schema initializer.
   *
   * @param scriptsLocations the locations where to search migration scripts, if locations is not
   *     prefixed or prefixed with <i>classpath:</i> then initializer will try to find scripts in
   *     classpath using {@code Thread.currentThread().}{@link Thread#getContextClassLoader()
   *     getContextClassLoader()}
   * @param scriptsPrefix prefix of migration scripts e.g. 'v' or empty string
   * @param scriptsSuffix suffix of migration scripts e.g. '.sql'
   * @param versionSeparator separate version from the other part of script name e.g. '.' or '__'
   * @param baselineOnMigrate whether to ignore scripts up to the version configured by {@code
   *     baselineVersion}
   * @param baselineVersion up to this version all the scripts ignored, unless schema is initialized
   *     first time, note that scripts with version equal to baseline version are also ignored
   * @param dataSource data source used for migrations
   * @param placeholderReplacer used to replace variables in script with configured values
   */
  @Inject
  public FlywaySchemaInitializer(
      @Named("db.schema.flyway.scripts.locations") String[] scriptsLocations,
      @Named("db.schema.flyway.scripts.prefix") String scriptsPrefix,
      @Named("db.schema.flyway.scripts.suffix") String scriptsSuffix,
      @Named("db.schema.flyway.scripts.version_separator") String versionSeparator,
      @Named("db.schema.flyway.baseline.enabled") boolean baselineOnMigrate,
      @Named("db.schema.flyway.baseline.version") String baselineVersion,
      DataSource dataSource,
      PlaceholderReplacer placeholderReplacer) {
    this.dataSource = dataSource;
    this.locations = scriptsLocations;
    this.scriptsPrefix = scriptsPrefix;
    this.scriptsSuffix = scriptsSuffix;
    this.versionSeparator = versionSeparator;
    this.baselineOnMigrate = baselineOnMigrate;
    this.baselineVersion = baselineVersion;
    this.placeholderReplacer = placeholderReplacer;
  }

