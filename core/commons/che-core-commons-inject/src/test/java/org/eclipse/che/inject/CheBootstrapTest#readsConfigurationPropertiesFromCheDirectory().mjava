    @Test
    public void readsConfigurationPropertiesFromCheDirectory() throws Exception {
        writePropertiesFile(che, "che.properties", createTestProperties());

        ModuleScanner.modules.add(binder -> binder.bind(TestChePropertiesComponent.class));

        cheBootstrap.contextInitialized(new ServletContextEvent(servletContext));

        Injector injector = retrieveComponentFromServletContext(Injector.class);

        TestChePropertiesComponent testComponent = injector.getInstance(TestChePropertiesComponent.class);
        assertEquals(testComponent.parameter_pair, Pair.of("a", "b"));
        assertEquals(testComponent.parameter_pair2, Pair.of("a", (String)null));
        assertEquals(testComponent.parameter_pair3, Pair.of("a", ""));
        assertEquals(testComponent.parameter_pair_array, new Pair[]{Pair.of("a", "b"), Pair.of("c", "d")});
        assertEquals(testComponent.nullable, null);
        assertEquals(testComponent.parameter_uri, new URI("file:/a/b/c"));
        assertEquals(testComponent.parameter_url, new URL("http://localhost"));
        assertEquals(testComponent.parameter_file, new File("/a/b/c"));
        assertEquals(testComponent.parameter_strings, new String[]{"a", "b", "c"});
        assertEquals(testComponent.parameter_int, 123);
        assertEquals(testComponent.parameter_long, 123);
        assertEquals(testComponent.parameter_bool, true);
        assertEquals(testComponent.someDir, new File(System.getProperty("java.io.tmpdir"), "/some_dir"));
        assertEquals(testComponent.suffixedPath, System.getenv("PATH") + pathSeparator + "some_path");
    }

