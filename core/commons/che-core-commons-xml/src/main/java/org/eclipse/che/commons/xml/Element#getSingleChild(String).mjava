    /**
     * Searches for element child with given name.
     * If element has more then only child with given name then {@link XMLTreeException} will be thrown.
     * If child with given name doesn't exist returns {@code null}
     * <p/>
     * Note that {@link #getName} method used to compare element names.
     *
     * @param name
     *         name to search child
     * @return child element with given name or {@code null} if element with given name was not found
     * @throws XMLTreeException
     *         when element has more than one child with given <i>name</i>
     *         or  this element has been removed from xml tree
     * @throws NullPointerException
     *         when name parameter is {@code null}
     */
    public Element getSingleChild(String name) {
        checkNotRemoved();
        requireNonNull(name, "Required not null child name");
        for (Element child : asElements(delegate.getChildNodes())) {
            if (name.equals(child.getName())) {
                if (child.hasSibling(name)) {
                    throw new XMLTreeException("Element " + name + " has more then only child with name " + name + " found");
                }
                return child;
            }
        }
        return null;
    }

