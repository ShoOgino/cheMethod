    /**
     * Creates segments for newly created element and related children
     */
    private int applySegments(NewElement newElement,
                              Element relatedToNew,
                              int prevElementCloseRight,
                              int level) {
        // text length before element
        // child - new element
        // '+'   - text before element
        //
        // <parent>\n
        // ++++<child>...
        final int levelTextLength = level * SPACES_IN_TAB;

        // '*' - before element open tag pos
        //
        //       | prevElementCloseRight
        //       v
        //<parent>\n   *<child>...
        // +1 because of '\n'
        final int beforeOpenLeft = 1 + prevElementCloseRight + levelTextLength;

        //we should add text segment which
        //is before new element to the parent text segments and start to track it
        final Element parent = relatedToNew.getParent();
        if (parent.text == null) {
            parent.text = new LinkedList<>();
        }
        parent.text.add(new Segment(prevElementCloseRight + 1, beforeOpenLeft));

        //pos of open tag right '>'
        final int openRight = beforeOpenLeft + openTagLength(newElement);

        relatedToNew.start = new Segment(beforeOpenLeft + 1, openRight);
        //if element is void it doesn't have children and text
        //and it has same start and end so we can initialize
        //only start and end segments
        if (relatedToNew.isVoid()) {
            relatedToNew.end = relatedToNew.start;
            return openRight;
        }
        //if element has children it doesn't have text instead of
        //whitespaces, so all what we need - detect element close tag segment
        //to do so we need to map segments for all children first
        int childRight = openRight;
        if (newElement.hasChildren()) {

            final Iterator<NewElement> newChIt = newElement.getChildren().iterator();
            final Iterator<Element> chIt = relatedToNew.getChildren().iterator();

            while (newChIt.hasNext()) {
                childRight = applySegments(newChIt.next(),
                                           chIt.next(),
                                           childRight,
                                           level + 1);
            }
        } else {
            relatedToNew.text = new LinkedList<>();
        }
        //before element close tag pos
        //                        +
        //<parent>\n    <child>text</child>
        int beforeCloseLeft;
        if (newElement.hasChildren()) {
            beforeCloseLeft = childRight + levelTextLength + 1;
        } else {
            beforeCloseLeft = childRight + newElement.getText().length();
        }
        relatedToNew.text.add(new Segment(childRight + 1, beforeCloseLeft));
        relatedToNew.end = new Segment(beforeCloseLeft + 1, beforeCloseLeft + closeTagLength(newElement));
        return relatedToNew.end.right;
    }

