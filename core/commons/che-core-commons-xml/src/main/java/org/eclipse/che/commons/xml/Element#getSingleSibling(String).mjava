  /**
   * Searches for element sibling with given name. If more than one sibling was found throws {@link
   * XMLTreeException}. If sibling with given name doesn't exist returns {@code null}.
   *
   * <p>Note that {@link #getName} method used to compare element names.
   *
   * @param name sibling name to search
   * @return element sibling with given name or {@code null} if sibling with given <i>name</i> was
   *     not found
   * @throws XMLTreeException when element has more than one sibling with given <i>name</i> or this
   *     element has been removed from xml tree
   * @throws NullPointerException when name parameter is {@code null}
   */
  public Element getSingleSibling(String name) {
    checkNotRemoved();
    requireNonNull(name, "Required not null sibling name");
    Element target = null;
    for (Element sibling : asElements(delegate.getParentNode().getChildNodes())) {
      if (this != sibling && sibling.getName().equals(name)) {
        if (target != null) {
          throw new XMLTreeException(
              "Element " + name + " has more than one sibling with name " + name);
        }
        target = sibling;
      }
    }
    return target;
  }

