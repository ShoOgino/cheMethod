  /**
   * Inserts new element after current
   *
   * @param newElement element which will be inserted after current
   * @return this element instance
   * @throws XMLTreeException when this element has been removed from xml tree or this element is
   *     root element
   * @throws NullPointerException when newElement parameter is {@code null}
   */
  public Element insertAfter(NewElement newElement) {
    checkNotRemoved();
    notPermittedOnRootElement();
    requireNonNull(newElement, "Required not null new element");
    final Node newNode = createNode(newElement);
    final Element element = createElement(newNode);
    // if element has next sibling append child to parent
    // else insert before next sibling
    final Node nextNode = nextElementNode(delegate);
    if (nextNode != null) {
      delegate.getParentNode().insertBefore(newNode, nextNode);
    } else {
      delegate.getParentNode().appendChild(newNode);
    }
    // let tree do dirty job
    xmlTree.insertAfter(newElement, element, this);
    return this;
  }

