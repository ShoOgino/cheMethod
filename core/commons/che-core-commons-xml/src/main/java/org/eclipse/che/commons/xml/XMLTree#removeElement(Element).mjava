  /**
   * Removes element bytes from tree.
   *
   * <p>It is important to save xml tree pretty view, so element should be removed without of
   * destroying style of xml document.
   *
   * <pre>
   *      e.g.
   *
   *      {@literal <level1>}
   *          {@literal <level2>} {@literal <level2>+\n}
   *          {@literal <level2>} {@literal <level2+>\n}
   *      {@literal <level1>}
   *
   *      first + is before left border
   *      last + is before right border
   *
   *      segment [first, last] - will be removed
   * </pre>
   *
   * So after removing - formatting will be the same. We can't remove just element from start to end
   * because it will produce not pretty formatting for good and pretty formatted before document.
   */
  void removeElement(Element element) {
    final int leftBound = lastIndexOf(xml, '>', element.start.left) + 1;
    final int lengthBefore = xml.length;
    // if text segment before removal element
    // exists it should go to hell with removal
    if (leftBound != element.start.left - 1) {
      removeSegmentFromElement(element.getParent(), leftBound);
    }
    // replacing content with nothing
    xml = insertBetween(xml, leftBound, element.end.right, "");
    // shift all elements which are right from removed element
    shiftSegments(element.end.right, xml.length - lengthBefore);
    // let tree know that element is not a family member
    unregisterElement(element);
  }

