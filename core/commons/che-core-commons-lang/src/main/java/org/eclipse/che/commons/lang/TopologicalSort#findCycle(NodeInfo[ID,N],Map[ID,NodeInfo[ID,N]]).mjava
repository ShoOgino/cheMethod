  private List<NodeInfo<ID, N>> findCycle(NodeInfo<ID, N> node, Map<ID, NodeInfo<ID, N>> nodes) {
    // bail out quickly if there are no preds - should be fairly common occurrence hopefully
    Set<ID> preds = node.predecessors;
    if (preds == null || preds.isEmpty()) {
      return emptyList();
    }

    List<NodeInfo<ID, N>> ret = new ArrayList<>();
    List<ID> todo = new ArrayList<>(preds);

    Set<ID> visited = new HashSet<>();

    while (!todo.isEmpty()) {
      ID n = todo.remove(0);

      if (visited.contains(n)) {
        continue;
      }

      visited.add(n);

      NodeInfo<ID, N> predNode = nodes.get(n);
      if (predNode != null) {
        todo.addAll(predNode.predecessors);
        ret.add(predNode);

        if (predNode.equals(node)) {
          // we found the cycle to our original node
          return ret;
        }
      }
    }

    return emptyList();
  }

