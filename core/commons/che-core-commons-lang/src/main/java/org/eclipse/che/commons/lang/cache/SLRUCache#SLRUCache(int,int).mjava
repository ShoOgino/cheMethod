    /**
     * @param protectedSize
     *         size of protected area.
     * @param probationarySize
     *         size of probationary area.
     */
    public SLRUCache(int protectedSize, int probationarySize) {
        this.protectedSize = protectedSize;
        this.probationarySize = probationarySize;
        protectedSegment = new LinkedHashMap<K, V>(SLRUCache.this.protectedSize + 1, 1.1f, true) {
            @Override
            protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
                if (size() > SLRUCache.this.protectedSize) {
                    probationarySegment.put(eldest.getKey(), eldest.getValue());
                    return true;
                }
                return false;
            }
        };
        probationarySegment = new
                LinkedHashMap<K, V>(SLRUCache.this.probationarySize + 1, 1.1f, false) {
                    @Override
                    protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
                        return size() > SLRUCache.this.probationarySize;
                    }
                };
    }

