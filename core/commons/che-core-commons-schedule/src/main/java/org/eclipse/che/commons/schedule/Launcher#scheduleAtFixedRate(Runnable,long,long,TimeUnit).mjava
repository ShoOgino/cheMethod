  /**
   * Execute a periodic action that becomes enabled first after the given initial delay, and
   * subsequently with the given period; that is executions will commence after initialDelay then
   * initialDelay+period, then initialDelay + 2 * period, and so on. If any execution of the task
   * encounters an exception, subsequent executions are suppressed. Otherwise, the task will only
   * terminate via cancellation or termination of the executor. If any execution of this task takes
   * longer than its period, then subsequent executions may start late, but will not concurrently
   * execute.
   *
   * <p>Analogue of {@link
   * java.util.concurrent.ScheduledExecutorService#scheduleAtFixedRate(Runnable, long, long,
   * java.util.concurrent.TimeUnit)} }
   */
  void scheduleAtFixedRate(Runnable runnable, long initialDelay, long period, TimeUnit unit);

