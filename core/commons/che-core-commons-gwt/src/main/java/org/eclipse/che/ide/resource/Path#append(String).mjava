    /**
     * Returns the canonicalized path obtained from the
     * concatenation of the given string path to the
     * end of this path. The given string path must be a valid
     * path. If it has a trailing separator,
     * the result will have a trailing separator.
     * The device id of this path is preserved (the one
     * of the given string is ignored). Duplicate slashes
     * are removed from the path except at the beginning
     * where the path is considered to be UNC.
     *
     * @param path
     *         the string path to concatenate
     * @return the new path
     * @see #isValidPath(String)
     * @since 4.0.0-RC5
     */
    public Path append(String path) {
        //optimize addition of a single segment
        if (path.indexOf(SEPARATOR) == -1 && path.indexOf("\\") == -1 && path.indexOf(DEVICE_SEPARATOR) == -1) {
            int tailLength = path.length();
            if (tailLength < 3) {
                //some special cases
                if (tailLength == 0 || ".".equals(path)) {
                    return this;
                }
                if ("..".equals(path))
                    return removeLastSegments(1);
            }
            //just add the segment
            int myLen = segments.length;
            String[] newSegments = new String[myLen + 1];
            System.arraycopy(segments, 0, newSegments, 0, myLen);
            newSegments[myLen] = path;
            return new Path(device, newSegments, separators & ~HAS_TRAILING);
        }
        //go with easy implementation
        return append(new Path(path));
    }

