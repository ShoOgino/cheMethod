    /**
     * Retains only the elements in given {@code o1} array that are contained in the
     * specified {@code o2}. In other words, removes from {@code o1} all
     * of its elements that are not contained in the specified array {@code o2}.
     *
     * @param o1
     *         input array
     * @param o2
     *         array containing elements to be retained in {@code o1}
     * @param complement
     *         true if operation should be performed with retain algorithm, false means that from {@code o1} should be removed all elements
     *         that contains in {@code o2}
     * @param <T>
     *         type of given {@code o1} and {@code o2}
     * @return copy of retained array
     * @throws IllegalArgumentException
     *         in case if given arrays null
     * @since 4.3.0
     */
    public static <T> T[] batchRemove(T[] o1, T[] o2, boolean complement) {
        checkArgument(o1 != null && o2 != null);

        int r = 0, w = 0;

        T[] o1Copy = copyOf(o1, o1.length);
        T[] o2Copy = copyOf(o2, o2.length);

        for (; r < o1Copy.length; r++)
            if ((indexOf(o2Copy, o1Copy[r]) >= 0) == complement)
                o1Copy[w++] = o1Copy[r];

        if (r != o1Copy.length) {
            arraycopy(o1Copy, r,
                      o1Copy, w,
                      o1Copy.length - r);
            w += o1Copy.length - r;
        }
        if (w != o1Copy.length) {
            for (int i = w; i < o1Copy.length; i++)
                o1Copy[i] = null;

            return copyOf(o1Copy, w);
        } else {
            return copyOf(o1Copy, o1Copy.length);
        }
    }

