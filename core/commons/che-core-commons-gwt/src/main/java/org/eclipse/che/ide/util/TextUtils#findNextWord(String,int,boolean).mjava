    /**
     * Finds the index of the next non-similar word. There are two groups of
     * words: Javascript identifiers and the remaining non-whitespace characters.
     * <p/>
     * Consider the text "hello there". With {@code skipWhitespaceBeforeWord}
     * true, the return value would be at the 't'. With it false, the return value
     * would be at the ' '.
     * <p/>
     * Consider the text "someFunction(foo); // Test" and
     * {@code skipWhitespaceBeforeWord} is true. findNextWord(text, 0) will return
     * the index of the '(', since it is the first word that is not an identifier.
     * findNextWord(text, 12) will return the 13 ('f' from "foo").
     * findNextWord(text, 17) will return 19 ('/').
     *
     * @param skipWhitespaceBeforeWord
     *         true to skip the whitespace before the next
     *         word (thus returning the position of the first letter of the word),
     *         false to return the position of the first whitespace before the word
     * @return the index according to {@code skipWhitespaceBeforeWord}, or if the
     * given {@code column} is beyond the string's length, this will
     * return the length plus one.
     */
    public static int findNextWord(String text, int column, boolean skipWhitespaceBeforeWord) {
        if (column + 1 >= text.length()) {
            return text.length() + 1;
        }

        int initialColumn = column;
        if (skipWhitespaceBeforeWord) {
            column = skipNonwhitespaceSimilar(text, column, true);
            column = skipWhitespace(text, column, true);
        } else {
            column = skipWhitespace(text, column, true);
            column = skipNonwhitespaceSimilar(text, column, true);
        }

        return column;
    }

