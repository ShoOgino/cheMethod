    /**
     * Gathers all visible nodes of subtree.
     *
     * @param node subtree parent
     * @return array containing all visible nodes of subtree
     */
    public List<TreeNodeElement<D>> getVisibleTreeNodes(TreeNodeElement<D> node) {
        List<TreeNodeElement<D>> nodes = new ArrayList<>();
        nodes.add(node);

        if (node.isOpen() && node.hasChildNodes()) {
            NodeList children = node.getChildrenContainer().getChildNodes();
            for (int ci = 0; ci < children.getLength(); ci++) {
                TreeNodeElement<D> child = (TreeNodeElement<D>)children.item(ci);
                nodes.addAll(getVisibleTreeNodes(child));
            }
        }

        return nodes;
    }

