  @Override
  public Object invoke(MethodInvocation invocation) throws Throwable {
    String spanName = getSpanName(invocation);

    Span span =
        tracer
            .buildSpan(spanName)
            .asChildOf(tracer.activeSpan())
            .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_SERVER)
            .start();
    try (Scope scope = tracer.scopeManager().activate(span)) {
      Traced.TagsStack.push();

      return invocation.proceed();
    } catch (Exception e) {
      LOG.error(e.getMessage(), e);
      span.log(e.getMessage());
      throw e;
    } finally {
      for (Map.Entry<String, Supplier<?>> e : Traced.TagsStack.pop().entrySet()) {
        Object val;
        try {
          val = e.getValue().get();
        } catch (Exception ex) {
          if (LOG.isDebugEnabled()) {
            LOG.debug(
                "Could not get the value for a tag called {} when tracing {}.",
                e.getKey(),
                spanName,
                ex);
          }
          continue;
        }

        if (val instanceof String) {
          span.setTag(e.getKey(), (String) val);
        } else if (val instanceof Boolean) {
          span.setTag(e.getKey(), (Boolean) val);
        } else if (val instanceof Number) {
          span.setTag(e.getKey(), (Number) val);
        }
      }
      span.finish();
    }
  }

