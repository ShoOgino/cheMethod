  @Override
  public Object invoke(MethodInvocation invocation) throws Throwable {
    String spanName = getSpanName(invocation);
    try (Scope scope =
        tracer
            .buildSpan(spanName)
            .asChildOf(tracer.activeSpan())
            .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_SERVER)
            .startActive(true)) {

      Traced.TagsStack.push();

      try {
        return invocation.proceed();
      } finally {
        for (Map.Entry<String, Supplier<?>> e : Traced.TagsStack.pop().entrySet()) {
          Object val;
          try {
            val = e.getValue().get();
          } catch (Exception ex) {
            if (LOG.isDebugEnabled()) {
              // we want to know the exception in case the tag extraction failed.
              // Slf4j doesn't seem to provide a method overload that could both provide formatting
              // arguments and the cause.
              LOG.debug(
                  "Could not get the value for a tag called {} when tracing {}.",
                  e.getKey(),
                  spanName,
                  ex);
            }
            continue;
          }

          if (val instanceof String) {
            scope.span().setTag(e.getKey(), (String) val);
          } else if (val instanceof Boolean) {
            scope.span().setTag(e.getKey(), (Boolean) val);
          } else if (val instanceof Number) {
            scope.span().setTag(e.getKey(), (Number) val);
          }
        }
      }
    }
  }

