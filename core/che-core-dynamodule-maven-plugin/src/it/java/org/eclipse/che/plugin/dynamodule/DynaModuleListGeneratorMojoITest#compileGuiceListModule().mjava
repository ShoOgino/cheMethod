    /**
     * Starts tests by compiling  generated Java class from maven plugin
     * @throws IOException if unable to start process
     * @throws InterruptedException if unable to wait the end of the process
     */
    @Test
    public void compileGuiceListModule()
        throws IOException, InterruptedException, IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchMethodException, InvocationTargetException {

        // search generated guice module list file
        Path p = this.buildDirectory;
        final int maxDepth = 10;
        Stream<Path> matches = java.nio.file.Files.find(p, maxDepth, (path, basicFileAttributes) -> path.getFileName().toString().equals(GENERATED_GUICE_FILE));

        // take first
        Optional<Path> optionalPath = matches.findFirst();
        if (!optionalPath.isPresent()) {
            throw new IllegalStateException("Unable to find generated Guice file named '" + GENERATED_GUICE_FILE + "'. Check it has been generated first");
        }

        Path generatedJavaFilePath = optionalPath.get();

        String className = generatedJavaFilePath.getFileName().toString();
        className = className.substring(0, className.length() - ".class".length());

        Class<ModuleFinder> moduleFinderClass = (Class<ModuleFinder>) new CustomClassLoader().defineClass("org.eclipse.che.dynamodule." + className, Files
            .readAllBytes(generatedJavaFilePath));

        ModuleFinder moduleFinder=  moduleFinderClass.getDeclaredConstructor().newInstance();
        List<Module> moduleList = moduleFinder.getModules();
        Assert.assertEquals(moduleList.size(), 2);


        Assert.assertTrue(moduleList.stream().anyMatch(item -> item.getClass().equals(MyCustomModule.class)));
        Assert.assertTrue(moduleList.stream().anyMatch(item -> item.getClass().equals(AnotherCustomModule.class)));
    }

