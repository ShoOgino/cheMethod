    /**
     * Generate Class declarations
     *
     * @param builder
     */
    public static void generateClass(StringBuilder builder) {
        // generate class header
        builder.append("/**\n");
        builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");
        builder.append(" */\n");
        builder.append("@Singleton\n");
        builder.append("@SuppressWarnings(\"rawtypes\")\n");
        builder.append("public class ExtensionManager\n");
        builder.append("{\n");
        builder.append("\n");

        // field
        builder.append(GeneratorUtils.TAB
                       + "/** Contains the map will all the Extension Providers <FullClassFQN, Provider>. */\n");
        builder.append(GeneratorUtils.TAB
                       + "protected final Map<String, Provider> extensions = new HashMap<>();\n\n");

        // generate constructor

        builder.append(GeneratorUtils.TAB + "/** Constructor that accepts all the Extension found in IDE package */\n");
        builder.append(GeneratorUtils.TAB + "@Inject\n");
        builder.append(GeneratorUtils.TAB + "public ExtensionManager(\n");

        // paste args here
        Iterator<Entry<String, String>> entryIterator = EXTENSIONS_FQN.entrySet().iterator();
        while (entryIterator.hasNext()) {
            // <FullFQN, ClassName>
            Entry<String, String> extensionEntry = entryIterator.next();
            String hasComma = entryIterator.hasNext() ? "," : "";
            // add constructor argument like:
            // fullFQN classNameToLowerCase,
            String classFQN = String.format("Provider<%s>", extensionEntry.getKey());
            String variableName = extensionEntry.getValue().toLowerCase();
            builder.append(GeneratorUtils.TAB2 + classFQN + " " + variableName + hasComma + "\n");
        }

        builder.append(GeneratorUtils.TAB + ")\n");
        builder.append(GeneratorUtils.TAB + "{\n");

        // paste add here
        for (Entry<String, String> extension : EXTENSIONS_FQN.entrySet()) {
            String fullFqn = extension.getKey();
            String variableName = extension.getValue().toLowerCase();

            String putStatement = String.format("this.extensions.put(\"%s\",%s);%n", fullFqn, variableName);
            builder.append(GeneratorUtils.TAB2 + putStatement);
        }

        // close constructor
        builder.append(GeneratorUtils.TAB + "}\n\n");

        // generate getter
        builder.append(GeneratorUtils.TAB
                       + "/** Returns  the map will all the Extension Providers <FullClassFQN, Provider>. */\n");
        builder.append(GeneratorUtils.TAB + "public Map<String, Provider> getExtensions()\n");
        builder.append(GeneratorUtils.TAB + "{\n");
        builder.append(GeneratorUtils.TAB2 + "return extensions;\n");
        builder.append(GeneratorUtils.TAB + "}\n");

        // close class
        builder.append("}\n");

    }

