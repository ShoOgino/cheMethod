    /**
     * If selection chang in active part, Selection Agent should fire
     * an Event
     */
    @Test
    public void shouldFireEventWhenSelectionInActivePartChanged() {

        AbstractPartPresenter part = new AbstractPartPresenter() {
            @Override
            public void go(AcceptsOneWidget container) {
            }

            @Override
            public String getTitleToolTip() {
                return null;
            }

            @Override
            public ImageResource getTitleImage() {
                return null;
            }

            @Override
            public SVGResource getTitleSVGImage() {
                return null;
            }

            @Override
            public String getTitle() {
                return null;
            }

            @Override
            public void setVisible(boolean visible) {
                //to do nothing
            }

            @Override
            public IsWidget getView() {
                return null;
            }
        };

        // fire event, for agent to get information about active part
        eventBus.fireEvent(new ActivePartChangedEvent(part));
        SelectionChangedHandler handler = mock(SelectionChangedHandler.class);
        eventBus.addHandler(SelectionChangedEvent.TYPE, handler);

        part.setSelection(mock(Selection.class));

        verify(handler).onSelectionChanged((SelectionChangedEvent)any());
    }

