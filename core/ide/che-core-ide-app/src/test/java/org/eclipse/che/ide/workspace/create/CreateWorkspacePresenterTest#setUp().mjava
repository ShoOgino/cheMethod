    @Before
    public void setUp() {
        machineConfigDto = mock(MachineConfigDto.class, new SelfReturningAnswer());
        workspaceConfigDto = mock(WorkspaceConfigDto.class, new SelfReturningAnswer());
        when(usersWorkspaceDto.getConfig()).thenReturn(workspaceConfigDto);

        when(dtoFactory.createDto(MachineSourceDto.class)).thenReturn(machineSourceDto);
        when(machineSourceDto.withType(anyString())).thenReturn(machineSourceDto);
        when(machineSourceDto.withLocation(anyString())).thenReturn(machineSourceDto);

        when(dtoFactory.createDto(LimitsDto.class)).thenReturn(limitsDto);
        when(limitsDto.withRam(anyInt())).thenReturn(limitsDto);

        when(dtoFactory.createDto(MachineConfigDto.class)).thenReturn(machineConfigDto);

        when(dtoFactory.createDto(EnvironmentDto.class)).thenReturn(environmentDto);
        when(environmentDto.withName(anyString())).thenReturn(environmentDto);
        when(environmentDto.withMachineConfigs(Matchers.<List<MachineConfigDto>>anyObject())).thenReturn(environmentDto);

        when(dtoFactory.createDto(WorkspaceConfigDto.class)).thenReturn(workspaceConfigDto);

        when(dtoFactory.createDto(WorkspaceDto.class)).thenReturn(usersWorkspaceDto);

        when(wsComponentProvider.get()).thenReturn(workspaceComponent);

        when(recipeServiceClient.getRecipes(anyInt(), anyInt())).thenReturn(recipesPromise);
        when(view.getWorkspaceName()).thenReturn("test");
        when(view.getRecipeUrl()).thenReturn("recipe");
    }

