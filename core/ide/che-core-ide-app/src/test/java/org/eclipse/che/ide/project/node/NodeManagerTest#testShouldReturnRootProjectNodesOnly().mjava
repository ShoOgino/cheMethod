    @Test
    public void testShouldReturnRootProjectNodesOnly() throws Exception {
        final ProjectConfigDto project_1 = mock(ProjectConfigDto.class);
        final ProjectConfigDto project_2 = mock(ProjectConfigDto.class);
        final ProjectConfigDto project_3 = mock(ProjectConfigDto.class);
        final WorkspaceConfigDto workspaceConfigDtoMock = mock(WorkspaceConfigDto.class);
        final UsersWorkspaceDto usersWorkspaceDtoMock = mock(UsersWorkspaceDto.class);
        final NodeSettings nodeSettingsMock = mock(NodeSettings.class);

        when(projectServiceClientMock.getProjects(anyString())).thenReturn(projectConfigsMock);
        when(appContextMock.getWorkspace()).thenReturn(usersWorkspaceDtoMock);
        when(usersWorkspaceDtoMock.getConfig()).thenReturn(workspaceConfigDtoMock);
        when(project_1.getPath()).thenReturn("/project_1/");
        when(project_2.getPath()).thenReturn("/project_1/some_path/");
        when(project_3.getPath()).thenReturn("/project_2/");
        when(settingsProviderMock.getSettings()).thenReturn(nodeSettingsMock);

        nodeManager.getProjectNodes();

        verify(projectConfigsMock).then(getProjectsCaptor.capture());
        getProjectsCaptor.getValue().apply(newArrayList(project_1, project_2, project_3));
        verify(nodeFactoryMock, times(2)).newProjectNode(any(ProjectConfigDto.class), eq(nodeSettingsMock));
        verify(workspaceConfigDtoMock).withProjects(eq(newArrayList(project_1, project_2, project_3)));
    }

