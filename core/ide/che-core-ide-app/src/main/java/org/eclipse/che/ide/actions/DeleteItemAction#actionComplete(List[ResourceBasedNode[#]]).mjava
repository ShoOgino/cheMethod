    private Operation<Void> actionComplete(final List<ResourceBasedNode<?>> nodes) {
        final ProjectConfigDto project = appContext.getCurrentProject().getRootProject();
        return new Operation<Void>() {
            @Override
            public void apply(Void arg) throws OperationException {
                if (actionCompletedCallBack != null) {
                    actionCompletedCallBack.onSuccess(null);
                }

                Map<String, List<String>> atributes = project.getAttributes();
                if (!(atributes.containsKey("vcs.provider.name") && atributes.get("vcs.provider.name").contains("git"))
                    || nodes.get(0) instanceof ProjectNode) {
                    return;
                }

                final Unmarshallable<Status> unmarshall = dtoUnmarshallerFactory.newUnmarshaller(Status.class);
                gitService.status(workspaceId, project, new AsyncRequestCallback<Status>(unmarshall) {
                    @Override
                    protected void onSuccess(final Status result) {
                        if (!result.getMissing().isEmpty()) {
                            askAddToIndex(project, nodes, result.getMissing());
                        }
                    }

                    @Override
                    protected void onFailure(Throwable exception) {
                        notificationManager.notify(exception.getMessage(), FAIL, false);
                    }
                });
            }
        };
    }

