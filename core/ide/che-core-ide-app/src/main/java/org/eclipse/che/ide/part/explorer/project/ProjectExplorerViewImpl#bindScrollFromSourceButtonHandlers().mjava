    private void bindScrollFromSourceButtonHandlers() {
        eventBus.addHandler(ActivePartChangedEvent.TYPE, new ActivePartChangedHandler() {
            @Override
            public void onActivePartChanged(ActivePartChangedEvent event) {
                if (event.getActivePart() instanceof EditorPartPresenter) {
                    if (scrollFromSourceButton == null) {
                        scrollFromSourceButton = new ToolButton(FontAwesome.DOT_CIRCLE);
                        scrollFromSourceButton.addClickHandler(new ClickHandler() {
                            @Override
                            public void onClick(ClickEvent event) {
                                final String sourcePath = editorAgentProvider.get().getActiveEditor().getEditorInput().getFile().getPath();

                                //if we request scroll to file that may be outside of go into flow
                                if (tree.getGoInto().isActive()
                                    && tree.getGoInto().getLastUsed() instanceof HasStorablePath
                                    && !sourcePath.startsWith(((HasStorablePath)tree.getGoInto().getLastUsed()).getStorablePath())) {
                                    tree.getGoInto().reset();
                                }

                                scrollFromSource(new HasStorablePath.StorablePath(sourcePath));
                            }
                        });
                        scrollFromSourceButton.ensureDebugId(SCROLL_FROM_SOURCE_BUTTON_ID);
                        Tooltip.create((elemental.dom.Element)scrollFromSourceButton.getElement(),
                                       BOTTOM,
                                       MIDDLE,
                                       "Scroll From Source");
                        addToolButton(scrollFromSourceButton);
                    }

                    scrollFromSourceButton.setVisible(true);

                    EditorPartPresenter activeEditor = editorAgentProvider.get().getActiveEditor();

                    if (activeEditor == null) {
                        return;
                    }

                    activeEditor.addCloseHandler(new EditorPartPresenter.EditorPartCloseHandler() {
                        @Override
                        public void onClose(EditorPartPresenter editor) {
                            scrollFromSourceButton.setVisible(false);
                        }
                    });
                }
            }
        });
    }

