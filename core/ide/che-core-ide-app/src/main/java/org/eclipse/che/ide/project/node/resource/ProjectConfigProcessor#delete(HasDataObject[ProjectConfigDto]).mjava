    @Override
    public Promise<ProjectConfigDto> delete(@NotNull final HasDataObject<ProjectConfigDto> node) {
        if (node instanceof ProjectNode) {
            return newPromise(new AsyncPromiseHelper.RequestCall<Void>() {
                @Override
                public void makeCall(AsyncCallback<Void> callback) {
                    projectService.delete(workspaceId, node.getData().getPath(), newCallback(callback));
                }
            }).then(new Function<Void, ProjectConfigDto>() {
                @Override
                public ProjectConfigDto apply(Void arg) throws FunctionException {
                    eventBus.fireEvent(new DeleteProjectEvent(((ProjectNode)node).getProjectConfig()));
                    return node.getData();
                }
            });
        }

        return Promises.reject(JsPromiseError.create("Internal error"));
    }

