    /**
     * Handles workspace start or recovering.
     */
    private void handleWsStart(final Promise<UsersWorkspaceDto> promise) {
        promise.then(new Operation<UsersWorkspaceDto>() {
            @Override
            public void apply(UsersWorkspaceDto workspace) throws OperationException {
                initialLoadingInfo.setOperationStatus(WORKSPACE_BOOTING.getValue(), SUCCESS);
                setCurrentWorkspace(workspace);
                EnvironmentDto currentEnvironment = null;
                for (EnvironmentDto environment : workspace.getConfig().getEnvironments()) {
                    if (environment.getName().equals(workspace.getConfig().getDefaultEnv())) {
                        currentEnvironment = environment;
                        break;
                    }
                }
                List<MachineConfigDto> machineConfigs =
                        currentEnvironment != null ? currentEnvironment.getMachineConfigs() : new ArrayList<MachineConfigDto>();

                for (MachineConfigDto machineConfig : machineConfigs) {
                    if (machineConfig.isDev()) {
                        MachineManager machineManager = machineManagerProvider.get();
                        machineManager.onDevMachineCreating(machineConfig);
                    }
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                initialLoadingInfo.setOperationStatus(WORKSPACE_BOOTING.getValue(), ERROR);
                callback.onFailure(new Exception(arg.getCause()));
            }
        });
    }

