    @Override
    public void actionPerformed(ActionEvent event) {
        eventLogger.log(this);

        if (appContext.getCurrentProject() == null || appContext.getCurrentProject().getRootProject() == null) {
            Log.error(getClass(), "Can not run find/replace without opened project\n");
            return;
        }

        if (event.getParameters() == null) {
            Log.error(getClass(), "Can not run find/replace without parameters");
            return;
        }

        final Map<String, String> parameters = event.getParameters();

        String file = parameters.get("in");
        String find = parameters.get("find");
        String replace = parameters.get("replace");
        String mode = parameters.get("replaceMode");

        final ReplacementSet replacementSet = dtoFactory.createDto(ReplacementSet.class).withFiles(Arrays.asList(file))
                                                        .withEntries(Arrays.asList(dtoFactory.createDto(Variable.class)
                                                                                             .withFind(find)
                                                                                             .withReplace(replace)
                                                                                             .withReplacemode(mode)));

        vfsServiceClient.replace(appContext.getWorkspaceId(),
                                 appContext.getCurrentProject().getRootProject().getPath(),
                                 Arrays.asList(replacementSet),
                                 new AsyncRequestCallback<Void>() {
                                     @Override
                                     protected void onSuccess(Void result) {
                                         //TODO Send event described in IDEX-1743
                                     }

                                     @Override
                                     protected void onFailure(Throwable exception) {

                                     }
                                 });
    }

