    @Override
    public Promise<ProjectConfigDto> delete(final HasDataObject<ProjectConfigDto> node) {
        if (node instanceof ModuleNode) {
            Node parent = ((ModuleNode)node).getParent();
            if (!(parent instanceof HasProjectConfig)) {
                return Promises.reject(JsPromiseError.create("Failed to search parent project descriptor"));
            }

            final String parentPath = ((HasProjectConfig)parent).getProjectConfig().getPath();
            final String modulePath = node.getData().getPath();

            return AsyncPromiseHelper.createFromAsyncRequest(new AsyncPromiseHelper.RequestCall<ProjectConfigDto>() {
                @Override
                public void makeCall(final AsyncCallback<ProjectConfigDto> callback) {
                    projectService.deleteModule(workspaceId, parentPath, modulePath, new AsyncRequestCallback<Void>() {
                        @Override
                        protected void onSuccess(Void result) {
                            callback.onSuccess(node.getData());
                        }

                        @Override
                        protected void onFailure(Throwable exception) {
                            callback.onFailure(exception);
                        }
                    });
                }
            });
        }
        return Promises.reject(JsPromiseError.create("Internal error"));
    }

