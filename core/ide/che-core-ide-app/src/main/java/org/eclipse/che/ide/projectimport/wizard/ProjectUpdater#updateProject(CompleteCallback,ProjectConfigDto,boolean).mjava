    /**
     * The method updates project and take resolution should project be configured or not.
     *
     * @param callback
     *         callback which is necessary to inform that resolving completed
     * @param projectConfig
     *         project which will be resolved
     * @param isConfigurationRequired
     *         special flag which defines will project be configured or not.<code>true</code> project will be configured,
     *         <code>false</code> project will not be configured
     */
    public void updateProject(@NotNull final CompleteCallback callback,
                              @NotNull ProjectConfigDto projectConfig,
                              final boolean isConfigurationRequired) {
        String projectPath = projectConfig.getPath();

        Unmarshallable<ProjectConfigDto> unmarshaller = dtoUnmarshallerFactory.newUnmarshaller(ProjectConfigDto.class);
        projectService.updateProject(workspaceId,
                                     projectPath == null ? '/' + projectConfig.getName() : projectPath,
                                     projectConfig,
                                     new AsyncRequestCallback<ProjectConfigDto>(unmarshaller) {
                                         @Override
                                         protected void onSuccess(final ProjectConfigDto result) {
                                             eventBus.fireEvent(new CreateProjectEvent(result));
                                             projectNotificationSubscriber.onSuccess();
                                             callback.onCompleted();
                                             if (!result.getProblems().isEmpty() || isConfigurationRequired) {
                                                 eventBus.fireEvent(new ConfigureProjectEvent(result));
                                             }
                                         }

                                         @Override
                                         protected void onFailure(Throwable exception) {
                                             projectNotificationSubscriber.onFailure(exception.getMessage());
                                             String errorMessage = ErrorMessageUtils.getErrorMessage(exception);
                                             callback.onFailure(new Exception(errorMessage));
                                         }
                                     });
    }

