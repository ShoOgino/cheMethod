    @Override
    protected Promise<Void> importProject(@NotNull String pathToProject,
                                          @NotNull String projectName,
                                          @NotNull SourceStorageDto sourceStorage) {
        final ProjectNotificationSubscriber subscriber = subscriberFactory.createSubscriber();
        subscriber.subscribe(projectName);

        Promise<Void> importPromise = projectService.importProject(workspaceId, pathToProject, false, sourceStorage);

        return importPromise.then(new Operation<Void>() {
            @Override
            public void apply(Void arg) throws OperationException {
                projectResolver.resolveProject(callback, projectConfig);

                subscriber.onSuccess();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError exception) throws OperationException {
                subscriber.onFailure(exception.getMessage());
                String errorMessage = ErrorMessageUtils.getErrorMessage(exception.getCause());
                if (errorMessage.equals("Unable get private ssh key")) {
                    callback.onFailure(new Exception(localizationConstant.importProjectMessageUnableGetSshKey()));
                    return;
                }
                callback.onFailure(new Exception(errorMessage));
            }
        });
    }

