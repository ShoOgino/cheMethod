    private Promise<Void> doImport(@NotNull final String pathToProject,
                          @NotNull final String projectName,
                          @NotNull final SourceStorageDto sourceStorage) {
        final ProjectNotificationSubscriber subscriber = subscriberFactory.createSubscriber();
        subscriber.subscribe(projectName);
        Promise<Void> importPromise = projectService.importProject(workspaceId, pathToProject, false, sourceStorage);

        importPromise.then(new Operation<Void>() {
            @Override
            public void apply(Void arg) throws OperationException {
                eventBus.fireEvent(new CreateProjectEvent(projectConfig));
                projectResolver.resolveProject(callback, projectConfig);
                subscriber.onSuccess();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError exception) throws OperationException {
                int errorCode = ExceptionUtils.getErrorCode(exception.getCause());
                // no ssh key found code. See org.eclipse.che.git.impl.nativegit.ssh.SshKeyProviderImpl.
                if (errorCode == UNABLE_GET_PRIVATE_SSH_KEY) {
                    subscriber.onFailure(exception.getCause().getMessage());
                    callback.onFailure(new Exception(localizationConstant.importProjectMessageUnableGetSshKey()));
                    return;
                }
                if (errorCode == UNAUTHORIZED_GIT_OPERATION) {
                    subscriber.onFailure(exception.getCause().getMessage());
                    final Map<String, String> attributes = ExceptionUtils.getAttributes(exception.getCause());
                    final String providerName = attributes.get(PROVIDER_NAME);
                    final String authenticateUrl = attributes.get(AUTHENTICATE_URL);
                    if (!Strings.isNullOrEmpty(providerName) && !Strings.isNullOrEmpty(authenticateUrl)) {
                        tryAuthenticateRepeatImport(providerName,
                                                    authenticateUrl,
                                                    pathToProject,
                                                    projectName,
                                                    sourceStorage,
                                                    subscriber);
                    } else {
                        dialogFactory.createMessageDialog(localizationConstant.oauthFailedToGetAuthenticatorTitle(),
                                                          localizationConstant.oauthFailedToGetAuthenticatorText(), null).show();
                    }
                } else {
                    subscriber.onFailure(exception.getMessage());
                    callback.onFailure(new Exception(exception.getCause().getMessage()));
                }
            }
        });

        return importPromise;
    }

