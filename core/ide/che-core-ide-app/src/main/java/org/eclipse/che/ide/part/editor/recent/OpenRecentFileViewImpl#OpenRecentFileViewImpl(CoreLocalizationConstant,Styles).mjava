    @Inject
    public OpenRecentFileViewImpl(CoreLocalizationConstant locale, Styles styles) {

        setWidget(uiBinder.createAndBindUi(this));

        styles.css().ensureInjected();

        pathLabel = new Label();
        pathLabel.setStyleName(styles.css().label());

        NodeStorage storage = new NodeStorage(new NodeUniqueKeyProvider() {
            @Override
            public String getKey(@NotNull Node item) {
                if (item instanceof HasStorablePath) {
                    return ((HasStorablePath)item).getStorablePath();
                } else {
                    return String.valueOf(item.hashCode());
                }
            }
        });
        NodeLoader loader = new NodeLoader(Collections.<NodeInterceptor>emptySet());
        tree = new Tree(storage, loader);
        tree.setPresentationRenderer(new DefaultPresentationRenderer<Node>(tree.getTreeStyles()) {
            @Override
            public Element render(Node node, String domID, Tree.Joint joint, int depth) {
                Element element = super.render(node, domID, joint, depth);

                element.setAttribute("name", node.getName());

                if (node instanceof HasStorablePath) {
                    element.setAttribute("path", ((HasStorablePath)node).getStorablePath());
                }

                if (node instanceof HasProjectConfig) {
                    element.setAttribute("project", ((HasProjectConfig)node).getProjectConfig().getPath());
                }

                if (node instanceof HasAttributes && ((HasAttributes)node).getAttributes().containsKey(CUSTOM_BACKGROUND_FILL)) {
                    element.getFirstChildElement().getStyle()
                           .setBackgroundColor(((HasAttributes)node).getAttributes().get(CUSTOM_BACKGROUND_FILL).get(0));
                }

                return element;
            }
        });
        tree.setAutoSelect(true);
        tree.getSelectionModel().setSelectionMode(SINGLE);
        tree.getSelectionModel().addSelectionChangedHandler(new SelectionChangedEvent.SelectionChangedHandler() {
            @Override
            public void onSelectionChanged(SelectionChangedEvent event) {
                List<Node> selection = event.getSelection();
                if (selection == null || selection.isEmpty()) {
                    pathLabel.setText("");
                    pathLabel.setTitle("");
                    return;
                }

                Node head = selection.get(0);

                if (head instanceof HasStorablePath) {
                    String path = getShortPath(((HasStorablePath)head).getStorablePath());
                    pathLabel.setText(path);
                    pathLabel.setTitle(path);
                    return;
                }

                pathLabel.setText("");
                pathLabel.setTitle("");
            }
        });

        KeyboardNavigationHandler handler = new KeyboardNavigationHandler() {
            @Override
            public void onEnter(NativeEvent evt) {
                hide();
            }
        };

        handler.bind(tree);

        tree.addDomHandler(new DoubleClickHandler() {
            @Override
            public void onDoubleClick(DoubleClickEvent event) {
                hide();
            }
        }, DoubleClickEvent.getType());

        tree.ensureDebugId("recent-files");
        tree.getElement().getStyle().setOverflowY(AUTO);

        content.addSouth(pathLabel, 20.);
        content.add(tree);

        setTitle(locale.openRecentFilesTitle());

        setHideOnEscapeEnabled(true);

        getFooter().setVisible(false);

        getWidget().setStyleName(styles.css().window());

        hideCrossButton();
    }

