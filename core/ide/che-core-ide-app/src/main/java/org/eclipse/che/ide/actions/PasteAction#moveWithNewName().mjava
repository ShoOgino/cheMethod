    /**
     * Asks the user for new item name and retries moving.
     */
    private void moveWithNewName() {
        /** Get item to move */
        final ResourceBasedNode<?> item = itemsToProcess.get(itemIndex);

        /** Ask user for new resource name. */
        renameItemAction.askForNewName(item, new InputCallback() {
            @Override
            public void accepted(String value) {
                try {
                    /** Move the item, giving new name */
                    projectServiceClient
                            .move(workspaceId, ((HasStorablePath)item).getStorablePath(), ((HasStorablePath)destination).getStorablePath(),
                                  value,
                                  moveCallback);
                } catch (Exception error) {
                    /** Handle error and stop moving */
                    notificationManager.notify(localization.failedToMoveItems(), error.getMessage(), FAIL, true, item.getProjectConfig());
                    dialogFactory.createMessageDialog("ERROR", error.getMessage(), null).show();

                    /** Clears item list to disable Paste button */
                    itemsToProcess.clear();
                }
            }
        }, new CancelCallback() {
            @Override
            public void cancelled() {
                /** Stop moving and clears item list to disable Paste button */
                itemsToProcess.clear();
            }
        });
    }

