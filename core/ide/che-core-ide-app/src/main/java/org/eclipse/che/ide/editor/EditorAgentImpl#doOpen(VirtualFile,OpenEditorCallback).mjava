    private void doOpen(final VirtualFile file, final OpenEditorCallback callback) {
        final String filePath = file.getPath();
        if (openedEditors.containsKey(filePath)) {
            EditorPartPresenter editor = openedEditors.get(filePath);
            workspace.setActivePart(editor, EDITING);
            callback.onEditorActivated(editor);
        } else {
            FileType fileType = fileTypeRegistry.getFileTypeByFile(file);
            EditorProvider editorProvider = editorRegistry.getEditor(fileType);
            final EditorPartPresenter editor = editorProvider.getEditor();

            editor.init(new EditorInputImpl(fileType, file), callback);
            editor.addCloseHandler(editorClosed);

            workspace.openPart(editor, EDITING);
            openedEditors.put(filePath, editor);

            workspace.setActivePart(editor);
            editor.addPropertyListener(new PropertyListener() {
                @Override
                public void propertyChanged(PartPresenter source, int propId) {
                    if (propId == EditorPartPresenter.PROP_INPUT) {
                        if (editor instanceof HasReadOnlyProperty) {
                            ((HasReadOnlyProperty)editor).setReadOnly(file.isReadOnly());
                        }
                        if (callback != null) {
                            callback.onEditorOpened(editor);
                        }

                        eventBus.fireEvent(new EditorOpenedEvent(file, editor));
                    }
                }
            });

        }
    }

