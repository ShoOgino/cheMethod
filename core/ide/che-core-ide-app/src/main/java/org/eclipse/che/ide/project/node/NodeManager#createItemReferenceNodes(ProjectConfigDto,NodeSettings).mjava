    private Function<List<ItemReference>, Promise<List<Node>>> createItemReferenceNodes(final ProjectConfigDto projectConfigDto,
                                                                                        final NodeSettings nodeSettings) {
        return new Function<List<ItemReference>, Promise<List<Node>>>() {
            @Override
            public Promise<List<Node>> apply(List<ItemReference> itemRefList) throws FunctionException {
                if (itemRefList == null || itemRefList.isEmpty()) {
                    return Promises.resolve(Collections.<Node>emptyList());
                }

                final List<Node> nodes = new ArrayList<>(itemRefList.size());

                for (ItemReference itemReference : itemRefList) {
                    //Skip files which starts with "." if enabled
                    if (!nodeSettings.isShowHiddenFiles() && itemReference.getName().startsWith(".")) {
                        continue;
                    }

                    Node node = createNodeByType(itemReference, projectConfigDto, nodeSettings);
                    if (node != null) {
                        nodes.add(node);
                    }

                }

                return Promises.resolve(nodes);
            }
        };
    }

