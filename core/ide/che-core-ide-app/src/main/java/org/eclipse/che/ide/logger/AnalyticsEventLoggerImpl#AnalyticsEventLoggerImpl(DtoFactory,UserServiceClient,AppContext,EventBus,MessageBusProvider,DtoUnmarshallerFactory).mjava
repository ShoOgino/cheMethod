    @Inject
    public AnalyticsEventLoggerImpl(DtoFactory dtoFactory,
                                    UserServiceClient user,
                                    AppContext appContext,
                                    EventBus eventBus,
                                    final MessageBusProvider messageBusProvider,
                                    DtoUnmarshallerFactory dtoUnmarshallerFactory) {
        this.dtoFactory = dtoFactory;
        this.user = user;
        this.appContext = appContext;
        this.dtoUnmarshallerFactory = dtoUnmarshallerFactory;

        saveCurrentUser();

        this.pendingMessages = new LinkedList<Message>() {
            @Override
            public boolean add(Message message) {
                return size() < MAX_PENDING_MESSAGES && super.add(message);
            }
        };

        eventBus.addHandler(StartWorkspaceEvent.TYPE, new StartWorkspaceHandler() {
            @Override
            public void onWorkspaceStarted(UsersWorkspaceDto workspace) {
                messageBus = messageBusProvider.getMessageBus();

                messageBus.addOnOpenHandler(new ConnectionOpenedHandler() {
                    @Override
                    public void onOpen() {
                        isOpenedMessageBus = true;

                        Message message;
                        while ((message = pendingMessages.poll()) != null) {
                            doSend(message);
                        }
                    }
                });
            }
        });
    }

