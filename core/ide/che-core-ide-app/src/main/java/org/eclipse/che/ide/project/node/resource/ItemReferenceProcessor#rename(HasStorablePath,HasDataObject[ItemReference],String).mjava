    @Override
    public Promise<ItemReference> rename(@Nullable final HasStorablePath parent, final @NotNull HasDataObject<ItemReference> node, final @NotNull String newName) {

        return newPromise(new RequestCall<Void>() {
            @Override
            public void makeCall(AsyncCallback<Void> callback) {
                projectService.rename(workspaceId, parent.getStorablePath() + "/" + node.getData().getName(), newName, null, newCallback(callback));
            }
        }).thenPromise(new Function<Void, Promise<ItemReference>>() {
            @Override
            public Promise<ItemReference> apply(Void arg) throws FunctionException {
                return newPromise(new RequestCall<ItemReference>() {
                    @Override
                    public void makeCall(AsyncCallback<ItemReference> callback) {
                        projectService.getItem(workspaceId, parent.getStorablePath() + "/" + newName, newCallback(callback, unmarshallerFactory.newUnmarshaller(ItemReference.class)));
                    }
                });
            }
        });
    }

