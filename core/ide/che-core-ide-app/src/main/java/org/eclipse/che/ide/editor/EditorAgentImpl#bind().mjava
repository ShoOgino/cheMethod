    protected void bind() {
        eventBus.addHandler(ActivePartChangedEvent.TYPE, activePartChangedHandler);
        eventBus.addHandler(FileEvent.TYPE, fileEventHandler);
        eventBus.addHandler(WindowActionEvent.TYPE, windowActionHandler);
        eventBus.addHandler(ResourceNodeDeletedEvent.getType(), new ResourceNodeDeletedEvent.ResourceNodeDeletedHandler() {
            @Override
            public void onResourceEvent(ResourceNodeDeletedEvent event) {
                ResourceBasedNode node = event.getNode();
                if (node instanceof FileReferenceNode) {
                    for (EditorPartPresenter editor : openedEditors) {
                        VirtualFile deletedVFile = (VirtualFile)node;
                        if (deletedVFile.getPath().equals(editor.getEditorInput().getFile().getPath())) {
                            eventBus.fireEvent(new FileEvent(editor.getEditorInput().getFile(), CLOSE));
                        }
                    }
                } else if (node instanceof FolderReferenceNode) {
                    for (EditorPartPresenter editor : openedEditors) {
                        if (editor.getEditorInput().getFile().getPath().startsWith(((FolderReferenceNode)node).getStorablePath())) {
                            eventBus.fireEvent(new FileEvent(editor.getEditorInput().getFile(), CLOSE));
                        }
                    }
                } else if (node instanceof ModuleNode) {
                    for (EditorPartPresenter editor : openedEditors) {
                        VirtualFile virtualFile = editor.getEditorInput().getFile();
                        if (moduleHasFile(node.getProjectConfig(), virtualFile)) {
                            eventBus.fireEvent(new FileEvent(virtualFile, CLOSE));
                        }
                        if (node.getParent() == null || !(node.getParent() instanceof HasStorablePath)) {
                            return;
                        }

                        String parentPath = ((HasStorablePath)node.getParent()).getStorablePath();
                        String openFileName = virtualFile.getName();
                        String openFilePath = virtualFile.getPath();
                        if (openFilePath.contains(parentPath) && openFileName.equals("modules")) {
                            eventBus.fireEvent(new FileContentUpdateEvent(openFilePath));
                        }
                    }
                }
            }
        });
        eventBus.addHandler(DeleteProjectEvent.TYPE, new DeleteProjectHandler() {
            @Override
            public void onProjectDeleted(DeleteProjectEvent event) {
                ProjectConfigDto configDto = event.getProjectConfig();
                for (EditorPartPresenter editor : openedEditors) {
                    VirtualFile virtualFile = editor.getEditorInput().getFile();
                    if (moduleHasFile(configDto, virtualFile)) {
                        eventBus.fireEvent(new FileEvent(virtualFile, CLOSE));
                    }
                }
            }
        });
        eventBus.addHandler(ResourceNodeRenamedEvent.getType(), new ResourceNodeRenamedEvent.ResourceNodeRenamedHandler() {
            @Override
            public void onResourceRenamedEvent(ResourceNodeRenamedEvent event) {
                ResourceBasedNode<?> resourceBaseNode = event.getNode();

                if (resourceBaseNode instanceof FolderReferenceNode || resourceBaseNode instanceof ModuleNode) {
                    HasStorablePath renamedTargetStoragePath = ((HasStorablePath)resourceBaseNode);
                    final String oldTargetPath = renamedTargetStoragePath.getStorablePath();
                    final String newTargetPath;
                    if (resourceBaseNode instanceof FolderReferenceNode) {
                        newTargetPath = ((ItemReference)event.getNewDataObject()).getPath();
                    } else {
                        newTargetPath = ((ProjectConfigDto)event.getNewDataObject()).getPath();
                    }
                    final Unmarshallable<ItemReference> unmarshaller = unmarshallerFactory.newUnmarshaller(ItemReference.class);
                    updateEditorPartsAfterRename(new LinkedList<>(openedEditors),
                                                 oldTargetPath,
                                                 newTargetPath,
                                                 unmarshaller);
                }
            }
        });

        eventBus.addHandler(WsAgentStateEvent.TYPE, new WsAgentStateHandler() {
            @Override
            public void onWsAgentStarted(WsAgentStateEvent event) {
                //to do nothing
            }

            @Override
            public void onWsAgentStopped(WsAgentStateEvent event) {
                List<VirtualFile> filesToClose = new ArrayList<>();
                for (EditorPartPresenter editor : openedEditors) {
                    filesToClose.add(editor.getEditorInput().getFile());
                }

                for (VirtualFile virtualFile : filesToClose) {
                    eventBus.fireEvent(new FileEvent(virtualFile, FileEvent.FileOperation.CLOSE));
                }
            }
        });
    }

