    /**
     * Gets {@link Promise} of workspace according to {@code factory} {@link org.eclipse.che.api.factory.shared.dto.Policies}.
     * <p/>
     * <p>Return policy for workspace:
     * <p><i>perClick</i> - every click from any user always creates a new workspace every time and if policy is not specified<br/>
     * it will be used by default.
     * <p/>
     * <p><i>perUser</i> - create one workspace for a user, a 2nd click from same user reloads the same workspace.
     * <p/>
     * <p><i>perAccount</i> - only create workspace for all users. A 2nd click from any user reloads the same workspace<br/>
     * Note that if location = owner, then only 1 workspace ever is created. If location = acceptor<br/>
     * it's one workspace for each unique user.
     */
    private Promise<UsersWorkspaceDto> getWorkspaceToStart() {
        final WorkspaceConfigDto workspaceConfigDto = factory.getWorkspace();
        final String policy = factory.getPolicies() == null ? "perClick" : factory.getPolicies().getCreate();
        switch (policy) {
            case "perUser":
                return getWorkspaceByConditionOrCreateNew(workspaceConfigDto, new Function<UsersWorkspaceDto, Boolean>() {
                    @Override
                    public Boolean apply(UsersWorkspaceDto existWs) throws FunctionException {
                        return factory.getId().equals(existWs.getAttributes().get(FACTORY_ID_ATTRIBUTE));
                    }
                });
            case "perAccount":
                return getWorkspaceByConditionOrCreateNew(workspaceConfigDto, new Function<UsersWorkspaceDto, Boolean>() {
                    @Override
                    public Boolean apply(UsersWorkspaceDto arg) throws FunctionException {
                        //TODO rework it when account will be ready
                        return workspaceConfigDto.getName().equals(arg.getName());
                    }
                });
            case "perClick":
            default:
                return getWorkspaceByConditionOrCreateNew(workspaceConfigDto, new Function<UsersWorkspaceDto, Boolean>() {
                    @Override
                    public Boolean apply(UsersWorkspaceDto arg) throws FunctionException {
                        return false;
                    }
                });
        }
    }

