    /**
     * Shows special dialog window which allows set up workspace which will be created.
     *
     * @param callback
     *         callback which is necessary to notify that workspace component started or failed
     * @param workspaces
     *         list of existing workspaces
     */
    public void show(List<UsersWorkspaceDto> workspaces, final Callback<Component, Exception> callback) {
        this.callback = callback;

        workspacesNames.clear();

        for (UsersWorkspaceDto workspace : workspaces) {
            workspacesNames.add(workspace.getName());
        }

        Promise<List<RecipeDescriptor>> recipes = recipeService.getRecipes(SKIP_COUNT, MAX_COUNT);

        recipes.then(new Operation<List<RecipeDescriptor>>() {
            @Override
            public void apply(List<RecipeDescriptor> recipeDescriptors) throws OperationException {
                CreateWorkspacePresenter.this.recipes = recipeDescriptors;
            }
        });

        String workspaceName = browserQueryFieldRenderer.getWorkspaceName();

        view.setWorkspaceName(workspaceName);

        validateCreateWorkspaceForm();

        view.show();
    }

