    /**
     * Debugger has connected to the JVM.
     * Method adds breakpoints and marks them as active.
     */
    private void onDebuggerConnected(Debugger debugger) {
        for (Entry<String, List<Breakpoint>> entry : breakpoints.entrySet()) {
            final List<Breakpoint> breakpointsForPath = entry.getValue();

            for (int i = 0; i < breakpointsForPath.size(); i++) {
                final Breakpoint breakpoint = breakpointsForPath.get(i);
                final int breakpointNumber = i;

                debugger.addBreakpoint(breakpoint.getFile(), breakpoint.getLineNumber(), new AsyncCallback<Breakpoint>() {
                    @Override
                    public void onSuccess(final Breakpoint result) {
                        Breakpoint newActiveBreakpoint = new Breakpoint(breakpoint.getType(),
                                                                        breakpoint.getLineNumber(),
                                                                        breakpoint.getPath(),
                                                                        breakpoint.getFile(),
                                                                        breakpoint.getMessage(),
                                                                        true);
                        breakpointsForPath.set(breakpointNumber, newActiveBreakpoint);

                        BreakpointRenderer breakpointRenderer = getBreakpointRendererForFile(breakpoint.getFile());
                        if (breakpointRenderer != null) {
                            breakpointRenderer.setBreakpointActive(breakpoint.getLineNumber(), true);
                        }
                    }

                    @Override
                    public void onFailure(final Throwable exception) {
                    }
                });
            }
        }
    }

