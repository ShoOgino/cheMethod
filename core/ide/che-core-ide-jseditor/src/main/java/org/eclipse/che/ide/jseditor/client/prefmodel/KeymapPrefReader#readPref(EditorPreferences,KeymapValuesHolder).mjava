    /**
     * Reads the keymap preferences and fills the {@link KeymapValuesHolder} instance using an already known
     * {@link EditorPreferences} instance.
     * @param valuesHolder the object that keeps the values
     */
    public void readPref(final EditorPreferences editorPreferences,
                         final KeymapValuesHolder valuesHolder) {
        if (editorPreferences == null || editorPreferences.getKeymaps() == null) {
            return;
        }
        final JsMapFromStringToString keymaps = editorPreferences.getKeymaps();
        final JsArrayOfString entries = keymaps.keys();

        for (int i = 0; i < entries.length(); i++) {
            final String key = entries.get(i);
            final String value = keymaps.get(key);
            if (value == null) {
                continue;
            }

            EditorType editorType = null;
            Keymap keymap = null;
            
            editorType = EditorType.getInstance(key);
            keymap = Keymap.fromKey(value);

            if (editorType != null && keymap != null) {
                valuesHolder.setKeymap(editorType, keymap);
            }
        }
    }

