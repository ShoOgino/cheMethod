    /**
     * Reads the keymap preference for the given editor.
     *
     * @param preferencesManager
     *         the preferences manager
     * @param editorKey
     *         the editor key
     * @return the keymap in preference or null if none is set
     */
    public static String readPref(final PreferencesManager preferencesManager, final String editorKey) {
        final String keymapPrefAsJson = preferencesManager.getValue(KEYMAP_PREF_KEY);
        if (keymapPrefAsJson == null || keymapPrefAsJson.isEmpty()) {
            return null;
        }
        JSONValue propertyObject;
        try {
            final JSONValue parseResult = JSONParser.parseStrict(keymapPrefAsJson);
            propertyObject = parseResult.isObject().get(editorKey);
        } catch (final RuntimeException e) {
            Log.error(KeymapPrefReader.class, "Error during preference parsing.", e);
            return null;
        }
        if (propertyObject == null) {
            return null;
        }
        String propertyValue;
        try {
            propertyValue = propertyObject.isString().stringValue();
        } catch (final RuntimeException e) {
            Log.error(KeymapPrefReader.class, "Invalid value for keymap preference.", e);
            return null;
        }
        return propertyValue;
    }

