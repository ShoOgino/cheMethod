    /**
     * Registers events handlers.
     */
    private void registerEventHandlers(EventBus eventBus) {
        eventBus.addHandler(EditorOpenedEvent.TYPE, new EditorOpenedEventHandler() {
            @Override
            public void onEditorOpened(EditorOpenedEvent event) {
                onOpenEditor(event.getFile().getPath(), event.getEditor());
            }
        });

        eventBus.addHandler(DebuggerStateEvent.TYPE, new DebuggerStateEventHandler() {
            @Override
            public void onStateChanged(DebuggerStateEvent event) {
                BreakpointManagerImpl.this.debuggerState = event.getState();
                if (event.isConnectedState()) {
                    onDebuggerConnected(event.getDebugger());
                } else if (event.isDisconnectedState()) {
                    onDebuggerDisconnected();
                } else if (event.isInitializedState()) {
                    onDebugInitialized(event.getDebugger());
                }
            }
        });

        eventBus.addHandler(BreakpointStateEvent.TYPE, new BreakpointStateEventHandler() {
            @Override
            public void onStateChanged(BreakpointStateEvent event) {
                onBreakpointStateChanged(event.getState(), event.getFilePath(), event.getLineNumber());
            }
        });

        eventBus.addHandler(DeleteProjectEvent.TYPE, new DeleteProjectHandler() {
            @Override
            public void onProjectDeleted(DeleteProjectEvent event) {
                if (breakpoints.isEmpty()) {
                    return;
                }

                ProjectConfigDto config = event.getProjectConfig();
                String path = config.getPath() + "/";
                deleteBreakpoints(getBreakpointsForPath(path));
            }
        });

        eventBus.addHandler(ResourceNodeDeletedEvent.getType(), new ResourceNodeDeletedEvent.ResourceNodeDeletedHandler() {
            @Override
            public void onResourceEvent(ResourceNodeDeletedEvent event) {
                if (breakpoints.isEmpty()) {
                    return;
                }

                ResourceBasedNode node = event.getNode();
                if (node instanceof ItemReferenceBasedNode) {
                    String path = ((ItemReferenceBasedNode)node).getStorablePath();

                    if (node instanceof FolderReferenceNode) {
                        path += "/";
                        deleteBreakpoints(getBreakpointsForPath(path));

                    } else if (node instanceof FileReferenceNode) {
                        deleteBreakpoints(Collections.singleton(path));
                    }
                }
            }
        });

        eventBus.addHandler(ProjectExplorerLoadedEvent.getType(), new ProjectExplorerLoadedEvent.ProjectExplorerLoadedHandler() {
            @Override
            public void onProjectsLoaded(ProjectExplorerLoadedEvent event) {
                if (breakpoints.isEmpty()) {
                    return;
                }

                // remove breakpoints which refer to un-existed projects
                List<Node> projects = event.getNodes();
                Set<String> pathsToDelete = new HashSet<String>(breakpoints.keySet());

                for (String breakpointPath : breakpoints.keySet()) {
                    for (Node project : projects) {
                        String projectName = project.getName();
                        if (breakpointPath.startsWith("/" + projectName + "/")) {
                            pathsToDelete.remove(breakpointPath);
                            break;
                        }
                    }
                }

                deleteBreakpoints(pathsToDelete);
            }
        });
    }

