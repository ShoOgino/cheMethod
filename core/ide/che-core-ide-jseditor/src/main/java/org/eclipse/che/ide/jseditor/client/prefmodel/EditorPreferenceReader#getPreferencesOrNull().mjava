    /**
     * Retrieves the editor preference object as stored in the preference json string.
     * @return the preference object or null
     */
    private EditorPreferences getPreferencesOrNull() {
        final String prefAsJson = this.preferencesManager.getValue(PREFERENCE_PROPERTY);
        if (prefAsJson == null || prefAsJson.isEmpty()) {
            return null;
        }
        JSONValue propertyObject;
        try {
            final JSONValue parseResult = JSONParser.parseStrict(prefAsJson);
            propertyObject = parseResult.isObject();
        } catch (final RuntimeException e) {
            Log.error(KeymapPrefReader.class, "Error during preference parsing.", e);
            return null;
        }
        if (propertyObject == null) {
            return null;
        }
        JavaScriptObject propertyValue;
        try {
            propertyValue = propertyObject.isObject().getJavaScriptObject();
        } catch (final RuntimeException e) {
            Log.error(KeymapPrefReader.class, "Invalid value for editor preference.", e);
            return null;
        }
        return propertyValue.cast();
    }

