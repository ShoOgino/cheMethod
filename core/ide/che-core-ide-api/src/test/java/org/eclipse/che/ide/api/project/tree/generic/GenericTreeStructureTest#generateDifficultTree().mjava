    /*
    * This method generates difficult tree for testing
    *
    *  |- Spring
    *      |- src
    *          |- main
    *               |- java
    *                   |- com/codenvy/example          --> java package
    *                              |- controller
    *                                  |- MessageController.java
    *                                  |- RegistrationController.java
    *                              |- service
    *                                  |- ReadMe
    *                                  |- MessageService
    *                                  |- MessageServiceImpl
    *                                  |- RegistrationService.java
    *                   |- org/codenvy/example         --> java package
    *                                  |- createBd.sql
    *              |- webapp
    *                    |- WEB-INF
    *                          |- jsp
    *                              |- message.jsp
    *                              |- registration.jsp
    *                              |- some.html
    *                    |- spring-servlet.xml
    *                    |- web.xml
    *     |- pom.xml
    */
    private void generateDifficultTree() {
        when(projectNode.getId()).thenReturn(SPRING);
        when(srcNode.getId()).thenReturn(SRC);
        when(mainNode.getId()).thenReturn(MAIN);
        when(javaNode.getId()).thenReturn(JAVA);
        when(comCodenvyExampleNode.getId()).thenReturn(COM_CODENVY_EXAMPLE);
        when(controllerNode.getId()).thenReturn(CONTROLLER);
        when(messageControllerNode.getId()).thenReturn(MESSAGE_CONTROLLER);
        when(registrationControllerNode.getId()).thenReturn(REGISTRATION_CONTROLLER);
        when(serviceNode.getId()).thenReturn(SERVICE);
        when(readmeNode.getId()).thenReturn(README);
        when(messageServiceNode.getId()).thenReturn(MESSAGE_SERVICE);
        when(messageServiceImplNode.getId()).thenReturn(MESSAGE_SERVICE_IMPL);
        when(registrationServiceNode.getId()).thenReturn(REGISTRATION_SERVICE);
        when(orgCodenvyExampleNode.getId()).thenReturn(ORG_CODENVY_EXAMPLE);
        when(createBdSqlNode.getId()).thenReturn(CREATE_BD_SQL);
        when(webAppNode.getId()).thenReturn(WEB_APP);
        when(webInfNode.getId()).thenReturn(WEB_INF);
        when(jspNode.getId()).thenReturn(JSP);
        when(messageJspNode.getId()).thenReturn(MESSAGE_JSP);
        when(registrationJspNode.getId()).thenReturn(REGISTRATION_JSP);
        when(someHtmlNode.getId()).thenReturn(SOME_HTML);
        when(springServletXmlNode.getId()).thenReturn(SPRING_SERVLET_XML);
        when(webXmlNode.getId()).thenReturn(WEB_XML);
        when(pomXmlNode.getId()).thenReturn(POM_XML);

        when(projectNode.getChildren()).thenReturn(getListTreeNode(pomXmlNode, srcNode));
        when(srcNode.getChildren()).thenReturn(getListTreeNode(mainNode));
        when(mainNode.getChildren()).thenReturn(getListTreeNode(javaNode, webAppNode));
        when(javaNode.getChildren()).thenReturn(getListTreeNode(comCodenvyExampleNode, orgCodenvyExampleNode));
        when(comCodenvyExampleNode.getChildren()).thenReturn(getListTreeNode(controllerNode, serviceNode));
        when(controllerNode.getChildren()).thenReturn(getListTreeNode(messageControllerNode, registrationControllerNode));
        when(serviceNode.getChildren())
                .thenReturn(getListTreeNode(readmeNode, messageServiceNode, messageServiceImplNode, registrationServiceNode));
        when(orgCodenvyExampleNode.getChildren()).thenReturn(getListTreeNode(createBdSqlNode));
        when(webAppNode.getChildren()).thenReturn(getListTreeNode(webInfNode, webXmlNode, springServletXmlNode));
        when(webInfNode.getChildren()).thenReturn(getListTreeNode(jspNode));
        when(jspNode.getChildren()).thenReturn(getListTreeNode(messageJspNode, registrationJspNode, someHtmlNode));
    }

