    /**
     * This method checks unsorted map for actions, that depend
     * on action, received in parameter. If found ones, adds it
     *
     * @param unsortedMap
     *         - map with unsorted actions
     * @param action
     *         - action, that is a condition for actions in unsorted list
     * @param result
     *         - result list
     */
    private void checkUnsorted(Map<Action, Constraints> unsortedMap,
                               Action action,
                               List<Action> result) {
        Iterator<Map.Entry<Action, Constraints>> itr = unsortedMap.entrySet().iterator();
        while (itr.hasNext()) {
            Map.Entry<Action, Constraints> entry = itr.next();

            String actionId = actionManager.getId(action);

            Action relatedAction = entry.getKey();
            Constraints relatedConstraints = entry.getValue();

            // if dependant action constraints match depends on our action
            // add it to result and remove from unsorted list
            if (relatedConstraints.myRelativeToActionId.equals(actionId)) {
                if (relatedConstraints.myAnchor.equals(Anchor.BEFORE)) {
                    result.add(result.indexOf(action), relatedAction);
                } else if (relatedConstraints.myAnchor.equals(Anchor.AFTER)) {
                    result.add(result.indexOf(action) + 1, relatedAction);
                }
                itr.remove();
                // recursive call of this method, but now passing the 'relatedAction'
                // to find another actions, that related to 'relatedAction
                checkUnsorted(unsortedMap, relatedAction, result);
            }
        }
    }

