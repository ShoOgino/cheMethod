    /**
     * Removes all annotations from the model whose associated positions have been deleted. If requested inform all model listeners about
     * the change. If requested a new thread is created for the notification of the model listeners.
     *
     * @param fireModelChanged indicates whether to notify all model listeners
     */
    private void cleanup(final boolean fireModelChanged) {
        if (documentChanged) {
            documentChanged = false;

            final List<Annotation> deleted = new ArrayList<Annotation>();
            final Iterator<Annotation> e = getAnnotationIterator();
            while (e.hasNext()) {
                final Annotation annotation = e.next();
                final Position pos = annotations.get(annotation);
                if (pos == null || pos.isDeleted()) {
                    deleted.add(annotation);
                }
            }

            if (fireModelChanged) {
                removeAnnotations(deleted, false);
                if (modelEvent != null) {
                    Scheduler.get().scheduleDeferred(new ScheduledCommand() {

                        @Override
                        public void execute() {
                            fireModelChanged();
                        }
                    });
                }
            } else {
                removeAnnotations(deleted, fireModelChanged);
            }
        }
    }

