    private <P, R> JsonElement response(String endpointId,
                                       RequestHandler<P, R> handler,
                                       JsonObject params,
                                       Class<P> paramClass,
                                       Class<R> resultClass) {

        R result;

        if(paramClass != null) {
            final P param = DtoFactory.getInstance().createDtoFromJson(params.toString(), paramClass);
            result = handler.handleRequest(endpointId, param);
        } else {
            result = handler.handleRequest(endpointId);
        }

        LOG.debug("Dispatch response: " + result);

        if(result instanceof Void)
            return new JsonObject();
        else if(result instanceof String) {
            JsonObject response = new JsonObject();
            response.addProperty("text", (String)result);
            return response;
        } else if(result instanceof Collection) {   // list of DTO objects
            JsonArray valueArray = new JsonArray();
            ((Collection)result).stream().filter(r -> r instanceof JsonSerializable).forEach(r -> {
                String resultString = DtoFactory.getInstance().toJson(r);
                valueArray.add(new JsonParser().parse(resultString).getAsJsonObject());
            });
            return valueArray;
        }

        // DTO object otherwise
        final String resultString = DtoFactory.getInstance().toJson(result);
        return new JsonParser().parse(resultString).getAsJsonObject();
    }

