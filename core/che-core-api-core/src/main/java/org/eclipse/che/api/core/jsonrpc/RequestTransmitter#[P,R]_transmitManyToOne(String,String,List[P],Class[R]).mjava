    /**
     * Transmit a request with params as s list of objects and result as a single object
     *
     * @param endpointId
     *         endpoint to address a transmission
     * @param method
     *         method name to address a transmission
     * @param pValue
     *         params value
     * @param rClass
     *         result class
     * @param <P>
     *         params class
     * @param <R>
     *         result class
     *
     * @return
     */
    public <P, R> JsonRpcPromise<R> transmitManyToOne(String endpointId, String method, List<P> pValue, Class<R> rClass) {
        checkEndpointId(endpointId);
        checkMethodName(method);
        checkParamsValue(pValue);
        checkResultClass(rClass);

        LOG.debug("Initiating a transmission of a request: " +
                  "endpoint ID: {}, method: {}, params list item class: {}, params list value: {}, result object class: {}",
                  endpointId, method, pValue.iterator().next().getClass(), pValue, rClass);

        return transmitter.newRequest()
                          .endpointId(endpointId)
                          .methodName(method)
                          .paramsAsListOfDto(pValue)
                          .sendAndReceiveResultAsDto(rClass);
    }

