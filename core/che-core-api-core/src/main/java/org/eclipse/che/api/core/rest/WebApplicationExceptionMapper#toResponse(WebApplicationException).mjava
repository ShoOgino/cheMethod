  @Override
  public Response toResponse(WebApplicationException exception) {

    ServiceError error = newDto(ServiceError.class).withMessage(exception.getMessage());

    if (exception instanceof BadRequestException) {
      return Response.status(Response.Status.BAD_REQUEST)
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    } else if (exception instanceof ForbiddenException) {
      return Response.status(Response.Status.FORBIDDEN)
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    } else if (exception instanceof NotFoundException) {
      return Response.status(Response.Status.NOT_FOUND)
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    } else if (exception instanceof NotAuthorizedException) {
      return Response.status(Response.Status.UNAUTHORIZED)
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    } else if (exception instanceof NotAcceptableException) {
      return Response.status(Status.NOT_ACCEPTABLE)
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    } else if (exception instanceof NotAllowedException) {
      return Response.status(Status.METHOD_NOT_ALLOWED)
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    } else if (exception instanceof NotSupportedException) {
      return Response.status(Status.UNSUPPORTED_MEDIA_TYPE)
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    } else {
      return Response.serverError()
          .entity(DtoFactory.getInstance().toJson(error))
          .type(MediaType.APPLICATION_JSON)
          .build();
    }
  }

