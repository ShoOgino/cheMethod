    /**
     * Returns a stream which is based on lazy fetching paged iterator.
     *
     * @param supplier
     *         pages supplier
     * @param size
     *         how many items to retrieve per page
     * @param <E>
     *         the type of the element held by page
     * @param <X>
     *         exception thrown by supplier
     * @return stream of elements
     * @throws RuntimeException
     *         wraps any exception occurred during pages fetch
     */
    public static <E, X extends Exception> Stream<E> streamLazily(PageSupplier<E, X> supplier, int size) {
        return StreamSupport.stream(new PagedIterable<>(supplier, size).spliterator(), false);
    }

