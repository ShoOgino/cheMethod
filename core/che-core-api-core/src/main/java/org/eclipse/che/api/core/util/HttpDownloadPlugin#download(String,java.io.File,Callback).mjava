  @Override
  public void download(String downloadUrl, java.io.File downloadTo, Callback callback) {
    HttpURLConnection conn = null;
    try {
      conn = (HttpURLConnection) new URL(downloadUrl).openConnection();
      conn.setConnectTimeout(CONNECT_TIMEOUT);
      conn.setReadTimeout(READ_TIMEOUT);
      final int responseCode = conn.getResponseCode();
      if (responseCode != 200) {
        throw new IOException(
            String.format("Invalid response status %d from remote server. ", responseCode));
      }
      final String contentDisposition = conn.getHeaderField(HttpHeaders.CONTENT_DISPOSITION);
      String fileName = null;
      if (contentDisposition != null) {
        int fNameStart = contentDisposition.indexOf("filename=");
        if (fNameStart > 0) {
          int fNameEnd = contentDisposition.indexOf(';', fNameStart + 1);
          if (fNameEnd < 0) {
            fNameEnd = contentDisposition.length();
          }
          fileName = contentDisposition.substring(fNameStart, fNameEnd).split("=")[1];
          if (fileName.charAt(0) == '"' && fileName.charAt(fileName.length() - 1) == '"') {
            fileName = fileName.substring(1, fileName.length() - 1);
          }
        }
      }
      final java.io.File downloadFile =
          new java.io.File(
              downloadTo,
              fileName == null ? NameGenerator.generate("downloaded.file", 4) : fileName);
      try (InputStream in = conn.getInputStream()) {
        Files.copy(in, downloadFile.toPath());
      }
      callback.done(downloadFile);
    } catch (IOException e) {
      LOG.debug(String.format("Failed access: %s, error: %s", downloadUrl, e.getMessage()), e);
      callback.error(e);
    } finally {
      if (conn != null) {
        conn.disconnect();
      }
    }
  }

