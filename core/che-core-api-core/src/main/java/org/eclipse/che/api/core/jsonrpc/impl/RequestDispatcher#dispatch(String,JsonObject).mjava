    /**
     * Dispatches json rpc request received from endpoint identified by a high
     * level identifier and represented as a json object.
     *
     * @param endpointId
     *         high level endpoint identifier
     * @param incomingJson
     *         json object
     */
    public void dispatch(String endpointId, JsonObject incomingJson) {
        LOG.debug("Dispatching incoming request from: " + endpointId + ", json: " + incomingJson);

        final String id = incomingJson.get("id").getAsString();
        LOG.debug("Extracted request id: " + id);

        final String method = incomingJson.get("method").getAsString();
        LOG.debug("Extracted request method: " + method);

        final RequestHandler handler = handlers.get(method);
        if(handler == null) {
            LOG.error("Handler not found: " + method);
            // TODO make a centralized standard errors structure
            transmitter.transmit(endpointId, error(-32601, "Method not found: " + method));
            return;
        }

        final Class resultClass = handler.getResultClass();
        LOG.debug("Extracted request result class: " + resultClass);


        JsonElement result;
        if (incomingJson.has("params")) {
            final JsonObject params = incomingJson.get("params").getAsJsonObject();
            LOG.debug("Request is parametrized, processing parameters: " + params);

            final Class paramsClass = handler.getParamsClass();
            LOG.debug("Extracted request params class: " + paramsClass);
            result = response(endpointId, handler, params, paramsClass, resultClass);
        } else {
            LOG.debug("Request is not parametrized.");
            result = response(endpointId, handler, null, null, resultClass);
        }

        final JsonElement response = prepareResponse(id, result);
        LOG.debug("Generated response: " + response);

        transmitter.transmit(endpointId, response.toString());
    }

