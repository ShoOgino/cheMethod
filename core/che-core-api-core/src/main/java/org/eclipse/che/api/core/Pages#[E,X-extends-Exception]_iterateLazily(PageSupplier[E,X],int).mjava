    /**
     * Returns an iterable which iterator lazily fetches page by page,
     * doesn't poll the next page until the last item from previous page is not processed.
     * The first page is polled while iterable is created.
     *
     * @param supplier
     *         pages supplier
     * @param size
     *         how many items to retrieve per page
     * @param <E>
     *         the type of the element held by page
     * @param <X>
     *         the type of exception thrown by page supplier
     * @return stream of elements
     * @throws RuntimeException
     *         wraps any exception occurred during pages fetch
     */
    public static <E, X extends Exception> Iterable<E> iterateLazily(PageSupplier<E, X> supplier, int size) {
        return new PagedIterable<>(supplier, size);
    }

