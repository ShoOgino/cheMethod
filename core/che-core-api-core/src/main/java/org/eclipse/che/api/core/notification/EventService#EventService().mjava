  @SuppressWarnings("unchecked")
  public EventService() {
    subscribersByEventType = new ConcurrentHashMap<>();
    typeCache = new LoadingCache[CACHE_NUM];
    for (int i = 0; i < CACHE_NUM; i++) {
      typeCache[i] =
          CacheBuilder.newBuilder()
              .concurrencyLevel(SEG_SIZE)
              .build(
                  new CacheLoader<Class<?>, Set<Class<?>>>() {
                    @Override
                    public Set<Class<?>> load(Class<?> eventClass) {
                      LinkedList<Class<?>> parents = new LinkedList<>();
                      Set<Class<?>> classes = new HashSet<>();
                      parents.add(eventClass);
                      while (!parents.isEmpty()) {
                        Class<?> clazz = parents.pop();
                        classes.add(clazz);
                        Class<?> parent = clazz.getSuperclass();
                        if (parent != null) {
                          parents.add(parent);
                        }
                        Class<?>[] interfaces = clazz.getInterfaces();
                        if (interfaces.length > 0) {
                          Collections.addAll(parents, interfaces);
                        }
                      }
                      return classes;
                    }
                  });
    }
  }

