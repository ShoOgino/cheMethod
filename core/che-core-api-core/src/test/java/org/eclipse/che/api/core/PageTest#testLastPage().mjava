    @Test
    public void testLastPage() throws Exception {
        // item1.                   <- first page start
        // item2.
        // item3.                   <- first page end
        // item4.                   <- prev page start
        // item5.
        // item6.                   <- prev page end
        // item7. <- page start
        // item8. <- page end
        final Page<String> page = new Page<>(asList("item7", "item8"), 6, 3, 8);

        assertFalse(page.isEmpty(), "page is empty");
        assertEquals(page.getItemsCount(), 2, "items count");
        assertEquals(page.getSize(), 3, "page size");
        assertEquals(page.getTotalItemsCount(), 8, "total items");

        final Page.PageRef firstRef = page.getFirstPageRef();
        assertEquals(firstRef.getPageSize(), 3, "first page size");
        assertEquals(firstRef.getItemsBefore(), 0, "first page skip items");

        final Page.PageRef lastRef = page.getLastPageRef();
        assertEquals(lastRef.getPageSize(), 3, "last page size");
        assertEquals(lastRef.getItemsBefore(), 6, "last page skip items");

        assertEquals(page.getNumber(), 3, "page number");

        assertTrue(page.hasPreviousPage(), "has previous page");
        final Page.PageRef prevRef = page.getPreviousPageRef();
        assertEquals(prevRef.getPageSize(), 3, "prev page size");
        assertEquals(prevRef.getItemsBefore(), 3, "prev page skip items");

        assertFalse(page.hasNextPage(), "has next page");

        assertEquals(page.getItems(), asList("item7", "item8"));
    }

