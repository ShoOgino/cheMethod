    @Test
    public void testFirstPage() throws Exception {
        // item1. <- page start
        // item2.
        // item3.
        // item4.
        // item5. <- page end
        // item6.                           <- last page start
        // item7.                           <- last page end
        final Page<String> page = new Page<>(asList("item1", "item2", "item3", "item4", "item5"), 0, 5, 7);


        assertFalse(page.isEmpty(), "page is empty");
        assertEquals(page.getItemsCount(), 5, "items items count");
        assertEquals(page.getSize(), 5, "page size");
        assertEquals(page.getTotalItemsCount(), 7, "total items");

        final Page.PageRef firstRef = page.getFirstPageRef();
        assertEquals(firstRef.getPageSize(), 5, "first page size");
        assertEquals(firstRef.getItemsBefore(), 0, "first page skip items");

        final Page.PageRef lastRef = page.getLastPageRef();
        assertEquals(lastRef.getPageSize(), 5, "last page size");
        assertEquals(lastRef.getItemsBefore(), 5, "last page skip items");

        assertEquals(page.getNumber(), 1, "page number");

        assertFalse(page.hasPreviousPage(), "has previous page");
        assertFalse(page.getPreviousPageRef().isPresent(), "page has previous page ref");

        assertTrue(page.hasNextPage(), "page has next page");
        assertTrue(page.getNextPageRef().isPresent(), "page has next page ref");
        final Page.PageRef nextRef = page.getNextPageRef().get();
        assertEquals(nextRef.getPageSize(), 5, "next page size");
        assertEquals(nextRef.getItemsBefore(), 5, "next page skip items");

        assertEquals(page.getItems(), asList("item1", "item2", "item3", "item4", "item5"));
    }

