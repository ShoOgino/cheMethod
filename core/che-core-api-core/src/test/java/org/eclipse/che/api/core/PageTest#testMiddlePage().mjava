  @Test
  public void testMiddlePage() throws Exception {
    //        item1.                      <- previous page start      <- first page start
    //        item2.
    //        item3.                      <- previous page end        <- first page end
    //        item4. <- page start
    //        item5.
    //        item6. <- page end
    //        item7.                      <- next page start
    //        item8.
    //        item9.                      <- next page end
    //        item.10                                                 <- last page start/end
    final Page<String> page = new Page<>(asList("item4", "item5", "item6"), 3, 3, 10);

    assertFalse(page.isEmpty(), "non-empty page");
    assertEquals(page.getItemsCount(), 3, "items size");
    assertEquals(page.getSize(), 3, "page size");
    assertEquals(page.getTotalItemsCount(), 10, "total elements count");

    final Page.PageRef firstRef = page.getFirstPageRef();
    assertEquals(firstRef.getPageSize(), 3, "first page size");
    assertEquals(firstRef.getItemsBefore(), 0, "first page skip items");

    final Page.PageRef lastRef = page.getLastPageRef();
    assertEquals(lastRef.getPageSize(), 3, "last page size");
    assertEquals(lastRef.getItemsBefore(), 9, "last page skip items");

    assertEquals(page.getNumber(), 2, "page number");

    assertTrue(page.hasPreviousPage(), "has previous page");
    final Page.PageRef prevRef = page.getPreviousPageRef();
    assertEquals(prevRef.getItemsBefore(), 0, "items before prev page");
    assertEquals(prevRef.getPageSize(), 3, "prev page size");

    assertTrue(page.hasNextPage(), "page has next page");
    final Page.PageRef nextRef = page.getNextPageRef();
    assertEquals(nextRef.getItemsBefore(), 6, "items before next page");
    assertEquals(nextRef.getPageSize(), 3, "next page size");

    assertEquals(page.getItems(), asList("item4", "item5", "item6"));
    assertEquals(page.getItems(i -> i.substring(4)), asList("4", "5", "6"));
    assertEquals(
        new ArrayList<>(page.fill(new TreeSet<>(reverseOrder()))),
        asList("item6", "item5", "item4"));
  }

