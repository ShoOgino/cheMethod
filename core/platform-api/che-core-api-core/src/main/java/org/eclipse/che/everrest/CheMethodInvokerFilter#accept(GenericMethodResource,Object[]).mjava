    @Override
    public void accept(GenericMethodResource genericMethodResource, Object[] arguments) throws WebApplicationException {
        try {
            filter(genericMethodResource, arguments);
        } catch (ApiException exception) {
            Response response;
            if (exception instanceof ForbiddenException) {
                response = Response.status(Response.Status.FORBIDDEN)
                                   .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                                   .type(MediaType.APPLICATION_JSON)
                                   .build();
            } else if (exception instanceof NotFoundException)
                response = Response.status(Response.Status.NOT_FOUND)
                                   .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                                   .type(MediaType.APPLICATION_JSON)
                                   .build();
            else if (exception instanceof UnauthorizedException)
                response = Response.status(Response.Status.UNAUTHORIZED)
                                   .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                                   .type(MediaType.APPLICATION_JSON)
                                   .build();
            else if (exception instanceof BadRequestException)
                response = Response.status(Response.Status.BAD_REQUEST)
                                   .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                                   .type(MediaType.APPLICATION_JSON)
                                   .build();
            else if (exception instanceof ConflictException)
                response = Response.status(Response.Status.CONFLICT)
                                   .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                                   .type(MediaType.APPLICATION_JSON)
                                   .build();
            else if (exception instanceof ServerException)
                response = Response.serverError()
                                   .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                                   .type(MediaType.APPLICATION_JSON)
                                   .build();
            else
                response = Response.serverError()
                                   .entity(DtoFactory.getInstance().toJson(exception.getServiceError()))
                                   .type(MediaType.APPLICATION_JSON)
                                   .build();

            throw new WebApplicationException(response);
        }
    }

