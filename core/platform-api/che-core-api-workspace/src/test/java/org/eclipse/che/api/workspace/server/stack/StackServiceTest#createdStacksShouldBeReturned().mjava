    /** Get stacks by creator */

    @Test
    public void createdStacksShouldBeReturned() throws ServerException {
        when(stackDao.getByCreator(USER_ID, 0, 1)).thenReturn(Collections.singletonList(stackImpl));

        Response response = given().auth()
                                   .basic(ADMIN_USER_NAME, ADMIN_USER_PASSWORD)
                                   .when()
                                   .get(SECURE_PATH + "/stack?skipCount=0&maxItems=1");

        assertEquals(response.getStatusCode(), 200);
        StackDto result = DtoFactory.getInstance()
                                    .createListDtoFromJson(response.body().print(), StackDto.class)
                                    .get(0);

        assertEquals(result.getId(), stackImpl.getId());
        assertEquals(result.getName(), stackImpl.getName());
        assertEquals(result.getDescription(), stackImpl.getDescription());
        assertEquals(result.getScope(), stackImpl.getScope());
        assertEquals(result.getTags().get(0), stackImpl.getTags().get(0));
        assertEquals(result.getTags().get(1), stackImpl.getTags().get(1));
        assertEquals(result.getComponents().get(0).getName(), stackImpl.getComponents().get(0).getName());
        assertEquals(result.getComponents().get(0).getVersion(), stackImpl.getComponents().get(0).getVersion());
        assertEquals(result.getSource().getType(), stackImpl.getSource().getType());
        assertEquals(result.getSource().getOrigin(), stackImpl.getSource().getOrigin());
        assertEquals(result.getCreator(), stackImpl.getCreator());
        verify(stackDao).getByCreator(USER_ID, 0, 1);
    }

