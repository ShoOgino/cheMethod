    @Test
    public void dtoShouldBeSerialized() {
        StackDto stackDtoDescriptor = newDto(StackDto.class).withName("nameWorkspaceConfig");
        StackComponentDto stackComponentDto = newDto(StackComponentDto.class)
                                                        .withName("java")
                                                        .withVersion("1.8");
        stackDtoDescriptor.setComponents(Collections.singletonList(stackComponentDto));
        stackDtoDescriptor.setTags(Arrays.asList("some teg1", "some teg2"));
        stackDtoDescriptor.setDescription("description");
        stackDtoDescriptor.setId("someId");
        stackDtoDescriptor.setScope("scope");
        stackDtoDescriptor.setCreator("Created in Codenvy");

        Map<String, String> attributes = new HashMap<>();
        attributes.put("attribute1", "valute attribute1");
        Link link = newDto(Link.class).withHref("some url")
                                      .withMethod("get")
                                      .withRel("someRel")
                                      .withConsumes("consumes")
                                      .withProduces("produces");


        HashMap<String, List<String>> projectMap = new HashMap<>();
        projectMap.put("test", Arrays.asList("test", "test2"));

        ProjectProblemDto projectProblem = newDto(ProjectProblemDto.class).withCode(100).withMessage("message");
        SourceStorageDto sourceStorageDto = newDto(SourceStorageDto.class).withType("some type")
                                                                          .withParameters(attributes)
                                                                          .withLocation("location");

        ProjectConfigDto moduleConfigDto = newDto(ProjectConfigDto.class).withName("module")
                                                                          .withPath("somePath")
                                                                          .withAttributes(projectMap)
                                                                          .withType("maven type")
                                                                          .withContentRoot("contentRoot")
                                                                          .withDescription("some project description")
                                                                          .withLinks(Collections.singletonList(link))
                                                                          .withMixins(Collections.singletonList("mixin time"))
                                                                          .withProblems(Collections.singletonList(projectProblem))
                                                                          .withSource(sourceStorageDto);

        ProjectConfigDto projectConfigDto = newDto(ProjectConfigDto.class).withName("project")
                                                                          .withPath("somePath")
                                                                          .withAttributes(projectMap)
                                                                          .withType("maven type")
                                                                          .withContentRoot("contentRoot")
                                                                          .withDescription("some project description")
                                                                          .withLinks(Collections.singletonList(link))
                                                                          .withMixins(Collections.singletonList("mixin time"))
                                                                          .withProblems(Collections.singletonList(projectProblem))
                                                                          .withSource(sourceStorageDto)
                                                                          .withModules(Collections.singletonList(moduleConfigDto));


        RecipeDto recipeDto = newDto(RecipeDto.class).withType("type").withScript("script");

        LimitsDto limitsDto = newDto(LimitsDto.class).withRam(100);

        MachineSourceDto machineSourceDto = newDto(MachineSourceDto.class).withLocation("location").withType("type");

        MachineConfigDto machineConfig =
                newDto(MachineConfigDto.class).withDev(true)
                                              .withName("machine config name")
                                              .withType("type")
                                              .withLimits(limitsDto)
                                              .withSource(machineSourceDto)
                                              .withServers(Arrays.asList(newDto(ServerConfDto.class).withRef("ref1")
                                                                                                    .withPort("8080")
                                                                                                    .withProtocol("https"),
                                                                         newDto(ServerConfDto.class).withRef("ref2")
                                                                                                    .withPort("9090/udp")
                                                                                                    .withProtocol("someprotocol")));

        EnvironmentDto environmentDto = newDto(EnvironmentDto.class).withName("name")
                                                                    .withRecipe(recipeDto)
                                                                    .withMachineConfigs(Collections.singletonList(machineConfig));

        CommandDto commandDto = newDto(CommandDto.class).withType("command type")
                                                        .withName("command name")
                                                        .withCommandLine("command line");

        WorkspaceConfigDto workspaceConfigDto = newDto(WorkspaceConfigDto.class).withName("SomeWorkspaceConfig")
                                                                                .withAttributes(attributes)
                                                                                .withDescription("some workspace")
                                                                                .withLinks(Collections.singletonList(link))
                                                                                .withDefaultEnv("some Default Env name")
                                                                                .withProjects(Collections.singletonList(projectConfigDto))
                                                                                .withEnvironments(Collections.singletonList(environmentDto))
                                                                                .withCommands(Collections.singletonList(commandDto));

        stackDtoDescriptor.setWorkspaceConfig(workspaceConfigDto);
        Gson GSON = new GsonBuilder().registerTypeAdapter(StackComponent.class, new StackComponentAdapter())
                                     .registerTypeAdapter(WorkspaceConfig.class, new WorkspaceConfigAdapter())
                                     .registerTypeAdapter(ProjectConfig.class, new ProjectConfigAdapter())
                                     .registerTypeAdapter(Environment.class, new EnvironmentAdapter())
                                     .registerTypeAdapter(Command.class, new CommandAdapter())
                                     .registerTypeAdapter(Recipe.class, new RecipeTypeAdapter())
                                     .registerTypeAdapter(Limits.class, new LimitsAdapter())
                                     .registerTypeAdapter(MachineSource.class, new MachineSourceAdapter())
                                     .registerTypeAdapter(MachineConfig.class, new MachineConfigAdapter())
                                     .registerTypeAdapter(StackSource.class, new StackSourceAdapter())
                                     .create();

        GSON.fromJson(stackDtoDescriptor.toString(), StackImpl.class);
    }

