    /**
     * Starts all environment machines, starting from dev machine.
     */
    private void startEnvironment(Environment environment, String workspaceId, boolean recover) throws BadRequestException,
                                                                                                       ServerException,
                                                                                                       NotFoundException,
                                                                                                       ConflictException {
        final List<? extends MachineConfig> machineConfigs = new ArrayList<>(environment.getMachineConfigs());
        final MachineConfig devCfg = findDev(machineConfigs);

        // Starting workspace dev machine
        final MachineImpl devMachine;
        try {
            devMachine = createMachine(devCfg, workspaceId, environment.getName(), recover);
        } catch (MachineException | BadRequestException | NotFoundException | SnapshotException | ConflictException ex) {
            doRemoveWorkspace(workspaceId);
            throw ex;
        }

        // Try to add dev-machine to the list of runtime workspace machines.
        // If runtime workspace doesn't exist it means only that
        // 'stopRegistry' was performed and workspace was removed by 'stopRegistry',
        // in that case dev-machine must not be destroyed(MachineManager is responsible for it)
        // and another machines must not be started.
        lock.writeLock().lock();
        try {
            if (!addRunningMachine(devMachine)) {
                // Dev machine was started but workspace doesn't exist
                // it means that registry was stopped, dev-machine must not be
                // destroyed in this place as MachineManager#cleanup() does it
                throw new ServerException("Workspace '" + workspaceId + "' had been stopped before its dev-machine was started");
            }
            idToWorkspaces.get(workspaceId).setStatus(RUNNING);
        } finally {
            lock.writeLock().unlock();
        }

        // Try to start all the other machines different from the dev one.
        machineConfigs.remove(devCfg);
        for (MachineConfig nonDevCfg : machineConfigs) {
            try {
                final MachineImpl nonDevMachine = createMachine(nonDevCfg, workspaceId, environment.getName(), recover);
                if (!addRunningMachine(nonDevMachine)) {
                    // Non dev machine was started but workspace doesn't exist
                    // it means that either registry was stopped or runtime workspace
                    // was stopped by client. In the case when it was stopped by
                    // client we should destroy newly started non-dev machine
                    // as it wasn't destroyed by 'stop' method. When 'stopRegistry' was performed we
                    // must not destroy machine as MachineManager is responsible for it.
                    if (!isStopped) {
                        machineManager.destroy(nonDevMachine.getId(), false);
                    }
                    throw new ServerException("Workspace '" + workspaceId + "' had been stopped before all its machines were started");
                }
            } catch (MachineException | BadRequestException | NotFoundException | SnapshotException | ConflictException ex) {
                LOG.error(format("Error while creating machine '%s' in workspace '%s', environment '%s'",
                                 nonDevCfg.getName(),
                                 workspaceId,
                                 environment.getName()),
                          ex);
            }
        }
    }

