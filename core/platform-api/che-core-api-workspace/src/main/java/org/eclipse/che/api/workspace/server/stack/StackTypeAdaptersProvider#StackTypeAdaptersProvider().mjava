    @Inject
    public StackTypeAdaptersProvider() {
        adapters = new HashMap<>();
        adapters.put(StackComponent.class, new StackComponentAdapter());
        adapters.put(WorkspaceConfig.class, new WorkspaceConfigAdapter());
        adapters.put(ProjectConfig.class, new ProjectConfigAdapter());
        adapters.put(EnvironmentState.class, new EnvironmentStateAdapter());
        adapters.put(Command.class, new CommandAdapter());
        adapters.put(Recipe.class, new RecipeTypeAdapter());
        adapters.put(Limits.class, new LimitsAdapter());
        adapters.put(MachineSource.class, new MachineSourceAdapter());
        adapters.put(MachineConfig.class, new MachineSourceAdapter());
        adapters.put(StackSource.class, new StackSourceAdapter());
        adapters.put(Permissions.class, new PermissionsAdapter());
        adapters.put(Group.class, new GroupAdapter());
        adapters.put(StackIcon.class, new StackIconAdapter());

        GsonBuilder gsonBuilder = new GsonBuilder();
        for (Map.Entry<Class<?>, Object> adapter : adapters.entrySet()) {
            gsonBuilder.registerTypeAdapter(adapter.getKey(), adapter.getValue());
        }
        gson = gsonBuilder.setPrettyPrinting().create();
    }

