    @SuppressWarnings("unchecked")
    private <T extends UsersWorkspaceDto> T injectLinks(T workspace) {
        final UriBuilder uriBuilder = getServiceContext().getServiceUriBuilder();
        final List<Link> links = new ArrayList<>(6);
        links.add(createLink("POST",
                             uriBuilder.clone()
                                       .path(getClass(), "startById")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             LINK_REL_START_WORKSPACE));
        links.add(createLink("DELETE",
                             uriBuilder.clone()
                                       .path(getClass(), "delete")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             LINK_REL_REMOVE_WORKSPACE));
        links.add(createLink("GET",
                             uriBuilder.clone()
                                       .path(getClass(), "getWorkspaces")
                                       .build()
                                       .toString(),
                             APPLICATION_JSON,
                             GET_ALL_USER_WORKSPACES));
        links.add(createLink("GET",
                             uriBuilder.clone()
                                       .path(getClass(), "getSnapshot")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             "get workspace's snapshot"));

        //TODO here we add url to IDE with workspace name not good solution do it here but critical for this task  https://jira.codenvycorp.com/browse/IDEX-3619
        links.add(createLink("GET", uriBuilder.clone()
                                              .replacePath(ideContext)
                                              .path(workspace.getName())
                                              .build()
                                              .toString(),
                             TEXT_HTML,
                             "ide url"));
        if (RuntimeWorkspaceDto.class.isAssignableFrom(workspace.getClass())) {
            links.add(createLink("GET",
                                 uriBuilder.clone()
                                           .path(getClass(), "getRuntimeWorkspaceById")
                                           .build(workspace.getId())
                                           .toString(),
                                 APPLICATION_JSON,
                                 "self link"));
            RuntimeWorkspaceDto runtimeWorkspace = (RuntimeWorkspaceDto)workspace;
            runtimeWorkspace.getMachines()
                            .forEach(machineDto -> machineDto.withLinks(
                                    singletonList(createLink("GET",
                                                             getServiceContext().getBaseUriBuilder()
                                                                                .path("/machine/{id}")
                                                                                .build(machineDto.getId())
                                                                                .toString(),
                                                             APPLICATION_JSON,
                                                             "get machine"))));
        } else {
            links.add(createLink("GET",
                                 uriBuilder.clone()
                                           .path(getClass(), "getById")
                                           .build(workspace.getId())
                                           .toString(),
                                 APPLICATION_JSON,
                                 "self link"));
        }
        if (workspace.getStatus() == RUNNING) {
            links.add(createLink("GET",
                                 uriBuilder.clone()
                                           .path(getClass(), "getRuntimeWorkspaceById")
                                           .build(workspace.getId())
                                           .toString(),
                                 APPLICATION_JSON,
                                 LINK_REL_GET_RUNTIMEWORKSPACE));
            links.add(createLink("DELETE",
                                 uriBuilder.clone()
                                           .path(getClass(), "stop")
                                           .build(workspace.getId())
                                           .toString(),
                                 Constants.STOP_WORKSPACE));
        }
        return (T)workspace.withLinks(links);
    }

