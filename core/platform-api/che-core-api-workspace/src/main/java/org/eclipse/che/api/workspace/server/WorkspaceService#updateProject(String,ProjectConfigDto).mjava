    @PUT
    @Path("/{id}/project")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Update the workspace project by replacing it with a new one",
                  notes = "This operation can be performed only by the workspace owner")
    @ApiResponses({@ApiResponse(code = 200, message = "The project successfully updated"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have access to update the project"),
                   @ApiResponse(code = 404, message = "The workspace or the project not found"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public UsersWorkspaceDto updateProject(@ApiParam("The workspace id")
                                           @PathParam("id")
                                           String id,
                                           @ApiParam(value = "The project update", required = true)
                                           ProjectConfigDto update) throws ServerException,
                                                                           BadRequestException,
                                                                           NotFoundException,
                                                                           ConflictException,
                                                                           ForbiddenException {
        requiredNotNull(update, "Project config");
        final UsersWorkspaceImpl workspace = workspaceManager.getWorkspace(id);
        ensureUserIsWorkspaceOwner(workspace);
        if (!workspace.getProjects().removeIf(project -> project.getName().equals(update.getName()))) {
            throw new NotFoundException("Workspace " + id + " doesn't contain project " + update.getName());
        }
        workspace.getProjects().add(new ProjectConfigImpl(update));
        return injectLinks(asDto(workspaceManager.updateWorkspace(id, workspace)));
    }

