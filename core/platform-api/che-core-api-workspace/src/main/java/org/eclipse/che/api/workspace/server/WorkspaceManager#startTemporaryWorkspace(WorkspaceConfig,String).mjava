    /**
     * Synchronously starts temporary workspace based on config and account.
     *
     * @param workspaceConfig
     *         workspace configuration
     * @param accountId
     *         account which should be used for this runtime workspace or null when
     *         it should be automatically detected
     * @return running workspace
     * @throws BadRequestException
     *         when {@code workspaceConfig} is null or not valid
     * @throws ForbiddenException
     *         when user doesn't have access to start workspace in certain account
     * @throws NotFoundException
     *         when {@link WorkspaceHooks#beforeCreate(UsersWorkspace, String)}
     *         or {@link WorkspaceHooks#beforeStart(UsersWorkspace, String, String)} throws this exception
     * @throws ServerException
     *         when any other error occurs during workspace start
     * @see WorkspaceHooks#beforeStart(UsersWorkspace, String, String)
     * @see WorkspaceHooks#beforeCreate(UsersWorkspace, String)
     * @see RuntimeWorkspaceRegistry#start(UsersWorkspace, String)
     */
    public RuntimeWorkspaceImpl startTemporaryWorkspace(WorkspaceConfig workspaceConfig, @Nullable String accountId) throws ServerException,
                                                                                                                            BadRequestException,
                                                                                                                            ForbiddenException,
                                                                                                                            NotFoundException,
                                                                                                                            ConflictException {
        final UsersWorkspaceImpl workspace = fromConfig(workspaceConfig, getCurrentUserId());
        workspace.setTemporary(true);
        // Temporary workspace is not persistent one, which means
        // that it is created when runtime workspace instance created(workspace started)
        hooks.beforeCreate(workspace, accountId);
        final RuntimeWorkspaceImpl runtime = performSyncStart(workspace, workspace.getConfig().getDefaultEnv(), false, accountId);
        hooks.afterCreate(runtime, accountId);

        // TODO move 'analytics' logs to the appropriate interceptors
        LOG.info("EVENT#workspace-created# WS#{}# WS-ID#{}# USER#{}# TEMP#true#",
                 runtime.getConfig().getName(),
                 runtime.getId(),
                 getCurrentUserId());
        return runtime;
    }

