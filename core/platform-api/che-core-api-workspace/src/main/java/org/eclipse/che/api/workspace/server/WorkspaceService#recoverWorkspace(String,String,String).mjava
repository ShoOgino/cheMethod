    @POST
    @Path("/{id}/runtime/snapshot")
    @Produces(APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Recover the workspace by the id from the snapshot",
                  notes = "This operation can be performed only by the workspace owner." +
                          "The workspace recovers asynchronously")
    @ApiResponses({@ApiResponse(code = 200, message = "The workspace is starting"),
                   @ApiResponse(code = 404, message = "The workspace with specified id doesn't exist." +
                                                      "The snapshot from this workspace doesn't exist"),
                   @ApiResponse(code = 403, message = "The user is not workspace owner. " +
                                                      "The operation is not allowed for the user"),
                   @ApiResponse(code = 409, message = "Any conflict occurs during the workspace start"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public UsersWorkspaceDto recoverWorkspace(@ApiParam("The workspace id")
                                              @PathParam("id")
                                              String workspaceId,
                                              @ApiParam("The name of the workspace environment to recover from")
                                              @QueryParam("environment")
                                              String envName,
                                              @ApiParam("The account id related to this operation")
                                              @QueryParam("accountId")
                                              String accountId) throws BadRequestException,
                                                                       ForbiddenException,
                                                                       NotFoundException,
                                                                       ServerException,
                                                                       ConflictException {
        ensureUserIsWorkspaceOwner(workspaceId);

        final Map<String, String> params = Maps.newHashMapWithExpectedSize(2);
        params.put("accountId", accountId);
        params.put("workspaceId", workspaceId);
        permissionManager.checkPermission(START_WORKSPACE, getCurrentUserId(), params);

        return injectLinks(asDto(workspaceManager.recoverWorkspace(workspaceId, envName, accountId)));
    }

