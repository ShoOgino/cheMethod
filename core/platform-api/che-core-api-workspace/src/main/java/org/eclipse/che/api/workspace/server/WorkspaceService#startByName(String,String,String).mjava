    @POST
    @Path("/name/{name}/runtime")
    @Produces(APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Start workspace by name",
                  notes = "This operation can be performed only by the authorized user." +
                          "The workspace starts asynchronously")
    @ApiResponses({@ApiResponse(code = 200, message = "The workspace is starting"),
                   @ApiResponse(code = 400, message = "The workspace name is not valid"),
                   @ApiResponse(code = 404, message = "The workspace with specified id doesn't exist"),
                   @ApiResponse(code = 403, message = "The user is not workspace owner." +
                                                      "The operation is not allowed for the user"),
                   @ApiResponse(code = 409, message = "Any conflict occurs during the workspace start"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public UsersWorkspaceDto startByName(@ApiParam("The name of the workspace to start")
                                         @PathParam("name")
                                         String name,
                                         @ApiParam("The name of the workspace environment that should be used for start")
                                         @QueryParam("environment")
                                         String envName,
                                         @ApiParam("The account id related to this operation")
                                         @QueryParam("accountId")
                                         String accountId) throws ServerException,
                                                                  BadRequestException,
                                                                  NotFoundException,
                                                                  ForbiddenException,
                                                                  ConflictException {
        final UsersWorkspace workspace = workspaceManager.getWorkspace(name, getCurrentUserId());
        ensureUserIsWorkspaceOwner(workspace);

        final Map<String, String> params = Maps.newHashMapWithExpectedSize(2);
        params.put("accountId", accountId);
        params.put("workspaceId", workspace.getId());
        permissionManager.checkPermission(START_WORKSPACE, getCurrentUserId(), params);

        return injectLinks(asDto(workspaceManager.startWorkspaceByName(name, getCurrentUserId(), envName, accountId)));
    }

