    /**
     * Stops running workspace.
     *
     * <p>Stops all {@link RuntimeWorkspace#getMachines() running machines} one by one,
     * non-dev machines first. During the workspace stopping the workspace
     * will still be accessible with {@link WorkspaceStatus#STOPPING stopping} status.
     * Workspace may be stopped only if its status is {@link WorkspaceStatus#RUNNING}.
     *
     * <p>Note that it doesn't provide any events for machines stop, Machine API is responsible for it.
     *
     * @param workspaceId
     *         identifier of workspace which should be stopped
     * @throws NotFoundException
     *         when workspace with specified identifier is not running
     * @throws ServerException
     *         when any error occurs during workspace stopping
     * @throws ConflictException
     *         when running workspace status is different from {@link WorkspaceStatus#RUNNING}
     * @see MachineManager#destroy(String, boolean)
     * @see WorkspaceStatus#STOPPING
     */
    public void stop(String workspaceId) throws NotFoundException, ServerException, ConflictException {
        checkRegistryIsNotStopped();
        lock.writeLock().lock();
        final RuntimeWorkspaceImpl workspace;
        try {
            checkRegistryIsNotStopped();
            workspace = idToWorkspaces.get(workspaceId);
            if (workspace == null) {
                throw new NotFoundException("Workspace with id " + workspaceId + " is not running.");
            }
            if (workspace.getStatus() != RUNNING) {
                throw new ConflictException(format("Couldn't stop '%s' workspace because its status is '%s'",
                                                   workspace.getName(),
                                                   workspace.getStatus()));
            }
            workspace.setStatus(STOPPING);
        } finally {
            lock.writeLock().unlock();
        }
        stopMachines(workspace);
    }

