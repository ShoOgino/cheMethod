    /**
     * Removes workspace with specified identifier.
     *
     * <p>Does not remove the workspace if it has the runtime, throws {@link ConflictException} in this case.
     * Doesn't throw any exception if workspace doesn't exist.
     *
     * @param workspaceId
     *         workspace id to remove workspace
     * @throws ConflictException
     *         when workspace has runtime
     * @throws ServerException
     *         when any server error occurs
     * @throws BadRequestException
     *         when {@code workspaceId} is null
     * @see WorkspaceHooks#afterRemove(String)
     */
    public void removeWorkspace(String workspaceId) throws ConflictException, ServerException, BadRequestException {
        requiredNotNull(workspaceId, "Required non-null workspace id");
        if (workspaceRegistry.hasRuntime(workspaceId)) {
            throw new ConflictException("The workspace " + workspaceId + " is currently running and cannot be removed.");
        }
        workspaceDao.remove(workspaceId);
        hooks.afterRemove(workspaceId);
        LOG.info("EVENT#workspace-remove# WS-ID#{}#", workspaceId);
    }

