    /**
     * Checks that workspace configuration is valid.
     *
     * <ul>Validation rules:
     * <li>Workspace name must not be null & must match {@link #WS_NAME} pattern</li>
     * <li>Workspace attributes keys must not start with 'codenvy' keyword and must not be empty</li>
     * <li>Workspace default environment name must not be empty or null</li>
     * <li>Workspace environment must contain default environment </li>
     * <li>Environment name must not be null</li>
     * <li>Each environment must contain at least 1 machine(which is dev), also it must contain exactly one dev machine</li>
     * <li>Each machine must contain its name and source</li>
     * <li>Each command name and command line must not be null</li>
     * </ul>
     */
    @Override
    public void validate(WorkspaceConfig config) throws BadRequestException {
        // configuration object itself
        checkNotNull(config.getName(), "Workspace name required");
        checkArgument(WS_NAME.matcher(config.getName()).matches(),
                      "Incorrect workspace name, it must be between 3 and 20 characters and may contain digits, " +
                      "latin letters, underscores, dots, dashes and should start and end only with digits, " +
                      "latin letters or underscores");

        //attributes
        for (String attributeName : config.getAttributes().keySet()) {
            //attribute name should not be empty and should not start with codenvy
            checkArgument(attributeName != null && !attributeName.trim().isEmpty() && !attributeName.toLowerCase().startsWith("codenvy"),
                          "Attribute name '%s' is not valid",
                          attributeName);
        }

        //environments
        checkArgument(!isNullOrEmpty(config.getDefaultEnv()), "Workspace default environment name required");
        checkArgument(config.getEnvironments()
                            .stream()
                            .anyMatch(env -> config.getDefaultEnv().equals(env.getName())),
                      "Workspace default environment configuration required");

        for (Environment environment : config.getEnvironments()) {
            validateEnv(environment, config.getName());
        }

        //commands
        for (Command command : config.getCommands()) {
            checkArgument(!isNullOrEmpty(command.getName()),
                          "Workspace %s contains command with null or empty name",
                          config.getName());
            checkArgument(!isNullOrEmpty(command.getCommandLine()),
                          "Command line required for command '%s' in workspace '%s'",
                          command.getName(),
                          config.getName());
        }

        //projects
        //TODO
    }

