    /**
     * Synchronously starts the given workspace in the given environment, doesn't perform any
     * checks or validations. Publishes {@link EventType#STARTING} event before start is performed,
     * {@link EventType#RUNNING} after workspace was successfully started and {@link EventType#ERROR}
     * if any error occurs during workspace start.
     */
    @VisibleForTesting
    RuntimeWorkspaceImpl performSyncStart(UsersWorkspaceImpl workspace,
                                          String envName,
                                          boolean recover,
                                          @Nullable String accountId) throws ForbiddenException,
                                                                             BadRequestException,
                                                                             ConflictException,
                                                                             NotFoundException,
                                                                             ServerException {
        hooks.beforeStart(workspace, envName, accountId);
        eventService.publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
                                       .withEventType(STARTING)
                                       .withWorkspaceId(workspace.getId()));
        final RuntimeWorkspaceImpl runtime;
        try {
            runtime = workspaceRegistry.start(workspace, envName, recover);
        } catch (ServerException | ConflictException | BadRequestException | NotFoundException ex) {
            eventService.publish(newDto(WorkspaceStatusEvent.class).withEventType(ERROR)
                                                                   .withWorkspaceId(workspace.getId())
                                                                   .withError(ex.getLocalizedMessage()));
            throw ex;
        }
        eventService.publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
                                       .withEventType(RUNNING)
                                       .withWorkspaceId(runtime.getId()));
        return runtime;
    }

