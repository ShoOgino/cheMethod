    /**
     * Starts all machines from specified workspace environment, creates runtime workspace for it.
     *
     * <p>Dev-machine always starts before the other machines. If dev-machine start failed
     * method throws appropriate {@link ServerException} and removes runtime workspace instance from the registry.
     * During the start the runtime workspace is visible with {@link WorkspaceStatus#STARTING} status.
     *
     * <p>Note that it doesn't provide any events for machines start, Machine API is responsible for it.
     *
     * @param usersWorkspace
     *         workspace which should be started
     * @param envName
     *         name of environment
     * @return runtime view of {@code usersWorkspace} with status {@link WorkspaceStatus#RUNNING}
     * @throws ConflictException
     *         when workspace is already running or any other conflict error occurs during environment start
     * @throws BadRequestException
     *         when active environment is in inconsistent state or {@code envName} is null
     * @throws NotFoundException
     *         whe any not found exception occurs during environment start
     * @throws ServerException
     *         when registry {@link #isStopped is stopped} other error occurs during environment start
     * @see MachineManager#createMachineSync(MachineConfig, String, String)
     * @see WorkspaceStatus#STARTING
     */
    public RuntimeWorkspaceImpl start(UsersWorkspace usersWorkspace, String envName) throws ConflictException,
                                                                                            ServerException,
                                                                                            BadRequestException,
                                                                                            NotFoundException {
        return start(usersWorkspace, envName, false);
    }

