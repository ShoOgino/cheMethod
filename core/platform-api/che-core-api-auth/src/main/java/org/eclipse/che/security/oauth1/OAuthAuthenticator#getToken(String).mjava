    /**
     * Return the authorization token fo the given user id.
     * <p/>
     * WARN!!!. DO not use it directly.
     *
     * @param userId
     *         the user id.
     * @return the user token.
     * @throws java.io.IOException
     *         if an IO exception occurs.
     * @see org.eclipse.che.api.auth.oauth.OAuthTokenProvider#getToken(String, String)
     */
    public OAuthCredentialsResponse getToken(final String userId) throws IOException {
        OAuthCredentialsResponse credentials = null;
        credentialsStoreLock.lock();
        try {

            credentials = credentialsStore.get(userId);

        } finally {
            credentialsStoreLock.unlock();
        }

        if (credentials != null) {
            // Need to check if token which stored is valid for requests, then if valid - we returns it to caller
            HttpURLConnection connection = null;
            try {

                connection = (HttpURLConnection)new URL(verifyAccessTokenUri).openConnection();
                connection.setInstanceFollowRedirects(false);

                final String token = credentials.token;
                final String tokenSecret = credentials.tokenSecret;
                final Map<String, String> requestParameters = emptyMap();

                connection.setRequestProperty(AUTHORIZATION,
                                              computeAuthorizationHeader(GET, verifyAccessTokenUri, requestParameters, token, tokenSecret));

                if (connection.getResponseCode() == 401) {
                    return null;
                }

            } finally {
                if (connection != null) {
                    connection.disconnect();
                }
            }
        }
        return credentials;
    }

