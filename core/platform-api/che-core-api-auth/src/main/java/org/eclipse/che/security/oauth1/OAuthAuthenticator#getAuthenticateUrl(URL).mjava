    /**
     * Create authentication URL.
     *
     * @param requestUrl
     *         URL of current HTTP request. This parameter required to be able determine URL for redirection after
     *         authentication. If URL contains query parameters they will be copy to 'state' parameter and returned to
     *         callback method.
     * @return URL for authentication.
     */
    public String getAuthenticateUrl(final URL requestUrl) throws OAuthAuthenticationException {
        final OAuthHmacSigner signer = new OAuthHmacSigner();
        signer.clientSharedSecret = clientSecret;

        // construct the callback url
        final GenericUrl callbackUrl = new GenericUrl(redirectUri);
        callbackUrl.put(STATE_PARAM_KEY, requestUrl.getQuery());

        final OAuthGetTemporaryToken getTemporaryToken = new OAuthGetTemporaryToken(requestTokenUri);
        getTemporaryToken.signer = signer;
        getTemporaryToken.consumerKey = clientId;
        getTemporaryToken.callback = callbackUrl.build();
        getTemporaryToken.transport = httpTransport;

        try {

            final OAuthCredentialsResponse credentialsResponse = getTemporaryToken.execute();

            final OAuthAuthorizeTemporaryTokenUrl authorizeTemporaryTokenUrl = new OAuthAuthorizeTemporaryTokenUrl(authUri);
            authorizeTemporaryTokenUrl.temporaryToken = credentialsResponse.token;

            sharedTokenSecrets.put(credentialsResponse.token, credentialsResponse.tokenSecret);

            return authorizeTemporaryTokenUrl.build();

        } catch (final IOException e) {
            throw new OAuthAuthenticationException(e);
        }
    }

