    /**
     * Removes user with given identifier as member from certain account.
     *
     * @param accountId
     *         account identifier
     * @param userId
     *         user identifier
     * @throws NotFoundException
     *         when user or account with given identifier doesn't exist
     * @throws ServerException
     *         when some error occurred while retrieving account members or removing certain member
     * @throws ConflictException
     *         when removal member is last <i>"account/owner"</i>
     * @see #addMember(String, NewMembership, SecurityContext)
     * @see #getMembers(String, SecurityContext)
     */
    @ApiOperation(value = "Remove user from account",
                  notes = "Remove user from a specific account. This API call requires account/owner, system/admin or system/manager role.",
                  position = 8)
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "OK"),
            @ApiResponse(code = 404, message = "Account ID not found"),
            @ApiResponse(code = 409, message = "Account should have at least 1 owner"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @DELETE
    @Path("/{id}/members/{userid}")
    @RolesAllowed({"account/owner", "system/admin", "system/manager"})
    public void removeMember(@ApiParam(value = "Account ID", required = true)
                             @PathParam("id") String accountId,
                             @ApiParam(value = "User ID")
                             @PathParam("userid") String userId) throws NotFoundException, ServerException, ConflictException {
        final List<Member> members = accountDao.getMembers(accountId);
        //search for member
        Member target = null;
        int owners = 0;
        for (Member member : members) {
            if (member.getRoles().contains("account/owner")) owners++;
            if (member.getUserId().equals(userId)) target = member;
        }
        if (target == null) {
            throw new ConflictException(format("User %s doesn't have membership with account %s", userId, accountId));
        }
        //account should have at least 1 owner
        if (owners == 1 && target.getRoles().contains("account/owner")) {
            throw new ConflictException("Account should have at least 1 owner");
        }
        accountDao.removeMember(target);
        LOG.info("EVENT#account-remove-member# ACCOUNT-ID#{}# USER-ID#{}#",
                 accountId,
                 userId);
    }

