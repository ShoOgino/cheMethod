    /**
     * Converts {@link Account} to {@link AccountDescriptor}
     */
    private AccountDescriptor toDescriptor(Account account) {
        final UriBuilder uriBuilder = getServiceContext().getServiceUriBuilder();
        final List<Link> links = new LinkedList<>();
        links.add(LinksHelper.createLink(HttpMethod.GET,
                                         uriBuilder.clone()
                                                   .path(getClass(), "getMemberships")
                                                   .build()
                                                   .toString(),
                                         null,
                                         APPLICATION_JSON,
                                         Constants.LINK_REL_GET_ACCOUNTS));

        links.add(LinksHelper.createLink(HttpMethod.GET,
                                         uriBuilder.clone()
                                                   .path(getClass(), "getMembers")
                                                   .build(account.getId())
                                                   .toString(),
                                         null,
                                         APPLICATION_JSON,
                                         Constants.LINK_REL_GET_MEMBERS));
        links.add(LinksHelper.createLink(HttpMethod.GET,
                                         uriBuilder.clone()
                                                   .path(getClass(), "getById")
                                                   .build(account.getId())
                                                   .toString(),
                                         null,
                                         APPLICATION_JSON,
                                         Constants.LINK_REL_GET_ACCOUNT_BY_ID));
        if (securityContext.isUserInRole("system/admin") || securityContext.isUserInRole("system/manager")) {
            links.add(LinksHelper.createLink(HttpMethod.GET,
                                             uriBuilder.clone()
                                                       .path(getClass(), "getByName")
                                                       .queryParam("name", account.getName())
                                                       .build()
                                                       .toString(),
                                             null,
                                             APPLICATION_JSON,
                                             Constants.LINK_REL_GET_ACCOUNT_BY_NAME));
        }
        if (securityContext.isUserInRole("system/admin")) {
            links.add(LinksHelper.createLink(HttpMethod.DELETE,
                                             uriBuilder.clone().path(getClass(), "remove")
                                                       .build(account.getId())
                                                       .toString(),
                                             null,
                                             null,
                                             Constants.LINK_REL_REMOVE_ACCOUNT));
        }

        if (!securityContext.isUserInRole("account/owner") &&
            !securityContext.isUserInRole("account/member") &&
            !securityContext.isUserInRole("system/admin") &&
            !securityContext.isUserInRole("system/manager")) {
            account.getAttributes().clear();
        }
        account.getAttributes().remove("codenvy:creditCardToken");
        account.getAttributes().remove("codenvy:billing.date");

        List<WorkspaceDto> workspaces = account.getWorkspaces()
                                               .stream()
                                               .map(DtoConverter::asDto)
                                               .collect(toList());
        return DtoFactory.getInstance().createDto(AccountDescriptor.class)
                         .withId(account.getId())
                         .withName(account.getName())
                         .withAttributes(account.getAttributes())
                         .withWorkspaces(workspaces)
                         .withLinks(links);
    }

