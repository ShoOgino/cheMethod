    /**
     * Creates new account member with role <i>"account/member"</i>.
     *
     * @param accountId
     *         account identifier
     * @param membership
     *         new membership
     * @return descriptor of created member
     * @throws ConflictException
     *         when user identifier is {@code null}
     * @throws NotFoundException
     *         when user or account with given identifier doesn't exist
     * @throws ServerException
     *         when some error occurred while getting user or adding new account member
     * @see MemberDescriptor
     * @see #removeMember(String, String)
     * @see #getMembers(String, SecurityContext)
     */
    @ApiOperation(value = "Add a new member to account",
                  notes = "Add a new user to an account. This user will have account/member role. This API call requires account/owner, system/admin or system/manager role.",
                  response = MemberDescriptor.class,
                  position = 6)
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "OK"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 409, message = "No user ID specified"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @POST
    @Path("/{id}/members")
    @RolesAllowed({"account/owner", "system/admin"})
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    public Response addMember(@ApiParam(value = "Account ID")
                              @PathParam("id")
                              String accountId,
                              @ApiParam(value = "New membership", required = true)
                              @Required
                              NewMembership membership,
                              @Context SecurityContext context) throws ConflictException,
                                                                       NotFoundException,
                                                                       ServerException {
        requiredNotNull(membership, "New membership");
        requiredNotNull(membership.getUserId(), "User ID");
        requiredNotNull(membership.getRoles(), "Roles");
        if (membership.getRoles().isEmpty()) {
            throw new ConflictException("Roles should not be empty");
        }
        userDao.getById(membership.getUserId());//check user exists
        final Member newMember = new Member().withAccountId(accountId)
                                             .withUserId(membership.getUserId())
                                             .withRoles(membership.getRoles());
        accountDao.addMember(newMember);
        LOG.info("EVENT#account-add-member# ACCOUNT-ID#{}# USER-ID#{}# ROLES#{}#",
                 accountId,
                 membership.getUserId(),
                 membership.getRoles().toString());
        return Response.status(Response.Status.CREATED)
                       .entity(toDescriptor(newMember, accountDao.getById(accountId), context))
                       .build();
    }

