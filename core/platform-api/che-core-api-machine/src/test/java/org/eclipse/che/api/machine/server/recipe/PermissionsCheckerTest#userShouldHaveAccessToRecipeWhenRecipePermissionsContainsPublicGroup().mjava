    @Test
    public void userShouldHaveAccessToRecipeWhenRecipePermissionsContainsPublicGroup() throws ServerException {
        final Group group = new GroupImpl("public", null, asList("read"));
        final ManagedRecipe recipe = new RecipeImpl().withCreator("someone")
                                              .withPermissions(new PermissionsImpl(null, asList(group)));

        assertTrue(permissionsChecker.hasAccess(recipe, "user-id", "read"), "should have read permission");
        assertFalse(permissionsChecker.hasAccess(recipe, "user-id", "write"), "should not have write permission");
        assertFalse(permissionsChecker.hasAccess(recipe, "user-id", "update_acl"), "should not have update_acl permission");
    }
//
//    @Test
//    public void groupPermissionsShouldHaveLessPriorityThenUserPermissions() throws ServerException {
//        final Group group = new GroupImpl("workspace/developer", "workspace123", asList("read", "write", "update_acl"));
//        final Map<String, List<String>> users = singletonMap("user-id", asList("read"));
//        final ManagedRecipe recipe = new RecipeImpl().withCreator("someone")
//                                              .withPermissions(new PermissionsImpl(users, asList(group)));
//        when(memberDao.getUserRelationships("user-id")).thenReturn(asList(new Member().withUserId("user-id")
//                                                                                      .withWorkspaceId("workspace123")
//                                                                                      .withRoles(asList("workspace/developer"))));
//
//        assertTrue(permissionsChecker.hasAccess(recipe, "user-id", "read"), "should have read permission");
//        assertFalse(permissionsChecker.hasAccess(recipe, "user-id", "write"), "should not have write permission");
//        assertFalse(permissionsChecker.hasAccess(recipe, "user-id", "update_acl"), "should not have update_acl permission");
//    }

