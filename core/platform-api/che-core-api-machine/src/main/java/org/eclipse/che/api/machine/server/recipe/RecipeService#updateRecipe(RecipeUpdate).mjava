    @PUT
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @GenerateLink(rel = LINK_REL_UPDATE_RECIPE)
    @RolesAllowed({"user", "system/admin", "system/manager"})
    public RecipeDescriptor updateRecipe(RecipeUpdate update) throws ApiException {
        if (update == null) {
            throw new BadRequestException("Update required");
        }
        if (update.getId() == null) {
            throw new BadRequestException("Recipe id required");
        }

        final ManagedRecipe recipe = recipeDao.getById(update.getId());

        final User user = EnvironmentContext.getCurrent().getUser();
        final String userId = user.getId();
        if (!userId.equals(recipe.getCreator()) &&
            !user.isMemberOf("system/admin") &&
            !permissionsChecker.hasAccess(recipe, userId, "write")) {
            throw new ForbiddenException(format("User %s doesn't have access to update recipe %s", userId, update.getId()));
        }
        if (update.getPermissions() != null) {
            //ensure that user has access to update recipe permissions
            if (!userId.equals(recipe.getCreator()) &&
                !user.isMemberOf("system/admin") &&
                !permissionsChecker.hasAccess(recipe, userId, "update_acl")) {
                throw new ForbiddenException(format("User %s doesn't have access to update recipe %s permissions",
                                                    userId,
                                                    update.getId()));
            }
            if (!isSystemUser() && permissionsChecker.hasPublicSearchPermission(update.getPermissions())) {
                throw new ForbiddenException(format("User %s doesn't have access to use 'public: search' permission", userId));
            }
        }

        recipeDao.update(update);

        return asRecipeDescriptor(recipeDao.getById(update.getId()));
    }

