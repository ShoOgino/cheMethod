    private MachineStateDto injectLinks(MachineStateDto machine) {
        final UriBuilder uriBuilder = getServiceContext().getServiceUriBuilder();
        final List<Link> links = new ArrayList<>();

        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(getClass(), "getMachineById")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_MACHINE));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(getClass(), "getMachineStateById")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             "self link"));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(getClass(), "getMachines")
                                       .build()
                                       .toString(),
                             null,
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_MACHINES,
                             newDto(LinkParameter.class).withName("workspace")
                                                        .withRequired(true)
                                                        .withDefaultValue(machine.getWorkspaceId())));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(getClass(), "getMachinesStates")
                                       .build()
                                       .toString(),
                             null,
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_MACHINES_STATES,
                             newDto(LinkParameter.class).withName("workspace")
                                                        .withRequired(true)
                                                        .withDefaultValue(machine.getWorkspaceId())));
        links.add(createLink(HttpMethod.DELETE,
                             uriBuilder.clone()
                                       .path(getClass(), "destroyMachine")
                                       .build(machine.getId())
                                       .toString(),
                             Constants.LINK_REL_DESTROY_MACHINE));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(getClass(), "getSnapshots")
                                       .build()
                                       .toString(),
                             null,
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_SNAPSHOTS,
                             newDto(LinkParameter.class).withName("workspace")
                                                        .withRequired(true)
                                                        .withDefaultValue(machine.getWorkspaceId())));
        links.add(createLink(HttpMethod.POST,
                             uriBuilder.clone()
                                       .path(getClass(), "saveSnapshot")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             APPLICATION_JSON,
                             Constants.LINK_REL_SAVE_SNAPSHOT));
        links.add(createLink(HttpMethod.POST,
                             uriBuilder.clone()
                                       .path(getClass(), "executeCommandInMachine")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             APPLICATION_JSON,
                             Constants.LINK_REL_EXECUTE_COMMAND,
                             newDto(LinkParameter.class).withName("outputChannel")
                                                        .withRequired(false)));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(getClass(), "getProcesses")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_PROCESSES));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(getClass(), "getMachineLogs")
                                       .build(machine.getId())
                                       .toString(),
                             TEXT_PLAIN,
                             Constants.LINK_REL_GET_MACHINE_LOGS));

        return machine.withLinks(links);
    }

