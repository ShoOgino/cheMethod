    public static ProjectTypeDto toTypeDefinition(ProjectTypeDef projectType) {
        final ProjectTypeDto definition = newDto(ProjectTypeDto.class).withId(projectType.getId())
                                                                      .withDisplayName(projectType.getDisplayName())
                                                                      .withPrimaryable(projectType.isPrimaryable())
                                                                      .withMixable(projectType.isMixable())
                                                                      .withAncestors(projectType.getAncestors());

        final List<AttributeDto> typeAttributes = new ArrayList<>();
        for (Attribute attr : projectType.getAttributes()) {


            ValueDto valueDto = newDto(ValueDto.class);

            if (attr.getValue() != null) {
                valueDto.withList(attr.getValue().getList());
            }

            typeAttributes.add(newDto(AttributeDto.class).withName(attr.getName())
                                                         .withDescription(attr.getDescription())
                                                         .withRequired(attr.isRequired())
                                                         .withVariable(attr.isVariable())
                                                         .withValue(valueDto));
        }
        definition.withAttributes(typeAttributes).withParents(projectType.getParents());

//        final List<String> parents = projectType.getParents().stream()
//                                                .map(ProjectTypeDef::getId)
//                                                .collect(Collectors.toList());
//        definition.setParents(parents);

        //definition.withParents(projectType.getParents());

        return definition;
    }

