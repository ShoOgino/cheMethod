    /**
     * Checks if incomimg Project Type definition has valid ID (Pattern.compile("[^a-zA-Z0-9-_.]")
     * and display name (should not be null or empty)
     *
     * @param type
     * @return true if valid
     */
    private boolean isNameValid(ProjectTypeDef type) {

        boolean valid = true;

        if (type.getId() == null || type.getId().isEmpty() || NAME_PATTERN.matcher(type.getId()).find()) {
            LOG.error("Could not register Project Type ID is null or invalid (only Alphanumeric, dash, point and underscore allowed): "
                      + type.getClass().getName());
            valid = false;
        }


        if (type.getDisplayName() == null || type.getDisplayName().isEmpty()) {
            LOG.error("Could not register Project Type with null or empty display name: " + type.getId());
            valid = false;
        }

        for (Attribute attr : type.getAttributes()) {

            // ID spelling (no spaces, only alphanumeric)
            if (NAME_PATTERN.matcher(attr.getName()).find()) {
                LOG.error("Could not register Project Type with invalid attribute Name (only Alphanumeric, dash and underscore allowed): " +
                          attr.getClass().getName() + " ID: '" + attr.getId() + "'"
                         );
                valid = false;
            }
        }

        return valid;
    }

