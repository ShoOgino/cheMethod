    @Override
    public Project updateProject(String workspace, String path, ProjectConfig newConfig) throws ForbiddenException,
                                                                                                ServerException,
                                                                                                NotFoundException,
                                                                                                ConflictException,
                                                                                                IOException {
        Project project = getProject(workspace, path);
        String oldProjectType = null;
        List<String> oldMixins = new ArrayList<>();
        // If a project does not exist in the target path, create a new one
        if (project == null) {
            FolderEntry projectsRoot = getProjectsRoot(workspace);
            VirtualFileEntry child = projectsRoot.getChild(path);
            if (child != null && child.isFolder() && child.getParent().isRoot()) {
                project = new Project((FolderEntry)child, this);
            } else {
                throw new NotFoundException(String.format("Project '%s' doesn't exist in workspace '%s'.", path, workspace));
            }
        } else {
            try {
                ProjectConfig config = project.getConfig();
                oldProjectType = config.getType();
                oldMixins = config.getMixins();
            } catch (ProjectTypeConstraintException | ValueStorageException e) {
                // here we allow changing bad project type on registered
                LOG.warn(e.getMessage());
            }
        }
        project.updateConfig(newConfig);
        // handle project type changes
        // post actions on changing project type
        // base or mixin
        if (!newConfig.getType().equals(oldProjectType)) {
            ProjectTypeChangedHandler projectTypeChangedHandler = handlers.getProjectTypeChangedHandler(newConfig.getType());
            if (projectTypeChangedHandler != null) {
                projectTypeChangedHandler.onProjectTypeChanged(project.getBaseFolder());
            }
        }
        List<String> mixins = firstNonNull(newConfig.getMixins(), Collections.<String>emptyList());
        for (String mixin : mixins) {
            if (!oldMixins.contains(mixin)) {
                ProjectTypeChangedHandler projectTypeChangedHandler = handlers.getProjectTypeChangedHandler(mixin);
                if (projectTypeChangedHandler != null) {
                    projectTypeChangedHandler.onProjectTypeChanged(project.getBaseFolder());
                }
            }
        }
        return project;
    }

