    @Test
    @SuppressWarnings("unchecked")
    public void testGetModulesWithHandler() throws Exception {
        ProjectTypeDef pt = new ProjectTypeDef("testGetModules", "my module type", true, false) {
            {
                addConstantDefinition("my_module_attribute", "attr description", "attribute value 1");
            }
        };
        pm.getProjectTypeRegistry().registerProjectType(pt);

        Project myProject = pm.getProject(workspace, "my_project");
        //create other module but not add to modules should be added to response by handler
        myProject.getBaseFolder().createFolder("my_module2");

        phRegistry.register(new GetModulesHandler() {
            @Override
            public void onGetModules(FolderEntry parentProjectFolder, final List<String> modulesPath)
                    throws ForbiddenException, ServerException, NotFoundException, IOException {
                FolderEntry child = (FolderEntry)parentProjectFolder.getChild("my_module2");
                if (pm.isProjectFolder(child)) {
                    modulesPath.add(child.getPath());
                }
            }

            @Override
            public String getProjectType() {
                return "my_project_type";
            }
        });

        final ProjectConfigDto moduleConfig1 = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                         .withPath("/my_project/my_module")
                                                         .withName("my_module")
                                                         .withDescription("my test module")
                                                         .withType("testGetModules");
        final ProjectConfigDto moduleConfig2 = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                         .withPath("/my_project/my_module2")
                                                         .withName("my_module2")
                                                         .withDescription("my test module")
                                                         .withType("testGetModules");
        modules.add(moduleConfig1);
        modules.add(moduleConfig2);

        ContainerResponse response = launcher.service(GET,
                                                      String.format("http://localhost:8080/api/project/%s/modules/my_project", workspace),
                                                      "http://localhost:8080/api", null, null, null);
        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
        List<ProjectConfigDto> result = (List<ProjectConfigDto>)response.getEntity();
        assertNotNull(result);

        assertEquals(result.size(), 2);
        ProjectConfigDto moduleDescriptor = result.get(0);
        assertEquals(moduleDescriptor.getName(), "my_module");

        ProjectConfigDto moduleDescriptor2 = result.get(1);
        assertEquals(moduleDescriptor2.getName(), "my_module2");
    }

