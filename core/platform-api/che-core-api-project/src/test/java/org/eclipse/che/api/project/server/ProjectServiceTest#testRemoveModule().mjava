    @Test
    public void testRemoveModule() throws Exception {
        final ProjectConfigDto projectConfig = mock(ProjectConfigDto.class);
        when(projectConfig.getPath()).thenReturn("my_project");
        when(projectConfig.getType()).thenReturn("my_project_type");

        final ProjectConfigDto moduleConfig = mock(ProjectConfigDto.class);
        when(moduleConfig.getPath()).thenReturn("/todel");
        when(moduleConfig.getName()).thenReturn("todel");
        when(moduleConfig.getType()).thenReturn("my_project_type");

        when(projectConfig.getModules()).thenReturn(singletonList(moduleConfig));

        pm.createProject(workspace, "project", new ProjectConfigImpl(projectConfig), null);
        pm.addModule(workspace, "my_project", moduleConfig, null);

        assertEquals(pm.getProject(workspace, "my_project").getConfig().getModules().size(), 1);
        assertEquals(pm.getProject(workspace, "my_project").getConfig().getModules().iterator().next().getPath(), "/todel");

        ContainerResponse response = launcher.service(DELETE,
                                                      String.format("http://localhost:8080/api/project/%s/module/my_project?" +
                                                                    "module=my_project/todel",
                                                                    workspace),
                                                      "http://localhost:8080/api", null, null, null);

        assertEquals(response.getStatus(), 204, "Error: " + response.getEntity());
        verify(projectConfig, times(2)).getModules();
    }

