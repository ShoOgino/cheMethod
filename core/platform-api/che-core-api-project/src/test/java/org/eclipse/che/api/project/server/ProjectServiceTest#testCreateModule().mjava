    @Test
    public void testCreateModule() throws Exception {
        phRegistry.register(new CreateProjectHandler() {

            @Override
            public String getProjectType() {
                return "my_project_type";
            }

            @Override
            public void onCreateProject(FolderEntry baseFolder, Map<String, AttributeValue> attributes, Map<String, String> options)
                    throws ConflictException, ForbiddenException, ServerException {
                baseFolder.createFolder("a");
                baseFolder.createFolder("b");
                baseFolder.createFile("test.txt", "test".getBytes());
            }
        });

        Map<String, List<String>> headers = new HashMap<>();
        headers.put(CONTENT_TYPE, singletonList(APPLICATION_JSON));

        Map<String, List<String>> attributeValues = new LinkedHashMap<>();
        attributeValues.put("new module attribute", singletonList("attribute value 1"));

        ProjectConfigDto descriptor = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                .withName("new_module")
                                                .withType("my_project_type")
                                                .withDescription("new module")
                                                .withAttributes(attributeValues);

        final ProjectConfigDto moduleConfig = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                        .withPath("/my_project/new_module")
                                                        .withName("new_module")
                                                        .withDescription("new module")
                                                        .withType("my_project_type")
                                                        .withSource(DtoFactory.getInstance().createDto(SourceStorageDto.class));
        projects.add(moduleConfig);

        ContainerResponse response = launcher.service(POST,
                                                      String.format("http://localhost:8080/api/project/%s/my_project?path=%s",
                                                                    workspace,
                                                                    "new_module"),
                                                      "http://localhost:8080/api",
                                                      headers,
                                                      DtoFactory.getInstance().toJson(descriptor).getBytes(),
                                                      null);
        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
        ProjectConfigDto result = (ProjectConfigDto)response.getEntity();
        assertNotNull(result);
        assertEquals(result.getName(), "new_module");
        assertEquals(result.getPath(), "/my_project/new_module");
        assertEquals(result.getDescription(), "new module");
        assertEquals(result.getType(), "my_project_type");

        Project project = pm.getProject(workspace, "my_project/new_module");
        assertNotNull(project);

        ProjectConfig config = project.getConfig();

        assertEquals(config.getDescription(), "new module");
        assertEquals(config.getType(), "my_project_type");

        assertNotNull(project.getBaseFolder().getChild("a"));
        assertNotNull(project.getBaseFolder().getChild("b"));
        assertNotNull(project.getBaseFolder().getChild("test.txt"));
    }

