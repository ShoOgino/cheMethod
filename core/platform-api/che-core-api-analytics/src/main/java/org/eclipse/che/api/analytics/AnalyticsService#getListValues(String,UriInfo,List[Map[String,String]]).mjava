    @ApiOperation(value = "Get list of metric values",
                  notes = "Get list of metric values",
                  response = MetricInfoListDTO.class,
                  position = 2)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 500, message = "Unexpected error occurred. Can't get value for metric")})

    @GenerateLink(rel = "list of metric values")
    @POST
    @Path("/metric/{name}/list")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @RolesAllowed({"user", "system/admin", "system/manager"})
    public Response getListValues(@ApiParam(value = "Metric name", required = true)
                                  @PathParam("name") String metricName,
                                  @Context UriInfo uriInfo,
                                  @ApiParam(value = "Search filter", required = true)
                                  List<Map<String, String>> parameters) throws ServerException {
        try {
            Map<String, String> metricContext = extractContext(uriInfo);
            MetricValueListDTO list = metricHandler.getListValues(metricName, parameters, metricContext, uriInfo);
            return Response.status(Response.Status.OK).entity(list).build();
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            throw new ServerException("Unexpected error occurred. Can't get list of metrics");
        }
    }

