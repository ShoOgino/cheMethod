    @ApiOperation(value = "Get metric info",
                  notes = "Get information about specified metric",
                  response = MetricInfoDTO.class,
                  position = 6)
    @ApiResponses(value = {
                  @ApiResponse(code = 200, message = "OK"),
                  @ApiResponse(code = 404, message  ="Not Found"),
                  @ApiResponse(code = 500, message = "Unexpected error occurred. Can't get info for metric")})
    @GenerateLink(rel = "metric info")
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    @Path("/metricinfo/{name}")
    @RolesAllowed({"user", "system/admin", "system/manager"})
    public Response getInfo(@ApiParam(value = "Metric name", required = true)
                                @PathParam("name") String metricName, @Context UriInfo uriInfo) throws ServerException {
        try {
            MetricInfoDTO metricInfoDTO = metricHandler.getInfo(metricName, uriInfo);
            return Response.status(Response.Status.OK).entity(metricInfoDTO).build();
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            throw new ServerException("Unexpected error occurred. Can't get info for metric " + metricName);
        }
    }

