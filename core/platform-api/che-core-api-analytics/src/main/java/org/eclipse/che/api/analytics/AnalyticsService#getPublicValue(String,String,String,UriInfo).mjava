    @ApiOperation(value = "Get public metric",
                  notes = "Get public metric (Factory)",
                  response = MetricValueDTO.class,
                  position = 4)
    @ApiResponses(value = {
                  @ApiResponse(code = 200, message = "OK"),
                  @ApiResponse(code = 404, message  ="Not Found"),
                  @ApiResponse(code = 500, message = "Unexpected error occurred. Can't get value for metric")})
    @GenerateLink(rel = "metric value")
    @GET
    @Path("/public-metric/{name}")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPublicValue(@ApiParam(value = "Metric name", required = true, allowableValues = "factory_used")
                                   @PathParam("name") String metricName,
                                   @ApiParam(value = "Page number")
                                   @QueryParam("page") String page,
                                   @ApiParam(value = "Resylts per page")
                                   @QueryParam("per_page") String perPage,
                                   @Context UriInfo uriInfo) throws ServerException {
        try {
            Map<String, String> metricContext = extractContext(uriInfo,
                                                               page,
                                                               perPage);
            MetricValueDTO value = metricHandler.getPublicValue(metricName, metricContext, uriInfo);
            return Response.status(Response.Status.OK).entity(value).build();
        } catch (Exception e) {
            LOG.error(e.getMessage(), e);
            throw new ServerException("Unexpected error occurred. Can't get value for metric " + metricName);
        }
    }

