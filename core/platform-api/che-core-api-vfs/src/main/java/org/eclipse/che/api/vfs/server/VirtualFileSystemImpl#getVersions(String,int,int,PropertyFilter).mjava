    @Path("version-history/{id}")
    @Override
    public ItemList getVersions(@PathParam("id") String id,
                                @DefaultValue("-1") @QueryParam("maxItems") int maxItems,
                                @QueryParam("skipCount") int skipCount,
                                @DefaultValue(PropertyFilter.ALL) @QueryParam("propertyFilter") PropertyFilter propertyFilter)
            throws NotFoundException, ForbiddenException, ConflictException, ServerException {
        if (skipCount < 0) {
            throw new ConflictException("'skipCount' parameter is negative. ");
        }
        final VirtualFile virtualFile = mountPoint.getVirtualFileById(id);
        if (!virtualFile.isFile()) {
            throw new ForbiddenException(
                    String.format("Unable get versions of '%s'. Versioning allowed for files only. ", virtualFile.getPath()));
        }
        final LazyIterator<VirtualFile> versions = virtualFile.getVersions(VirtualFileFilter.ALL);
        try {
            if (skipCount > 0) {
                versions.skip(skipCount);
            }
        } catch (NoSuchElementException nse) {
            throw new ConflictException("'skipCount' parameter is greater then total number of items. ");
        }

        final List<Item> items = new ArrayList<>();
        for (int count = 0; versions.hasNext() && (maxItems < 0 || count < maxItems); count++) {
            items.add(fromVirtualFile(versions.next(), false, propertyFilter));
        }
        return DtoFactory.getInstance().createDto(ItemList.class).withItems(items).withNumItems(versions.size())
                         .withHasMoreItems(versions.hasNext());
    }

