    /**
     * Get item by path.
     *
     * @param path
     *         item path
     * @param versionId
     *         version id for File item. Pass {@code null} to get last version. Must be {@code null} for Folders. If versioning isn't
     *         supported this parameter must be {@code null}
     * @param includePermissions
     *         if {@code true} add permissions for current user in item description. If parameter isn't set then result is implementation
     *         specific
     * @param propertyFilter
     *         only properties which are accepted by filter should be included in response. See {@link PropertyFilter#accept(String)}
     * @return item
     * @throws NotFoundException
     *         if {@code path} or its version doesn't exist
     * @throws ForbiddenException
     *         if any of following conditions are met:
     *         <ul>
     *         <li>{@code versionId} is specified by item {@code path} isn't a file</li>
     *         <li>user which perform operation has no permissions</li>
     *         </ul>
     * @throws ServerException
     *         if any other errors occur
     * @see org.eclipse.che.api.vfs.shared.dto.VirtualFileSystemInfo#isVersioningSupported()
     * @see org.eclipse.che.api.vfs.shared.dto.Item#getPermissions()
     */
    @GET
    @Path("itembypath")
    @Produces({MediaType.APPLICATION_JSON})
    Item getItemByPath(String path, String versionId, Boolean includePermissions, PropertyFilter propertyFilter)
            throws NotFoundException, ForbiddenException, ServerException;

