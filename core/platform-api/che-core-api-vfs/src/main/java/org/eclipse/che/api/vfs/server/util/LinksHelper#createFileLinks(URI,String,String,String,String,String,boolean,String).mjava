    public static Map<String, Link> createFileLinks(URI baseUri,
                                                    String wsName,
                                                    String itemId,
                                                    String latestVersionId,
                                                    String itemPath,
                                                    String mediaType,
                                                    boolean locked,
                                                    String parentId) {
        // This method is used extremely actively so it is imported to set size of map directly
        // and prevent unnecessary growth of map.
        final Map<String, Link> links = new HashMap<>(16, 1.0f);
        final UriBuilder baseUriBuilder = UriBuilder.fromUri(baseUri).path(VirtualFileSystemFactory.class)
                                                    .path(VirtualFileSystemFactory.class, "getFileSystem");

        links.put(Link.REL_SELF, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "item", itemId), Link.REL_SELF, MediaType.APPLICATION_JSON));

        links.put(Link.REL_ACL, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "acl", itemId), Link.REL_ACL, MediaType.APPLICATION_JSON));

        links.put(Link.REL_CONTENT, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "content", itemId), Link.REL_CONTENT, mediaType));

        links.put(Link.REL_DOWNLOAD_FILE, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "downloadfile", itemId), Link.REL_DOWNLOAD_FILE, mediaType));

        links.put(Link.REL_CONTENT_BY_PATH, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "contentbypath", itemPath.substring(1)),
                               Link.REL_CONTENT_BY_PATH, mediaType));

        links.put(Link.REL_VERSION_HISTORY, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "version-history", itemId), Link.REL_VERSION_HISTORY,
                               MediaType.APPLICATION_JSON));

        links.put(Link.REL_CURRENT_VERSION, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "item", latestVersionId), Link.REL_CURRENT_VERSION,
                               MediaType.APPLICATION_JSON));

        if (locked) {
            links.put(Link.REL_UNLOCK, //
                      createLink(createURI(baseUriBuilder.clone(), wsName, "unlock", itemId, "lockToken", "[lockToken]"),
                                   Link.REL_UNLOCK, null));
        } else {
            links.put(Link.REL_LOCK, //
                      createLink(createURI(baseUriBuilder.clone(), wsName, "lock", itemId, "timeout", "[timeout]"),
                                   Link.REL_LOCK, MediaType.APPLICATION_JSON));
        }

        links.put(Link.REL_DELETE, //
                  createLink(locked
                               ? createURI(baseUriBuilder.clone(), wsName, "delete", itemId, "lockToken", "[lockToken]")
                               : createURI(baseUriBuilder.clone(), wsName, "delete", itemId),
                               Link.REL_DELETE, null));

        links.put(Link.REL_COPY, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "copy", itemId, "parentId", "[parentId]"), Link.REL_COPY,
                               MediaType.APPLICATION_JSON));

        links.put(Link.REL_MOVE, //
                  createLink(locked
                               ? createURI(baseUriBuilder.clone(), wsName, "move", itemId, "parentId", "[parentId]", "lockToken",
                                           "[lockToken]")
                               : createURI(baseUriBuilder.clone(), wsName, "move", itemId, "parentId", "[parentId]"),
                               Link.REL_MOVE, MediaType.APPLICATION_JSON));

        links.put(Link.REL_PARENT, //
                  createLink(createURI(baseUriBuilder.clone(), wsName, "item", parentId), Link.REL_PARENT, MediaType.APPLICATION_JSON));

        links.put(Link.REL_RENAME, //
                  createLink(locked
                               ? createURI(baseUriBuilder.clone(), wsName, "rename", itemId, "newname", "[newname]", "mediaType",
                                           "[mediaType]", "lockToken", "[lockToken]")
                               : createURI(baseUriBuilder.clone(), wsName, "rename", itemId, "newname", "[newname]", "mediaType",
                                           "[mediaType]"),
                               Link.REL_RENAME, MediaType.APPLICATION_JSON));

        return links;
    }

