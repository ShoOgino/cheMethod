    /**
     * Update ACL of item. Example of JSON message:
     * <p/>
     * <pre>
     * [{"principal":"john","type":"USER","permissions":["all"]},{"principal":"marry","type":"USER","permissions":["read"]}]
     * </pre>
     * <p/>
     * JSON message as above will set "all" permissions for principal "john" and "read" permission only for principal "marry".
     *
     * @param id
     *         id of item for ACL updates
     * @param acl
     *         ACL to be applied to item. If method {@link AccessControlEntry#getPermissions()} for any principal return empty set of
     *         permissions then all permissions for this principal will be removed.
     * @param override
     *         if {@code true} then previous ACL will be overridden, if {@code false} then specified ACL will be merged with previous if
     *         any. If such parameters isn't specified then behavior is implementation specific
     * @param lockToken
     *         lock token. This lock token will be used if {@code id} is locked. Pass {@code null} if there is no lock token, e.g. item is
     *         not locked
     * @throws NotFoundException
     *         if {@code id} doesn't exist
     * @throws ForbiddenException
     *         if any of following conditions are met:
     *         <ul>
     *         <li>{@code lockToken} is {@code null} or doesn't match</li>
     *         <li>user which perform operation has no permissions</li>
     *         </ul>
     * @throws ServerException
     *         if any other errors occur
     * @see org.eclipse.che.api.vfs.shared.dto.VirtualFileSystemInfo#getAclCapability()
     */
    @POST
    @Path("acl")
    @Consumes({MediaType.APPLICATION_JSON})
    void updateACL(String id, List<AccessControlEntry> acl, Boolean override, String lockToken)
            throws NotFoundException, ForbiddenException, ServerException;

