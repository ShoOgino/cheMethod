    /**
     * Construct new Property Filter.
     *
     * @param filterString
     *         the string that contains either '*' or comma-separated list of properties names. An arbitrary number of space allowed before
     *         and after each comma.
     * @throws IllegalArgumentException
     *         if {@code filterString} is invalid
     */
    private PropertyFilter(String filterString) {
        this.propertyNames = new HashSet<>();
        for (String token : SPLITTER.split(filterString)) {
            if (token.length() > 0 && !token.equals(ALL)) {
                for (char ch : token.toCharArray()) {
                    if (Character.isWhitespace(ch) || ILLEGAL_CHARACTERS.indexOf(ch) != -1) {
                        throw new IllegalArgumentException(String.format("Invalid filter '%s' contains illegal characters.", filterString));
                    }
                }
                this.propertyNames.add(token);
            } else {
                throw new IllegalArgumentException(
                        String.format("Invalid filter '%s'. Filter must contains either '*' OR comma-separated list of properties.",
                                      filterString));
            }
        }
    }

