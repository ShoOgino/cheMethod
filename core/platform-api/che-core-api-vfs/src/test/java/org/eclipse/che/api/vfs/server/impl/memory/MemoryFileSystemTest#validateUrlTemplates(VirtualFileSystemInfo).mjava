    protected void validateUrlTemplates(VirtualFileSystemInfo info) throws Exception {
        Map<String, Link> templates = info.getUrlTemplates();
        //log.info(">>>>>>>>>\n" + templates);

        Link template = templates.get(Link.REL_ITEM);
        assertNotNull("'" + Link.REL_ITEM + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_ITEM, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("item").path("[id]").build().toString(), template.getHref());

        template = templates.get(Link.REL_ITEM_BY_PATH);
        assertNotNull("'" + Link.REL_ITEM_BY_PATH + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_ITEM_BY_PATH, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("itembypath").path("[path]").build().toString(),
                     template.getHref());

        template = templates.get(Link.REL_COPY);
        assertNotNull("'" + Link.REL_COPY + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_COPY, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("copy").path("[id]").queryParam("parentId", "[parentId]")
                               .build().toString(), template.getHref());

        template = templates.get(Link.REL_MOVE);
        assertNotNull("'" + Link.REL_MOVE + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_MOVE, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("move").path("[id]").queryParam("parentId", "[parentId]")
                               .queryParam("lockToken", "[lockToken]").build().toString(), template.getHref());

        template = templates.get(Link.REL_CREATE_FILE);
        assertNotNull("'" + Link.REL_CREATE_FILE + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_CREATE_FILE, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("file").path("[parentId]").queryParam("name", "[name]")
                               .build().toString(), template.getHref());

        template = templates.get(Link.REL_CREATE_FOLDER);
        assertNotNull("'" + Link.REL_CREATE_FOLDER + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_CREATE_FOLDER, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("folder").path("[parentId]").queryParam("name", "[name]")
                               .build().toString(), template.getHref());

        template = templates.get(Link.REL_LOCK);
        assertNotNull("'" + Link.REL_LOCK + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_LOCK, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("lock").path("[id]")
                               .queryParam("timeout", "[timeout]").build().toString(), template.getHref());

        template = templates.get(Link.REL_UNLOCK);
        assertNotNull("'" + Link.REL_UNLOCK + "' template not found. ", template);
        assertEquals(null, template.getType());
        assertEquals(Link.REL_UNLOCK, template.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("unlock").path("[id]").queryParam("lockToken", "[lockToken]")
                               .build().toString(), template.getHref());

        template = templates.get(Link.REL_SEARCH);
        assertNotNull("'" + Link.REL_SEARCH + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_SEARCH, template.getRel());
        assertEquals(
                UriBuilder.fromPath(SERVICE_URI).path("search").queryParam("statement", "[statement]")
                          .queryParam("maxItems", "[maxItems]").queryParam("skipCount", "[skipCount]").build().toString(),
                template.getHref());

        template = templates.get(Link.REL_SEARCH_FORM);
        assertNotNull("'" + Link.REL_SEARCH_FORM + "' template not found. ", template);
        assertEquals(MediaType.APPLICATION_JSON, template.getType());
        assertEquals(Link.REL_SEARCH_FORM, template.getRel());
        assertEquals(
                UriBuilder.fromPath(SERVICE_URI).path("search").queryParam("maxItems", "[maxItems]")
                          .queryParam("skipCount", "[skipCount]").queryParam("propertyFilter", "[propertyFilter]").build().toString(),
                template.getHref());
    }

