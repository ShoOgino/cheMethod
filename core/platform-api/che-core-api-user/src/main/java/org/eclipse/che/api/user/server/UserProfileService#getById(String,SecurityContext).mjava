    /**
     * Searches for profile with given identifier and {@link ProfileDescriptor} if found.
     *
     * @param profileId
     *         profile identifier
     * @return descriptor of found profile
     * @throws NotFoundException
     *         when profile with given identifier doesn't exist
     * @throws ServerException
     *         when some error occurred while retrieving user or profile
     * @see ProfileDescriptor
     * @see #getById(String, SecurityContext)
     */
    @ApiOperation(value = "Get profile of a specific user",
                  notes = "Get profile of a specific user. Roles allowed: system/admin, system/manager",
                  response = ProfileDescriptor.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @GET
    @Path("/{id}")
    @RolesAllowed({"user", "system/admin", "system/manager"})
    @Produces(APPLICATION_JSON)
    public ProfileDescriptor getById(@ApiParam(value = "  ID")
                                     @PathParam("id")
                                     String profileId,
                                     @Context SecurityContext context) throws NotFoundException, ServerException {
        final Profile profile = profileDao.getById(profileId);
        final User user = userDao.getById(profile.getUserId());
        profile.getAttributes().put("email", user.getEmail());
        return toDescriptor(profile, context);
    }

