    /**
     * Creates new user and profile.
     * <p/>
     * When current user is in 'system/admin' role then {@code newUser} parameter
     * will be used for user creation, otherwise method uses {@code token} and {@link #tokenValidator}.
     *
     * @param token
     *         authentication token
     * @param isTemporary
     *         if it is {@code true} creates temporary user
     * @return entity of created user
     * @throws UnauthorizedException
     *         when token is {@code null}
     * @throws ConflictException
     *         when token is not valid
     * @throws ServerException
     *         when some error occurred while persisting user or user profile
     * @see UserDescriptor
     * @see #getCurrent(SecurityContext)
     * @see #updatePassword(String)
     * @see #getById(String, SecurityContext)
     * @see #getByAlias(String, SecurityContext)
     * @see #remove(String)
     */
    @ApiOperation(value = "Create a new user",
                  notes = "Create a new user in the system. There are two ways to create a user: through a regular registration workflow " +
                          "and by system/admin. In the former case, auth token is sent to user's mailbox, while system/admin can create a user directly " +
                          "with predefined name and password",
                  response = UserDescriptor.class)
    @ApiResponses({@ApiResponse(code = 201, message = "Created"),
                   @ApiResponse(code = 401, message = "Missed token parameter"),
                   @ApiResponse(code = 409, message = "Invalid token"),
                   @ApiResponse(code = 403, message = "Invalid or missing request parameters"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    @POST
    @Path("/create")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @GenerateLink(rel = LINK_REL_CREATE_USER)
    public Response create(@ApiParam(value = "New user") NewUser newUser,
                           @ApiParam(value = "Authentication token") @QueryParam("token") String token,
                           @ApiParam(value = "User type") @QueryParam("temporary") @DefaultValue("false") Boolean isTemporary,
                           @Context SecurityContext context) throws ApiException {
        if (!context.isUserInRole("system/admin") && !userSelfCreationAllowed) {
            throw new ForbiddenException("Currently only admins can create accounts. Please contact our Admin Team for further info.");
        }

        final User user = context.isUserInRole("system/admin") ? fromEntity(newUser) : fromToken(token);

        userDao.create(user.withId(generate("user", ID_LENGTH))
                           .withPassword(firstNonNull(user.getPassword(), generate("", PASSWORD_LENGTH))));

        profileDao.create(new Profile(user.getId()));

        final Map<String, String> preferences = new HashMap<>(4);
        preferences.put("temporary", Boolean.toString(isTemporary));
        preferences.put("codenvy:created", Long.toString(System.currentTimeMillis()));
        preferenceDao.setPreferences(user.getId(), preferences);

        return status(CREATED).entity(injectLinks(toDescriptor(user), getServiceContext())).build();
    }

