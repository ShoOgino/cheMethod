    /**
     * <p>Updates preferences of current user profile.</p>
     *
     * @param update
     *         update preferences
     * @return descriptor of updated profile
     * @throws ServerException
     *         when some error occurred while retrieving/updating profile
     * @throws ConflictException
     *         when update is {@code null} or <i>empty</i>
     * @see ProfileDescriptor
     * @see #updateCurrent(Map, SecurityContext)
     */
    @POST
    @Path("/prefs")
    @RolesAllowed({"user", "temp_user"})
    @GenerateLink(rel = LINK_REL_UPDATE_PREFERENCES)
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    public Map<String, String> updatePreferences(@Required Map<String, String> update) throws NotFoundException,
                                                                                              ServerException,
                                                                                              ConflictException {
        if (update == null || update.isEmpty()) {
            throw new ConflictException("Preferences to update required");
        }
        
        String userId = currentUser().getId();
        // Keep the lock in a variable so it isn't garbage collected while in use
        Lock lock = preferencesUpdateLocksByUser.get(userId);
        lock.lock();
        try {
            final Map<String, String> preferences = preferenceDao.getPreferences(userId);
            preferences.putAll(update);
            preferenceDao.setPreferences(currentUser().getId(), preferences);
            return preferences;
        } finally {
            lock.unlock();
        }
    }

