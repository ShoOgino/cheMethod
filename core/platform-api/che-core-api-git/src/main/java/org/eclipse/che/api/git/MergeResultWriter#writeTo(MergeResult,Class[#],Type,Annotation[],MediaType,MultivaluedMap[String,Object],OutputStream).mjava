    /**
     * @see MessageBodyWriter#writeTo(Object, Class, java.lang.reflect.Type, java.lang.annotation.Annotation[], javax.ws.rs.core.MediaType,
     *      javax.ws.rs.core.MultivaluedMap, java.io.OutputStream)
     */
    @Override
    public void writeTo(MergeResult mergeResult,
                        Class< ? > type,
                        Type genericType,
                        Annotation[] annotations,
                        MediaType mediaType,
                        MultivaluedMap<String, Object> httpHeaders,
                        OutputStream entityStream) throws IOException, WebApplicationException {
        Writer writer = new OutputStreamWriter(entityStream);
        MergeResult.MergeStatus status = mergeResult.getMergeStatus();
        switch (mergeResult.getMergeStatus()) {
            case FAST_FORWARD:
            case ALREADY_UP_TO_DATE:
            case MERGED:
                writer.write(status.toString());
                writer.write('\n');
                break;
            case FAILED:
                writer.write("error: Failed to merge:");
                for (String failed : mergeResult.getFailed()) {
                    writer.write("        ");
                    writer.write(failed);
                    writer.write('\n');
                }
                break;
            case CONFLICTING:
                for (String conflict : mergeResult.getConflicts()) {
                    writer.write("CONFLICT(content): Merge conflict in: " + conflict);
                    writer.write('\n');
                }
                writer.write("Automatic merge failed; fix conflicts and then commit the result");
                writer.write('\n');
                break;
            case NOT_SUPPORTED:
                writer.write("Operation not supported");
                writer.write('\n');
                break;
            default:
                break;
        }
        writer.flush();
    }

