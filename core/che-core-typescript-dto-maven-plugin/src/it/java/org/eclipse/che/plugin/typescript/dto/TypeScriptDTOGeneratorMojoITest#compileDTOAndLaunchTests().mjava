    /**
     * Starts tests by compiling first generated DTO from maven plugin
     * @throws IOException if unable to start process
     * @throws InterruptedException if unable to wait the end of the process
     */
    @Test(dependsOnGroups = "tools")
    public void compileDTOAndLaunchTests() throws IOException, InterruptedException {

        // search DTO
        Path p = this.buildDirectory;
        final int maxDepth = 10;
        Stream<Path> matches = java.nio.file.Files.find(p, maxDepth, (path, basicFileAttributes) -> path.getFileName().toString().equals(GENERATED_DTO_NAME));

        // take first
        Optional<Path> optionalPath = matches.findFirst();
        if (!optionalPath.isPresent()) {
            throw new IllegalStateException("Unable to find generated DTO file named '" + GENERATED_DTO_NAME + "'. Check it has been generated first");
        }

        Path generatedDtoPath = optionalPath.get();

        //copy it in test resources folder where package.json is
        java.nio.file.Files.copy(generatedDtoPath, this.rootPath.resolve(DTO_FILENAME), StandardCopyOption.REPLACE_EXISTING);

        // setup command line
        List<String> command = getDockerExec();

        // avoid root permissions in generated files
        if (SystemInfo.isLinux()) {
            command.add("groupadd -g " + getGid() + " user && useradd -u" + getUid() + " -g user user && (chown --silent -R user.user /usr/src/app || true) && npm test && (chown --silent -R user.user /usr/src/app || true)");
        } else {
            command.add("npm test");
        }
        // setup typescript compiler
        ProcessBuilder processBuilder = new ProcessBuilder().command(command).directory(rootPath.toFile()).redirectErrorStream(true).inheritIO();
        Process process = processBuilder.start();

        LOG.info("Starting TypeScript tests...");
        int resultProcess = process.waitFor();

        if (resultProcess != 0) {
            throw new IllegalStateException("DTO has failed to compile");
        }
        LOG.info("TypeScript tests OK");

    }

