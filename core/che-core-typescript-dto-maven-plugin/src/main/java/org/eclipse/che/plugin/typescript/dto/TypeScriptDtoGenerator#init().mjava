  /**
   * Init stuff is responsible to grab all DTOs found in classpath (classloader) and setup model for
   * String Template
   */
  protected void init() {

    ConfigurationBuilder configurationBuilder =
        new ConfigurationBuilder().setScanners(new SubTypesScanner(), new TypeAnnotationsScanner());
    if (useClassPath) {
      configurationBuilder.setUrls(forJavaClassPath());
    } else {
      configurationBuilder.setUrls(forClassLoader());
    }

    // keep only DTO interfaces
    Reflections reflections = new Reflections(configurationBuilder);
    List<Class<?>> annotatedWithDtos =
        new ArrayList<>(reflections.getTypesAnnotatedWith(DTO.class));
    List<Class<?>> interfacesDtos =
        annotatedWithDtos
            .stream()
            .filter(clazz -> clazz.isInterface())
            .collect(Collectors.toList());
    interfacesDtos.stream().forEach(this::analyze);
  }

