  /** Returns the fully-qualified type name including parameters. */
  private String getFqParameterizedName(Type type) {
    if (type instanceof Class<?>) {
      return ((Class<?>) type).getCanonicalName();
      //return getImplNameForDto((Class<?>)type);

    } else if (type instanceof ParameterizedType) {
      ParameterizedType pType = (ParameterizedType) type;

      StringBuilder sb = new StringBuilder(getRawClass(pType).getCanonicalName());
      sb.append('<');
      for (int i = 0; i < pType.getActualTypeArguments().length; i++) {
        if (i > 0) {
          sb.append(", ");
        }
        sb.append(getFqParameterizedName(pType.getActualTypeArguments()[i]));
      }
      sb.append('>');

      return sb.toString();

    } else {
      throw new IllegalArgumentException(
          "Can't build implementation of "
              + getDtoInterface().getSimpleName()
              + ". DtoGenerator does not handle this type "
              + type.toString());
    }
  }

