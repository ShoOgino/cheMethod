  private void emitPreamble(StringBuilder builder) {
    builder.append(
        "/*******************************************************************************\n");
    builder.append(" * Copyright (c) 2012-2016 Red Hat, Inc.\n");
    builder.append(" * All rights reserved. This program and the accompanying materials\n");
    builder.append(" * are made available under the terms of the Eclipse Public License v1.0\n");
    builder.append(" * which accompanies this distribution, and is available at\n");
    builder.append(" * http://www.eclipse.org/legal/epl-v10.html\n");
    builder.append(" *\n");
    builder.append(" * Contributors:\n");
    builder.append(" * Red Hat, Inc. - initial API and implementation\n");
    builder.append(
        " *******************************************************************************/\n\n\n");
    builder.append("// GENERATED SOURCE. DO NOT EDIT.\npackage ");
    builder.append(packageName);
    builder.append(";\n\n");
    if ("server".equals(implType)) {
      builder.append("import org.eclipse.che.dto.server.JsonSerializable;\n");
      builder.append("\n");
      builder.append("import com.google.gson.Gson;\n");
      builder.append("import com.google.gson.GsonBuilder;\n");
      builder.append("import com.google.gson.JsonArray;\n");
      builder.append("import com.google.gson.JsonElement;\n");
      builder.append("import com.google.gson.JsonNull;\n");
      builder.append("import com.google.gson.JsonObject;\n");
      builder.append("import com.google.gson.JsonParser;\n");
      builder.append("import com.google.gson.JsonPrimitive;\n");
      builder.append("\n");
      builder.append("import java.util.List;\n");
      builder.append("import java.util.Map;\n");
    }
    if ("client".equals(implType)) {
      builder.append("import org.eclipse.che.ide.dto.ClientDtoFactoryVisitor;\n");
      builder.append("import org.eclipse.che.ide.dto.DtoFactoryVisitor;\n");
      builder.append("import org.eclipse.che.ide.dto.JsonSerializable;\n");
      builder.append("import com.google.gwt.json.client.*;\n");
      builder.append("import com.google.inject.Singleton;\n");
    }
    builder.append("\n\n@SuppressWarnings({\"unchecked\", \"cast\", \"MissingOverride\"})\n");
    if ("client".equals(implType)) {
      builder.append("@Singleton\n");
      builder.append("@ClientDtoFactoryVisitor\n");
    }
    // Note that we always use fully qualified path names when referencing Types
    // so we need not add any import statements for anything.
    builder.append("public class ");
    builder.append(className);
    if ("server".equals(implType)) {
      builder.append(" implements ").append(DtoFactoryVisitor.class.getCanonicalName());
    }
    if ("client".equals(implType)) {
      builder.append(" implements ").append("DtoFactoryVisitor");
    }
    builder.append(" {\n\n");
    if ("server".equals(implType)) {
      builder.append(
          "  private static final Gson gson = org.eclipse.che.dto.server.DtoFactory.getInstance().getGson();\n\n");
      builder.append(
          "  @Override\n"
              + "  public void accept(org.eclipse.che.dto.server.DtoFactory dtoFactory) {\n");
      for (DtoImpl dto : getDtoInterfaces()) {
        String dtoInterface = dto.getDtoInterface().getCanonicalName();
        builder
            .append("    dtoFactory.registerProvider(")
            .append(dtoInterface)
            .append(".class")
            .append(", ")
            .append("new org.eclipse.che.dto.server.DtoProvider<")
            .append(dtoInterface)
            .append(">() {\n");
        builder
            .append("        public Class<? extends ")
            .append(dtoInterface)
            .append("> getImplClass() {\n")
            .append("            return ")
            .append(dto.getImplClassName())
            .append(".class;\n");
        builder.append("        }\n\n");
        builder
            .append("        public ")
            .append(dtoInterface)
            .append(" newInstance() {\n")
            .append("            return ")
            .append(dto.getImplClassName())
            .append(".make();\n");
        builder.append("        }\n\n");
        builder
            .append("        public ")
            .append(dtoInterface)
            .append(" fromJson(String json) {\n")
            .append("            return ")
            .append(dto.getImplClassName())
            .append(".fromJsonString(json);\n");
        builder.append("        }\n\n");
        builder
            .append("        public ")
            .append(dtoInterface)
            .append(" fromJson(com.google.gson.JsonElement json) {\n")
            .append("            return ")
            .append(dto.getImplClassName())
            .append(".fromJsonElement(json);\n");
        builder.append("        }\n\n");
        builder
            .append("        public ")
            .append(dtoInterface)
            .append(" clone(")
            .append(dtoInterface)
            .append(" origin) {\n")
            .append("            return new ")
            .append(dto.getImplClassName())
            .append("(origin);\n");
        builder.append("        }\n");
        builder.append("    });\n");
      }
      builder.append("  }\n\n");
    }
    if ("client".equals(implType)) {
      builder
          .append("  @Override\n")
          .append("  public void accept(org.eclipse.che.ide.dto.DtoFactory dtoFactory) {\n");
      for (DtoImpl dto : getDtoInterfaces()) {
        String dtoInterface = dto.getDtoInterface().getCanonicalName();
        builder
            .append("    dtoFactory.registerProvider(")
            .append(dtoInterface)
            .append(".class")
            .append(", ")
            .append("new org.eclipse.che.ide.dto.DtoProvider<")
            .append(dtoInterface)
            .append(">() {\n");
        builder
            .append("        public Class<? extends ")
            .append(dtoInterface)
            .append("> getImplClass() {\n")
            .append("            return ")
            .append(dto.getImplClassName())
            .append(".class;\n");
        builder.append("        }\n\n");
        builder
            .append("        public ")
            .append(dtoInterface)
            .append(" newInstance() {\n")
            .append("            return ")
            .append(dto.getImplClassName())
            .append(".make();\n");
        builder.append("        }\n\n");
        builder
            .append("        public ")
            .append(dtoInterface)
            .append(" fromJson(String json) {\n")
            .append("            return ")
            .append(dto.getImplClassName())
            .append(".fromJsonString(json);\n");
        builder.append("        }\n");
        builder.append("    });\n");
      }
      builder.append("  }\n\n");
    }
  }

