  /**
   * Expands the type and its first generic parameter (which can also have a first generic parameter
   * (...)).
   *
   * <p>For example, JsonArray&lt;JsonStringMap&lt;JsonArray&lt;SomeDto&gt;&gt;&gt; would produce
   * [JsonArray, JsonStringMap, JsonArray, SomeDto].
   */
  public static List<Type> expandType(Type curType) {
    List<Type> types = new LinkedList<>();
    do {
      types.add(curType);

      if (curType instanceof ParameterizedType) {
        Type[] genericParamTypes = ((ParameterizedType) curType).getActualTypeArguments();
        Type rawType = ((ParameterizedType) curType).getRawType();
        boolean map = rawType instanceof Class<?> && rawType == Map.class;
        if (!map && genericParamTypes.length != 1) {
          throw new IllegalStateException(
              "Multiple type parameters are not supported (neither are zero type parameters)");
        }
        Type genericParamType = map ? genericParamTypes[1] : genericParamTypes[0];
        if (genericParamType instanceof Class<?>) {
          Class<?> genericParamTypeClass = (Class<?>) genericParamType;
          if (isWhitelisted(genericParamTypeClass)) {
            assert genericParamTypeClass.equals(String.class)
                : "For JSON serialization there can be only strings or DTO types. ";
          }
        }
        curType = genericParamType;
      } else {
        if (curType instanceof Class) {
          Class<?> clazz = (Class<?>) curType;
          if (isList(clazz) || isMap(clazz)) {
            throw new DtoTemplate.MalformedDtoInterfaceException(
                "JsonArray and JsonStringMap MUST have a generic type specified (and no... ? doesn't cut it!).");
          }
        }
        curType = null;
      }
    } while (curType != null);
    return types;
  }

