    private void emitSerializer(List<Method> getters, StringBuilder builder) {
        builder.append("    @Override\n");
        builder.append("    public JsonElement toJsonElement() {\n");
        // The default toJsonElement() returns JSONs for unsafe use thus 'any' properties should be copied
        builder.append("      return toJsonElementInt(true);\n");
        builder.append("    }\n");
        builder.append("    public JsonElement toJsonElementInt(boolean ").append(COPY_JSONS_PARAM).append(") {\n");
        if (isCompactJson()) {
            builder.append("      JsonArray result = new JsonArray();\n");
            for (Method method : getters) {
                emitSerializeFieldForMethodCompact(method, builder);
            }
        } else {
            builder.append("      JsonObject result = new JsonObject();\n");
            for (Method getter : getters) {
                emitSerializeFieldForMethod(getter, builder);
            }
        }
        builder.append("      return result;\n");
        builder.append("    }\n");
        builder.append("\n");
        builder.append("    @Override\n");
        builder.append("    public String toJson() {\n");
        // The default toJson() creates its own JSON for internal printing, thus keeping JSONs values is safe
        builder.append("      return gson.toJson(toJsonElementInt(false));\n");
        builder.append("    }\n");
        builder.append("\n");
        builder.append("    @Override\n");
        builder.append("    public String toString() {\n");
        builder.append("      return toJson();\n");
        builder.append("    }\n\n");
    }

