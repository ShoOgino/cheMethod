    /**
     * Get private ssh key and upload public ssh key to repository hosting service.
     *
     * @param url
     *         url to git repository
     * @return private ssh key
     * @throws GitException
     *         if an error occurs while generating or uploading keys
     */
    @Override
    public byte[] getPrivateKey(String url) throws GitException {
        String host = GitUrl.getHost(url);
        SshPair pair;
        try {
            pair = sshService.getPair("git", host);
        } catch (ServerException | NotFoundException e) {
            throw new GitException("Unable get private ssh key");
        }

        // check keys existence
        String privateKey = pair.getPrivateKey();
        if (privateKey == null) {
            throw new GitException("Unable get private ssh key");
        }

        final String publicKey = pair.getPublicKey();
        if (publicKey != null) {
            final Optional<SshKeyUploader> optionalKeyUploader = sshKeyUploaders.stream()
                                                                                .filter(keyUploader -> keyUploader.match(url))
                                                                                .findFirst();
            if (optionalKeyUploader.isPresent()) {
                final SshKeyUploader uploader = optionalKeyUploader.get();
                try {
                    uploader.uploadKey(publicKey);
                } catch (IOException e) {
                    throw new GitException(e.getMessage(), e);
                } catch (UnauthorizedException e) {
                    // Git action might fail without uploaded public SSH key.
                    LOG.warn(String.format("Unable upload public SSH key with %s", uploader.getClass().getSimpleName()), e);
                }
            } else {
                // Git action might fail without uploaded public SSH key.
                LOG.warn(String.format("Not found ssh key uploader for %s", host));
            }
        }
        return privateKey.getBytes();
    }

