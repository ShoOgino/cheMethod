    /**
     * @param command
     *         GitCommand that will be executed
     * @param lineConsumerFactory
     *         factory that provides LineConsumer for propagate output of this command
     * @throws GitException
     *         when command execution error occurs
     */
    public static void executeGitCommand(GitCommand command, LineConsumerFactory lineConsumerFactory) throws GitException {
        CommandLine commandLine = command.getCommandLine();
        ProcessBuilder pb = new ProcessBuilder(commandLine.toShellCommand());

        Map<String, String> environment = pb.environment();

        environment.put("HOME", System.getProperty("user.home"));
        environment.put("LANG", "en_US.UTF-8");
        environment.put("GDM_LANG", "en_US.UTF-8");
        environment.put("LANGUAGE", "us");

        //set up and override command specific environment variables
        for (Map.Entry<String, String> entry : ((Map<String, String>)command.getCommandEnvironment()).entrySet()) {
            environment.put(entry.getKey(), entry.getValue());
        }

        pb.directory(command.getRepository());

        LineConsumer lineConsumer = LineConsumer.DEV_NULL;
        if (lineConsumerFactory != null) {
            lineConsumer = lineConsumerFactory.newLineConsumer();
        }

        // Add an external line consumer that comes with factory. It is typically a consumer that sends message events to the client.
        try (LineConsumer consumer = new CompositeLineConsumer(lineConsumer, command)) {
            Process process;
            try {
                process = ProcessUtil.execute(pb, consumer);
            } catch (IOException e) {
                LOG.error("Process creating failed", e);
                throw new GitException("It is not possible to execute command");
            }
            // process will be stopped after timeout
            Watchdog watcher = null;
            if (command.getTimeout() > 0) {
                watcher = new Watchdog(command.getTimeout(), TimeUnit.SECONDS);
                watcher.start(new CancellableProcessWrapper(process));
            }

            try {
                process.waitFor();
                /*
                 * Check process exit value and search for correct error message without hint and warning messages ant throw it to user.
                 */
                if (process.exitValue() != 0) {
                    String message = searchErrorMessage(command.getLines());
                    LOG.debug(String.format("Command failed!\ncommand: %s\nerror: %s", commandLine.toString(), message));
                    throw new GitException(message);
                } else {
                    LOG.debug(String.format("Command successful!\ncommand: %s", commandLine.toString()));
                }
            } catch (InterruptedException e) {
                Thread.interrupted();
            } finally {
                if (watcher != null) {
                    watcher.stop();
                }
            }
        } catch (IOException e) {
            LOG.error("An error occurred while trying to close the lineConsumer", e);
        }
    }

