    /**
     * loads status information.
     *
     * @throws GitException
     *         when it is not possible to get status information
     */
    public void load() throws GitException {
        StatusCommand status = nativeGit.createStatusCommand().setFormat(StatusFormat.PORCELAIN);
        List<String> statusOutput = status.execute();
        setClean(statusOutput.size() == 0);
        if (!isClean()) {
            added = new ArrayList<>();
            changed = new ArrayList<>();
            removed = new ArrayList<>();
            missing = new ArrayList<>();
            modified = new ArrayList<>();
            untracked = new ArrayList<>();
            untrackedFolders = new ArrayList<>();
            conflicting = new ArrayList<>();
            for (String statusLine : statusOutput) {
                //add conflict files AA, UU, any of U
                if (!(addIfMatches(conflicting, statusLine, 'A', 'A') //
                        || addIfMatches(conflicting, statusLine, 'D', 'D') //
                        || addIfMatches(conflicting, statusLine, 'U', '*') //
                        || addIfMatches(conflicting, statusLine, '*', 'U'))) {
                    // Add index-based entries
                    addIfMatches(added, statusLine, 'A', '*');
                    addIfMatches(removed, statusLine, 'D', '*');
                    addIfMatches(changed, statusLine, 'M', '*');
                    // Add working tree - based entries
                    addIfMatches(missing, statusLine, '*', 'D');
                    addIfMatches(modified, statusLine, '*', 'M');
                }
                if (statusLine.endsWith("/")) {
                    //add untracked folders
                    addIfMatches(untrackedFolders, statusLine.substring(0, statusLine.length() - 1), '?', '?');
                } else {
                    //add untracked Files
                    addIfMatches(untracked, statusLine, '?', '?');
                }
            }
        }
    }

