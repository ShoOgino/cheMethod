    /**
     * @param workspaceId
     *         id of workspace to which this MountPoint belongs to
     * @param ioRoot
     *         root directory for virtual file system. Any file in higher level than root are not accessible through
     *         virtual file system API.
     */
    @SuppressWarnings("unchecked")
    FSMountPoint(String workspaceId, java.io.File ioRoot, EventService eventService, SearcherProvider searcherProvider, SystemPathsFilter systemFilter) {
        this.workspaceId = workspaceId;
        this.ioRoot = ioRoot;
        this.eventService = eventService;
        this.searcherProvider = searcherProvider;
        this.systemFilter = systemFilter;

        root = new VirtualFileImpl(ioRoot, Path.ROOT, pathToId(Path.ROOT), this);
        pathLockFactory = new PathLockFactory(FILE_LOCK_MAX_THREADS);

        locksSerializer = new FileLockSerializer();
        lockTokensCache = new Cache[CACHE_PARTITIONS_NUM];

        metadataSerializer = new FileMetadataSerializer();
        metadataCache = new Cache[CACHE_PARTITIONS_NUM];

        for (int i = 0; i < CACHE_PARTITIONS_NUM; i++) {
            lockTokensCache[i] = new SynchronizedCache(new FileLockCache());
            metadataCache[i] = new SynchronizedCache(new FileMetadataCache());
        }
        userContext = VirtualFileSystemUserContext.newInstance();

        List<AccessControlEntry> acl = new ArrayList<>(2);
        acl.add(newDto(AccessControlEntry.class)
                        .withPrincipal(newDto(Principal.class)
                                               .withName("user")
                                               .withType(Principal.Type.GROUP))
                        .withPermissions(singletonList("all")));

        acl.add(newDto(AccessControlEntry.class)
                        .withPrincipal(newDto(Principal.class)
                                               .withName("temp_user")
                                               .withType(Principal.Type.GROUP))
                        .withPermissions(singletonList("all")));
        defaultAcl.update(acl, true);
    }

