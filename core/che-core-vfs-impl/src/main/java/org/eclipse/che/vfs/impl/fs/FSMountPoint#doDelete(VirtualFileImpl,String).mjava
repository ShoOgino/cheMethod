    private void doDelete(VirtualFileImpl virtualFile, String lockToken) throws ForbiddenException, ServerException {
        if (virtualFile.isFolder()) {
            final LinkedList<VirtualFile> q = new LinkedList<>();
            q.add(virtualFile);
            while (!q.isEmpty()) {
                for (VirtualFile child : doGetChildren((VirtualFileImpl)q.pop(), SERVICE_GIT_DIR_FILTER)) {
                    // Check permission directly for current file only.
                    // We already know parent may be deleted by current user otherwise we should not be here.
                    if (!hasPermission((VirtualFileImpl)child, BasicPermissions.WRITE.value(), false)) {
                        throw new ForbiddenException(String.format("Unable delete item '%s'. Operation not permitted. ", child.getPath()));
                    }
                    if (child.isFolder()) {
                        q.push(child);
                    } else if (isLocked((VirtualFileImpl)child)) {
                        // Do not check lock token here. It checked only when remove file directly.
                        // If folder contains locked children it may not be deleted.
                        throw new ForbiddenException(String.format("Unable delete item '%s'. Child item '%s' is locked. ",
                                                                   virtualFile.getPath(), child.getPath()));
                    }
                }
            }
        }

        // unlock file
        if (virtualFile.isFile()) {
            final FileLock fileLock = checkIsLockValidAndGet(virtualFile);
            if (NO_LOCK != fileLock) {
                doUnlock(virtualFile, fileLock, lockToken);
            }
        }

        // clear caches
        clearLockTokensCache();
        clearMetadataCache();

        final String path = virtualFile.getPath();
        boolean isFile = virtualFile.isFile();
        if (!deleteRecursive(virtualFile.getIoFile())) {
            LOG.error("Unable delete file {}", virtualFile.getIoFile());
            throw new ServerException(String.format("Unable delete item '%s'. ", path));
        }

        // delete ACL file
        final java.io.File aclFile = new java.io.File(ioRoot, toIoPath(getAclFilePath(virtualFile.getVirtualFilePath())));
        if (aclFile.delete()) {
            if (aclFile.exists()) {
                LOG.error("Unable delete ACL file {}", aclFile);
                throw new ServerException(String.format("Unable delete item '%s'. ", path));
            }
        }

        // delete metadata file
        final java.io.File metadataFile = new java.io.File(ioRoot, toIoPath(getMetadataFilePath(virtualFile.getVirtualFilePath())));
        if (metadataFile.delete()) {
            if (metadataFile.exists()) {
                LOG.error("Unable delete file metadata {}", metadataFile);
                throw new ServerException(String.format("Unable delete item '%s'. ", path));
            }
        }

        if (searcherProvider != null) {
            try {
                searcherProvider.getSearcher(this, true).delete(path, isFile);
            } catch (ServerException e) {
                LOG.error(e.getMessage(), e);
            }
        }
    }

