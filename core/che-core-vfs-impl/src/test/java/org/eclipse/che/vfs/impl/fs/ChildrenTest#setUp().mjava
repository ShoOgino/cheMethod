    @Override
    protected void setUp() throws Exception {
        super.setUp();

        folderPath = createDirectory(testRootPath, "ChildrenTest_Folder");
        String file01 = createFile(folderPath, "FILE01", DEFAULT_CONTENT_BYTES);
        String file02 = createFile(folderPath, "FILE02", DEFAULT_CONTENT_BYTES);
        String folder01 = createDirectory(folderPath, "FOLDER01");
        String folder02 = createDirectory(folderPath, "FOLDER02");

        childrenNames = new HashSet<>(4);
        childrenNames.add("FILE01");
        childrenNames.add("FILE02");
        childrenNames.add("FOLDER01");
        childrenNames.add("FOLDER02");

        properties = new HashMap<>(2);
        properties.put("MyProperty01", new String[]{"hello world"});
        properties.put("MyProperty02", new String[]{"to be or not to be"});
        writeProperties(file01, properties);
        writeProperties(file02, properties);
        writeProperties(folder01, properties);
        writeProperties(folder02, properties);

        String filePath = createFile(testRootPath, "ChildrenTest_File", DEFAULT_CONTENT_BYTES);

        String protectedFolderPath = createDirectory(testRootPath, "ChildrenTest_ProtectedFolder");
        Map<Principal, Set<String>> permissions = new HashMap<>(1);
        Principal principal = DtoFactory.getInstance().createDto(Principal.class).withName("andrew").withType(Principal.Type.USER);
        permissions.put(principal, Sets.newHashSet(BasicPermissions.ALL.value()));
        writePermissions(protectedFolderPath, permissions);

        fileId = pathToId(filePath);
        folderId = pathToId(folderPath);
        protectedFolderId = pathToId(protectedFolderPath);
    }

