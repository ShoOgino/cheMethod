    @Override
    protected void setUp() throws Exception {
        super.setUp();

        Map<Principal, Set<String>> permissions = new HashMap<>(2);
        Principal user = DtoFactory.getInstance().createDto(Principal.class).withName("andrew").withType(Principal.Type.USER);
        Principal admin = DtoFactory.getInstance().createDto(Principal.class).withName("admin").withType(Principal.Type.USER);
        permissions.put(user, Sets.newHashSet(BasicPermissions.ALL.value()));
        permissions.put(admin, Sets.newHashSet(BasicPermissions.READ.value()));

        filePath = createFile(testRootPath, "DeleteTest_File", DEFAULT_CONTENT_BYTES);
        lockedFilePath = createFile(testRootPath, "DeleteTest_LockedFile", DEFAULT_CONTENT_BYTES);
        protectedFilePath = createFile(testRootPath, "DeleteTest_ProtectedFile", DEFAULT_CONTENT_BYTES);
        folderPath = createDirectory(testRootPath, "DeleteTest_Folder");
        protectedFolderPath = createDirectory(testRootPath, "DeleteTest_ProtectedFolder");
        createTree(protectedFolderPath, 6, 4, null);
        notEmptyFolderPath = createDirectory(testRootPath, "DeleteTest_NotEmptyFolder");
        createTree(notEmptyFolderPath, 6, 4, null);
        protectedChildFolderPath = createDirectory(testRootPath, "DeleteTest_ProtectedChildFolder");
        createTree(protectedChildFolderPath, 6, 4, null);
        lockedChildFolderPath = createDirectory(testRootPath, "DeleteTest_LockedChildFolder");
        createTree(lockedChildFolderPath, 6, 4, null);

        List<String> l = flattenDirectory(protectedChildFolderPath);
        // Find one child in the list and remove write permission for 'admin'.
        writePermissions(protectedChildFolderPath + '/' + l.get(new Random().nextInt(l.size())), permissions);

        l = flattenDirectory(lockedChildFolderPath);
        // Find one child in the list and lock it.
        for (String s : l) {
            if (createLock(lockedChildFolderPath + '/' + s, lockToken, Long.MAX_VALUE)) {
                break;
            }
        }

        writePermissions(protectedFilePath, permissions);
        writePermissions(protectedFolderPath, permissions);

        createLock(lockedFilePath, lockToken, Long.MAX_VALUE);

        Map<String, String[]> properties = new HashMap<>(2);
        properties.put("MyProperty01", new String[]{"foo"});
        properties.put("MyProperty02", new String[]{"bar"});
        writeProperties(filePath, properties);


        fileId = pathToId(filePath);
        lockedFileId = pathToId(lockedFilePath);
        protectedFileId = pathToId(protectedFilePath);
        folderId = pathToId(folderPath);
        protectedFolderId = pathToId(protectedFolderPath);
        protectedChildFolderId = pathToId(protectedChildFolderPath);
        lockedChildFolderId = pathToId(lockedChildFolderPath);
        notEmptyFolderId = pathToId(notEmptyFolderPath);
    }

