    protected void validateProperties(String vfsPath, Map<String, String[]> expectedProperties, boolean recursively)
            throws Exception {
        Map<String, String[]> props = readProperties(vfsPath);
        assertNotNull(String.format("Missed properties for '%s'. ", vfsPath), props);

        for (Map.Entry<String, String[]> e : expectedProperties.entrySet()) {
            String name = e.getKey();
            assertNotNull(String.format("Missed property '%s' for '%s'. ", name, vfsPath), props.get(name));
            assertEquals(String.format("Invalid property '%s' for '%s'. ", name, vfsPath),
                         e.getValue().length, props.get(name).length);
            Set<String> expected = new HashSet<>(Arrays.asList(e.getValue()));
            Set<String> actual = new HashSet<>(Arrays.asList(props.get(name)));
            assertEquals(String.format("Invalid property '%s' for '%s'. ", name, vfsPath), expected, actual);
        }

        java.io.File ioFile = getIoFile(vfsPath);
        if (ioFile.isDirectory() && recursively) {
            java.io.File[] children = ioFile.listFiles(SERVICE_DIR_FILTER);
            assertNotNull(children);
            for (java.io.File child : children) {
                validateProperties(vfsPath + '/' + child.getName(), expectedProperties, recursively);
            }
        }
    }

