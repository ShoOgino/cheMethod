  private void captureTestWorkspaceLogs(ITestResult result) {
    Object testInstance = result.getInstance();
    for (Field field : testInstance.getClass().getDeclaredFields()) {
      field.setAccessible(true);

      Object obj;
      try {
        obj = field.get(testInstance);
      } catch (IllegalAccessException e) {
        LOG.error(
            "Field {} is inaccessible in {}.", field.getName(), testInstance.getClass().getName());
        continue;
      }

      if (!(obj instanceof TestWorkspace) || !isInjectedWorkspace(field)) {
        continue;
      }

      String testReference = getTestReference(result);
      Path pathToStoreWorkspaceLogs = Paths.get(workspaceLogsDir, testReference);
      testWorkspaceLogsReader.store((TestWorkspace) obj, pathToStoreWorkspaceLogs, false);
      Path pathToZipWithWorkspaceLogs =
          pathToStoreWorkspaceLogs.getParent().resolve(getTestResultFilename(testReference, "zip"));

      if (!Files.exists(pathToStoreWorkspaceLogs)) {
        return;
      }

      try {
        ZipUtils.zipDir(
            pathToStoreWorkspaceLogs.toFile().getAbsolutePath(),
            pathToStoreWorkspaceLogs.toFile(),
            pathToZipWithWorkspaceLogs.toFile(),
            null);
        FileUtils.deleteQuietly(pathToStoreWorkspaceLogs.toFile());
      } catch (IOException | IllegalArgumentException e) {
        LOG.warn("Error of creation zip-file with workspace logs.", e);
      }
    }
  }

