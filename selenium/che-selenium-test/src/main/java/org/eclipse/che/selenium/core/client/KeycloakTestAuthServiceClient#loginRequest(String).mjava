  private KeycloakToken loginRequest(String offlineToken) {
    KeycloakToken token = null;
    HttpURLConnection http = null;
    try {
      http =
          (HttpURLConnection)
              new URL(testOfflineToAccessTokenExchangeApiEndpointUrlProvider.get().toString())
                  .openConnection();
      http.setRequestMethod(POST);
      http.setAllowUserInteraction(false);
      http.setRequestProperty(CONTENT_TYPE, FORM_MIME_TYPE);
      http.setInstanceFollowRedirects(true);
      http.setDoOutput(true);
      OutputStream output = http.getOutputStream();
      StringBuilder sb = new StringBuilder();
      sb.append(REFRESH_TOKEN).append('=').append(offlineToken);
      output.write(sb.toString().getBytes(UTF_8));
      if (http.getResponseCode() != 200) {
        throw new RuntimeException(
            "Can not get access token using the "
                + testOfflineToAccessTokenExchangeApiEndpointUrlProvider.get().toString()
                + " REST API. Server response code: "
                + http.getResponseCode()
                + IoUtil.readStream(http.getErrorStream()));
      }
      output.close();

      final BufferedReader response =
          new BufferedReader(new InputStreamReader(http.getInputStream(), UTF_8));
      KeycloakTokenContainer tokenContainer = gson.fromJson(response, KeycloakTokenContainer.class);
      token = tokenContainer.getToken();
      token.setAccessDetails(
          gson.fromJson(
              new String(base64().decode(token.getAccessToken().split("\\.")[1]), UTF_8),
              TokenDetails.class));
      token.setRefreshDetails(
          gson.fromJson(
              new String(base64().decode(token.getRefreshToken().split("\\.")[1]), UTF_8),
              TokenDetails.class));
    } catch (IOException | JsonSyntaxException ex) {
      LOG.error(ex.getMessage(), ex);
    } finally {
      if (http != null) {
        http.disconnect();
      }
    }
    return token;
  }

