  private KeycloakToken requestToken(String grandType, List<Pair<String, ?>> params) {
    KeycloakToken token = null;
    HttpURLConnection http = null;
    final String keycloakTokenEndpoint = keycloakSettings.getKeycloakTokenEndpoint();
    if (keycloakTokenEndpoint == null) {
      throw new RuntimeException("Keycloak token endpoint is not configured");
    }
    try {

      http = (HttpURLConnection) new URL(keycloakTokenEndpoint).openConnection();
      http.setRequestMethod(POST);
      http.setAllowUserInteraction(false);
      http.setRequestProperty(CONTENT_TYPE, FORM_MIME_TYPE);
      http.setInstanceFollowRedirects(true);
      http.setDoOutput(true);
      OutputStream output = http.getOutputStream();
      StringBuilder sb = new StringBuilder();
      sb.append(GRANT_TYPE)
          .append('=')
          .append(grandType)
          .append('&')
          .append(CLIENT_ID_PARAM)
          .append('=')
          .append(CHE_CLIENT_ID);
      for (Pair<String, ?> param : params) {
        sb.append('&').append(param.first).append('=').append(param.second);
      }
      output.write(sb.toString().getBytes(UTF_8));
      if (http.getResponseCode() != 200) {
        throw new RuntimeException(
            "Can not get access token using the KeyCloak REST API. Server response code: "
                + keycloakTokenEndpoint
                + " "
                + http.getResponseCode()
                + IoUtil.readStream(http.getErrorStream()));
      }
      output.close();

      final BufferedReader response =
          new BufferedReader(new InputStreamReader(http.getInputStream(), UTF_8));
      token = gson.fromJson(response, KeycloakToken.class);
      token.setDetails(
          gson.fromJson(
              new String(base64().decode(token.getAccessToken().split("\\.")[1]), UTF_8),
              TokenDetails.class));
    } catch (IOException | JsonSyntaxException ex) {
      LOG.error(ex.getMessage(), ex);
    } finally {
      if (http != null) {
        http.disconnect();
      }
    }
    return token;
  }

