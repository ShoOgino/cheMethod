  @Test
  public void checkTextResultsPagination() {
    SearchFileResult searchFileResult;
    int sumOfFoundOccurrences = 0;
    int sumOfFoundFiles = 0;
    String path1 = "/web-java-petclinic/pom.xml";
    String path2 = "/web-java-petclinic/src/main/resources/spring/mvc-view-config.xml";
    String path3 =
        "/web-java-petclinic/src/test/java/org/springframework/samples/petclinic/web/VisitsViewTests.java";
    String expectedText1 = "62:    <webjars-bootstrap.version>2.3.0</webjars-bootstrap.version>";
    String expectedText2 =
        "36:    <!-- Simple strategy: only path extension is taken into account -->";
    String expectedText3 = "19:   import static org.hamcrest.Matchers.containsString;";
    String resultsOnFirstPage =
        "125 occurrences found in 30 files (per page results) for 'Str'. Total file count - 63";
    String resultsOnSecondPage =
        "178 occurrences found in 30 files (per page results) for 'Str'. Total file count - 63";
    String resultsOnThirdPage =
        "10 occurrences found in 3 files (per page results) for 'Str'. Total file count - 63";

    // Import the web-java-petclinic project and find all occurrences of 'Str'
    menu.runCommand(WORKSPACE, CREATE_PROJECT);
    wizard.selectProjectAndCreate(WEB_JAVA_PETCLINIC, "web-java-petclinic");
    notificationsPopupPanel.waitProgressPopupPanelClose();
    projectExplorer.waitItem("web-java-petclinic");
    projectExplorer.selectItem("web-java-petclinic");

    findTextPage.launchFindFormByKeyboard();
    findTextPage.waitFindTextMainFormIsOpen();
    findTextPage.typeTextIntoFindField("Str");
    findTextPage.waitTextIntoFindField("Str");
    findTextPage.clickOnSearchButtonMainForm();
    findTextPage.waitFindInfoPanelIsOpen();

    // Check move page buttons status on the first page
    findTextPage.sendCommandByKeyboardInFindInfoPanel(ARROW_DOWN.toString());
    assertTrue(findTextPage.checkNextPageButtonIsEnabled());
    assertFalse(findTextPage.checkPreviousPageButtonIsEnabled());
    searchFileResult = findTextPage.getResults();
    sumOfFoundFiles += searchFileResult.getFoundFilesOnPage();
    sumOfFoundOccurrences += searchFileResult.getFoundOccurrencesOnPage();
    findTextPage.clickOnNextPageButton();

    // Check move page buttons status on the second page
    findTextPage.sendCommandByKeyboardInFindInfoPanel(ARROW_DOWN.toString());
    assertTrue(findTextPage.checkNextPageButtonIsEnabled());
    assertTrue(findTextPage.checkPreviousPageButtonIsEnabled());
    searchFileResult = findTextPage.getResults();
    sumOfFoundFiles += searchFileResult.getFoundFilesOnPage();
    sumOfFoundOccurrences += searchFileResult.getFoundOccurrencesOnPage();
    findTextPage.clickOnNextPageButton();

    // Check move page buttons status on the third page
    findTextPage.sendCommandByKeyboardInFindInfoPanel(ARROW_DOWN.toString());
    assertFalse(findTextPage.checkNextPageButtonIsEnabled());
    assertTrue(findTextPage.checkPreviousPageButtonIsEnabled());
    searchFileResult = findTextPage.getResults();
    sumOfFoundFiles += searchFileResult.getFoundFilesOnPage();
    sumOfFoundOccurrences += searchFileResult.getFoundOccurrencesOnPage();

    // Checking that sums of found files and occurrences correct
    assertEquals(sumOfFoundFiles, findTextPage.getResults().getTotalNumberFoundFiles());
    assertEquals(sumOfFoundOccurrences, SUM_FOUND_OCCURRENCES);

    // Check results on the third page
    assertEquals(findTextPage.getFindInfoResults(), resultsOnThirdPage);
    findTextPage.openFileNodeByDoubleClick(path3);
    findTextPage.waitExpectedTextInFindInfoPanel(expectedText3);

    // Check results on the second page
    findTextPage.clickOnPreviousPageButton();
    assertEquals(findTextPage.getFindInfoResults(), resultsOnSecondPage);
    findTextPage.openFileNodeByDoubleClick(path2);
    findTextPage.waitExpectedTextInFindInfoPanel(expectedText2);

    // Check results on the first page. Open a file and check cursor position
    findTextPage.clickOnPreviousPageButton();
    assertEquals(findTextPage.getFindInfoResults(), resultsOnFirstPage);
    findTextPage.openFileNodeByDoubleClick(path1);
    findTextPage.waitExpectedTextInFindInfoPanel(expectedText1);
    findTextPage.selectItemInFindInfoPanelByDoubleClick(path1, expectedText1);
    editor.waitActiveEditor();
    editor.waitActiveTabFileName("spring-petclinic");
    assertEquals(editor.getPositionOfLine(), 62);

    editor.closeAllTabsByContextMenu();
  }

