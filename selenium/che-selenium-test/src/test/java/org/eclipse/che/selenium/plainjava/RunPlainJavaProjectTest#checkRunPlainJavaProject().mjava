  @Test
  public void checkRunPlainJavaProject() {
    // import the project and configure
    projectExplorer.waitProjectExplorer();
    importPlainJavaApp(CLONE_URI, PROJECT_NAME, Wizard.TypeProject.PLAIN_JAVA);
    loader.waitOnClosed();

    // check library into configure classpath form
    projectExplorer.quickExpandWithJavaScript();
    loader.waitOnClosed();
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(PROJECT, CONFIGURE_CLASSPATH);
    configureClasspath.waitConfigureClasspathFormIsOpen();
    configureClasspath.waitExpectedTextJarsAndFolderArea(
        "mockito-all-1.10.19.jar - /projects/" + PROJECT_NAME + "/store");
    configureClasspath.closeConfigureClasspathFormByIcon();

    // expand the project and use library
    projectExplorer.openItemByPath(PROJECT_NAME + "/src/com/company/nba/MainClass.java");
    codenvyEditor.waitActiveEditor();
    codenvyEditor.setCursorToLine(9);
    codenvyEditor.typeTextIntoEditor(Keys.TAB.toString());
    codenvyEditor.typeTextIntoEditor("Mockito mockito = new Mockito();");
    codenvyEditor.waitTextIntoEditor("Mockito mockito = new Mockito();");
    codenvyEditor.waitMarkerInPosition(ERROR_MARKER, 9);
    codenvyEditor.launchPropositionAssistPanel();
    codenvyEditor.enterTextIntoFixErrorPropByDoubleClick("Import 'Mockito' (org.mockito)");
    codenvyEditor.waitTextIntoEditor("import org.mockito.Mockito;");

    // Create new java class into new package
    projectExplorer.selectItem(PROJECT_NAME + "/src");
    menu.runCommand(PROJECT, NEW, PACKAGE);
    askForValueDialog.waitFormToOpen();
    askForValueDialog.typeAndWaitText(NEW_PACKAGE);
    askForValueDialog.clickOkBtn();
    askForValueDialog.waitFormToClose();
    projectExplorer.waitItemInVisibleArea(NEW_PACKAGE);
    projectExplorer.selectItem(PROJECT_NAME + "/src/base/test");
    menu.runCommand(TestMenuCommandsConstants.Project.PROJECT, NEW, JAVA_CLASS);
    loader.waitOnClosed();
    askForValueDialog.waitNewJavaClassOpen();
    askForValueDialog.typeTextInFieldName("A");
    askForValueDialog.clickOkBtnNewJavaClass();
    askForValueDialog.waitNewJavaClassClose();
    projectExplorer.waitItem(PROJECT_NAME + "/src/base/test/A.java");
    projectExplorer.openItemByPath(PROJECT_NAME + "/src/com/company/nba/MainClass.java");
    codenvyEditor.waitActiveEditor();
    codenvyEditor.setCursorToLine(12);
    codenvyEditor.typeTextIntoEditor(Keys.TAB.toString());
    codenvyEditor.typeTextIntoEditor("A a = new A();");
    codenvyEditor.waitTextIntoEditor("A a = new A();");
    codenvyEditor.waitMarkerInPosition(ERROR_MARKER, 12);
    codenvyEditor.launchPropositionAssistPanel();
    codenvyEditor.enterTextIntoFixErrorPropByDoubleClick("Import 'A' (base.test)");
    codenvyEditor.waitErrorPropositionPanelClosed();
    codenvyEditor.waitTextIntoEditor("import base.test.A;");

    // open the 'Commands Explorer' and choose java command
    projectExplorer.selectItem(PROJECT_NAME);
    loader.waitOnClosed();
    commandsExplorer.openCommandsExplorer();
    commandsExplorer.waitCommandExplorerIsOpened();
    commandsExplorer.clickAddCommandButton(RUN_GOAL);
    loader.waitOnClosed();
    commandsExplorer.chooseCommandTypeInContextMenu(JAVA_TYPE);
    loader.waitOnClosed();
    commandsExplorer.waitCommandInExplorerByName(JAVA_NAME);
    commandsEditor.waitActiveEditor();
    commandsEditor.waitTabFileWithSavedStatus(JAVA_NAME);

    // edit the name and the content of the java command into editor
    commandsEditor.typeTextIntoNameCommandField(NAME_COMMAND);
    commandsEditor.waitTextIntoNameCommandField(NAME_COMMAND);
    commandsEditor.waitTabCommandWithUnsavedStatus(JAVA_NAME);
    commandsEditor.setCursorToLine(1);
    commandsEditor.deleteAllContent();
    commandsEditor.typeTextIntoEditor(COMMAND);
    commandsEditor.waitTextIntoEditor(COMMAND);
    commandsEditor.clickOnSaveButtonInTheEditCommand();
    commandsEditor.waitTabFileWithSavedStatus(NAME_COMMAND);

    // check not starting application
    commandsEditor.clickOnRunButton();
    loader.waitOnClosed();
    consoles.waitExpectedTextIntoConsole(CONSOLE_MESS);

    // add the folder 'bin'
    projectExplorer.clickOnProjectExplorerTabInTheLeftPanel();
    commandsExplorer.waitCommandExplorerIsClosed();
    projectExplorer.waitProjectExplorer();
    projectExplorer.selectItem(PROJECT_NAME);
    projectExplorer.openContextMenuByPathSelectedItem(PROJECT_NAME);
    projectExplorer.clickOnItemInContextMenu(TestProjectExplorerContextMenuConstants.NEW);
    projectExplorer.clickOnNewContextMenuItem(
        TestProjectExplorerContextMenuConstants.SubMenuNew.FOLDER);
    askForValueDialog.typeAndWaitText("bin");
    askForValueDialog.clickOkBtn();
    loader.waitOnClosed();
    projectExplorer.waitItem(PROJECT_NAME + "/bin");

    // check starting application
    commandsEditor.selectTabByName(NAME_COMMAND);
    commandsEditor.waitActiveTabFileName(NAME_COMMAND);
    commandsEditor.clickOnRunButton();
    loader.waitOnClosed();
    consoles.waitExpectedTextIntoConsole("I love this game!");

    // check the 'bin' folder that contains compiling classes
    projectExplorer.quickExpandWithJavaScript();
    projectExplorer.waitItem(PROJECT_NAME + "/bin/com/company/nba/MainClass.class");
    projectExplorer.waitItem(PROJECT_NAME + "/bin/base/test/A.class");
  }

