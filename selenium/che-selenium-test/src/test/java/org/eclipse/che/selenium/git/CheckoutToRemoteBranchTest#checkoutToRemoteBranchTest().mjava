  @Test
  public void checkoutToRemoteBranchTest() throws Exception {
    // Preconditions and import project
    menu.runCommand(
        TestMenuCommandsConstants.Workspace.WORKSPACE,
        TestMenuCommandsConstants.Workspace.IMPORT_PROJECT);

    String cloneUrl = "git@github.com:" + gitHubUsername + "/springProjectWithSeveralBranches.git";
    importProjectFromRemoteRepo(cloneUrl, PROJECT_NAME);

    projectExplorer.waitProjectExplorer();
    projectExplorer.selectItem(PROJECT_NAME);
    uniqueValue = String.valueOf(System.currentTimeMillis());

    // Open branches and check it and status
    checkoutToSecondRemoteBranch();
    loader.waitOnClosed();
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.STATUS);
    git.waitGitStatusBarWithMess(GIT_STATUS_MESS);

    // Check content in package and project explorer
    projectExplorer.quickExpandWithJavaScript();
    projectExplorer.openItemByPath(
        PROJECT_NAME + "/src/main/java/helloworld/GreetingController.java");
    projectExplorer.openItemByPath(PROJECT_NAME + "/src/main/webapp/index.jsp");
    projectExplorer.waitItemInVisibleArea("GreetingController.java");
    projectExplorer.waitItemInVisibleArea("index.jsp");
    editor.closeFileByNameWithSaving("index.jsp");
    editor.waitWhileFileIsClosed("index.jsp");

    // Make pull
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.PULL);
    makePullSecondRemoteBranch();
    notifications.waitProgressPopupPanelClose();
    git.waitGitStatusBarWithMess(PULL_MSG);
    events.clickEventLogBtn();
    events.waitExpectedMessage(PULL_MSG);

    // Make some change in java file
    uniqueValue2 = String.valueOf(System.currentTimeMillis());
    projectExplorer.openItemByVisibleNameInExplorer("GreetingController.java");
    editor.waitActiveEditor();
    editor.selectLineAndDelete(2);
    editor.typeTextIntoEditor("//" + uniqueValue);
    editor.waitTextIntoEditor(uniqueValue);
    loader.waitOnClosed();
    editor.waitTabFileWithSavedStatus("GreetingController");
    loader.waitOnClosed();
    editor.closeFileByNameWithSaving("GreetingController");
    editor.waitWhileFileIsClosed("GreetingController");

    // Make some change in jsp file
    projectExplorer.openItemByVisibleNameInExplorer("index.jsp");
    loader.waitOnClosed();
    editor.waitActiveEditor();
    editor.selectLineAndDelete(1);
    editor.typeTextIntoEditor("<!" + uniqueValue2 + ">");
    editor.waitTextIntoEditor(uniqueValue2);
    editor.waitTabFileWithSavedStatus("index.jsp");
    loader.waitOnClosed();
    editor.closeFileByNameWithSaving("index.jsp");
    editor.waitWhileFileIsClosed("index.jsp");

    // Add all files to index and commit
    projectExplorer.selectItem(PROJECT_NAME + "/src/main");
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.ADD_TO_INDEX);
    git.waitGitStatusBarWithMess(TestGitConstants.GIT_ADD_TO_INDEX_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.GIT_ADD_TO_INDEX_SUCCESS);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    COMMIT_MESS = COMMIT_MESS + new Date().toString();
    git.waitAndRunCommit(COMMIT_MESS);
    git.waitGitStatusBarWithMess(TestGitConstants.COMMIT_MESSAGE_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.COMMIT_MESSAGE_SUCCESS);

    // Make push
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.PUSH);
    git.waitPushFormToOpen();
    git.selectPushRemoteBranchName(SECOND_BRANCH);
    git.clickPush();
    git.waitPushFormToClose();

    String pushedMessage =
        "Successfully pushed to git@github.com:"
            + gitHubUsername
            + "/springProjectWithSeveralBranches.git";
    git.waitGitStatusBarWithMess(pushedMessage);

    events.clickEventLogBtn();
    events.waitExpectedMessage(PUSH_MSG);

    // import from hosted git repository the second project
    projectExplorer.openItemByPath(PROJECT_NAME);
    loader.waitOnClosed();
    menu.runCommand(
        TestMenuCommandsConstants.Workspace.WORKSPACE,
        TestMenuCommandsConstants.Workspace.IMPORT_PROJECT);
    importProjectFromRemoteRepo(cloneUrl, PROJECT_NAME2);
    projectExplorer.waitItem(PROJECT_NAME2);
    projectExplorer.selectItem(PROJECT_NAME2);
    checkoutToSecondRemoteBranch();

    // Checking, that present earlier changes
    projectExplorer.expandPathInProjectExplorerAndOpenFile(
        PROJECT_NAME2 + "/src/main/java/helloworld", "GreetingController.java");
    loader.waitOnClosed();
    projectExplorer.expandPathInProjectExplorerAndOpenFile(
        PROJECT_NAME2 + "/src/main/webapp", 3, "index.jsp");
    loader.waitOnClosed();
    projectExplorer.openItemByVisibleNameInExplorer("GreetingController.java");
    editor.waitTextIntoEditor(uniqueValue);
    editor.closeFileByNameWithSaving("GreetingController");
    editor.waitWhileFileIsClosed("GreetingController");
    projectExplorer.openItemByVisibleNameInExplorer("index.jsp");
    editor.waitTextIntoEditor(uniqueValue2);
    editor.closeFileByNameWithSaving("index.jsp");
    editor.waitWhileFileIsClosed("index.jsp");

    // Call and checking show history
    projectExplorer.selectItem(PROJECT_NAME2 + "/src");
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.STATUS);
    loader.waitOnClosed();
    git.closeGitInfoPanel();
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    loader.waitOnClosed();
    git.waitHistoryFormToOpen();
    git.waitCommitInHistoryForm(COMMIT_MESS);
    git.clickOnCommitInHistoryForm(COMMIT_MESS);
    loader.waitOnClosed();

    // check the change into git compare form
    git.clickCompareBtnGitHistory();
    git.waitGroupGitCompareIsOpen();
    git.selectFileInChangedFilesTreePanel("GreetingController.java");
    checkChangesIntoCompareForm(uniqueValue);
    seleniumWebDriver.switchTo().parentFrame();
    git.closeGitCompareForm();
    git.waitGroupGitCompareIsOpen();
    git.selectFileInChangedFilesTreePanel("index.jsp");
    checkChangesIntoCompareForm(uniqueValue2);
  }

