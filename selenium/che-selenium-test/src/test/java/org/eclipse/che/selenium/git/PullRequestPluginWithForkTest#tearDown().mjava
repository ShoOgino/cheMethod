  @AfterClass
  public void tearDown() throws Exception {
    try {
      gitHubClientService.deleteRepo(FORK_NAME_REPO, gitHubUsername, gitHubPassword);
    } catch (NotFoundException e) {
      // ignore absent repo to delete
      LOG.debug("Repo {} is not found.", FORK_NAME_REPO);
      return;
    }

    List<String> listPullRequest =
        gitHubClientService.getNumbersOfOpenedPullRequests(
            NAME_REPO, githubUserCloneName, githubUserClonePassword);

    if (!listPullRequest.isEmpty()) {
      gitHubClientService.closePullRequest(
          NAME_REPO,
          Collections.max(listPullRequest),
          githubUserCloneName,
          githubUserClonePassword);
    }
  }

