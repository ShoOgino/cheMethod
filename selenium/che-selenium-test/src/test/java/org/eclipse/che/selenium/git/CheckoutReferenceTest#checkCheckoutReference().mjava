  @Test
  public void checkCheckoutReference() throws Exception {
    // clone test repository
    menu.runCommand(
        TestMenuCommandsConstants.Workspace.WORKSPACE,
        TestMenuCommandsConstants.Workspace.IMPORT_PROJECT);

    importProjectFromRemoteRepo(
        "git@github.com:" + gitHubUsername + "/testRepo-2.git", PROJECT_NAME);

    projectExplorer.waitProjectExplorer();
    projectExplorer.waitItem(PROJECT_NAME);
    loader.waitOnClosed();
    events.clickEventLogBtn();
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(DEFAULT_BRANCH);
    git.closeBranchesForm();

    // check the 'Cancel' button of the 'Checkout Reference'
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.CHECKOUT_REFERENCE);
    git.waitReferenceFormIsOpened();
    git.clickCheckoutReferenceCancelButton();

    // perform the 'Checkout Reference' by a commit hash
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.CHECKOUT_REFERENCE);
    git.typeReferenceAndConfirm(COMMIT_HASH);
    loader.waitOnClosed();
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(BRANCH_DETACHED_HASH);
    git.closeBranchesForm();

    // check the git history
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    git.waitHistoryFormToOpen();
    loader.waitOnClosed();
    git.clickOnHistoryRowIn–°ommitsList(0);
    git.waitCommitInHistoryForm(COMMIT_MESSAGE);
    git.waitCommitInHistoryForm(COMMIT_HASH);
    loader.waitOnClosed();
    git.closeGitHistoryForm();

    // switch to default branch
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(BRANCH_DETACHED_HASH);
    git.selectBranchAndClickCheckoutBtn(DEFAULT_BRANCH);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(DEFAULT_BRANCH);
    git.closeBranchesForm();

    // perform the 'Checkout Reference' by a tag name
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.CHECKOUT_REFERENCE);
    git.typeReferenceAndConfirm(TAG_NAME_1);
    loader.waitOnClosed();
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(BRANCH_DETACHED_TAG_1);
    git.closeBranchesForm();

    // check the git history
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    git.waitHistoryFormToOpen();
    loader.waitOnClosed();
    git.waitCommitInHistoryForm(COMMIT_MESSAGE_TAG_1);
    git.closeGitHistoryForm();

    // switch to another tag
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.CHECKOUT_REFERENCE);
    git.typeReferenceAndConfirm(TAG_NAME_2);
    loader.waitOnClosed();
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(BRANCH_DETACHED_TAG_2);
    git.closeBranchesForm();

    // Check the git history
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    git.waitHistoryFormToOpen();
    loader.waitOnClosed();
    git.waitCommitInHistoryForm(COMMIT_MESSAGE_TAG_2);
    git.closeGitHistoryForm();

    // Switch to default branch
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(BRANCH_DETACHED_TAG_2);
    git.selectBranchAndClickCheckoutBtn(DEFAULT_BRANCH);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.BRANCHES);
    git.waitBranchInTheListWithCoState(DEFAULT_BRANCH);
    git.closeBranchesForm();
  }

