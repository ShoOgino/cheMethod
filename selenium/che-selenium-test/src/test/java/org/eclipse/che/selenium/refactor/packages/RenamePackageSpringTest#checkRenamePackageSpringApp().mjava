  @Test(priority = 1)
  public void checkRenamePackageSpringApp() {
    projectExplorer.waitProjectExplorer();
    projectExplorer.waitItem(PROJECT_NAME_1);
    notificationsPopupPanel.waitProgressPopupPanelClose();
    projectExplorer.quickExpandWithJavaScript();
    loader.waitOnClosed();

    // check the project tree is not wrap after renaming the package
    projectExplorer.selectItem(PROJECT_NAME_1 + "/src/main/java/org/eclipse/qa/examples");
    menu.runCommand(
        TestMenuCommandsConstants.Assistant.ASSISTANT,
        TestMenuCommandsConstants.Assistant.Refactoring.REFACTORING,
        TestMenuCommandsConstants.Assistant.Refactoring.RENAME);

    refactor.waitRenamePackageFormIsOpen();
    refactor.setAndWaitStateUpdateReferencesCheckbox(true);
    loader.waitOnClosed();
    refactor.sendKeysIntoField(NEW_NAME_PACKAGE);
    refactor.waitTextIntoNewNameField(NEW_NAME_PACKAGE);
    loader.waitOnClosed();
    refactor.clickOkButtonRefactorForm();
    refactor.waitRenamePackageFormIsClosed();
    projectExplorer.openItemByPath(
        PROJECT_NAME_1 + "/src/main/java/org/eclipse/dev/examples/AppController.java");
    editor.waitTextIntoEditor(NEW_NAME_PACKAGE);
    projectExplorer.selectItem(PROJECT_NAME_1 + "/src/main/java/org/eclipse/dev/examples");
    menu.runCommand(
        TestMenuCommandsConstants.Assistant.ASSISTANT,
        TestMenuCommandsConstants.Assistant.Refactoring.REFACTORING,
        TestMenuCommandsConstants.Assistant.Refactoring.RENAME);

    refactor.waitRenamePackageFormIsOpen();
    refactor.setAndWaitStateUpdateReferencesCheckbox(true);
    loader.waitOnClosed();
    refactor.sendKeysIntoField(OLD_NAME_PACKAGE);
    refactor.waitTextIntoNewNameField(OLD_NAME_PACKAGE);
    loader.waitOnClosed();
    refactor.clickOkButtonRefactorForm();
    loader.waitOnClosed();
    refactor.waitRenamePackageFormIsClosed();
    projectExplorer.waitItem(PROJECT_NAME_1 + "/src/main/java/org/eclipse/qa/examples");
  }

