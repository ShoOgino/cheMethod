  @Test
  public void fetchUpdatesAndMergeRemoteBranch() {
    // preconditions clone 2 repositories in 2 projects
    projectExplorer.waitProjectExplorer();
    menu.runCommand(
        TestMenuCommandsConstants.Workspace.WORKSPACE,
        TestMenuCommandsConstants.Workspace.IMPORT_PROJECT);

    String cloneUri = "git@github.com:" + gitHubUsername + "/testRepo-1.git";
    importProjectFromRemoteRepo(cloneUri, PROJECT_1);

    loader.waitOnClosed();
    menu.runCommand(
        TestMenuCommandsConstants.Workspace.WORKSPACE,
        TestMenuCommandsConstants.Workspace.IMPORT_PROJECT);
    importProjectFromRemoteRepo(cloneUri, PROJECT_2);
    loader.waitOnClosed();

    // Open project_1, change text file and java file
    projectExplorer.openItemByPath(PROJECT_1);
    loader.waitOnClosed();
    typeTextAndSaveIntoTextFile(PROJECT_1, MESSAGE_FOR_CHANGE_CONTENT, FILE_FOR_CHANGE);
    loader.waitOnClosed();
    projectExplorer.quickExpandWithJavaScript();
    projectExplorer.openItemByPath(
        PROJECT_1 + "/src/main/java/commenttest/" + FILE_FOR_CHANGE_2 + ".java");
    typeTextAndSaveIntoJavaClass(MESSAGE_FOR_CHANGE_CONTENT, FILE_FOR_CHANGE_2);

    // Add to index
    projectExplorer.waitAndSelectItem(PROJECT_1);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.ADD_TO_INDEX);
    git.waitGitStatusBarWithMess(TestGitConstants.GIT_ADD_TO_INDEX_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.GIT_ADD_TO_INDEX_SUCCESS);

    // Remove file css from index
    projectExplorer.waitVisibilityByName(NEW_FILE_NAME);
    projectExplorer.waitAndSelectItem(PROJECT_1 + "/" + NEW_FILE_NAME);
    menu.runAndWaitCommand(
        TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.REMOVE_FROM_INDEX);
    git.waitRemoveFromIndexFormToOpen();
    git.waitRemoveFromIndexFileName("Remove file newFile.css from index?");
    git.confirmRemoveFromIndexForm();
    git.waitGitStatusBarWithMess(TestGitConstants.GIT_REMOVE_FROM_INDEX_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.GIT_REMOVE_FROM_INDEX_SUCCESS);
    projectExplorer.waitItemInvisibility(PROJECT_1 + "/" + NEW_FILE_NAME);

    // Commit changes into master branch with specific comment
    projectExplorer.waitAndSelectItem(PROJECT_1);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunCommit(COMMIT_MESSAGE);
    git.waitGitStatusBarWithMess(TestGitConstants.COMMIT_MESSAGE_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.COMMIT_MESSAGE_SUCCESS);
    projectExplorer.waitAndSelectItem(PROJECT_1);

    // Push changes to "master" branch of test remote repository
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.PUSH);
    git.waitPushFormToOpen();
    loader.waitOnClosed();
    git.selectPushRemoteBranchName(MASTER_BRANCH);
    git.clickPush();
    git.waitPushFormToClose();
    consoles.waitProcessInProcessConsoleTree("Git push");
    git.waitGitStatusBarWithMess("Successfully pushed");
    git.waitGitStatusBarWithMess("to git@github.com:" + gitHubUsername + "/testRepo-1.git");
    events.clickEventLogBtn();
    events.waitExpectedMessage(PUSH_MSG);

    // Open second project and fetch changes from master remote branch of test remote repository to
    // master local branch.
    projectExplorer.openItemByPath(PROJECT_1);
    loader.waitOnClosed();
    projectExplorer.waitAndSelectItem(PROJECT_2);
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.FETCH);
    git.waitFetchFormOpened();
    git.clickOnFetchButton();
    git.waitFetchFormClosed();
    git.waitGitStatusBarWithMess("Fetched from " + cloneUri);
    events.clickEventLogBtn();
    events.waitExpectedMessage("Fetched from " + cloneUri);

    // Open changed in first project files file_1, file_2 and removed file
    projectExplorer.openItemByPath(PROJECT_2 + "/" + FILE_FOR_CHANGE);
    editor.waitActive();
    editor.waitTextNotPresentIntoEditor(MESSAGE_FOR_CHANGE_CONTENT);
    projectExplorer.openItemByPath(
        PROJECT_2 + "/src/main/java/commenttest/" + FILE_FOR_CHANGE_2 + ".java");
    editor.waitTextNotPresentIntoEditor("//" + MESSAGE_FOR_CHANGE_CONTENT);
    projectExplorer.waitVisibilityByName(NEW_FILE_NAME);

    // Open "Git > Merge..." window, choose remote branch master and merge
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.MERGE);
    mergeRemoteBranch(ORIGIN_MASTER);
    git.waitGitStatusBarWithMess(MERGE_MESSAGE_1);
    git.waitGitStatusBarWithMess(MERGE_MESSAGE_2);
    events.clickEventLogBtn();
    events.waitExpectedMessage(MERGE_MESSAGE_1);
    events.waitExpectedMessage(MERGE_MESSAGE_2);
    editor.closeAllTabs(); // TODO clarify the behaviour of the 'git merge'

    // Checking merging
    consoles.closeProcessesArea();
    projectExplorer.openItemByPath(PROJECT_2 + "/" + FILE_FOR_CHANGE);
    editor.waitActive();
    editor.waitTextIntoEditor(MESSAGE_FOR_CHANGE_CONTENT);
    projectExplorer.openItemByPath(
        PROJECT_2 + "/src/main/java/commenttest/" + FILE_FOR_CHANGE_2 + ".java");
    editor.waitTextIntoEditor(MESSAGE_FOR_CHANGE_CONTENT);
    projectExplorer.waitItemInvisibility(PROJECT_2 + "/" + NEW_FILE_NAME);

    // Merge remote branch master again
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.MERGE);
    mergeRemoteBranch(ORIGIN_MASTER);
    git.waitGitStatusBarWithMess(MERGE_MESSAGE_3);
    events.clickEventLogBtn();
    events.waitExpectedMessage(MERGE_MESSAGE_3);

    // View and check git history
    consoles.closeProcessesArea();
    projectExplorer.waitAndSelectItem(PROJECT_2);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    git.waitTextInHistoryForm(COMMIT_MESSAGE);
    git.clickOnHistoryRowIn–°ommitsList(0);
    loader.waitOnClosed();
    git.waitContentInHistoryEditor(COMMIT_MESSAGE);
  }

