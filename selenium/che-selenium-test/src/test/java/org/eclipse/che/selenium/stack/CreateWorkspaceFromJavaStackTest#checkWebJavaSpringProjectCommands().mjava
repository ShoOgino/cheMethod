  @Test(priority = 2)
  public void checkWebJavaSpringProjectCommands() {
    String tomcatIsRunning = "/bin/bash -c $TOMCAT_HOME/bin/catalina.sh";

    consoles.executeCommandFromProjectExplorer(
        WEB_JAVA_SPRING_PROJECT, BUILD_GOAL, BUILD_COMMAND, BUILD_SUCCESS);

    consoles.executeCommandFromProjectExplorer(
        WEB_JAVA_SPRING_PROJECT,
        BUILD_GOAL,
        BUILD_COMMAND_ITEM.getItem(WEB_JAVA_SPRING_PROJECT),
        BUILD_SUCCESS);

    consoles.executeCommandFromProjectExplorer(
        WEB_JAVA_SPRING_PROJECT,
        RUN_GOAL,
        BUILD_AND_RUN_COMMAND_ITEM.getItem(WEB_JAVA_SPRING_PROJECT),
        SERVER_STARTUP_IN);
    consoles.checkWebElementVisibilityAtPreviewPage(textOnPreviewPage);
    consoles.closeProcessTabWithAskDialog(
        BUILD_AND_RUN_COMMAND_ITEM.getItem(WEB_JAVA_SPRING_PROJECT));

    consoles.executeCommandFromProjectExplorer(
        WEB_JAVA_SPRING_PROJECT,
        RUN_GOAL,
        RUN_TOMCAT_COMMAND_ITEM.getItem(WEB_JAVA_SPRING_PROJECT),
        SERVER_STARTUP_IN);
    consoles.checkWebElementVisibilityAtPreviewPage(textOnPreviewPage);

    // execute 'stop tomcat' command and check that tomcat process is not running
    projectExplorer.invokeCommandWithContextMenu(
        RUN_GOAL,
        WEB_JAVA_SPRING_PROJECT,
        STOP_TOMCAT_COMMAND_ITEM.getItem(WEB_JAVA_SPRING_PROJECT));
    consoles.selectProcessInProcessConsoleTreeByName("Terminal");
    terminal.typeIntoActiveTerminal("ps ax");
    terminal.typeIntoActiveTerminal(ENTER.toString());
    terminal.waitNoTextInFirstTerminal(tomcatIsRunning);

    consoles.executeCommandFromProjectExplorer(
        WEB_JAVA_SPRING_PROJECT,
        DEBUG_GOAL,
        DEBUG_COMMAND_ITEM.getItem(WEB_JAVA_SPRING_PROJECT),
        LISTENING_AT_ADDRESS_8000);
  }

