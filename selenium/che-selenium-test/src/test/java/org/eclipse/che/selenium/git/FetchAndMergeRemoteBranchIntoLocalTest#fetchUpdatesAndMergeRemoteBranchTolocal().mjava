  @Test
  public void fetchUpdatesAndMergeRemoteBranchTolocal() throws IOException {
    // preconditions and import the test repo
    String textFile = "README.md";
    String javaFile = "AppController";
    String jspFile = "index.jsp";
    String pathToJavaFile = "src/main/java/org/eclipse/qa/examples";
    String pathToJspFile = "src/main/webapp";
    String originMaster = "origin/master";
    String fetchMess = String.format("Fetched from %s", testRepo.getHtmlUrl());
    String mergeMess1 = "Fast-forward Merged commits:";
    String mergeMess2 = "New HEAD commit: ";
    String mergeMess3 = "Already up-to-date";

    projectExplorer.waitProjectExplorer();
    git.importJavaApp(testRepo.getHtmlUrl(), PROJECT_NAME, MAVEN);

    // change content in the test repo on GitHub
    deleteFileOnGithubSide(String.format("%s/%s", pathToJspFile, jspFile), "delete index.jsp");
    changeContentOnGithubSide(
        String.format("%s/%s.java", pathToJavaFile, javaFile), CHANGE_CONTENT);
    changeContentOnGithubSide(textFile, CHANGE_CONTENT);

    performFetch();
    git.waitGitStatusBarWithMess(fetchMess);

    // open project and check that content is not changed
    projectExplorer.quickExpandWithJavaScript();
    projectExplorer.openItemByPath(
        String.format("%s/%s/%s.java", PROJECT_NAME, pathToJavaFile, javaFile));
    editor.waitActive();
    editor.waitTextNotPresentIntoEditor(CHANGE_CONTENT);
    projectExplorer.openItemByPath(String.format("%s/%s", PROJECT_NAME, textFile));
    editor.waitActive();
    editor.waitTextNotPresentIntoEditor(CHANGE_CONTENT);
    projectExplorer.waitVisibilityByName(jspFile);

    mergeRemoteBranch(originMaster);

    git.waitGitStatusBarWithMess(mergeMess1);
    git.waitGitStatusBarWithMess(mergeMess2);
    eventsPanel.clickEventLogBtn();
    eventsPanel.waitExpectedMessage(mergeMess1);

    // check the content is changed
    editor.selectTabByName(javaFile);
    editor.waitActive();
    editor.waitTextIntoEditor(CHANGE_CONTENT);
    editor.selectTabByName(textFile);
    editor.waitActive();
    editor.waitTextIntoEditor(CHANGE_CONTENT);
    projectExplorer.waitItemInvisibility(
        String.format("%s/%s/%s", PROJECT_NAME, "src/main/webapp", jspFile));

    // merge again
    mergeRemoteBranch(originMaster);
    git.waitGitStatusBarWithMess(mergeMess3);

    // wait commit in git history
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    git.waitTextInHistoryForm(CHANGE_CONTENT);
    git.clickOnHistoryRowIn–°ommitsList(0);
    git.waitContentInHistoryEditor(CHANGE_CONTENT);
  }

