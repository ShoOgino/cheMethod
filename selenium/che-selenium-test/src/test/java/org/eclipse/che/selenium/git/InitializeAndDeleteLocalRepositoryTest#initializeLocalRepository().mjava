  @Test(priority = 1)
  public void initializeLocalRepository() {
    // Initialize git repository
    projectExplorer.waitProjectExplorer();
    projectExplorer.waitItem(PROJECT_NAME);
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.INITIALIZE_REPOSITORY);
    askDialog.acceptDialogWithText(ASK_DIALOG_TEXT);
    loader.waitOnClosed();
    git.waitGitStatusBarWithMess(TestGitConstants.GIT_INITIALIZED_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.GIT_INITIALIZED_SUCCESS);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT);
    menu.waitCommandIsDisabledInMenu(TestMenuCommandsConstants.Git.INITIALIZE_REPOSITORY);
    menu.runCommandByXpath(TestMenuCommandsConstants.Git.STATUS);
    git.waitGitStatusBarWithMess("On branch master");
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    projectExplorer.quickExpandWithJavaScript();
    projectExplorer.quickRevealToItemWithJavaScript(PATH_FOR_EXPAND);
    projectExplorer.waitItem(PATH_FOR_EXPAND);
    loader.waitOnClosed();

    // Check git log
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    warningDialog.waitWaitWarnDialogWindowWithSpecifiedTextMess(WARNING_TEXT);
    warningDialog.clickOkBtn();
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunCommit("init");
    loader.waitOnClosed();
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    git.waitTextInHistoryForm(COMMIT_MESSAGE);
    git.closeGitHistoryForm();
    git.waitHistoryFormToClose();
  }

