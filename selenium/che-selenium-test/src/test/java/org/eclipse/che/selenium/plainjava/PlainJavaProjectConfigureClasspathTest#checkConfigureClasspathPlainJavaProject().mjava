  @Test
  public void checkConfigureClasspathPlainJavaProject() {
    projectExplorer.waitProjectExplorer();
    projectExplorer.waitItem(PROJECT_NAME);
    projectExplorer.waitItem(LIB_PROJECT);
    projectExplorer.openItemByPath(PROJECT_NAME);
    projectExplorer.waitItem(PROJECT_NAME + "/bin");
    projectExplorer.waitItem(PROJECT_NAME + "/src");
    projectExplorer.waitItem(PROJECT_NAME + "/test");

    // check build path to the subfolder 'java' from context menu
    projectExplorer.openItemByPath(PROJECT_NAME + "/test");
    projectExplorer.openItemByPath(PROJECT_NAME + "/test/java");
    projectExplorer.openItemByPath(PROJECT_NAME + "/test/java/com");
    projectExplorer.openItemByPath(PROJECT_NAME + "/test/java/com/company");
    projectExplorer.selectItem(PROJECT_NAME + "/test/java");
    projectExplorer.openContextMenuByPathSelectedItem(PROJECT_NAME + "/test/java");
    projectExplorer.clickOnItemInContextMenu(BUILD_PATH);
    projectExplorer.clickOnItemInContextMenu(USE_AS_SOURCE_FOLDER);
    projectExplorer.waitItem(PROJECT_NAME + "/test/java/com/company");
    projectExplorer.selectItem(PROJECT_NAME + "/test/java");
    projectExplorer.openContextMenuByPathSelectedItem(PROJECT_NAME + "/test/java");
    projectExplorer.clickOnItemInContextMenu(BUILD_PATH);
    loader.waitOnClosed();
    projectExplorer.clickOnItemInContextMenu(UNMARK_AS_SOURCE_FOLDER);
    projectExplorer.waitDisappearItemByPath(PROJECT_NAME + "/test/java/com/company");

    // check build path to the folder 'test' from context menu
    projectExplorer.selectItem(PROJECT_NAME + "/test");
    projectExplorer.openContextMenuByPathSelectedItem(PROJECT_NAME + "/test");
    projectExplorer.clickOnItemInContextMenu(BUILD_PATH);
    projectExplorer.clickOnItemInContextMenu(USE_AS_SOURCE_FOLDER);
    projectExplorer.waitItem(PROJECT_NAME + "/test/java/com/company");
    projectExplorer.selectItem(PROJECT_NAME + "/test");
    projectExplorer.openContextMenuByPathSelectedItem(PROJECT_NAME + "/test");
    projectExplorer.clickOnItemInContextMenu(BUILD_PATH);
    loader.waitOnClosed();
    projectExplorer.clickOnItemInContextMenu(UNMARK_AS_SOURCE_FOLDER);
    projectExplorer.waitDisappearItemByPath(PROJECT_NAME + "/test/java/com/company");

    // check the 'Cancel' button of the 'Select Path' form
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(
        TestMenuCommandsConstants.Project.PROJECT,
        TestMenuCommandsConstants.Project.CONFIGURE_CLASSPATH);
    configureClasspath.waitConfigureClasspathFormIsOpen();
    configureClasspath.selectSourceCategory();
    configureClasspath.addJarOrFolderToBuildPath(ConfigureClasspath.ADD_FOLDER);
    configureClasspath.waitSelectPathFormIsOpen();
    configureClasspath.clickCancelBtnSelectPathForm();

    // check adding and deleting of a source folder
    configureClasspath.waitExpectedTextJarsAndFolderArea("/" + PROJECT_NAME + "/src");
    configureClasspath.addJarOrFolderToBuildPath(ConfigureClasspath.ADD_FOLDER);
    configureClasspath.waitSelectPathFormIsOpen();
    configureClasspath.openItemInSelectPathForm(PROJECT_NAME);
    configureClasspath.waitItemInSelectPathForm("bin");
    configureClasspath.waitItemInSelectPathForm("src");
    configureClasspath.waitItemInSelectPathForm("test");
    configureClasspath.selectItemInSelectPathForm("test");
    configureClasspath.clickOkBtnSelectPathForm();
    configureClasspath.waitExpectedTextJarsAndFolderArea("/" + PROJECT_NAME + "/test");
    configureClasspath.clickOnDoneBtnConfigureClasspath();
    projectExplorer.waitItem(PROJECT_NAME + "/test/java/com/company");
    projectExplorer.selectItem(PROJECT_NAME);
    projectExplorer.openContextMenuByPathSelectedItem(PROJECT_NAME);
    projectExplorer.clickOnItemInContextMenu(BUILD_PATH);
    projectExplorer.clickOnItemInContextMenu(
        TestProjectExplorerContextMenuConstants.SubMenuBuildPath.CONFIGURE_CLASSPATH);
    configureClasspath.waitConfigureClasspathFormIsOpen();
    configureClasspath.selectSourceCategory();
    configureClasspath.deleteJarOrFolderFromBuildPath("/" + PROJECT_NAME + "/test");
    configureClasspath.waitExpectedTextIsNotPresentInJarsAndFolderArea(
        "/" + PROJECT_NAME + "/test");
    configureClasspath.clickOnDoneBtnConfigureClasspath();
    projectExplorer.openItemByPath(PROJECT_NAME + "/test");
    projectExplorer.waitDisappearItemByPath(PROJECT_NAME + "/test/java/com/company");

    // check the library container
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(PROJECT, TestMenuCommandsConstants.Project.CONFIGURE_CLASSPATH);
    configureClasspath.waitConfigureClasspathFormIsOpen();
    configureClasspath.clickLibraryContainer("org.eclipse.jdt.launching.JRE_CONTAINER");
    for (String jarName : listJar) {
      Assert.assertTrue(configureClasspath.getTextFromJarsAndFolderArea().contains(jarName));
    }
    configureClasspath.clickLibraryContainer("org.eclipse.jdt.launching.JRE_CONTAINER");
    configureClasspath.waitExpectedTextIsNotPresentInJarsAndFolderArea(
        "rt.jar - /opt/jdk1.8.0_45/jre/lib");

    // check adding jar file
    configureClasspath.addJarOrFolderToBuildPath(ConfigureClasspath.ADD_JAR);
    configureClasspath.waitSelectPathFormIsOpen();
    configureClasspath.openItemInSelectPathForm(LIB_PROJECT);
    configureClasspath.selectItemInSelectPathForm("log4j-1.2.17.jar");
    configureClasspath.clickOkBtnSelectPathForm();
    configureClasspath.waitExpectedTextJarsAndFolderArea("log4j-1.2.17.jar - /projects/lib");
    configureClasspath.deleteJarOrFolderFromBuildPath("log4j-1.2.17.jar - /projects/lib");
    configureClasspath.waitExpectedTextIsNotPresentInJarsAndFolderArea(
        "log4j-1.2.17.jar - /projects/lib");
    configureClasspath.addJarOrFolderToBuildPath(ConfigureClasspath.ADD_JAR);
    configureClasspath.waitSelectPathFormIsOpen();
    configureClasspath.openItemInSelectPathForm(LIB_PROJECT);
    configureClasspath.selectItemInSelectPathForm("mockito-core-2.10.0.jar");
    configureClasspath.clickOkBtnSelectPathForm();
    configureClasspath.waitExpectedTextJarsAndFolderArea("mockito-core-2.10.0.jar - /projects/lib");
    configureClasspath.clickOnDoneBtnConfigureClasspath();
    projectExplorer.openItemByPath(PROJECT_NAME + "/src");
    projectExplorer.openItemByPath(PROJECT_NAME + "/src/com/company");
    projectExplorer.openItemByPath(PROJECT_NAME + "/src/com/company/Main.java");
    codenvyEditor.waitActiveEditor();
    codenvyEditor.setCursorToLine(17);
    codenvyEditor.typeTextIntoEditor(Keys.ENTER.toString());
    loader.waitOnClosed();
    codenvyEditor.setCursorToLine(17);
    codenvyEditor.typeTextIntoEditor(Keys.TAB.toString());
    codenvyEditor.typeTextIntoEditor("Mockito mockito = new Mockito();");
    codenvyEditor.waitTextIntoEditor("Mockito mockito = new Mockito();");
    codenvyEditor.waitMarkerInPosition(ERROR_MARKER, 17);
    codenvyEditor.launchPropositionAssistPanel();
    codenvyEditor.enterTextIntoFixErrorPropByDoubleClick("Import 'Mockito' (org.mockito)");
    codenvyEditor.waitErrorPropositionPanelClosed();
    codenvyEditor.waitTextIntoEditor("import org.mockito.Mockito;");
    codenvyEditor.setCursorToLine(19);
    codenvyEditor.waitMarkerDisappears(ERROR_MARKER, 19);
  }

