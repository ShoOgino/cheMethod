  @Test
  public void pushNoneUpdateTest() {
    // step 0 preconditions clone 2 repositories in 2 projects, add ssh keys for remote operations
    projectExplorer.waitProjectExplorer();
    String cloneUri = "git@github.com:" + gitHubUsername + "/testRepository.git";
    cloneProject(PROJECT_1, cloneUri);
    events.clickEventLogBtn();
    events.waitExpectedMessage(IMPORT_SUCCESS_1);
    cloneProject(PROJECT_2, cloneUri);
    events.waitExpectedMessage(IMPORT_SUCCESS_2);
    projectExplorer.waitProjectExplorer();
    loader.waitOnClosed();

    // step 1 open project change some file commit and push
    projectExplorer.openItemByPath(PROJECT_1);
    projectExplorer.openItemByPath(PROJECT_1 + "/" + FILE_FOR_CHANGED_1);
    loader.waitOnClosed();
    editor.selectLineAndDelete();
    editor.waitEditorIsEmpty();
    editor.waitActive();
    editor.typeTextIntoEditor(MESSAGE_FOR_CHANGE);
    editor.waitTabFileWithSavedStatus(FILE_FOR_CHANGED_1);
    editor.closeFileByNameWithSaving(FILE_FOR_CHANGED_1);
    addToIndexAndCommitAll(COMMIT_MESSAGE_1, PROJECT_1);
    projectExplorer.waitProjectExplorer();
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.PUSH);
    loader.waitOnClosed();
    git.waitPushFormToOpen();
    git.clickPush();
    git.waitPushFormToClose();
    loader.waitOnClosed();
    notifications.waitProgressPopupPanelClose();
    consoles.waitProcessInProcessConsoleTree("Git push");
    git.waitGitStatusBarWithMess("Successfully pushed");
    git.waitGitStatusBarWithMess("to git@github.com:" + gitHubUsername + "/testRepository.git");
    events.clickEventLogBtn();
    events.waitExpectedMessage(PUSH_MSG);
    loader.waitOnClosed();

    // step 2 open second project change another file, add to index, commit, push
    // check conflict, pull
    projectExplorer.openItemByPath(PROJECT_2);

    // change one file in second project
    projectExplorer.openItemByPath(PROJECT_2 + "/" + FILE_FOR_CHANGED_2);
    projectExplorer.waitItem(PROJECT_2 + "/" + FILE_FOR_CHANGED_2);
    editor.waitActive();
    editor.selectLineAndDelete();
    editor.waitEditorIsEmpty();
    editor.waitActive();
    editor.typeTextIntoEditor(MESSAGE_FOR_CHANGE);
    editor.waitTabFileWithSavedStatus(FILE_FOR_CHANGED_2);
    editor.closeFileByNameWithSaving(FILE_FOR_CHANGED_2);
    addToIndexAndCommitAll(COMMIT_MESSAGE_2, PROJECT_2);

    // step 3 get conflict message
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.PUSH);
    git.waitPushFormToOpen();
    git.clickPush();
    git.waitPushFormToClose();
    loader.waitOnClosed();
    notifications.waitProgressPopupPanelClose();
    consoles.waitProcessInProcessConsoleTree("Git push");
    git.waitGitStatusBarWithMess(
        "failed to push 'master -> master' to 'git@github.com:"
            + gitHubUsername
            + "/testRepository.git'."
            + " Try to merge remote changes using pull, and then push again.");
    events.clickEventLogBtn();
    events.waitExpectedMessage("Pushed to origin");

    // step 4 valid pull
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.PULL);
    git.waitPullFormToOpen();
    git.clickPull();
    git.waitPullFormToClose();
    loader.waitOnClosed();

    git.waitGitStatusBarWithMess("Successfully pulled");
    git.waitGitStatusBarWithMess("from git@github.com:" + gitHubUsername + "/testRepository.git");

    events.clickEventLogBtn();
    events.waitExpectedMessage(
        "Pulled from git@github.com:" + gitHubUsername + "/testRepository.git");
    events.clearAllMessages();

    // step 5 success push
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT,
        TestMenuCommandsConstants.Git.Remotes.REMOTES_TOP,
        TestMenuCommandsConstants.Git.Remotes.PUSH);
    git.waitPushFormToOpen();
    git.clickPush();
    git.waitPushFormToClose();
    notifications.waitProgressPopupPanelClose();

    git.waitGitStatusBarWithMess("Successfully pushed");
    git.waitGitStatusBarWithMess("to git@github.com:" + gitHubUsername + "/testRepository.git");

    events.clickEventLogBtn();
    events.waitExpectedMessage(PUSH_MSG);
  }

