  @Test(priority = 2)
  public void checkCompareWithBranch() {
    projectExplorer.waitProjectExplorer();
    projectExplorer.waitAndSelectItem(PROJECT_NAME);

    // check the 'Close' button
    menu.runCommand(GIT, COMPARE_TOP, COMPARE_WITH_BRANCH);
    git.waitGitCompareBranchFormIsOpen();
    gitCompare.clickOnCloseBranchCompareButton();

    // check the 'git compare' for another local branch
    menu.runCommand(GIT, COMPARE_TOP, COMPARE_WITH_BRANCH);
    git.waitGitCompareBranchFormIsOpen();
    git.selectBranchIntoGitCompareBranchForm("newbranch");
    git.clickOnCompareBranchFormButton();
    git.waitGroupGitCompareIsOpen();
    git.waitExpTextInGroupGitCompare(TEXT_GROUP);

    // check the 'Next' diff button
    git.selectFileInChangedFilesTreePanel("Aclass.java");
    git.clickOnGroupCompareButton();
    git.waitGitCompareFormIsOpen();
    gitCompare.clickOnNextDiffButton();
    git.setFocusOnLeftGitCompareEditor();
    git.waitExpTextIntoCompareLeftEditor("public class NewClass");
    gitCompare.clickOnNextDiffButton();
    git.waitExpTextIntoCompareLeftEditor("// <<< checking compare content >>>");

    // check the 'Previous' diff button
    gitCompare.clickOnPreviousDiffButton();
    git.waitExpTextIntoCompareLeftEditor("public class NewClass");
    git.closeGitCompareForm();
    git.closeGroupGitCompareForm();

    // check the 'git compare' for remote branch
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(GIT, COMPARE_TOP, COMPARE_WITH_BRANCH);
    git.waitGitCompareBranchFormIsOpen();
    git.selectBranchIntoGitCompareBranchForm("origin/master");
    git.clickOnCompareBranchFormButton();
    git.waitGroupGitCompareIsOpen();
    git.waitExpTextInGroupGitCompare(TEXT_GROUP);
    git.closeGroupGitCompareForm();
  }

