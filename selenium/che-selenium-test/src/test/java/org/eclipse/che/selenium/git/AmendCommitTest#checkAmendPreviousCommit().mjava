  @Test
  public void checkAmendPreviousCommit() {
    projectExplorer.waitProjectExplorer();
    projectExplorer.waitItem(PROJECT_NAME);
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(
        TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.INITIALIZE_REPOSITORY);
    askDialog.confirmAndWaitClosed();
    git.waitGitStatusBarWithMess(TestGitConstants.GIT_INITIALIZED_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.GIT_INITIALIZED_SUCCESS);
    loader.waitOnClosed();

    // perform init commit
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunCommit("init");
    loader.waitOnClosed();

    // edit java file and commit the change
    projectExplorer.selectItem(PROJECT_NAME);
    projectExplorer.quickExpandWithJavaScript();
    projectExplorer.openItemByPath(PATH_TO_FILE);
    editor.waitActiveEditor();
    editor.setCursorToLine(16);
    editor.typeTextIntoEditor("//" + CHANGE_CONTENT);
    editor.waitTextIntoEditor("//" + CHANGE_CONTENT);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunCommit(COMMIT_MESSAGE);
    git.waitGitStatusBarWithMess(TestGitConstants.COMMIT_MESSAGE_SUCCESS);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.STATUS);
    git.waitGitStatusBarWithMess(NOTHING_TO_COMMIT);

    // view git history
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    loader.waitOnClosed();
    git.waitTextInHistoryForm(COMMIT_MESSAGE);
    git.closeGitHistoryForm();

    // only amend commit message
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunAmendCommitMessage(AMEND_COMMIT_MESS);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    git.waitHistoryFormToOpen();
    git.waitCommitInHistoryFormNotPresent(COMMIT_MESSAGE);
    git.waitCommitInHistoryForm(AMEND_COMMIT_MESS);
    git.closeGitHistoryForm();

    // perform amend previous commit
    projectExplorer.openItemByPath(PATH_TO_FILE);
    editor.waitActiveEditor();
    editor.setCursorToLine(16);
    editor.selectLineAndDelete();
    editor.typeTextIntoEditor("//" + AMEND_CONTENT);
    editor.waitTextIntoEditor("//" + AMEND_CONTENT);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunAmendPreviousCommit(AMEND_COMMIT);
    git.waitGitStatusBarWithMess(TestGitConstants.COMMIT_MESSAGE_SUCCESS);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.STATUS);
    git.waitGitStatusBarWithMess(NOTHING_TO_COMMIT);

    // view git history
    projectExplorer.selectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    loader.waitOnClosed();
    git.waitTextInHistoryForm(AMEND_COMMIT);
    git.waitCommitInHistoryFormNotPresent(AMEND_COMMIT_MESS);
    loader.waitOnClosed();
    git.clickOnHistoryRowIn–°ommitsList(0);
    git.waitContentInHistoryEditor(AMEND_COMMIT);
    git.clickCompareBtnGitHistory();
    loader.waitOnClosed();
    checkChangesIntoCompareForm(AMEND_CONTENT);
  }

