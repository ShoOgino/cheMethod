  @Test(priority = 2)
  public void commitFilesTest() {
    // perform init commit without one folder
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.clickItemCheckBoxInCommitWindow("java/org/eclipse/dev/examples");
    git.waitAndRunCommit("init");
    loader.waitOnClosed();

    // check git status
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.STATUS);
    git.waitGitStatusBarWithMess(
        "new file:   src/main/java/org/eclipse/dev/examples/AppController.java");
    git.closeGitInfoPanel();
    loader.waitOnClosed();

    // perform commit of the folder
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunCommit("init");
    loader.waitOnClosed();

    // check git status
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.STATUS);
    git.waitGitStatusBarWithMess(NOTHING_TO_COMMIT_MESSAGE);
    git.closeGitInfoPanel();
    loader.waitOnClosed();

    // change content in AppController.java
    projectExplorer.openItemByPath(PROJECT_NAME + "/src/main/java/org/eclipse/dev/examples");
    projectExplorer.openItemByPath(PATH_TO_JAVA_FILE);
    editor.waitActive();
    editor.setCursorToLine(12);
    editor.typeTextIntoEditor("//" + MESSAGE_FOR_CHANGE_CONTENT);
    editor.waitTextIntoEditor("//" + MESSAGE_FOR_CHANGE_CONTENT);
    editor.waitTabFileWithSavedStatus("AppController");
    editor.closeFileByNameWithSaving("AppController");
    editor.waitWhileFileIsClosed("AppController");

    // change content in index.jsp
    projectExplorer.quickExpandWithJavaScript();
    projectExplorer.openItemByPath(PATH_TO_JSP_FILE);
    editor.waitActive();
    loader.waitOnClosed();
    editor.typeTextIntoEditor(Keys.ENTER.toString());
    editor.typeTextIntoEditor(Keys.PAGE_UP.toString());
    editor.typeTextIntoEditor(MESSAGE_FOR_CHANGE_CONTENT);
    editor.waitTextIntoEditor(MESSAGE_FOR_CHANGE_CONTENT);
    editor.waitTabFileWithSavedStatus("index.jsp");
    loader.waitOnClosed();
    editor.closeFileByNameWithSaving("index.jsp");
    editor.waitWhileFileIsClosed("index.jsp");

    // Create Hello.java class
    projectExplorer.waitAndSelectItem(PROJECT_NAME + "/src/main/java/org/eclipse/dev/examples");
    menu.runCommand(
        TestMenuCommandsConstants.Project.PROJECT,
        TestMenuCommandsConstants.Project.New.NEW,
        TestMenuCommandsConstants.Project.New.JAVA_CLASS);
    askForValueDialog.waitNewJavaClassOpen();
    askForValueDialog.typeTextInFieldName("Hello");
    askForValueDialog.clickOkBtnNewJavaClass();
    askForValueDialog.waitNewJavaClassClose();
    loader.waitOnClosed();
    projectExplorer.waitVisibilityByName("Hello.java");
    editor.waitTabIsPresent("Hello");
    loader.waitOnClosed();
    editor.closeFileByNameWithSaving("Hello");
    editor.waitWhileFileIsClosed("Hello");

    // Create script.js file
    projectExplorer.waitAndSelectItem(PROJECT_NAME + "/src/main/webapp");
    menu.runCommand(
        TestMenuCommandsConstants.Project.PROJECT,
        TestMenuCommandsConstants.Project.New.NEW,
        TestMenuCommandsConstants.Project.New.JAVASCRIPT_FILE);
    askForValueDialog.waitFormToOpen();
    askForValueDialog.typeAndWaitText("script");
    askForValueDialog.clickOkBtn();
    loader.waitOnClosed();
    askForValueDialog.waitFormToClose();

    // Commit to repository and check status
    projectExplorer.waitAndSelectItem(PROJECT_NAME);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.COMMIT);
    git.waitAndRunCommit(COMMIT_MESSAGE);
    git.waitGitStatusBarWithMess(TestGitConstants.COMMIT_MESSAGE_SUCCESS);
    events.clickEventLogBtn();
    events.waitExpectedMessage(TestGitConstants.COMMIT_MESSAGE_SUCCESS);
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.STATUS);
    git.waitGitStatusBarWithMess(NOTHING_TO_COMMIT_MESSAGE);

    // View git history
    projectExplorer.waitAndSelectItem(PROJECT_NAME + "/src/main");
    menu.runCommand(TestMenuCommandsConstants.Git.GIT, TestMenuCommandsConstants.Git.SHOW_HISTORY);
    loader.waitOnClosed();
    git.waitTextInHistoryForm(COMMIT_MESSAGE);
    loader.waitOnClosed();
    git.clickOnHistoryRowIn–°ommitsList(0);
    git.waitContentInHistoryEditor(COMMIT_MESSAGE);

    // Check diff in the git compare
    git.clickCompareBtnGitHistory();
    git.waitGroupGitCompareIsOpen();
    git.waitExpTextInGroupGitCompare(TEXT_GROUP);
    git.selectFileInChangedFilesTreePanel("AppController.java");
    checkChangesIntoCompareForm(MESSAGE_FOR_CHANGE_CONTENT);
    git.waitGroupGitCompareIsOpen();
    git.selectFileInChangedFilesTreePanel("Hello.java");
    checkChangesIntoCompareForm(EXP_TEXT);
  }

