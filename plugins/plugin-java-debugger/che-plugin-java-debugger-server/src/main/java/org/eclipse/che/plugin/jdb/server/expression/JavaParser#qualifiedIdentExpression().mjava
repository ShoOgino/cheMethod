  // $ANTLR start "qualifiedIdentExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1017:1: qualifiedIdentExpression : ( qualifiedIdentifier ->
  // qualifiedIdentifier ) ( ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT
  // $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^(
  // DOT qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
  // \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT
  // arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified
  // arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
  // | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
  // \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression
  // ) ) )? ;
  public final JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression()
      throws RecognitionException {
    JavaParser.qualifiedIdentExpression_return retval =
        new JavaParser.qualifiedIdentExpression_return();
    retval.start = input.LT(1);
    int qualifiedIdentExpression_StartIndex = input.index();
    CommonTree root_0 = null;

    Token outerDot = null;
    Token Super = null;
    Token innerDot = null;
    Token DOT493 = null;
    Token CLASS494 = null;
    Token CLASS496 = null;
    Token SUPER499 = null;
    Token IDENT500 = null;
    Token IDENT502 = null;
    Token THIS504 = null;
    JavaParser.qualifiedIdentifier_return qualifiedIdentifier491 = null;

    JavaParser.arrayDeclarator_return arrayDeclarator492 = null;

    JavaParser.arguments_return arguments495 = null;

    JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified497 = null;

    JavaParser.arguments_return arguments498 = null;

    JavaParser.arguments_return arguments501 = null;

    JavaParser.arguments_return arguments503 = null;

    JavaParser.arguments_return arguments505 = null;

    JavaParser.innerNewExpression_return innerNewExpression506 = null;

    CommonTree outerDot_tree = null;
    CommonTree Super_tree = null;
    CommonTree innerDot_tree = null;
    CommonTree DOT493_tree = null;
    CommonTree CLASS494_tree = null;
    CommonTree CLASS496_tree = null;
    CommonTree SUPER499_tree = null;
    CommonTree IDENT500_tree = null;
    CommonTree IDENT502_tree = null;
    CommonTree THIS504_tree = null;
    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
    RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
    RewriteRuleTokenStream stream_SUPER = new RewriteRuleTokenStream(adaptor, "token SUPER");
    RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
    RewriteRuleTokenStream stream_THIS = new RewriteRuleTokenStream(adaptor, "token THIS");
    RewriteRuleSubtreeStream stream_arrayDeclarator =
        new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclarator");
    RewriteRuleSubtreeStream stream_arguments =
        new RewriteRuleSubtreeStream(adaptor, "rule arguments");
    RewriteRuleSubtreeStream stream_qualifiedIdentifier =
        new RewriteRuleSubtreeStream(adaptor, "rule qualifiedIdentifier");
    RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified =
        new RewriteRuleSubtreeStream(adaptor, "rule genericTypeArgumentListSimplified");
    RewriteRuleSubtreeStream stream_innerNewExpression =
        new RewriteRuleSubtreeStream(adaptor, "rule innerNewExpression");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 106)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1019:5: ( ( qualifiedIdentifier -> qualifiedIdentifier ) (
      // ( arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression
      // CLASS ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT
      // qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^(
      // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments
      // ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
      // genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT )
      // genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^(
      // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT
      // qualifiedIdentifier innerNewExpression ) ) )? )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1019:9: ( qualifiedIdentifier -> qualifiedIdentifier ) ( (
      // arrayDeclarator -> ^( arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS
      // ) ) | arguments -> ^( METHOD_CALL qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier
      // CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
      // \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT
      // arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
      // genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT )
      // genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^(
      // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression -> ^( DOT
      // qualifiedIdentifier innerNewExpression ) ) )?
      {
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1019:9: ( qualifiedIdentifier -> qualifiedIdentifier )
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1019:13: qualifiedIdentifier
        {
          pushFollow(FOLLOW_qualifiedIdentifier_in_qualifiedIdentExpression13620);
          qualifiedIdentifier491 = qualifiedIdentifier();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0)
            stream_qualifiedIdentifier.add(qualifiedIdentifier491.getTree());

          // AST REWRITE
          // elements: qualifiedIdentifier
          // token labels:
          // rule labels: retval
          // token list labels:
          // rule list labels:
          // wildcard labels:
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval =
                new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (CommonTree) adaptor.nil();
            // 1019:61: -> qualifiedIdentifier
            {
              adaptor.addChild(root_0, stream_qualifiedIdentifier.nextTree());
            }

            retval.tree = root_0;
          }
        }

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1022:9: ( ( arrayDeclarator -> ^( arrayDeclarator
        // $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) ) | arguments -> ^( METHOD_CALL
        // qualifiedIdentifier arguments ) | outerDot= DOT ( CLASS -> ^( DOT qualifiedIdentifier CLASS ) |
        // genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
        // \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT
        // IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
        // genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT )
        // genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments
        // -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) | innerNewExpression
        // -> ^( DOT qualifiedIdentifier innerNewExpression ) ) )?
        int alt143 = 4;
        alt143 = dfa143.predict(input);
        switch (alt143) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1022:13: ( arrayDeclarator -> ^(
            // arrayDeclarator $qualifiedIdentExpression) )+ ( DOT CLASS -> ^( DOT $qualifiedIdentExpression CLASS ) )
            {
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1022:13: ( arrayDeclarator -> ^(
              // arrayDeclarator $qualifiedIdentExpression) )+
              int cnt140 = 0;
              loop140:
              do {
                int alt140 = 2;
                int LA140_0 = input.LA(1);

                if ((LA140_0 == LBRACK)) {
                  alt140 = 1;
                }

                switch (alt140) {
                  case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1022:17: arrayDeclarator
                    {
                      pushFollow(FOLLOW_arrayDeclarator_in_qualifiedIdentExpression13690);
                      arrayDeclarator492 = arrayDeclarator();

                      state._fsp--;
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_arrayDeclarator.add(arrayDeclarator492.getTree());

                      // AST REWRITE
                      // elements: arrayDeclarator, qualifiedIdentExpression
                      // token labels:
                      // rule labels: retval
                      // token list labels:
                      // rule list labels:
                      // wildcard labels:
                      if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                                adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree) adaptor.nil();
                        // 1022:57: -> ^( arrayDeclarator $qualifiedIdentExpression)
                        {
                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1022:61: ^(
                          // arrayDeclarator $qualifiedIdentExpression)
                          {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 =
                                (CommonTree)
                                    adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                            adaptor.addChild(root_1, stream_retval.nextTree());

                            adaptor.addChild(root_0, root_1);
                          }
                        }

                        retval.tree = root_0;
                      }
                    }
                    break;

                  default:
                    if (cnt140 >= 1) break loop140;
                    if (state.backtracking > 0) {
                      state.failed = true;
                      return retval;
                    }
                    EarlyExitException eee = new EarlyExitException(140, input);
                    throw eee;
                }
                cnt140++;
              } while (true);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1024:13: ( DOT CLASS -> ^( DOT
              // $qualifiedIdentExpression CLASS ) )
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1024:17: DOT CLASS
              {
                DOT493 = (Token) match(input, DOT, FOLLOW_DOT_in_qualifiedIdentExpression13758);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_DOT.add(DOT493);

                CLASS494 =
                    (Token) match(input, CLASS, FOLLOW_CLASS_in_qualifiedIdentExpression13760);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_CLASS.add(CLASS494);

                // AST REWRITE
                // elements: qualifiedIdentExpression, DOT, CLASS
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                  retval.tree = root_0;
                  RewriteRuleSubtreeStream stream_retval =
                      new RewriteRuleSubtreeStream(
                          adaptor, "rule retval", retval != null ? retval.tree : null);

                  root_0 = (CommonTree) adaptor.nil();
                  // 1024:57: -> ^( DOT $qualifiedIdentExpression CLASS )
                  {
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1024:61: ^( DOT
                    // $qualifiedIdentExpression CLASS )
                    {
                      CommonTree root_1 = (CommonTree) adaptor.nil();
                      root_1 = (CommonTree) adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                      adaptor.addChild(root_1, stream_retval.nextTree());
                      adaptor.addChild(root_1, stream_CLASS.nextNode());

                      adaptor.addChild(root_0, root_1);
                    }
                  }

                  retval.tree = root_0;
                }
              }
            }
            break;
          case 2:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1026:13: arguments
            {
              pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13830);
              arguments495 = arguments();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_arguments.add(arguments495.getTree());

              // AST REWRITE
              // elements: qualifiedIdentifier, arguments
              // token labels:
              // rule labels: retval
              // token list labels:
              // rule list labels:
              // wildcard labels:
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval =
                    new RewriteRuleSubtreeStream(
                        adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (CommonTree) adaptor.nil();
                // 1026:57: -> ^( METHOD_CALL qualifiedIdentifier arguments )
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1026:61: ^( METHOD_CALL
                  // qualifiedIdentifier arguments )
                  {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 =
                        (CommonTree)
                            adaptor.becomeRoot(
                                (CommonTree) adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                    adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                    adaptor.addChild(root_1, stream_arguments.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }
                }

                retval.tree = root_0;
              }
            }
            break;
          case 3:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1027:13: outerDot= DOT ( CLASS -> ^( DOT
            // qualifiedIdentifier CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^(
            // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier
            // genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^(
            // $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified arguments ) |
            // IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified
            // arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super= SUPER arguments -> ^(
            // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments ) |
            // innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
            {
              outerDot = (Token) match(input, DOT, FOLLOW_DOT_in_qualifiedIdentExpression13891);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_DOT.add(outerDot);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1028:13: ( CLASS -> ^( DOT qualifiedIdentifier
              // CLASS ) | genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
              // \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER
              // innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
              // genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier
              // IDENT ) genericTypeArgumentListSimplified arguments ) ) | THIS -> ^( DOT qualifiedIdentifier THIS ) | Super=
              // SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments
              // ) | innerNewExpression -> ^( DOT qualifiedIdentifier innerNewExpression ) )
              int alt142 = 5;
              switch (input.LA(1)) {
                case CLASS:
                  {
                    alt142 = 1;
                  }
                  break;
                case LESS_THAN:
                  {
                    alt142 = 2;
                  }
                  break;
                case THIS:
                  {
                    alt142 = 3;
                  }
                  break;
                case SUPER:
                  {
                    alt142 = 4;
                  }
                  break;
                case NEW:
                  {
                    alt142 = 5;
                  }
                  break;
                default:
                  if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                  }
                  NoViableAltException nvae = new NoViableAltException("", 142, 0, input);

                  throw nvae;
              }

              switch (alt142) {
                case 1:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1028:17: CLASS
                  {
                    CLASS496 =
                        (Token) match(input, CLASS, FOLLOW_CLASS_in_qualifiedIdentExpression13909);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_CLASS.add(CLASS496);

                    // AST REWRITE
                    // elements: CLASS, DOT, qualifiedIdentifier
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                      retval.tree = root_0;
                      RewriteRuleSubtreeStream stream_retval =
                          new RewriteRuleSubtreeStream(
                              adaptor, "rule retval", retval != null ? retval.tree : null);

                      root_0 = (CommonTree) adaptor.nil();
                      // 1028:57: -> ^( DOT qualifiedIdentifier CLASS )
                      {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1028:61: ^( DOT
                        // qualifiedIdentifier CLASS )
                        {
                          CommonTree root_1 = (CommonTree) adaptor.nil();
                          root_1 = (CommonTree) adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                          adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                          adaptor.addChild(root_1, stream_CLASS.nextNode());

                          adaptor.addChild(root_0, root_1);
                        }
                      }

                      retval.tree = root_0;
                    }
                  }
                  break;
                case 2:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1029:17:
                  // genericTypeArgumentListSimplified (Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
                  // \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments ) | SUPER
                  // innerDot= DOT IDENT arguments -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER )
                  // IDENT ) genericTypeArgumentListSimplified arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT
                  // qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified arguments ) )
                  {
                    pushFollow(
                        FOLLOW_genericTypeArgumentListSimplified_in_qualifiedIdentExpression13972);
                    genericTypeArgumentListSimplified497 = genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_genericTypeArgumentListSimplified.add(
                          genericTypeArgumentListSimplified497.getTree());
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1030:17: (Super= SUPER arguments -> ^(
                    // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier
                    // genericTypeArgumentListSimplified arguments ) | SUPER innerDot= DOT IDENT arguments -> ^( METHOD_CALL
                    // ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT ) genericTypeArgumentListSimplified
                    // arguments ) | IDENT arguments -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT )
                    // genericTypeArgumentListSimplified arguments ) )
                    int alt141 = 3;
                    int LA141_0 = input.LA(1);

                    if ((LA141_0 == SUPER)) {
                      int LA141_1 = input.LA(2);

                      if ((LA141_1 == DOT)) {
                        alt141 = 2;
                      } else if ((LA141_1 == LPAREN)) {
                        alt141 = 1;
                      } else {
                        if (state.backtracking > 0) {
                          state.failed = true;
                          return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 141, 1, input);

                        throw nvae;
                      }
                    } else if ((LA141_0 == IDENT)) {
                      alt141 = 3;
                    } else {
                      if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                      }
                      NoViableAltException nvae = new NoViableAltException("", 141, 0, input);

                      throw nvae;
                    }
                    switch (alt141) {
                      case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1030:21: Super= SUPER arguments
                        {
                          Super =
                              (Token)
                                  match(
                                      input, SUPER, FOLLOW_SUPER_in_qualifiedIdentExpression13997);
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_SUPER.add(Super);

                          pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression13999);
                          arguments498 = arguments();

                          state._fsp--;
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_arguments.add(arguments498.getTree());

                          // AST REWRITE
                          // elements: qualifiedIdentifier, arguments, genericTypeArgumentListSimplified
                          // token labels:
                          // rule labels: retval
                          // token list labels:
                          // rule list labels:
                          // wildcard labels:
                          if (state.backtracking == 0) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(
                                    adaptor, "rule retval", retval != null ? retval.tree : null);

                            root_0 = (CommonTree) adaptor.nil();
                            // 1030:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
                            // \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier genericTypeArgumentListSimplified arguments )
                            {
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1030:61: ^(
                              // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier
                              // genericTypeArgumentListSimplified arguments )
                              {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 =
                                    (CommonTree)
                                        adaptor.becomeRoot(
                                            (CommonTree)
                                                adaptor.create(
                                                    SUPER_CONSTRUCTOR_CALL,
                                                    Super,
                                                    "SUPER_CONSTRUCTOR_CALL"),
                                            root_1);

                                adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                                adaptor.addChild(
                                    root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                              }
                            }

                            retval.tree = root_0;
                          }
                        }
                        break;
                      case 2:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1031:21: SUPER innerDot= DOT
                        // IDENT arguments
                        {
                          SUPER499 =
                              (Token)
                                  match(
                                      input, SUPER, FOLLOW_SUPER_in_qualifiedIdentExpression14049);
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_SUPER.add(SUPER499);

                          innerDot =
                              (Token)
                                  match(input, DOT, FOLLOW_DOT_in_qualifiedIdentExpression14053);
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_DOT.add(innerDot);

                          IDENT500 =
                              (Token)
                                  match(
                                      input, IDENT, FOLLOW_IDENT_in_qualifiedIdentExpression14055);
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_IDENT.add(IDENT500);

                          pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14057);
                          arguments501 = arguments();

                          state._fsp--;
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_arguments.add(arguments501.getTree());

                          // AST REWRITE
                          // elements: qualifiedIdentifier, outerDot, IDENT, SUPER, arguments,
                          // genericTypeArgumentListSimplified, innerDot
                          // token labels: outerDot, innerDot
                          // rule labels: retval
                          // token list labels:
                          // rule list labels:
                          // wildcard labels:
                          if (state.backtracking == 0) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_outerDot =
                                new RewriteRuleTokenStream(adaptor, "token outerDot", outerDot);
                            RewriteRuleTokenStream stream_innerDot =
                                new RewriteRuleTokenStream(adaptor, "token innerDot", innerDot);
                            RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(
                                    adaptor, "rule retval", retval != null ? retval.tree : null);

                            root_0 = (CommonTree) adaptor.nil();
                            // 1031:57: -> ^( METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                            // genericTypeArgumentListSimplified arguments )
                            {
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1031:61: ^(
                              // METHOD_CALL ^( $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                              // genericTypeArgumentListSimplified arguments )
                              {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 =
                                    (CommonTree)
                                        adaptor.becomeRoot(
                                            (CommonTree) adaptor.create(METHOD_CALL, "METHOD_CALL"),
                                            root_1);

                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1031:75: ^(
                                // $innerDot ^( $outerDot qualifiedIdentifier SUPER ) IDENT )
                                {
                                  CommonTree root_2 = (CommonTree) adaptor.nil();
                                  root_2 =
                                      (CommonTree)
                                          adaptor.becomeRoot(stream_innerDot.nextNode(), root_2);

                                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1031:87: ^(
                                  // $outerDot qualifiedIdentifier SUPER )
                                  {
                                    CommonTree root_3 = (CommonTree) adaptor.nil();
                                    root_3 =
                                        (CommonTree)
                                            adaptor.becomeRoot(stream_outerDot.nextNode(), root_3);

                                    adaptor.addChild(root_3, stream_qualifiedIdentifier.nextTree());
                                    adaptor.addChild(root_3, stream_SUPER.nextNode());

                                    adaptor.addChild(root_2, root_3);
                                  }
                                  adaptor.addChild(root_2, stream_IDENT.nextNode());

                                  adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(
                                    root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                              }
                            }

                            retval.tree = root_0;
                          }
                        }
                        break;
                      case 3:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1032:21: IDENT arguments
                        {
                          IDENT502 =
                              (Token)
                                  match(
                                      input, IDENT, FOLLOW_IDENT_in_qualifiedIdentExpression14107);
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_IDENT.add(IDENT502);

                          pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14109);
                          arguments503 = arguments();

                          state._fsp--;
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_arguments.add(arguments503.getTree());

                          // AST REWRITE
                          // elements: arguments, qualifiedIdentifier, IDENT, genericTypeArgumentListSimplified, DOT
                          // token labels:
                          // rule labels: retval
                          // token list labels:
                          // rule list labels:
                          // wildcard labels:
                          if (state.backtracking == 0) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(
                                    adaptor, "rule retval", retval != null ? retval.tree : null);

                            root_0 = (CommonTree) adaptor.nil();
                            // 1032:57: -> ^( METHOD_CALL ^( DOT qualifiedIdentifier IDENT )
                            // genericTypeArgumentListSimplified arguments )
                            {
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1032:61: ^(
                              // METHOD_CALL ^( DOT qualifiedIdentifier IDENT ) genericTypeArgumentListSimplified
                              // arguments )
                              {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 =
                                    (CommonTree)
                                        adaptor.becomeRoot(
                                            (CommonTree) adaptor.create(METHOD_CALL, "METHOD_CALL"),
                                            root_1);

                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1032:75: ^( DOT
                                // qualifiedIdentifier IDENT )
                                {
                                  CommonTree root_2 = (CommonTree) adaptor.nil();
                                  root_2 =
                                      (CommonTree)
                                          adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                  adaptor.addChild(root_2, stream_qualifiedIdentifier.nextTree());
                                  adaptor.addChild(root_2, stream_IDENT.nextNode());

                                  adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(
                                    root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                              }
                            }

                            retval.tree = root_0;
                          }
                        }
                        break;
                    }
                  }
                  break;
                case 3:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1034:17: THIS
                  {
                    THIS504 =
                        (Token) match(input, THIS, FOLLOW_THIS_in_qualifiedIdentExpression14184);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_THIS.add(THIS504);

                    // AST REWRITE
                    // elements: qualifiedIdentifier, DOT, THIS
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                      retval.tree = root_0;
                      RewriteRuleSubtreeStream stream_retval =
                          new RewriteRuleSubtreeStream(
                              adaptor, "rule retval", retval != null ? retval.tree : null);

                      root_0 = (CommonTree) adaptor.nil();
                      // 1034:57: -> ^( DOT qualifiedIdentifier THIS )
                      {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1034:61: ^( DOT
                        // qualifiedIdentifier THIS )
                        {
                          CommonTree root_1 = (CommonTree) adaptor.nil();
                          root_1 = (CommonTree) adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                          adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                          adaptor.addChild(root_1, stream_THIS.nextNode());

                          adaptor.addChild(root_0, root_1);
                        }
                      }

                      retval.tree = root_0;
                    }
                  }
                  break;
                case 4:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1035:17: Super= SUPER arguments
                  {
                    Super =
                        (Token) match(input, SUPER, FOLLOW_SUPER_in_qualifiedIdentExpression14250);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_SUPER.add(Super);

                    pushFollow(FOLLOW_arguments_in_qualifiedIdentExpression14252);
                    arguments505 = arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_arguments.add(arguments505.getTree());

                    // AST REWRITE
                    // elements: arguments, qualifiedIdentifier
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                      retval.tree = root_0;
                      RewriteRuleSubtreeStream stream_retval =
                          new RewriteRuleSubtreeStream(
                              adaptor, "rule retval", retval != null ? retval.tree : null);

                      root_0 = (CommonTree) adaptor.nil();
                      // 1035:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier
                      // arguments )
                      {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1035:61: ^(
                        // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] qualifiedIdentifier arguments )
                        {
                          CommonTree root_1 = (CommonTree) adaptor.nil();
                          root_1 =
                              (CommonTree)
                                  adaptor.becomeRoot(
                                      (CommonTree)
                                          adaptor.create(
                                              SUPER_CONSTRUCTOR_CALL,
                                              Super,
                                              "SUPER_CONSTRUCTOR_CALL"),
                                      root_1);

                          adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                          adaptor.addChild(root_1, stream_arguments.nextTree());

                          adaptor.addChild(root_0, root_1);
                        }
                      }

                      retval.tree = root_0;
                    }
                  }
                  break;
                case 5:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1036:17: innerNewExpression
                  {
                    pushFollow(FOLLOW_innerNewExpression_in_qualifiedIdentExpression14300);
                    innerNewExpression506 = innerNewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_innerNewExpression.add(innerNewExpression506.getTree());

                    // AST REWRITE
                    // elements: qualifiedIdentifier, innerNewExpression, DOT
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                      retval.tree = root_0;
                      RewriteRuleSubtreeStream stream_retval =
                          new RewriteRuleSubtreeStream(
                              adaptor, "rule retval", retval != null ? retval.tree : null);

                      root_0 = (CommonTree) adaptor.nil();
                      // 1036:57: -> ^( DOT qualifiedIdentifier innerNewExpression )
                      {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1036:61: ^( DOT
                        // qualifiedIdentifier innerNewExpression )
                        {
                          CommonTree root_1 = (CommonTree) adaptor.nil();
                          root_1 = (CommonTree) adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                          adaptor.addChild(root_1, stream_qualifiedIdentifier.nextTree());
                          adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                          adaptor.addChild(root_0, root_1);
                        }
                      }

                      retval.tree = root_0;
                    }
                  }
                  break;
              }
            }
            break;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 106, qualifiedIdentExpression_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "qualifiedIdentExpression"

