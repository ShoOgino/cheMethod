    // $ANTLR start "interfaceTopLevelScope"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:224:1: interfaceTopLevelScope : ^(
    // INTERFACE_TOP_LEVEL_SCOPE ( interfaceScopeDeclarations )* ) ;
    public final void interfaceTopLevelScope() throws RecognitionException {
        int interfaceTopLevelScope_StartIndex = input.index();
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 14)) {
                return;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:225:3: ( ^( INTERFACE_TOP_LEVEL_SCOPE (
            // interfaceScopeDeclarations )* ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:226:3: ^( INTERFACE_TOP_LEVEL_SCOPE (
            // interfaceScopeDeclarations )* )
            {
                match(input, INTERFACE_TOP_LEVEL_SCOPE, FOLLOW_INTERFACE_TOP_LEVEL_SCOPE_in_interfaceTopLevelScope553);
                if (state.failed) return;

                if (input.LA(1) == Token.DOWN) {
                    match(input, Token.DOWN, null);
                    if (state.failed) return;
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:226:31: ( interfaceScopeDeclarations )*
                    loop33:
                    do {
                        int alt33 = 2;
                        int LA33_0 = input.LA(1);

                        if ((LA33_0 == AT || LA33_0 == CLASS || LA33_0 == ENUM || LA33_0 == INTERFACE || LA33_0 == FUNCTION_METHOD_DECL ||
                             LA33_0 == VAR_DECLARATION || LA33_0 == VOID_METHOD_DECL)) {
                            alt33 = 1;
                        }


                        switch (alt33) {
                            case 1:
                                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: interfaceScopeDeclarations
                            {
                                pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceTopLevelScope555);
                                interfaceScopeDeclarations();

                                state._fsp--;
                                if (state.failed) return;

                            }
                            break;

                            default:
                                break loop33;
                        }
                    } while (true);


                    match(input, Token.UP, null);
                    if (state.failed) return;
                }

            }

        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
        } finally {
            if (state.backtracking > 0) {
                memoize(input, 14, interfaceTopLevelScope_StartIndex);
            }
        }
        return;
    }
    // $ANTLR end "interfaceTopLevelScope"

