  /**
   * Get value of variable with specified path. Each item in path is name of variable.
   *
   * <p>Path must be specified according to the following rules:
   *
   * <ol>
   *   <li>If need to get field of this object of current frame then first element in array always
   *       should be 'this'.
   *   <li>If need to get static field in current frame then first element in array always should be
   *       'static'.
   *   <li>If need to get local variable in current frame then first element should be the name of
   *       local variable.
   * </ol>
   *
   * Here is example. <br>
   * Assume we have next hierarchy of classes and breakpoint set in line: <i>// breakpoint</i>:
   *
   * <pre>
   *    class A {
   *       private String str;
   *       ...
   *    }
   *
   *    class B {
   *       private A a;
   *       ....
   *
   *       void method() {
   *          A var = new A();
   *          var.setStr(...);
   *          a = var;
   *          // breakpoint
   *       }
   *    }
   * </pre>
   *
   * * There are two ways to access variable <i>str</i> in class <i>A</i>:
   *
   * <ol>
   *   <li>Through field <i>a</i> in class <i>B</i>: ['this', 'a', 'str']
   *   <li>Through local variable <i>var</i> in method <i>B.method()</i>: ['var', 'str']
   * </ol>
   *
   * @param variablePath path to variable
   * @return variable or <code>null</code> if variable not found
   * @throws DebuggerException when any other errors occur when try to access the variable
   */
  @Override
  public SimpleValue getValue(VariablePath variablePath) throws DebuggerException {
    lock.lock();
    try {
      return getValue(variablePath, getCurrentThread().uniqueID(), 0);
    } finally {
      lock.unlock();
    }
  }

