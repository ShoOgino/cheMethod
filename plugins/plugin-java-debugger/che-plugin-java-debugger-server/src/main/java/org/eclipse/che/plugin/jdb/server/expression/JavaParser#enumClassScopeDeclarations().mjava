  // $ANTLR start "enumClassScopeDeclarations"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:417:1: enumClassScopeDeclarations : SEMI ( classScopeDeclarations
  // )* -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
  public final JavaParser.enumClassScopeDeclarations_return enumClassScopeDeclarations()
      throws RecognitionException {
    JavaParser.enumClassScopeDeclarations_return retval =
        new JavaParser.enumClassScopeDeclarations_return();
    retval.start = input.LT(1);
    int enumClassScopeDeclarations_StartIndex = input.index();
    CommonTree root_0 = null;

    Token SEMI57 = null;
    JavaParser.classScopeDeclarations_return classScopeDeclarations58 = null;

    CommonTree SEMI57_tree = null;
    RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
    RewriteRuleSubtreeStream stream_classScopeDeclarations =
        new RewriteRuleSubtreeStream(adaptor, "rule classScopeDeclarations");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 18)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:418:5: ( SEMI ( classScopeDeclarations )* -> ^(
      // CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:418:9: SEMI ( classScopeDeclarations )*
      {
        SEMI57 = (Token) match(input, SEMI, FOLLOW_SEMI_in_enumClassScopeDeclarations5386);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_SEMI.add(SEMI57);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:418:14: ( classScopeDeclarations )*
        loop18:
        do {
          int alt18 = 2;
          int LA18_0 = input.LA(1);

          if ((LA18_0 == AT
              || LA18_0 == LCURLY
              || LA18_0 == LESS_THAN
              || LA18_0 == SEMI
              || LA18_0 == ABSTRACT
              || LA18_0 == BOOLEAN
              || LA18_0 == BYTE
              || (LA18_0 >= CHAR && LA18_0 <= CLASS)
              || LA18_0 == DOUBLE
              || LA18_0 == ENUM
              || LA18_0 == FINAL
              || LA18_0 == FLOAT
              || LA18_0 == INTERFACE
              || (LA18_0 >= INT && LA18_0 <= NATIVE)
              || (LA18_0 >= PRIVATE && LA18_0 <= PUBLIC)
              || (LA18_0 >= SHORT && LA18_0 <= STRICTFP)
              || LA18_0 == SYNCHRONIZED
              || LA18_0 == TRANSIENT
              || (LA18_0 >= VOID && LA18_0 <= VOLATILE)
              || LA18_0 == IDENT)) {
            alt18 = 1;
          }

          switch (alt18) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: classScopeDeclarations
              {
                pushFollow(FOLLOW_classScopeDeclarations_in_enumClassScopeDeclarations5388);
                classScopeDeclarations58 = classScopeDeclarations();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_classScopeDeclarations.add(classScopeDeclarations58.getTree());
              }
              break;

            default:
              break loop18;
          }
        } while (true);

        // AST REWRITE
        // elements: classScopeDeclarations
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 419:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$SEMI, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:419:13: ^( CLASS_TOP_LEVEL_SCOPE[$SEMI,
            // \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(
                                  CLASS_TOP_LEVEL_SCOPE, SEMI57, "CLASS_TOP_LEVEL_SCOPE"),
                          root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:419:69: ( classScopeDeclarations )*
              while (stream_classScopeDeclarations.hasNext()) {
                adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());
              }
              stream_classScopeDeclarations.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 18, enumClassScopeDeclarations_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "enumClassScopeDeclarations"

