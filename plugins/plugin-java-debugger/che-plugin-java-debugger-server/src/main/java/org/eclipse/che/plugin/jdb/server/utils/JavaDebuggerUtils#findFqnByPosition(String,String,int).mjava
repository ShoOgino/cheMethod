  /**
   * Return nested class fqn if line with number {@code lineNumber} contains such element, otherwise
   * return outer class fqn.
   *
   * @param projectPath project path which contains class with {@code outerClassFqn}
   * @param outerClassFqn fqn outer class
   * @param lineNumber line position to search
   * @throws DebuggerException
   */
  public String findFqnByPosition(String projectPath, String outerClassFqn, int lineNumber)
      throws DebuggerException {
    if (projectPath == null) {
      return outerClassFqn;
    }

    IJavaProject project = MODEL.getJavaProject(projectPath);

    IType outerClass;
    IMember iMember;
    try {
      outerClass = project.findType(outerClassFqn);

      if (outerClass == null) {
        return outerClassFqn;
      }

      String source;
      if (outerClass.isBinary()) {
        IClassFile classFile = outerClass.getClassFile();
        source = classFile.getSource();
      } else {
        ICompilationUnit unit = outerClass.getCompilationUnit();
        source = unit.getSource();
      }

      Document document = new Document(source);
      IRegion region = document.getLineInformation(lineNumber);
      int start = region.getOffset();
      int end = start + region.getLength();

      iMember = binSearch(outerClass, start, end);
    } catch (JavaModelException e) {
      throw new DebuggerException(
          format(
              "Unable to find source for class with fqn '%s' in the project '%s'",
              outerClassFqn, project),
          e);
    } catch (BadLocationException e) {
      throw new DebuggerException("Unable to calculate breakpoint location", e);
    }

    if (iMember instanceof IType) {
      return ((IType) iMember).getFullyQualifiedName();
    }
    if (iMember != null) {
      return iMember.getDeclaringType().getFullyQualifiedName();
    }

    return outerClassFqn;
  }

