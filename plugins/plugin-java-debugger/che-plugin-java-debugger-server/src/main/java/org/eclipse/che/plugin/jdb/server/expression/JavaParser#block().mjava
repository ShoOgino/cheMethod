  // $ANTLR start "block"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:739:1: block : LCURLY ( blockStatement )* RCURLY -> ^(
  // BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) ;
  public final JavaParser.block_return block() throws RecognitionException {
    JavaParser.block_return retval = new JavaParser.block_return();
    retval.start = input.LT(1);
    int block_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LCURLY265 = null;
    Token RCURLY267 = null;
    JavaParser.blockStatement_return blockStatement266 = null;

    CommonTree LCURLY265_tree = null;
    CommonTree RCURLY267_tree = null;
    RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
    RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
    RewriteRuleSubtreeStream stream_blockStatement =
        new RewriteRuleSubtreeStream(adaptor, "rule blockStatement");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 72)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:740:5: ( LCURLY ( blockStatement )* RCURLY -> ^(
      // BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:740:9: LCURLY ( blockStatement )* RCURLY
      {
        LCURLY265 = (Token) match(input, LCURLY, FOLLOW_LCURLY_in_block8618);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LCURLY.add(LCURLY265);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:740:16: ( blockStatement )*
        loop87:
        do {
          int alt87 = 2;
          int LA87_0 = input.LA(1);

          if ((LA87_0 == AT
              || LA87_0 == DEC
              || LA87_0 == INC
              || LA87_0 == LCURLY
              || LA87_0 == LESS_THAN
              || LA87_0 == LOGICAL_NOT
              || (LA87_0 >= LPAREN && LA87_0 <= MINUS)
              || LA87_0 == NOT
              || LA87_0 == PLUS
              || LA87_0 == SEMI
              || (LA87_0 >= ABSTRACT && LA87_0 <= BYTE)
              || (LA87_0 >= CHAR && LA87_0 <= CONTINUE)
              || (LA87_0 >= DO && LA87_0 <= DOUBLE)
              || LA87_0 == ENUM
              || (LA87_0 >= FALSE && LA87_0 <= FINAL)
              || (LA87_0 >= FLOAT && LA87_0 <= IF)
              || LA87_0 == INTERFACE
              || (LA87_0 >= INT && LA87_0 <= NULL)
              || (LA87_0 >= PRIVATE && LA87_0 <= THROW)
              || (LA87_0 >= TRANSIENT && LA87_0 <= WHILE)
              || (LA87_0 >= IDENT && LA87_0 <= STRING_LITERAL))) {
            alt87 = 1;
          }

          switch (alt87) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: blockStatement
              {
                pushFollow(FOLLOW_blockStatement_in_block8620);
                blockStatement266 = blockStatement();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_blockStatement.add(blockStatement266.getTree());
              }
              break;

            default:
              break loop87;
          }
        } while (true);

        RCURLY267 = (Token) match(input, RCURLY, FOLLOW_RCURLY_in_block8623);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_RCURLY.add(RCURLY267);

        // AST REWRITE
        // elements: blockStatement
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 741:9: -> ^( BLOCK_SCOPE[$LCURLY, \"BLOCK_SCOPE\"] ( blockStatement )* )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:741:13: ^( BLOCK_SCOPE[$LCURLY,
            // \"BLOCK_SCOPE\"] ( blockStatement )* )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(BLOCK_SCOPE, LCURLY265, "BLOCK_SCOPE"),
                          root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:741:51: ( blockStatement )*
              while (stream_blockStatement.hasNext()) {
                adaptor.addChild(root_1, stream_blockStatement.nextTree());
              }
              stream_blockStatement.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 72, block_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "block"

