    // $ANTLR start "finallyClause"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:794:1: finallyClause : FINALLY block -> block ;
    public final JavaParser.finallyClause_return finallyClause() throws RecognitionException {
        JavaParser.finallyClause_return retval = new JavaParser.finallyClause_return();
        retval.start = input.LT(1);
        int finallyClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token FINALLY344 = null;
        JavaParser.block_return block345 = null;


        CommonTree FINALLY344_tree = null;
        RewriteRuleTokenStream stream_FINALLY = new RewriteRuleTokenStream(adaptor, "token FINALLY");
        RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 78)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:795:5: ( FINALLY block -> block )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:795:9: FINALLY block
            {
                FINALLY344 = (Token)match(input, FINALLY, FOLLOW_FINALLY_in_finallyClause10054);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_FINALLY.add(FINALLY344);

                pushFollow(FOLLOW_block_in_finallyClause10056);
                block345 = block();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_block.add(block345.getTree());


                // AST REWRITE
                // elements: block
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 796:9: -> block
                    {
                        adaptor.addChild(root_0, stream_block.nextTree());

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 78, finallyClause_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "finallyClause"

