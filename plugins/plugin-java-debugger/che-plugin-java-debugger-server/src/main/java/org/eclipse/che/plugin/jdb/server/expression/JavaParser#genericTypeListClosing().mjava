  // $ANTLR start "genericTypeListClosing"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:383:1: genericTypeListClosing : ( GREATER_THAN | SHIFT_RIGHT |
  // BIT_SHIFT_RIGHT | );
  public final JavaParser.genericTypeListClosing_return genericTypeListClosing()
      throws RecognitionException {
    JavaParser.genericTypeListClosing_return retval =
        new JavaParser.genericTypeListClosing_return();
    retval.start = input.LT(1);
    int genericTypeListClosing_StartIndex = input.index();
    CommonTree root_0 = null;

    Token GREATER_THAN38 = null;
    Token SHIFT_RIGHT39 = null;
    Token BIT_SHIFT_RIGHT40 = null;

    CommonTree GREATER_THAN38_tree = null;
    CommonTree SHIFT_RIGHT39_tree = null;
    CommonTree BIT_SHIFT_RIGHT40_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 12)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:387:5: ( GREATER_THAN | SHIFT_RIGHT | BIT_SHIFT_RIGHT | )
      int alt12 = 4;
      switch (input.LA(1)) {
        case GREATER_THAN:
          {
            int LA12_1 = input.LA(2);

            if ((synpred14_Java())) {
              alt12 = 1;
            } else if ((true)) {
              alt12 = 4;
            } else {
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              NoViableAltException nvae = new NoViableAltException("", 12, 1, input);

              throw nvae;
            }
          }
          break;
        case SHIFT_RIGHT:
          {
            int LA12_2 = input.LA(2);

            if ((synpred15_Java())) {
              alt12 = 2;
            } else if ((true)) {
              alt12 = 4;
            } else {
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              NoViableAltException nvae = new NoViableAltException("", 12, 2, input);

              throw nvae;
            }
          }
          break;
        case BIT_SHIFT_RIGHT:
          {
            int LA12_3 = input.LA(2);

            if ((synpred16_Java())) {
              alt12 = 3;
            } else if ((true)) {
              alt12 = 4;
            } else {
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              NoViableAltException nvae = new NoViableAltException("", 12, 3, input);

              throw nvae;
            }
          }
          break;
        case EOF:
        case AND:
        case AND_ASSIGN:
        case ASSIGN:
        case BIT_SHIFT_RIGHT_ASSIGN:
        case COLON:
        case COMMA:
        case DIV_ASSIGN:
        case DOT:
        case ELLIPSIS:
        case EQUAL:
        case LBRACK:
        case LCURLY:
        case LOGICAL_AND:
        case LOGICAL_OR:
        case LPAREN:
        case MINUS_ASSIGN:
        case MOD_ASSIGN:
        case NOT_EQUAL:
        case OR:
        case OR_ASSIGN:
        case PLUS_ASSIGN:
        case QUESTION:
        case RBRACK:
        case RCURLY:
        case RPAREN:
        case SEMI:
        case SHIFT_LEFT_ASSIGN:
        case SHIFT_RIGHT_ASSIGN:
        case STAR_ASSIGN:
        case XOR:
        case XOR_ASSIGN:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case EXTENDS:
        case FLOAT:
        case IMPLEMENTS:
        case INT:
        case LONG:
        case SHORT:
        case SUPER:
        case THIS:
        case VOID:
        case IDENT:
          {
            alt12 = 4;
          }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 12, 0, input);

          throw nvae;
      }

      switch (alt12) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:387:9: GREATER_THAN
          {
            root_0 = (CommonTree) adaptor.nil();

            GREATER_THAN38 =
                (Token)
                    match(input, GREATER_THAN, FOLLOW_GREATER_THAN_in_genericTypeListClosing5119);
            if (state.failed) return retval;
            if (state.backtracking == 0) {
              GREATER_THAN38_tree = (CommonTree) adaptor.create(GREATER_THAN38);
              adaptor.addChild(root_0, GREATER_THAN38_tree);
            }
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:388:9: SHIFT_RIGHT
          {
            root_0 = (CommonTree) adaptor.nil();

            SHIFT_RIGHT39 =
                (Token) match(input, SHIFT_RIGHT, FOLLOW_SHIFT_RIGHT_in_genericTypeListClosing5129);
            if (state.failed) return retval;
            if (state.backtracking == 0) {
              SHIFT_RIGHT39_tree = (CommonTree) adaptor.create(SHIFT_RIGHT39);
              adaptor.addChild(root_0, SHIFT_RIGHT39_tree);
            }
          }
          break;
        case 3:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:389:9: BIT_SHIFT_RIGHT
          {
            root_0 = (CommonTree) adaptor.nil();

            BIT_SHIFT_RIGHT40 =
                (Token)
                    match(
                        input,
                        BIT_SHIFT_RIGHT,
                        FOLLOW_BIT_SHIFT_RIGHT_in_genericTypeListClosing5139);
            if (state.failed) return retval;
            if (state.backtracking == 0) {
              BIT_SHIFT_RIGHT40_tree = (CommonTree) adaptor.create(BIT_SHIFT_RIGHT40);
              adaptor.addChild(root_0, BIT_SHIFT_RIGHT40_tree);
            }
          }
          break;
        case 4:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:391:5:
          {
            root_0 = (CommonTree) adaptor.nil();
          }
          break;
      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 12, genericTypeListClosing_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "genericTypeListClosing"

