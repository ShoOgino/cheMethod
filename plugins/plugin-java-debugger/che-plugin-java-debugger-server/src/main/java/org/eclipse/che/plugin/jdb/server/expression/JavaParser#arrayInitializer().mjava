  // $ANTLR start "arrayInitializer"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:522:1: arrayInitializer : LCURLY ( variableInitializer ( COMMA
  // variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* ) ;
  public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
    JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
    retval.start = input.LT(1);
    int arrayInitializer_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LCURLY143 = null;
    Token COMMA145 = null;
    Token COMMA147 = null;
    Token RCURLY148 = null;
    JavaParser.variableInitializer_return variableInitializer144 = null;

    JavaParser.variableInitializer_return variableInitializer146 = null;

    CommonTree LCURLY143_tree = null;
    CommonTree COMMA145_tree = null;
    CommonTree COMMA147_tree = null;
    CommonTree RCURLY148_tree = null;
    RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
    RewriteRuleSubtreeStream stream_variableInitializer =
        new RewriteRuleSubtreeStream(adaptor, "rule variableInitializer");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 35)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:523:5: ( LCURLY ( variableInitializer ( COMMA
      // variableInitializer )* ( COMMA )? )? RCURLY -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer
      // )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:523:9: LCURLY ( variableInitializer ( COMMA
      // variableInitializer )* ( COMMA )? )? RCURLY
      {
        LCURLY143 = (Token) match(input, LCURLY, FOLLOW_LCURLY_in_arrayInitializer6644);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LCURLY.add(LCURLY143);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:523:16: ( variableInitializer ( COMMA
        // variableInitializer )* ( COMMA )? )?
        int alt52 = 2;
        int LA52_0 = input.LA(1);

        if ((LA52_0 == DEC
            || LA52_0 == INC
            || LA52_0 == LCURLY
            || LA52_0 == LESS_THAN
            || LA52_0 == LOGICAL_NOT
            || (LA52_0 >= LPAREN && LA52_0 <= MINUS)
            || LA52_0 == NOT
            || LA52_0 == PLUS
            || LA52_0 == BOOLEAN
            || LA52_0 == BYTE
            || LA52_0 == CHAR
            || LA52_0 == DOUBLE
            || LA52_0 == FALSE
            || LA52_0 == FLOAT
            || (LA52_0 >= INT && LA52_0 <= LONG)
            || (LA52_0 >= NEW && LA52_0 <= NULL)
            || LA52_0 == SHORT
            || LA52_0 == SUPER
            || LA52_0 == THIS
            || LA52_0 == TRUE
            || LA52_0 == VOID
            || (LA52_0 >= IDENT && LA52_0 <= STRING_LITERAL))) {
          alt52 = 1;
        }
        switch (alt52) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:523:17: variableInitializer ( COMMA
            // variableInitializer )* ( COMMA )?
            {
              pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6647);
              variableInitializer144 = variableInitializer();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_variableInitializer.add(variableInitializer144.getTree());
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:523:37: ( COMMA variableInitializer )*
              loop50:
              do {
                int alt50 = 2;
                int LA50_0 = input.LA(1);

                if ((LA50_0 == COMMA)) {
                  int LA50_1 = input.LA(2);

                  if ((LA50_1 == DEC
                      || LA50_1 == INC
                      || LA50_1 == LCURLY
                      || LA50_1 == LESS_THAN
                      || LA50_1 == LOGICAL_NOT
                      || (LA50_1 >= LPAREN && LA50_1 <= MINUS)
                      || LA50_1 == NOT
                      || LA50_1 == PLUS
                      || LA50_1 == BOOLEAN
                      || LA50_1 == BYTE
                      || LA50_1 == CHAR
                      || LA50_1 == DOUBLE
                      || LA50_1 == FALSE
                      || LA50_1 == FLOAT
                      || (LA50_1 >= INT && LA50_1 <= LONG)
                      || (LA50_1 >= NEW && LA50_1 <= NULL)
                      || LA50_1 == SHORT
                      || LA50_1 == SUPER
                      || LA50_1 == THIS
                      || LA50_1 == TRUE
                      || LA50_1 == VOID
                      || (LA50_1 >= IDENT && LA50_1 <= STRING_LITERAL))) {
                    alt50 = 1;
                  }
                }

                switch (alt50) {
                  case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:523:38: COMMA variableInitializer
                    {
                      COMMA145 = (Token) match(input, COMMA, FOLLOW_COMMA_in_arrayInitializer6650);
                      if (state.failed) return retval;
                      if (state.backtracking == 0) stream_COMMA.add(COMMA145);

                      pushFollow(FOLLOW_variableInitializer_in_arrayInitializer6652);
                      variableInitializer146 = variableInitializer();

                      state._fsp--;
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_variableInitializer.add(variableInitializer146.getTree());
                    }
                    break;

                  default:
                    break loop50;
                }
              } while (true);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:523:66: ( COMMA )?
              int alt51 = 2;
              int LA51_0 = input.LA(1);

              if ((LA51_0 == COMMA)) {
                alt51 = 1;
              }
              switch (alt51) {
                case 1:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: COMMA
                  {
                    COMMA147 = (Token) match(input, COMMA, FOLLOW_COMMA_in_arrayInitializer6656);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_COMMA.add(COMMA147);
                  }
                  break;
              }
            }
            break;
        }

        RCURLY148 = (Token) match(input, RCURLY, FOLLOW_RCURLY_in_arrayInitializer6661);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_RCURLY.add(RCURLY148);

        // AST REWRITE
        // elements: variableInitializer
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 524:9: -> ^( ARRAY_INITIALIZER[$LCURLY, \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:524:13: ^( ARRAY_INITIALIZER[$LCURLY,
            // \"ARRAY_INITIALIZER\"] ( variableInitializer )* )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(ARRAY_INITIALIZER, LCURLY143, "ARRAY_INITIALIZER"),
                          root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:524:63: ( variableInitializer )*
              while (stream_variableInitializer.hasNext()) {
                adaptor.addChild(root_1, stream_variableInitializer.nextTree());
              }
              stream_variableInitializer.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 35, arrayInitializer_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "arrayInitializer"

