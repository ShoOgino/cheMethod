  // $ANTLR start "genericTypeParameter"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:393:1: genericTypeParameter : IDENT ( bound )? -> ^( IDENT ( bound
  // )? ) ;
  public final JavaParser.genericTypeParameter_return genericTypeParameter()
      throws RecognitionException {
    JavaParser.genericTypeParameter_return retval = new JavaParser.genericTypeParameter_return();
    retval.start = input.LT(1);
    int genericTypeParameter_StartIndex = input.index();
    CommonTree root_0 = null;

    Token IDENT41 = null;
    JavaParser.bound_return bound42 = null;

    CommonTree IDENT41_tree = null;
    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
    RewriteRuleSubtreeStream stream_bound = new RewriteRuleSubtreeStream(adaptor, "rule bound");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 13)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:394:5: ( IDENT ( bound )? -> ^( IDENT ( bound )? ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:394:9: IDENT ( bound )?
      {
        IDENT41 = (Token) match(input, IDENT, FOLLOW_IDENT_in_genericTypeParameter5167);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_IDENT.add(IDENT41);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:394:15: ( bound )?
        int alt13 = 2;
        int LA13_0 = input.LA(1);

        if ((LA13_0 == EXTENDS)) {
          int LA13_1 = input.LA(2);

          if ((LA13_1 == BOOLEAN
              || LA13_1 == BYTE
              || LA13_1 == CHAR
              || LA13_1 == DOUBLE
              || LA13_1 == FLOAT
              || (LA13_1 >= INT && LA13_1 <= LONG)
              || LA13_1 == SHORT)) {
            int LA13_3 = input.LA(3);

            if ((synpred17_Java())) {
              alt13 = 1;
            }
          } else if ((LA13_1 == IDENT)) {
            int LA13_4 = input.LA(3);

            if ((synpred17_Java())) {
              alt13 = 1;
            }
          }
        }
        switch (alt13) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: bound
            {
              pushFollow(FOLLOW_bound_in_genericTypeParameter5169);
              bound42 = bound();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_bound.add(bound42.getTree());
            }
            break;
        }

        // AST REWRITE
        // elements: IDENT, bound
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 395:9: -> ^( IDENT ( bound )? )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:395:13: ^( IDENT ( bound )? )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 = (CommonTree) adaptor.becomeRoot(stream_IDENT.nextNode(), root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:395:21: ( bound )?
              if (stream_bound.hasNext()) {
                adaptor.addChild(root_1, stream_bound.nextTree());
              }
              stream_bound.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 13, genericTypeParameter_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "genericTypeParameter"

