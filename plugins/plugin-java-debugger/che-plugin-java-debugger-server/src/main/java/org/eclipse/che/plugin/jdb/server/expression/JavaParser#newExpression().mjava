  // $ANTLR start "newExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1041:1: newExpression : NEW ( primitiveType newArrayConstruction
  // -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | (
  // genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW,
  // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) | arguments (
  // classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )?
  // qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) ;
  public final JavaParser.newExpression_return newExpression() throws RecognitionException {
    JavaParser.newExpression_return retval = new JavaParser.newExpression_return();
    retval.start = input.LT(1);
    int newExpression_StartIndex = input.index();
    CommonTree root_0 = null;

    Token NEW507 = null;
    JavaParser.primitiveType_return primitiveType508 = null;

    JavaParser.newArrayConstruction_return newArrayConstruction509 = null;

    JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified510 = null;

    JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified511 = null;

    JavaParser.newArrayConstruction_return newArrayConstruction512 = null;

    JavaParser.arguments_return arguments513 = null;

    JavaParser.classBody_return classBody514 = null;

    CommonTree NEW507_tree = null;
    RewriteRuleTokenStream stream_NEW = new RewriteRuleTokenStream(adaptor, "token NEW");
    RewriteRuleSubtreeStream stream_newArrayConstruction =
        new RewriteRuleSubtreeStream(adaptor, "rule newArrayConstruction");
    RewriteRuleSubtreeStream stream_arguments =
        new RewriteRuleSubtreeStream(adaptor, "rule arguments");
    RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified =
        new RewriteRuleSubtreeStream(adaptor, "rule qualifiedTypeIdentSimplified");
    RewriteRuleSubtreeStream stream_primitiveType =
        new RewriteRuleSubtreeStream(adaptor, "rule primitiveType");
    RewriteRuleSubtreeStream stream_classBody =
        new RewriteRuleSubtreeStream(adaptor, "rule classBody");
    RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified =
        new RewriteRuleSubtreeStream(adaptor, "rule genericTypeArgumentListSimplified");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 107)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1042:5: ( NEW ( primitiveType newArrayConstruction -> ^(
      // STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | (
      // genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW,
      // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) |
      // arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified
      // )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1042:9: NEW ( primitiveType newArrayConstruction -> ^(
      // STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | (
      // genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW,
      // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified newArrayConstruction ) |
      // arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified
      // )? qualifiedTypeIdentSimplified arguments ( classBody )? ) ) )
      {
        NEW507 = (Token) match(input, NEW, FOLLOW_NEW_in_newExpression14376);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_NEW.add(NEW507);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1043:9: ( primitiveType newArrayConstruction -> ^(
        // STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction ) | (
        // genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^(
        // STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )?
        // qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW,
        // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments ( classBody )?
        // ) ) )
        int alt147 = 2;
        int LA147_0 = input.LA(1);

        if ((LA147_0 == BOOLEAN
            || LA147_0 == BYTE
            || LA147_0 == CHAR
            || LA147_0 == DOUBLE
            || LA147_0 == FLOAT
            || (LA147_0 >= INT && LA147_0 <= LONG)
            || LA147_0 == SHORT)) {
          alt147 = 1;
        } else if ((LA147_0 == LESS_THAN || LA147_0 == IDENT)) {
          alt147 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 147, 0, input);

          throw nvae;
        }
        switch (alt147) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1043:13: primitiveType newArrayConstruction
            {
              pushFollow(FOLLOW_primitiveType_in_newExpression14392);
              primitiveType508 = primitiveType();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_primitiveType.add(primitiveType508.getTree());
              pushFollow(FOLLOW_newArrayConstruction_in_newExpression14394);
              newArrayConstruction509 = newArrayConstruction();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_newArrayConstruction.add(newArrayConstruction509.getTree());

              // AST REWRITE
              // elements: primitiveType, newArrayConstruction
              // token labels:
              // rule labels: retval
              // token list labels:
              // rule list labels:
              // wildcard labels:
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval =
                    new RewriteRuleSubtreeStream(
                        adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (CommonTree) adaptor.nil();
                // 1044:13: -> ^( STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1044:17: ^( STATIC_ARRAY_CREATOR[$NEW,
                  // \"STATIC_ARRAY_CREATOR\"] primitiveType newArrayConstruction )
                  {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 =
                        (CommonTree)
                            adaptor.becomeRoot(
                                (CommonTree)
                                    adaptor.create(
                                        STATIC_ARRAY_CREATOR, NEW507, "STATIC_ARRAY_CREATOR"),
                                root_1);

                    adaptor.addChild(root_1, stream_primitiveType.nextTree());
                    adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }
                }

                retval.tree = root_0;
              }
            }
            break;
          case 2:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1045:13: ( genericTypeArgumentListSimplified )
            // ? qualifiedTypeIdentSimplified ( newArrayConstruction -> ^( STATIC_ARRAY_CREATOR[$NEW,
            // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified
            // newArrayConstruction ) | arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW,
            // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified arguments (
            // classBody )? ) )
            {
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1045:13: ( genericTypeArgumentListSimplified )?
              int alt144 = 2;
              int LA144_0 = input.LA(1);

              if ((LA144_0 == LESS_THAN)) {
                alt144 = 1;
              }
              switch (alt144) {
                case 1:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeArgumentListSimplified
                  {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_newExpression14438);
                    genericTypeArgumentListSimplified510 = genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_genericTypeArgumentListSimplified.add(
                          genericTypeArgumentListSimplified510.getTree());
                  }
                  break;
              }

              pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_newExpression14441);
              qualifiedTypeIdentSimplified511 = qualifiedTypeIdentSimplified();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified511.getTree());
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1046:13: ( newArrayConstruction -> ^(
              // STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )?
              // qualifiedTypeIdentSimplified newArrayConstruction ) | arguments ( classBody )? -> ^(
              // CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )?
              // qualifiedTypeIdentSimplified arguments ( classBody )? ) )
              int alt146 = 2;
              int LA146_0 = input.LA(1);

              if ((LA146_0 == LBRACK)) {
                alt146 = 1;
              } else if ((LA146_0 == LPAREN)) {
                alt146 = 2;
              } else {
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 146, 0, input);

                throw nvae;
              }
              switch (alt146) {
                case 1:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1046:17: newArrayConstruction
                  {
                    pushFollow(FOLLOW_newArrayConstruction_in_newExpression14459);
                    newArrayConstruction512 = newArrayConstruction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_newArrayConstruction.add(newArrayConstruction512.getTree());

                    // AST REWRITE
                    // elements: newArrayConstruction, qualifiedTypeIdentSimplified, genericTypeArgumentListSimplified
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                      retval.tree = root_0;
                      RewriteRuleSubtreeStream stream_retval =
                          new RewriteRuleSubtreeStream(
                              adaptor, "rule retval", retval != null ? retval.tree : null);

                      root_0 = (CommonTree) adaptor.nil();
                      // 1047:17: -> ^( STATIC_ARRAY_CREATOR[$NEW,
                      // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified
                      // newArrayConstruction )
                      {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1047:21: ^(
                        // STATIC_ARRAY_CREATOR[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )?
                        // qualifiedTypeIdentSimplified newArrayConstruction )
                        {
                          CommonTree root_1 = (CommonTree) adaptor.nil();
                          root_1 =
                              (CommonTree)
                                  adaptor.becomeRoot(
                                      (CommonTree)
                                          adaptor.create(
                                              STATIC_ARRAY_CREATOR, NEW507, "STATIC_ARRAY_CREATOR"),
                                      root_1);

                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1047:74: (
                          // genericTypeArgumentListSimplified )?
                          if (stream_genericTypeArgumentListSimplified.hasNext()) {
                            adaptor.addChild(
                                root_1, stream_genericTypeArgumentListSimplified.nextTree());
                          }
                          stream_genericTypeArgumentListSimplified.reset();
                          adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                          adaptor.addChild(root_1, stream_newArrayConstruction.nextTree());

                          adaptor.addChild(root_0, root_1);
                        }
                      }

                      retval.tree = root_0;
                    }
                  }
                  break;
                case 2:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1048:17: arguments ( classBody )?
                  {
                    pushFollow(FOLLOW_arguments_in_newExpression14524);
                    arguments513 = arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_arguments.add(arguments513.getTree());
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1048:27: ( classBody )?
                    int alt145 = 2;
                    int LA145_0 = input.LA(1);

                    if ((LA145_0 == LCURLY)) {
                      alt145 = 1;
                    }
                    switch (alt145) {
                      case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: classBody
                        {
                          pushFollow(FOLLOW_classBody_in_newExpression14526);
                          classBody514 = classBody();

                          state._fsp--;
                          if (state.failed) return retval;
                          if (state.backtracking == 0) stream_classBody.add(classBody514.getTree());
                        }
                        break;
                    }

                    // AST REWRITE
                    // elements: genericTypeArgumentListSimplified, arguments, classBody, qualifiedTypeIdentSimplified
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                      retval.tree = root_0;
                      RewriteRuleSubtreeStream stream_retval =
                          new RewriteRuleSubtreeStream(
                              adaptor, "rule retval", retval != null ? retval.tree : null);

                      root_0 = (CommonTree) adaptor.nil();
                      // 1049:17: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW,
                      // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? qualifiedTypeIdentSimplified
                      // arguments ( classBody )? )
                      {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1049:21: ^(
                        // CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )?
                        // qualifiedTypeIdentSimplified arguments ( classBody )? )
                        {
                          CommonTree root_1 = (CommonTree) adaptor.nil();
                          root_1 =
                              (CommonTree)
                                  adaptor.becomeRoot(
                                      (CommonTree)
                                          adaptor.create(
                                              CLASS_CONSTRUCTOR_CALL,
                                              NEW507,
                                              "STATIC_ARRAY_CREATOR"),
                                      root_1);

                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1049:76: (
                          // genericTypeArgumentListSimplified )?
                          if (stream_genericTypeArgumentListSimplified.hasNext()) {
                            adaptor.addChild(
                                root_1, stream_genericTypeArgumentListSimplified.nextTree());
                          }
                          stream_genericTypeArgumentListSimplified.reset();
                          adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                          adaptor.addChild(root_1, stream_arguments.nextTree());
                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1049:150: ( classBody )?
                          if (stream_classBody.hasNext()) {
                            adaptor.addChild(root_1, stream_classBody.nextTree());
                          }
                          stream_classBody.reset();

                          adaptor.addChild(root_0, root_1);
                        }
                      }

                      retval.tree = root_0;
                    }
                  }
                  break;
              }
            }
            break;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 107, newExpression_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "newExpression"

