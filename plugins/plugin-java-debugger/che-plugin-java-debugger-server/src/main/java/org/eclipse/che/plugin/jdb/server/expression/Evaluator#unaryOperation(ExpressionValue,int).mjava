  public ExpressionValue unaryOperation(ExpressionValue expression, int op) {
    Value value = expression.getValue();
    if (!(value instanceof PrimitiveValue)) {
      throw new ExpressionException(
          "Unsupported operation " + JavaParser.tokenNames[op] + " for " + value);
    }

    if (value instanceof BooleanValue) {
      if (op == JavaParser.LOGICAL_NOT) {
        return value(!((BooleanValue) value).value());
      }
    }

    // TODO add support for other unary operations
    PrimitiveValue pv = (PrimitiveValue) value;
    if (pv instanceof DoubleValue) {
      switch (op) {
        case JavaParser.UNARY_PLUS:
          return value(pv.doubleValue());
        case JavaParser.UNARY_MINUS:
          return value(-pv.doubleValue());
        default:
          throw new ExpressionException(
              "Unsupported operation " + JavaParser.tokenNames[op] + " for " + value);
      }
    }

    if (pv instanceof FloatValue) {
      switch (op) {
        case JavaParser.UNARY_PLUS:
          return value(pv.floatValue());
        case JavaParser.UNARY_MINUS:
          return value(-pv.floatValue());
        default:
          throw new ExpressionException(
              "Unsupported operation " + JavaParser.tokenNames[op] + " for " + value);
      }
    }

    if (pv instanceof LongValue) {
      switch (op) {
        case JavaParser.NOT:
          return value(~pv.longValue());
        case JavaParser.UNARY_PLUS:
          return value(pv.longValue());
        case JavaParser.UNARY_MINUS:
          return value(-pv.longValue());
        default:
          throw new ExpressionException(
              "Unsupported operation " + JavaParser.tokenNames[op] + " for " + value);
      }
    }

    switch (op) {
      case JavaParser.NOT:
        return value(~pv.intValue());
      case JavaParser.UNARY_PLUS:
        return value(pv.intValue());
      case JavaParser.UNARY_MINUS:
        return value(-pv.intValue());
      default:
        throw new ExpressionException(
            "Unsupported operation " + JavaParser.tokenNames[op] + " for " + value);
    }
  }

