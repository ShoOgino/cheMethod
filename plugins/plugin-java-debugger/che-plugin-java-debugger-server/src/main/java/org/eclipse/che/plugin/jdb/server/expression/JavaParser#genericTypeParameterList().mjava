    // $ANTLR start "genericTypeParameterList"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:378:1: genericTypeParameterList : LESS_THAN genericTypeParameter (
    // COMMA genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN,
    // \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) ;
    public final JavaParser.genericTypeParameterList_return genericTypeParameterList() throws RecognitionException {
        JavaParser.genericTypeParameterList_return retval = new JavaParser.genericTypeParameterList_return();
        retval.start = input.LT(1);
        int genericTypeParameterList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN33 = null;
        Token COMMA35 = null;
        JavaParser.genericTypeParameter_return genericTypeParameter34 = null;

        JavaParser.genericTypeParameter_return genericTypeParameter36 = null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing37 = null;


        CommonTree LESS_THAN33_tree = null;
        CommonTree COMMA35_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN = new RewriteRuleTokenStream(adaptor, "token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeParameter = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeParameter");
        RewriteRuleSubtreeStream stream_genericTypeListClosing = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeListClosing");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 11)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:379:5: ( LESS_THAN genericTypeParameter ( COMMA
            // genericTypeParameter )* genericTypeListClosing -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN,
            // \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:379:9: LESS_THAN genericTypeParameter ( COMMA
            // genericTypeParameter )* genericTypeListClosing
            {
                LESS_THAN33 = (Token)match(input, LESS_THAN, FOLLOW_LESS_THAN_in_genericTypeParameterList4993);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LESS_THAN.add(LESS_THAN33);

                pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList4995);
                genericTypeParameter34 = genericTypeParameter();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_genericTypeParameter.add(genericTypeParameter34.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:379:40: ( COMMA genericTypeParameter )*
                loop11:
                do {
                    int alt11 = 2;
                    int LA11_0 = input.LA(1);

                    if ((LA11_0 == COMMA)) {
                        alt11 = 1;
                    }


                    switch (alt11) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:379:41: COMMA genericTypeParameter
                        {
                            COMMA35 = (Token)match(input, COMMA, FOLLOW_COMMA_in_genericTypeParameterList4998);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COMMA.add(COMMA35);

                            pushFollow(FOLLOW_genericTypeParameter_in_genericTypeParameterList5000);
                            genericTypeParameter36 = genericTypeParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_genericTypeParameter.add(genericTypeParameter36.getTree());

                        }
                        break;

                        default:
                            break loop11;
                    }
                } while (true);

                pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeParameterList5004);
                genericTypeListClosing37 = genericTypeListClosing();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_genericTypeListClosing.add(genericTypeListClosing37.getTree());


                // AST REWRITE
                // elements: genericTypeParameter
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 380:9: -> ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN, \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:380:13: ^( GENERIC_TYPE_PARAM_LIST[$LESS_THAN,
                        // \"GENERIC_TYPE_PARAM_LIST\"] ( genericTypeParameter )+ )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_PARAM_LIST, LESS_THAN33, "GENERIC_TYPE_PARAM_LIST"),
                                                root_1);

                            if (!(stream_genericTypeParameter.hasNext())) {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_genericTypeParameter.hasNext()) {
                                adaptor.addChild(root_1, stream_genericTypeParameter.nextTree());

                            }
                            stream_genericTypeParameter.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 11, genericTypeParameterList_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "genericTypeParameterList"

