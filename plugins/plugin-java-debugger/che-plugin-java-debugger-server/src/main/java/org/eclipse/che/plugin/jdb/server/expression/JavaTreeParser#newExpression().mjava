  // $ANTLR start "newExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:900:1: newExpression : ( ^( STATIC_ARRAY_CREATOR (
  // primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) ) | ^(
  // CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) );
  public final void newExpression() throws RecognitionException {
    int newExpression_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 67)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:901:3: ( ^( STATIC_ARRAY_CREATOR ( primitiveType
      // newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) ) | ^(
      // CLASS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? ) )
      int alt105 = 2;
      int LA105_0 = input.LA(1);

      if ((LA105_0 == STATIC_ARRAY_CREATOR)) {
        alt105 = 1;
      } else if ((LA105_0 == CLASS_CONSTRUCTOR_CALL)) {
        alt105 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return;
        }
        NoViableAltException nvae = new NoViableAltException("", 105, 0, input);

        throw nvae;
      }
      switch (alt105) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:902:3: ^( STATIC_ARRAY_CREATOR (
          // primitiveType newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction ) )
          {
            match(input, STATIC_ARRAY_CREATOR, FOLLOW_STATIC_ARRAY_CREATOR_in_newExpression4900);
            if (state.failed) return;

            match(input, Token.DOWN, null);
            if (state.failed) return;
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:904:5: ( primitiveType
            // newArrayConstruction | ( genericTypeArgumentList )? qualifiedTypeIdent newArrayConstruction )
            int alt102 = 2;
            int LA102_0 = input.LA(1);

            if ((LA102_0 == BOOLEAN
                || LA102_0 == BYTE
                || LA102_0 == CHAR
                || LA102_0 == DOUBLE
                || LA102_0 == FLOAT
                || (LA102_0 >= INT && LA102_0 <= LONG)
                || LA102_0 == SHORT)) {
              alt102 = 1;
            } else if ((LA102_0 == GENERIC_TYPE_ARG_LIST || LA102_0 == QUALIFIED_TYPE_IDENT)) {
              alt102 = 2;
            } else {
              if (state.backtracking > 0) {
                state.failed = true;
                return;
              }
              NoViableAltException nvae = new NoViableAltException("", 102, 0, input);

              throw nvae;
            }
            switch (alt102) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:905:7: primitiveType
                // newArrayConstruction
                {
                  pushFollow(FOLLOW_primitiveType_in_newExpression4914);
                  primitiveType();

                  state._fsp--;
                  if (state.failed) return;
                  pushFollow(FOLLOW_newArrayConstruction_in_newExpression4916);
                  newArrayConstruction();

                  state._fsp--;
                  if (state.failed) return;
                }
                break;
              case 2:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:906:9: ( genericTypeArgumentList
                // )? qualifiedTypeIdent newArrayConstruction
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:906:9: ( genericTypeArgumentList )?
                  int alt101 = 2;
                  int LA101_0 = input.LA(1);

                  if ((LA101_0 == GENERIC_TYPE_ARG_LIST)) {
                    alt101 = 1;
                  }
                  switch (alt101) {
                    case 1:
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0:
                      // genericTypeArgumentList
                      {
                        pushFollow(FOLLOW_genericTypeArgumentList_in_newExpression4926);
                        genericTypeArgumentList();

                        state._fsp--;
                        if (state.failed) return;
                      }
                      break;
                  }

                  pushFollow(FOLLOW_qualifiedTypeIdent_in_newExpression4929);
                  qualifiedTypeIdent();

                  state._fsp--;
                  if (state.failed) return;
                  pushFollow(FOLLOW_newArrayConstruction_in_newExpression4931);
                  newArrayConstruction();

                  state._fsp--;
                  if (state.failed) return;
                }
                break;
            }

            match(input, Token.UP, null);
            if (state.failed) return;
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:910:3: ^( CLASS_CONSTRUCTOR_CALL (
          // genericTypeArgumentList )? qualifiedTypeIdent arguments ( classTopLevelScope )? )
          {
            match(
                input, CLASS_CONSTRUCTOR_CALL, FOLLOW_CLASS_CONSTRUCTOR_CALL_in_newExpression4951);
            if (state.failed) return;

            match(input, Token.DOWN, null);
            if (state.failed) return;
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:910:28: ( genericTypeArgumentList )?
            int alt103 = 2;
            int LA103_0 = input.LA(1);

            if ((LA103_0 == GENERIC_TYPE_ARG_LIST)) {
              alt103 = 1;
            }
            switch (alt103) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: genericTypeArgumentList
                {
                  pushFollow(FOLLOW_genericTypeArgumentList_in_newExpression4953);
                  genericTypeArgumentList();

                  state._fsp--;
                  if (state.failed) return;
                }
                break;
            }

            pushFollow(FOLLOW_qualifiedTypeIdent_in_newExpression4956);
            qualifiedTypeIdent();

            state._fsp--;
            if (state.failed) return;
            pushFollow(FOLLOW_arguments_in_newExpression4958);
            arguments();

            state._fsp--;
            if (state.failed) return;
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:910:82: ( classTopLevelScope )?
            int alt104 = 2;
            int LA104_0 = input.LA(1);

            if ((LA104_0 == CLASS_TOP_LEVEL_SCOPE)) {
              alt104 = 1;
            }
            switch (alt104) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: classTopLevelScope
                {
                  pushFollow(FOLLOW_classTopLevelScope_in_newExpression4960);
                  classTopLevelScope();

                  state._fsp--;
                  if (state.failed) return;
                }
                break;
            }

            match(input, Token.UP, null);
            if (state.failed) return;
          }
          break;
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 67, newExpression_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "newExpression"

