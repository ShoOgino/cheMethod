  // $ANTLR start "shiftExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:914:1: shiftExpression : additiveExpression ( ( BIT_SHIFT_RIGHT |
  // SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* ;
  public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
    JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
    retval.start = input.LT(1);
    int shiftExpression_StartIndex = input.index();
    CommonTree root_0 = null;

    Token BIT_SHIFT_RIGHT416 = null;
    Token SHIFT_RIGHT417 = null;
    Token SHIFT_LEFT418 = null;
    JavaParser.additiveExpression_return additiveExpression415 = null;

    JavaParser.additiveExpression_return additiveExpression419 = null;

    CommonTree BIT_SHIFT_RIGHT416_tree = null;
    CommonTree SHIFT_RIGHT417_tree = null;
    CommonTree SHIFT_LEFT418_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 99)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:915:5: ( additiveExpression ( ( BIT_SHIFT_RIGHT |
      // SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )* )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:915:9: additiveExpression ( ( BIT_SHIFT_RIGHT |
      // SHIFT_RIGHT | SHIFT_LEFT ) additiveExpression )*
      {
        root_0 = (CommonTree) adaptor.nil();

        pushFollow(FOLLOW_additiveExpression_in_shiftExpression11234);
        additiveExpression415 = additiveExpression();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) adaptor.addChild(root_0, additiveExpression415.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:916:9: ( ( BIT_SHIFT_RIGHT | SHIFT_RIGHT | SHIFT_LEFT
        // ) additiveExpression )*
        loop121:
        do {
          int alt121 = 2;
          int LA121_0 = input.LA(1);

          if ((LA121_0 == BIT_SHIFT_RIGHT || LA121_0 == SHIFT_LEFT || LA121_0 == SHIFT_RIGHT)) {
            alt121 = 1;
          }

          switch (alt121) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:916:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT |
              // SHIFT_LEFT ) additiveExpression
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:916:13: ( BIT_SHIFT_RIGHT | SHIFT_RIGHT |
                // SHIFT_LEFT )
                int alt120 = 3;
                switch (input.LA(1)) {
                  case BIT_SHIFT_RIGHT:
                    {
                      alt120 = 1;
                    }
                    break;
                  case SHIFT_RIGHT:
                    {
                      alt120 = 2;
                    }
                    break;
                  case SHIFT_LEFT:
                    {
                      alt120 = 3;
                    }
                    break;
                  default:
                    if (state.backtracking > 0) {
                      state.failed = true;
                      return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 120, 0, input);

                    throw nvae;
                }

                switch (alt120) {
                  case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:916:17: BIT_SHIFT_RIGHT
                    {
                      BIT_SHIFT_RIGHT416 =
                          (Token)
                              match(
                                  input,
                                  BIT_SHIFT_RIGHT,
                                  FOLLOW_BIT_SHIFT_RIGHT_in_shiftExpression11252);
                      if (state.failed) return retval;
                      if (state.backtracking == 0) {
                        BIT_SHIFT_RIGHT416_tree = (CommonTree) adaptor.create(BIT_SHIFT_RIGHT416);
                        root_0 = (CommonTree) adaptor.becomeRoot(BIT_SHIFT_RIGHT416_tree, root_0);
                      }
                    }
                    break;
                  case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:917:17: SHIFT_RIGHT
                    {
                      SHIFT_RIGHT417 =
                          (Token)
                              match(input, SHIFT_RIGHT, FOLLOW_SHIFT_RIGHT_in_shiftExpression11271);
                      if (state.failed) return retval;
                      if (state.backtracking == 0) {
                        SHIFT_RIGHT417_tree = (CommonTree) adaptor.create(SHIFT_RIGHT417);
                        root_0 = (CommonTree) adaptor.becomeRoot(SHIFT_RIGHT417_tree, root_0);
                      }
                    }
                    break;
                  case 3:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:918:17: SHIFT_LEFT
                    {
                      SHIFT_LEFT418 =
                          (Token)
                              match(input, SHIFT_LEFT, FOLLOW_SHIFT_LEFT_in_shiftExpression11290);
                      if (state.failed) return retval;
                      if (state.backtracking == 0) {
                        SHIFT_LEFT418_tree = (CommonTree) adaptor.create(SHIFT_LEFT418);
                        root_0 = (CommonTree) adaptor.becomeRoot(SHIFT_LEFT418_tree, root_0);
                      }
                    }
                    break;
                }

                pushFollow(FOLLOW_additiveExpression_in_shiftExpression11319);
                additiveExpression419 = additiveExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  adaptor.addChild(root_0, additiveExpression419.getTree());
              }
              break;

            default:
              break loop121;
          }
        } while (true);
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 99, shiftExpression_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "shiftExpression"

