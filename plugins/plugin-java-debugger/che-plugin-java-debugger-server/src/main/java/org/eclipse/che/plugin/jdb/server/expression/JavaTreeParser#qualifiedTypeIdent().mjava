  // $ANTLR start "qualifiedTypeIdent"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:326:1: qualifiedTypeIdent : ^( QUALIFIED_TYPE_IDENT (
  // typeIdent )+ ) ;
  public final void qualifiedTypeIdent() throws RecognitionException {
    int qualifiedTypeIdent_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 29)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:327:3: ( ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:328:3: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
      {
        match(input, QUALIFIED_TYPE_IDENT, FOLLOW_QUALIFIED_TYPE_IDENT_in_qualifiedTypeIdent1019);
        if (state.failed) return;

        match(input, Token.DOWN, null);
        if (state.failed) return;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:328:26: ( typeIdent )+
        int cnt53 = 0;
        loop53:
        do {
          int alt53 = 2;
          int LA53_0 = input.LA(1);

          if ((LA53_0 == IDENT)) {
            alt53 = 1;
          }

          switch (alt53) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: typeIdent
              {
                pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent1021);
                typeIdent();

                state._fsp--;
                if (state.failed) return;
              }
              break;

            default:
              if (cnt53 >= 1) break loop53;
              if (state.backtracking > 0) {
                state.failed = true;
                return;
              }
              EarlyExitException eee = new EarlyExitException(53, input);
              throw eee;
          }
          cnt53++;
        } while (true);

        match(input, Token.UP, null);
        if (state.failed) return;
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 29, qualifiedTypeIdent_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "qualifiedTypeIdent"

