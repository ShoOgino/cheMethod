  // $ANTLR start "classFieldDeclaratorList"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:483:1: classFieldDeclaratorList : classFieldDeclarator ( COMMA
  // classFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) ;
  public final JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList()
      throws RecognitionException {
    JavaParser.classFieldDeclaratorList_return retval =
        new JavaParser.classFieldDeclaratorList_return();
    retval.start = input.LT(1);
    int classFieldDeclaratorList_StartIndex = input.index();
    CommonTree root_0 = null;

    Token COMMA125 = null;
    JavaParser.classFieldDeclarator_return classFieldDeclarator124 = null;

    JavaParser.classFieldDeclarator_return classFieldDeclarator126 = null;

    CommonTree COMMA125_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_classFieldDeclarator =
        new RewriteRuleSubtreeStream(adaptor, "rule classFieldDeclarator");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 27)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:484:5: ( classFieldDeclarator ( COMMA classFieldDeclarator
      // )* -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:484:9: classFieldDeclarator ( COMMA classFieldDeclarator )*
      {
        pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6327);
        classFieldDeclarator124 = classFieldDeclarator();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_classFieldDeclarator.add(classFieldDeclarator124.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:484:30: ( COMMA classFieldDeclarator )*
        loop44:
        do {
          int alt44 = 2;
          int LA44_0 = input.LA(1);

          if ((LA44_0 == COMMA)) {
            alt44 = 1;
          }

          switch (alt44) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:484:31: COMMA classFieldDeclarator
              {
                COMMA125 =
                    (Token) match(input, COMMA, FOLLOW_COMMA_in_classFieldDeclaratorList6330);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_COMMA.add(COMMA125);

                pushFollow(FOLLOW_classFieldDeclarator_in_classFieldDeclaratorList6332);
                classFieldDeclarator126 = classFieldDeclarator();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_classFieldDeclarator.add(classFieldDeclarator126.getTree());
              }
              break;

            default:
              break loop44;
          }
        } while (true);

        // AST REWRITE
        // elements: classFieldDeclarator
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 485:9: -> ^( VAR_DECLARATOR_LIST ( classFieldDeclarator )+ )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:485:13: ^( VAR_DECLARATOR_LIST (
            // classFieldDeclarator )+ )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"),
                          root_1);

              if (!(stream_classFieldDeclarator.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_classFieldDeclarator.hasNext()) {
                adaptor.addChild(root_1, stream_classFieldDeclarator.nextTree());
              }
              stream_classFieldDeclarator.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 27, classFieldDeclaratorList_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "classFieldDeclaratorList"

