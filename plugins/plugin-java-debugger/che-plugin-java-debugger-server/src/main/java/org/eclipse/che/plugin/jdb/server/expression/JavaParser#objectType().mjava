  // $ANTLR start "objectType"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:571:1: objectType : qualifiedTypeIdent ( arrayDeclaratorList )? ->
  // ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) ;
  public final JavaParser.objectType_return objectType() throws RecognitionException {
    JavaParser.objectType_return retval = new JavaParser.objectType_return();
    retval.start = input.LT(1);
    int objectType_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent170 = null;

    JavaParser.arrayDeclaratorList_return arrayDeclaratorList171 = null;

    RewriteRuleSubtreeStream stream_arrayDeclaratorList =
        new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclaratorList");
    RewriteRuleSubtreeStream stream_qualifiedTypeIdent =
        new RewriteRuleSubtreeStream(adaptor, "rule qualifiedTypeIdent");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 43)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:572:5: ( qualifiedTypeIdent ( arrayDeclaratorList )? -> ^(
      // TYPE qualifiedTypeIdent ( arrayDeclaratorList )? ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:572:9: qualifiedTypeIdent ( arrayDeclaratorList )?
      {
        pushFollow(FOLLOW_qualifiedTypeIdent_in_objectType7047);
        qualifiedTypeIdent170 = qualifiedTypeIdent();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_qualifiedTypeIdent.add(qualifiedTypeIdent170.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:572:28: ( arrayDeclaratorList )?
        int alt59 = 2;
        int LA59_0 = input.LA(1);

        if ((LA59_0 == LBRACK)) {
          int LA59_1 = input.LA(2);

          if ((synpred77_Java())) {
            alt59 = 1;
          }
        }
        switch (alt59) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: arrayDeclaratorList
            {
              pushFollow(FOLLOW_arrayDeclaratorList_in_objectType7049);
              arrayDeclaratorList171 = arrayDeclaratorList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_arrayDeclaratorList.add(arrayDeclaratorList171.getTree());
            }
            break;
        }

        // AST REWRITE
        // elements: qualifiedTypeIdent, arrayDeclaratorList
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 573:9: -> ^( TYPE qualifiedTypeIdent ( arrayDeclaratorList )? )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:573:13: ^( TYPE qualifiedTypeIdent (
            // arrayDeclaratorList )? )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot((CommonTree) adaptor.create(TYPE, "TYPE"), root_1);

              adaptor.addChild(root_1, stream_qualifiedTypeIdent.nextTree());
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:573:39: ( arrayDeclaratorList )?
              if (stream_arrayDeclaratorList.hasNext()) {
                adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());
              }
              stream_arrayDeclaratorList.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 43, objectType_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "objectType"

