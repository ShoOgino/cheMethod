    // $ANTLR start "annotationTypeDeclaration"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:713:1: annotationTypeDeclaration[CommonTree modifiers] : AT
    // INTERFACE IDENT annotationBody -> ^( AT IDENT annotationBody ) ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AT246 = null;
        Token INTERFACE247 = null;
        Token IDENT248 = null;
        JavaParser.annotationBody_return annotationBody249 = null;


        CommonTree AT246_tree = null;
        CommonTree INTERFACE247_tree = null;
        CommonTree IDENT248_tree = null;
        RewriteRuleTokenStream stream_AT = new RewriteRuleTokenStream(adaptor, "token AT");
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
        RewriteRuleTokenStream stream_INTERFACE = new RewriteRuleTokenStream(adaptor, "token INTERFACE");
        RewriteRuleSubtreeStream stream_annotationBody = new RewriteRuleSubtreeStream(adaptor, "rule annotationBody");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 68)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:714:5: ( AT INTERFACE IDENT annotationBody -> ^( AT IDENT
            // annotationBody ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:714:9: AT INTERFACE IDENT annotationBody
            {
                AT246 = (Token)match(input, AT, FOLLOW_AT_in_annotationTypeDeclaration8361);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_AT.add(AT246);

                INTERFACE247 = (Token)match(input, INTERFACE, FOLLOW_INTERFACE_in_annotationTypeDeclaration8363);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_INTERFACE.add(INTERFACE247);

                IDENT248 = (Token)match(input, IDENT, FOLLOW_IDENT_in_annotationTypeDeclaration8365);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_IDENT.add(IDENT248);

                pushFollow(FOLLOW_annotationBody_in_annotationTypeDeclaration8367);
                annotationBody249 = annotationBody();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_annotationBody.add(annotationBody249.getTree());


                // AST REWRITE
                // elements: AT, IDENT, annotationBody
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 715:9: -> ^( AT IDENT annotationBody )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:715:12: ^( AT IDENT annotationBody )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot(stream_AT.nextNode(), root_1);

                            adaptor.addChild(root_1, modifiers);
                            adaptor.addChild(root_1, stream_IDENT.nextNode());
                            adaptor.addChild(root_1, stream_annotationBody.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 68, annotationTypeDeclaration_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

