  // $ANTLR start "innerNewExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1054:1: innerNewExpression : NEW (
  // genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW,
  // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? ) ;
  public final JavaParser.innerNewExpression_return innerNewExpression()
      throws RecognitionException {
    JavaParser.innerNewExpression_return retval = new JavaParser.innerNewExpression_return();
    retval.start = input.LT(1);
    int innerNewExpression_StartIndex = input.index();
    CommonTree root_0 = null;

    Token NEW515 = null;
    Token IDENT517 = null;
    JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified516 = null;

    JavaParser.arguments_return arguments518 = null;

    JavaParser.classBody_return classBody519 = null;

    CommonTree NEW515_tree = null;
    CommonTree IDENT517_tree = null;
    RewriteRuleTokenStream stream_NEW = new RewriteRuleTokenStream(adaptor, "token NEW");
    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
    RewriteRuleSubtreeStream stream_arguments =
        new RewriteRuleSubtreeStream(adaptor, "rule arguments");
    RewriteRuleSubtreeStream stream_classBody =
        new RewriteRuleSubtreeStream(adaptor, "rule classBody");
    RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified =
        new RewriteRuleSubtreeStream(adaptor, "rule genericTypeArgumentListSimplified");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 108)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1055:5: ( NEW ( genericTypeArgumentListSimplified )? IDENT
      // arguments ( classBody )? -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified
      // )? IDENT arguments ( classBody )? ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1055:9: NEW ( genericTypeArgumentListSimplified )? IDENT
      // arguments ( classBody )?
      {
        NEW515 = (Token) match(input, NEW, FOLLOW_NEW_in_innerNewExpression14625);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_NEW.add(NEW515);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1055:13: ( genericTypeArgumentListSimplified )?
        int alt148 = 2;
        int LA148_0 = input.LA(1);

        if ((LA148_0 == LESS_THAN)) {
          alt148 = 1;
        }
        switch (alt148) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeArgumentListSimplified
            {
              pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_innerNewExpression14627);
              genericTypeArgumentListSimplified516 = genericTypeArgumentListSimplified();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_genericTypeArgumentListSimplified.add(
                    genericTypeArgumentListSimplified516.getTree());
            }
            break;
        }

        IDENT517 = (Token) match(input, IDENT, FOLLOW_IDENT_in_innerNewExpression14630);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_IDENT.add(IDENT517);

        pushFollow(FOLLOW_arguments_in_innerNewExpression14632);
        arguments518 = arguments();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_arguments.add(arguments518.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1055:64: ( classBody )?
        int alt149 = 2;
        int LA149_0 = input.LA(1);

        if ((LA149_0 == LCURLY)) {
          alt149 = 1;
        }
        switch (alt149) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: classBody
            {
              pushFollow(FOLLOW_classBody_in_innerNewExpression14634);
              classBody519 = classBody();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_classBody.add(classBody519.getTree());
            }
            break;
        }

        // AST REWRITE
        // elements: classBody, arguments, IDENT, genericTypeArgumentListSimplified
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 1056:9: -> ^( CLASS_CONSTRUCTOR_CALL[$NEW, \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT
          // arguments ( classBody )? )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1056:13: ^( CLASS_CONSTRUCTOR_CALL[$NEW,
            // \"STATIC_ARRAY_CREATOR\"] ( genericTypeArgumentListSimplified )? IDENT arguments ( classBody )? )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(
                                  CLASS_CONSTRUCTOR_CALL, NEW515, "STATIC_ARRAY_CREATOR"),
                          root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1056:68: (
              // genericTypeArgumentListSimplified )?
              if (stream_genericTypeArgumentListSimplified.hasNext()) {
                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
              }
              stream_genericTypeArgumentListSimplified.reset();
              adaptor.addChild(root_1, stream_IDENT.nextNode());
              adaptor.addChild(root_1, stream_arguments.nextTree());
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1056:119: ( classBody )?
              if (stream_classBody.hasNext()) {
                adaptor.addChild(root_1, stream_classBody.nextTree());
              }
              stream_classBody.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 108, innerNewExpression_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "innerNewExpression"

