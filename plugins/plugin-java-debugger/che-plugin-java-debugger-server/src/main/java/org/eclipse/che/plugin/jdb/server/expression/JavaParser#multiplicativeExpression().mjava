    // $ANTLR start "multiplicativeExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:933:1: multiplicativeExpression : unaryExpression ( ( STAR | DIV |
    // MOD ) unaryExpression )* ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token STAR425 = null;
        Token DIV426 = null;
        Token MOD427 = null;
        JavaParser.unaryExpression_return unaryExpression424 = null;

        JavaParser.unaryExpression_return unaryExpression428 = null;


        CommonTree STAR425_tree = null;
        CommonTree DIV426_tree = null;
        CommonTree MOD427_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 101)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:934:5: ( unaryExpression ( ( STAR | DIV | MOD )
            // unaryExpression )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:934:9: unaryExpression ( ( STAR | DIV | MOD )
            // unaryExpression )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11445);
                unaryExpression424 = unaryExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, unaryExpression424.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:935:9: ( ( STAR | DIV | MOD ) unaryExpression )*
                loop125:
                do {
                    int alt125 = 2;
                    int LA125_0 = input.LA(1);

                    if ((LA125_0 == DIV || LA125_0 == MOD || LA125_0 == STAR)) {
                        alt125 = 1;
                    }


                    switch (alt125) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:935:13: ( STAR | DIV | MOD ) unaryExpression
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:935:13: ( STAR | DIV | MOD )
                            int alt124 = 3;
                            switch (input.LA(1)) {
                                case STAR: {
                                    alt124 = 1;
                                }
                                break;
                                case DIV: {
                                    alt124 = 2;
                                }
                                break;
                                case MOD: {
                                    alt124 = 3;
                                }
                                break;
                                default:
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae =
                                            new NoViableAltException("", 124, 0, input);

                                    throw nvae;
                            }

                            switch (alt124) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:935:17: STAR
                                {
                                    STAR425 = (Token)match(input, STAR, FOLLOW_STAR_in_multiplicativeExpression11464);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        STAR425_tree = (CommonTree)adaptor.create(STAR425);
                                        root_0 = (CommonTree)adaptor.becomeRoot(STAR425_tree, root_0);
                                    }

                                }
                                break;
                                case 2:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:936:17: DIV
                                {
                                    DIV426 = (Token)match(input, DIV, FOLLOW_DIV_in_multiplicativeExpression11483);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        DIV426_tree = (CommonTree)adaptor.create(DIV426);
                                        root_0 = (CommonTree)adaptor.becomeRoot(DIV426_tree, root_0);
                                    }

                                }
                                break;
                                case 3:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:937:17: MOD
                                {
                                    MOD427 = (Token)match(input, MOD, FOLLOW_MOD_in_multiplicativeExpression11502);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        MOD427_tree = (CommonTree)adaptor.create(MOD427);
                                        root_0 = (CommonTree)adaptor.becomeRoot(MOD427_tree, root_0);
                                    }

                                }
                                break;

                            }

                            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression11531);
                            unaryExpression428 = unaryExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, unaryExpression428.getTree());

                        }
                        break;

                        default:
                            break loop125;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 101, multiplicativeExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

