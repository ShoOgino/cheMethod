  // $ANTLR start "simpleType"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:566:1: simpleType : primitiveType ( arrayDeclaratorList )? -> ^(
  // TYPE primitiveType ( arrayDeclaratorList )? ) ;
  public final JavaParser.simpleType_return simpleType() throws RecognitionException {
    JavaParser.simpleType_return retval = new JavaParser.simpleType_return();
    retval.start = input.LT(1);
    int simpleType_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.primitiveType_return primitiveType168 = null;

    JavaParser.arrayDeclaratorList_return arrayDeclaratorList169 = null;

    RewriteRuleSubtreeStream stream_arrayDeclaratorList =
        new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclaratorList");
    RewriteRuleSubtreeStream stream_primitiveType =
        new RewriteRuleSubtreeStream(adaptor, "rule primitiveType");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 42)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:567:5: ( primitiveType ( arrayDeclaratorList )? -> ^( TYPE
      // primitiveType ( arrayDeclaratorList )? ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:567:9: primitiveType ( arrayDeclaratorList )?
      {
        pushFollow(FOLLOW_primitiveType_in_simpleType6998);
        primitiveType168 = primitiveType();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_primitiveType.add(primitiveType168.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:567:23: ( arrayDeclaratorList )?
        int alt58 = 2;
        int LA58_0 = input.LA(1);

        if ((LA58_0 == LBRACK)) {
          int LA58_1 = input.LA(2);

          if ((LA58_1 == RBRACK)) {
            int LA58_3 = input.LA(3);

            if ((synpred76_Java())) {
              alt58 = 1;
            }
          }
        }
        switch (alt58) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: arrayDeclaratorList
            {
              pushFollow(FOLLOW_arrayDeclaratorList_in_simpleType7000);
              arrayDeclaratorList169 = arrayDeclaratorList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_arrayDeclaratorList.add(arrayDeclaratorList169.getTree());
            }
            break;
        }

        // AST REWRITE
        // elements: arrayDeclaratorList, primitiveType
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 568:9: -> ^( TYPE primitiveType ( arrayDeclaratorList )? )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:568:13: ^( TYPE primitiveType (
            // arrayDeclaratorList )? )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot((CommonTree) adaptor.create(TYPE, "TYPE"), root_1);

              adaptor.addChild(root_1, stream_primitiveType.nextTree());
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:568:34: ( arrayDeclaratorList )?
              if (stream_arrayDeclaratorList.hasNext()) {
                adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());
              }
              stream_arrayDeclaratorList.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 42, simpleType_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "simpleType"

