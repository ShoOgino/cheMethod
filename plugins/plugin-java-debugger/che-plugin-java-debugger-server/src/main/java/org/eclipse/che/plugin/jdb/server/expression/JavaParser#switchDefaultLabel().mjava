  // $ANTLR start "switchDefaultLabel"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:812:1: switchDefaultLabel : DEFAULT COLON ( blockStatement )* ;
  public final JavaParser.switchDefaultLabel_return switchDefaultLabel()
      throws RecognitionException {
    JavaParser.switchDefaultLabel_return retval = new JavaParser.switchDefaultLabel_return();
    retval.start = input.LT(1);
    int switchDefaultLabel_StartIndex = input.index();
    CommonTree root_0 = null;

    Token DEFAULT354 = null;
    Token COLON355 = null;
    JavaParser.blockStatement_return blockStatement356 = null;

    CommonTree DEFAULT354_tree = null;
    CommonTree COLON355_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 82)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:813:5: ( DEFAULT COLON ( blockStatement )* )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:813:9: DEFAULT COLON ( blockStatement )*
      {
        root_0 = (CommonTree) adaptor.nil();

        DEFAULT354 = (Token) match(input, DEFAULT, FOLLOW_DEFAULT_in_switchDefaultLabel10198);
        if (state.failed) return retval;
        if (state.backtracking == 0) {
          DEFAULT354_tree = (CommonTree) adaptor.create(DEFAULT354);
          root_0 = (CommonTree) adaptor.becomeRoot(DEFAULT354_tree, root_0);
        }
        COLON355 = (Token) match(input, COLON, FOLLOW_COLON_in_switchDefaultLabel10201);
        if (state.failed) return retval;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:813:25: ( blockStatement )*
        loop102:
        do {
          int alt102 = 2;
          int LA102_0 = input.LA(1);

          if ((LA102_0 == AT
              || LA102_0 == DEC
              || LA102_0 == INC
              || LA102_0 == LCURLY
              || LA102_0 == LESS_THAN
              || LA102_0 == LOGICAL_NOT
              || (LA102_0 >= LPAREN && LA102_0 <= MINUS)
              || LA102_0 == NOT
              || LA102_0 == PLUS
              || LA102_0 == SEMI
              || (LA102_0 >= ABSTRACT && LA102_0 <= BYTE)
              || (LA102_0 >= CHAR && LA102_0 <= CONTINUE)
              || (LA102_0 >= DO && LA102_0 <= DOUBLE)
              || LA102_0 == ENUM
              || (LA102_0 >= FALSE && LA102_0 <= FINAL)
              || (LA102_0 >= FLOAT && LA102_0 <= IF)
              || LA102_0 == INTERFACE
              || (LA102_0 >= INT && LA102_0 <= NULL)
              || (LA102_0 >= PRIVATE && LA102_0 <= THROW)
              || (LA102_0 >= TRANSIENT && LA102_0 <= WHILE)
              || (LA102_0 >= IDENT && LA102_0 <= STRING_LITERAL))) {
            alt102 = 1;
          }

          switch (alt102) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: blockStatement
              {
                pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel10204);
                blockStatement356 = blockStatement();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, blockStatement356.getTree());
              }
              break;

            default:
              break loop102;
          }
        } while (true);
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 82, switchDefaultLabel_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "switchDefaultLabel"

