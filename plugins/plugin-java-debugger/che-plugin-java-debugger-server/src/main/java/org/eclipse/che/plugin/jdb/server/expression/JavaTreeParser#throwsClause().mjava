  // $ANTLR start "throwsClause"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:278:1: throwsClause : ^( THROWS_CLAUSE (
  // qualifiedIdentifier )+ ) ;
  public final void throwsClause() throws RecognitionException {
    int throwsClause_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 23)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:279:3: ( ^( THROWS_CLAUSE ( qualifiedIdentifier
      // )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:280:3: ^( THROWS_CLAUSE ( qualifiedIdentifier )+ )
      {
        match(input, THROWS_CLAUSE, FOLLOW_THROWS_CLAUSE_in_throwsClause800);
        if (state.failed) return;

        match(input, Token.DOWN, null);
        if (state.failed) return;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:280:19: ( qualifiedIdentifier )+
        int cnt46 = 0;
        loop46:
        do {
          int alt46 = 2;
          int LA46_0 = input.LA(1);

          if ((LA46_0 == DOT || LA46_0 == IDENT)) {
            alt46 = 1;
          }

          switch (alt46) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: qualifiedIdentifier
              {
                pushFollow(FOLLOW_qualifiedIdentifier_in_throwsClause802);
                qualifiedIdentifier();

                state._fsp--;
                if (state.failed) return;
              }
              break;

            default:
              if (cnt46 >= 1) break loop46;
              if (state.backtracking > 0) {
                state.failed = true;
                return;
              }
              EarlyExitException eee = new EarlyExitException(46, input);
              throw eee;
          }
          cnt46++;
        } while (true);

        match(input, Token.UP, null);
        if (state.failed) return;
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 23, throwsClause_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "throwsClause"

