  // $ANTLR start "parenthesizedExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:834:1: parenthesizedExpression : LPAREN expression RPAREN -> ^(
  // PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) ;
  public final JavaParser.parenthesizedExpression_return parenthesizedExpression()
      throws RecognitionException {
    JavaParser.parenthesizedExpression_return retval =
        new JavaParser.parenthesizedExpression_return();
    retval.start = input.LT(1);
    int parenthesizedExpression_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LPAREN361 = null;
    Token RPAREN363 = null;
    JavaParser.expression_return expression362 = null;

    CommonTree LPAREN361_tree = null;
    CommonTree RPAREN363_tree = null;
    RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
    RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
    RewriteRuleSubtreeStream stream_expression =
        new RewriteRuleSubtreeStream(adaptor, "rule expression");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 86)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:835:5: ( LPAREN expression RPAREN -> ^(
      // PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:835:9: LPAREN expression RPAREN
      {
        LPAREN361 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_parenthesizedExpression10420);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LPAREN.add(LPAREN361);

        pushFollow(FOLLOW_expression_in_parenthesizedExpression10422);
        expression362 = expression();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_expression.add(expression362.getTree());
        RPAREN363 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_parenthesizedExpression10424);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_RPAREN.add(RPAREN363);

        // AST REWRITE
        // elements: expression
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 836:9: -> ^( PARENTESIZED_EXPR[$LPAREN, \"PARENTESIZED_EXPR\"] expression )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:836:13: ^( PARENTESIZED_EXPR[$LPAREN,
            // \"PARENTESIZED_EXPR\"] expression )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(PARENTESIZED_EXPR, LPAREN361, "PARENTESIZED_EXPR"),
                          root_1);

              adaptor.addChild(root_1, stream_expression.nextTree());

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 86, parenthesizedExpression_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "parenthesizedExpression"

