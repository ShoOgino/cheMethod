  // $ANTLR start "arguments"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1064:1: arguments : LPAREN ( expressionList )? RPAREN -> ^(
  // ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) ;
  public final JavaParser.arguments_return arguments() throws RecognitionException {
    JavaParser.arguments_return retval = new JavaParser.arguments_return();
    retval.start = input.LT(1);
    int arguments_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LPAREN529 = null;
    Token RPAREN531 = null;
    JavaParser.expressionList_return expressionList530 = null;

    CommonTree LPAREN529_tree = null;
    CommonTree RPAREN531_tree = null;
    RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
    RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
    RewriteRuleSubtreeStream stream_expressionList =
        new RewriteRuleSubtreeStream(adaptor, "rule expressionList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 110)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1065:5: ( LPAREN ( expressionList )? RPAREN -> ^(
      // ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1065:9: LPAREN ( expressionList )? RPAREN
      {
        LPAREN529 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_arguments14731);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LPAREN.add(LPAREN529);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1065:16: ( expressionList )?
        int alt153 = 2;
        int LA153_0 = input.LA(1);

        if ((LA153_0 == DEC
            || LA153_0 == INC
            || LA153_0 == LESS_THAN
            || LA153_0 == LOGICAL_NOT
            || (LA153_0 >= LPAREN && LA153_0 <= MINUS)
            || LA153_0 == NOT
            || LA153_0 == PLUS
            || LA153_0 == BOOLEAN
            || LA153_0 == BYTE
            || LA153_0 == CHAR
            || LA153_0 == DOUBLE
            || LA153_0 == FALSE
            || LA153_0 == FLOAT
            || (LA153_0 >= INT && LA153_0 <= LONG)
            || (LA153_0 >= NEW && LA153_0 <= NULL)
            || LA153_0 == SHORT
            || LA153_0 == SUPER
            || LA153_0 == THIS
            || LA153_0 == TRUE
            || LA153_0 == VOID
            || (LA153_0 >= IDENT && LA153_0 <= STRING_LITERAL))) {
          alt153 = 1;
        }
        switch (alt153) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: expressionList
            {
              pushFollow(FOLLOW_expressionList_in_arguments14733);
              expressionList530 = expressionList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_expressionList.add(expressionList530.getTree());
            }
            break;
        }

        RPAREN531 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_arguments14736);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_RPAREN.add(RPAREN531);

        // AST REWRITE
        // elements: expressionList
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 1066:9: -> ^( ARGUMENT_LIST[$LPAREN, \"ARGUMENT_LIST\"] ( expressionList )? )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1066:13: ^( ARGUMENT_LIST[$LPAREN,
            // \"ARGUMENT_LIST\"] ( expressionList )? )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(ARGUMENT_LIST, LPAREN529, "ARGUMENT_LIST"),
                          root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1066:55: ( expressionList )?
              if (stream_expressionList.hasNext()) {
                adaptor.addChild(root_1, stream_expressionList.nextTree());
              }
              stream_expressionList.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 110, arguments_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "arguments"

