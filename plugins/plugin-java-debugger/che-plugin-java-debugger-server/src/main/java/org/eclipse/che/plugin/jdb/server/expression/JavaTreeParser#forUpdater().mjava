  // $ANTLR start "forUpdater"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:538:1: forUpdater : ^( FOR_UPDATE ( expression )* ) ;
  public final void forUpdater() throws RecognitionException {
    int forUpdater_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 59)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:539:3: ( ^( FOR_UPDATE ( expression )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:540:3: ^( FOR_UPDATE ( expression )* )
      {
        match(input, FOR_UPDATE, FOLLOW_FOR_UPDATE_in_forUpdater2023);
        if (state.failed) return;

        if (input.LA(1) == Token.DOWN) {
          match(input, Token.DOWN, null);
          if (state.failed) return;
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:540:16: ( expression )*
          loop90:
          do {
            int alt90 = 2;
            int LA90_0 = input.LA(1);

            if ((LA90_0 == EXPR)) {
              alt90 = 1;
            }

            switch (alt90) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: expression
                {
                  pushFollow(FOLLOW_expression_in_forUpdater2025);
                  expression();

                  state._fsp--;
                  if (state.failed) return;
                }
                break;

              default:
                break loop90;
            }
          } while (true);

          match(input, Token.UP, null);
          if (state.failed) return;
        }
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 59, forUpdater_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "forUpdater"

