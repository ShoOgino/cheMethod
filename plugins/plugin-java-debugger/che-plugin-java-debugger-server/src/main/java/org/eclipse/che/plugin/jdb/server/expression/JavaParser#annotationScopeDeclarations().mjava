    // $ANTLR start "annotationScopeDeclarations"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:723:1: annotationScopeDeclarations : ( modifierList type ( IDENT
    // LPAREN RPAREN ( annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
    // | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration );
    public final JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations() throws RecognitionException {
        JavaParser.annotationScopeDeclarations_return retval = new JavaParser.annotationScopeDeclarations_return();
        retval.start = input.LT(1);
        int annotationScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT255 = null;
        Token LPAREN256 = null;
        Token RPAREN257 = null;
        Token SEMI259 = null;
        Token SEMI261 = null;
        JavaParser.modifierList_return modifierList253 = null;

        JavaParser.type_return type254 = null;

        JavaParser.annotationDefaultValue_return annotationDefaultValue258 = null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList260 = null;

        JavaParser.typeDeclaration_return typeDeclaration262 = null;


        CommonTree IDENT255_tree = null;
        CommonTree LPAREN256_tree = null;
        CommonTree RPAREN257_tree = null;
        CommonTree SEMI259_tree = null;
        CommonTree SEMI261_tree = null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleSubtreeStream stream_modifierList = new RewriteRuleSubtreeStream(adaptor, "rule modifierList");
        RewriteRuleSubtreeStream stream_annotationDefaultValue = new RewriteRuleSubtreeStream(adaptor, "rule annotationDefaultValue");
        RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList = new RewriteRuleSubtreeStream(adaptor, "rule classFieldDeclaratorList");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 70)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:724:5: ( modifierList type ( IDENT LPAREN RPAREN (
            // annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? ) |
            // classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration )
            int alt86 = 2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:724:9: modifierList type ( IDENT LPAREN RPAREN (
                    // annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                    // | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                {
                    pushFollow(FOLLOW_modifierList_in_annotationScopeDeclarations8457);
                    modifierList253 = modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_modifierList.add(modifierList253.getTree());
                    pushFollow(FOLLOW_type_in_annotationScopeDeclarations8459);
                    type254 = type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_type.add(type254.getTree());
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:725:9: ( IDENT LPAREN RPAREN (
                    // annotationDefaultValue )? SEMI -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                    // | classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt85 = 2;
                    int LA85_0 = input.LA(1);

                    if ((LA85_0 == IDENT)) {
                        int LA85_1 = input.LA(2);

                        if ((LA85_1 == LPAREN)) {
                            alt85 = 1;
                        } else if ((LA85_1 == ASSIGN || LA85_1 == COMMA || LA85_1 == LBRACK || LA85_1 == SEMI)) {
                            alt85 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae =
                                    new NoViableAltException("", 85, 1, input);

                            throw nvae;
                        }
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae =
                                new NoViableAltException("", 85, 0, input);

                        throw nvae;
                    }
                    switch (alt85) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:725:13: IDENT LPAREN RPAREN (
                            // annotationDefaultValue )? SEMI
                        {
                            IDENT255 = (Token)match(input, IDENT, FOLLOW_IDENT_in_annotationScopeDeclarations8473);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_IDENT.add(IDENT255);

                            LPAREN256 = (Token)match(input, LPAREN, FOLLOW_LPAREN_in_annotationScopeDeclarations8475);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_LPAREN.add(LPAREN256);

                            RPAREN257 = (Token)match(input, RPAREN, FOLLOW_RPAREN_in_annotationScopeDeclarations8477);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_RPAREN.add(RPAREN257);

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:725:33: ( annotationDefaultValue )?
                            int alt84 = 2;
                            int LA84_0 = input.LA(1);

                            if ((LA84_0 == DEFAULT)) {
                                alt84 = 1;
                            }
                            switch (alt84) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: annotationDefaultValue
                                {
                                    pushFollow(FOLLOW_annotationDefaultValue_in_annotationScopeDeclarations8479);
                                    annotationDefaultValue258 = annotationDefaultValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_annotationDefaultValue.add(annotationDefaultValue258.getTree());

                                }
                                break;

                            }

                            SEMI259 = (Token)match(input, SEMI, FOLLOW_SEMI_in_annotationScopeDeclarations8482);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_SEMI.add(SEMI259);


                            // AST REWRITE
                            // elements: annotationDefaultValue, IDENT, type, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 726:13: -> ^( ANNOTATION_METHOD_DECL modifierList type IDENT ( annotationDefaultValue )? )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:726:17: ^( ANNOTATION_METHOD_DECL
                                    // modifierList type IDENT ( annotationDefaultValue )? )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor
                                                .becomeRoot((CommonTree)adaptor.create(ANNOTATION_METHOD_DECL, "ANNOTATION_METHOD_DECL"),
                                                            root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:726:66: (
                                        // annotationDefaultValue )?
                                        if (stream_annotationDefaultValue.hasNext()) {
                                            adaptor.addChild(root_1, stream_annotationDefaultValue.nextTree());

                                        }
                                        stream_annotationDefaultValue.reset();

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;
                        case 2:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:727:13: classFieldDeclaratorList SEMI
                        {
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_annotationScopeDeclarations8524);
                            classFieldDeclaratorList260 = classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classFieldDeclaratorList.add(classFieldDeclaratorList260.getTree());
                            SEMI261 = (Token)match(input, SEMI, FOLLOW_SEMI_in_annotationScopeDeclarations8526);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_SEMI.add(SEMI261);


                            // AST REWRITE
                            // elements: type, modifierList, classFieldDeclaratorList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 728:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:728:17: ^( VAR_DECLARATION
                                    // modifierList type classFieldDeclaratorList )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor
                                                .becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;

                    }


                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:730:9: typeDeclaration
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_annotationScopeDeclarations8571);
                    typeDeclaration262 = typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeDeclaration262.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 70, annotationScopeDeclarations_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "annotationScopeDeclarations"

