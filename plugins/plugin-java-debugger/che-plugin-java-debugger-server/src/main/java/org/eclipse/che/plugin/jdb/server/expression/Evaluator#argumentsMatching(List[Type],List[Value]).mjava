  private ARGUMENT_MATCHING argumentsMatching(List<Type> argumentTypes, List<Value> arguments) {
    if (argumentTypes.size() == arguments.size()) {
      Iterator<Value> argumentIterator = arguments.iterator();
      Iterator<Type> argumentTypesIterator = argumentTypes.iterator();
      ARGUMENT_MATCHING result = ARGUMENT_MATCHING.MATCH;
      while (argumentIterator.hasNext() && result != ARGUMENT_MATCHING.NOT_MATCH) {
        Value argumentValue = argumentIterator.next();
        Type argumentType = argumentTypesIterator.next();
        if (argumentValue == null) {
          if (isPrimitive(argumentType)) {
            // Null may not be used as value if argument type is primitive.
            result = ARGUMENT_MATCHING.NOT_MATCH;
          }
        } else {
          if (!(argumentValue.type().equals(argumentType))) {
            result =
                isAssignable(argumentValue.type(), argumentType)
                    ? ARGUMENT_MATCHING.ASSIGNABLE
                    : ARGUMENT_MATCHING.NOT_MATCH;
          }
        }
      }
      return result;
    }
    return ARGUMENT_MATCHING.NOT_MATCH;
  }

