  // $ANTLR start "interfaceFieldDeclaratorList"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:493:1: interfaceFieldDeclaratorList : interfaceFieldDeclarator (
  // COMMA interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) ;
  public final JavaParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList()
      throws RecognitionException {
    JavaParser.interfaceFieldDeclaratorList_return retval =
        new JavaParser.interfaceFieldDeclaratorList_return();
    retval.start = input.LT(1);
    int interfaceFieldDeclaratorList_StartIndex = input.index();
    CommonTree root_0 = null;

    Token COMMA131 = null;
    JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator130 = null;

    JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator132 = null;

    CommonTree COMMA131_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_interfaceFieldDeclarator =
        new RewriteRuleSubtreeStream(adaptor, "rule interfaceFieldDeclarator");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 29)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:494:5: ( interfaceFieldDeclarator ( COMMA
      // interfaceFieldDeclarator )* -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:494:9: interfaceFieldDeclarator ( COMMA
      // interfaceFieldDeclarator )*
      {
        pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6421);
        interfaceFieldDeclarator130 = interfaceFieldDeclarator();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator130.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:494:34: ( COMMA interfaceFieldDeclarator )*
        loop46:
        do {
          int alt46 = 2;
          int LA46_0 = input.LA(1);

          if ((LA46_0 == COMMA)) {
            alt46 = 1;
          }

          switch (alt46) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:494:35: COMMA interfaceFieldDeclarator
              {
                COMMA131 =
                    (Token) match(input, COMMA, FOLLOW_COMMA_in_interfaceFieldDeclaratorList6424);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_COMMA.add(COMMA131);

                pushFollow(FOLLOW_interfaceFieldDeclarator_in_interfaceFieldDeclaratorList6426);
                interfaceFieldDeclarator132 = interfaceFieldDeclarator();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_interfaceFieldDeclarator.add(interfaceFieldDeclarator132.getTree());
              }
              break;

            default:
              break loop46;
          }
        } while (true);

        // AST REWRITE
        // elements: interfaceFieldDeclarator
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 495:9: -> ^( VAR_DECLARATOR_LIST ( interfaceFieldDeclarator )+ )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:495:13: ^( VAR_DECLARATOR_LIST (
            // interfaceFieldDeclarator )+ )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(VAR_DECLARATOR_LIST, "VAR_DECLARATOR_LIST"),
                          root_1);

              if (!(stream_interfaceFieldDeclarator.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_interfaceFieldDeclarator.hasNext()) {
                adaptor.addChild(root_1, stream_interfaceFieldDeclarator.nextTree());
              }
              stream_interfaceFieldDeclarator.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 29, interfaceFieldDeclaratorList_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "interfaceFieldDeclaratorList"

