  // $ANTLR start "logicalAndExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:874:1: logicalAndExpression : inclusiveOrExpression ( LOGICAL_AND
  // inclusiveOrExpression )* ;
  public final JavaParser.logicalAndExpression_return logicalAndExpression()
      throws RecognitionException {
    JavaParser.logicalAndExpression_return retval = new JavaParser.logicalAndExpression_return();
    retval.start = input.LT(1);
    int logicalAndExpression_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LOGICAL_AND391 = null;
    JavaParser.inclusiveOrExpression_return inclusiveOrExpression390 = null;

    JavaParser.inclusiveOrExpression_return inclusiveOrExpression392 = null;

    CommonTree LOGICAL_AND391_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 92)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:875:5: ( inclusiveOrExpression ( LOGICAL_AND
      // inclusiveOrExpression )* )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:875:9: inclusiveOrExpression ( LOGICAL_AND
      // inclusiveOrExpression )*
      {
        root_0 = (CommonTree) adaptor.nil();

        pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10862);
        inclusiveOrExpression390 = inclusiveOrExpression();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) adaptor.addChild(root_0, inclusiveOrExpression390.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:875:31: ( LOGICAL_AND inclusiveOrExpression )*
        loop111:
        do {
          int alt111 = 2;
          int LA111_0 = input.LA(1);

          if ((LA111_0 == LOGICAL_AND)) {
            alt111 = 1;
          }

          switch (alt111) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:875:32: LOGICAL_AND inclusiveOrExpression
              {
                LOGICAL_AND391 =
                    (Token)
                        match(input, LOGICAL_AND, FOLLOW_LOGICAL_AND_in_logicalAndExpression10865);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                  LOGICAL_AND391_tree = (CommonTree) adaptor.create(LOGICAL_AND391);
                  root_0 = (CommonTree) adaptor.becomeRoot(LOGICAL_AND391_tree, root_0);
                }
                pushFollow(FOLLOW_inclusiveOrExpression_in_logicalAndExpression10868);
                inclusiveOrExpression392 = inclusiveOrExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  adaptor.addChild(root_0, inclusiveOrExpression392.getTree());
              }
              break;

            default:
              break loop111;
          }
        } while (true);
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 92, logicalAndExpression_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "logicalAndExpression"

