  // $ANTLR start "importDeclaration"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:151:1: importDeclaration : ^( IMPORT ( STATIC )?
  // qualifiedIdentifier ( DOTSTAR )? ) ;
  public final void importDeclaration() throws RecognitionException {
    int importDeclaration_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 3)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:152:3: ( ^( IMPORT ( STATIC )?
      // qualifiedIdentifier ( DOTSTAR )? ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:153:3: ^( IMPORT ( STATIC )? qualifiedIdentifier
      // ( DOTSTAR )? )
      {
        match(input, IMPORT, FOLLOW_IMPORT_in_importDeclaration137);
        if (state.failed) return;

        match(input, Token.DOWN, null);
        if (state.failed) return;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:153:12: ( STATIC )?
        int alt4 = 2;
        int LA4_0 = input.LA(1);

        if ((LA4_0 == STATIC)) {
          alt4 = 1;
        }
        switch (alt4) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: STATIC
            {
              match(input, STATIC, FOLLOW_STATIC_in_importDeclaration139);
              if (state.failed) return;
            }
            break;
        }

        pushFollow(FOLLOW_qualifiedIdentifier_in_importDeclaration142);
        qualifiedIdentifier();

        state._fsp--;
        if (state.failed) return;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:153:40: ( DOTSTAR )?
        int alt5 = 2;
        int LA5_0 = input.LA(1);

        if ((LA5_0 == DOTSTAR)) {
          alt5 = 1;
        }
        switch (alt5) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: DOTSTAR
            {
              match(input, DOTSTAR, FOLLOW_DOTSTAR_in_importDeclaration144);
              if (state.failed) return;
            }
            break;
        }

        match(input, Token.UP, null);
        if (state.failed) return;
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 3, importDeclaration_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "importDeclaration"

