  // $ANTLR start "qualifiedTypeIdentSimplified"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:586:1: qualifiedTypeIdentSimplified : typeIdentSimplified ( DOT
  // typeIdentSimplified )* -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) ;
  public final JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified()
      throws RecognitionException {
    JavaParser.qualifiedTypeIdentSimplified_return retval =
        new JavaParser.qualifiedTypeIdentSimplified_return();
    retval.start = input.LT(1);
    int qualifiedTypeIdentSimplified_StartIndex = input.index();
    CommonTree root_0 = null;

    Token DOT178 = null;
    JavaParser.typeIdentSimplified_return typeIdentSimplified177 = null;

    JavaParser.typeIdentSimplified_return typeIdentSimplified179 = null;

    CommonTree DOT178_tree = null;
    RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
    RewriteRuleSubtreeStream stream_typeIdentSimplified =
        new RewriteRuleSubtreeStream(adaptor, "rule typeIdentSimplified");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 46)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:587:5: ( typeIdentSimplified ( DOT typeIdentSimplified )*
      // -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:587:9: typeIdentSimplified ( DOT typeIdentSimplified )*
      {
        pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7176);
        typeIdentSimplified177 = typeIdentSimplified();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_typeIdentSimplified.add(typeIdentSimplified177.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:587:29: ( DOT typeIdentSimplified )*
        loop62:
        do {
          int alt62 = 2;
          int LA62_0 = input.LA(1);

          if ((LA62_0 == DOT)) {
            alt62 = 1;
          }

          switch (alt62) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:587:30: DOT typeIdentSimplified
              {
                DOT178 = (Token) match(input, DOT, FOLLOW_DOT_in_qualifiedTypeIdentSimplified7179);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_DOT.add(DOT178);

                pushFollow(FOLLOW_typeIdentSimplified_in_qualifiedTypeIdentSimplified7181);
                typeIdentSimplified179 = typeIdentSimplified();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_typeIdentSimplified.add(typeIdentSimplified179.getTree());
              }
              break;

            default:
              break loop62;
          }
        } while (true);

        // AST REWRITE
        // elements: typeIdentSimplified
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 588:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdentSimplified )+ )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:588:13: ^( QUALIFIED_TYPE_IDENT (
            // typeIdentSimplified )+ )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"),
                          root_1);

              if (!(stream_typeIdentSimplified.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_typeIdentSimplified.hasNext()) {
                adaptor.addChild(root_1, stream_typeIdentSimplified.nextTree());
              }
              stream_typeIdentSimplified.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 46, qualifiedTypeIdentSimplified_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "qualifiedTypeIdentSimplified"

