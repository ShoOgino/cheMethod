  // $ANTLR start "qualifiedTypeIdent"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:581:1: qualifiedTypeIdent : typeIdent ( DOT typeIdent )* -> ^(
  // QUALIFIED_TYPE_IDENT ( typeIdent )+ ) ;
  public final JavaParser.qualifiedTypeIdent_return qualifiedTypeIdent()
      throws RecognitionException {
    JavaParser.qualifiedTypeIdent_return retval = new JavaParser.qualifiedTypeIdent_return();
    retval.start = input.LT(1);
    int qualifiedTypeIdent_StartIndex = input.index();
    CommonTree root_0 = null;

    Token DOT175 = null;
    JavaParser.typeIdent_return typeIdent174 = null;

    JavaParser.typeIdent_return typeIdent176 = null;

    CommonTree DOT175_tree = null;
    RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
    RewriteRuleSubtreeStream stream_typeIdent =
        new RewriteRuleSubtreeStream(adaptor, "rule typeIdent");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 45)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:582:5: ( typeIdent ( DOT typeIdent )* -> ^(
      // QUALIFIED_TYPE_IDENT ( typeIdent )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:582:9: typeIdent ( DOT typeIdent )*
      {
        pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7131);
        typeIdent174 = typeIdent();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_typeIdent.add(typeIdent174.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:582:19: ( DOT typeIdent )*
        loop61:
        do {
          int alt61 = 2;
          int LA61_0 = input.LA(1);

          if ((LA61_0 == DOT)) {
            int LA61_2 = input.LA(2);

            if ((synpred79_Java())) {
              alt61 = 1;
            }
          }

          switch (alt61) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:582:20: DOT typeIdent
              {
                DOT175 = (Token) match(input, DOT, FOLLOW_DOT_in_qualifiedTypeIdent7134);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_DOT.add(DOT175);

                pushFollow(FOLLOW_typeIdent_in_qualifiedTypeIdent7136);
                typeIdent176 = typeIdent();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeIdent.add(typeIdent176.getTree());
              }
              break;

            default:
              break loop61;
          }
        } while (true);

        // AST REWRITE
        // elements: typeIdent
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 583:9: -> ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:583:13: ^( QUALIFIED_TYPE_IDENT ( typeIdent )+ )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(QUALIFIED_TYPE_IDENT, "QUALIFIED_TYPE_IDENT"),
                          root_1);

              if (!(stream_typeIdent.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_typeIdent.hasNext()) {
                adaptor.addChild(root_1, stream_typeIdent.nextTree());
              }
              stream_typeIdent.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 45, qualifiedTypeIdent_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "qualifiedTypeIdent"

