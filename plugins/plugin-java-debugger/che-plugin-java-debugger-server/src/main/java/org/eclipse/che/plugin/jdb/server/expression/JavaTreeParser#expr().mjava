  // $ANTLR start "expr"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:569:1: expr returns [ExpressionValue value] : ( ^(
  // ASSIGN a= expr b= expr ) | ^( PLUS_ASSIGN a= expr b= expr ) | ^( MINUS_ASSIGN a= expr b= expr ) | ^( STAR_ASSIGN a= expr b= expr )
  // | ^( DIV_ASSIGN a= expr b= expr ) | ^( AND_ASSIGN a= expr b= expr ) | ^( OR_ASSIGN a= expr b= expr ) | ^( XOR_ASSIGN a= expr b=
  // expr ) | ^( MOD_ASSIGN a= expr b= expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN a= expr b= expr ) | ^( SHIFT_RIGHT_ASSIGN a= expr b= expr ) |
  // ^( SHIFT_LEFT_ASSIGN a= expr b= expr ) | ^( QUESTION test= expr a= expr b= expr ) | ^( LOGICAL_OR a= expr b= expr ) | ^(
  // LOGICAL_AND a= expr b= expr ) | ^( OR a= expr b= expr ) | ^( XOR a= expr b= expr ) | ^( AND a= expr b= expr ) | ^( EQUAL a= expr
  // b= expr ) | ^( NOT_EQUAL a= expr b= expr ) | ^( INSTANCEOF expr type ) | ^( LESS_OR_EQUAL a= expr b= expr ) | ^( GREATER_OR_EQUAL
  // a= expr b= expr ) | ^( BIT_SHIFT_RIGHT a= expr b= expr ) | ^( SHIFT_RIGHT a= expr b= expr ) | ^( GREATER_THAN a= expr b= expr ) |
  // ^( SHIFT_LEFT a= expr b= expr ) | ^( LESS_THAN a= expr b= expr ) | ^( PLUS a= expr b= expr ) | ^( MINUS a= expr b= expr ) | ^(
  // STAR a= expr b= expr ) | ^( DIV a= expr b= expr ) | ^( MOD a= expr b= expr ) | ^( UNARY_PLUS a= expr ) | ^( UNARY_MINUS a= expr )
  // | ^( PRE_INC a= expr ) | ^( PRE_DEC expr ) | ^( POST_INC a= expr ) | ^( POST_DEC expr ) | ^( NOT a= expr ) | ^( LOGICAL_NOT a=
  // expr ) | ^( CAST_EXPR type expr ) | primaryExpression );
  public final ExpressionValue expr() throws RecognitionException {
    ExpressionValue value = null;
    int expr_StartIndex = input.index();
    CommonTree ASSIGN4 = null;
    CommonTree PLUS_ASSIGN5 = null;
    CommonTree MINUS_ASSIGN6 = null;
    CommonTree STAR_ASSIGN7 = null;
    CommonTree DIV_ASSIGN8 = null;
    CommonTree AND_ASSIGN9 = null;
    CommonTree OR_ASSIGN10 = null;
    CommonTree XOR_ASSIGN11 = null;
    CommonTree MOD_ASSIGN12 = null;
    CommonTree BIT_SHIFT_RIGHT_ASSIGN13 = null;
    CommonTree SHIFT_RIGHT_ASSIGN14 = null;
    CommonTree SHIFT_LEFT_ASSIGN15 = null;
    CommonTree LOGICAL_OR16 = null;
    CommonTree LOGICAL_AND17 = null;
    CommonTree OR18 = null;
    CommonTree XOR19 = null;
    CommonTree AND20 = null;
    CommonTree EQUAL21 = null;
    CommonTree NOT_EQUAL22 = null;
    CommonTree LESS_OR_EQUAL23 = null;
    CommonTree GREATER_OR_EQUAL24 = null;
    CommonTree BIT_SHIFT_RIGHT25 = null;
    CommonTree SHIFT_RIGHT26 = null;
    CommonTree GREATER_THAN27 = null;
    CommonTree SHIFT_LEFT28 = null;
    CommonTree LESS_THAN29 = null;
    CommonTree PLUS30 = null;
    CommonTree MINUS31 = null;
    CommonTree STAR32 = null;
    CommonTree DIV33 = null;
    CommonTree MOD34 = null;
    CommonTree UNARY_PLUS35 = null;
    CommonTree UNARY_MINUS36 = null;
    CommonTree NOT37 = null;
    CommonTree LOGICAL_NOT38 = null;
    ExpressionValue a = null;

    ExpressionValue b = null;

    ExpressionValue test = null;

    JavaTreeParser.primaryExpression_return primaryExpression39 = null;

    latest = ev.getThisObject();

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 63)) {
        return value;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:573:3: ( ^( ASSIGN a= expr b= expr ) | ^(
      // PLUS_ASSIGN a= expr b= expr ) | ^( MINUS_ASSIGN a= expr b= expr ) | ^( STAR_ASSIGN a= expr b= expr ) | ^( DIV_ASSIGN a=
      // expr b= expr ) | ^( AND_ASSIGN a= expr b= expr ) | ^( OR_ASSIGN a= expr b= expr ) | ^( XOR_ASSIGN a= expr b= expr ) | ^(
      // MOD_ASSIGN a= expr b= expr ) | ^( BIT_SHIFT_RIGHT_ASSIGN a= expr b= expr ) | ^( SHIFT_RIGHT_ASSIGN a= expr b= expr ) | ^(
      // SHIFT_LEFT_ASSIGN a= expr b= expr ) | ^( QUESTION test= expr a= expr b= expr ) | ^( LOGICAL_OR a= expr b= expr ) | ^(
      // LOGICAL_AND a= expr b= expr ) | ^( OR a= expr b= expr ) | ^( XOR a= expr b= expr ) | ^( AND a= expr b= expr ) | ^( EQUAL
      // a= expr b= expr ) | ^( NOT_EQUAL a= expr b= expr ) | ^( INSTANCEOF expr type ) | ^( LESS_OR_EQUAL a= expr b= expr ) | ^(
      // GREATER_OR_EQUAL a= expr b= expr ) | ^( BIT_SHIFT_RIGHT a= expr b= expr ) | ^( SHIFT_RIGHT a= expr b= expr ) | ^(
      // GREATER_THAN a= expr b= expr ) | ^( SHIFT_LEFT a= expr b= expr ) | ^( LESS_THAN a= expr b= expr ) | ^( PLUS a= expr b=
      // expr ) | ^( MINUS a= expr b= expr ) | ^( STAR a= expr b= expr ) | ^( DIV a= expr b= expr ) | ^( MOD a= expr b= expr ) | ^(
      // UNARY_PLUS a= expr ) | ^( UNARY_MINUS a= expr ) | ^( PRE_INC a= expr ) | ^( PRE_DEC expr ) | ^( POST_INC a= expr ) | ^(
      // POST_DEC expr ) | ^( NOT a= expr ) | ^( LOGICAL_NOT a= expr ) | ^( CAST_EXPR type expr ) | primaryExpression )
      int alt91 = 43;
      switch (input.LA(1)) {
        case ASSIGN:
          {
            alt91 = 1;
          }
          break;
        case PLUS_ASSIGN:
          {
            alt91 = 2;
          }
          break;
        case MINUS_ASSIGN:
          {
            alt91 = 3;
          }
          break;
        case STAR_ASSIGN:
          {
            alt91 = 4;
          }
          break;
        case DIV_ASSIGN:
          {
            alt91 = 5;
          }
          break;
        case AND_ASSIGN:
          {
            alt91 = 6;
          }
          break;
        case OR_ASSIGN:
          {
            alt91 = 7;
          }
          break;
        case XOR_ASSIGN:
          {
            alt91 = 8;
          }
          break;
        case MOD_ASSIGN:
          {
            alt91 = 9;
          }
          break;
        case BIT_SHIFT_RIGHT_ASSIGN:
          {
            alt91 = 10;
          }
          break;
        case SHIFT_RIGHT_ASSIGN:
          {
            alt91 = 11;
          }
          break;
        case SHIFT_LEFT_ASSIGN:
          {
            alt91 = 12;
          }
          break;
        case QUESTION:
          {
            alt91 = 13;
          }
          break;
        case LOGICAL_OR:
          {
            alt91 = 14;
          }
          break;
        case LOGICAL_AND:
          {
            alt91 = 15;
          }
          break;
        case OR:
          {
            alt91 = 16;
          }
          break;
        case XOR:
          {
            alt91 = 17;
          }
          break;
        case AND:
          {
            alt91 = 18;
          }
          break;
        case EQUAL:
          {
            alt91 = 19;
          }
          break;
        case NOT_EQUAL:
          {
            alt91 = 20;
          }
          break;
        case INSTANCEOF:
          {
            alt91 = 21;
          }
          break;
        case LESS_OR_EQUAL:
          {
            alt91 = 22;
          }
          break;
        case GREATER_OR_EQUAL:
          {
            alt91 = 23;
          }
          break;
        case BIT_SHIFT_RIGHT:
          {
            alt91 = 24;
          }
          break;
        case SHIFT_RIGHT:
          {
            alt91 = 25;
          }
          break;
        case GREATER_THAN:
          {
            alt91 = 26;
          }
          break;
        case SHIFT_LEFT:
          {
            alt91 = 27;
          }
          break;
        case LESS_THAN:
          {
            alt91 = 28;
          }
          break;
        case PLUS:
          {
            alt91 = 29;
          }
          break;
        case MINUS:
          {
            alt91 = 30;
          }
          break;
        case STAR:
          {
            alt91 = 31;
          }
          break;
        case DIV:
          {
            alt91 = 32;
          }
          break;
        case MOD:
          {
            alt91 = 33;
          }
          break;
        case UNARY_PLUS:
          {
            alt91 = 34;
          }
          break;
        case UNARY_MINUS:
          {
            alt91 = 35;
          }
          break;
        case PRE_INC:
          {
            alt91 = 36;
          }
          break;
        case PRE_DEC:
          {
            alt91 = 37;
          }
          break;
        case POST_INC:
          {
            alt91 = 38;
          }
          break;
        case POST_DEC:
          {
            alt91 = 39;
          }
          break;
        case NOT:
          {
            alt91 = 40;
          }
          break;
        case LOGICAL_NOT:
          {
            alt91 = 41;
          }
          break;
        case CAST_EXPR:
          {
            alt91 = 42;
          }
          break;
        case DOT:
        case FALSE:
        case NULL:
        case SUPER:
        case THIS:
        case TRUE:
        case ARRAY_DECLARATOR:
        case ARRAY_ELEMENT_ACCESS:
        case CLASS_CONSTRUCTOR_CALL:
        case METHOD_CALL:
        case PARENTESIZED_EXPR:
        case STATIC_ARRAY_CREATOR:
        case SUPER_CONSTRUCTOR_CALL:
        case THIS_CONSTRUCTOR_CALL:
        case IDENT:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case DECIMAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          {
            alt91 = 43;
          }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return value;
          }
          NoViableAltException nvae = new NoViableAltException("", 91, 0, input);

          throw nvae;
      }

      switch (alt91) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:574:3: ^( ASSIGN a= expr b= expr )
          {
            ASSIGN4 = (CommonTree) match(input, ASSIGN, FOLLOW_ASSIGN_in_expr2207);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2211);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2215);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (ASSIGN4 != null ? ASSIGN4.getType() : 0));
            }
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:579:3: ^( PLUS_ASSIGN a= expr b= expr )
          {
            PLUS_ASSIGN5 = (CommonTree) match(input, PLUS_ASSIGN, FOLLOW_PLUS_ASSIGN_in_expr2271);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2275);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2279);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (PLUS_ASSIGN5 != null ? PLUS_ASSIGN5.getType() : 0));
            }
          }
          break;
        case 3:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:584:3: ^( MINUS_ASSIGN a= expr b= expr )
          {
            MINUS_ASSIGN6 =
                (CommonTree) match(input, MINUS_ASSIGN, FOLLOW_MINUS_ASSIGN_in_expr2307);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2311);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2315);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (MINUS_ASSIGN6 != null ? MINUS_ASSIGN6.getType() : 0));
            }
          }
          break;
        case 4:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:589:3: ^( STAR_ASSIGN a= expr b= expr )
          {
            STAR_ASSIGN7 = (CommonTree) match(input, STAR_ASSIGN, FOLLOW_STAR_ASSIGN_in_expr2343);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2347);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2351);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (STAR_ASSIGN7 != null ? STAR_ASSIGN7.getType() : 0));
            }
          }
          break;
        case 5:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:594:3: ^( DIV_ASSIGN a= expr b= expr )
          {
            DIV_ASSIGN8 = (CommonTree) match(input, DIV_ASSIGN, FOLLOW_DIV_ASSIGN_in_expr2379);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2383);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2387);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (DIV_ASSIGN8 != null ? DIV_ASSIGN8.getType() : 0));
            }
          }
          break;
        case 6:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:599:3: ^( AND_ASSIGN a= expr b= expr )
          {
            AND_ASSIGN9 = (CommonTree) match(input, AND_ASSIGN, FOLLOW_AND_ASSIGN_in_expr2415);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2419);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2423);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (AND_ASSIGN9 != null ? AND_ASSIGN9.getType() : 0));
            }
          }
          break;
        case 7:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:604:3: ^( OR_ASSIGN a= expr b= expr )
          {
            OR_ASSIGN10 = (CommonTree) match(input, OR_ASSIGN, FOLLOW_OR_ASSIGN_in_expr2479);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2483);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2487);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (OR_ASSIGN10 != null ? OR_ASSIGN10.getType() : 0));
            }
          }
          break;
        case 8:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:609:3: ^( XOR_ASSIGN a= expr b= expr )
          {
            XOR_ASSIGN11 = (CommonTree) match(input, XOR_ASSIGN, FOLLOW_XOR_ASSIGN_in_expr2543);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2547);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2551);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (XOR_ASSIGN11 != null ? XOR_ASSIGN11.getType() : 0));
            }
          }
          break;
        case 9:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:614:3: ^( MOD_ASSIGN a= expr b= expr )
          {
            MOD_ASSIGN12 = (CommonTree) match(input, MOD_ASSIGN, FOLLOW_MOD_ASSIGN_in_expr2607);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2611);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2615);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (MOD_ASSIGN12 != null ? MOD_ASSIGN12.getType() : 0));
            }
          }
          break;
        case 10:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:619:3: ^( BIT_SHIFT_RIGHT_ASSIGN a= expr
          // b= expr )
          {
            BIT_SHIFT_RIGHT_ASSIGN13 =
                (CommonTree)
                    match(input, BIT_SHIFT_RIGHT_ASSIGN, FOLLOW_BIT_SHIFT_RIGHT_ASSIGN_in_expr2671);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2675);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2679);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value =
                  ev.operation(
                      a,
                      b,
                      (BIT_SHIFT_RIGHT_ASSIGN13 != null ? BIT_SHIFT_RIGHT_ASSIGN13.getType() : 0));
            }
          }
          break;
        case 11:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:624:3: ^( SHIFT_RIGHT_ASSIGN a= expr b=
          // expr )
          {
            SHIFT_RIGHT_ASSIGN14 =
                (CommonTree)
                    match(input, SHIFT_RIGHT_ASSIGN, FOLLOW_SHIFT_RIGHT_ASSIGN_in_expr2735);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2739);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2743);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value =
                  ev.operation(
                      a, b, (SHIFT_RIGHT_ASSIGN14 != null ? SHIFT_RIGHT_ASSIGN14.getType() : 0));
            }
          }
          break;
        case 12:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:629:3: ^( SHIFT_LEFT_ASSIGN a= expr b=
          // expr )
          {
            SHIFT_LEFT_ASSIGN15 =
                (CommonTree) match(input, SHIFT_LEFT_ASSIGN, FOLLOW_SHIFT_LEFT_ASSIGN_in_expr2799);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2803);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2807);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value =
                  ev.operation(
                      a, b, (SHIFT_LEFT_ASSIGN15 != null ? SHIFT_LEFT_ASSIGN15.getType() : 0));
            }
          }
          break;
        case 13:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:634:3: ^( QUESTION test= expr a= expr b=
          // expr )
          {
            match(input, QUESTION, FOLLOW_QUESTION_in_expr2863);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2867);
            test = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2871);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2875);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.ternaryOperator(test, a, b);
            }
          }
          break;
        case 14:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:639:3: ^( LOGICAL_OR a= expr b= expr )
          {
            LOGICAL_OR16 = (CommonTree) match(input, LOGICAL_OR, FOLLOW_LOGICAL_OR_in_expr2931);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2935);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2939);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (LOGICAL_OR16 != null ? LOGICAL_OR16.getType() : 0));
            }
          }
          break;
        case 15:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:644:3: ^( LOGICAL_AND a= expr b= expr )
          {
            LOGICAL_AND17 = (CommonTree) match(input, LOGICAL_AND, FOLLOW_LOGICAL_AND_in_expr2995);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr2999);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3003);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (LOGICAL_AND17 != null ? LOGICAL_AND17.getType() : 0));
            }
          }
          break;
        case 16:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:649:3: ^( OR a= expr b= expr )
          {
            OR18 = (CommonTree) match(input, OR, FOLLOW_OR_in_expr3059);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3063);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3067);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (OR18 != null ? OR18.getType() : 0));
            }
          }
          break;
        case 17:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:654:3: ^( XOR a= expr b= expr )
          {
            XOR19 = (CommonTree) match(input, XOR, FOLLOW_XOR_in_expr3123);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3127);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3131);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (XOR19 != null ? XOR19.getType() : 0));
            }
          }
          break;
        case 18:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:659:3: ^( AND a= expr b= expr )
          {
            AND20 = (CommonTree) match(input, AND, FOLLOW_AND_in_expr3187);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3191);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3195);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (AND20 != null ? AND20.getType() : 0));
            }
          }
          break;
        case 19:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:664:3: ^( EQUAL a= expr b= expr )
          {
            EQUAL21 = (CommonTree) match(input, EQUAL, FOLLOW_EQUAL_in_expr3251);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3255);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3259);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (EQUAL21 != null ? EQUAL21.getType() : 0));
            }
          }
          break;
        case 20:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:669:3: ^( NOT_EQUAL a= expr b= expr )
          {
            NOT_EQUAL22 = (CommonTree) match(input, NOT_EQUAL, FOLLOW_NOT_EQUAL_in_expr3315);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3319);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3323);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (NOT_EQUAL22 != null ? NOT_EQUAL22.getType() : 0));
            }
          }
          break;
        case 21:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:674:3: ^( INSTANCEOF expr type )
          {
            match(input, INSTANCEOF, FOLLOW_INSTANCEOF_in_expr3379);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3381);
            expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_type_in_expr3383);
            type();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              throw new ExpressionException("Operation 'instanceof' is not supported yet. ");
            }
          }
          break;
        case 22:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:679:3: ^( LESS_OR_EQUAL a= expr b= expr )
          {
            LESS_OR_EQUAL23 =
                (CommonTree) match(input, LESS_OR_EQUAL, FOLLOW_LESS_OR_EQUAL_in_expr3439);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3443);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3447);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (LESS_OR_EQUAL23 != null ? LESS_OR_EQUAL23.getType() : 0));
            }
          }
          break;
        case 23:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:684:3: ^( GREATER_OR_EQUAL a= expr b=
          // expr )
          {
            GREATER_OR_EQUAL24 =
                (CommonTree) match(input, GREATER_OR_EQUAL, FOLLOW_GREATER_OR_EQUAL_in_expr3503);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3507);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3511);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value =
                  ev.operation(
                      a, b, (GREATER_OR_EQUAL24 != null ? GREATER_OR_EQUAL24.getType() : 0));
            }
          }
          break;
        case 24:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:689:3: ^( BIT_SHIFT_RIGHT a= expr b= expr )
          {
            BIT_SHIFT_RIGHT25 =
                (CommonTree) match(input, BIT_SHIFT_RIGHT, FOLLOW_BIT_SHIFT_RIGHT_in_expr3567);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3571);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3575);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value =
                  ev.operation(a, b, (BIT_SHIFT_RIGHT25 != null ? BIT_SHIFT_RIGHT25.getType() : 0));
            }
          }
          break;
        case 25:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:694:3: ^( SHIFT_RIGHT a= expr b= expr )
          {
            SHIFT_RIGHT26 = (CommonTree) match(input, SHIFT_RIGHT, FOLLOW_SHIFT_RIGHT_in_expr3603);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3607);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3611);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (SHIFT_RIGHT26 != null ? SHIFT_RIGHT26.getType() : 0));
            }
          }
          break;
        case 26:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:699:3: ^( GREATER_THAN a= expr b= expr )
          {
            GREATER_THAN27 =
                (CommonTree) match(input, GREATER_THAN, FOLLOW_GREATER_THAN_in_expr3639);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3643);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3647);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (GREATER_THAN27 != null ? GREATER_THAN27.getType() : 0));
            }
          }
          break;
        case 27:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:704:3: ^( SHIFT_LEFT a= expr b= expr )
          {
            SHIFT_LEFT28 = (CommonTree) match(input, SHIFT_LEFT, FOLLOW_SHIFT_LEFT_in_expr3675);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3679);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3683);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (SHIFT_LEFT28 != null ? SHIFT_LEFT28.getType() : 0));
            }
          }
          break;
        case 28:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:709:3: ^( LESS_THAN a= expr b= expr )
          {
            LESS_THAN29 = (CommonTree) match(input, LESS_THAN, FOLLOW_LESS_THAN_in_expr3711);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3715);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3719);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (LESS_THAN29 != null ? LESS_THAN29.getType() : 0));
            }
          }
          break;
        case 29:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:714:3: ^( PLUS a= expr b= expr )
          {
            PLUS30 = (CommonTree) match(input, PLUS, FOLLOW_PLUS_in_expr3747);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3751);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3755);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (PLUS30 != null ? PLUS30.getType() : 0));
            }
          }
          break;
        case 30:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:719:3: ^( MINUS a= expr b= expr )
          {
            MINUS31 = (CommonTree) match(input, MINUS, FOLLOW_MINUS_in_expr3783);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3787);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3791);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (MINUS31 != null ? MINUS31.getType() : 0));
            }
          }
          break;
        case 31:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:724:3: ^( STAR a= expr b= expr )
          {
            STAR32 = (CommonTree) match(input, STAR, FOLLOW_STAR_in_expr3819);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3823);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3827);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (STAR32 != null ? STAR32.getType() : 0));
            }
          }
          break;
        case 32:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:729:3: ^( DIV a= expr b= expr )
          {
            DIV33 = (CommonTree) match(input, DIV, FOLLOW_DIV_in_expr3855);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3859);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3863);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (DIV33 != null ? DIV33.getType() : 0));
            }
          }
          break;
        case 33:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:734:3: ^( MOD a= expr b= expr )
          {
            MOD34 = (CommonTree) match(input, MOD, FOLLOW_MOD_in_expr3891);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3895);
            a = expr();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3899);
            b = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.operation(a, b, (MOD34 != null ? MOD34.getType() : 0));
            }
          }
          break;
        case 34:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:739:3: ^( UNARY_PLUS a= expr )
          {
            UNARY_PLUS35 = (CommonTree) match(input, UNARY_PLUS, FOLLOW_UNARY_PLUS_in_expr3927);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3931);
            a = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.unaryOperation(a, (UNARY_PLUS35 != null ? UNARY_PLUS35.getType() : 0));
            }
          }
          break;
        case 35:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:744:3: ^( UNARY_MINUS a= expr )
          {
            UNARY_MINUS36 = (CommonTree) match(input, UNARY_MINUS, FOLLOW_UNARY_MINUS_in_expr3959);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3963);
            a = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.unaryOperation(a, (UNARY_MINUS36 != null ? UNARY_MINUS36.getType() : 0));
            }
          }
          break;
        case 36:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:749:3: ^( PRE_INC a= expr )
          {
            match(input, PRE_INC, FOLLOW_PRE_INC_in_expr3991);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr3995);
            a = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              throw new ExpressionException("Operation '++' is not supported yet. ");
            }
          }
          break;
        case 37:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:754:3: ^( PRE_DEC expr )
          {
            match(input, PRE_DEC, FOLLOW_PRE_DEC_in_expr4023);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr4025);
            expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              throw new ExpressionException("Operation '--' is not supported yet. ");
            }
          }
          break;
        case 38:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:759:3: ^( POST_INC a= expr )
          {
            match(input, POST_INC, FOLLOW_POST_INC_in_expr4053);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr4057);
            a = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              throw new ExpressionException("Operation '++' is not supported yet. ");
            }
          }
          break;
        case 39:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:764:3: ^( POST_DEC expr )
          {
            match(input, POST_DEC, FOLLOW_POST_DEC_in_expr4085);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr4087);
            expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              throw new ExpressionException("Operation '--' is not supported yet. ");
            }
          }
          break;
        case 40:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:769:3: ^( NOT a= expr )
          {
            NOT37 = (CommonTree) match(input, NOT, FOLLOW_NOT_in_expr4115);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr4119);
            a = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.unaryOperation(a, (NOT37 != null ? NOT37.getType() : 0));
            }
          }
          break;
        case 41:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:774:3: ^( LOGICAL_NOT a= expr )
          {
            LOGICAL_NOT38 = (CommonTree) match(input, LOGICAL_NOT, FOLLOW_LOGICAL_NOT_in_expr4147);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr4151);
            a = expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = ev.unaryOperation(a, (LOGICAL_NOT38 != null ? LOGICAL_NOT38.getType() : 0));
            }
          }
          break;
        case 42:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:779:3: ^( CAST_EXPR type expr )
          {
            match(input, CAST_EXPR, FOLLOW_CAST_EXPR_in_expr4179);
            if (state.failed) return value;

            match(input, Token.DOWN, null);
            if (state.failed) return value;
            pushFollow(FOLLOW_type_in_expr4181);
            type();

            state._fsp--;
            if (state.failed) return value;
            pushFollow(FOLLOW_expr_in_expr4183);
            expr();

            state._fsp--;
            if (state.failed) return value;

            match(input, Token.UP, null);
            if (state.failed) return value;
            if (state.backtracking == 0) {

              throw new ExpressionException("Operation 'cast' is not supported yet. ");
            }
          }
          break;
        case 43:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:783:5: primaryExpression
          {
            pushFollow(FOLLOW_primaryExpression_in_expr4208);
            primaryExpression39 = primaryExpression();

            state._fsp--;
            if (state.failed) return value;
            if (state.backtracking == 0) {

              value = (primaryExpression39 != null ? primaryExpression39.value : null);
            }
          }
          break;
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 63, expr_StartIndex);
      }
    }
    return value;
  }
  // $ANTLR end "expr"

