  // $ANTLR start "classExtendsClause"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:363:1: classExtendsClause : EXTENDS type -> ^(
  // EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type ) ;
  public final JavaParser.classExtendsClause_return classExtendsClause()
      throws RecognitionException {
    JavaParser.classExtendsClause_return retval = new JavaParser.classExtendsClause_return();
    retval.start = input.LT(1);
    int classExtendsClause_StartIndex = input.index();
    CommonTree root_0 = null;

    Token EXTENDS27 = null;
    JavaParser.type_return type28 = null;

    CommonTree EXTENDS27_tree = null;
    RewriteRuleTokenStream stream_EXTENDS = new RewriteRuleTokenStream(adaptor, "token EXTENDS");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 8)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:364:5: ( EXTENDS type -> ^( EXTENDS_CLAUSE[$EXTENDS,
      // \"EXTENDS_CLAUSE\"] type ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:364:9: EXTENDS type
      {
        EXTENDS27 = (Token) match(input, EXTENDS, FOLLOW_EXTENDS_in_classExtendsClause4854);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_EXTENDS.add(EXTENDS27);

        pushFollow(FOLLOW_type_in_classExtendsClause4856);
        type28 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type28.getTree());

        // AST REWRITE
        // elements: type
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 365:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] type )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:365:13: ^( EXTENDS_CLAUSE[$EXTENDS,
            // \"EXTENDS_CLAUSE\"] type )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(EXTENDS_CLAUSE, EXTENDS27, "EXTENDS_CLAUSE"),
                          root_1);

              adaptor.addChild(root_1, stream_type.nextTree());

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 8, classExtendsClause_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "classExtendsClause"

