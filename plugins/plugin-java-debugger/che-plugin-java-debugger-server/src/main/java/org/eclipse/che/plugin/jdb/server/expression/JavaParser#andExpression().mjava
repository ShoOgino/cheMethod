    // $ANTLR start "andExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:886:1: andExpression : equalityExpression ( AND equalityExpression
    // )* ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token AND400 = null;
        JavaParser.equalityExpression_return equalityExpression399 = null;

        JavaParser.equalityExpression_return equalityExpression401 = null;


        CommonTree AND400_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 95)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:887:5: ( equalityExpression ( AND equalityExpression )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:887:9: equalityExpression ( AND equalityExpression )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_equalityExpression_in_andExpression10943);
                equalityExpression399 = equalityExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, equalityExpression399.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:887:28: ( AND equalityExpression )*
                loop114:
                do {
                    int alt114 = 2;
                    int LA114_0 = input.LA(1);

                    if ((LA114_0 == AND)) {
                        alt114 = 1;
                    }


                    switch (alt114) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:887:29: AND equalityExpression
                        {
                            AND400 = (Token)match(input, AND, FOLLOW_AND_in_andExpression10946);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                AND400_tree = (CommonTree)adaptor.create(AND400);
                                root_0 = (CommonTree)adaptor.becomeRoot(AND400_tree, root_0);
                            }
                            pushFollow(FOLLOW_equalityExpression_in_andExpression10949);
                            equalityExpression401 = equalityExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, equalityExpression401.getTree());

                        }
                        break;

                        default:
                            break loop114;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 95, andExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

