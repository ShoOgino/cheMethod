  // $ANTLR start "forUpdater"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:827:1: forUpdater : ( expressionList )? -> ^( FOR_UPDATE (
  // expressionList )? ) ;
  public final JavaParser.forUpdater_return forUpdater() throws RecognitionException {
    JavaParser.forUpdater_return retval = new JavaParser.forUpdater_return();
    retval.start = input.LT(1);
    int forUpdater_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.expressionList_return expressionList360 = null;

    RewriteRuleSubtreeStream stream_expressionList =
        new RewriteRuleSubtreeStream(adaptor, "rule expressionList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 85)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:828:5: ( ( expressionList )? -> ^( FOR_UPDATE (
      // expressionList )? ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:828:9: ( expressionList )?
      {
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:828:9: ( expressionList )?
        int alt105 = 2;
        int LA105_0 = input.LA(1);

        if ((LA105_0 == DEC
            || LA105_0 == INC
            || LA105_0 == LESS_THAN
            || LA105_0 == LOGICAL_NOT
            || (LA105_0 >= LPAREN && LA105_0 <= MINUS)
            || LA105_0 == NOT
            || LA105_0 == PLUS
            || LA105_0 == BOOLEAN
            || LA105_0 == BYTE
            || LA105_0 == CHAR
            || LA105_0 == DOUBLE
            || LA105_0 == FALSE
            || LA105_0 == FLOAT
            || (LA105_0 >= INT && LA105_0 <= LONG)
            || (LA105_0 >= NEW && LA105_0 <= NULL)
            || LA105_0 == SHORT
            || LA105_0 == SUPER
            || LA105_0 == THIS
            || LA105_0 == TRUE
            || LA105_0 == VOID
            || (LA105_0 >= IDENT && LA105_0 <= STRING_LITERAL))) {
          alt105 = 1;
        }
        switch (alt105) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: expressionList
            {
              pushFollow(FOLLOW_expressionList_in_forUpdater10380);
              expressionList360 = expressionList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_expressionList.add(expressionList360.getTree());
            }
            break;
        }

        // AST REWRITE
        // elements: expressionList
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 829:9: -> ^( FOR_UPDATE ( expressionList )? )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:829:13: ^( FOR_UPDATE ( expressionList )? )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(FOR_UPDATE, "FOR_UPDATE"), root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:829:26: ( expressionList )?
              if (stream_expressionList.hasNext()) {
                adaptor.addChild(root_1, stream_expressionList.nextTree());
              }
              stream_expressionList.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 85, forUpdater_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "forUpdater"

