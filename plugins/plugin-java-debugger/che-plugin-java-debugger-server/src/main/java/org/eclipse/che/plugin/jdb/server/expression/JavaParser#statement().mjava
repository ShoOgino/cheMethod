  // $ANTLR start "statement"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:756:1: statement : ( block | ASSERT expr1= expression ( COLON
  // expr2= expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement (
  // ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) ) | FOR
  // LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) |
  // localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT
  // expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE parenthesizedExpression statement ) | DO statement
  // WHILE parenthesizedExpression SEMI -> ^( DO statement parenthesizedExpression ) | TRY block ( catches ( finallyClause )? |
  // finallyClause ) -> ^( TRY block ( catches )? ( finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY
  // -> ^( SWITCH parenthesizedExpression switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED
  // parenthesizedExpression block ) | RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW
  // expression ) | BREAK ( IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON
  // statement -> ^( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI );
  public final JavaParser.statement_return statement() throws RecognitionException {
    JavaParser.statement_return retval = new JavaParser.statement_return();
    retval.start = input.LT(1);
    int statement_StartIndex = input.index();
    CommonTree root_0 = null;

    Token ASSERT276 = null;
    Token COLON277 = null;
    Token SEMI278 = null;
    Token SEMI279 = null;
    Token IF280 = null;
    Token ELSE282 = null;
    Token FOR283 = null;
    Token LPAREN284 = null;
    Token SEMI286 = null;
    Token SEMI288 = null;
    Token RPAREN290 = null;
    Token IDENT294 = null;
    Token COLON295 = null;
    Token RPAREN297 = null;
    Token WHILE299 = null;
    Token DO302 = null;
    Token WHILE304 = null;
    Token SEMI306 = null;
    Token TRY307 = null;
    Token SWITCH312 = null;
    Token LCURLY314 = null;
    Token RCURLY316 = null;
    Token SYNCHRONIZED317 = null;
    Token RETURN320 = null;
    Token SEMI322 = null;
    Token THROW323 = null;
    Token SEMI325 = null;
    Token BREAK326 = null;
    Token IDENT327 = null;
    Token SEMI328 = null;
    Token CONTINUE329 = null;
    Token IDENT330 = null;
    Token SEMI331 = null;
    Token IDENT332 = null;
    Token COLON333 = null;
    Token SEMI336 = null;
    Token SEMI337 = null;
    JavaParser.expression_return expr1 = null;

    JavaParser.expression_return expr2 = null;

    JavaParser.statement_return ifStat = null;

    JavaParser.statement_return elseStat = null;

    JavaParser.block_return block275 = null;

    JavaParser.parenthesizedExpression_return parenthesizedExpression281 = null;

    JavaParser.forInit_return forInit285 = null;

    JavaParser.forCondition_return forCondition287 = null;

    JavaParser.forUpdater_return forUpdater289 = null;

    JavaParser.statement_return statement291 = null;

    JavaParser.localModifierList_return localModifierList292 = null;

    JavaParser.type_return type293 = null;

    JavaParser.expression_return expression296 = null;

    JavaParser.statement_return statement298 = null;

    JavaParser.parenthesizedExpression_return parenthesizedExpression300 = null;

    JavaParser.statement_return statement301 = null;

    JavaParser.statement_return statement303 = null;

    JavaParser.parenthesizedExpression_return parenthesizedExpression305 = null;

    JavaParser.block_return block308 = null;

    JavaParser.catches_return catches309 = null;

    JavaParser.finallyClause_return finallyClause310 = null;

    JavaParser.finallyClause_return finallyClause311 = null;

    JavaParser.parenthesizedExpression_return parenthesizedExpression313 = null;

    JavaParser.switchBlockLabels_return switchBlockLabels315 = null;

    JavaParser.parenthesizedExpression_return parenthesizedExpression318 = null;

    JavaParser.block_return block319 = null;

    JavaParser.expression_return expression321 = null;

    JavaParser.expression_return expression324 = null;

    JavaParser.statement_return statement334 = null;

    JavaParser.expression_return expression335 = null;

    CommonTree ASSERT276_tree = null;
    CommonTree COLON277_tree = null;
    CommonTree SEMI278_tree = null;
    CommonTree SEMI279_tree = null;
    CommonTree IF280_tree = null;
    CommonTree ELSE282_tree = null;
    CommonTree FOR283_tree = null;
    CommonTree LPAREN284_tree = null;
    CommonTree SEMI286_tree = null;
    CommonTree SEMI288_tree = null;
    CommonTree RPAREN290_tree = null;
    CommonTree IDENT294_tree = null;
    CommonTree COLON295_tree = null;
    CommonTree RPAREN297_tree = null;
    CommonTree WHILE299_tree = null;
    CommonTree DO302_tree = null;
    CommonTree WHILE304_tree = null;
    CommonTree SEMI306_tree = null;
    CommonTree TRY307_tree = null;
    CommonTree SWITCH312_tree = null;
    CommonTree LCURLY314_tree = null;
    CommonTree RCURLY316_tree = null;
    CommonTree SYNCHRONIZED317_tree = null;
    CommonTree RETURN320_tree = null;
    CommonTree SEMI322_tree = null;
    CommonTree THROW323_tree = null;
    CommonTree SEMI325_tree = null;
    CommonTree BREAK326_tree = null;
    CommonTree IDENT327_tree = null;
    CommonTree SEMI328_tree = null;
    CommonTree CONTINUE329_tree = null;
    CommonTree IDENT330_tree = null;
    CommonTree SEMI331_tree = null;
    CommonTree IDENT332_tree = null;
    CommonTree COLON333_tree = null;
    CommonTree SEMI336_tree = null;
    CommonTree SEMI337_tree = null;
    RewriteRuleTokenStream stream_COLON = new RewriteRuleTokenStream(adaptor, "token COLON");
    RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
    RewriteRuleTokenStream stream_SYNCHRONIZED =
        new RewriteRuleTokenStream(adaptor, "token SYNCHRONIZED");
    RewriteRuleTokenStream stream_WHILE = new RewriteRuleTokenStream(adaptor, "token WHILE");
    RewriteRuleTokenStream stream_CONTINUE = new RewriteRuleTokenStream(adaptor, "token CONTINUE");
    RewriteRuleTokenStream stream_SWITCH = new RewriteRuleTokenStream(adaptor, "token SWITCH");
    RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
    RewriteRuleTokenStream stream_ELSE = new RewriteRuleTokenStream(adaptor, "token ELSE");
    RewriteRuleTokenStream stream_RETURN = new RewriteRuleTokenStream(adaptor, "token RETURN");
    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
    RewriteRuleTokenStream stream_FOR = new RewriteRuleTokenStream(adaptor, "token FOR");
    RewriteRuleTokenStream stream_DO = new RewriteRuleTokenStream(adaptor, "token DO");
    RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
    RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
    RewriteRuleTokenStream stream_ASSERT = new RewriteRuleTokenStream(adaptor, "token ASSERT");
    RewriteRuleTokenStream stream_BREAK = new RewriteRuleTokenStream(adaptor, "token BREAK");
    RewriteRuleTokenStream stream_THROW = new RewriteRuleTokenStream(adaptor, "token THROW");
    RewriteRuleTokenStream stream_TRY = new RewriteRuleTokenStream(adaptor, "token TRY");
    RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
    RewriteRuleTokenStream stream_IF = new RewriteRuleTokenStream(adaptor, "token IF");
    RewriteRuleSubtreeStream stream_statement =
        new RewriteRuleSubtreeStream(adaptor, "rule statement");
    RewriteRuleSubtreeStream stream_expression =
        new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_finallyClause =
        new RewriteRuleSubtreeStream(adaptor, "rule finallyClause");
    RewriteRuleSubtreeStream stream_catches = new RewriteRuleSubtreeStream(adaptor, "rule catches");
    RewriteRuleSubtreeStream stream_forUpdater =
        new RewriteRuleSubtreeStream(adaptor, "rule forUpdater");
    RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
    RewriteRuleSubtreeStream stream_forCondition =
        new RewriteRuleSubtreeStream(adaptor, "rule forCondition");
    RewriteRuleSubtreeStream stream_localModifierList =
        new RewriteRuleSubtreeStream(adaptor, "rule localModifierList");
    RewriteRuleSubtreeStream stream_forInit = new RewriteRuleSubtreeStream(adaptor, "rule forInit");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    RewriteRuleSubtreeStream stream_switchBlockLabels =
        new RewriteRuleSubtreeStream(adaptor, "rule switchBlockLabels");
    RewriteRuleSubtreeStream stream_parenthesizedExpression =
        new RewriteRuleSubtreeStream(adaptor, "rule parenthesizedExpression");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 75)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:757:5: ( block | ASSERT expr1= expression ( COLON expr2=
      // expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) ) | IF parenthesizedExpression ifStat= statement (
      // ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
      // | FOR LPAREN ( forInit SEMI forCondition SEMI forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater
      // statement ) | localModifierList type IDENT COLON expression RPAREN statement -> ^( FOR_EACH[$FOR,
      // \"FOR_EACH\"] localModifierList type IDENT expression statement ) ) | WHILE parenthesizedExpression statement -> ^( WHILE
      // parenthesizedExpression statement ) | DO statement WHILE parenthesizedExpression SEMI -> ^( DO statement
      // parenthesizedExpression ) | TRY block ( catches ( finallyClause )? | finallyClause ) -> ^( TRY block ( catches )? (
      // finallyClause )? ) | SWITCH parenthesizedExpression LCURLY switchBlockLabels RCURLY -> ^( SWITCH parenthesizedExpression
      // switchBlockLabels ) | SYNCHRONIZED parenthesizedExpression block -> ^( SYNCHRONIZED parenthesizedExpression block ) |
      // RETURN ( expression )? SEMI -> ^( RETURN ( expression )? ) | THROW expression SEMI -> ^( THROW expression ) | BREAK (
      // IDENT )? SEMI -> ^( BREAK ( IDENT )? ) | CONTINUE ( IDENT )? SEMI -> ^( CONTINUE ( IDENT )? ) | IDENT COLON statement -> ^
      // ( LABELED_STATEMENT IDENT statement ) | expression SEMI | SEMI )
      int alt97 = 16;
      alt97 = dfa97.predict(input);
      switch (alt97) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:757:9: block
          {
            root_0 = (CommonTree) adaptor.nil();

            pushFollow(FOLLOW_block_in_statement8764);
            block275 = block();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) adaptor.addChild(root_0, block275.getTree());
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:758:9: ASSERT expr1= expression ( COLON expr2=
          // expression SEMI -> ^( ASSERT $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
          {
            ASSERT276 = (Token) match(input, ASSERT, FOLLOW_ASSERT_in_statement8774);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_ASSERT.add(ASSERT276);

            pushFollow(FOLLOW_expression_in_statement8778);
            expr1 = expression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_expression.add(expr1.getTree());
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:759:9: ( COLON expr2= expression SEMI -> ^( ASSERT
            // $expr1 $expr2) | SEMI -> ^( ASSERT $expr1) )
            int alt89 = 2;
            int LA89_0 = input.LA(1);

            if ((LA89_0 == COLON)) {
              alt89 = 1;
            } else if ((LA89_0 == SEMI)) {
              alt89 = 2;
            } else {
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              NoViableAltException nvae = new NoViableAltException("", 89, 0, input);

              throw nvae;
            }
            switch (alt89) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:759:13: COLON expr2= expression SEMI
                {
                  COLON277 = (Token) match(input, COLON, FOLLOW_COLON_in_statement8793);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_COLON.add(COLON277);

                  pushFollow(FOLLOW_expression_in_statement8797);
                  expr2 = expression();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_expression.add(expr2.getTree());
                  SEMI278 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement8799);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_SEMI.add(SEMI278);

                  // AST REWRITE
                  // elements: expr2, ASSERT, expr1
                  // token labels:
                  // rule labels: retval, expr1, expr2
                  // token list labels:
                  // rule list labels:
                  // wildcard labels:
                  if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule retval", retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_expr1 =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule expr1", expr1 != null ? expr1.tree : null);
                    RewriteRuleSubtreeStream stream_expr2 =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule expr2", expr2 != null ? expr2.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 759:77: -> ^( ASSERT $expr1 $expr2)
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:759:81: ^( ASSERT $expr1 $expr2)
                      {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr1.nextTree());
                        adaptor.addChild(root_1, stream_expr2.nextTree());

                        adaptor.addChild(root_0, root_1);
                      }
                    }

                    retval.tree = root_0;
                  }
                }
                break;
              case 2:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:760:13: SEMI
                {
                  SEMI279 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement8862);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_SEMI.add(SEMI279);

                  // AST REWRITE
                  // elements: ASSERT, expr1
                  // token labels:
                  // rule labels: retval, expr1
                  // token list labels:
                  // rule list labels:
                  // wildcard labels:
                  if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule retval", retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_expr1 =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule expr1", expr1 != null ? expr1.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 760:77: -> ^( ASSERT $expr1)
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:760:81: ^( ASSERT $expr1)
                      {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_ASSERT.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_expr1.nextTree());

                        adaptor.addChild(root_0, root_1);
                      }
                    }

                    retval.tree = root_0;
                  }
                }
                break;
            }
          }
          break;
        case 3:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:762:9: IF parenthesizedExpression ifStat=
          // statement ( ELSE elseStat= statement -> ^( IF parenthesizedExpression $ifStat $elseStat) | -> ^( IF
          // parenthesizedExpression $ifStat) )
          {
            IF280 = (Token) match(input, IF, FOLLOW_IF_in_statement8951);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_IF.add(IF280);

            pushFollow(FOLLOW_parenthesizedExpression_in_statement8953);
            parenthesizedExpression281 = parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_parenthesizedExpression.add(parenthesizedExpression281.getTree());
            pushFollow(FOLLOW_statement_in_statement8957);
            ifStat = statement();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_statement.add(ifStat.getTree());
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:763:9: ( ELSE elseStat= statement -> ^( IF
            // parenthesizedExpression $ifStat $elseStat) | -> ^( IF parenthesizedExpression $ifStat) )
            int alt90 = 2;
            int LA90_0 = input.LA(1);

            if ((LA90_0 == ELSE)) {
              int LA90_1 = input.LA(2);

              if ((synpred121_Java())) {
                alt90 = 1;
              } else if ((true)) {
                alt90 = 2;
              } else {
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 90, 1, input);

                throw nvae;
              }
            } else if ((LA90_0 == EOF
                || LA90_0 == AT
                || LA90_0 == DEC
                || LA90_0 == INC
                || LA90_0 == LCURLY
                || LA90_0 == LESS_THAN
                || LA90_0 == LOGICAL_NOT
                || (LA90_0 >= LPAREN && LA90_0 <= MINUS)
                || LA90_0 == NOT
                || LA90_0 == PLUS
                || LA90_0 == RCURLY
                || LA90_0 == SEMI
                || (LA90_0 >= ABSTRACT && LA90_0 <= CASE)
                || (LA90_0 >= CHAR && LA90_0 <= DOUBLE)
                || LA90_0 == ENUM
                || (LA90_0 >= FALSE && LA90_0 <= FINAL)
                || (LA90_0 >= FLOAT && LA90_0 <= IF)
                || LA90_0 == INTERFACE
                || (LA90_0 >= INT && LA90_0 <= NULL)
                || (LA90_0 >= PRIVATE && LA90_0 <= THROW)
                || (LA90_0 >= TRANSIENT && LA90_0 <= WHILE)
                || (LA90_0 >= IDENT && LA90_0 <= STRING_LITERAL))) {
              alt90 = 2;
            } else {
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              NoViableAltException nvae = new NoViableAltException("", 90, 0, input);

              throw nvae;
            }
            switch (alt90) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:763:13: ELSE elseStat= statement
                {
                  ELSE282 = (Token) match(input, ELSE, FOLLOW_ELSE_in_statement8972);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_ELSE.add(ELSE282);

                  pushFollow(FOLLOW_statement_in_statement8976);
                  elseStat = statement();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_statement.add(elseStat.getTree());

                  // AST REWRITE
                  // elements: ifStat, elseStat, parenthesizedExpression, IF
                  // token labels:
                  // rule labels: retval, ifStat, elseStat
                  // token list labels:
                  // rule list labels:
                  // wildcard labels:
                  if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule retval", retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_ifStat =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule ifStat", ifStat != null ? ifStat.tree : null);
                    RewriteRuleSubtreeStream stream_elseStat =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule elseStat", elseStat != null ? elseStat.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 763:77: -> ^( IF parenthesizedExpression $ifStat $elseStat)
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:763:81: ^( IF
                      // parenthesizedExpression $ifStat $elseStat)
                      {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_ifStat.nextTree());
                        adaptor.addChild(root_1, stream_elseStat.nextTree());

                        adaptor.addChild(root_0, root_1);
                      }
                    }

                    retval.tree = root_0;
                  }
                }
                break;
              case 2:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:764:77:
                {

                  // AST REWRITE
                  // elements: IF, ifStat, parenthesizedExpression
                  // token labels:
                  // rule labels: retval, ifStat
                  // token list labels:
                  // rule list labels:
                  // wildcard labels:
                  if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule retval", retval != null ? retval.tree : null);
                    RewriteRuleSubtreeStream stream_ifStat =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule ifStat", ifStat != null ? ifStat.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 764:77: -> ^( IF parenthesizedExpression $ifStat)
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:764:81: ^( IF
                      // parenthesizedExpression $ifStat)
                      {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_IF.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                        adaptor.addChild(root_1, stream_ifStat.nextTree());

                        adaptor.addChild(root_0, root_1);
                      }
                    }

                    retval.tree = root_0;
                  }
                }
                break;
            }
          }
          break;
        case 4:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:766:9: FOR LPAREN ( forInit SEMI forCondition SEMI
          // forUpdater RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT
          // COLON expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression
          // statement ) )
          {
            FOR283 = (Token) match(input, FOR, FOLLOW_FOR_in_statement9142);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_FOR.add(FOR283);

            LPAREN284 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_statement9144);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_LPAREN.add(LPAREN284);

            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:767:9: ( forInit SEMI forCondition SEMI forUpdater
            // RPAREN statement -> ^( FOR forInit forCondition forUpdater statement ) | localModifierList type IDENT COLON
            // expression RPAREN statement -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement ) )
            int alt91 = 2;
            alt91 = dfa91.predict(input);
            switch (alt91) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:767:13: forInit SEMI forCondition SEMI
                // forUpdater RPAREN statement
                {
                  pushFollow(FOLLOW_forInit_in_statement9159);
                  forInit285 = forInit();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_forInit.add(forInit285.getTree());
                  SEMI286 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9161);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_SEMI.add(SEMI286);

                  pushFollow(FOLLOW_forCondition_in_statement9163);
                  forCondition287 = forCondition();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_forCondition.add(forCondition287.getTree());
                  SEMI288 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9165);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_SEMI.add(SEMI288);

                  pushFollow(FOLLOW_forUpdater_in_statement9167);
                  forUpdater289 = forUpdater();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_forUpdater.add(forUpdater289.getTree());
                  RPAREN290 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_statement9169);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_RPAREN.add(RPAREN290);

                  pushFollow(FOLLOW_statement_in_statement9171);
                  statement291 = statement();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_statement.add(statement291.getTree());

                  // AST REWRITE
                  // elements: forCondition, statement, forUpdater, forInit, FOR
                  // token labels:
                  // rule labels: retval
                  // token list labels:
                  // rule list labels:
                  // wildcard labels:
                  if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 767:77: -> ^( FOR forInit forCondition forUpdater statement )
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:767:81: ^( FOR forInit
                      // forCondition forUpdater statement )
                      {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        root_1 = (CommonTree) adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_forInit.nextTree());
                        adaptor.addChild(root_1, stream_forCondition.nextTree());
                        adaptor.addChild(root_1, stream_forUpdater.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                      }
                    }

                    retval.tree = root_0;
                  }
                }
                break;
              case 2:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:768:13: localModifierList type IDENT COLON
                // expression RPAREN statement
                {
                  pushFollow(FOLLOW_localModifierList_in_statement9206);
                  localModifierList292 = localModifierList();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_localModifierList.add(localModifierList292.getTree());
                  pushFollow(FOLLOW_type_in_statement9208);
                  type293 = type();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_type.add(type293.getTree());
                  IDENT294 = (Token) match(input, IDENT, FOLLOW_IDENT_in_statement9210);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_IDENT.add(IDENT294);

                  COLON295 = (Token) match(input, COLON, FOLLOW_COLON_in_statement9212);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_COLON.add(COLON295);

                  pushFollow(FOLLOW_expression_in_statement9214);
                  expression296 = expression();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_expression.add(expression296.getTree());
                  RPAREN297 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_statement9216);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_RPAREN.add(RPAREN297);

                  pushFollow(FOLLOW_statement_in_statement9218);
                  statement298 = statement();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_statement.add(statement298.getTree());

                  // AST REWRITE
                  // elements: expression, type, statement, IDENT, localModifierList
                  // token labels:
                  // rule labels: retval
                  // token list labels:
                  // rule list labels:
                  // wildcard labels:
                  if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 769:77: -> ^( FOR_EACH[$FOR, \"FOR_EACH\"] localModifierList type IDENT expression statement )
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:769:81: ^( FOR_EACH[$FOR,
                      // \"FOR_EACH\"] localModifierList type IDENT expression statement )
                      {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        root_1 =
                            (CommonTree)
                                adaptor.becomeRoot(
                                    (CommonTree) adaptor.create(FOR_EACH, FOR283, "FOR_EACH"),
                                    root_1);

                        adaptor.addChild(root_1, stream_localModifierList.nextTree());
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                      }
                    }

                    retval.tree = root_0;
                  }
                }
                break;
            }
          }
          break;
        case 5:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:771:9: WHILE parenthesizedExpression statement
          {
            WHILE299 = (Token) match(input, WHILE, FOLLOW_WHILE_in_statement9333);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_WHILE.add(WHILE299);

            pushFollow(FOLLOW_parenthesizedExpression_in_statement9335);
            parenthesizedExpression300 = parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_parenthesizedExpression.add(parenthesizedExpression300.getTree());
            pushFollow(FOLLOW_statement_in_statement9337);
            statement301 = statement();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_statement.add(statement301.getTree());

            // AST REWRITE
            // elements: parenthesizedExpression, statement, WHILE
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 771:77: -> ^( WHILE parenthesizedExpression statement )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:771:81: ^( WHILE parenthesizedExpression
                // statement )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_WHILE.nextNode(), root_1);

                  adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                  adaptor.addChild(root_1, stream_statement.nextTree());

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 6:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:772:9: DO statement WHILE parenthesizedExpression
          // SEMI
          {
            DO302 = (Token) match(input, DO, FOLLOW_DO_in_statement9386);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_DO.add(DO302);

            pushFollow(FOLLOW_statement_in_statement9388);
            statement303 = statement();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_statement.add(statement303.getTree());
            WHILE304 = (Token) match(input, WHILE, FOLLOW_WHILE_in_statement9390);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_WHILE.add(WHILE304);

            pushFollow(FOLLOW_parenthesizedExpression_in_statement9392);
            parenthesizedExpression305 = parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_parenthesizedExpression.add(parenthesizedExpression305.getTree());
            SEMI306 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9394);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_SEMI.add(SEMI306);

            // AST REWRITE
            // elements: statement, DO, parenthesizedExpression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 772:77: -> ^( DO statement parenthesizedExpression )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:772:81: ^( DO statement
                // parenthesizedExpression )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_DO.nextNode(), root_1);

                  adaptor.addChild(root_1, stream_statement.nextTree());
                  adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 7:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:9: TRY block ( catches ( finallyClause )? |
          // finallyClause )
          {
            TRY307 = (Token) match(input, TRY, FOLLOW_TRY_in_statement9435);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_TRY.add(TRY307);

            pushFollow(FOLLOW_block_in_statement9437);
            block308 = block();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_block.add(block308.getTree());
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:19: ( catches ( finallyClause )? |
            // finallyClause )
            int alt93 = 2;
            int LA93_0 = input.LA(1);

            if ((LA93_0 == CATCH)) {
              alt93 = 1;
            } else if ((LA93_0 == FINALLY)) {
              alt93 = 2;
            } else {
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              NoViableAltException nvae = new NoViableAltException("", 93, 0, input);

              throw nvae;
            }
            switch (alt93) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:20: catches ( finallyClause )?
                {
                  pushFollow(FOLLOW_catches_in_statement9440);
                  catches309 = catches();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_catches.add(catches309.getTree());
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:28: ( finallyClause )?
                  int alt92 = 2;
                  int LA92_0 = input.LA(1);

                  if ((LA92_0 == FINALLY)) {
                    alt92 = 1;
                  }
                  switch (alt92) {
                    case 1:
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: finallyClause
                      {
                        pushFollow(FOLLOW_finallyClause_in_statement9442);
                        finallyClause310 = finallyClause();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_finallyClause.add(finallyClause310.getTree());
                      }
                      break;
                  }
                }
                break;
              case 2:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:45: finallyClause
                {
                  pushFollow(FOLLOW_finallyClause_in_statement9447);
                  finallyClause311 = finallyClause();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_finallyClause.add(finallyClause311.getTree());
                }
                break;
            }

            // AST REWRITE
            // elements: block, finallyClause, catches, TRY
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 773:77: -> ^( TRY block ( catches )? ( finallyClause )? )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:81: ^( TRY block ( catches )? (
                // finallyClause )? )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_TRY.nextNode(), root_1);

                  adaptor.addChild(root_1, stream_block.nextTree());
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:93: ( catches )?
                  if (stream_catches.hasNext()) {
                    adaptor.addChild(root_1, stream_catches.nextTree());
                  }
                  stream_catches.reset();
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:773:102: ( finallyClause )?
                  if (stream_finallyClause.hasNext()) {
                    adaptor.addChild(root_1, stream_finallyClause.nextTree());
                  }
                  stream_finallyClause.reset();

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 8:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:774:9: SWITCH parenthesizedExpression LCURLY
          // switchBlockLabels RCURLY
          {
            SWITCH312 = (Token) match(input, SWITCH, FOLLOW_SWITCH_in_statement9490);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_SWITCH.add(SWITCH312);

            pushFollow(FOLLOW_parenthesizedExpression_in_statement9492);
            parenthesizedExpression313 = parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_parenthesizedExpression.add(parenthesizedExpression313.getTree());
            LCURLY314 = (Token) match(input, LCURLY, FOLLOW_LCURLY_in_statement9494);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_LCURLY.add(LCURLY314);

            pushFollow(FOLLOW_switchBlockLabels_in_statement9496);
            switchBlockLabels315 = switchBlockLabels();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_switchBlockLabels.add(switchBlockLabels315.getTree());
            RCURLY316 = (Token) match(input, RCURLY, FOLLOW_RCURLY_in_statement9498);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_RCURLY.add(RCURLY316);

            // AST REWRITE
            // elements: switchBlockLabels, parenthesizedExpression, SWITCH
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 774:77: -> ^( SWITCH parenthesizedExpression switchBlockLabels )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:774:81: ^( SWITCH parenthesizedExpression
                // switchBlockLabels )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_SWITCH.nextNode(), root_1);

                  adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                  adaptor.addChild(root_1, stream_switchBlockLabels.nextTree());

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 9:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:775:9: SYNCHRONIZED parenthesizedExpression block
          {
            SYNCHRONIZED317 =
                (Token) match(input, SYNCHRONIZED, FOLLOW_SYNCHRONIZED_in_statement9524);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_SYNCHRONIZED.add(SYNCHRONIZED317);

            pushFollow(FOLLOW_parenthesizedExpression_in_statement9526);
            parenthesizedExpression318 = parenthesizedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_parenthesizedExpression.add(parenthesizedExpression318.getTree());
            pushFollow(FOLLOW_block_in_statement9528);
            block319 = block();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_block.add(block319.getTree());

            // AST REWRITE
            // elements: block, SYNCHRONIZED, parenthesizedExpression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 775:77: -> ^( SYNCHRONIZED parenthesizedExpression block )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:775:81: ^( SYNCHRONIZED
                // parenthesizedExpression block )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_SYNCHRONIZED.nextNode(), root_1);

                  adaptor.addChild(root_1, stream_parenthesizedExpression.nextTree());
                  adaptor.addChild(root_1, stream_block.nextTree());

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 10:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:776:9: RETURN ( expression )? SEMI
          {
            RETURN320 = (Token) match(input, RETURN, FOLLOW_RETURN_in_statement9574);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_RETURN.add(RETURN320);

            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:776:16: ( expression )?
            int alt94 = 2;
            int LA94_0 = input.LA(1);

            if ((LA94_0 == DEC
                || LA94_0 == INC
                || LA94_0 == LESS_THAN
                || LA94_0 == LOGICAL_NOT
                || (LA94_0 >= LPAREN && LA94_0 <= MINUS)
                || LA94_0 == NOT
                || LA94_0 == PLUS
                || LA94_0 == BOOLEAN
                || LA94_0 == BYTE
                || LA94_0 == CHAR
                || LA94_0 == DOUBLE
                || LA94_0 == FALSE
                || LA94_0 == FLOAT
                || (LA94_0 >= INT && LA94_0 <= LONG)
                || (LA94_0 >= NEW && LA94_0 <= NULL)
                || LA94_0 == SHORT
                || LA94_0 == SUPER
                || LA94_0 == THIS
                || LA94_0 == TRUE
                || LA94_0 == VOID
                || (LA94_0 >= IDENT && LA94_0 <= STRING_LITERAL))) {
              alt94 = 1;
            }
            switch (alt94) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: expression
                {
                  pushFollow(FOLLOW_expression_in_statement9576);
                  expression321 = expression();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_expression.add(expression321.getTree());
                }
                break;
            }

            SEMI322 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9579);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_SEMI.add(SEMI322);

            // AST REWRITE
            // elements: RETURN, expression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 776:77: -> ^( RETURN ( expression )? )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:776:81: ^( RETURN ( expression )? )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_RETURN.nextNode(), root_1);

                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:776:90: ( expression )?
                  if (stream_expression.hasNext()) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                  }
                  stream_expression.reset();

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 11:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:777:9: THROW expression SEMI
          {
            THROW323 = (Token) match(input, THROW, FOLLOW_THROW_in_statement9643);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_THROW.add(THROW323);

            pushFollow(FOLLOW_expression_in_statement9645);
            expression324 = expression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_expression.add(expression324.getTree());
            SEMI325 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9647);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_SEMI.add(SEMI325);

            // AST REWRITE
            // elements: THROW, expression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 777:77: -> ^( THROW expression )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:777:81: ^( THROW expression )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_THROW.nextNode(), root_1);

                  adaptor.addChild(root_1, stream_expression.nextTree());

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 12:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:778:9: BREAK ( IDENT )? SEMI
          {
            BREAK326 = (Token) match(input, BREAK, FOLLOW_BREAK_in_statement9712);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_BREAK.add(BREAK326);

            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:778:15: ( IDENT )?
            int alt95 = 2;
            int LA95_0 = input.LA(1);

            if ((LA95_0 == IDENT)) {
              alt95 = 1;
            }
            switch (alt95) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: IDENT
                {
                  IDENT327 = (Token) match(input, IDENT, FOLLOW_IDENT_in_statement9714);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_IDENT.add(IDENT327);
                }
                break;
            }

            SEMI328 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9717);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_SEMI.add(SEMI328);

            // AST REWRITE
            // elements: BREAK, IDENT
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 778:77: -> ^( BREAK ( IDENT )? )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:778:81: ^( BREAK ( IDENT )? )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_BREAK.nextNode(), root_1);

                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:778:89: ( IDENT )?
                  if (stream_IDENT.hasNext()) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                  }
                  stream_IDENT.reset();

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 13:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:779:9: CONTINUE ( IDENT )? SEMI
          {
            CONTINUE329 = (Token) match(input, CONTINUE, FOLLOW_CONTINUE_in_statement9787);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_CONTINUE.add(CONTINUE329);

            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:779:18: ( IDENT )?
            int alt96 = 2;
            int LA96_0 = input.LA(1);

            if ((LA96_0 == IDENT)) {
              alt96 = 1;
            }
            switch (alt96) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: IDENT
                {
                  IDENT330 = (Token) match(input, IDENT, FOLLOW_IDENT_in_statement9789);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_IDENT.add(IDENT330);
                }
                break;
            }

            SEMI331 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9792);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_SEMI.add(SEMI331);

            // AST REWRITE
            // elements: CONTINUE, IDENT
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 779:77: -> ^( CONTINUE ( IDENT )? )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:779:81: ^( CONTINUE ( IDENT )? )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 = (CommonTree) adaptor.becomeRoot(stream_CONTINUE.nextNode(), root_1);

                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:779:92: ( IDENT )?
                  if (stream_IDENT.hasNext()) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                  }
                  stream_IDENT.reset();

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 14:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:780:9: IDENT COLON statement
          {
            IDENT332 = (Token) match(input, IDENT, FOLLOW_IDENT_in_statement9859);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_IDENT.add(IDENT332);

            COLON333 = (Token) match(input, COLON, FOLLOW_COLON_in_statement9861);
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_COLON.add(COLON333);

            pushFollow(FOLLOW_statement_in_statement9863);
            statement334 = statement();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_statement.add(statement334.getTree());

            // AST REWRITE
            // elements: IDENT, statement
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 780:77: -> ^( LABELED_STATEMENT IDENT statement )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:780:81: ^( LABELED_STATEMENT IDENT
                // statement )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 =
                      (CommonTree)
                          adaptor.becomeRoot(
                              (CommonTree) adaptor.create(LABELED_STATEMENT, "LABELED_STATEMENT"),
                              root_1);

                  adaptor.addChild(root_1, stream_IDENT.nextNode());
                  adaptor.addChild(root_1, stream_statement.nextTree());

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 15:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:781:9: expression SEMI
          {
            root_0 = (CommonTree) adaptor.nil();

            pushFollow(FOLLOW_expression_in_statement9930);
            expression335 = expression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) adaptor.addChild(root_0, expression335.getTree());
            SEMI336 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9932);
            if (state.failed) return retval;
          }
          break;
        case 16:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:782:9: SEMI
          {
            root_0 = (CommonTree) adaptor.nil();

            SEMI337 = (Token) match(input, SEMI, FOLLOW_SEMI_in_statement9943);
            if (state.failed) return retval;
            if (state.backtracking == 0) {
              SEMI337_tree = (CommonTree) adaptor.create(SEMI337);
              adaptor.addChild(root_0, SEMI337_tree);
            }
          }
          break;
      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 75, statement_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "statement"

