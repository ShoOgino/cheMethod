  // $ANTLR start "formalParameterList"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:639:1: formalParameterList : LPAREN ( formalParameterStandardDecl
  // ( COMMA formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN,
  // \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^(
  // FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN,
  // \"FORMAL_PARAM_LIST\"] ) ) RPAREN ;
  public final JavaParser.formalParameterList_return formalParameterList()
      throws RecognitionException {
    JavaParser.formalParameterList_return retval = new JavaParser.formalParameterList_return();
    retval.start = input.LT(1);
    int formalParameterList_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LPAREN205 = null;
    Token COMMA207 = null;
    Token COMMA209 = null;
    Token RPAREN212 = null;
    JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl206 = null;

    JavaParser.formalParameterStandardDecl_return formalParameterStandardDecl208 = null;

    JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl210 = null;

    JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl211 = null;

    CommonTree LPAREN205_tree = null;
    CommonTree COMMA207_tree = null;
    CommonTree COMMA209_tree = null;
    CommonTree RPAREN212_tree = null;
    RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
    RewriteRuleSubtreeStream stream_formalParameterVarArgDecl =
        new RewriteRuleSubtreeStream(adaptor, "rule formalParameterVarArgDecl");
    RewriteRuleSubtreeStream stream_formalParameterStandardDecl =
        new RewriteRuleSubtreeStream(adaptor, "rule formalParameterStandardDecl");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 56)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:640:5: ( LPAREN ( formalParameterStandardDecl ( COMMA
      // formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN,
      // \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^(
      // FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN,
      // \"FORMAL_PARAM_LIST\"] ) ) RPAREN )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:640:9: LPAREN ( formalParameterStandardDecl ( COMMA
      // formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN,
      // \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl -> ^(
      // FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN,
      // \"FORMAL_PARAM_LIST\"] ) ) RPAREN
      {
        LPAREN205 = (Token) match(input, LPAREN, FOLLOW_LPAREN_in_formalParameterList7604);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LPAREN.add(LPAREN205);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:641:9: ( formalParameterStandardDecl ( COMMA
        // formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )? -> ^( FORMAL_PARAM_LIST[$LPAREN,
        // \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? ) | formalParameterVarArgDecl
        // -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl ) | -> ^( FORMAL_PARAM_LIST[$LPAREN,
        // \"FORMAL_PARAM_LIST\"] ) )
        int alt73 = 3;
        switch (input.LA(1)) {
          case FINAL:
            {
              int LA73_1 = input.LA(2);

              if ((synpred99_Java())) {
                alt73 = 1;
              } else if ((synpred100_Java())) {
                alt73 = 2;
              } else {
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 73, 1, input);

                throw nvae;
              }
            }
            break;
          case AT:
            {
              int LA73_2 = input.LA(2);

              if ((synpred99_Java())) {
                alt73 = 1;
              } else if ((synpred100_Java())) {
                alt73 = 2;
              } else {
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 73, 2, input);

                throw nvae;
              }
            }
            break;
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FLOAT:
          case INT:
          case LONG:
          case SHORT:
            {
              int LA73_3 = input.LA(2);

              if ((synpred99_Java())) {
                alt73 = 1;
              } else if ((synpred100_Java())) {
                alt73 = 2;
              } else {
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 73, 3, input);

                throw nvae;
              }
            }
            break;
          case IDENT:
            {
              int LA73_4 = input.LA(2);

              if ((synpred99_Java())) {
                alt73 = 1;
              } else if ((synpred100_Java())) {
                alt73 = 2;
              } else {
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 73, 4, input);

                throw nvae;
              }
            }
            break;
          case RPAREN:
            {
              alt73 = 3;
            }
            break;
          default:
            if (state.backtracking > 0) {
              state.failed = true;
              return retval;
            }
            NoViableAltException nvae = new NoViableAltException("", 73, 0, input);

            throw nvae;
        }

        switch (alt73) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:642:13: formalParameterStandardDecl ( COMMA
            // formalParameterStandardDecl )* ( COMMA formalParameterVarArgDecl )?
            {
              pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7632);
              formalParameterStandardDecl206 = formalParameterStandardDecl();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_formalParameterStandardDecl.add(formalParameterStandardDecl206.getTree());
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:642:41: ( COMMA formalParameterStandardDecl )*
              loop71:
              do {
                int alt71 = 2;
                int LA71_0 = input.LA(1);

                if ((LA71_0 == COMMA)) {
                  int LA71_1 = input.LA(2);

                  if ((synpred97_Java())) {
                    alt71 = 1;
                  }
                }

                switch (alt71) {
                  case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:642:42: COMMA
                    // formalParameterStandardDecl
                    {
                      COMMA207 =
                          (Token) match(input, COMMA, FOLLOW_COMMA_in_formalParameterList7635);
                      if (state.failed) return retval;
                      if (state.backtracking == 0) stream_COMMA.add(COMMA207);

                      pushFollow(FOLLOW_formalParameterStandardDecl_in_formalParameterList7637);
                      formalParameterStandardDecl208 = formalParameterStandardDecl();

                      state._fsp--;
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_formalParameterStandardDecl.add(
                            formalParameterStandardDecl208.getTree());
                    }
                    break;

                  default:
                    break loop71;
                }
              } while (true);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:642:78: ( COMMA formalParameterVarArgDecl )?
              int alt72 = 2;
              int LA72_0 = input.LA(1);

              if ((LA72_0 == COMMA)) {
                alt72 = 1;
              }
              switch (alt72) {
                case 1:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:642:79: COMMA formalParameterVarArgDecl
                  {
                    COMMA209 = (Token) match(input, COMMA, FOLLOW_COMMA_in_formalParameterList7642);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_COMMA.add(COMMA209);

                    pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7644);
                    formalParameterVarArgDecl210 = formalParameterVarArgDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl210.getTree());
                  }
                  break;
              }

              // AST REWRITE
              // elements: formalParameterVarArgDecl, formalParameterStandardDecl
              // token labels:
              // rule labels: retval
              // token list labels:
              // rule list labels:
              // wildcard labels:
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval =
                    new RewriteRuleSubtreeStream(
                        adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (CommonTree) adaptor.nil();
                // 643:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ (
                // formalParameterVarArgDecl )? )
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:643:17: ^( FORMAL_PARAM_LIST[$LPAREN,
                  // \"FORMAL_PARAM_LIST\"] ( formalParameterStandardDecl )+ ( formalParameterVarArgDecl )? )
                  {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 =
                        (CommonTree)
                            adaptor.becomeRoot(
                                (CommonTree)
                                    adaptor.create(
                                        FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"),
                                root_1);

                    if (!(stream_formalParameterStandardDecl.hasNext())) {
                      throw new RewriteEarlyExitException();
                    }
                    while (stream_formalParameterStandardDecl.hasNext()) {
                      adaptor.addChild(root_1, stream_formalParameterStandardDecl.nextTree());
                    }
                    stream_formalParameterStandardDecl.reset();
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:643:96: (
                    // formalParameterVarArgDecl )?
                    if (stream_formalParameterVarArgDecl.hasNext()) {
                      adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());
                    }
                    stream_formalParameterVarArgDecl.reset();

                    adaptor.addChild(root_0, root_1);
                  }
                }

                retval.tree = root_0;
              }
            }
            break;
          case 2:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:645:13: formalParameterVarArgDecl
            {
              pushFollow(FOLLOW_formalParameterVarArgDecl_in_formalParameterList7701);
              formalParameterVarArgDecl211 = formalParameterVarArgDecl();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_formalParameterVarArgDecl.add(formalParameterVarArgDecl211.getTree());

              // AST REWRITE
              // elements: formalParameterVarArgDecl
              // token labels:
              // rule labels: retval
              // token list labels:
              // rule list labels:
              // wildcard labels:
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval =
                    new RewriteRuleSubtreeStream(
                        adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (CommonTree) adaptor.nil();
                // 646:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:646:17: ^( FORMAL_PARAM_LIST[$LPAREN,
                  // \"FORMAL_PARAM_LIST\"] formalParameterVarArgDecl )
                  {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 =
                        (CommonTree)
                            adaptor.becomeRoot(
                                (CommonTree)
                                    adaptor.create(
                                        FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"),
                                root_1);

                    adaptor.addChild(root_1, stream_formalParameterVarArgDecl.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }
                }

                retval.tree = root_0;
              }
            }
            break;
          case 3:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:648:13:
            {

              // AST REWRITE
              // elements:
              // token labels:
              // rule labels: retval
              // token list labels:
              // rule list labels:
              // wildcard labels:
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval =
                    new RewriteRuleSubtreeStream(
                        adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (CommonTree) adaptor.nil();
                // 648:13: -> ^( FORMAL_PARAM_LIST[$LPAREN, \"FORMAL_PARAM_LIST\"] )
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:648:17: ^( FORMAL_PARAM_LIST[$LPAREN,
                  // \"FORMAL_PARAM_LIST\"] )
                  {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 =
                        (CommonTree)
                            adaptor.becomeRoot(
                                (CommonTree)
                                    adaptor.create(
                                        FORMAL_PARAM_LIST, LPAREN205, "FORMAL_PARAM_LIST"),
                                root_1);

                    adaptor.addChild(root_0, root_1);
                  }
                }

                retval.tree = root_0;
              }
            }
            break;
        }

        RPAREN212 = (Token) match(input, RPAREN, FOLLOW_RPAREN_in_formalParameterList7778);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_RPAREN.add(RPAREN212);
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 56, formalParameterList_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "formalParameterList"

