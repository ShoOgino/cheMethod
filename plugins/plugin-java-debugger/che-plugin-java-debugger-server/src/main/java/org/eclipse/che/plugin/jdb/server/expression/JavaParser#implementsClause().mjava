  // $ANTLR start "implementsClause"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:373:1: implementsClause : IMPLEMENTS typeList -> ^(
  // IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) ;
  public final JavaParser.implementsClause_return implementsClause() throws RecognitionException {
    JavaParser.implementsClause_return retval = new JavaParser.implementsClause_return();
    retval.start = input.LT(1);
    int implementsClause_StartIndex = input.index();
    CommonTree root_0 = null;

    Token IMPLEMENTS31 = null;
    JavaParser.typeList_return typeList32 = null;

    CommonTree IMPLEMENTS31_tree = null;
    RewriteRuleTokenStream stream_IMPLEMENTS =
        new RewriteRuleTokenStream(adaptor, "token IMPLEMENTS");
    RewriteRuleSubtreeStream stream_typeList =
        new RewriteRuleSubtreeStream(adaptor, "rule typeList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 10)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:374:5: ( IMPLEMENTS typeList -> ^(
      // IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:374:9: IMPLEMENTS typeList
      {
        IMPLEMENTS31 = (Token) match(input, IMPLEMENTS, FOLLOW_IMPLEMENTS_in_implementsClause4946);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_IMPLEMENTS.add(IMPLEMENTS31);

        pushFollow(FOLLOW_typeList_in_implementsClause4948);
        typeList32 = typeList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_typeList.add(typeList32.getTree());

        // AST REWRITE
        // elements: typeList
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 375:9: -> ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS, \"IMPLEMENTS_CLAUSE\"] typeList )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:375:13: ^( IMPLEMENTS_CLAUSE[$IMPLEMENTS,
            // \"IMPLEMENTS_CLAUSE\"] typeList )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(IMPLEMENTS_CLAUSE, IMPLEMENTS31, "IMPLEMENTS_CLAUSE"),
                          root_1);

              adaptor.addChild(root_1, stream_typeList.nextTree());

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 10, implementsClause_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "implementsClause"

