  private boolean isAssignable(Type from, Type to) {
    if (from.equals(to)) {
      return true;
    }

    if (from instanceof BooleanType) {
      return to instanceof BooleanType;
    }
    if (to instanceof BooleanType) {
      return false;
    }

    if (from instanceof PrimitiveType) {
      return to instanceof PrimitiveType;
    }
    if (to instanceof PrimitiveType) {
      return false;
    }

    if (from instanceof ArrayType) {
      if (to instanceof ArrayType) {
        Type fromArrayComponent;
        Type toArrayComponent;
        try {
          fromArrayComponent = ((ArrayType) from).componentType();
          toArrayComponent = ((ArrayType) to).componentType();
        } catch (ClassNotLoadedException e) {
          return false;
        }
        if (fromArrayComponent instanceof PrimitiveType) {
          return fromArrayComponent.equals(toArrayComponent);
        }
        return !(toArrayComponent instanceof PrimitiveType)
            && isAssignable(fromArrayComponent, toArrayComponent);
      }
      return to.name().equals("java.lang.Object");
    }

    if (from instanceof ClassType) {
      ClassType superClass = ((ClassType) from).superclass();
      if (superClass != null && isAssignable(superClass, to)) {
        return true;
      }
      for (InterfaceType interfaceType : ((ClassType) from).interfaces()) {
        if (isAssignable(interfaceType, to)) {
          return true;
        }
      }
    }

    for (InterfaceType interfaceType : ((InterfaceType) from).subinterfaces()) {
      if (isAssignable(interfaceType, to)) {
        return true;
      }
    }

    return false;
  }

