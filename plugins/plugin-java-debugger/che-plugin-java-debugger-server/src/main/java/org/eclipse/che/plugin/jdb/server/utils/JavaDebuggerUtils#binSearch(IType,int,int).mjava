    /**
     * Searches the given source range of the container for a member that is
     * not the same as the given type.
     *
     * @param type
     *         the {@link IType}
     * @param start
     *         the starting position
     * @param end
     *         the ending position
     * @return the {@link IMember} from the given start-end range
     * @throws JavaModelException
     *         if there is a problem with the backing Java model
     */
    @Nullable
    private IMember binSearch(IType type, int start, int end) throws JavaModelException {
        IJavaElement je = getElementAt(type, start);
        if (je != null && !je.equals(type)) {
            return asMember(je);
        }
        if (end > start) {
            je = getElementAt(type, end);
            if (je != null && !je.equals(type)) {
                return asMember(je);
            }
            int mid = ((end - start) / 2) + start;
            if (mid > start) {
                je = binSearch(type, start + 1, mid);
                if (je == null) {
                    je = binSearch(type, mid + 1, end - 1);
                }
                return asMember(je);
            }
        }
        return null;
    }

