  // $ANTLR start "bound"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:188:1: bound : ^( EXTENDS_BOUND_LIST ( type )+ ) ;
  public final void bound() throws RecognitionException {
    int bound_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 9)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:189:3: ( ^( EXTENDS_BOUND_LIST ( type )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:190:3: ^( EXTENDS_BOUND_LIST ( type )+ )
      {
        match(input, EXTENDS_BOUND_LIST, FOLLOW_EXTENDS_BOUND_LIST_in_bound335);
        if (state.failed) return;

        match(input, Token.DOWN, null);
        if (state.failed) return;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:190:24: ( type )+
        int cnt17 = 0;
        loop17:
        do {
          int alt17 = 2;
          int LA17_0 = input.LA(1);

          if ((LA17_0 == TYPE)) {
            alt17 = 1;
          }

          switch (alt17) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: type
              {
                pushFollow(FOLLOW_type_in_bound337);
                type();

                state._fsp--;
                if (state.failed) return;
              }
              break;

            default:
              if (cnt17 >= 1) break loop17;
              if (state.backtracking > 0) {
                state.failed = true;
                return;
              }
              EarlyExitException eee = new EarlyExitException(17, input);
              throw eee;
          }
          cnt17++;
        } while (true);

        match(input, Token.UP, null);
        if (state.failed) return;
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 9, bound_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "bound"

