  // $ANTLR start "postfixedExpression"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:958:1: postfixedExpression : ( primaryExpression ->
  // primaryExpression ) (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) (
  // arguments -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT
  // $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
  // \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot
  // $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^
  // ( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression
  // expression ) )* ( INC -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC,
  // \"POST_DEC\"] $postfixedExpression) )? ;
  public final JavaParser.postfixedExpression_return postfixedExpression()
      throws RecognitionException {
    JavaParser.postfixedExpression_return retval = new JavaParser.postfixedExpression_return();
    retval.start = input.LT(1);
    int postfixedExpression_StartIndex = input.index();
    CommonTree root_0 = null;

    Token outerDot = null;
    Token Super = null;
    Token innerDot = null;
    Token IDENT449 = null;
    Token THIS451 = null;
    Token SUPER453 = null;
    Token IDENT454 = null;
    Token LBRACK457 = null;
    Token RBRACK459 = null;
    Token INC460 = null;
    Token DEC461 = null;
    JavaParser.primaryExpression_return primaryExpression447 = null;

    JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified448 = null;

    JavaParser.arguments_return arguments450 = null;

    JavaParser.arguments_return arguments452 = null;

    JavaParser.arguments_return arguments455 = null;

    JavaParser.innerNewExpression_return innerNewExpression456 = null;

    JavaParser.expression_return expression458 = null;

    CommonTree outerDot_tree = null;
    CommonTree Super_tree = null;
    CommonTree innerDot_tree = null;
    CommonTree IDENT449_tree = null;
    CommonTree THIS451_tree = null;
    CommonTree SUPER453_tree = null;
    CommonTree IDENT454_tree = null;
    CommonTree LBRACK457_tree = null;
    CommonTree RBRACK459_tree = null;
    CommonTree INC460_tree = null;
    CommonTree DEC461_tree = null;
    RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
    RewriteRuleTokenStream stream_INC = new RewriteRuleTokenStream(adaptor, "token INC");
    RewriteRuleTokenStream stream_DEC = new RewriteRuleTokenStream(adaptor, "token DEC");
    RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");
    RewriteRuleTokenStream stream_SUPER = new RewriteRuleTokenStream(adaptor, "token SUPER");
    RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
    RewriteRuleTokenStream stream_THIS = new RewriteRuleTokenStream(adaptor, "token THIS");
    RewriteRuleSubtreeStream stream_expression =
        new RewriteRuleSubtreeStream(adaptor, "rule expression");
    RewriteRuleSubtreeStream stream_arguments =
        new RewriteRuleSubtreeStream(adaptor, "rule arguments");
    RewriteRuleSubtreeStream stream_primaryExpression =
        new RewriteRuleSubtreeStream(adaptor, "rule primaryExpression");
    RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified =
        new RewriteRuleSubtreeStream(adaptor, "rule genericTypeArgumentListSimplified");
    RewriteRuleSubtreeStream stream_innerNewExpression =
        new RewriteRuleSubtreeStream(adaptor, "rule innerNewExpression");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 104)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:960:5: ( ( primaryExpression -> primaryExpression )
      // (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^(
      // METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT
      // $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
      // \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot
      // $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? |
      // innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^(
      // ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC,
      // \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )? )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:960:9: ( primaryExpression -> primaryExpression )
      // (outerDot= DOT ( ( ( genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^(
      // METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT
      // $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
      // \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot
      // $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? |
      // innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) ) | LBRACK expression RBRACK -> ^(
      // ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )* ( INC -> ^( POST_INC[$INC,
      // \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
      {
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:960:9: ( primaryExpression -> primaryExpression )
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:960:13: primaryExpression
        {
          pushFollow(FOLLOW_primaryExpression_in_postfixedExpression11860);
          primaryExpression447 = primaryExpression();

          state._fsp--;
          if (state.failed) return retval;
          if (state.backtracking == 0) stream_primaryExpression.add(primaryExpression447.getTree());

          // AST REWRITE
          // elements: primaryExpression
          // token labels:
          // rule labels: retval
          // token list labels:
          // rule list labels:
          // wildcard labels:
          if (state.backtracking == 0) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval =
                new RewriteRuleSubtreeStream(
                    adaptor, "rule retval", retval != null ? retval.tree : null);

            root_0 = (CommonTree) adaptor.nil();
            // 960:53: -> primaryExpression
            {
              adaptor.addChild(root_0, stream_primaryExpression.nextTree());
            }

            retval.tree = root_0;
          }
        }

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:963:9: (outerDot= DOT ( ( (
        // genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^( METHOD_CALL
        // $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT $postfixedExpression THIS
        // ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression
        // arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) (
        // arguments -> ^( METHOD_CALL $postfixedExpression arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression
        // innerNewExpression ) ) | LBRACK expression RBRACK -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression ) )*
        loop132:
        do {
          int alt132 = 3;
          int LA132_0 = input.LA(1);

          if ((LA132_0 == DOT)) {
            alt132 = 1;
          } else if ((LA132_0 == LBRACK)) {
            alt132 = 2;
          }

          switch (alt132) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:963:13: outerDot= DOT ( ( (
              // genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^(
              // METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT
              // $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
              // \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot
              // ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression
              // arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
              {
                outerDot = (Token) match(input, DOT, FOLLOW_DOT_in_postfixedExpression11922);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_DOT.add(outerDot);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:964:13: ( ( (
                // genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments -> ^(
                // METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )? | THIS -> ^( DOT
                // $postfixedExpression THIS ) | Super= SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$Super,
                // \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments ) | ( SUPER innerDot= DOT IDENT -> ^( $innerDot
                // ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^( METHOD_CALL $postfixedExpression
                // arguments ) )? | innerNewExpression -> ^( DOT $postfixedExpression innerNewExpression ) )
                int alt131 = 5;
                switch (input.LA(1)) {
                  case LESS_THAN:
                  case IDENT:
                    {
                      alt131 = 1;
                    }
                    break;
                  case THIS:
                    {
                      alt131 = 2;
                    }
                    break;
                  case SUPER:
                    {
                      int LA131_3 = input.LA(2);

                      if ((LA131_3 == DOT)) {
                        alt131 = 4;
                      } else if ((LA131_3 == LPAREN)) {
                        alt131 = 3;
                      } else {
                        if (state.backtracking > 0) {
                          state.failed = true;
                          return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException("", 131, 3, input);

                        throw nvae;
                      }
                    }
                    break;
                  case NEW:
                    {
                      alt131 = 5;
                    }
                    break;
                  default:
                    if (state.backtracking > 0) {
                      state.failed = true;
                      return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 131, 0, input);

                    throw nvae;
                }

                switch (alt131) {
                  case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:964:17: ( (
                    // genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) ) ( arguments ->
                    // ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:964:17: ( (
                      // genericTypeArgumentListSimplified )? IDENT -> ^( DOT $postfixedExpression IDENT ) )
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:964:21: (
                      // genericTypeArgumentListSimplified )? IDENT
                      {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:964:21: (
                        // genericTypeArgumentListSimplified )?
                        int alt128 = 2;
                        int LA128_0 = input.LA(1);

                        if ((LA128_0 == LESS_THAN)) {
                          alt128 = 1;
                        }
                        switch (alt128) {
                          case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0:
                            // genericTypeArgumentListSimplified
                            {
                              pushFollow(
                                  FOLLOW_genericTypeArgumentListSimplified_in_postfixedExpression11972);
                              genericTypeArgumentListSimplified448 =
                                  genericTypeArgumentListSimplified();

                              state._fsp--;
                              if (state.failed) return retval;
                              if (state.backtracking == 0)
                                stream_genericTypeArgumentListSimplified.add(
                                    genericTypeArgumentListSimplified448.getTree());
                            }
                            break;
                        }

                        IDENT449 =
                            (Token) match(input, IDENT, FOLLOW_IDENT_in_postfixedExpression12054);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_IDENT.add(IDENT449);

                        // AST REWRITE
                        // elements: DOT, IDENT, postfixedExpression
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0) {
                          retval.tree = root_0;
                          RewriteRuleSubtreeStream stream_retval =
                              new RewriteRuleSubtreeStream(
                                  adaptor, "rule retval", retval != null ? retval.tree : null);

                          root_0 = (CommonTree) adaptor.nil();
                          // 966:53: -> ^( DOT $postfixedExpression IDENT )
                          {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:966:57: ^( DOT
                            // $postfixedExpression IDENT )
                            {
                              CommonTree root_1 = (CommonTree) adaptor.nil();
                              root_1 =
                                  (CommonTree) adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                              adaptor.addChild(root_1, stream_retval.nextTree());
                              adaptor.addChild(root_1, stream_IDENT.nextNode());

                              adaptor.addChild(root_0, root_1);
                            }
                          }

                          retval.tree = root_0;
                        }
                      }

                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:968:17: ( arguments -> ^(
                      // METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments ) )?
                      int alt129 = 2;
                      int LA129_0 = input.LA(1);

                      if ((LA129_0 == LPAREN)) {
                        alt129 = 1;
                      }
                      switch (alt129) {
                        case 1:
                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:968:21: arguments
                          {
                            pushFollow(FOLLOW_arguments_in_postfixedExpression12133);
                            arguments450 = arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                              stream_arguments.add(arguments450.getTree());

                            // AST REWRITE
                            // elements: postfixedExpression, arguments, genericTypeArgumentListSimplified
                            // token labels:
                            // rule labels: retval
                            // token list labels:
                            // rule list labels:
                            // wildcard labels:
                            if (state.backtracking == 0) {
                              retval.tree = root_0;
                              RewriteRuleSubtreeStream stream_retval =
                                  new RewriteRuleSubtreeStream(
                                      adaptor, "rule retval", retval != null ? retval.tree : null);

                              root_0 = (CommonTree) adaptor.nil();
                              // 968:53: -> ^( METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )?
                              // arguments )
                              {
                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:968:57: ^(
                                // METHOD_CALL $postfixedExpression ( genericTypeArgumentListSimplified )? arguments )
                                {
                                  CommonTree root_1 = (CommonTree) adaptor.nil();
                                  root_1 =
                                      (CommonTree)
                                          adaptor.becomeRoot(
                                              (CommonTree)
                                                  adaptor.create(METHOD_CALL, "METHOD_CALL"),
                                              root_1);

                                  adaptor.addChild(root_1, stream_retval.nextTree());
                                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:968:92: (
                                  // genericTypeArgumentListSimplified )?
                                  if (stream_genericTypeArgumentListSimplified.hasNext()) {
                                    adaptor.addChild(
                                        root_1,
                                        stream_genericTypeArgumentListSimplified.nextTree());
                                  }
                                  stream_genericTypeArgumentListSimplified.reset();
                                  adaptor.addChild(root_1, stream_arguments.nextTree());

                                  adaptor.addChild(root_0, root_1);
                                }
                              }

                              retval.tree = root_0;
                            }
                          }
                          break;
                      }
                    }
                    break;
                  case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:970:17: THIS
                    {
                      THIS451 = (Token) match(input, THIS, FOLLOW_THIS_in_postfixedExpression12207);
                      if (state.failed) return retval;
                      if (state.backtracking == 0) stream_THIS.add(THIS451);

                      // AST REWRITE
                      // elements: postfixedExpression, THIS, DOT
                      // token labels:
                      // rule labels: retval
                      // token list labels:
                      // rule list labels:
                      // wildcard labels:
                      if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                                adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree) adaptor.nil();
                        // 970:53: -> ^( DOT $postfixedExpression THIS )
                        {
                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:970:57: ^( DOT
                          // $postfixedExpression THIS )
                          {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                            adaptor.addChild(root_1, stream_retval.nextTree());
                            adaptor.addChild(root_1, stream_THIS.nextNode());

                            adaptor.addChild(root_0, root_1);
                          }
                        }

                        retval.tree = root_0;
                      }
                    }
                    break;
                  case 3:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:971:17: Super= SUPER arguments
                    {
                      Super = (Token) match(input, SUPER, FOLLOW_SUPER_in_postfixedExpression12270);
                      if (state.failed) return retval;
                      if (state.backtracking == 0) stream_SUPER.add(Super);

                      pushFollow(FOLLOW_arguments_in_postfixedExpression12272);
                      arguments452 = arguments();

                      state._fsp--;
                      if (state.failed) return retval;
                      if (state.backtracking == 0) stream_arguments.add(arguments452.getTree());

                      // AST REWRITE
                      // elements: postfixedExpression, arguments
                      // token labels:
                      // rule labels: retval
                      // token list labels:
                      // rule list labels:
                      // wildcard labels:
                      if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                                adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree) adaptor.nil();
                        // 971:57: -> ^( SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression
                        // arguments )
                        {
                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:971:61: ^(
                          // SUPER_CONSTRUCTOR_CALL[$Super, \"SUPER_CONSTRUCTOR_CALL\"] $postfixedExpression arguments )
                          {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 =
                                (CommonTree)
                                    adaptor.becomeRoot(
                                        (CommonTree)
                                            adaptor.create(
                                                SUPER_CONSTRUCTOR_CALL,
                                                Super,
                                                "SUPER_CONSTRUCTOR_CALL"),
                                        root_1);

                            adaptor.addChild(root_1, stream_retval.nextTree());
                            adaptor.addChild(root_1, stream_arguments.nextTree());

                            adaptor.addChild(root_0, root_1);
                          }
                        }

                        retval.tree = root_0;
                      }
                    }
                    break;
                  case 4:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:972:17: ( SUPER innerDot= DOT
                    // IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) ) ( arguments -> ^(
                    // METHOD_CALL $postfixedExpression arguments ) )?
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:972:17: ( SUPER innerDot= DOT
                      // IDENT -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT ) )
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:972:21: SUPER innerDot= DOT IDENT
                      {
                        SUPER453 =
                            (Token) match(input, SUPER, FOLLOW_SUPER_in_postfixedExpression12325);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_SUPER.add(SUPER453);

                        innerDot =
                            (Token) match(input, DOT, FOLLOW_DOT_in_postfixedExpression12329);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_DOT.add(innerDot);

                        IDENT454 =
                            (Token) match(input, IDENT, FOLLOW_IDENT_in_postfixedExpression12331);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_IDENT.add(IDENT454);

                        // AST REWRITE
                        // elements: SUPER, innerDot, outerDot, IDENT, postfixedExpression
                        // token labels: outerDot, innerDot
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0) {
                          retval.tree = root_0;
                          RewriteRuleTokenStream stream_outerDot =
                              new RewriteRuleTokenStream(adaptor, "token outerDot", outerDot);
                          RewriteRuleTokenStream stream_innerDot =
                              new RewriteRuleTokenStream(adaptor, "token innerDot", innerDot);
                          RewriteRuleSubtreeStream stream_retval =
                              new RewriteRuleSubtreeStream(
                                  adaptor, "rule retval", retval != null ? retval.tree : null);

                          root_0 = (CommonTree) adaptor.nil();
                          // 972:53: -> ^( $innerDot ^( $outerDot $postfixedExpression SUPER ) IDENT )
                          {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:972:57: ^( $innerDot ^
                            // ( $outerDot $postfixedExpression SUPER ) IDENT )
                            {
                              CommonTree root_1 = (CommonTree) adaptor.nil();
                              root_1 =
                                  (CommonTree)
                                      adaptor.becomeRoot(stream_innerDot.nextNode(), root_1);

                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:972:69: ^(
                              // $outerDot $postfixedExpression SUPER )
                              {
                                CommonTree root_2 = (CommonTree) adaptor.nil();
                                root_2 =
                                    (CommonTree)
                                        adaptor.becomeRoot(stream_outerDot.nextNode(), root_2);

                                adaptor.addChild(root_2, stream_retval.nextTree());
                                adaptor.addChild(root_2, stream_SUPER.nextNode());

                                adaptor.addChild(root_1, root_2);
                              }
                              adaptor.addChild(root_1, stream_IDENT.nextNode());

                              adaptor.addChild(root_0, root_1);
                            }
                          }

                          retval.tree = root_0;
                        }
                      }

                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:974:17: ( arguments -> ^(
                      // METHOD_CALL $postfixedExpression arguments ) )?
                      int alt130 = 2;
                      int LA130_0 = input.LA(1);

                      if ((LA130_0 == LPAREN)) {
                        alt130 = 1;
                      }
                      switch (alt130) {
                        case 1:
                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:974:21: arguments
                          {
                            pushFollow(FOLLOW_arguments_in_postfixedExpression12398);
                            arguments455 = arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0)
                              stream_arguments.add(arguments455.getTree());

                            // AST REWRITE
                            // elements: arguments, postfixedExpression
                            // token labels:
                            // rule labels: retval
                            // token list labels:
                            // rule list labels:
                            // wildcard labels:
                            if (state.backtracking == 0) {
                              retval.tree = root_0;
                              RewriteRuleSubtreeStream stream_retval =
                                  new RewriteRuleSubtreeStream(
                                      adaptor, "rule retval", retval != null ? retval.tree : null);

                              root_0 = (CommonTree) adaptor.nil();
                              // 974:53: -> ^( METHOD_CALL $postfixedExpression arguments )
                              {
                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:974:57: ^(
                                // METHOD_CALL $postfixedExpression arguments )
                                {
                                  CommonTree root_1 = (CommonTree) adaptor.nil();
                                  root_1 =
                                      (CommonTree)
                                          adaptor.becomeRoot(
                                              (CommonTree)
                                                  adaptor.create(METHOD_CALL, "METHOD_CALL"),
                                              root_1);

                                  adaptor.addChild(root_1, stream_retval.nextTree());
                                  adaptor.addChild(root_1, stream_arguments.nextTree());

                                  adaptor.addChild(root_0, root_1);
                                }
                              }

                              retval.tree = root_0;
                            }
                          }
                          break;
                      }
                    }
                    break;
                  case 5:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:976:17: innerNewExpression
                    {
                      pushFollow(FOLLOW_innerNewExpression_in_postfixedExpression12469);
                      innerNewExpression456 = innerNewExpression();

                      state._fsp--;
                      if (state.failed) return retval;
                      if (state.backtracking == 0)
                        stream_innerNewExpression.add(innerNewExpression456.getTree());

                      // AST REWRITE
                      // elements: DOT, innerNewExpression, postfixedExpression
                      // token labels:
                      // rule labels: retval
                      // token list labels:
                      // rule list labels:
                      // wildcard labels:
                      if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                                adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree) adaptor.nil();
                        // 976:53: -> ^( DOT $postfixedExpression innerNewExpression )
                        {
                          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:976:57: ^( DOT
                          // $postfixedExpression innerNewExpression )
                          {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                            adaptor.addChild(root_1, stream_retval.nextTree());
                            adaptor.addChild(root_1, stream_innerNewExpression.nextTree());

                            adaptor.addChild(root_0, root_1);
                          }
                        }

                        retval.tree = root_0;
                      }
                    }
                    break;
                }
              }
              break;
            case 2:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:978:13: LBRACK expression RBRACK
              {
                LBRACK457 = (Token) match(input, LBRACK, FOLLOW_LBRACK_in_postfixedExpression12526);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LBRACK.add(LBRACK457);

                pushFollow(FOLLOW_expression_in_postfixedExpression12528);
                expression458 = expression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_expression.add(expression458.getTree());
                RBRACK459 = (Token) match(input, RBRACK, FOLLOW_RBRACK_in_postfixedExpression12530);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RBRACK.add(RBRACK459);

                // AST REWRITE
                // elements: expression, postfixedExpression
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                  retval.tree = root_0;
                  RewriteRuleSubtreeStream stream_retval =
                      new RewriteRuleSubtreeStream(
                          adaptor, "rule retval", retval != null ? retval.tree : null);

                  root_0 = (CommonTree) adaptor.nil();
                  // 978:53: -> ^( ARRAY_ELEMENT_ACCESS $postfixedExpression expression )
                  {
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:978:57: ^( ARRAY_ELEMENT_ACCESS
                    // $postfixedExpression expression )
                    {
                      CommonTree root_1 = (CommonTree) adaptor.nil();
                      root_1 =
                          (CommonTree)
                              adaptor.becomeRoot(
                                  (CommonTree)
                                      adaptor.create(ARRAY_ELEMENT_ACCESS, "ARRAY_ELEMENT_ACCESS"),
                                  root_1);

                      adaptor.addChild(root_1, stream_retval.nextTree());
                      adaptor.addChild(root_1, stream_expression.nextTree());

                      adaptor.addChild(root_0, root_1);
                    }
                  }

                  retval.tree = root_0;
                }
              }
              break;

            default:
              break loop132;
          }
        } while (true);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:981:9: ( INC -> ^( POST_INC[$INC,
        // \"POST_INC\"] $postfixedExpression) | DEC -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression) )?
        int alt133 = 3;
        int LA133_0 = input.LA(1);

        if ((LA133_0 == INC)) {
          alt133 = 1;
        } else if ((LA133_0 == DEC)) {
          alt133 = 2;
        }
        switch (alt133) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:981:13: INC
            {
              INC460 = (Token) match(input, INC, FOLLOW_INC_in_postfixedExpression12591);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_INC.add(INC460);

              // AST REWRITE
              // elements: postfixedExpression
              // token labels:
              // rule labels: retval
              // token list labels:
              // rule list labels:
              // wildcard labels:
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval =
                    new RewriteRuleSubtreeStream(
                        adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (CommonTree) adaptor.nil();
                // 981:17: -> ^( POST_INC[$INC, \"POST_INC\"] $postfixedExpression)
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:981:20: ^( POST_INC[$INC,
                  // \"POST_INC\"] $postfixedExpression)
                  {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 =
                        (CommonTree)
                            adaptor.becomeRoot(
                                (CommonTree) adaptor.create(POST_INC, INC460, "POST_INC"), root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }
                }

                retval.tree = root_0;
              }
            }
            break;
          case 2:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:982:13: DEC
            {
              DEC461 = (Token) match(input, DEC, FOLLOW_DEC_in_postfixedExpression12615);
              if (state.failed) return retval;
              if (state.backtracking == 0) stream_DEC.add(DEC461);

              // AST REWRITE
              // elements: postfixedExpression
              // token labels:
              // rule labels: retval
              // token list labels:
              // rule list labels:
              // wildcard labels:
              if (state.backtracking == 0) {
                retval.tree = root_0;
                RewriteRuleSubtreeStream stream_retval =
                    new RewriteRuleSubtreeStream(
                        adaptor, "rule retval", retval != null ? retval.tree : null);

                root_0 = (CommonTree) adaptor.nil();
                // 982:17: -> ^( POST_DEC[$DEC, \"POST_DEC\"] $postfixedExpression)
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:982:20: ^( POST_DEC[$DEC,
                  // \"POST_DEC\"] $postfixedExpression)
                  {
                    CommonTree root_1 = (CommonTree) adaptor.nil();
                    root_1 =
                        (CommonTree)
                            adaptor.becomeRoot(
                                (CommonTree) adaptor.create(POST_DEC, DEC461, "POST_DEC"), root_1);

                    adaptor.addChild(root_1, stream_retval.nextTree());

                    adaptor.addChild(root_0, root_1);
                  }
                }

                retval.tree = root_0;
              }
            }
            break;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 104, postfixedExpression_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "postfixedExpression"

