  // $ANTLR start "javaSource"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:324:1: javaSource : compilationUnit -> ^( JAVA_SOURCE
  // compilationUnit ) ;
  public final JavaParser.javaSource_return javaSource() throws RecognitionException {
    JavaParser.javaSource_return retval = new JavaParser.javaSource_return();
    retval.start = input.LT(1);
    int javaSource_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.compilationUnit_return compilationUnit1 = null;

    RewriteRuleSubtreeStream stream_compilationUnit =
        new RewriteRuleSubtreeStream(adaptor, "rule compilationUnit");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 1)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:325:5: ( compilationUnit -> ^( JAVA_SOURCE compilationUnit
      // ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:325:9: compilationUnit
      {
        pushFollow(FOLLOW_compilationUnit_in_javaSource4506);
        compilationUnit1 = compilationUnit();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_compilationUnit.add(compilationUnit1.getTree());

        // AST REWRITE
        // elements: compilationUnit
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 326:9: -> ^( JAVA_SOURCE compilationUnit )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:326:13: ^( JAVA_SOURCE compilationUnit )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(JAVA_SOURCE, "JAVA_SOURCE"), root_1);

              adaptor.addChild(root_1, stream_compilationUnit.nextTree());

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 1, javaSource_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "javaSource"

