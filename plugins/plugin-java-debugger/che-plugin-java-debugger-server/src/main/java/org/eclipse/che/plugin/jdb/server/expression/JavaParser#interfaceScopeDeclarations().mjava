  // $ANTLR start "interfaceScopeDeclarations"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:468:1: interfaceScopeDeclarations : ( modifierList ( (
  // genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^(
  // FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? (
  // throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList (
  // genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^(
  // VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI );
  public final JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations()
      throws RecognitionException {
    JavaParser.interfaceScopeDeclarations_return retval =
        new JavaParser.interfaceScopeDeclarations_return();
    retval.start = input.LT(1);
    int interfaceScopeDeclarations_StartIndex = input.index();
    CommonTree root_0 = null;

    Token IDENT109 = null;
    Token SEMI113 = null;
    Token VOID114 = null;
    Token IDENT115 = null;
    Token SEMI118 = null;
    Token SEMI121 = null;
    Token SEMI123 = null;
    JavaParser.modifierList_return modifierList106 = null;

    JavaParser.genericTypeParameterList_return genericTypeParameterList107 = null;

    JavaParser.type_return type108 = null;

    JavaParser.formalParameterList_return formalParameterList110 = null;

    JavaParser.arrayDeclaratorList_return arrayDeclaratorList111 = null;

    JavaParser.throwsClause_return throwsClause112 = null;

    JavaParser.formalParameterList_return formalParameterList116 = null;

    JavaParser.throwsClause_return throwsClause117 = null;

    JavaParser.type_return type119 = null;

    JavaParser.interfaceFieldDeclaratorList_return interfaceFieldDeclaratorList120 = null;

    JavaParser.typeDeclaration_return typeDeclaration122 = null;

    CommonTree IDENT109_tree = null;
    CommonTree SEMI113_tree = null;
    CommonTree VOID114_tree = null;
    CommonTree IDENT115_tree = null;
    CommonTree SEMI118_tree = null;
    CommonTree SEMI121_tree = null;
    CommonTree SEMI123_tree = null;
    RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
    RewriteRuleTokenStream stream_VOID = new RewriteRuleTokenStream(adaptor, "token VOID");
    RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
    RewriteRuleSubtreeStream stream_arrayDeclaratorList =
        new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclaratorList");
    RewriteRuleSubtreeStream stream_throwsClause =
        new RewriteRuleSubtreeStream(adaptor, "rule throwsClause");
    RewriteRuleSubtreeStream stream_modifierList =
        new RewriteRuleSubtreeStream(adaptor, "rule modifierList");
    RewriteRuleSubtreeStream stream_genericTypeParameterList =
        new RewriteRuleSubtreeStream(adaptor, "rule genericTypeParameterList");
    RewriteRuleSubtreeStream stream_interfaceFieldDeclaratorList =
        new RewriteRuleSubtreeStream(adaptor, "rule interfaceFieldDeclaratorList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    RewriteRuleSubtreeStream stream_formalParameterList =
        new RewriteRuleSubtreeStream(adaptor, "rule formalParameterList");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 26)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:469:5: ( modifierList ( ( genericTypeParameterList )? (
      // type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList (
      // genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID IDENT
      // formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT
      // formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type
      // interfaceFieldDeclaratorList ) ) | typeDeclaration | SEMI )
      int alt43 = 3;
      alt43 = dfa43.predict(input);
      switch (alt43) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:469:9: modifierList ( ( genericTypeParameterList )
          // ? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL
          // modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause
          // )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList (
          // genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList
          // SEMI -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList ) )
          {
            pushFollow(FOLLOW_modifierList_in_interfaceScopeDeclarations6073);
            modifierList106 = modifierList();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) stream_modifierList.add(modifierList106.getTree());
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:470:9: ( ( genericTypeParameterList )? ( type
            // IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList
            // ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) | VOID
            // IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )?
            // IDENT formalParameterList ( throwsClause )? ) ) | type interfaceFieldDeclaratorList SEMI -> ^( VAR_DECLARATION
            // modifierList type interfaceFieldDeclaratorList ) )
            int alt42 = 2;
            switch (input.LA(1)) {
              case LESS_THAN:
              case VOID:
                {
                  alt42 = 1;
                }
                break;
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FLOAT:
              case INT:
              case LONG:
              case SHORT:
                {
                  int LA42_2 = input.LA(2);

                  if ((synpred50_Java())) {
                    alt42 = 1;
                  } else if ((true)) {
                    alt42 = 2;
                  } else {
                    if (state.backtracking > 0) {
                      state.failed = true;
                      return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 42, 2, input);

                    throw nvae;
                  }
                }
                break;
              case IDENT:
                {
                  int LA42_3 = input.LA(2);

                  if ((synpred50_Java())) {
                    alt42 = 1;
                  } else if ((true)) {
                    alt42 = 2;
                  } else {
                    if (state.backtracking > 0) {
                      state.failed = true;
                      return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 42, 3, input);

                    throw nvae;
                  }
                }
                break;
              default:
                if (state.backtracking > 0) {
                  state.failed = true;
                  return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:470:13: ( genericTypeParameterList )? (
                // type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL
                // modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? (
                // throwsClause )? ) | VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL
                // modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                {
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:470:13: ( genericTypeParameterList )?
                  int alt37 = 2;
                  int LA37_0 = input.LA(1);

                  if ((LA37_0 == LESS_THAN)) {
                    alt37 = 1;
                  }
                  switch (alt37) {
                    case 1:
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeParameterList
                      {
                        pushFollow(
                            FOLLOW_genericTypeParameterList_in_interfaceScopeDeclarations6087);
                        genericTypeParameterList107 = genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_genericTypeParameterList.add(
                              genericTypeParameterList107.getTree());
                      }
                      break;
                  }

                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:471:13: ( type IDENT formalParameterList (
                  // arrayDeclaratorList )? ( throwsClause )? SEMI -> ^( FUNCTION_METHOD_DECL modifierList (
                  // genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ) |
                  // VOID IDENT formalParameterList ( throwsClause )? SEMI -> ^( VOID_METHOD_DECL modifierList (
                  // genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ) )
                  int alt41 = 2;
                  int LA41_0 = input.LA(1);

                  if ((LA41_0 == BOOLEAN
                      || LA41_0 == BYTE
                      || LA41_0 == CHAR
                      || LA41_0 == DOUBLE
                      || LA41_0 == FLOAT
                      || (LA41_0 >= INT && LA41_0 <= LONG)
                      || LA41_0 == SHORT
                      || LA41_0 == IDENT)) {
                    alt41 = 1;
                  } else if ((LA41_0 == VOID)) {
                    alt41 = 2;
                  } else {
                    if (state.backtracking > 0) {
                      state.failed = true;
                      return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 41, 0, input);

                    throw nvae;
                  }
                  switch (alt41) {
                    case 1:
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:471:17: type IDENT
                      // formalParameterList ( arrayDeclaratorList )? ( throwsClause )? SEMI
                      {
                        pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6106);
                        type108 = type();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_type.add(type108.getTree());
                        IDENT109 =
                            (Token)
                                match(input, IDENT, FOLLOW_IDENT_in_interfaceScopeDeclarations6108);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_IDENT.add(IDENT109);

                        pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6110);
                        formalParameterList110 = formalParameterList();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_formalParameterList.add(formalParameterList110.getTree());
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:471:48: ( arrayDeclaratorList )?
                        int alt38 = 2;
                        int LA38_0 = input.LA(1);

                        if ((LA38_0 == LBRACK)) {
                          alt38 = 1;
                        }
                        switch (alt38) {
                          case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: arrayDeclaratorList
                            {
                              pushFollow(
                                  FOLLOW_arrayDeclaratorList_in_interfaceScopeDeclarations6112);
                              arrayDeclaratorList111 = arrayDeclaratorList();

                              state._fsp--;
                              if (state.failed) return retval;
                              if (state.backtracking == 0)
                                stream_arrayDeclaratorList.add(arrayDeclaratorList111.getTree());
                            }
                            break;
                        }

                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:471:69: ( throwsClause )?
                        int alt39 = 2;
                        int LA39_0 = input.LA(1);

                        if ((LA39_0 == THROWS)) {
                          alt39 = 1;
                        }
                        switch (alt39) {
                          case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: throwsClause
                            {
                              pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6115);
                              throwsClause112 = throwsClause();

                              state._fsp--;
                              if (state.failed) return retval;
                              if (state.backtracking == 0)
                                stream_throwsClause.add(throwsClause112.getTree());
                            }
                            break;
                        }

                        SEMI113 =
                            (Token)
                                match(input, SEMI, FOLLOW_SEMI_in_interfaceScopeDeclarations6118);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_SEMI.add(SEMI113);

                        // AST REWRITE
                        // elements: formalParameterList, genericTypeParameterList, throwsClause, arrayDeclaratorList,
                        // modifierList, IDENT, type
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0) {
                          retval.tree = root_0;
                          RewriteRuleSubtreeStream stream_retval =
                              new RewriteRuleSubtreeStream(
                                  adaptor, "rule retval", retval != null ? retval.tree : null);

                          root_0 = (CommonTree) adaptor.nil();
                          // 472:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT
                          // formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                          {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:472:21: ^(
                            // FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT
                            // formalParameterList ( arrayDeclaratorList )? ( throwsClause )? )
                            {
                              CommonTree root_1 = (CommonTree) adaptor.nil();
                              root_1 =
                                  (CommonTree)
                                      adaptor.becomeRoot(
                                          (CommonTree)
                                              adaptor.create(
                                                  FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"),
                                          root_1);

                              adaptor.addChild(root_1, stream_modifierList.nextTree());
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:472:57: (
                              // genericTypeParameterList )?
                              if (stream_genericTypeParameterList.hasNext()) {
                                adaptor.addChild(
                                    root_1, stream_genericTypeParameterList.nextTree());
                              }
                              stream_genericTypeParameterList.reset();
                              adaptor.addChild(root_1, stream_type.nextTree());
                              adaptor.addChild(root_1, stream_IDENT.nextNode());
                              adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:472:114: (
                              // arrayDeclaratorList )?
                              if (stream_arrayDeclaratorList.hasNext()) {
                                adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());
                              }
                              stream_arrayDeclaratorList.reset();
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:472:135: (
                              // throwsClause )?
                              if (stream_throwsClause.hasNext()) {
                                adaptor.addChild(root_1, stream_throwsClause.nextTree());
                              }
                              stream_throwsClause.reset();

                              adaptor.addChild(root_0, root_1);
                            }
                          }

                          retval.tree = root_0;
                        }
                      }
                      break;
                    case 2:
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:473:17: VOID IDENT
                      // formalParameterList ( throwsClause )? SEMI
                      {
                        VOID114 =
                            (Token)
                                match(input, VOID, FOLLOW_VOID_in_interfaceScopeDeclarations6176);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_VOID.add(VOID114);

                        IDENT115 =
                            (Token)
                                match(input, IDENT, FOLLOW_IDENT_in_interfaceScopeDeclarations6178);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_IDENT.add(IDENT115);

                        pushFollow(FOLLOW_formalParameterList_in_interfaceScopeDeclarations6180);
                        formalParameterList116 = formalParameterList();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0)
                          stream_formalParameterList.add(formalParameterList116.getTree());
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:473:48: ( throwsClause )?
                        int alt40 = 2;
                        int LA40_0 = input.LA(1);

                        if ((LA40_0 == THROWS)) {
                          alt40 = 1;
                        }
                        switch (alt40) {
                          case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: throwsClause
                            {
                              pushFollow(FOLLOW_throwsClause_in_interfaceScopeDeclarations6182);
                              throwsClause117 = throwsClause();

                              state._fsp--;
                              if (state.failed) return retval;
                              if (state.backtracking == 0)
                                stream_throwsClause.add(throwsClause117.getTree());
                            }
                            break;
                        }

                        SEMI118 =
                            (Token)
                                match(input, SEMI, FOLLOW_SEMI_in_interfaceScopeDeclarations6185);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_SEMI.add(SEMI118);

                        // AST REWRITE
                        // elements: formalParameterList, genericTypeParameterList, modifierList, throwsClause, IDENT
                        // token labels:
                        // rule labels: retval
                        // token list labels:
                        // rule list labels:
                        // wildcard labels:
                        if (state.backtracking == 0) {
                          retval.tree = root_0;
                          RewriteRuleSubtreeStream stream_retval =
                              new RewriteRuleSubtreeStream(
                                  adaptor, "rule retval", retval != null ? retval.tree : null);

                          root_0 = (CommonTree) adaptor.nil();
                          // 474:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT
                          // formalParameterList ( throwsClause )? )
                          {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:474:21: ^(
                            // VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList (
                            // throwsClause )? )
                            {
                              CommonTree root_1 = (CommonTree) adaptor.nil();
                              root_1 =
                                  (CommonTree)
                                      adaptor.becomeRoot(
                                          (CommonTree)
                                              adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"),
                                          root_1);

                              adaptor.addChild(root_1, stream_modifierList.nextTree());
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:474:53: (
                              // genericTypeParameterList )?
                              if (stream_genericTypeParameterList.hasNext()) {
                                adaptor.addChild(
                                    root_1, stream_genericTypeParameterList.nextTree());
                              }
                              stream_genericTypeParameterList.reset();
                              adaptor.addChild(root_1, stream_IDENT.nextNode());
                              adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:474:105: (
                              // throwsClause )?
                              if (stream_throwsClause.hasNext()) {
                                adaptor.addChild(root_1, stream_throwsClause.nextTree());
                              }
                              stream_throwsClause.reset();

                              adaptor.addChild(root_0, root_1);
                            }
                          }

                          retval.tree = root_0;
                        }
                      }
                      break;
                  }
                }
                break;
              case 2:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:476:13: type interfaceFieldDeclaratorList
                // SEMI
                {
                  pushFollow(FOLLOW_type_in_interfaceScopeDeclarations6248);
                  type119 = type();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_type.add(type119.getTree());
                  pushFollow(FOLLOW_interfaceFieldDeclaratorList_in_interfaceScopeDeclarations6250);
                  interfaceFieldDeclaratorList120 = interfaceFieldDeclaratorList();

                  state._fsp--;
                  if (state.failed) return retval;
                  if (state.backtracking == 0)
                    stream_interfaceFieldDeclaratorList.add(
                        interfaceFieldDeclaratorList120.getTree());
                  SEMI121 =
                      (Token) match(input, SEMI, FOLLOW_SEMI_in_interfaceScopeDeclarations6252);
                  if (state.failed) return retval;
                  if (state.backtracking == 0) stream_SEMI.add(SEMI121);

                  // AST REWRITE
                  // elements: interfaceFieldDeclaratorList, modifierList, type
                  // token labels:
                  // rule labels: retval
                  // token list labels:
                  // rule list labels:
                  // wildcard labels:
                  if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                        new RewriteRuleSubtreeStream(
                            adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 477:13: -> ^( VAR_DECLARATION modifierList type interfaceFieldDeclaratorList )
                    {
                      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:477:17: ^( VAR_DECLARATION
                      // modifierList type interfaceFieldDeclaratorList )
                      {
                        CommonTree root_1 = (CommonTree) adaptor.nil();
                        root_1 =
                            (CommonTree)
                                adaptor.becomeRoot(
                                    (CommonTree) adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"),
                                    root_1);

                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_interfaceFieldDeclaratorList.nextTree());

                        adaptor.addChild(root_0, root_1);
                      }
                    }

                    retval.tree = root_0;
                  }
                }
                break;
            }
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:479:9: typeDeclaration
          {
            root_0 = (CommonTree) adaptor.nil();

            pushFollow(FOLLOW_typeDeclaration_in_interfaceScopeDeclarations6297);
            typeDeclaration122 = typeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) adaptor.addChild(root_0, typeDeclaration122.getTree());
          }
          break;
        case 3:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:480:9: SEMI
          {
            root_0 = (CommonTree) adaptor.nil();

            SEMI123 = (Token) match(input, SEMI, FOLLOW_SEMI_in_interfaceScopeDeclarations6307);
            if (state.failed) return retval;
          }
          break;
      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 26, interfaceScopeDeclarations_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "interfaceScopeDeclarations"

