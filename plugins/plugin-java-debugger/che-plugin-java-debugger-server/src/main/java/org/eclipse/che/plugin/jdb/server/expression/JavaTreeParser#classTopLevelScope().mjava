    // $ANTLR start "classTopLevelScope"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:203:1: classTopLevelScope : ^( CLASS_TOP_LEVEL_SCOPE (
    // classScopeDeclarations )* ) ;
    public final void classTopLevelScope() throws RecognitionException {
        int classTopLevelScope_StartIndex = input.index();
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 12)) {
                return;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:204:3: ( ^( CLASS_TOP_LEVEL_SCOPE (
            // classScopeDeclarations )* ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:205:3: ^( CLASS_TOP_LEVEL_SCOPE (
            // classScopeDeclarations )* )
            {
                match(input, CLASS_TOP_LEVEL_SCOPE, FOLLOW_CLASS_TOP_LEVEL_SCOPE_in_classTopLevelScope403);
                if (state.failed) return;

                if (input.LA(1) == Token.DOWN) {
                    match(input, Token.DOWN, null);
                    if (state.failed) return;
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:205:27: ( classScopeDeclarations )*
                    loop22:
                    do {
                        int alt22 = 2;
                        int LA22_0 = input.LA(1);

                        if ((LA22_0 == AT || LA22_0 == CLASS || LA22_0 == ENUM || LA22_0 == INTERFACE ||
                             (LA22_0 >= CLASS_INSTANCE_INITIALIZER && LA22_0 <= CLASS_STATIC_INITIALIZER) || LA22_0 == CONSTRUCTOR_DECL ||
                             LA22_0 == FUNCTION_METHOD_DECL || LA22_0 == VAR_DECLARATION || LA22_0 == VOID_METHOD_DECL)) {
                            alt22 = 1;
                        }


                        switch (alt22) {
                            case 1:
                                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: classScopeDeclarations
                            {
                                pushFollow(FOLLOW_classScopeDeclarations_in_classTopLevelScope405);
                                classScopeDeclarations();

                                state._fsp--;
                                if (state.failed) return;

                            }
                            break;

                            default:
                                break loop22;
                        }
                    } while (true);


                    match(input, Token.UP, null);
                    if (state.failed) return;
                }

            }

        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
        } finally {
            if (state.backtracking > 0) {
                memoize(input, 12, classTopLevelScope_StartIndex);
            }
        }
        return;
    }
    // $ANTLR end "classTopLevelScope"

