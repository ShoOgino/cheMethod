  // $ANTLR start "switchDefaultLabel"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:517:1: switchDefaultLabel : ^( DEFAULT ( blockStatement
  // )* ) ;
  public final void switchDefaultLabel() throws RecognitionException {
    int switchDefaultLabel_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 56)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:518:3: ( ^( DEFAULT ( blockStatement )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:519:3: ^( DEFAULT ( blockStatement )* )
      {
        match(input, DEFAULT, FOLLOW_DEFAULT_in_switchDefaultLabel1925);
        if (state.failed) return;

        if (input.LA(1) == Token.DOWN) {
          match(input, Token.DOWN, null);
          if (state.failed) return;
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:519:13: ( blockStatement )*
          loop86:
          do {
            int alt86 = 2;
            int LA86_0 = input.LA(1);

            if ((LA86_0 == AT
                || LA86_0 == SEMI
                || LA86_0 == ASSERT
                || LA86_0 == BREAK
                || (LA86_0 >= CLASS && LA86_0 <= CONTINUE)
                || LA86_0 == DO
                || LA86_0 == ENUM
                || (LA86_0 >= FOR && LA86_0 <= IF)
                || LA86_0 == INTERFACE
                || LA86_0 == RETURN
                || (LA86_0 >= SWITCH && LA86_0 <= SYNCHRONIZED)
                || LA86_0 == THROW
                || LA86_0 == TRY
                || LA86_0 == WHILE
                || LA86_0 == BLOCK_SCOPE
                || LA86_0 == EXPR
                || LA86_0 == FOR_EACH
                || LA86_0 == LABELED_STATEMENT
                || LA86_0 == VAR_DECLARATION)) {
              alt86 = 1;
            }

            switch (alt86) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: blockStatement
                {
                  pushFollow(FOLLOW_blockStatement_in_switchDefaultLabel1927);
                  blockStatement();

                  state._fsp--;
                  if (state.failed) return;
                }
                break;

              default:
                break loop86;
            }
          } while (true);

          match(input, Token.UP, null);
          if (state.failed) return;
        }
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 56, switchDefaultLabel_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "switchDefaultLabel"

