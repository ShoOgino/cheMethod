  // $ANTLR start "catches"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:785:1: catches : ( catchClause )+ -> ^( CATCH_CLAUSE_LIST (
  // catchClause )+ ) ;
  public final JavaParser.catches_return catches() throws RecognitionException {
    JavaParser.catches_return retval = new JavaParser.catches_return();
    retval.start = input.LT(1);
    int catches_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.catchClause_return catchClause338 = null;

    RewriteRuleSubtreeStream stream_catchClause =
        new RewriteRuleSubtreeStream(adaptor, "rule catchClause");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 76)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:786:5: ( ( catchClause )+ -> ^( CATCH_CLAUSE_LIST (
      // catchClause )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:786:9: ( catchClause )+
      {
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:786:9: ( catchClause )+
        int cnt98 = 0;
        loop98:
        do {
          int alt98 = 2;
          int LA98_0 = input.LA(1);

          if ((LA98_0 == CATCH)) {
            alt98 = 1;
          }

          switch (alt98) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: catchClause
              {
                pushFollow(FOLLOW_catchClause_in_catches9982);
                catchClause338 = catchClause();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_catchClause.add(catchClause338.getTree());
              }
              break;

            default:
              if (cnt98 >= 1) break loop98;
              if (state.backtracking > 0) {
                state.failed = true;
                return retval;
              }
              EarlyExitException eee = new EarlyExitException(98, input);
              throw eee;
          }
          cnt98++;
        } while (true);

        // AST REWRITE
        // elements: catchClause
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 787:9: -> ^( CATCH_CLAUSE_LIST ( catchClause )+ )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:787:13: ^( CATCH_CLAUSE_LIST ( catchClause )+ )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(CATCH_CLAUSE_LIST, "CATCH_CLAUSE_LIST"),
                          root_1);

              if (!(stream_catchClause.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_catchClause.hasNext()) {
                adaptor.addChild(root_1, stream_catchClause.nextTree());
              }
              stream_catchClause.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 76, catches_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "catches"

