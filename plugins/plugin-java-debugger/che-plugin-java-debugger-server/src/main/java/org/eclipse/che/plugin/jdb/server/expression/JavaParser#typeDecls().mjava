  // $ANTLR start "typeDecls"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:336:1: typeDecls : ( typeDeclaration | SEMI );
  public final JavaParser.typeDecls_return typeDecls() throws RecognitionException {
    JavaParser.typeDecls_return retval = new JavaParser.typeDecls_return();
    retval.start = input.LT(1);
    int typeDecls_StartIndex = input.index();
    CommonTree root_0 = null;

    Token SEMI7 = null;
    JavaParser.typeDeclaration_return typeDeclaration6 = null;

    CommonTree SEMI7_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 3)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:337:5: ( typeDeclaration | SEMI )
      int alt4 = 2;
      int LA4_0 = input.LA(1);

      if ((LA4_0 == AT
          || LA4_0 == LESS_THAN
          || LA4_0 == ABSTRACT
          || LA4_0 == BOOLEAN
          || LA4_0 == BYTE
          || (LA4_0 >= CHAR && LA4_0 <= CLASS)
          || LA4_0 == DOUBLE
          || LA4_0 == ENUM
          || LA4_0 == FINAL
          || LA4_0 == FLOAT
          || LA4_0 == INTERFACE
          || (LA4_0 >= INT && LA4_0 <= NATIVE)
          || (LA4_0 >= PRIVATE && LA4_0 <= PUBLIC)
          || (LA4_0 >= SHORT && LA4_0 <= STRICTFP)
          || LA4_0 == SYNCHRONIZED
          || LA4_0 == TRANSIENT
          || (LA4_0 >= VOID && LA4_0 <= VOLATILE)
          || LA4_0 == IDENT)) {
        alt4 = 1;
      } else if ((LA4_0 == SEMI)) {
        alt4 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 4, 0, input);

        throw nvae;
      }
      switch (alt4) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:337:9: typeDeclaration
          {
            root_0 = (CommonTree) adaptor.nil();

            pushFollow(FOLLOW_typeDeclaration_in_typeDecls4597);
            typeDeclaration6 = typeDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) adaptor.addChild(root_0, typeDeclaration6.getTree());
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:338:9: SEMI
          {
            root_0 = (CommonTree) adaptor.nil();

            SEMI7 = (Token) match(input, SEMI, FOLLOW_SEMI_in_typeDecls4607);
            if (state.failed) return retval;
          }
          break;
      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 3, typeDecls_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "typeDecls"

