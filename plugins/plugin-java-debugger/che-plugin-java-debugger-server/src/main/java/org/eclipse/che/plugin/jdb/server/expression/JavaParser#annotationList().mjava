    // $ANTLR start "annotationList"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:672:1: annotationList : ( annotation )* -> ^( ANNOTATION_LIST (
    // annotation )* ) ;
    public final JavaParser.annotationList_return annotationList() throws RecognitionException {
        JavaParser.annotationList_return retval = new JavaParser.annotationList_return();
        retval.start = input.LT(1);
        int annotationList_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.annotation_return annotation222 = null;


        RewriteRuleSubtreeStream stream_annotation = new RewriteRuleSubtreeStream(adaptor, "rule annotation");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 60)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:673:5: ( ( annotation )* -> ^( ANNOTATION_LIST (
            // annotation )* ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:673:9: ( annotation )*
            {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:673:9: ( annotation )*
                loop75:
                do {
                    int alt75 = 2;
                    int LA75_0 = input.LA(1);

                    if ((LA75_0 == AT)) {
                        int LA75_2 = input.LA(2);

                        if ((LA75_2 == IDENT)) {
                            int LA75_3 = input.LA(3);

                            if ((synpred102_Java())) {
                                alt75 = 1;
                            }


                        }


                    }


                    switch (alt75) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: annotation
                        {
                            pushFollow(FOLLOW_annotation_in_annotationList8003);
                            annotation222 = annotation();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_annotation.add(annotation222.getTree());

                        }
                        break;

                        default:
                            break loop75;
                    }
                } while (true);


                // AST REWRITE
                // elements: annotation
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 674:9: -> ^( ANNOTATION_LIST ( annotation )* )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:674:13: ^( ANNOTATION_LIST ( annotation )* )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_LIST, "ANNOTATION_LIST"), root_1);

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:674:31: ( annotation )*
                            while (stream_annotation.hasNext()) {
                                adaptor.addChild(root_1, stream_annotation.nextTree());

                            }
                            stream_annotation.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 60, annotationList_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "annotationList"

