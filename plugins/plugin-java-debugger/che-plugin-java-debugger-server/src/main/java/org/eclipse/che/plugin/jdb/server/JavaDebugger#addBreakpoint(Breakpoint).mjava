  @Override
  public void addBreakpoint(Breakpoint breakpoint) throws DebuggerException {
    final int lineNumber = breakpoint.getLocation().getLineNumber();
    final String target = breakpoint.getLocation().getTarget();
    final String className =
        !target.endsWith(".java")
            ? target
            : languageServer.identifyFqnInResource(
                breakpoint.getLocation().getTarget(), lineNumber);

    List<ReferenceType> classes = vm.classesByName(className);
    // it may mean that class doesn't loaded by a target JVM yet
    if (classes.isEmpty()) {
      deferBreakpoint(className, breakpoint);
      return;
    }

    ReferenceType clazz = classes.get(0);
    List<com.sun.jdi.Location> locations;
    try {
      locations = clazz.locationsOfLine(lineNumber);
    } catch (AbsentInformationException | ClassNotPreparedException e) {
      throw new DebuggerException(e.getMessage(), e);
    }

    if (locations.isEmpty()) {
      throw new DebuggerException("Line " + lineNumber + " not found in class " + className);
    }

    com.sun.jdi.Location location = locations.get(0);
    if (location.method() == null) {
      // Line is out of method.
      throw new DebuggerException("Invalid line " + lineNumber + " in class " + className);
    }

    // Ignore new breakpoint if already have breakpoint at the same location.
    EventRequestManager requestManager = getEventManager();
    for (BreakpointRequest breakpointRequest : requestManager.breakpointRequests()) {
      if (location.equals(breakpointRequest.location())) {
        LOG.debug("Breakpoint at {} already set", location);
        return;
      }
    }

    try {
      BreakpointRequest request = requestManager.createBreakpointRequest(location);

      BreakpointConfiguration conf = breakpoint.getBreakpointConfiguration();
      if (conf != null && conf.getSuspendPolicy() != null) {
        request.setSuspendPolicy(toSuspendEventRequest(conf.getSuspendPolicy()));
      } else {
        request.setSuspendPolicy(EventRequest.SUSPEND_ALL);
      }

      if (conf != null
          && conf.isConditionEnabled()
          && conf.getCondition() != null
          && !conf.getCondition().isEmpty()) {
        ExpressionParser parser = ExpressionParser.newInstance(conf.getCondition());
        request.putProperty("org.eclipse.che.ide.java.debug.condition.expression.parser", parser);
      }

      if (conf != null && conf.isHitCountEnabled() && conf.getHitCount() > 0) {
        request.addCountFilter(conf.getHitCount());
      }

      request.setEnabled(true);
    } catch (NativeMethodException | IllegalThreadStateException | InvalidRequestStateException e) {
      throw new DebuggerException(e.getMessage(), e);
    }

    debuggerCallback.onEvent(
        new BreakpointActivatedEventImpl(new BreakpointImpl(breakpoint.getLocation())));

    LOG.debug("Add breakpoint: {}", location);
  }

