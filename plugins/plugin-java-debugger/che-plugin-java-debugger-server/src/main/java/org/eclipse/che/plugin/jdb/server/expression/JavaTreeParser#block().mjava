  // $ANTLR start "block"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:445:1: block : ^( BLOCK_SCOPE ( blockStatement )* ) ;
  public final void block() throws RecognitionException {
    int block_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 48)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:446:3: ( ^( BLOCK_SCOPE ( blockStatement )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:447:3: ^( BLOCK_SCOPE ( blockStatement )* )
      {
        match(input, BLOCK_SCOPE, FOLLOW_BLOCK_SCOPE_in_block1528);
        if (state.failed) return;

        if (input.LA(1) == Token.DOWN) {
          match(input, Token.DOWN, null);
          if (state.failed) return;
          // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:447:17: ( blockStatement )*
          loop71:
          do {
            int alt71 = 2;
            int LA71_0 = input.LA(1);

            if ((LA71_0 == AT
                || LA71_0 == SEMI
                || LA71_0 == ASSERT
                || LA71_0 == BREAK
                || (LA71_0 >= CLASS && LA71_0 <= CONTINUE)
                || LA71_0 == DO
                || LA71_0 == ENUM
                || (LA71_0 >= FOR && LA71_0 <= IF)
                || LA71_0 == INTERFACE
                || LA71_0 == RETURN
                || (LA71_0 >= SWITCH && LA71_0 <= SYNCHRONIZED)
                || LA71_0 == THROW
                || LA71_0 == TRY
                || LA71_0 == WHILE
                || LA71_0 == BLOCK_SCOPE
                || LA71_0 == EXPR
                || LA71_0 == FOR_EACH
                || LA71_0 == LABELED_STATEMENT
                || LA71_0 == VAR_DECLARATION)) {
              alt71 = 1;
            }

            switch (alt71) {
              case 1:
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: blockStatement
                {
                  pushFollow(FOLLOW_blockStatement_in_block1530);
                  blockStatement();

                  state._fsp--;
                  if (state.failed) return;
                }
                break;

              default:
                break loop71;
            }
          } while (true);

          match(input, Token.UP, null);
          if (state.failed) return;
        }
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 48, block_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "block"

