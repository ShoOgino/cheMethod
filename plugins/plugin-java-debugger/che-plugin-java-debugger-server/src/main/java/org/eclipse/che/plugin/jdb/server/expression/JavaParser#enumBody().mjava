  // $ANTLR start "enumBody"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:408:1: enumBody : LCURLY enumScopeDeclarations RCURLY -> ^(
  // ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) ;
  public final JavaParser.enumBody_return enumBody() throws RecognitionException {
    JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
    retval.start = input.LT(1);
    int enumBody_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LCURLY51 = null;
    Token RCURLY53 = null;
    JavaParser.enumScopeDeclarations_return enumScopeDeclarations52 = null;

    CommonTree LCURLY51_tree = null;
    CommonTree RCURLY53_tree = null;
    RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
    RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
    RewriteRuleSubtreeStream stream_enumScopeDeclarations =
        new RewriteRuleSubtreeStream(adaptor, "rule enumScopeDeclarations");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 16)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:409:5: ( LCURLY enumScopeDeclarations RCURLY -> ^(
      // ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:409:9: LCURLY enumScopeDeclarations RCURLY
      {
        LCURLY51 = (Token) match(input, LCURLY, FOLLOW_LCURLY_in_enumBody5317);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LCURLY.add(LCURLY51);

        pushFollow(FOLLOW_enumScopeDeclarations_in_enumBody5319);
        enumScopeDeclarations52 = enumScopeDeclarations();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_enumScopeDeclarations.add(enumScopeDeclarations52.getTree());
        RCURLY53 = (Token) match(input, RCURLY, FOLLOW_RCURLY_in_enumBody5321);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_RCURLY.add(RCURLY53);

        // AST REWRITE
        // elements: enumScopeDeclarations
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 410:9: -> ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY, \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:410:13: ^( ENUM_TOP_LEVEL_SCOPE[$LCURLY,
            // \"ENUM_TOP_LEVEL_SCOPE\"] enumScopeDeclarations )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(
                                  ENUM_TOP_LEVEL_SCOPE, LCURLY51, "ENUM_TOP_LEVEL_SCOPE"),
                          root_1);

              adaptor.addChild(root_1, stream_enumScopeDeclarations.nextTree());

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 16, enumBody_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "enumBody"

