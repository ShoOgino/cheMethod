  // $ANTLR start "switchCaseLabel"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:808:1: switchCaseLabel : CASE expression COLON ( blockStatement )* ;
  public final JavaParser.switchCaseLabel_return switchCaseLabel() throws RecognitionException {
    JavaParser.switchCaseLabel_return retval = new JavaParser.switchCaseLabel_return();
    retval.start = input.LT(1);
    int switchCaseLabel_StartIndex = input.index();
    CommonTree root_0 = null;

    Token CASE350 = null;
    Token COLON352 = null;
    JavaParser.expression_return expression351 = null;

    JavaParser.blockStatement_return blockStatement353 = null;

    CommonTree CASE350_tree = null;
    CommonTree COLON352_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 81)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:809:5: ( CASE expression COLON ( blockStatement )* )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:809:9: CASE expression COLON ( blockStatement )*
      {
        root_0 = (CommonTree) adaptor.nil();

        CASE350 = (Token) match(input, CASE, FOLLOW_CASE_in_switchCaseLabel10166);
        if (state.failed) return retval;
        if (state.backtracking == 0) {
          CASE350_tree = (CommonTree) adaptor.create(CASE350);
          root_0 = (CommonTree) adaptor.becomeRoot(CASE350_tree, root_0);
        }
        pushFollow(FOLLOW_expression_in_switchCaseLabel10169);
        expression351 = expression();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) adaptor.addChild(root_0, expression351.getTree());
        COLON352 = (Token) match(input, COLON, FOLLOW_COLON_in_switchCaseLabel10171);
        if (state.failed) return retval;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:809:33: ( blockStatement )*
        loop101:
        do {
          int alt101 = 2;
          int LA101_0 = input.LA(1);

          if ((LA101_0 == AT
              || LA101_0 == DEC
              || LA101_0 == INC
              || LA101_0 == LCURLY
              || LA101_0 == LESS_THAN
              || LA101_0 == LOGICAL_NOT
              || (LA101_0 >= LPAREN && LA101_0 <= MINUS)
              || LA101_0 == NOT
              || LA101_0 == PLUS
              || LA101_0 == SEMI
              || (LA101_0 >= ABSTRACT && LA101_0 <= BYTE)
              || (LA101_0 >= CHAR && LA101_0 <= CONTINUE)
              || (LA101_0 >= DO && LA101_0 <= DOUBLE)
              || LA101_0 == ENUM
              || (LA101_0 >= FALSE && LA101_0 <= FINAL)
              || (LA101_0 >= FLOAT && LA101_0 <= IF)
              || LA101_0 == INTERFACE
              || (LA101_0 >= INT && LA101_0 <= NULL)
              || (LA101_0 >= PRIVATE && LA101_0 <= THROW)
              || (LA101_0 >= TRANSIENT && LA101_0 <= WHILE)
              || (LA101_0 >= IDENT && LA101_0 <= STRING_LITERAL))) {
            alt101 = 1;
          }

          switch (alt101) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: blockStatement
              {
                pushFollow(FOLLOW_blockStatement_in_switchCaseLabel10174);
                blockStatement353 = blockStatement();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, blockStatement353.getTree());
              }
              break;

            default:
              break loop101;
          }
        } while (true);
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 81, switchCaseLabel_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "switchCaseLabel"

