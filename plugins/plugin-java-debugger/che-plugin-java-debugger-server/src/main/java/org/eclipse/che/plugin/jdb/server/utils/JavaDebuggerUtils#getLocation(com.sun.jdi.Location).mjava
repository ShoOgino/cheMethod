  /**
   * Returns Location for current debugger resource.
   *
   * @param location location type from JVM
   * @throws DebuggerException in case {@link org.eclipse.jdt.core.JavaModelException} or if Java
   *     {@link org.eclipse.jdt.core.IType} was not find
   */
  public Location getLocation(com.sun.jdi.Location location) throws DebuggerException {
    String fqn = location.declaringType().name();

    List<IType> types;
    try {
      Pair<char[][], char[][]> fqnPair = prepareFqnToSearch(fqn);

      types = findTypeByFqn(fqnPair.first, fqnPair.second, createWorkspaceScope());
    } catch (JavaModelException e) {
      throw new DebuggerException("Can't find class models by fqn: " + fqn, e);
    }

    if (types.isEmpty()) {
      throw new DebuggerException("Type with fully qualified name: " + fqn + " was not found");
    }

    IType type = types.get(0); // TODO we need handle few result! It's temporary solution.
    String typeProjectPath = type.getJavaProject().getPath().toOSString();
    if (type.isBinary()) {
      IClassFile classFile = type.getClassFile();
      String libId =
          classFile.getAncestor(IPackageFragmentRoot.PACKAGE_FRAGMENT_ROOT).getHandleIdentifier();
      return new LocationImpl(fqn, location.lineNumber(), true, libId, typeProjectPath, null, -1);
    } else {
      ICompilationUnit compilationUnit = type.getCompilationUnit();
      typeProjectPath = type.getJavaProject().getPath().toOSString();
      String resourcePath = compilationUnit.getPath().toOSString();
      return new LocationImpl(
          resourcePath, location.lineNumber(), false, null, typeProjectPath, null, -1);
    }
  }

