  // $ANTLR start "typeIdent"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:591:1: typeIdent : IDENT ( genericTypeArgumentList )? ;
  public final JavaParser.typeIdent_return typeIdent() throws RecognitionException {
    JavaParser.typeIdent_return retval = new JavaParser.typeIdent_return();
    retval.start = input.LT(1);
    int typeIdent_StartIndex = input.index();
    CommonTree root_0 = null;

    Token IDENT180 = null;
    JavaParser.genericTypeArgumentList_return genericTypeArgumentList181 = null;

    CommonTree IDENT180_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 47)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:592:5: ( IDENT ( genericTypeArgumentList )? )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:592:9: IDENT ( genericTypeArgumentList )?
      {
        root_0 = (CommonTree) adaptor.nil();

        IDENT180 = (Token) match(input, IDENT, FOLLOW_IDENT_in_typeIdent7221);
        if (state.failed) return retval;
        if (state.backtracking == 0) {
          IDENT180_tree = (CommonTree) adaptor.create(IDENT180);
          root_0 = (CommonTree) adaptor.becomeRoot(IDENT180_tree, root_0);
        }
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:592:16: ( genericTypeArgumentList )?
        int alt63 = 2;
        int LA63_0 = input.LA(1);

        if ((LA63_0 == LESS_THAN)) {
          alt63 = 1;
        }
        switch (alt63) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeArgumentList
            {
              pushFollow(FOLLOW_genericTypeArgumentList_in_typeIdent7224);
              genericTypeArgumentList181 = genericTypeArgumentList();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                adaptor.addChild(root_0, genericTypeArgumentList181.getTree());
            }
            break;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 47, typeIdent_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "typeIdent"

