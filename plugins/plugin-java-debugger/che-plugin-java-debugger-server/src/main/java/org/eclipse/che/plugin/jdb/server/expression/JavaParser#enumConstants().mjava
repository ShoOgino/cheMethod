  // $ANTLR start "enumConstants"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:422:1: enumConstants : enumConstant ( COMMA enumConstant )* ;
  public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
    JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
    retval.start = input.LT(1);
    int enumConstants_StartIndex = input.index();
    CommonTree root_0 = null;

    Token COMMA60 = null;
    JavaParser.enumConstant_return enumConstant59 = null;

    JavaParser.enumConstant_return enumConstant61 = null;

    CommonTree COMMA60_tree = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 19)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:423:5: ( enumConstant ( COMMA enumConstant )* )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:423:9: enumConstant ( COMMA enumConstant )*
      {
        root_0 = (CommonTree) adaptor.nil();

        pushFollow(FOLLOW_enumConstant_in_enumConstants5427);
        enumConstant59 = enumConstant();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) adaptor.addChild(root_0, enumConstant59.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:423:22: ( COMMA enumConstant )*
        loop19:
        do {
          int alt19 = 2;
          int LA19_0 = input.LA(1);

          if ((LA19_0 == COMMA)) {
            int LA19_1 = input.LA(2);

            if ((LA19_1 == AT || LA19_1 == IDENT)) {
              alt19 = 1;
            }
          }

          switch (alt19) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:423:23: COMMA enumConstant
              {
                COMMA60 = (Token) match(input, COMMA, FOLLOW_COMMA_in_enumConstants5430);
                if (state.failed) return retval;
                pushFollow(FOLLOW_enumConstant_in_enumConstants5433);
                enumConstant61 = enumConstant();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, enumConstant61.getTree());
              }
              break;

            default:
              break loop19;
          }
        } while (true);
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 19, enumConstants_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "enumConstants"

