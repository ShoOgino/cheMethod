  // $ANTLR start "annotationBody"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:718:1: annotationBody : LCURLY ( annotationScopeDeclarations )*
  // RCURLY -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) ;
  public final JavaParser.annotationBody_return annotationBody() throws RecognitionException {
    JavaParser.annotationBody_return retval = new JavaParser.annotationBody_return();
    retval.start = input.LT(1);
    int annotationBody_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LCURLY250 = null;
    Token RCURLY252 = null;
    JavaParser.annotationScopeDeclarations_return annotationScopeDeclarations251 = null;

    CommonTree LCURLY250_tree = null;
    CommonTree RCURLY252_tree = null;
    RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
    RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
    RewriteRuleSubtreeStream stream_annotationScopeDeclarations =
        new RewriteRuleSubtreeStream(adaptor, "rule annotationScopeDeclarations");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 69)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:719:5: ( LCURLY ( annotationScopeDeclarations )* RCURLY ->
      // ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:719:9: LCURLY ( annotationScopeDeclarations )* RCURLY
      {
        LCURLY250 = (Token) match(input, LCURLY, FOLLOW_LCURLY_in_annotationBody8410);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LCURLY.add(LCURLY250);

        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:719:16: ( annotationScopeDeclarations )*
        loop83:
        do {
          int alt83 = 2;
          int LA83_0 = input.LA(1);

          if ((LA83_0 == AT
              || LA83_0 == LESS_THAN
              || LA83_0 == ABSTRACT
              || LA83_0 == BOOLEAN
              || LA83_0 == BYTE
              || (LA83_0 >= CHAR && LA83_0 <= CLASS)
              || LA83_0 == DOUBLE
              || LA83_0 == ENUM
              || LA83_0 == FINAL
              || LA83_0 == FLOAT
              || LA83_0 == INTERFACE
              || (LA83_0 >= INT && LA83_0 <= NATIVE)
              || (LA83_0 >= PRIVATE && LA83_0 <= PUBLIC)
              || (LA83_0 >= SHORT && LA83_0 <= STRICTFP)
              || LA83_0 == SYNCHRONIZED
              || LA83_0 == TRANSIENT
              || (LA83_0 >= VOID && LA83_0 <= VOLATILE)
              || LA83_0 == IDENT)) {
            alt83 = 1;
          }

          switch (alt83) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: annotationScopeDeclarations
              {
                pushFollow(FOLLOW_annotationScopeDeclarations_in_annotationBody8412);
                annotationScopeDeclarations251 = annotationScopeDeclarations();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_annotationScopeDeclarations.add(annotationScopeDeclarations251.getTree());
              }
              break;

            default:
              break loop83;
          }
        } while (true);

        RCURLY252 = (Token) match(input, RCURLY, FOLLOW_RCURLY_in_annotationBody8415);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_RCURLY.add(RCURLY252);

        // AST REWRITE
        // elements: annotationScopeDeclarations
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 720:9: -> ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:720:13: ^( ANNOTATION_TOP_LEVEL_SCOPE[$LCURLY,
            // \"CLASS_TOP_LEVEL_SCOPE\"] ( annotationScopeDeclarations )* )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(
                                  ANNOTATION_TOP_LEVEL_SCOPE, LCURLY250, "CLASS_TOP_LEVEL_SCOPE"),
                          root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:720:76: ( annotationScopeDeclarations )*
              while (stream_annotationScopeDeclarations.hasNext()) {
                adaptor.addChild(root_1, stream_annotationScopeDeclarations.nextTree());
              }
              stream_annotationScopeDeclarations.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 69, annotationBody_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "annotationBody"

