  // $ANTLR start "localModifierList"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:551:1: localModifierList : ( localModifier )* -> ^(
  // LOCAL_MODIFIER_LIST ( localModifier )* ) ;
  public final JavaParser.localModifierList_return localModifierList() throws RecognitionException {
    JavaParser.localModifierList_return retval = new JavaParser.localModifierList_return();
    retval.start = input.LT(1);
    int localModifierList_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.localModifier_return localModifier163 = null;

    RewriteRuleSubtreeStream stream_localModifier =
        new RewriteRuleSubtreeStream(adaptor, "rule localModifier");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 39)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:552:5: ( ( localModifier )* -> ^( LOCAL_MODIFIER_LIST (
      // localModifier )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:552:9: ( localModifier )*
      {
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:552:9: ( localModifier )*
        loop55:
        do {
          int alt55 = 2;
          int LA55_0 = input.LA(1);

          if ((LA55_0 == AT || LA55_0 == FINAL)) {
            alt55 = 1;
          }

          switch (alt55) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: localModifier
              {
                pushFollow(FOLLOW_localModifier_in_localModifierList6898);
                localModifier163 = localModifier();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_localModifier.add(localModifier163.getTree());
              }
              break;

            default:
              break loop55;
          }
        } while (true);

        // AST REWRITE
        // elements: localModifier
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 553:9: -> ^( LOCAL_MODIFIER_LIST ( localModifier )* )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:553:12: ^( LOCAL_MODIFIER_LIST ( localModifier
            // )* )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(LOCAL_MODIFIER_LIST, "LOCAL_MODIFIER_LIST"),
                          root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:553:34: ( localModifier )*
              while (stream_localModifier.hasNext()) {
                adaptor.addChild(root_1, stream_localModifier.nextTree());
              }
              stream_localModifier.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 39, localModifierList_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "localModifierList"

