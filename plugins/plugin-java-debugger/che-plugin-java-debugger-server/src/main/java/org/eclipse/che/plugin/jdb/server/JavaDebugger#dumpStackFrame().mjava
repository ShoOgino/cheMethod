    @Override
    public StackFrameDumpDto dumpStackFrame() throws DebuggerException {
        lock.lock();
        try {
            final JdiStackFrame currentFrame = getCurrentFrame();
            StackFrameDumpDto dump = newDto(StackFrameDumpDto.class);
            boolean existInformation = true;
            JdiLocalVariable[] variables = new JdiLocalVariable[0];
            try {
                variables = currentFrame.getLocalVariables();
            } catch (DebuggerAbsentInformationException e) {
                existInformation = false;
            }
            for (JdiField f : currentFrame.getFields()) {
                List<String> variablePath = asList(f.isStatic() ? "static" : "this", f.getName());
                dump.getFields().add((FieldDto)newDto(FieldDto.class).withIsFinal(f.isFinal())
                                                               .withIsStatic(f.isStatic())
                                                               .withIsTransient(f.isTransient())
                                                               .withIsVolatile(f.isVolatile())
                                                               .withName(f.getName())
                                                               .withExistInformation(existInformation)
                                                               .withValue(f.getValue().getAsString())
                                                               .withType(f.getTypeName())
                                                                     .withVariablePath(newDto(VariablePathDto.class).withPath(variablePath))
                                                               .withPrimitive(f.isPrimitive()));
            }
            for (JdiLocalVariable var : variables) {
                dump.getVariables().add(newDto(VariableDto.class).withName(var.getName())
                                                                   .withExistInformation(existInformation)
                                                                   .withValue(var.getValue().getAsString())
                                                                   .withType(var.getTypeName())
                                                                   .withVariablePath(
                                                                           newDto(VariablePathDto.class)
                                                                                   .withPath(singletonList(var.getName()))
                                                                   )
                                                                   .withPrimitive(var.isPrimitive()));
            }
            return dump;
        } finally {
            lock.unlock();
        }
    }

