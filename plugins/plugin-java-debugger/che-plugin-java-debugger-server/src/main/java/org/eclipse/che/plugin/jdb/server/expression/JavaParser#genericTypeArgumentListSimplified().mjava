  // $ANTLR start "genericTypeArgumentListSimplified"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:625:1: genericTypeArgumentListSimplified : LESS_THAN
  // genericTypeArgumentSimplified ( COMMA genericTypeArgumentSimplified )* genericTypeListClosing -> ^(
  // GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) ;
  public final JavaParser.genericTypeArgumentListSimplified_return
      genericTypeArgumentListSimplified() throws RecognitionException {
    JavaParser.genericTypeArgumentListSimplified_return retval =
        new JavaParser.genericTypeArgumentListSimplified_return();
    retval.start = input.LT(1);
    int genericTypeArgumentListSimplified_StartIndex = input.index();
    CommonTree root_0 = null;

    Token LESS_THAN195 = null;
    Token COMMA197 = null;
    JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified196 = null;

    JavaParser.genericTypeArgumentSimplified_return genericTypeArgumentSimplified198 = null;

    JavaParser.genericTypeListClosing_return genericTypeListClosing199 = null;

    CommonTree LESS_THAN195_tree = null;
    CommonTree COMMA197_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleTokenStream stream_LESS_THAN =
        new RewriteRuleTokenStream(adaptor, "token LESS_THAN");
    RewriteRuleSubtreeStream stream_genericTypeArgumentSimplified =
        new RewriteRuleSubtreeStream(adaptor, "rule genericTypeArgumentSimplified");
    RewriteRuleSubtreeStream stream_genericTypeListClosing =
        new RewriteRuleSubtreeStream(adaptor, "rule genericTypeListClosing");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 53)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:626:5: ( LESS_THAN genericTypeArgumentSimplified ( COMMA
      // genericTypeArgumentSimplified )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN,
      // \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:626:9: LESS_THAN genericTypeArgumentSimplified ( COMMA
      // genericTypeArgumentSimplified )* genericTypeListClosing
      {
        LESS_THAN195 =
            (Token)
                match(input, LESS_THAN, FOLLOW_LESS_THAN_in_genericTypeArgumentListSimplified7487);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_LESS_THAN.add(LESS_THAN195);

        pushFollow(FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7489);
        genericTypeArgumentSimplified196 = genericTypeArgumentSimplified();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_genericTypeArgumentSimplified.add(genericTypeArgumentSimplified196.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:626:49: ( COMMA genericTypeArgumentSimplified )*
        loop68:
        do {
          int alt68 = 2;
          int LA68_0 = input.LA(1);

          if ((LA68_0 == COMMA)) {
            alt68 = 1;
          }

          switch (alt68) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:626:50: COMMA genericTypeArgumentSimplified
              {
                COMMA197 =
                    (Token)
                        match(input, COMMA, FOLLOW_COMMA_in_genericTypeArgumentListSimplified7492);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_COMMA.add(COMMA197);

                pushFollow(
                    FOLLOW_genericTypeArgumentSimplified_in_genericTypeArgumentListSimplified7494);
                genericTypeArgumentSimplified198 = genericTypeArgumentSimplified();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0)
                  stream_genericTypeArgumentSimplified.add(
                      genericTypeArgumentSimplified198.getTree());
              }
              break;

            default:
              break loop68;
          }
        } while (true);

        pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentListSimplified7498);
        genericTypeListClosing199 = genericTypeListClosing();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_genericTypeListClosing.add(genericTypeListClosing199.getTree());

        // AST REWRITE
        // elements: genericTypeArgumentSimplified
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 627:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:627:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN,
            // \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgumentSimplified )+ )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(
                                  GENERIC_TYPE_ARG_LIST, LESS_THAN195, "GENERIC_TYPE_ARG_LIST"),
                          root_1);

              if (!(stream_genericTypeArgumentSimplified.hasNext())) {
                throw new RewriteEarlyExitException();
              }
              while (stream_genericTypeArgumentSimplified.hasNext()) {
                adaptor.addChild(root_1, stream_genericTypeArgumentSimplified.nextTree());
              }
              stream_genericTypeArgumentSimplified.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 53, genericTypeArgumentListSimplified_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "genericTypeArgumentListSimplified"

