  // $ANTLR start "annotationElementValue"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:697:1: annotationElementValue : ( annotationElementValueExpression
  // | annotation | annotationElementValueArrayInitializer );
  public final JavaParser.annotationElementValue_return annotationElementValue()
      throws RecognitionException {
    JavaParser.annotationElementValue_return retval =
        new JavaParser.annotationElementValue_return();
    retval.start = input.LT(1);
    int annotationElementValue_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.annotationElementValueExpression_return annotationElementValueExpression236 = null;

    JavaParser.annotation_return annotation237 = null;

    JavaParser.annotationElementValueArrayInitializer_return
        annotationElementValueArrayInitializer238 = null;

    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 65)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:698:5: ( annotationElementValueExpression | annotation |
      // annotationElementValueArrayInitializer )
      int alt79 = 3;
      switch (input.LA(1)) {
        case DEC:
        case INC:
        case LESS_THAN:
        case LOGICAL_NOT:
        case LPAREN:
        case MINUS:
        case NOT:
        case PLUS:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case IDENT:
        case HEX_LITERAL:
        case OCTAL_LITERAL:
        case DECIMAL_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
          {
            alt79 = 1;
          }
          break;
        case AT:
          {
            alt79 = 2;
          }
          break;
        case LCURLY:
          {
            alt79 = 3;
          }
          break;
        default:
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 79, 0, input);

          throw nvae;
      }

      switch (alt79) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:698:9: annotationElementValueExpression
          {
            root_0 = (CommonTree) adaptor.nil();

            pushFollow(FOLLOW_annotationElementValueExpression_in_annotationElementValue8216);
            annotationElementValueExpression236 = annotationElementValueExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              adaptor.addChild(root_0, annotationElementValueExpression236.getTree());
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:699:9: annotation
          {
            root_0 = (CommonTree) adaptor.nil();

            pushFollow(FOLLOW_annotation_in_annotationElementValue8226);
            annotation237 = annotation();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0) adaptor.addChild(root_0, annotation237.getTree());
          }
          break;
        case 3:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:700:9: annotationElementValueArrayInitializer
          {
            root_0 = (CommonTree) adaptor.nil();

            pushFollow(FOLLOW_annotationElementValueArrayInitializer_in_annotationElementValue8236);
            annotationElementValueArrayInitializer238 = annotationElementValueArrayInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              adaptor.addChild(root_0, annotationElementValueArrayInitializer238.getTree());
          }
          break;
      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 65, annotationElementValue_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "annotationElementValue"

