    // $ANTLR start "literal"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1069:1: literal : ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL
    // | FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        CommonTree root_0 = null;

        Token set532 = null;

        CommonTree set532_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 111)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1070:5: ( HEX_LITERAL | OCTAL_LITERAL | DECIMAL_LITERAL |
            // FLOATING_POINT_LITERAL | CHARACTER_LITERAL | STRING_LITERAL | TRUE | FALSE | NULL )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:
            {
                root_0 = (CommonTree)adaptor.nil();

                set532 = (Token)input.LT(1);
                if (input.LA(1) == FALSE || input.LA(1) == NULL || input.LA(1) == TRUE ||
                    (input.LA(1) >= HEX_LITERAL && input.LA(1) <= STRING_LITERAL)) {
                    input.consume();
                    if (state.backtracking == 0) adaptor.addChild(root_0, (CommonTree)adaptor.create(set532));
                    state.errorRecovery = false;
                    state.failed = false;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    MismatchedSetException mse = new MismatchedSetException(null, input);
                    throw mse;
                }


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 111, literal_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "literal"

