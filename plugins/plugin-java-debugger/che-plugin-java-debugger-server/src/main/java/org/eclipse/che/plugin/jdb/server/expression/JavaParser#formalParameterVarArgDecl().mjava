  // $ANTLR start "formalParameterVarArgDecl"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:658:1: formalParameterVarArgDecl : localModifierList type ELLIPSIS
  // variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) ;
  public final JavaParser.formalParameterVarArgDecl_return formalParameterVarArgDecl()
      throws RecognitionException {
    JavaParser.formalParameterVarArgDecl_return retval =
        new JavaParser.formalParameterVarArgDecl_return();
    retval.start = input.LT(1);
    int formalParameterVarArgDecl_StartIndex = input.index();
    CommonTree root_0 = null;

    Token ELLIPSIS218 = null;
    JavaParser.localModifierList_return localModifierList216 = null;

    JavaParser.type_return type217 = null;

    JavaParser.variableDeclaratorId_return variableDeclaratorId219 = null;

    CommonTree ELLIPSIS218_tree = null;
    RewriteRuleTokenStream stream_ELLIPSIS = new RewriteRuleTokenStream(adaptor, "token ELLIPSIS");
    RewriteRuleSubtreeStream stream_variableDeclaratorId =
        new RewriteRuleSubtreeStream(adaptor, "rule variableDeclaratorId");
    RewriteRuleSubtreeStream stream_localModifierList =
        new RewriteRuleSubtreeStream(adaptor, "rule localModifierList");
    RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 58)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:659:5: ( localModifierList type ELLIPSIS
      // variableDeclaratorId -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:659:9: localModifierList type ELLIPSIS variableDeclaratorId
      {
        pushFollow(FOLLOW_localModifierList_in_formalParameterVarArgDecl7849);
        localModifierList216 = localModifierList();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_localModifierList.add(localModifierList216.getTree());
        pushFollow(FOLLOW_type_in_formalParameterVarArgDecl7851);
        type217 = type();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_type.add(type217.getTree());
        ELLIPSIS218 =
            (Token) match(input, ELLIPSIS, FOLLOW_ELLIPSIS_in_formalParameterVarArgDecl7853);
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_ELLIPSIS.add(ELLIPSIS218);

        pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterVarArgDecl7855);
        variableDeclaratorId219 = variableDeclaratorId();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0)
          stream_variableDeclaratorId.add(variableDeclaratorId219.getTree());

        // AST REWRITE
        // elements: localModifierList, type, variableDeclaratorId
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 660:9: -> ^( FORMAL_PARAM_VARARG_DECL localModifierList type variableDeclaratorId )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:660:13: ^( FORMAL_PARAM_VARARG_DECL
            // localModifierList type variableDeclaratorId )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(FORMAL_PARAM_VARARG_DECL, "FORMAL_PARAM_VARARG_DECL"),
                          root_1);

              adaptor.addChild(root_1, stream_localModifierList.nextTree());
              adaptor.addChild(root_1, stream_type.nextTree());
              adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 58, formalParameterVarArgDecl_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "formalParameterVarArgDecl"

