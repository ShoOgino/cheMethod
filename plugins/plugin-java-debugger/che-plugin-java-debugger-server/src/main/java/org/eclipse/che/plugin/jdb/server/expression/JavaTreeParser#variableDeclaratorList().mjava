  // $ANTLR start "variableDeclaratorList"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:242:1: variableDeclaratorList : ^( VAR_DECLARATOR_LIST (
  // variableDeclarator )+ ) ;
  public final void variableDeclaratorList() throws RecognitionException {
    int variableDeclaratorList_StartIndex = input.index();
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 16)) {
        return;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:243:3: ( ^( VAR_DECLARATOR_LIST (
      // variableDeclarator )+ ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:244:3: ^( VAR_DECLARATOR_LIST (
      // variableDeclarator )+ )
      {
        match(input, VAR_DECLARATOR_LIST, FOLLOW_VAR_DECLARATOR_LIST_in_variableDeclaratorList660);
        if (state.failed) return;

        match(input, Token.DOWN, null);
        if (state.failed) return;
        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:244:25: ( variableDeclarator )+
        int cnt40 = 0;
        loop40:
        do {
          int alt40 = 2;
          int LA40_0 = input.LA(1);

          if ((LA40_0 == VAR_DECLARATOR)) {
            alt40 = 1;
          }

          switch (alt40) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: variableDeclarator
              {
                pushFollow(FOLLOW_variableDeclarator_in_variableDeclaratorList662);
                variableDeclarator();

                state._fsp--;
                if (state.failed) return;
              }
              break;

            default:
              if (cnt40 >= 1) break loop40;
              if (state.backtracking > 0) {
                state.failed = true;
                return;
              }
              EarlyExitException eee = new EarlyExitException(40, input);
              throw eee;
          }
          cnt40++;
        } while (true);

        match(input, Token.UP, null);
        if (state.failed) return;
      }

    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
    } finally {
      if (state.backtracking > 0) {
        memoize(input, 16, variableDeclaratorList_StartIndex);
      }
    }
    return;
  }
  // $ANTLR end "variableDeclaratorList"

