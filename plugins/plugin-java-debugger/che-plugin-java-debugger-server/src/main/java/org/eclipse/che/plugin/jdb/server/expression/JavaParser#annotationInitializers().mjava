  // $ANTLR start "annotationInitializers"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:686:1: annotationInitializers : ( annotationInitializer ( COMMA
  // annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^(
  // ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) );
  public final JavaParser.annotationInitializers_return annotationInitializers()
      throws RecognitionException {
    JavaParser.annotationInitializers_return retval =
        new JavaParser.annotationInitializers_return();
    retval.start = input.LT(1);
    int annotationInitializers_StartIndex = input.index();
    CommonTree root_0 = null;

    Token COMMA230 = null;
    JavaParser.annotationInitializer_return annotationInitializer229 = null;

    JavaParser.annotationInitializer_return annotationInitializer231 = null;

    JavaParser.annotationElementValue_return annotationElementValue232 = null;

    CommonTree COMMA230_tree = null;
    RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
    RewriteRuleSubtreeStream stream_annotationElementValue =
        new RewriteRuleSubtreeStream(adaptor, "rule annotationElementValue");
    RewriteRuleSubtreeStream stream_annotationInitializer =
        new RewriteRuleSubtreeStream(adaptor, "rule annotationInitializer");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 63)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:687:5: ( annotationInitializer ( COMMA
      // annotationInitializer )* -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ ) | annotationElementValue -> ^(
      // ANNOTATION_INIT_DEFAULT_KEY annotationElementValue ) )
      int alt78 = 2;
      int LA78_0 = input.LA(1);

      if ((LA78_0 == IDENT)) {
        int LA78_1 = input.LA(2);

        if ((LA78_1 == ASSIGN)) {
          alt78 = 1;
        } else if ((LA78_1 == AND
            || LA78_1 == BIT_SHIFT_RIGHT
            || (LA78_1 >= DEC && LA78_1 <= DIV)
            || LA78_1 == DOT
            || (LA78_1 >= EQUAL && LA78_1 <= LBRACK)
            || (LA78_1 >= LESS_OR_EQUAL && LA78_1 <= LOGICAL_AND)
            || (LA78_1 >= LOGICAL_OR && LA78_1 <= MINUS)
            || LA78_1 == MOD
            || (LA78_1 >= NOT_EQUAL && LA78_1 <= OR)
            || LA78_1 == PLUS
            || LA78_1 == QUESTION
            || LA78_1 == RPAREN
            || LA78_1 == SHIFT_LEFT
            || LA78_1 == SHIFT_RIGHT
            || LA78_1 == STAR
            || LA78_1 == XOR
            || LA78_1 == INSTANCEOF)) {
          alt78 = 2;
        } else {
          if (state.backtracking > 0) {
            state.failed = true;
            return retval;
          }
          NoViableAltException nvae = new NoViableAltException("", 78, 1, input);

          throw nvae;
        }
      } else if ((LA78_0 == AT
          || LA78_0 == DEC
          || LA78_0 == INC
          || LA78_0 == LCURLY
          || LA78_0 == LESS_THAN
          || LA78_0 == LOGICAL_NOT
          || (LA78_0 >= LPAREN && LA78_0 <= MINUS)
          || LA78_0 == NOT
          || LA78_0 == PLUS
          || LA78_0 == BOOLEAN
          || LA78_0 == BYTE
          || LA78_0 == CHAR
          || LA78_0 == DOUBLE
          || LA78_0 == FALSE
          || LA78_0 == FLOAT
          || (LA78_0 >= INT && LA78_0 <= LONG)
          || (LA78_0 >= NEW && LA78_0 <= NULL)
          || LA78_0 == SHORT
          || LA78_0 == SUPER
          || LA78_0 == THIS
          || LA78_0 == TRUE
          || LA78_0 == VOID
          || (LA78_0 >= HEX_LITERAL && LA78_0 <= STRING_LITERAL))) {
        alt78 = 2;
      } else {
        if (state.backtracking > 0) {
          state.failed = true;
          return retval;
        }
        NoViableAltException nvae = new NoViableAltException("", 78, 0, input);

        throw nvae;
      }
      switch (alt78) {
        case 1:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:687:9: annotationInitializer ( COMMA
          // annotationInitializer )*
          {
            pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8111);
            annotationInitializer229 = annotationInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_annotationInitializer.add(annotationInitializer229.getTree());
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:687:31: ( COMMA annotationInitializer )*
            loop77:
            do {
              int alt77 = 2;
              int LA77_0 = input.LA(1);

              if ((LA77_0 == COMMA)) {
                alt77 = 1;
              }

              switch (alt77) {
                case 1:
                  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:687:32: COMMA annotationInitializer
                  {
                    COMMA230 =
                        (Token) match(input, COMMA, FOLLOW_COMMA_in_annotationInitializers8114);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_COMMA.add(COMMA230);

                    pushFollow(FOLLOW_annotationInitializer_in_annotationInitializers8116);
                    annotationInitializer231 = annotationInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                      stream_annotationInitializer.add(annotationInitializer231.getTree());
                  }
                  break;

                default:
                  break loop77;
              }
            } while (true);

            // AST REWRITE
            // elements: annotationInitializer
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 688:9: -> ^( ANNOTATION_INIT_KEY_LIST ( annotationInitializer )+ )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:688:13: ^( ANNOTATION_INIT_KEY_LIST (
                // annotationInitializer )+ )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 =
                      (CommonTree)
                          adaptor.becomeRoot(
                              (CommonTree)
                                  adaptor.create(
                                      ANNOTATION_INIT_KEY_LIST, "ANNOTATION_INIT_KEY_LIST"),
                              root_1);

                  if (!(stream_annotationInitializer.hasNext())) {
                    throw new RewriteEarlyExitException();
                  }
                  while (stream_annotationInitializer.hasNext()) {
                    adaptor.addChild(root_1, stream_annotationInitializer.nextTree());
                  }
                  stream_annotationInitializer.reset();

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
        case 2:
          // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:689:9: annotationElementValue
          {
            pushFollow(FOLLOW_annotationElementValue_in_annotationInitializers8146);
            annotationElementValue232 = annotationElementValue();

            state._fsp--;
            if (state.failed) return retval;
            if (state.backtracking == 0)
              stream_annotationElementValue.add(annotationElementValue232.getTree());

            // AST REWRITE
            // elements: annotationElementValue
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if (state.backtracking == 0) {
              retval.tree = root_0;
              RewriteRuleSubtreeStream stream_retval =
                  new RewriteRuleSubtreeStream(
                      adaptor, "rule retval", retval != null ? retval.tree : null);

              root_0 = (CommonTree) adaptor.nil();
              // 690:9: -> ^( ANNOTATION_INIT_DEFAULT_KEY annotationElementValue )
              {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:690:13: ^( ANNOTATION_INIT_DEFAULT_KEY
                // annotationElementValue )
                {
                  CommonTree root_1 = (CommonTree) adaptor.nil();
                  root_1 =
                      (CommonTree)
                          adaptor.becomeRoot(
                              (CommonTree)
                                  adaptor.create(
                                      ANNOTATION_INIT_DEFAULT_KEY, "ANNOTATION_INIT_DEFAULT_KEY"),
                              root_1);

                  adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                  adaptor.addChild(root_0, root_1);
                }
              }

              retval.tree = root_0;
            }
          }
          break;
      }
      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 63, annotationInitializers_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "annotationInitializers"

