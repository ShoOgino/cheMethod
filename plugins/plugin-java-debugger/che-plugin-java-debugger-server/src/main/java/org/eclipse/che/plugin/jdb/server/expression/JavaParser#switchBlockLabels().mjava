  // $ANTLR start "switchBlockLabels"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:799:1: switchBlockLabels : switchCaseLabels ( switchDefaultLabel )
  // ? switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) ;
  public final JavaParser.switchBlockLabels_return switchBlockLabels() throws RecognitionException {
    JavaParser.switchBlockLabels_return retval = new JavaParser.switchBlockLabels_return();
    retval.start = input.LT(1);
    int switchBlockLabels_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.switchCaseLabels_return switchCaseLabels346 = null;

    JavaParser.switchDefaultLabel_return switchDefaultLabel347 = null;

    JavaParser.switchCaseLabels_return switchCaseLabels348 = null;

    RewriteRuleSubtreeStream stream_switchDefaultLabel =
        new RewriteRuleSubtreeStream(adaptor, "rule switchDefaultLabel");
    RewriteRuleSubtreeStream stream_switchCaseLabels =
        new RewriteRuleSubtreeStream(adaptor, "rule switchCaseLabels");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 79)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:800:5: ( switchCaseLabels ( switchDefaultLabel )?
      // switchCaseLabels -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:800:9: switchCaseLabels ( switchDefaultLabel )?
      // switchCaseLabels
      {
        pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10088);
        switchCaseLabels346 = switchCaseLabels();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_switchCaseLabels.add(switchCaseLabels346.getTree());
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:800:26: ( switchDefaultLabel )?
        int alt99 = 2;
        int LA99_0 = input.LA(1);

        if ((LA99_0 == DEFAULT)) {
          alt99 = 1;
        }
        switch (alt99) {
          case 1:
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: switchDefaultLabel
            {
              pushFollow(FOLLOW_switchDefaultLabel_in_switchBlockLabels10090);
              switchDefaultLabel347 = switchDefaultLabel();

              state._fsp--;
              if (state.failed) return retval;
              if (state.backtracking == 0)
                stream_switchDefaultLabel.add(switchDefaultLabel347.getTree());
            }
            break;
        }

        pushFollow(FOLLOW_switchCaseLabels_in_switchBlockLabels10093);
        switchCaseLabels348 = switchCaseLabels();

        state._fsp--;
        if (state.failed) return retval;
        if (state.backtracking == 0) stream_switchCaseLabels.add(switchCaseLabels348.getTree());

        // AST REWRITE
        // elements: switchDefaultLabel, switchCaseLabels, switchCaseLabels
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 801:9: -> ^( SWITCH_BLOCK_LABEL_LIST switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:801:13: ^( SWITCH_BLOCK_LABEL_LIST
            // switchCaseLabels ( switchDefaultLabel )? switchCaseLabels )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree)
                              adaptor.create(SWITCH_BLOCK_LABEL_LIST, "SWITCH_BLOCK_LABEL_LIST"),
                          root_1);

              adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:801:56: ( switchDefaultLabel )?
              if (stream_switchDefaultLabel.hasNext()) {
                adaptor.addChild(root_1, stream_switchDefaultLabel.nextTree());
              }
              stream_switchDefaultLabel.reset();
              adaptor.addChild(root_1, stream_switchCaseLabels.nextTree());

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 79, switchBlockLabels_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "switchBlockLabels"

