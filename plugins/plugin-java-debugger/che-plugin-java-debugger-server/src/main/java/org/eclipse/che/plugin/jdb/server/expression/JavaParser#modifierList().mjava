  // $ANTLR start "modifierList"
  // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:532:1: modifierList : ( modifier )* -> ^( MODIFIER_LIST ( modifier
  // )* ) ;
  public final JavaParser.modifierList_return modifierList() throws RecognitionException {
    JavaParser.modifierList_return retval = new JavaParser.modifierList_return();
    retval.start = input.LT(1);
    int modifierList_StartIndex = input.index();
    CommonTree root_0 = null;

    JavaParser.modifier_return modifier151 = null;

    RewriteRuleSubtreeStream stream_modifier =
        new RewriteRuleSubtreeStream(adaptor, "rule modifier");
    try {
      if (state.backtracking > 0 && alreadyParsedRule(input, 37)) {
        return retval;
      }
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:533:5: ( ( modifier )* -> ^( MODIFIER_LIST ( modifier )* ) )
      // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:533:9: ( modifier )*
      {
        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:533:9: ( modifier )*
        loop53:
        do {
          int alt53 = 2;
          int LA53_0 = input.LA(1);

          if ((LA53_0 == AT)) {
            int LA53_2 = input.LA(2);

            if ((LA53_2 == IDENT)) {
              alt53 = 1;
            }

          } else if ((LA53_0 == ABSTRACT
              || LA53_0 == FINAL
              || LA53_0 == NATIVE
              || (LA53_0 >= PRIVATE && LA53_0 <= PUBLIC)
              || (LA53_0 >= STATIC && LA53_0 <= STRICTFP)
              || LA53_0 == SYNCHRONIZED
              || LA53_0 == TRANSIENT
              || LA53_0 == VOLATILE)) {
            alt53 = 1;
          }

          switch (alt53) {
            case 1:
              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: modifier
              {
                pushFollow(FOLLOW_modifier_in_modifierList6738);
                modifier151 = modifier();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_modifier.add(modifier151.getTree());
              }
              break;

            default:
              break loop53;
          }
        } while (true);

        // AST REWRITE
        // elements: modifier
        // token labels:
        // rule labels: retval
        // token list labels:
        // rule list labels:
        // wildcard labels:
        if (state.backtracking == 0) {
          retval.tree = root_0;
          RewriteRuleSubtreeStream stream_retval =
              new RewriteRuleSubtreeStream(
                  adaptor, "rule retval", retval != null ? retval.tree : null);

          root_0 = (CommonTree) adaptor.nil();
          // 534:9: -> ^( MODIFIER_LIST ( modifier )* )
          {
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:534:13: ^( MODIFIER_LIST ( modifier )* )
            {
              CommonTree root_1 = (CommonTree) adaptor.nil();
              root_1 =
                  (CommonTree)
                      adaptor.becomeRoot(
                          (CommonTree) adaptor.create(MODIFIER_LIST, "MODIFIER_LIST"), root_1);

              // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:534:29: ( modifier )*
              while (stream_modifier.hasNext()) {
                adaptor.addChild(root_1, stream_modifier.nextTree());
              }
              stream_modifier.reset();

              adaptor.addChild(root_0, root_1);
            }
          }

          retval.tree = root_0;
        }
      }

      retval.stop = input.LT(-1);

      if (state.backtracking == 0) {

        retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
        adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
      }
    } catch (RecognitionException re) {
      reportError(re);
      recover(input, re);
      retval.tree = (CommonTree) adaptor.errorNode(input, retval.start, input.LT(-1), re);

    } finally {
      if (state.backtracking > 0) {
        memoize(input, 37, modifierList_StartIndex);
      }
    }
    return retval;
  }
  // $ANTLR end "modifierList"

