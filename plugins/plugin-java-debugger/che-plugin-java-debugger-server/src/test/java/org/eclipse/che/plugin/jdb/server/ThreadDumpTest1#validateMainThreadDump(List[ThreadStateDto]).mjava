  private void validateMainThreadDump(List<ThreadStateDto> threads) {
    Optional<ThreadStateDto> mainThread =
        threads.stream().filter(t -> t.getName().equals("main")).findAny();
    assertTrue(mainThread.isPresent());

    ThreadState threadState = mainThread.get();
    assertEquals(threadState.getName(), "main");
    assertEquals(threadState.getGroupName(), "main");
    assertTrue(threadState.isSuspended());
    assertEquals(threadState.getStatus(), ThreadStatus.RUNNING);

    List<? extends StackFrameDump> frames = threadState.getFrames();
    assertEquals(frames.size(), 1);

    StackFrameDump stackFrameDump = frames.get(0);
    assertTrue(stackFrameDump.getVariables().isEmpty());
    assertTrue(stackFrameDump.getFields().isEmpty());

    Location location = stackFrameDump.getLocation();
    assertEquals(location.getLineNumber(), 26);
    assertEquals(location.getTarget(), "org.eclipse.ThreadDumpTest1");
    assertEquals(location.getExternalResourceId(), 0);
    assertNull(location.getResourceProjectPath());

    Method method = location.getMethod();
    assertEquals(method.getName(), "main");
  }

