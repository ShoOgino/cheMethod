  private void validateSomeThreadDump(List<ThreadStateDto> threads) {
    Optional<ThreadStateDto> someThread =
        threads.stream().filter(t -> t.getName().equals("SomeThread")).findAny();
    assertTrue(someThread.isPresent());

    ThreadState threadState = someThread.get();
    assertEquals(threadState.getName(), "SomeThread");
    assertEquals(threadState.getGroupName(), "main");
    assertTrue(threadState.isSuspended());
    assertEquals(threadState.getStatus(), ThreadStatus.RUNNING);

    List<? extends StackFrameDump> frames = threadState.getFrames();
    assertFalse(frames.isEmpty());

    StackFrameDump stackFrameDump = frames.get(0);
    assertTrue(stackFrameDump.getVariables().isEmpty());
    assertTrue(stackFrameDump.getFields().isEmpty());

    Location location = stackFrameDump.getLocation();
    assertEquals(location.getLineNumber(), 41);
    assertEquals(location.getTarget(), "/test/src/org/eclipse/ThreadDumpTest1.java");
    assertEquals(location.getExternalResourceId(), -1);
    assertEquals(location.getResourceProjectPath(), "/test");

    Method method = location.getMethod();
    assertEquals(method.getName(), "run");
    assertTrue(method.getArguments().isEmpty());
  }

