  private void validateFinalizerThreadDump(List<ThreadStateDto> threads) {
    Optional<ThreadStateDto> finalizerThread =
        threads.stream().filter(t -> t.getName().equals("Finalizer")).findAny();
    assertTrue(finalizerThread.isPresent());

    ThreadState threadState = finalizerThread.get();
    assertEquals(threadState.getName(), "Finalizer");
    assertEquals(threadState.getGroupName(), "system");
    assertTrue(threadState.isSuspended());
    assertEquals(threadState.getStatus(), ThreadStatus.WAIT);

    List<? extends StackFrameDump> frames = threadState.getFrames();
    assertEquals(frames.size(), 4);

    StackFrameDump stackFrameDump = frames.get(0);
    assertTrue(stackFrameDump.getVariables().isEmpty());
    assertTrue(stackFrameDump.getFields().isEmpty());

    Location location = stackFrameDump.getLocation();
    assertEquals(location.getLineNumber(), -1);
    assertEquals(location.getTarget(), "java.lang.Object");
    assertEquals(location.getResourceProjectPath(), "/test");

    Method method = location.getMethod();
    assertEquals(method.getName(), "wait");
    assertTrue(method.getArguments().isEmpty());
  }

