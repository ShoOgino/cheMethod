  /** Initialize project API for tests. */
  private static void init() throws Exception {
    File root = new File("target/test-classes/workspace").getAbsoluteFile();
    File indexDir = new File("target/test-classes/workspace/index");

    Injector injector =
        Guice.createInjector(
            new AbstractModule() {
              @Override
              protected void configure() {
                bind(File.class)
                    .annotatedWith(Names.named("che.user.workspaces.storage"))
                    .toInstance(root);
                bind(File.class)
                    .annotatedWith(Names.named("vfs.local.fs_index_root_dir"))
                    .toInstance(indexDir);
                bind(String.class).annotatedWith(Names.named("che.api")).toInstance("api-endpoint");
                bind(String.class)
                    .annotatedWith(Names.named("project.importer.default_importer_id"))
                    .toInstance("git");
                bind(String.class)
                    .annotatedWith(Names.named("che.core.jsonrpc.processor_max_pool_size"))
                    .toInstance("100");

                install(
                    new FactoryModuleBuilder()
                        .implement(ProjectServiceApi.class, ProjectServiceApi.class)
                        .build(ProjectServiceApiFactory.class));

                bind(ProjectServiceVcsStatusInjector.class)
                    .toInstance(
                        mock(
                            ProjectServiceVcsStatusInjector.class,
                            Mockito.withSettings().defaultAnswer(RETURNS_DEEP_STUBS)));
                bind(RequestHandlerManager.class)
                    .toInstance(
                        mock(
                            RequestHandlerManager.class,
                            Mockito.withSettings().defaultAnswer(RETURNS_DEEP_STUBS)));

                bind(EndpointIdConfigurator.class)
                    .toInstance(
                        mock(
                            EndpointIdConfigurator.class,
                            Mockito.withSettings().defaultAnswer(RETURNS_DEEP_STUBS)));

                bind(WebSocketMessageTransmitter.class)
                    .toInstance(
                        mock(
                            WebSocketMessageTransmitter.class,
                            Mockito.withSettings().defaultAnswer(RETURNS_DEEP_STUBS)));

                bind(WorkspaceProjectSynchronizer.class)
                    .toInstance(
                        mock(
                            WorkspaceProjectSynchronizer.class,
                            Mockito.withSettings().defaultAnswer(RETURNS_DEEP_STUBS)));

                install(new ProjectApiModule());
                install(new FsApiModule());
                install(new SearchApiModule());
                install(new EditorApiModule());
                install(new FileWatcherApiModule());
                install(new JsonRpcModule());
                install(new JavaModule());
                install(new SearchApiModule());
              }
            });

    ProjectManager projectManager = injector.getInstance(ProjectManager.class);
    projectManager.setType("/test", "java", false);
  }

