    private void openExternalResource(final Location location, final AsyncCallback<VirtualFile> callback) {
        JarEntry jarEntry = dtoFactory.createDto(JarEntry.class);

        final String className = extractOuterClassFqn(location.getTarget());
        jarEntry.setPath(className);
        jarEntry.setName(className.substring(className.lastIndexOf(".") + 1) + ".class");
        jarEntry.setType(CLASS_FILE);

        final Resource resource = appContext.getResource();

        if (resource == null) {
            callback.onFailure(new IllegalStateException());
            return;
        }

        final Project project = resource.getRelatedProject().get();

        service.getContent(project.getLocation(), className).then(new Operation<ClassContent>() {
            @Override
            public void apply(final ClassContent content) throws OperationException {
                final VirtualFile file =
                        new SyntheticFile(className.substring(className.lastIndexOf(".") + 1) + ".class", content.getContent());

                AsyncCallback<VirtualFile> downloadSourceCallback = new AsyncCallback<VirtualFile>() {
                    @Override
                    public void onSuccess(final VirtualFile result) {
                        if (content.isGenerated()) {
                            handleContentGeneratedResource(result, location, callback);
                        } else {
                            handleActivatedFile(file, callback, location.getLineNumber());
                        }
                    }

                    @Override
                    public void onFailure(Throwable caught) {
                        callback.onFailure(caught);
                    }
                };

                handleActivatedFile(file, downloadSourceCallback, location.getLineNumber());
                eventBus.fireEvent(new FileEvent(file, OPEN));
            }
        });
    }

