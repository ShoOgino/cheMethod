  private void findExternalResource(
      final Location location, final AsyncCallback<VirtualFile> callback) {

    final String className = extractOuterClassFqn(location.getTarget());
    final String libId = location.getExternalResourceId();

    Resource resource = appContext.getResource();
    if (resource == null) {
      callback.onFailure(new IllegalStateException("Resource is undefined"));
      return;
    }

    Project project = resource.getProject();
    if (project == null) {
      callback.onFailure(new IllegalStateException("Project is undefined"));
      return;
    }

    ExternalLibrariesParameters params = dtoFactory.createDto(ExternalLibrariesParameters.class);
    params.setProjectUri(project.getPath());
    params.setNodeId(libId);
    params.setNodePath(className);
    service
        .libraryEntry(params)
        .then(
            jarEntry -> {
              final JarFileNode file =
                  nodeFactory.newJarFileNode(
                      jarEntry, libId, Path.valueOf(project.getPath()), null);
              callback.onSuccess(file);
            })
        .catchError(
            error -> {
              callback.onFailure(error.getCause());
            });
  }

