  private <R> Promise<R> doAfterKeycloakInitAndUpdate(Sender<R> sender) {
    return keycloakPromise.thenPromise(
        new Function<Keycloak, Promise<R>>() {
          @Override
          public Promise<R> apply(Keycloak keycloak) {
            Log.debug(getClass(), "Keycloak initialized with token: ", keycloak.getToken());
            try {
              return keycloak
                  .updateToken(5)
                  .thenPromise(
                      new Function<Boolean, Promise<R>>() {
                        @Override
                        public Promise<R> apply(Boolean refreshed) {
                          if (refreshed) {
                            Log.debug(
                                getClass(),
                                "Keycloak updated token before sending the request `",
                                KeycloakAsyncRequest.this.requestBuilder.getUrl(),
                                "`. New token is : ",
                                keycloak.getToken());
                          } else {
                            Log.debug(
                                getClass(),
                                "Keycloak didn't need to update token before sending the request `",
                                KeycloakAsyncRequest.this.requestBuilder.getUrl(),
                                "`");
                          }
                          addAuthorizationHeader(keycloak);
                          try {
                            return sender.doSend();
                          } catch (Throwable t) {
                            Log.error(getClass(), t);
                            throw t;
                          }
                        }
                      });
            } catch (Throwable t) {
              Log.error(getClass(), t);
              throw t;
            }
          }
        });
  }

