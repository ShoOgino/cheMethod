    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
            throws IOException, ServletException {

        final HttpServletRequest httpRequest = (HttpServletRequest)request;
        if (httpRequest.getRequestURI().endsWith("/ws") || httpRequest.getRequestURI().endsWith("/eventbus")
            || request.getScheme().equals("ws") || httpRequest.getScheme().equals("wss") || httpRequest.getRequestURI().contains("/websocket/") ||
            (tokenExtractor.getToken(httpRequest) != null && tokenExtractor.getToken(httpRequest).startsWith("machine"))) {
            filterChain.doFilter(request, response);
            return;
        }

        KeycloakSecurityContext  context = (KeycloakSecurityContext)httpRequest.getAttribute(KeycloakSecurityContext.class.getName());
        // In case of bearer token login, there is another object in session
        if (context == null) {
            OidcKeycloakAccount keycloakAccount = (OidcKeycloakAccount)httpRequest.getAttribute(KeycloakAccount.class.getName());
            if (keycloakAccount != null) {
                context = keycloakAccount.getKeycloakSecurityContext();
            }
        }
        if (context == null) {
            throw new ServletException("Cannot detect or instantiate user");
        }
        final IDToken token = context.getIdToken() != null ? context.getIdToken() : context.getToken();
        String tokenString = context.getTokenString();
        User user = getOrCreateUser(token.getSubject(), token.getEmail(), token.getPreferredUsername());
        getOrCreateAccount(token.getPreferredUsername(), token.getPreferredUsername());

        final Subject subject =
                new SubjectImpl(user.getName(), user.getId(), tokenString, false);
        httpRequest.getSession().setAttribute("codenvy_user", subject);

        try {
            EnvironmentContext.getCurrent().setSubject(subject);
            filterChain.doFilter(addUserInRequest(httpRequest, subject), response);
        } finally {
            EnvironmentContext.reset();
        }
    }

