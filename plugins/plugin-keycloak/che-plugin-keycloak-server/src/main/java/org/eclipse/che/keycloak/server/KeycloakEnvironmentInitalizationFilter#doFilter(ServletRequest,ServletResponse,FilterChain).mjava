    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
            throws IOException, ServletException {

        final HttpServletRequest httpRequest = (HttpServletRequest)request;
        if (request.getScheme().startsWith("ws") || tokenExtractor.getToken(httpRequest) == null || tokenExtractor.getToken(httpRequest).startsWith("machine")) {
            filterChain.doFilter(request, response);
            return;
        }

        final HttpSession session = httpRequest.getSession();
        Subject subject = (Subject)session.getAttribute("che_subject");
        if (subject == null) {
            KeycloakSecurityContext context = (KeycloakSecurityContext)httpRequest.getAttribute(KeycloakSecurityContext.class.getName());
            // In case of bearer token login, there is another object in session
            if (context == null) {
                OidcKeycloakAccount keycloakAccount = (OidcKeycloakAccount)httpRequest.getAttribute(KeycloakAccount.class.getName());
                if (keycloakAccount != null) {
                    context = keycloakAccount.getKeycloakSecurityContext();
                }
            }
            if (context == null) {
                throw new ServletException("Cannot detect or instantiate user.");
            }
            final IDToken token = firstNonNull(context.getIdToken(),context.getToken());
            final String tokenString = context.getTokenString();
            User user = getOrCreateUser(token.getSubject(), token.getEmail(), token.getPreferredUsername());
            getOrCreateAccount(token.getPreferredUsername(), token.getPreferredUsername());

            subject = new SubjectImpl(user.getName(), user.getId(), tokenString, false);
            session.setAttribute("che_subject", subject);
        }

        try {
            EnvironmentContext.getCurrent().setSubject(subject);
            filterChain.doFilter(addUserInRequest(httpRequest, subject), response);
        } finally {
            EnvironmentContext.reset();
        }
    }

