    @Override
    public void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain)
            throws IOException, ServletException {

        final HttpServletRequest httpRequest = (HttpServletRequest)request;
        KeycloakSecurityContext  context = (KeycloakSecurityContext)httpRequest.getAttribute(KeycloakSecurityContext.class.getName());
        // In case of bearer token login, there is another object in session
        if (context == null) {
            context = ((OidcKeycloakAccount)httpRequest.getAttribute(KeycloakAccount.class.getName())).getKeycloakSecurityContext();
        }
        if (context == null) {
            throw new ServletException("Unable to get security context.");
        }

        User user;

        final IDToken token = context.getIdToken() != null ? context.getIdToken() : context.getToken();
        try {
            user = userManager.getById(token.getSubject());
        } catch (NotFoundException ex) {
            try {
                final UserImpl cheUser = new UserImpl(token.getSubject(),
                                                      token.getEmail(),
                                                      token.getPreferredUsername(),
                                                      "secret",
                                                      emptyList());
                user = userManager.create(cheUser, false);
            } catch (ServerException | ConflictException e) {
                throw new ServletException("Unable to create new user");
            }
        } catch (ServerException e) {
            throw new ServletException("Unable to get user");
        }
        final Subject subject =
                new SubjectImpl(user.getName(), user.getId(), context.getTokenString(), false);
        httpRequest.getSession().setAttribute("codenvy_user", subject);

        try {
            EnvironmentContext.getCurrent().setSubject(subject);
            filterChain.doFilter(addUserInRequest(httpRequest, subject), response);
        } finally {
            EnvironmentContext.reset();
        }
    }

