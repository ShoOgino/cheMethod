    private void estimateAndSetAttributes() {
        projectServiceClient.estimateProject(appContext.getWorkspace().getId(),
                context.get(PROJECT_PATH_KEY), MAVEN_ID,
                new AsyncRequestCallback<SourceEstimation>(dtoUnmarshallerFactory.newUnmarshaller(SourceEstimation.class)) {
                    @Override
                    protected void onSuccess(SourceEstimation result) {
                        Map<String, List<String>> estimatedAttributes = result.getAttributes();
                        List<String> artifactIdValues = estimatedAttributes.get(ARTIFACT_ID);
                        if (artifactIdValues != null && !artifactIdValues.isEmpty()) {
                            setAttribute(ARTIFACT_ID, artifactIdValues.get(0));
                        }

                        List<String> groupIdValues = estimatedAttributes.get(GROUP_ID);
                        List<String> parentGroupIdValues = estimatedAttributes.get(PARENT_GROUP_ID);
                        if (groupIdValues != null && !groupIdValues.isEmpty()) {
                            setAttribute(GROUP_ID, groupIdValues.get(0));
                        } else if (parentGroupIdValues != null && !parentGroupIdValues.isEmpty()) {
                            setAttribute(GROUP_ID, parentGroupIdValues.get(0));
                        }

                        List<String> versionValues = estimatedAttributes.get(VERSION);
                        List<String> parentVersionValues = estimatedAttributes.get(PARENT_VERSION);
                        if (versionValues != null && !versionValues.isEmpty()) {
                            setAttribute(VERSION, versionValues.get(0));
                        } else if (parentVersionValues != null && !parentVersionValues.isEmpty()) {
                            setAttribute(VERSION, parentVersionValues.get(0));
                        }

                        List<String> packagingValues = estimatedAttributes.get(PACKAGING);
                        if (packagingValues != null && !packagingValues.isEmpty()) {
                            setAttribute(PACKAGING, packagingValues.get(0));
                        }

                        updateDelegate.updateControls();
                    }

                    @Override
                    protected void onFailure(Throwable exception) {
                        final String message = dtoFactory.createDtoFromJson(exception.getMessage(), ServiceError.class).getMessage();
                        dialogFactory.createMessageDialog("Not valid Maven project", message, null).show();
                        Log.error(MavenPagePresenter.class, exception);
                    }
                });
    }

