    @Inject
    private void bindEvents(final EventBus eventBus,
                            final DependenciesUpdater dependenciesUpdater,
                            final ProjectExplorerPresenter projectExplorerPresenter) {

        projectExplorerPresenter.addBeforeNodeLoadHandler(new BeforeLoadEvent.BeforeLoadHandler() {
            @Override
            public void onBeforeLoad(BeforeLoadEvent event) {
                Node node = event.getRequestedNode();
                if (!projectExplorerPresenter.isLoaded(node) && JavaNodeManager.isJavaProject(node) && isValid(node)) {
                    dependenciesUpdater.updateDependencies(((HasProjectConfig)node).getProjectConfig());
                }
            }
        });

        eventBus.addHandler(ProjectReadyEvent.TYPE, new ProjectReadyHandler() {
            @Override
            public void onProjectReady(ProjectReadyEvent event) {
                project = event.getProjectConfig();
                if (isValidForResolveDependencies(project)) {
                    dependenciesUpdater.updateDependencies(project);
                }
            }
        });

        eventBus.addHandler(MachineStateEvent.TYPE, new MachineStateEvent.Handler() {

            @Override
            public void onMachineCreating(MachineStateEvent event) {

            }

            @Override
            public void onMachineRunning(MachineStateEvent event) {
                if (project != null) {
                    if (isValidForResolveDependencies(project)) {
                        new Timer() {
                            @Override
                            public void run() {
                                dependenciesUpdater.updateDependencies(project);
                            }
                        }.schedule(5000);
                    }
                }
            }

            @Override
            public void onMachineDestroyed(MachineStateEvent event) {
            }
        });
    }

