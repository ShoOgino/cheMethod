    @Test
    public void shouldNotRemoveModuleWhenPomNotContainsModule() throws Exception {
        String parent = NameGenerator.generate("parent", 5);
        Project project =
                projectManager.createProject(WORKSPACE, parent, DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                                          .withType(MavenAttributes.MAVEN_ID), null);
        project.getBaseFolder().createFile("pom.xml", POM_XML_TEMPL.getBytes());
        removeMavenModuleHandler.onRemoveModule(project.getBaseFolder(), DtoFactory.getInstance()
                                                                                   .createDto(ProjectConfigDto.class)
                                                                                   .withType(MavenAttributes.MAVEN_ID));

        VirtualFileEntry pom = project.getBaseFolder().getChild("pom.xml");
        Assert.assertNotNull(pom);
        ContentStream content = pom.getVirtualFile().getContent();
        Assert.assertNotNull(content);
        InputStream stream = content.getStream();
        String pomContent = IoUtil.readStream(stream);
        Assert.assertNotNull(pomContent);
        Assert.assertFalse(pomContent.isEmpty());

        String firstMavenModule = String.format("<module>%s</module>", FIRST_MODULE);
        String secondMavenModule = String.format("<module>%s</module>", SECOND_MODULE);
        Assert.assertTrue(pomContent.contains(firstMavenModule));
        Assert.assertTrue(pomContent.contains(secondMavenModule));
    }

