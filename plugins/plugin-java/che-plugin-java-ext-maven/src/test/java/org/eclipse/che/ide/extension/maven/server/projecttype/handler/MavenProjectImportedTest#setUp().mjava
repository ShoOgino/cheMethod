    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
        when(filterProvider.get()).thenReturn(filter);
        Set<ProjectTypeDef> pts = new HashSet<>();
        final ProjectTypeDef pt = new ProjectTypeDef("maven", "Maven type", true, false) {
        };

        pts.add(pt);
        final ProjectTypeRegistry projectTypeRegistry = new ProjectTypeRegistry(pts);

        VirtualFileSystemRegistry virtualFileSystemRegistry = new VirtualFileSystemRegistry();
        EventService eventService = new EventService();
        ProjectHandlerRegistry handlerRegistry = new ProjectHandlerRegistry(new HashSet<>());
        projectManager = new DefaultProjectManager(virtualFileSystemRegistry,
                                                   eventService,
                                                   projectTypeRegistry,
                                                   handlerRegistry,
                                                   filterProvider,
                                                   API_ENDPOINT,
                                                   httpJsonRequestFactory);
        // Bind components
        Injector injector = Guice.createInjector(new AbstractModule() {
            @Override
            protected void configure() {
                Multibinder<ProjectHandler> projectTypeResolverMultibinder = Multibinder.newSetBinder(binder(), ProjectHandler.class);
                projectTypeResolverMultibinder.addBinding().to(MavenProjectImportedHandler.class);
                bind(ProjectManager.class).toInstance(projectManager);
            }
        });

        final MemoryFileSystemProvider memoryFileSystemProvider =
                new MemoryFileSystemProvider(workspace,
                                             eventService,
                                             new VirtualFileSystemUserContext() {
                    @Override
                    public VirtualFileSystemUser getVirtualFileSystemUser() {
                        return new VirtualFileSystemUser(vfsUser, vfsUserGroups);
                    }
                },
                                             virtualFileSystemRegistry,
                                             SystemPathsFilter.ANY);
        virtualFileSystemRegistry.registerProvider(workspace, memoryFileSystemProvider);


        mavenProjectImportedHandler = injector.getInstance(MavenProjectImportedHandler.class);
        projectManager = injector.getInstance(ProjectManager.class);

        httpJsonRequest = mock(HttpJsonRequest.class, new SelfReturningAnswer());
        UsersWorkspaceDto usersWorkspaceMock = mock(UsersWorkspaceDto.class);
        when(httpJsonRequestFactory.fromLink(eq(DtoFactory.newDto(Link.class)
                                                          .withMethod("PUT")
                                                          .withHref(API_ENDPOINT + "/workspace/" + workspace + "/project"))))
                .thenReturn(httpJsonRequest);
        when(httpJsonRequestFactory.fromLink(eq(DtoFactory.newDto(Link.class)
                                                          .withMethod("GET")
                                                          .withHref(API_ENDPOINT + "/workspace/" + workspace))))
                .thenReturn(httpJsonRequest);
        when(httpJsonRequest.request()).thenReturn(httpJsonResponse);
        when(httpJsonResponse.asDto(UsersWorkspaceDto.class)).thenReturn(usersWorkspaceMock);
        final ProjectConfigDto projectConfig = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                         .withPath("/test")
                                                         .withType(MavenAttributes.MAVEN_ID);
        final ProjectConfigDto module1 = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                   .withPath("/test/module1")
                                                   .withType(MavenAttributes.MAVEN_ID);
        final ProjectConfigDto module2 = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                   .withPath("/test/module2")
                                                   .withType(MavenAttributes.MAVEN_ID);
        final ProjectConfigDto module3 = DtoFactory.getInstance().createDto(ProjectConfigDto.class)
                                                   .withPath("/test/module3")
                                                   .withType(MavenAttributes.MAVEN_ID);
        List<ProjectConfigDto> projectsList = new ArrayList<>();
        projectsList.add(projectConfig);
        projectsList.add(module1);
        projectsList.add(module2);
        projectsList.add(module3);
        when(usersWorkspaceMock.getProjects()).thenReturn(projectsList);
    }

