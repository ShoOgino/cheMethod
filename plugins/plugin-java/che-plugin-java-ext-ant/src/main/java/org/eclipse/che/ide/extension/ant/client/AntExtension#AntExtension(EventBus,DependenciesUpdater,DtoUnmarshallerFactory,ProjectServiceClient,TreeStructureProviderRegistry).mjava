    /** Create instance of {@link AntExtension}. */
    @Inject
    public AntExtension(final EventBus eventBus,
                        final DependenciesUpdater dependenciesUpdater,
                        final DtoUnmarshallerFactory dtoUnmarshallerFactory,
                        final ProjectServiceClient projectServiceClient,
                        TreeStructureProviderRegistry treeStructureProviderRegistry) {
        // Handle project opened event to fire update dependencies.
        eventBus.addHandler(ProjectActionEvent.TYPE, new ProjectActionHandler() {
            @Override
            public void onProjectOpened(ProjectActionEvent event) {
                ProjectDescriptor project = event.getProject();
                if (AntAttributes.ANT_ID.equals(project.getType())
                    && project.getAttributes().containsKey(Constants.LANGUAGE)
                    && project.getAttributes().get(Constants.LANGUAGE).get(0).equals("java")) {
                    dependenciesUpdater.updateDependencies(project, false);
                }
            }

            @Override
            public void onProjectClosing(ProjectActionEvent event) {
            }

            @Override
            public void onProjectClosed(ProjectActionEvent event) {
            }
        });

        // Handle build.xml file save operation and if ant configuration has been changed reload project tree.
        // For example, if user provide custom source directory.
        eventBus.addHandler(FileEvent.TYPE, new FileEventHandler() {
            @Override
            public void onFileOperation(final FileEvent event) {
                if (event.getOperationType() == FileEvent.FileOperation.SAVE && "build.xml".equals(event.getFile().getName())) {
                    final ProjectNode project = event.getFile().getProject();
                    Unmarshallable<ProjectDescriptor> unmarshaller = dtoUnmarshallerFactory.newUnmarshaller(ProjectDescriptor.class);
                    projectServiceClient.getProject(project.getData().getPath(),
                                                    new AsyncRequestCallback<ProjectDescriptor>(unmarshaller) {
                                                        @Override
                                                        protected void onSuccess(ProjectDescriptor result) {
                                                            if (!result.getAttributes().equals(project.getData().getAttributes())) {
                                                                project.setData(result);
                                                                eventBus.fireEvent(new RefreshProjectTreeEvent(project));
                                                            }
                                                        }

                                                        @Override
                                                        protected void onFailure(Throwable exception) {
                                                            Log.info(getClass(), "Unable to get the project.", exception);
                                                        }
                                                    }
                                                   );
                }
            }
        });

        treeStructureProviderRegistry.associateProjectTypeToTreeProvider(AntAttributes.ANT_ID, AntProjectTreeStructureProvider.ID);
    }

