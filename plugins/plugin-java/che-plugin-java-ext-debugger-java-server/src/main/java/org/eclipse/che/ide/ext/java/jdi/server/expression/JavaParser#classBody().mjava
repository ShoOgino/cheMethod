    // $ANTLR start "classBody"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:439:1: classBody : LCURLY ( classScopeDeclarations )* RCURLY -> ^(
    // CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY74 = null;
        Token RCURLY76 = null;
        JavaParser.classScopeDeclarations_return classScopeDeclarations75 = null;


        CommonTree LCURLY74_tree = null;
        CommonTree RCURLY76_tree = null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
        RewriteRuleSubtreeStream stream_classScopeDeclarations = new RewriteRuleSubtreeStream(adaptor, "rule classScopeDeclarations");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 23)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:440:5: ( LCURLY ( classScopeDeclarations )* RCURLY -> ^(
            // CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:440:9: LCURLY ( classScopeDeclarations )* RCURLY
            {
                LCURLY74 = (Token)match(input, LCURLY, FOLLOW_LCURLY_in_classBody5582);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LCURLY.add(LCURLY74);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:440:16: ( classScopeDeclarations )*
                loop25:
                do {
                    int alt25 = 2;
                    int LA25_0 = input.LA(1);

                    if ((LA25_0 == AT || LA25_0 == LCURLY || LA25_0 == LESS_THAN || LA25_0 == SEMI || LA25_0 == ABSTRACT ||
                         LA25_0 == BOOLEAN || LA25_0 == BYTE || (LA25_0 >= CHAR && LA25_0 <= CLASS) || LA25_0 == DOUBLE || LA25_0 == ENUM ||
                         LA25_0 == FINAL || LA25_0 == FLOAT || LA25_0 == INTERFACE || (LA25_0 >= INT && LA25_0 <= NATIVE) ||
                         (LA25_0 >= PRIVATE && LA25_0 <= PUBLIC) || (LA25_0 >= SHORT && LA25_0 <= STRICTFP) || LA25_0 == SYNCHRONIZED ||
                         LA25_0 == TRANSIENT || (LA25_0 >= VOID && LA25_0 <= VOLATILE) || LA25_0 == IDENT)) {
                        alt25 = 1;
                    }


                    switch (alt25) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: classScopeDeclarations
                        {
                            pushFollow(FOLLOW_classScopeDeclarations_in_classBody5584);
                            classScopeDeclarations75 = classScopeDeclarations();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classScopeDeclarations.add(classScopeDeclarations75.getTree());

                        }
                        break;

                        default:
                            break loop25;
                    }
                } while (true);

                RCURLY76 = (Token)match(input, RCURLY, FOLLOW_RCURLY_in_classBody5587);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RCURLY.add(RCURLY76);


                // AST REWRITE
                // elements: classScopeDeclarations
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 441:9: -> ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:441:13: ^( CLASS_TOP_LEVEL_SCOPE[$LCURLY,
                        // \"CLASS_TOP_LEVEL_SCOPE\"] ( classScopeDeclarations )* )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(CLASS_TOP_LEVEL_SCOPE, LCURLY74, "CLASS_TOP_LEVEL_SCOPE"),
                                                root_1);

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:441:71: ( classScopeDeclarations )*
                            while (stream_classScopeDeclarations.hasNext()) {
                                adaptor.addChild(root_1, stream_classScopeDeclarations.nextTree());

                            }
                            stream_classScopeDeclarations.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 23, classBody_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "classBody"

