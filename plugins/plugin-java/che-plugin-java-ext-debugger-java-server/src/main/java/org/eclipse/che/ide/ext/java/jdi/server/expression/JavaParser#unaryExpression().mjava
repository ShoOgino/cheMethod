    // $ANTLR start "unaryExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:943:1: unaryExpression : ( PLUS unaryExpression -> ^(
    // UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS,
    // \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC
    // postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS429 = null;
        Token MINUS431 = null;
        Token INC433 = null;
        Token DEC435 = null;
        JavaParser.unaryExpression_return unaryExpression430 = null;

        JavaParser.unaryExpression_return unaryExpression432 = null;

        JavaParser.postfixedExpression_return postfixedExpression434 = null;

        JavaParser.postfixedExpression_return postfixedExpression436 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus437 = null;


        CommonTree PLUS429_tree = null;
        CommonTree MINUS431_tree = null;
        CommonTree INC433_tree = null;
        CommonTree DEC435_tree = null;
        RewriteRuleTokenStream stream_DEC = new RewriteRuleTokenStream(adaptor, "token DEC");
        RewriteRuleTokenStream stream_INC = new RewriteRuleTokenStream(adaptor, "token INC");
        RewriteRuleTokenStream stream_PLUS = new RewriteRuleTokenStream(adaptor, "token PLUS");
        RewriteRuleTokenStream stream_MINUS = new RewriteRuleTokenStream(adaptor, "token MINUS");
        RewriteRuleSubtreeStream stream_postfixedExpression = new RewriteRuleSubtreeStream(adaptor, "rule postfixedExpression");
        RewriteRuleSubtreeStream stream_unaryExpression = new RewriteRuleSubtreeStream(adaptor, "rule unaryExpression");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 102)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:944:5: ( PLUS unaryExpression -> ^( UNARY_PLUS[$PLUS,
            // \"UNARY_PLUS\"] unaryExpression ) | MINUS unaryExpression -> ^( UNARY_MINUS[$MINUS,
            // \"UNARY_MINUS\"] unaryExpression ) | INC postfixedExpression -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression ) | DEC
            // postfixedExpression -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression ) | unaryExpressionNotPlusMinus )
            int alt126 = 5;
            switch (input.LA(1)) {
                case PLUS: {
                    alt126 = 1;
                }
                break;
                case MINUS: {
                    alt126 = 2;
                }
                break;
                case INC: {
                    alt126 = 3;
                }
                break;
                case DEC: {
                    alt126 = 4;
                }
                break;
                case LESS_THAN:
                case LOGICAL_NOT:
                case LPAREN:
                case NOT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case SUPER:
                case THIS:
                case TRUE:
                case VOID:
                case IDENT:
                case HEX_LITERAL:
                case OCTAL_LITERAL:
                case DECIMAL_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL: {
                    alt126 = 5;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 126, 0, input);

                    throw nvae;
            }

            switch (alt126) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:944:9: PLUS unaryExpression
                {
                    PLUS429 = (Token)match(input, PLUS, FOLLOW_PLUS_in_unaryExpression11565);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_PLUS.add(PLUS429);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11567);
                    unaryExpression430 = unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_unaryExpression.add(unaryExpression430.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 944:37: -> ^( UNARY_PLUS[$PLUS, \"UNARY_PLUS\"] unaryExpression )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:944:41: ^( UNARY_PLUS[$PLUS,
                            // \"UNARY_PLUS\"] unaryExpression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor
                                        .becomeRoot((CommonTree)adaptor.create(UNARY_PLUS, PLUS429, "UNARY_PLUS"), root_1);

                                adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:945:9: MINUS unaryExpression
                {
                    MINUS431 = (Token)match(input, MINUS, FOLLOW_MINUS_in_unaryExpression11594);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_MINUS.add(MINUS431);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression11596);
                    unaryExpression432 = unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_unaryExpression.add(unaryExpression432.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 945:37: -> ^( UNARY_MINUS[$MINUS, \"UNARY_MINUS\"] unaryExpression )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:945:41: ^( UNARY_MINUS[$MINUS,
                            // \"UNARY_MINUS\"] unaryExpression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor
                                        .becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, MINUS431, "UNARY_MINUS"), root_1);

                                adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 3:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:946:9: INC postfixedExpression
                {
                    INC433 = (Token)match(input, INC, FOLLOW_INC_in_unaryExpression11622);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_INC.add(INC433);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11624);
                    postfixedExpression434 = postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_postfixedExpression.add(postfixedExpression434.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 946:37: -> ^( PRE_INC[$INC, \"PRE_INC\"] postfixedExpression )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:946:41: ^( PRE_INC[$INC,
                            // \"PRE_INC\"] postfixedExpression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_INC, INC433, "PRE_INC"), root_1);

                                adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 4:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:947:9: DEC postfixedExpression
                {
                    DEC435 = (Token)match(input, DEC, FOLLOW_DEC_in_unaryExpression11648);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_DEC.add(DEC435);

                    pushFollow(FOLLOW_postfixedExpression_in_unaryExpression11650);
                    postfixedExpression436 = postfixedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_postfixedExpression.add(postfixedExpression436.getTree());


                    // AST REWRITE
                    // elements: postfixedExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 947:37: -> ^( PRE_DEC[$DEC, \"PRE_DEC\"] postfixedExpression )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:947:41: ^( PRE_DEC[$DEC,
                            // \"PRE_DEC\"] postfixedExpression )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PRE_DEC, DEC435, "PRE_DEC"), root_1);

                                adaptor.addChild(root_1, stream_postfixedExpression.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 5:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:948:9: unaryExpressionNotPlusMinus
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression11674);
                    unaryExpressionNotPlusMinus437 = unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, unaryExpressionNotPlusMinus437.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 102, unaryExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

