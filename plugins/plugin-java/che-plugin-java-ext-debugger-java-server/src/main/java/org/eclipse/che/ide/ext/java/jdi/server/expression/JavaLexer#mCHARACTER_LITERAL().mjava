    // $ANTLR start "CHARACTER_LITERAL"
    public final void mCHARACTER_LITERAL() throws RecognitionException {
        try {
            int _type = CHARACTER_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1112:5: ( '\\'' ( ESCAPE_SEQUENCE | ~ ( '\\'' | '\\\\' ) )
            // '\\'' )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1112:9: '\\'' ( ESCAPE_SEQUENCE | ~ ( '\\'' | '\\\\' ) )
            // '\\''
            {
                match('\'');
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1112:14: ( ESCAPE_SEQUENCE | ~ ( '\\'' | '\\\\' ) )
                int alt20 = 2;
                int LA20_0 = input.LA(1);

                if ((LA20_0 == '\\')) {
                    alt20 = 1;
                } else if (((LA20_0 >= '\u0000' && LA20_0 <= '&') || (LA20_0 >= '(' && LA20_0 <= '[') ||
                            (LA20_0 >= ']' && LA20_0 <= '\uFFFF'))) {
                    alt20 = 2;
                } else {
                    NoViableAltException nvae =
                            new NoViableAltException("", 20, 0, input);

                    throw nvae;
                }
                switch (alt20) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1112:16: ESCAPE_SEQUENCE
                    {
                        mESCAPE_SEQUENCE();

                    }
                    break;
                    case 2:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1112:34: ~ ( '\\'' | '\\\\' )
                    {
                        if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[') ||
                            (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
                            input.consume();

                        } else {
                            MismatchedSetException mse = new MismatchedSetException(null, input);
                            recover(mse);
                            throw mse;
                        }


                    }
                    break;

                }

                match('\'');

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
        }
    }
    // $ANTLR end "CHARACTER_LITERAL"

