    // $ANTLR start "relationalExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:903:1: relationalExpression : shiftExpression ( ( LESS_OR_EQUAL |
    // GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_OR_EQUAL410 = null;
        Token GREATER_OR_EQUAL411 = null;
        Token LESS_THAN412 = null;
        Token GREATER_THAN413 = null;
        JavaParser.shiftExpression_return shiftExpression409 = null;

        JavaParser.shiftExpression_return shiftExpression414 = null;


        CommonTree LESS_OR_EQUAL410_tree = null;
        CommonTree GREATER_OR_EQUAL411_tree = null;
        CommonTree LESS_THAN412_tree = null;
        CommonTree GREATER_THAN413_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 98)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:904:5: ( shiftExpression ( ( LESS_OR_EQUAL |
            // GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:904:9: shiftExpression ( ( LESS_OR_EQUAL |
            // GREATER_OR_EQUAL | LESS_THAN | GREATER_THAN ) shiftExpression )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_shiftExpression_in_relationalExpression11095);
                shiftExpression409 = shiftExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, shiftExpression409.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:905:9: ( ( LESS_OR_EQUAL | GREATER_OR_EQUAL |
                // LESS_THAN | GREATER_THAN ) shiftExpression )*
                loop119:
                do {
                    int alt119 = 2;
                    int LA119_0 = input.LA(1);

                    if (((LA119_0 >= GREATER_OR_EQUAL && LA119_0 <= GREATER_THAN) || (LA119_0 >= LESS_OR_EQUAL && LA119_0 <= LESS_THAN))) {
                        alt119 = 1;
                    }


                    switch (alt119) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:905:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL
                            // | LESS_THAN | GREATER_THAN ) shiftExpression
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:905:13: ( LESS_OR_EQUAL | GREATER_OR_EQUAL
                            // | LESS_THAN | GREATER_THAN )
                            int alt118 = 4;
                            switch (input.LA(1)) {
                                case LESS_OR_EQUAL: {
                                    alt118 = 1;
                                }
                                break;
                                case GREATER_OR_EQUAL: {
                                    alt118 = 2;
                                }
                                break;
                                case LESS_THAN: {
                                    alt118 = 3;
                                }
                                break;
                                case GREATER_THAN: {
                                    alt118 = 4;
                                }
                                break;
                                default:
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae =
                                            new NoViableAltException("", 118, 0, input);

                                    throw nvae;
                            }

                            switch (alt118) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:905:17: LESS_OR_EQUAL
                                {
                                    LESS_OR_EQUAL410 =
                                            (Token)match(input, LESS_OR_EQUAL, FOLLOW_LESS_OR_EQUAL_in_relationalExpression11114);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        LESS_OR_EQUAL410_tree = (CommonTree)adaptor.create(LESS_OR_EQUAL410);
                                        root_0 = (CommonTree)adaptor.becomeRoot(LESS_OR_EQUAL410_tree, root_0);
                                    }

                                }
                                break;
                                case 2:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:906:17: GREATER_OR_EQUAL
                                {
                                    GREATER_OR_EQUAL411 =
                                            (Token)match(input, GREATER_OR_EQUAL, FOLLOW_GREATER_OR_EQUAL_in_relationalExpression11133);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        GREATER_OR_EQUAL411_tree = (CommonTree)adaptor.create(GREATER_OR_EQUAL411);
                                        root_0 = (CommonTree)adaptor.becomeRoot(GREATER_OR_EQUAL411_tree, root_0);
                                    }

                                }
                                break;
                                case 3:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:907:17: LESS_THAN
                                {
                                    LESS_THAN412 = (Token)match(input, LESS_THAN, FOLLOW_LESS_THAN_in_relationalExpression11152);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        LESS_THAN412_tree = (CommonTree)adaptor.create(LESS_THAN412);
                                        root_0 = (CommonTree)adaptor.becomeRoot(LESS_THAN412_tree, root_0);
                                    }

                                }
                                break;
                                case 4:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:908:17: GREATER_THAN
                                {
                                    GREATER_THAN413 = (Token)match(input, GREATER_THAN, FOLLOW_GREATER_THAN_in_relationalExpression11171);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        GREATER_THAN413_tree = (CommonTree)adaptor.create(GREATER_THAN413);
                                        root_0 = (CommonTree)adaptor.becomeRoot(GREATER_THAN413_tree, root_0);
                                    }

                                }
                                break;

                            }

                            pushFollow(FOLLOW_shiftExpression_in_relationalExpression11200);
                            shiftExpression414 = shiftExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, shiftExpression414.getTree());

                        }
                        break;

                        default:
                            break loop119;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 98, relationalExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

