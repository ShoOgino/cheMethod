    // $ANTLR start "interfaceBody"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:444:1: interfaceBody : LCURLY ( interfaceScopeDeclarations )*
    // RCURLY -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY77 = null;
        Token RCURLY79 = null;
        JavaParser.interfaceScopeDeclarations_return interfaceScopeDeclarations78 = null;


        CommonTree LCURLY77_tree = null;
        CommonTree RCURLY79_tree = null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
        RewriteRuleSubtreeStream stream_interfaceScopeDeclarations =
                new RewriteRuleSubtreeStream(adaptor, "rule interfaceScopeDeclarations");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 24)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:445:5: ( LCURLY ( interfaceScopeDeclarations )* RCURLY ->
            // ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:445:9: LCURLY ( interfaceScopeDeclarations )* RCURLY
            {
                LCURLY77 = (Token)match(input, LCURLY, FOLLOW_LCURLY_in_interfaceBody5629);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LCURLY.add(LCURLY77);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:445:16: ( interfaceScopeDeclarations )*
                loop26:
                do {
                    int alt26 = 2;
                    int LA26_0 = input.LA(1);

                    if ((LA26_0 == AT || LA26_0 == LESS_THAN || LA26_0 == SEMI || LA26_0 == ABSTRACT || LA26_0 == BOOLEAN ||
                         LA26_0 == BYTE || (LA26_0 >= CHAR && LA26_0 <= CLASS) || LA26_0 == DOUBLE || LA26_0 == ENUM || LA26_0 == FINAL ||
                         LA26_0 == FLOAT || LA26_0 == INTERFACE || (LA26_0 >= INT && LA26_0 <= NATIVE) ||
                         (LA26_0 >= PRIVATE && LA26_0 <= PUBLIC) || (LA26_0 >= SHORT && LA26_0 <= STRICTFP) || LA26_0 == SYNCHRONIZED ||
                         LA26_0 == TRANSIENT || (LA26_0 >= VOID && LA26_0 <= VOLATILE) || LA26_0 == IDENT)) {
                        alt26 = 1;
                    }


                    switch (alt26) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: interfaceScopeDeclarations
                        {
                            pushFollow(FOLLOW_interfaceScopeDeclarations_in_interfaceBody5631);
                            interfaceScopeDeclarations78 = interfaceScopeDeclarations();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_interfaceScopeDeclarations.add(interfaceScopeDeclarations78.getTree());

                        }
                        break;

                        default:
                            break loop26;
                    }
                } while (true);

                RCURLY79 = (Token)match(input, RCURLY, FOLLOW_RCURLY_in_interfaceBody5634);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RCURLY.add(RCURLY79);


                // AST REWRITE
                // elements: interfaceScopeDeclarations
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 446:9: -> ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY, \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:446:13: ^( INTERFACE_TOP_LEVEL_SCOPE[$LCURLY,
                        // \"CLASS_TOP_LEVEL_SCOPE\"] ( interfaceScopeDeclarations )* )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(INTERFACE_TOP_LEVEL_SCOPE, LCURLY77, "CLASS_TOP_LEVEL_SCOPE"),
                                                root_1);

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:446:75: ( interfaceScopeDeclarations )*
                            while (stream_interfaceScopeDeclarations.hasNext()) {
                                adaptor.addChild(root_1, stream_interfaceScopeDeclarations.nextTree());

                            }
                            stream_interfaceScopeDeclarations.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 24, interfaceBody_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

