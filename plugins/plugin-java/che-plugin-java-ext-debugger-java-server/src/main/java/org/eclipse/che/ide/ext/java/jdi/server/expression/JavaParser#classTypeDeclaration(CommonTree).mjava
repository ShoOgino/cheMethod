    // $ANTLR start "classTypeDeclaration"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:358:1: classTypeDeclaration[CommonTree modifiers] : CLASS IDENT (
    // genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )
    // ? ( classExtendsClause )? ( implementsClause )? classBody ) ;
    public final JavaParser.classTypeDeclaration_return classTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.classTypeDeclaration_return retval = new JavaParser.classTypeDeclaration_return();
        retval.start = input.LT(1);
        int classTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token CLASS21 = null;
        Token IDENT22 = null;
        JavaParser.genericTypeParameterList_return genericTypeParameterList23 = null;

        JavaParser.classExtendsClause_return classExtendsClause24 = null;

        JavaParser.implementsClause_return implementsClause25 = null;

        JavaParser.classBody_return classBody26 = null;


        CommonTree CLASS21_tree = null;
        CommonTree IDENT22_tree = null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleSubtreeStream stream_genericTypeParameterList = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_classExtendsClause = new RewriteRuleSubtreeStream(adaptor, "rule classExtendsClause");
        RewriteRuleSubtreeStream stream_implementsClause = new RewriteRuleSubtreeStream(adaptor, "rule implementsClause");
        RewriteRuleSubtreeStream stream_classBody = new RewriteRuleSubtreeStream(adaptor, "rule classBody");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 7)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:359:5: ( CLASS IDENT ( genericTypeParameterList )? (
            // classExtendsClause )? ( implementsClause )? classBody -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause
            // )? ( implementsClause )? classBody ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:359:9: CLASS IDENT ( genericTypeParameterList )? (
            // classExtendsClause )? ( implementsClause )? classBody
            {
                CLASS21 = (Token)match(input, CLASS, FOLLOW_CLASS_in_classTypeDeclaration4788);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_CLASS.add(CLASS21);

                IDENT22 = (Token)match(input, IDENT, FOLLOW_IDENT_in_classTypeDeclaration4790);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_IDENT.add(IDENT22);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:359:21: ( genericTypeParameterList )?
                int alt8 = 2;
                int LA8_0 = input.LA(1);

                if ((LA8_0 == LESS_THAN)) {
                    alt8 = 1;
                }
                switch (alt8) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeParameterList
                    {
                        pushFollow(FOLLOW_genericTypeParameterList_in_classTypeDeclaration4792);
                        genericTypeParameterList23 = genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_genericTypeParameterList.add(genericTypeParameterList23.getTree());

                    }
                    break;

                }

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:359:47: ( classExtendsClause )?
                int alt9 = 2;
                int LA9_0 = input.LA(1);

                if ((LA9_0 == EXTENDS)) {
                    alt9 = 1;
                }
                switch (alt9) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: classExtendsClause
                    {
                        pushFollow(FOLLOW_classExtendsClause_in_classTypeDeclaration4795);
                        classExtendsClause24 = classExtendsClause();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_classExtendsClause.add(classExtendsClause24.getTree());

                    }
                    break;

                }

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:359:67: ( implementsClause )?
                int alt10 = 2;
                int LA10_0 = input.LA(1);

                if ((LA10_0 == IMPLEMENTS)) {
                    alt10 = 1;
                }
                switch (alt10) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: implementsClause
                    {
                        pushFollow(FOLLOW_implementsClause_in_classTypeDeclaration4798);
                        implementsClause25 = implementsClause();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_implementsClause.add(implementsClause25.getTree());

                    }
                    break;

                }

                pushFollow(FOLLOW_classBody_in_classTypeDeclaration4801);
                classBody26 = classBody();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_classBody.add(classBody26.getTree());


                // AST REWRITE
                // elements: IDENT, classExtendsClause, genericTypeParameterList, CLASS, implementsClause, classBody
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 360:9: -> ^( CLASS IDENT ( genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:360:13: ^( CLASS IDENT (
                        // genericTypeParameterList )? ( classExtendsClause )? ( implementsClause )? classBody )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot(stream_CLASS.nextNode(), root_1);

                            adaptor.addChild(root_1, modifiers);
                            adaptor.addChild(root_1, stream_IDENT.nextNode());
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:360:40: ( genericTypeParameterList )?
                            if (stream_genericTypeParameterList.hasNext()) {
                                adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                            }
                            stream_genericTypeParameterList.reset();
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:360:66: ( classExtendsClause )?
                            if (stream_classExtendsClause.hasNext()) {
                                adaptor.addChild(root_1, stream_classExtendsClause.nextTree());

                            }
                            stream_classExtendsClause.reset();
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:360:86: ( implementsClause )?
                            if (stream_implementsClause.hasNext()) {
                                adaptor.addChild(root_1, stream_implementsClause.nextTree());

                            }
                            stream_implementsClause.reset();
                            adaptor.addChild(root_1, stream_classBody.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 7, classTypeDeclaration_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "classTypeDeclaration"

