    // $ANTLR start "classScopeDeclarations"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:449:1: classScopeDeclarations : ( block -> ^(
    // CLASS_INSTANCE_INITIALIZER block ) | STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) |
    // modifierList ( ( genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block |
    // SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList
    // )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL
    // modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT
    // formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList (
    // genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type classFieldDeclaratorList SEMI -> ^(
    // VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI );
    public final JavaParser.classScopeDeclarations_return classScopeDeclarations() throws RecognitionException {
        JavaParser.classScopeDeclarations_return retval = new JavaParser.classScopeDeclarations_return();
        retval.start = input.LT(1);
        int classScopeDeclarations_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident = null;
        Token STATIC81 = null;
        Token IDENT86 = null;
        Token SEMI91 = null;
        Token VOID92 = null;
        Token IDENT93 = null;
        Token SEMI97 = null;
        Token SEMI103 = null;
        Token SEMI105 = null;
        JavaParser.block_return block80 = null;

        JavaParser.block_return block82 = null;

        JavaParser.modifierList_return modifierList83 = null;

        JavaParser.genericTypeParameterList_return genericTypeParameterList84 = null;

        JavaParser.type_return type85 = null;

        JavaParser.formalParameterList_return formalParameterList87 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList88 = null;

        JavaParser.throwsClause_return throwsClause89 = null;

        JavaParser.block_return block90 = null;

        JavaParser.formalParameterList_return formalParameterList94 = null;

        JavaParser.throwsClause_return throwsClause95 = null;

        JavaParser.block_return block96 = null;

        JavaParser.formalParameterList_return formalParameterList98 = null;

        JavaParser.throwsClause_return throwsClause99 = null;

        JavaParser.block_return block100 = null;

        JavaParser.type_return type101 = null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList102 = null;

        JavaParser.typeDeclaration_return typeDeclaration104 = null;


        CommonTree ident_tree = null;
        CommonTree STATIC81_tree = null;
        CommonTree IDENT86_tree = null;
        CommonTree SEMI91_tree = null;
        CommonTree VOID92_tree = null;
        CommonTree IDENT93_tree = null;
        CommonTree SEMI97_tree = null;
        CommonTree SEMI103_tree = null;
        CommonTree SEMI105_tree = null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
        RewriteRuleTokenStream stream_VOID = new RewriteRuleTokenStream(adaptor, "token VOID");
        RewriteRuleTokenStream stream_SEMI = new RewriteRuleTokenStream(adaptor, "token SEMI");
        RewriteRuleTokenStream stream_STATIC = new RewriteRuleTokenStream(adaptor, "token STATIC");
        RewriteRuleSubtreeStream stream_arrayDeclaratorList = new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_throwsClause = new RewriteRuleSubtreeStream(adaptor, "rule throwsClause");
        RewriteRuleSubtreeStream stream_modifierList = new RewriteRuleSubtreeStream(adaptor, "rule modifierList");
        RewriteRuleSubtreeStream stream_genericTypeParameterList = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_block = new RewriteRuleSubtreeStream(adaptor, "rule block");
        RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList = new RewriteRuleSubtreeStream(adaptor, "rule classFieldDeclaratorList");
        RewriteRuleSubtreeStream stream_formalParameterList = new RewriteRuleSubtreeStream(adaptor, "rule formalParameterList");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 25)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:450:5: ( block -> ^( CLASS_INSTANCE_INITIALIZER block ) |
            // STATIC block -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block ) | modifierList ( (
            // genericTypeParameterList )? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
            // -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList
            // )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^(
            // VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |
            // ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident,
            // \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) | type
            // classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) ) | typeDeclaration | SEMI )
            int alt36 = 5;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:450:9: block
                {
                    pushFollow(FOLLOW_block_in_classScopeDeclarations5672);
                    block80 = block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_block.add(block80.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 450:25: -> ^( CLASS_INSTANCE_INITIALIZER block )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:450:29: ^( CLASS_INSTANCE_INITIALIZER block )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor
                                        .becomeRoot((CommonTree)adaptor.create(CLASS_INSTANCE_INITIALIZER, "CLASS_INSTANCE_INITIALIZER"),
                                                    root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:451:9: STATIC block
                {
                    STATIC81 = (Token)match(input, STATIC, FOLLOW_STATIC_in_classScopeDeclarations5701);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_STATIC.add(STATIC81);

                    pushFollow(FOLLOW_block_in_classScopeDeclarations5703);
                    block82 = block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_block.add(block82.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 451:25: -> ^( CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:451:29: ^(
                            // CLASS_STATIC_INITIALIZER[$STATIC, \"CLASS_STATIC_INITIALIZER\"] block )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(
                                        (CommonTree)adaptor.create(CLASS_STATIC_INITIALIZER, STATIC81, "CLASS_STATIC_INITIALIZER"), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 3:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:452:9: modifierList ( ( genericTypeParameterList )
                    // ? ( type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^(
                    // FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList (
                    // arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block |
                    // SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause
                    // )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident,
                    // \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) |
                    // type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                {
                    pushFollow(FOLLOW_modifierList_in_classScopeDeclarations5726);
                    modifierList83 = modifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_modifierList.add(modifierList83.getTree());
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:453:9: ( ( genericTypeParameterList )? ( type
                    // IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL
                    // modifierList ( genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause
                    // )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL
                    // modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) | ident= IDENT
                    // formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident,
                    // \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )? block ) ) |
                    // type classFieldDeclaratorList SEMI -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList ) )
                    int alt35 = 2;
                    switch (input.LA(1)) {
                        case LESS_THAN:
                        case VOID: {
                            alt35 = 1;
                        }
                        break;
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case SHORT: {
                            int LA35_2 = input.LA(2);

                            if ((synpred42_Java())) {
                                alt35 = 1;
                            } else if ((true)) {
                                alt35 = 2;
                            } else {
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 35, 2, input);

                                throw nvae;
                            }
                        }
                        break;
                        case IDENT: {
                            int LA35_3 = input.LA(2);

                            if ((synpred42_Java())) {
                                alt35 = 1;
                            } else if ((true)) {
                                alt35 = 2;
                            } else {
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 35, 3, input);

                                throw nvae;
                            }
                        }
                        break;
                        default:
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae =
                                    new NoViableAltException("", 35, 0, input);

                            throw nvae;
                    }

                    switch (alt35) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:453:13: ( genericTypeParameterList )? (
                            // type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^(
                            // FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT formalParameterList (
                            // arrayDeclaratorList )? ( throwsClause )? ( block )? ) | VOID IDENT formalParameterList ( throwsClause )? (
                            // block | SEMI ) -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList
                            // ( throwsClause )? ( block )? ) | ident= IDENT formalParameterList ( throwsClause )? block -> ^(
                            // CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )?
                            // formalParameterList ( throwsClause )? block ) )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:453:13: ( genericTypeParameterList )?
                            int alt27 = 2;
                            int LA27_0 = input.LA(1);

                            if ((LA27_0 == LESS_THAN)) {
                                alt27 = 1;
                            }
                            switch (alt27) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeParameterList
                                {
                                    pushFollow(FOLLOW_genericTypeParameterList_in_classScopeDeclarations5740);
                                    genericTypeParameterList84 = genericTypeParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_genericTypeParameterList.add(genericTypeParameterList84.getTree());

                                }
                                break;

                            }

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:454:13: ( type IDENT formalParameterList (
                            // arrayDeclaratorList )? ( throwsClause )? ( block | SEMI ) -> ^( FUNCTION_METHOD_DECL modifierList (
                            // genericTypeParameterList )? type IDENT formalParameterList ( arrayDeclaratorList )? ( throwsClause )? (
                            // block )? ) | VOID IDENT formalParameterList ( throwsClause )? ( block | SEMI ) -> ^( VOID_METHOD_DECL
                            // modifierList ( genericTypeParameterList )? IDENT formalParameterList ( throwsClause )? ( block )? ) |
                            // ident= IDENT formalParameterList ( throwsClause )? block -> ^( CONSTRUCTOR_DECL[$ident,
                            // \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )? formalParameterList ( throwsClause )?
                            // block ) )
                            int alt34 = 3;
                            switch (input.LA(1)) {
                                case BOOLEAN:
                                case BYTE:
                                case CHAR:
                                case DOUBLE:
                                case FLOAT:
                                case INT:
                                case LONG:
                                case SHORT: {
                                    alt34 = 1;
                                }
                                break;
                                case IDENT: {
                                    int LA34_2 = input.LA(2);

                                    if ((LA34_2 == DOT || LA34_2 == LBRACK || LA34_2 == LESS_THAN || LA34_2 == IDENT)) {
                                        alt34 = 1;
                                    } else if ((LA34_2 == LPAREN)) {
                                        alt34 = 3;
                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        NoViableAltException nvae =
                                                new NoViableAltException("", 34, 2, input);

                                        throw nvae;
                                    }
                                }
                                break;
                                case VOID: {
                                    alt34 = 2;
                                }
                                break;
                                default:
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae =
                                            new NoViableAltException("", 34, 0, input);

                                    throw nvae;
                            }

                            switch (alt34) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:454:17: type IDENT
                                    // formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block | SEMI )
                                {
                                    pushFollow(FOLLOW_type_in_classScopeDeclarations5759);
                                    type85 = type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_type.add(type85.getTree());
                                    IDENT86 = (Token)match(input, IDENT, FOLLOW_IDENT_in_classScopeDeclarations5761);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_IDENT.add(IDENT86);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5763);
                                    formalParameterList87 = formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_formalParameterList.add(formalParameterList87.getTree());
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:454:48: ( arrayDeclaratorList )?
                                    int alt28 = 2;
                                    int LA28_0 = input.LA(1);

                                    if ((LA28_0 == LBRACK)) {
                                        alt28 = 1;
                                    }
                                    switch (alt28) {
                                        case 1:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: arrayDeclaratorList
                                        {
                                            pushFollow(FOLLOW_arrayDeclaratorList_in_classScopeDeclarations5765);
                                            arrayDeclaratorList88 = arrayDeclaratorList();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_arrayDeclaratorList.add(arrayDeclaratorList88.getTree());

                                        }
                                        break;

                                    }

                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:454:69: ( throwsClause )?
                                    int alt29 = 2;
                                    int LA29_0 = input.LA(1);

                                    if ((LA29_0 == THROWS)) {
                                        alt29 = 1;
                                    }
                                    switch (alt29) {
                                        case 1:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: throwsClause
                                        {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5768);
                                            throwsClause89 = throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_throwsClause.add(throwsClause89.getTree());

                                        }
                                        break;

                                    }

                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:454:83: ( block | SEMI )
                                    int alt30 = 2;
                                    int LA30_0 = input.LA(1);

                                    if ((LA30_0 == LCURLY)) {
                                        alt30 = 1;
                                    } else if ((LA30_0 == SEMI)) {
                                        alt30 = 2;
                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        NoViableAltException nvae =
                                                new NoViableAltException("", 30, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt30) {
                                        case 1:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:454:84: block
                                        {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5772);
                                            block90 = block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_block.add(block90.getTree());

                                        }
                                        break;
                                        case 2:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:454:92: SEMI
                                        {
                                            SEMI91 = (Token)match(input, SEMI, FOLLOW_SEMI_in_classScopeDeclarations5776);
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_SEMI.add(SEMI91);


                                        }
                                        break;

                                    }


                                    // AST REWRITE
                                    // elements: formalParameterList, arrayDeclaratorList, modifierList, type, genericTypeParameterList,
                                    // block, throwsClause, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if (state.backtracking == 0) {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval =
                                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                        root_0 = (CommonTree)adaptor.nil();
                                        // 455:17: -> ^( FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT
                                        // formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                        {
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:455:21: ^(
                                            // FUNCTION_METHOD_DECL modifierList ( genericTypeParameterList )? type IDENT
                                            // formalParameterList ( arrayDeclaratorList )? ( throwsClause )? ( block )? )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                                root_1 = (CommonTree)adaptor.becomeRoot(
                                                        (CommonTree)adaptor.create(FUNCTION_METHOD_DECL, "FUNCTION_METHOD_DECL"), root_1);

                                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:455:57: (
                                                // genericTypeParameterList )?
                                                if (stream_genericTypeParameterList.hasNext()) {
                                                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                                }
                                                stream_genericTypeParameterList.reset();
                                                adaptor.addChild(root_1, stream_type.nextTree());
                                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                                adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:455:114: (
                                                // arrayDeclaratorList )?
                                                if (stream_arrayDeclaratorList.hasNext()) {
                                                    adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                                                }
                                                stream_arrayDeclaratorList.reset();
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:455:135: (
                                                // throwsClause )?
                                                if (stream_throwsClause.hasNext()) {
                                                    adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                                }
                                                stream_throwsClause.reset();
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:455:149: ( block )?
                                                if (stream_block.hasNext()) {
                                                    adaptor.addChild(root_1, stream_block.nextTree());

                                                }
                                                stream_block.reset();

                                                adaptor.addChild(root_0, root_1);
                                            }

                                        }

                                        retval.tree = root_0;
                                    }
                                }
                                break;
                                case 2:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:456:17: VOID IDENT
                                    // formalParameterList ( throwsClause )? ( block | SEMI )
                                {
                                    VOID92 = (Token)match(input, VOID, FOLLOW_VOID_in_classScopeDeclarations5838);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_VOID.add(VOID92);

                                    IDENT93 = (Token)match(input, IDENT, FOLLOW_IDENT_in_classScopeDeclarations5840);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_IDENT.add(IDENT93);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5842);
                                    formalParameterList94 = formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_formalParameterList.add(formalParameterList94.getTree());
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:456:48: ( throwsClause )?
                                    int alt31 = 2;
                                    int LA31_0 = input.LA(1);

                                    if ((LA31_0 == THROWS)) {
                                        alt31 = 1;
                                    }
                                    switch (alt31) {
                                        case 1:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: throwsClause
                                        {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5844);
                                            throwsClause95 = throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_throwsClause.add(throwsClause95.getTree());

                                        }
                                        break;

                                    }

                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:456:62: ( block | SEMI )
                                    int alt32 = 2;
                                    int LA32_0 = input.LA(1);

                                    if ((LA32_0 == LCURLY)) {
                                        alt32 = 1;
                                    } else if ((LA32_0 == SEMI)) {
                                        alt32 = 2;
                                    } else {
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        NoViableAltException nvae =
                                                new NoViableAltException("", 32, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt32) {
                                        case 1:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:456:63: block
                                        {
                                            pushFollow(FOLLOW_block_in_classScopeDeclarations5848);
                                            block96 = block();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_block.add(block96.getTree());

                                        }
                                        break;
                                        case 2:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:456:71: SEMI
                                        {
                                            SEMI97 = (Token)match(input, SEMI, FOLLOW_SEMI_in_classScopeDeclarations5852);
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_SEMI.add(SEMI97);


                                        }
                                        break;

                                    }


                                    // AST REWRITE
                                    // elements: throwsClause, formalParameterList, genericTypeParameterList, modifierList, block, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if (state.backtracking == 0) {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval =
                                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                        root_0 = (CommonTree)adaptor.nil();
                                        // 457:17: -> ^( VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT
                                        // formalParameterList ( throwsClause )? ( block )? )
                                        {
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:457:21: ^(
                                            // VOID_METHOD_DECL modifierList ( genericTypeParameterList )? IDENT formalParameterList (
                                            // throwsClause )? ( block )? )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                                root_1 = (CommonTree)adaptor
                                                        .becomeRoot((CommonTree)adaptor.create(VOID_METHOD_DECL, "VOID_METHOD_DECL"),
                                                                    root_1);

                                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:457:53: (
                                                // genericTypeParameterList )?
                                                if (stream_genericTypeParameterList.hasNext()) {
                                                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                                }
                                                stream_genericTypeParameterList.reset();
                                                adaptor.addChild(root_1, stream_IDENT.nextNode());
                                                adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:457:105: (
                                                // throwsClause )?
                                                if (stream_throwsClause.hasNext()) {
                                                    adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                                }
                                                stream_throwsClause.reset();
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:457:119: ( block )?
                                                if (stream_block.hasNext()) {
                                                    adaptor.addChild(root_1, stream_block.nextTree());

                                                }
                                                stream_block.reset();

                                                adaptor.addChild(root_0, root_1);
                                            }

                                        }

                                        retval.tree = root_0;
                                    }
                                }
                                break;
                                case 3:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:458:17: ident= IDENT
                                    // formalParameterList ( throwsClause )? block
                                {
                                    ident = (Token)match(input, IDENT, FOLLOW_IDENT_in_classScopeDeclarations5911);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_IDENT.add(ident);

                                    pushFollow(FOLLOW_formalParameterList_in_classScopeDeclarations5913);
                                    formalParameterList98 = formalParameterList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_formalParameterList.add(formalParameterList98.getTree());
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:458:49: ( throwsClause )?
                                    int alt33 = 2;
                                    int LA33_0 = input.LA(1);

                                    if ((LA33_0 == THROWS)) {
                                        alt33 = 1;
                                    }
                                    switch (alt33) {
                                        case 1:
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: throwsClause
                                        {
                                            pushFollow(FOLLOW_throwsClause_in_classScopeDeclarations5915);
                                            throwsClause99 = throwsClause();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if (state.backtracking == 0) stream_throwsClause.add(throwsClause99.getTree());

                                        }
                                        break;

                                    }

                                    pushFollow(FOLLOW_block_in_classScopeDeclarations5918);
                                    block100 = block();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_block.add(block100.getTree());


                                    // AST REWRITE
                                    // elements: block, throwsClause, modifierList, genericTypeParameterList, formalParameterList
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if (state.backtracking == 0) {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval =
                                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                        root_0 = (CommonTree)adaptor.nil();
                                        // 459:17: -> ^( CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList (
                                        // genericTypeParameterList )? formalParameterList ( throwsClause )? block )
                                        {
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:459:21: ^(
                                            // CONSTRUCTOR_DECL[$ident, \"CONSTRUCTOR_DECL\"] modifierList ( genericTypeParameterList )?
                                            // formalParameterList ( throwsClause )? block )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                                root_1 = (CommonTree)adaptor
                                                        .becomeRoot((CommonTree)adaptor.create(CONSTRUCTOR_DECL, ident, "CONSTRUCTOR_DECL"),
                                                                    root_1);

                                                adaptor.addChild(root_1, stream_modifierList.nextTree());
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:459:81: (
                                                // genericTypeParameterList )?
                                                if (stream_genericTypeParameterList.hasNext()) {
                                                    adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                                                }
                                                stream_genericTypeParameterList.reset();
                                                adaptor.addChild(root_1, stream_formalParameterList.nextTree());
                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:459:127: (
                                                // throwsClause )?
                                                if (stream_throwsClause.hasNext()) {
                                                    adaptor.addChild(root_1, stream_throwsClause.nextTree());

                                                }
                                                stream_throwsClause.reset();
                                                adaptor.addChild(root_1, stream_block.nextTree());

                                                adaptor.addChild(root_0, root_1);
                                            }

                                        }

                                        retval.tree = root_0;
                                    }
                                }
                                break;

                            }


                        }
                        break;
                        case 2:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:461:13: type classFieldDeclaratorList SEMI
                        {
                            pushFollow(FOLLOW_type_in_classScopeDeclarations5982);
                            type101 = type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_type.add(type101.getTree());
                            pushFollow(FOLLOW_classFieldDeclaratorList_in_classScopeDeclarations5984);
                            classFieldDeclaratorList102 = classFieldDeclaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_classFieldDeclaratorList.add(classFieldDeclaratorList102.getTree());
                            SEMI103 = (Token)match(input, SEMI, FOLLOW_SEMI_in_classScopeDeclarations5986);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_SEMI.add(SEMI103);


                            // AST REWRITE
                            // elements: classFieldDeclaratorList, type, modifierList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 462:13: -> ^( VAR_DECLARATION modifierList type classFieldDeclaratorList )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:462:17: ^( VAR_DECLARATION
                                    // modifierList type classFieldDeclaratorList )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor
                                                .becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                                        adaptor.addChild(root_1, stream_modifierList.nextTree());
                                        adaptor.addChild(root_1, stream_type.nextTree());
                                        adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;

                    }


                }
                break;
                case 4:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:464:9: typeDeclaration
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_typeDeclaration_in_classScopeDeclarations6031);
                    typeDeclaration104 = typeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, typeDeclaration104.getTree());

                }
                break;
                case 5:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:465:9: SEMI
                {
                    root_0 = (CommonTree)adaptor.nil();

                    SEMI105 = (Token)match(input, SEMI, FOLLOW_SEMI_in_classScopeDeclarations6041);
                    if (state.failed) return retval;

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 25, classScopeDeclarations_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "classScopeDeclarations"

