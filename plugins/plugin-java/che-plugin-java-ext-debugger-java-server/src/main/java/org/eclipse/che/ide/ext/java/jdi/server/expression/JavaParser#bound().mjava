    // $ANTLR start "bound"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:398:1: bound : EXTENDS type ( AND type )* -> ^(
    // EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS43 = null;
        Token AND45 = null;
        JavaParser.type_return type44 = null;

        JavaParser.type_return type46 = null;


        CommonTree EXTENDS43_tree = null;
        CommonTree AND45_tree = null;
        RewriteRuleTokenStream stream_AND = new RewriteRuleTokenStream(adaptor, "token AND");
        RewriteRuleTokenStream stream_EXTENDS = new RewriteRuleTokenStream(adaptor, "token EXTENDS");
        RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 14)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:399:5: ( EXTENDS type ( AND type )* -> ^(
            // EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:399:9: EXTENDS type ( AND type )*
            {
                EXTENDS43 = (Token)match(input, EXTENDS, FOLLOW_EXTENDS_in_bound5215);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_EXTENDS.add(EXTENDS43);

                pushFollow(FOLLOW_type_in_bound5217);
                type44 = type();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_type.add(type44.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:399:22: ( AND type )*
                loop14:
                do {
                    int alt14 = 2;
                    int LA14_0 = input.LA(1);

                    if ((LA14_0 == AND)) {
                        alt14 = 1;
                    }


                    switch (alt14) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:399:23: AND type
                        {
                            AND45 = (Token)match(input, AND, FOLLOW_AND_in_bound5220);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_AND.add(AND45);

                            pushFollow(FOLLOW_type_in_bound5222);
                            type46 = type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_type.add(type46.getTree());

                        }
                        break;

                        default:
                            break loop14;
                    }
                } while (true);


                // AST REWRITE
                // elements: type
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 400:9: -> ^( EXTENDS_BOUND_LIST[$EXTENDS, \"EXTENDS_BOUND_LIST\"] ( type )+ )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:400:13: ^( EXTENDS_BOUND_LIST[$EXTENDS,
                        // \"EXTENDS_BOUND_LIST\"] ( type )+ )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(EXTENDS_BOUND_LIST, EXTENDS43, "EXTENDS_BOUND_LIST"), root_1);

                            if (!(stream_type.hasNext())) {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_type.hasNext()) {
                                adaptor.addChild(root_1, stream_type.nextTree());

                            }
                            stream_type.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 14, bound_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "bound"

