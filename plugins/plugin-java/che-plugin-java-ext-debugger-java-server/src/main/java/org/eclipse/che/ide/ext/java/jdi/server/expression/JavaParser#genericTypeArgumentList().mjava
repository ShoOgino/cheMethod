    // $ANTLR start "genericTypeArgumentList"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:610:1: genericTypeArgumentList : LESS_THAN genericTypeArgument (
    // COMMA genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN,
    // \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) ;
    public final JavaParser.genericTypeArgumentList_return genericTypeArgumentList() throws RecognitionException {
        JavaParser.genericTypeArgumentList_return retval = new JavaParser.genericTypeArgumentList_return();
        retval.start = input.LT(1);
        int genericTypeArgumentList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LESS_THAN185 = null;
        Token COMMA187 = null;
        JavaParser.genericTypeArgument_return genericTypeArgument186 = null;

        JavaParser.genericTypeArgument_return genericTypeArgument188 = null;

        JavaParser.genericTypeListClosing_return genericTypeListClosing189 = null;


        CommonTree LESS_THAN185_tree = null;
        CommonTree COMMA187_tree = null;
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_LESS_THAN = new RewriteRuleTokenStream(adaptor, "token LESS_THAN");
        RewriteRuleSubtreeStream stream_genericTypeArgument = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeArgument");
        RewriteRuleSubtreeStream stream_genericTypeListClosing = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeListClosing");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 50)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:611:5: ( LESS_THAN genericTypeArgument ( COMMA
            // genericTypeArgument )* genericTypeListClosing -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN,
            // \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:611:9: LESS_THAN genericTypeArgument ( COMMA
            // genericTypeArgument )* genericTypeListClosing
            {
                LESS_THAN185 = (Token)match(input, LESS_THAN, FOLLOW_LESS_THAN_in_genericTypeArgumentList7356);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LESS_THAN.add(LESS_THAN185);

                pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7358);
                genericTypeArgument186 = genericTypeArgument();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_genericTypeArgument.add(genericTypeArgument186.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:611:39: ( COMMA genericTypeArgument )*
                loop65:
                do {
                    int alt65 = 2;
                    int LA65_0 = input.LA(1);

                    if ((LA65_0 == COMMA)) {
                        int LA65_2 = input.LA(2);

                        if ((synpred90_Java())) {
                            alt65 = 1;
                        }


                    }


                    switch (alt65) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:611:40: COMMA genericTypeArgument
                        {
                            COMMA187 = (Token)match(input, COMMA, FOLLOW_COMMA_in_genericTypeArgumentList7361);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_COMMA.add(COMMA187);

                            pushFollow(FOLLOW_genericTypeArgument_in_genericTypeArgumentList7363);
                            genericTypeArgument188 = genericTypeArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_genericTypeArgument.add(genericTypeArgument188.getTree());

                        }
                        break;

                        default:
                            break loop65;
                    }
                } while (true);

                pushFollow(FOLLOW_genericTypeListClosing_in_genericTypeArgumentList7367);
                genericTypeListClosing189 = genericTypeListClosing();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_genericTypeListClosing.add(genericTypeListClosing189.getTree());


                // AST REWRITE
                // elements: genericTypeArgument
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 612:9: -> ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN, \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:612:13: ^( GENERIC_TYPE_ARG_LIST[$LESS_THAN,
                        // \"GENERIC_TYPE_ARG_LIST\"] ( genericTypeArgument )+ )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(GENERIC_TYPE_ARG_LIST, LESS_THAN185, "GENERIC_TYPE_ARG_LIST"),
                                                root_1);

                            if (!(stream_genericTypeArgument.hasNext())) {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_genericTypeArgument.hasNext()) {
                                adaptor.addChild(root_1, stream_genericTypeArgument.nextTree());

                            }
                            stream_genericTypeArgument.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 50, genericTypeArgumentList_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgumentList"

