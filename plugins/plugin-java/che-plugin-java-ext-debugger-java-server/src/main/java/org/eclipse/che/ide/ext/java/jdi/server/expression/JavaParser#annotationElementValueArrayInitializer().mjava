    // $ANTLR start "annotationElementValueArrayInitializer"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:708:1: annotationElementValueArrayInitializer : LCURLY (
    // annotationElementValue ( COMMA annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY,
    // \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) ;
    public final JavaParser.annotationElementValueArrayInitializer_return annotationElementValueArrayInitializer()
            throws RecognitionException {
        JavaParser.annotationElementValueArrayInitializer_return retval = new JavaParser.annotationElementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int annotationElementValueArrayInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LCURLY240 = null;
        Token COMMA242 = null;
        Token COMMA244 = null;
        Token RCURLY245 = null;
        JavaParser.annotationElementValue_return annotationElementValue241 = null;

        JavaParser.annotationElementValue_return annotationElementValue243 = null;


        CommonTree LCURLY240_tree = null;
        CommonTree COMMA242_tree = null;
        CommonTree COMMA244_tree = null;
        CommonTree RCURLY245_tree = null;
        RewriteRuleTokenStream stream_LCURLY = new RewriteRuleTokenStream(adaptor, "token LCURLY");
        RewriteRuleTokenStream stream_COMMA = new RewriteRuleTokenStream(adaptor, "token COMMA");
        RewriteRuleTokenStream stream_RCURLY = new RewriteRuleTokenStream(adaptor, "token RCURLY");
        RewriteRuleSubtreeStream stream_annotationElementValue = new RewriteRuleSubtreeStream(adaptor, "rule annotationElementValue");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 67)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:5: ( LCURLY ( annotationElementValue ( COMMA
            // annotationElementValue )* )? ( COMMA )? RCURLY -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY,
            // \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:9: LCURLY ( annotationElementValue ( COMMA
            // annotationElementValue )* )? ( COMMA )? RCURLY
            {
                LCURLY240 = (Token)match(input, LCURLY, FOLLOW_LCURLY_in_annotationElementValueArrayInitializer8299);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LCURLY.add(LCURLY240);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:16: ( annotationElementValue ( COMMA
                // annotationElementValue )* )?
                int alt81 = 2;
                int LA81_0 = input.LA(1);

                if ((LA81_0 == AT || LA81_0 == DEC || LA81_0 == INC || LA81_0 == LCURLY || LA81_0 == LESS_THAN || LA81_0 == LOGICAL_NOT ||
                     (LA81_0 >= LPAREN && LA81_0 <= MINUS) || LA81_0 == NOT || LA81_0 == PLUS || LA81_0 == BOOLEAN || LA81_0 == BYTE ||
                     LA81_0 == CHAR || LA81_0 == DOUBLE || LA81_0 == FALSE || LA81_0 == FLOAT || (LA81_0 >= INT && LA81_0 <= LONG) ||
                     (LA81_0 >= NEW && LA81_0 <= NULL) || LA81_0 == SHORT || LA81_0 == SUPER || LA81_0 == THIS || LA81_0 == TRUE ||
                     LA81_0 == VOID || (LA81_0 >= IDENT && LA81_0 <= STRING_LITERAL))) {
                    alt81 = 1;
                }
                switch (alt81) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:17: annotationElementValue ( COMMA
                        // annotationElementValue )*
                    {
                        pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8302);
                        annotationElementValue241 = annotationElementValue();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_annotationElementValue.add(annotationElementValue241.getTree());
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:40: ( COMMA annotationElementValue )*
                        loop80:
                        do {
                            int alt80 = 2;
                            int LA80_0 = input.LA(1);

                            if ((LA80_0 == COMMA)) {
                                int LA80_1 = input.LA(2);

                                if ((LA80_1 == AT || LA80_1 == DEC || LA80_1 == INC || LA80_1 == LCURLY || LA80_1 == LESS_THAN ||
                                     LA80_1 == LOGICAL_NOT || (LA80_1 >= LPAREN && LA80_1 <= MINUS) || LA80_1 == NOT || LA80_1 == PLUS ||
                                     LA80_1 == BOOLEAN || LA80_1 == BYTE || LA80_1 == CHAR || LA80_1 == DOUBLE || LA80_1 == FALSE ||
                                     LA80_1 == FLOAT || (LA80_1 >= INT && LA80_1 <= LONG) || (LA80_1 >= NEW && LA80_1 <= NULL) ||
                                     LA80_1 == SHORT || LA80_1 == SUPER || LA80_1 == THIS || LA80_1 == TRUE || LA80_1 == VOID ||
                                     (LA80_1 >= IDENT && LA80_1 <= STRING_LITERAL))) {
                                    alt80 = 1;
                                }


                            }


                            switch (alt80) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:41: COMMA annotationElementValue
                                {
                                    COMMA242 = (Token)match(input, COMMA, FOLLOW_COMMA_in_annotationElementValueArrayInitializer8305);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_COMMA.add(COMMA242);

                                    pushFollow(FOLLOW_annotationElementValue_in_annotationElementValueArrayInitializer8307);
                                    annotationElementValue243 = annotationElementValue();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_annotationElementValue.add(annotationElementValue243.getTree());

                                }
                                break;

                                default:
                                    break loop80;
                            }
                        } while (true);


                    }
                    break;

                }

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:74: ( COMMA )?
                int alt82 = 2;
                int LA82_0 = input.LA(1);

                if ((LA82_0 == COMMA)) {
                    alt82 = 1;
                }
                switch (alt82) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:709:75: COMMA
                    {
                        COMMA244 = (Token)match(input, COMMA, FOLLOW_COMMA_in_annotationElementValueArrayInitializer8314);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_COMMA.add(COMMA244);


                    }
                    break;

                }

                RCURLY245 = (Token)match(input, RCURLY, FOLLOW_RCURLY_in_annotationElementValueArrayInitializer8318);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RCURLY.add(RCURLY245);


                // AST REWRITE
                // elements: annotationElementValue
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 710:9: -> ^( ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue
                    // )* )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:710:13: ^(
                        // ANNOTATION_INIT_ARRAY_ELEMENT[$LCURLY, \"ANNOTATION_ELEM_VALUE_ARRAY_INIT\"] ( annotationElementValue )* )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor
                                    .create(ANNOTATION_INIT_ARRAY_ELEMENT, LCURLY240, "ANNOTATION_ELEM_VALUE_ARRAY_INIT"), root_1);

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:710:90: ( annotationElementValue )*
                            while (stream_annotationElementValue.hasNext()) {
                                adaptor.addChild(root_1, stream_annotationElementValue.nextTree());

                            }
                            stream_annotationElementValue.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 67, annotationElementValueArrayInitializer_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueArrayInitializer"

