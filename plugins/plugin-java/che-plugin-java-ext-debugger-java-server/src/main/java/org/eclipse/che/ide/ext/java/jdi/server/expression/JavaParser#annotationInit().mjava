    // $ANTLR start "annotationInit"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:681:1: annotationInit : LPAREN annotationInitializers RPAREN -> ^(
    // ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) ;
    public final JavaParser.annotationInit_return annotationInit() throws RecognitionException {
        JavaParser.annotationInit_return retval = new JavaParser.annotationInit_return();
        retval.start = input.LT(1);
        int annotationInit_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LPAREN226 = null;
        Token RPAREN228 = null;
        JavaParser.annotationInitializers_return annotationInitializers227 = null;


        CommonTree LPAREN226_tree = null;
        CommonTree RPAREN228_tree = null;
        RewriteRuleTokenStream stream_RPAREN = new RewriteRuleTokenStream(adaptor, "token RPAREN");
        RewriteRuleTokenStream stream_LPAREN = new RewriteRuleTokenStream(adaptor, "token LPAREN");
        RewriteRuleSubtreeStream stream_annotationInitializers = new RewriteRuleSubtreeStream(adaptor, "rule annotationInitializers");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 62)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:682:5: ( LPAREN annotationInitializers RPAREN -> ^(
            // ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:682:9: LPAREN annotationInitializers RPAREN
            {
                LPAREN226 = (Token)match(input, LPAREN, FOLLOW_LPAREN_in_annotationInit8070);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LPAREN.add(LPAREN226);

                pushFollow(FOLLOW_annotationInitializers_in_annotationInit8072);
                annotationInitializers227 = annotationInitializers();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_annotationInitializers.add(annotationInitializers227.getTree());
                RPAREN228 = (Token)match(input, RPAREN, FOLLOW_RPAREN_in_annotationInit8074);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RPAREN.add(RPAREN228);


                // AST REWRITE
                // elements: annotationInitializers
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 683:9: -> ^( ANNOTATION_INIT_BLOCK[$LPAREN, \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:683:13: ^( ANNOTATION_INIT_BLOCK[$LPAREN,
                        // \"ANNOTATION_INIT_BLOCK\"] annotationInitializers )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(ANNOTATION_INIT_BLOCK, LPAREN226, "ANNOTATION_INIT_BLOCK"),
                                                root_1);

                            adaptor.addChild(root_1, stream_annotationInitializers.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 62, annotationInit_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "annotationInit"

