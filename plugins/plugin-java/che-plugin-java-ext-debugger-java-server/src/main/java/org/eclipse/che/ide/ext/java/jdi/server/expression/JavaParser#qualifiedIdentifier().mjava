    // $ANTLR start "qualifiedIdentifier"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:663:1: qualifiedIdentifier : ( IDENT -> IDENT ) ( DOT ident= IDENT
    // -> ^( DOT $qualifiedIdentifier $ident) )* ;
    public final JavaParser.qualifiedIdentifier_return qualifiedIdentifier() throws RecognitionException {
        JavaParser.qualifiedIdentifier_return retval = new JavaParser.qualifiedIdentifier_return();
        retval.start = input.LT(1);
        int qualifiedIdentifier_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ident = null;
        Token IDENT220 = null;
        Token DOT221 = null;

        CommonTree ident_tree = null;
        CommonTree IDENT220_tree = null;
        CommonTree DOT221_tree = null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 59)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:664:5: ( ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT
            // $qualifiedIdentifier $ident) )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:664:9: ( IDENT -> IDENT ) ( DOT ident= IDENT -> ^( DOT
            // $qualifiedIdentifier $ident) )*
            {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:664:9: ( IDENT -> IDENT )
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:664:13: IDENT
                {
                    IDENT220 = (Token)match(input, IDENT, FOLLOW_IDENT_in_qualifiedIdentifier7903);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_IDENT.add(IDENT220);


                    // AST REWRITE
                    // elements: IDENT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 664:33: -> IDENT
                        {
                            adaptor.addChild(root_0, stream_IDENT.nextNode());

                        }

                        retval.tree = root_0;
                    }
                }

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:666:9: ( DOT ident= IDENT -> ^( DOT
                // $qualifiedIdentifier $ident) )*
                loop74:
                do {
                    int alt74 = 2;
                    int LA74_0 = input.LA(1);

                    if ((LA74_0 == DOT)) {
                        int LA74_2 = input.LA(2);

                        if ((LA74_2 == IDENT)) {
                            int LA74_3 = input.LA(3);

                            if ((synpred101_Java())) {
                                alt74 = 1;
                            }


                        }


                    }


                    switch (alt74) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:666:13: DOT ident= IDENT
                        {
                            DOT221 = (Token)match(input, DOT, FOLLOW_DOT_in_qualifiedIdentifier7946);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_DOT.add(DOT221);

                            ident = (Token)match(input, IDENT, FOLLOW_IDENT_in_qualifiedIdentifier7950);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_IDENT.add(ident);


                            // AST REWRITE
                            // elements: qualifiedIdentifier, DOT, ident
                            // token labels: ident
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleTokenStream stream_ident = new RewriteRuleTokenStream(adaptor, "token ident", ident);
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 666:33: -> ^( DOT $qualifiedIdentifier $ident)
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:666:37: ^( DOT
                                    // $qualifiedIdentifier $ident)
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                        adaptor.addChild(root_1, stream_retval.nextTree());
                                        adaptor.addChild(root_1, stream_ident.nextNode());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;

                        default:
                            break loop74;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 59, qualifiedIdentifier_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "qualifiedIdentifier"

