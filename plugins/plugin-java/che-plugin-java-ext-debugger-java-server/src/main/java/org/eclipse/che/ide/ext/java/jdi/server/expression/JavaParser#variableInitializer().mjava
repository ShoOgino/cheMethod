    // $ANTLR start "variableInitializer"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:507:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer138 = null;

        JavaParser.expression_return expression139 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 32)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:508:5: ( arrayInitializer | expression )
            int alt48 = 2;
            int LA48_0 = input.LA(1);

            if ((LA48_0 == LCURLY)) {
                alt48 = 1;
            } else if ((LA48_0 == DEC || LA48_0 == INC || LA48_0 == LESS_THAN || LA48_0 == LOGICAL_NOT ||
                        (LA48_0 >= LPAREN && LA48_0 <= MINUS) || LA48_0 == NOT || LA48_0 == PLUS || LA48_0 == BOOLEAN || LA48_0 == BYTE ||
                        LA48_0 == CHAR || LA48_0 == DOUBLE || LA48_0 == FALSE || LA48_0 == FLOAT || (LA48_0 >= INT && LA48_0 <= LONG) ||
                        (LA48_0 >= NEW && LA48_0 <= NULL) || LA48_0 == SHORT || LA48_0 == SUPER || LA48_0 == THIS || LA48_0 == TRUE ||
                        LA48_0 == VOID || (LA48_0 >= IDENT && LA48_0 <= STRING_LITERAL))) {
                alt48 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:508:9: arrayInitializer
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer6534);
                    arrayInitializer138 = arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, arrayInitializer138.getTree());

                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:509:9: expression
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer6544);
                    expression139 = expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, expression139.getTree());

                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 32, variableInitializer_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

