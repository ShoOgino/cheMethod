    // $ANTLR start "logicalOrExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:870:1: logicalOrExpression : logicalAndExpression ( LOGICAL_OR
    // logicalAndExpression )* ;
    public final JavaParser.logicalOrExpression_return logicalOrExpression() throws RecognitionException {
        JavaParser.logicalOrExpression_return retval = new JavaParser.logicalOrExpression_return();
        retval.start = input.LT(1);
        int logicalOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LOGICAL_OR388 = null;
        JavaParser.logicalAndExpression_return logicalAndExpression387 = null;

        JavaParser.logicalAndExpression_return logicalAndExpression389 = null;


        CommonTree LOGICAL_OR388_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 91)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:871:5: ( logicalAndExpression ( LOGICAL_OR
            // logicalAndExpression )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:871:9: logicalAndExpression ( LOGICAL_OR
            // logicalAndExpression )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10835);
                logicalAndExpression387 = logicalAndExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, logicalAndExpression387.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:871:30: ( LOGICAL_OR logicalAndExpression )*
                loop110:
                do {
                    int alt110 = 2;
                    int LA110_0 = input.LA(1);

                    if ((LA110_0 == LOGICAL_OR)) {
                        alt110 = 1;
                    }


                    switch (alt110) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:871:31: LOGICAL_OR logicalAndExpression
                        {
                            LOGICAL_OR388 = (Token)match(input, LOGICAL_OR, FOLLOW_LOGICAL_OR_in_logicalOrExpression10838);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                LOGICAL_OR388_tree = (CommonTree)adaptor.create(LOGICAL_OR388);
                                root_0 = (CommonTree)adaptor.becomeRoot(LOGICAL_OR388_tree, root_0);
                            }
                            pushFollow(FOLLOW_logicalAndExpression_in_logicalOrExpression10841);
                            logicalAndExpression389 = logicalAndExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, logicalAndExpression389.getTree());

                        }
                        break;

                        default:
                            break loop110;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 91, logicalOrExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "logicalOrExpression"

