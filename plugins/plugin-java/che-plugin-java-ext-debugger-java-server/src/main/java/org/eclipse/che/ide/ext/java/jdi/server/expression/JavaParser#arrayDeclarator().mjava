    // $ANTLR start "arrayDeclarator"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:512:1: arrayDeclarator : LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) ;
    public final JavaParser.arrayDeclarator_return arrayDeclarator() throws RecognitionException {
        JavaParser.arrayDeclarator_return retval = new JavaParser.arrayDeclarator_return();
        retval.start = input.LT(1);
        int arrayDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token LBRACK140 = null;
        Token RBRACK141 = null;

        CommonTree LBRACK140_tree = null;
        CommonTree RBRACK141_tree = null;
        RewriteRuleTokenStream stream_RBRACK = new RewriteRuleTokenStream(adaptor, "token RBRACK");
        RewriteRuleTokenStream stream_LBRACK = new RewriteRuleTokenStream(adaptor, "token LBRACK");

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 33)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:513:5: ( LBRACK RBRACK -> ^( ARRAY_DECLARATOR ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:513:9: LBRACK RBRACK
            {
                LBRACK140 = (Token)match(input, LBRACK, FOLLOW_LBRACK_in_arrayDeclarator6563);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_LBRACK.add(LBRACK140);

                RBRACK141 = (Token)match(input, RBRACK, FOLLOW_RBRACK_in_arrayDeclarator6565);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_RBRACK.add(RBRACK141);


                // AST REWRITE
                // elements: 
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 514:9: -> ^( ARRAY_DECLARATOR )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:514:13: ^( ARRAY_DECLARATOR )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR, "ARRAY_DECLARATOR"), root_1);

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 33, arrayDeclarator_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclarator"

