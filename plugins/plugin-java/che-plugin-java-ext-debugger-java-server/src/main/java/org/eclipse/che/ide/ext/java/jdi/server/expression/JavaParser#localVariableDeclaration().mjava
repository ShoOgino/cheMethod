    // $ANTLR start "localVariableDeclaration"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:750:1: localVariableDeclaration : localModifierList type
    // classFieldDeclaratorList -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.localModifierList_return localModifierList272 = null;

        JavaParser.type_return type273 = null;

        JavaParser.classFieldDeclaratorList_return classFieldDeclaratorList274 = null;


        RewriteRuleSubtreeStream stream_localModifierList = new RewriteRuleSubtreeStream(adaptor, "rule localModifierList");
        RewriteRuleSubtreeStream stream_type = new RewriteRuleSubtreeStream(adaptor, "rule type");
        RewriteRuleSubtreeStream stream_classFieldDeclaratorList = new RewriteRuleSubtreeStream(adaptor, "rule classFieldDeclaratorList");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 74)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:751:5: ( localModifierList type classFieldDeclaratorList
            // -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:751:9: localModifierList type classFieldDeclaratorList
            {
                pushFollow(FOLLOW_localModifierList_in_localVariableDeclaration8707);
                localModifierList272 = localModifierList();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_localModifierList.add(localModifierList272.getTree());
                pushFollow(FOLLOW_type_in_localVariableDeclaration8709);
                type273 = type();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_type.add(type273.getTree());
                pushFollow(FOLLOW_classFieldDeclaratorList_in_localVariableDeclaration8711);
                classFieldDeclaratorList274 = classFieldDeclaratorList();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_classFieldDeclaratorList.add(classFieldDeclaratorList274.getTree());


                // AST REWRITE
                // elements: type, classFieldDeclaratorList, localModifierList
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 752:9: -> ^( VAR_DECLARATION localModifierList type classFieldDeclaratorList )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:752:13: ^( VAR_DECLARATION localModifierList
                        // type classFieldDeclaratorList )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATION, "VAR_DECLARATION"), root_1);

                            adaptor.addChild(root_1, stream_localModifierList.nextTree());
                            adaptor.addChild(root_1, stream_type.nextTree());
                            adaptor.addChild(root_1, stream_classFieldDeclaratorList.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 74, localVariableDeclaration_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

