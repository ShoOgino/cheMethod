    // $ANTLR start "interfaceExtendsClause"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:368:1: interfaceExtendsClause : EXTENDS typeList -> ^(
    // EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList ) ;
    public final JavaParser.interfaceExtendsClause_return interfaceExtendsClause() throws RecognitionException {
        JavaParser.interfaceExtendsClause_return retval = new JavaParser.interfaceExtendsClause_return();
        retval.start = input.LT(1);
        int interfaceExtendsClause_StartIndex = input.index();
        CommonTree root_0 = null;

        Token EXTENDS29 = null;
        JavaParser.typeList_return typeList30 = null;


        CommonTree EXTENDS29_tree = null;
        RewriteRuleTokenStream stream_EXTENDS = new RewriteRuleTokenStream(adaptor, "token EXTENDS");
        RewriteRuleSubtreeStream stream_typeList = new RewriteRuleSubtreeStream(adaptor, "rule typeList");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 9)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:369:5: ( EXTENDS typeList -> ^( EXTENDS_CLAUSE[$EXTENDS,
            // \"EXTENDS_CLAUSE\"] typeList ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:369:9: EXTENDS typeList
            {
                EXTENDS29 = (Token)match(input, EXTENDS, FOLLOW_EXTENDS_in_interfaceExtendsClause4900);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_EXTENDS.add(EXTENDS29);

                pushFollow(FOLLOW_typeList_in_interfaceExtendsClause4902);
                typeList30 = typeList();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_typeList.add(typeList30.getTree());


                // AST REWRITE
                // elements: typeList
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 370:9: -> ^( EXTENDS_CLAUSE[$EXTENDS, \"EXTENDS_CLAUSE\"] typeList )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:370:13: ^( EXTENDS_CLAUSE[$EXTENDS,
                        // \"EXTENDS_CLAUSE\"] typeList )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(EXTENDS_CLAUSE, EXTENDS29, "EXTENDS_CLAUSE"), root_1);

                            adaptor.addChild(root_1, stream_typeList.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 9, interfaceExtendsClause_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "interfaceExtendsClause"

