    // $ANTLR start "additiveExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:924:1: additiveExpression : multiplicativeExpression ( ( PLUS |
    // MINUS ) multiplicativeExpression )* ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token PLUS421 = null;
        Token MINUS422 = null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression420 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression423 = null;


        CommonTree PLUS421_tree = null;
        CommonTree MINUS422_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 100)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:925:5: ( multiplicativeExpression ( ( PLUS | MINUS )
            // multiplicativeExpression )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:925:9: multiplicativeExpression ( ( PLUS | MINUS )
            // multiplicativeExpression )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11349);
                multiplicativeExpression420 = multiplicativeExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, multiplicativeExpression420.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:926:9: ( ( PLUS | MINUS ) multiplicativeExpression )*
                loop123:
                do {
                    int alt123 = 2;
                    int LA123_0 = input.LA(1);

                    if ((LA123_0 == MINUS || LA123_0 == PLUS)) {
                        alt123 = 1;
                    }


                    switch (alt123) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:926:13: ( PLUS | MINUS )
                            // multiplicativeExpression
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:926:13: ( PLUS | MINUS )
                            int alt122 = 2;
                            int LA122_0 = input.LA(1);

                            if ((LA122_0 == PLUS)) {
                                alt122 = 1;
                            } else if ((LA122_0 == MINUS)) {
                                alt122 = 2;
                            } else {
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 122, 0, input);

                                throw nvae;
                            }
                            switch (alt122) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:926:17: PLUS
                                {
                                    PLUS421 = (Token)match(input, PLUS, FOLLOW_PLUS_in_additiveExpression11367);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        PLUS421_tree = (CommonTree)adaptor.create(PLUS421);
                                        root_0 = (CommonTree)adaptor.becomeRoot(PLUS421_tree, root_0);
                                    }

                                }
                                break;
                                case 2:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:927:17: MINUS
                                {
                                    MINUS422 = (Token)match(input, MINUS, FOLLOW_MINUS_in_additiveExpression11386);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) {
                                        MINUS422_tree = (CommonTree)adaptor.create(MINUS422);
                                        root_0 = (CommonTree)adaptor.becomeRoot(MINUS422_tree, root_0);
                                    }

                                }
                                break;

                            }

                            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression11415);
                            multiplicativeExpression423 = multiplicativeExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, multiplicativeExpression423.getTree());

                        }
                        break;

                        default:
                            break loop123;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 100, additiveExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

