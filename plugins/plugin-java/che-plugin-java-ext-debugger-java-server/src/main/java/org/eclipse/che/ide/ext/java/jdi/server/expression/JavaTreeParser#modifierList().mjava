    // $ANTLR start "modifierList"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:283:1: modifierList : ^( MODIFIER_LIST ( modifier )* ) ;
    public final void modifierList() throws RecognitionException {
        int modifierList_StartIndex = input.index();
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 24)) {
                return;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:284:3: ( ^( MODIFIER_LIST ( modifier )* ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:285:3: ^( MODIFIER_LIST ( modifier )* )
            {
                match(input, MODIFIER_LIST, FOLLOW_MODIFIER_LIST_in_modifierList820);
                if (state.failed) return;

                if (input.LA(1) == Token.DOWN) {
                    match(input, Token.DOWN, null);
                    if (state.failed) return;
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:285:19: ( modifier )*
                    loop47:
                    do {
                        int alt47 = 2;
                        int LA47_0 = input.LA(1);

                        if ((LA47_0 == AT || LA47_0 == ABSTRACT || LA47_0 == FINAL || LA47_0 == NATIVE ||
                             (LA47_0 >= PRIVATE && LA47_0 <= PUBLIC) || (LA47_0 >= STATIC && LA47_0 <= STRICTFP) ||
                             LA47_0 == SYNCHRONIZED || LA47_0 == TRANSIENT || LA47_0 == VOLATILE)) {
                            alt47 = 1;
                        }


                        switch (alt47) {
                            case 1:
                                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: modifier
                            {
                                pushFollow(FOLLOW_modifier_in_modifierList822);
                                modifier();

                                state._fsp--;
                                if (state.failed) return;

                            }
                            break;

                            default:
                                break loop47;
                        }
                    } while (true);


                    match(input, Token.UP, null);
                    if (state.failed) return;
                }

            }

        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
        } finally {
            if (state.backtracking > 0) {
                memoize(input, 24, modifierList_StartIndex);
            }
        }
        return;
    }
    // $ANTLR end "modifierList"

