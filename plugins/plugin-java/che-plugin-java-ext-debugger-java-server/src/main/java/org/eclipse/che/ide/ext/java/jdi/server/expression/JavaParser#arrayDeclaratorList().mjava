    // $ANTLR start "arrayDeclaratorList"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:517:1: arrayDeclaratorList : ( arrayDeclarator )+ -> ^(
    // ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ ) ;
    public final JavaParser.arrayDeclaratorList_return arrayDeclaratorList() throws RecognitionException {
        JavaParser.arrayDeclaratorList_return retval = new JavaParser.arrayDeclaratorList_return();
        retval.start = input.LT(1);
        int arrayDeclaratorList_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.arrayDeclarator_return arrayDeclarator142 = null;


        RewriteRuleSubtreeStream stream_arrayDeclarator = new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclarator");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 34)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:518:5: ( ( arrayDeclarator )+ -> ^( ARRAY_DECLARATOR_LIST
            // ( arrayDeclarator )+ ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:518:9: ( arrayDeclarator )+
            {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:518:9: ( arrayDeclarator )+
                int cnt49 = 0;
                loop49:
                do {
                    int alt49 = 2;
                    int LA49_0 = input.LA(1);

                    if ((LA49_0 == LBRACK)) {
                        int LA49_2 = input.LA(2);

                        if ((synpred58_Java())) {
                            alt49 = 1;
                        }


                    }


                    switch (alt49) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: arrayDeclarator
                        {
                            pushFollow(FOLLOW_arrayDeclarator_in_arrayDeclaratorList6599);
                            arrayDeclarator142 = arrayDeclarator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_arrayDeclarator.add(arrayDeclarator142.getTree());

                        }
                        break;

                        default:
                            if (cnt49 >= 1) break loop49;
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            EarlyExitException eee =
                                    new EarlyExitException(49, input);
                            throw eee;
                    }
                    cnt49++;
                } while (true);


                // AST REWRITE
                // elements: arrayDeclarator
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 519:9: -> ^( ARRAY_DECLARATOR_LIST ( arrayDeclarator )+ )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:519:13: ^( ARRAY_DECLARATOR_LIST (
                        // arrayDeclarator )+ )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor
                                    .becomeRoot((CommonTree)adaptor.create(ARRAY_DECLARATOR_LIST, "ARRAY_DECLARATOR_LIST"), root_1);

                            if (!(stream_arrayDeclarator.hasNext())) {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_arrayDeclarator.hasNext()) {
                                adaptor.addChild(root_1, stream_arrayDeclarator.nextTree());

                            }
                            stream_arrayDeclarator.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 34, arrayDeclaratorList_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "arrayDeclaratorList"

