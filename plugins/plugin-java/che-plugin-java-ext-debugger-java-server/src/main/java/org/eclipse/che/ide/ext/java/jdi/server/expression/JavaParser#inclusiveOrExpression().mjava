    // $ANTLR start "inclusiveOrExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:878:1: inclusiveOrExpression : exclusiveOrExpression ( OR
    // exclusiveOrExpression )* ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token OR394 = null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression393 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression395 = null;


        CommonTree OR394_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 93)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:879:5: ( exclusiveOrExpression ( OR exclusiveOrExpression
            // )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:879:9: exclusiveOrExpression ( OR exclusiveOrExpression )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10889);
                exclusiveOrExpression393 = exclusiveOrExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, exclusiveOrExpression393.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:879:31: ( OR exclusiveOrExpression )*
                loop112:
                do {
                    int alt112 = 2;
                    int LA112_0 = input.LA(1);

                    if ((LA112_0 == OR)) {
                        alt112 = 1;
                    }


                    switch (alt112) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:879:32: OR exclusiveOrExpression
                        {
                            OR394 = (Token)match(input, OR, FOLLOW_OR_in_inclusiveOrExpression10892);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                OR394_tree = (CommonTree)adaptor.create(OR394);
                                root_0 = (CommonTree)adaptor.becomeRoot(OR394_tree, root_0);
                            }
                            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression10895);
                            exclusiveOrExpression395 = exclusiveOrExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, exclusiveOrExpression395.getTree());

                        }
                        break;

                        default:
                            break loop112;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 93, inclusiveOrExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

