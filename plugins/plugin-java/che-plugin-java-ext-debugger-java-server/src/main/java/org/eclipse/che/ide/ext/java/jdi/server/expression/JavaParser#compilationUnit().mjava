    // $ANTLR start "compilationUnit"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:329:1: compilationUnit : annotationList ( packageDeclaration )? (
    // importDeclaration )* ( typeDecls )* ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.annotationList_return annotationList2 = null;

        JavaParser.packageDeclaration_return packageDeclaration3 = null;

        JavaParser.importDeclaration_return importDeclaration4 = null;

        JavaParser.typeDecls_return typeDecls5 = null;


        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 2)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:330:5: ( annotationList ( packageDeclaration )? (
            // importDeclaration )* ( typeDecls )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:330:9: annotationList ( packageDeclaration )? (
            // importDeclaration )* ( typeDecls )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_annotationList_in_compilationUnit4542);
                annotationList2 = annotationList();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, annotationList2.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:331:9: ( packageDeclaration )?
                int alt1 = 2;
                int LA1_0 = input.LA(1);

                if ((LA1_0 == PACKAGE)) {
                    alt1 = 1;
                }
                switch (alt1) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: packageDeclaration
                    {
                        pushFollow(FOLLOW_packageDeclaration_in_compilationUnit4553);
                        packageDeclaration3 = packageDeclaration();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, packageDeclaration3.getTree());

                    }
                    break;

                }

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:332:9: ( importDeclaration )*
                loop2:
                do {
                    int alt2 = 2;
                    int LA2_0 = input.LA(1);

                    if ((LA2_0 == IMPORT)) {
                        alt2 = 1;
                    }


                    switch (alt2) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: importDeclaration
                        {
                            pushFollow(FOLLOW_importDeclaration_in_compilationUnit4565);
                            importDeclaration4 = importDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, importDeclaration4.getTree());

                        }
                        break;

                        default:
                            break loop2;
                    }
                } while (true);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:333:9: ( typeDecls )*
                loop3:
                do {
                    int alt3 = 2;
                    int LA3_0 = input.LA(1);

                    if ((LA3_0 == AT || LA3_0 == LESS_THAN || LA3_0 == SEMI || LA3_0 == ABSTRACT || LA3_0 == BOOLEAN || LA3_0 == BYTE ||
                         (LA3_0 >= CHAR && LA3_0 <= CLASS) || LA3_0 == DOUBLE || LA3_0 == ENUM || LA3_0 == FINAL || LA3_0 == FLOAT ||
                         LA3_0 == INTERFACE || (LA3_0 >= INT && LA3_0 <= NATIVE) || (LA3_0 >= PRIVATE && LA3_0 <= PUBLIC) ||
                         (LA3_0 >= SHORT && LA3_0 <= STRICTFP) || LA3_0 == SYNCHRONIZED || LA3_0 == TRANSIENT ||
                         (LA3_0 >= VOID && LA3_0 <= VOLATILE) || LA3_0 == IDENT)) {
                        alt3 = 1;
                    }


                    switch (alt3) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: typeDecls
                        {
                            pushFollow(FOLLOW_typeDecls_in_compilationUnit4577);
                            typeDecls5 = typeDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, typeDecls5.getTree());

                        }
                        break;

                        default:
                            break loop3;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 2, compilationUnit_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

