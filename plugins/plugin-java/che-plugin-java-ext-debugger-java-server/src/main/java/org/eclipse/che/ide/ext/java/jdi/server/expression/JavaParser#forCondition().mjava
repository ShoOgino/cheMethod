    // $ANTLR start "forCondition"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:822:1: forCondition : ( expression )? -> ^( FOR_CONDITION (
    // expression )? ) ;
    public final JavaParser.forCondition_return forCondition() throws RecognitionException {
        JavaParser.forCondition_return retval = new JavaParser.forCondition_return();
        retval.start = input.LT(1);
        int forCondition_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.expression_return expression359 = null;


        RewriteRuleSubtreeStream stream_expression = new RewriteRuleSubtreeStream(adaptor, "rule expression");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 84)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:823:5: ( ( expression )? -> ^( FOR_CONDITION ( expression
            // )? ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:823:9: ( expression )?
            {
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:823:9: ( expression )?
                int alt104 = 2;
                int LA104_0 = input.LA(1);

                if ((LA104_0 == DEC || LA104_0 == INC || LA104_0 == LESS_THAN || LA104_0 == LOGICAL_NOT ||
                     (LA104_0 >= LPAREN && LA104_0 <= MINUS) || LA104_0 == NOT || LA104_0 == PLUS || LA104_0 == BOOLEAN ||
                     LA104_0 == BYTE || LA104_0 == CHAR || LA104_0 == DOUBLE || LA104_0 == FALSE || LA104_0 == FLOAT ||
                     (LA104_0 >= INT && LA104_0 <= LONG) || (LA104_0 >= NEW && LA104_0 <= NULL) || LA104_0 == SHORT || LA104_0 == SUPER ||
                     LA104_0 == THIS || LA104_0 == TRUE || LA104_0 == VOID || (LA104_0 >= IDENT && LA104_0 <= STRING_LITERAL))) {
                    alt104 = 1;
                }
                switch (alt104) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: expression
                    {
                        pushFollow(FOLLOW_expression_in_forCondition10338);
                        expression359 = expression();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_expression.add(expression359.getTree());

                    }
                    break;

                }


                // AST REWRITE
                // elements: expression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 824:9: -> ^( FOR_CONDITION ( expression )? )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:824:13: ^( FOR_CONDITION ( expression )? )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOR_CONDITION, "FOR_CONDITION"), root_1);

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:824:29: ( expression )?
                            if (stream_expression.hasNext()) {
                                adaptor.addChild(root_1, stream_expression.nextTree());

                            }
                            stream_expression.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 84, forCondition_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "forCondition"

