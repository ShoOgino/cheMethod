    // $ANTLR start "objectTypeSimplified"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:576:1: objectTypeSimplified : qualifiedTypeIdentSimplified (
    // arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) ;
    public final JavaParser.objectTypeSimplified_return objectTypeSimplified() throws RecognitionException {
        JavaParser.objectTypeSimplified_return retval = new JavaParser.objectTypeSimplified_return();
        retval.start = input.LT(1);
        int objectTypeSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.qualifiedTypeIdentSimplified_return qualifiedTypeIdentSimplified172 = null;

        JavaParser.arrayDeclaratorList_return arrayDeclaratorList173 = null;


        RewriteRuleSubtreeStream stream_arrayDeclaratorList = new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclaratorList");
        RewriteRuleSubtreeStream stream_qualifiedTypeIdentSimplified =
                new RewriteRuleSubtreeStream(adaptor, "rule qualifiedTypeIdentSimplified");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 44)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:577:5: ( qualifiedTypeIdentSimplified (
            // arrayDeclaratorList )? -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:577:9: qualifiedTypeIdentSimplified ( arrayDeclaratorList )?
            {
                pushFollow(FOLLOW_qualifiedTypeIdentSimplified_in_objectTypeSimplified7089);
                qualifiedTypeIdentSimplified172 = qualifiedTypeIdentSimplified();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_qualifiedTypeIdentSimplified.add(qualifiedTypeIdentSimplified172.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:577:38: ( arrayDeclaratorList )?
                int alt60 = 2;
                int LA60_0 = input.LA(1);

                if ((LA60_0 == LBRACK)) {
                    alt60 = 1;
                }
                switch (alt60) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: arrayDeclaratorList
                    {
                        pushFollow(FOLLOW_arrayDeclaratorList_in_objectTypeSimplified7091);
                        arrayDeclaratorList173 = arrayDeclaratorList();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_arrayDeclaratorList.add(arrayDeclaratorList173.getTree());

                    }
                    break;

                }


                // AST REWRITE
                // elements: arrayDeclaratorList, qualifiedTypeIdentSimplified
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 578:9: -> ^( TYPE qualifiedTypeIdentSimplified ( arrayDeclaratorList )? )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:578:13: ^( TYPE qualifiedTypeIdentSimplified (
                        // arrayDeclaratorList )? )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE, "TYPE"), root_1);

                            adaptor.addChild(root_1, stream_qualifiedTypeIdentSimplified.nextTree());
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:578:49: ( arrayDeclaratorList )?
                            if (stream_arrayDeclaratorList.hasNext()) {
                                adaptor.addChild(root_1, stream_arrayDeclaratorList.nextTree());

                            }
                            stream_arrayDeclaratorList.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 44, objectTypeSimplified_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "objectTypeSimplified"

