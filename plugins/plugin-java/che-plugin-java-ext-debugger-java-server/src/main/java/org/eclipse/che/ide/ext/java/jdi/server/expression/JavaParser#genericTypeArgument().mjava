    // $ANTLR start "genericTypeArgument"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:615:1: genericTypeArgument : ( type | QUESTION (
    // genericWildcardBoundType )? -> ^( QUESTION ( genericWildcardBoundType )? ) );
    public final JavaParser.genericTypeArgument_return genericTypeArgument() throws RecognitionException {
        JavaParser.genericTypeArgument_return retval = new JavaParser.genericTypeArgument_return();
        retval.start = input.LT(1);
        int genericTypeArgument_StartIndex = input.index();
        CommonTree root_0 = null;

        Token QUESTION191 = null;
        JavaParser.type_return type190 = null;

        JavaParser.genericWildcardBoundType_return genericWildcardBoundType192 = null;


        CommonTree QUESTION191_tree = null;
        RewriteRuleTokenStream stream_QUESTION = new RewriteRuleTokenStream(adaptor, "token QUESTION");
        RewriteRuleSubtreeStream stream_genericWildcardBoundType = new RewriteRuleSubtreeStream(adaptor, "rule genericWildcardBoundType");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 51)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:616:5: ( type | QUESTION ( genericWildcardBoundType )? ->
            // ^( QUESTION ( genericWildcardBoundType )? ) )
            int alt67 = 2;
            int LA67_0 = input.LA(1);

            if ((LA67_0 == BOOLEAN || LA67_0 == BYTE || LA67_0 == CHAR || LA67_0 == DOUBLE || LA67_0 == FLOAT ||
                 (LA67_0 >= INT && LA67_0 <= LONG) || LA67_0 == SHORT || LA67_0 == IDENT)) {
                alt67 = 1;
            } else if ((LA67_0 == QUESTION)) {
                alt67 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 67, 0, input);

                throw nvae;
            }
            switch (alt67) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:616:9: type
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_type_in_genericTypeArgument7405);
                    type190 = type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, type190.getTree());

                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:617:9: QUESTION ( genericWildcardBoundType )?
                {
                    QUESTION191 = (Token)match(input, QUESTION, FOLLOW_QUESTION_in_genericTypeArgument7415);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_QUESTION.add(QUESTION191);

                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:617:18: ( genericWildcardBoundType )?
                    int alt66 = 2;
                    int LA66_0 = input.LA(1);

                    if ((LA66_0 == EXTENDS)) {
                        int LA66_1 = input.LA(2);

                        if ((LA66_1 == BOOLEAN || LA66_1 == BYTE || LA66_1 == CHAR || LA66_1 == DOUBLE || LA66_1 == FLOAT ||
                             (LA66_1 >= INT && LA66_1 <= LONG) || LA66_1 == SHORT)) {
                            int LA66_4 = input.LA(3);

                            if ((synpred92_Java())) {
                                alt66 = 1;
                            }
                        } else if ((LA66_1 == IDENT)) {
                            int LA66_5 = input.LA(3);

                            if ((synpred92_Java())) {
                                alt66 = 1;
                            }
                        }
                    } else if ((LA66_0 == SUPER)) {
                        int LA66_3 = input.LA(2);

                        if ((LA66_3 == BOOLEAN || LA66_3 == BYTE || LA66_3 == CHAR || LA66_3 == DOUBLE || LA66_3 == FLOAT ||
                             (LA66_3 >= INT && LA66_3 <= LONG) || LA66_3 == SHORT || LA66_3 == IDENT)) {
                            alt66 = 1;
                        }
                    }
                    switch (alt66) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericWildcardBoundType
                        {
                            pushFollow(FOLLOW_genericWildcardBoundType_in_genericTypeArgument7417);
                            genericWildcardBoundType192 = genericWildcardBoundType();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_genericWildcardBoundType.add(genericWildcardBoundType192.getTree());

                        }
                        break;

                    }


                    // AST REWRITE
                    // elements: genericWildcardBoundType, QUESTION
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 618:9: -> ^( QUESTION ( genericWildcardBoundType )? )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:618:13: ^( QUESTION (
                            // genericWildcardBoundType )? )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_QUESTION.nextNode(), root_1);

                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:618:24: ( genericWildcardBoundType )?
                                if (stream_genericWildcardBoundType.hasNext()) {
                                    adaptor.addChild(root_1, stream_genericWildcardBoundType.nextTree());

                                }
                                stream_genericWildcardBoundType.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 51, genericTypeArgument_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "genericTypeArgument"

