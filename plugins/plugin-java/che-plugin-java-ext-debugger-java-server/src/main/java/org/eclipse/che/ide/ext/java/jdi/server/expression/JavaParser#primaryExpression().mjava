    // $ANTLR start "primaryExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:986:1: primaryExpression : ( parenthesizedExpression | literal |
    // newExpression | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^(
    // SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments ->
    // ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT
    // genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS,
    // \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^(
    // THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER,
    // \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | ->
    // ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT
    // CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID CLASS ) );
    public final JavaParser.primaryExpression_return primaryExpression() throws RecognitionException {
        JavaParser.primaryExpression_return retval = new JavaParser.primaryExpression_return();
        retval.start = input.LT(1);
        int primaryExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token SUPER467 = null;
        Token DOT469 = null;
        Token IDENT470 = null;
        Token IDENT472 = null;
        Token THIS474 = null;
        Token THIS476 = null;
        Token SUPER478 = null;
        Token SUPER480 = null;
        Token DOT481 = null;
        Token IDENT482 = null;
        Token DOT486 = null;
        Token CLASS487 = null;
        Token VOID488 = null;
        Token DOT489 = null;
        Token CLASS490 = null;
        JavaParser.parenthesizedExpression_return parenthesizedExpression462 = null;

        JavaParser.literal_return literal463 = null;

        JavaParser.newExpression_return newExpression464 = null;

        JavaParser.qualifiedIdentExpression_return qualifiedIdentExpression465 = null;

        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified466 = null;

        JavaParser.arguments_return arguments468 = null;

        JavaParser.arguments_return arguments471 = null;

        JavaParser.arguments_return arguments473 = null;

        JavaParser.arguments_return arguments475 = null;

        JavaParser.arguments_return arguments477 = null;

        JavaParser.arguments_return arguments479 = null;

        JavaParser.arguments_return arguments483 = null;

        JavaParser.primitiveType_return primitiveType484 = null;

        JavaParser.arrayDeclarator_return arrayDeclarator485 = null;


        CommonTree SUPER467_tree = null;
        CommonTree DOT469_tree = null;
        CommonTree IDENT470_tree = null;
        CommonTree IDENT472_tree = null;
        CommonTree THIS474_tree = null;
        CommonTree THIS476_tree = null;
        CommonTree SUPER478_tree = null;
        CommonTree SUPER480_tree = null;
        CommonTree DOT481_tree = null;
        CommonTree IDENT482_tree = null;
        CommonTree DOT486_tree = null;
        CommonTree CLASS487_tree = null;
        CommonTree VOID488_tree = null;
        CommonTree DOT489_tree = null;
        CommonTree CLASS490_tree = null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
        RewriteRuleTokenStream stream_CLASS = new RewriteRuleTokenStream(adaptor, "token CLASS");
        RewriteRuleTokenStream stream_VOID = new RewriteRuleTokenStream(adaptor, "token VOID");
        RewriteRuleTokenStream stream_SUPER = new RewriteRuleTokenStream(adaptor, "token SUPER");
        RewriteRuleTokenStream stream_DOT = new RewriteRuleTokenStream(adaptor, "token DOT");
        RewriteRuleTokenStream stream_THIS = new RewriteRuleTokenStream(adaptor, "token THIS");
        RewriteRuleSubtreeStream stream_arrayDeclarator = new RewriteRuleSubtreeStream(adaptor, "rule arrayDeclarator");
        RewriteRuleSubtreeStream stream_arguments = new RewriteRuleSubtreeStream(adaptor, "rule arguments");
        RewriteRuleSubtreeStream stream_primitiveType = new RewriteRuleSubtreeStream(adaptor, "rule primitiveType");
        RewriteRuleSubtreeStream stream_genericTypeArgumentListSimplified =
                new RewriteRuleSubtreeStream(adaptor, "rule genericTypeArgumentListSimplified");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 105)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:987:5: ( parenthesizedExpression | literal | newExpression
            // | qualifiedIdentExpression | genericTypeArgumentListSimplified ( SUPER ( arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER,
            // \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT
            // SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT
            // genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS,
            // \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) ) | ( THIS -> THIS ) ( arguments -> ^(
            // THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )? | SUPER arguments -> ^(
            // SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments ) | ( SUPER DOT IDENT ) ( arguments -> ^( METHOD_CALL
            // ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) ) | ( primitiveType -> primitiveType ) ( arrayDeclarator -> ^(
            // arrayDeclarator $primaryExpression) )* DOT CLASS -> ^( DOT $primaryExpression CLASS ) | VOID DOT CLASS -> ^( DOT VOID
            // CLASS ) )
            int alt139 = 10;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:987:9: parenthesizedExpression
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_parenthesizedExpression_in_primaryExpression12663);
                    parenthesizedExpression462 = parenthesizedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, parenthesizedExpression462.getTree());

                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:988:9: literal
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primaryExpression12673);
                    literal463 = literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, literal463.getTree());

                }
                break;
                case 3:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:989:9: newExpression
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_newExpression_in_primaryExpression12683);
                    newExpression464 = newExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, newExpression464.getTree());

                }
                break;
                case 4:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:990:9: qualifiedIdentExpression
                {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_qualifiedIdentExpression_in_primaryExpression12693);
                    qualifiedIdentExpression465 = qualifiedIdentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) adaptor.addChild(root_0, qualifiedIdentExpression465.getTree());

                }
                break;
                case 5:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:991:9: genericTypeArgumentListSimplified ( SUPER (
                    // arguments -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified
                    // arguments ) | DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified
                    // arguments ) ) | IDENT arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS
                    // arguments -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified
                    // arguments ) )
                {
                    pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_primaryExpression12703);
                    genericTypeArgumentListSimplified466 = genericTypeArgumentListSimplified();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0)
                        stream_genericTypeArgumentListSimplified.add(genericTypeArgumentListSimplified466.getTree());
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:992:9: ( SUPER ( arguments -> ^(
                    // SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) | DOT
                    // IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) ) | IDENT
                    // arguments -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments ) | THIS arguments -> ^(
                    // THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) )
                    int alt135 = 3;
                    switch (input.LA(1)) {
                        case SUPER: {
                            alt135 = 1;
                        }
                        break;
                        case IDENT: {
                            alt135 = 2;
                        }
                        break;
                        case THIS: {
                            alt135 = 3;
                        }
                        break;
                        default:
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae =
                                    new NoViableAltException("", 135, 0, input);

                            throw nvae;
                    }

                    switch (alt135) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:992:13: SUPER ( arguments -> ^(
                            // SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) |
                            // DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                        {
                            SUPER467 = (Token)match(input, SUPER, FOLLOW_SUPER_in_primaryExpression12718);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_SUPER.add(SUPER467);

                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:993:13: ( arguments -> ^(
                            // SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments ) |
                            // DOT IDENT arguments -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments ) )
                            int alt134 = 2;
                            int LA134_0 = input.LA(1);

                            if ((LA134_0 == LPAREN)) {
                                alt134 = 1;
                            } else if ((LA134_0 == DOT)) {
                                alt134 = 2;
                            } else {
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae =
                                        new NoViableAltException("", 134, 0, input);

                                throw nvae;
                            }
                            switch (alt134) {
                                case 1:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:993:17: arguments
                                {
                                    pushFollow(FOLLOW_arguments_in_primaryExpression12736);
                                    arguments468 = arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_arguments.add(arguments468.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, arguments
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if (state.backtracking == 0) {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval =
                                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                        root_0 = (CommonTree)adaptor.nil();
                                        // 993:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER,
                                        // \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                        {
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:993:61: ^(
                                            // SUPER_CONSTRUCTOR_CALL[$SUPER,
                                            // \"SUPER_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor
                                                        .create(SUPER_CONSTRUCTOR_CALL, SUPER467, "SUPER_CONSTRUCTOR_CALL"), root_1);

                                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                                adaptor.addChild(root_0, root_1);
                                            }

                                        }

                                        retval.tree = root_0;
                                    }
                                }
                                break;
                                case 2:
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:994:17: DOT IDENT arguments
                                {
                                    DOT469 = (Token)match(input, DOT, FOLLOW_DOT_in_primaryExpression12796);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_DOT.add(DOT469);

                                    IDENT470 = (Token)match(input, IDENT, FOLLOW_IDENT_in_primaryExpression12798);
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_IDENT.add(IDENT470);

                                    pushFollow(FOLLOW_arguments_in_primaryExpression12800);
                                    arguments471 = arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (state.backtracking == 0) stream_arguments.add(arguments471.getTree());


                                    // AST REWRITE
                                    // elements: genericTypeArgumentListSimplified, arguments, SUPER, DOT, IDENT
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    // wildcard labels: 
                                    if (state.backtracking == 0) {
                                        retval.tree = root_0;
                                        RewriteRuleSubtreeStream stream_retval =
                                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                        root_0 = (CommonTree)adaptor.nil();
                                        // 994:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                        {
                                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:994:61: ^( METHOD_CALL ^(
                                            // DOT SUPER IDENT ) genericTypeArgumentListSimplified arguments )
                                            {
                                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                                root_1 = (CommonTree)adaptor
                                                        .becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:994:75: ^( DOT SUPER
                                                // IDENT )
                                                {
                                                    CommonTree root_2 = (CommonTree)adaptor.nil();
                                                    root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                                    adaptor.addChild(root_2, stream_SUPER.nextNode());
                                                    adaptor.addChild(root_2, stream_IDENT.nextNode());

                                                    adaptor.addChild(root_1, root_2);
                                                }
                                                adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                                adaptor.addChild(root_0, root_1);
                                            }

                                        }

                                        retval.tree = root_0;
                                    }
                                }
                                break;

                            }


                        }
                        break;
                        case 2:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:996:13: IDENT arguments
                        {
                            IDENT472 = (Token)match(input, IDENT, FOLLOW_IDENT_in_primaryExpression12867);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_IDENT.add(IDENT472);

                            pushFollow(FOLLOW_arguments_in_primaryExpression12869);
                            arguments473 = arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_arguments.add(arguments473.getTree());


                            // AST REWRITE
                            // elements: arguments, genericTypeArgumentListSimplified, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 996:57: -> ^( METHOD_CALL IDENT genericTypeArgumentListSimplified arguments )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:996:61: ^( METHOD_CALL IDENT
                                    // genericTypeArgumentListSimplified arguments )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor
                                                .becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        adaptor.addChild(root_1, stream_IDENT.nextNode());
                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;
                        case 3:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:997:13: THIS arguments
                        {
                            THIS474 = (Token)match(input, THIS, FOLLOW_THIS_in_primaryExpression12924);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_THIS.add(THIS474);

                            pushFollow(FOLLOW_arguments_in_primaryExpression12926);
                            arguments475 = arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_arguments.add(arguments475.getTree());


                            // AST REWRITE
                            // elements: arguments, genericTypeArgumentListSimplified
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 997:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS,
                                // \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:997:61: ^(
                                    // THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] genericTypeArgumentListSimplified arguments )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                                (CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS474, "THIS_CONSTRUCTOR_CALL"),
                                                root_1);

                                        adaptor.addChild(root_1, stream_genericTypeArgumentListSimplified.nextTree());
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;

                    }


                }
                break;
                case 6:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:999:9: ( THIS -> THIS ) ( arguments -> ^(
                    // THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                {
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:999:9: ( THIS -> THIS )
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:999:13: THIS
                    {
                        THIS476 = (Token)match(input, THIS, FOLLOW_THIS_in_primaryExpression12991);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_THIS.add(THIS476);


                        // AST REWRITE
                        // elements: THIS
                        // token labels: 
                        // rule labels: retval
                        // token list labels: 
                        // rule list labels: 
                        // wildcard labels: 
                        if (state.backtracking == 0) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval =
                                    new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 999:57: -> THIS
                            {
                                adaptor.addChild(root_0, stream_THIS.nextNode());

                            }

                            retval.tree = root_0;
                        }
                    }

                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1001:9: ( arguments -> ^(
                    // THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments ) )?
                    int alt136 = 2;
                    int LA136_0 = input.LA(1);

                    if ((LA136_0 == LPAREN)) {
                        alt136 = 1;
                    }
                    switch (alt136) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1001:13: arguments
                        {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13059);
                            arguments477 = arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_arguments.add(arguments477.getTree());


                            // AST REWRITE
                            // elements: arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 1001:57: -> ^( THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1001:61: ^(
                                    // THIS_CONSTRUCTOR_CALL[$THIS, \"THIS_CONSTRUCTOR_CALL\"] arguments )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(
                                                (CommonTree)adaptor.create(THIS_CONSTRUCTOR_CALL, THIS476, "THIS_CONSTRUCTOR_CALL"),
                                                root_1);

                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;

                    }


                }
                break;
                case 7:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1003:9: SUPER arguments
                {
                    SUPER478 = (Token)match(input, SUPER, FOLLOW_SUPER_in_primaryExpression13124);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_SUPER.add(SUPER478);

                    pushFollow(FOLLOW_arguments_in_primaryExpression13126);
                    arguments479 = arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_arguments.add(arguments479.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 1003:57: -> ^( SUPER_CONSTRUCTOR_CALL[$SUPER, \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1003:61: ^( SUPER_CONSTRUCTOR_CALL[$SUPER,
                            // \"SUPER_CONSTRUCTOR_CALL\"] arguments )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor
                                        .becomeRoot((CommonTree)adaptor.create(SUPER_CONSTRUCTOR_CALL, SUPER478, "SUPER_CONSTRUCTOR_CALL"),
                                                    root_1);

                                adaptor.addChild(root_1, stream_arguments.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 8:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1004:9: ( SUPER DOT IDENT ) ( arguments -> ^(
                    // METHOD_CALL ^( DOT SUPER IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                {
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1004:9: ( SUPER DOT IDENT )
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1004:13: SUPER DOT IDENT
                    {
                        SUPER480 = (Token)match(input, SUPER, FOLLOW_SUPER_in_primaryExpression13182);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_SUPER.add(SUPER480);

                        DOT481 = (Token)match(input, DOT, FOLLOW_DOT_in_primaryExpression13184);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_DOT.add(DOT481);

                        IDENT482 = (Token)match(input, IDENT, FOLLOW_IDENT_in_primaryExpression13186);
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_IDENT.add(IDENT482);


                    }

                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1006:9: ( arguments -> ^( METHOD_CALL ^( DOT SUPER
                    // IDENT ) arguments ) | -> ^( DOT SUPER IDENT ) )
                    int alt137 = 2;
                    int LA137_0 = input.LA(1);

                    if ((LA137_0 == LPAREN)) {
                        alt137 = 1;
                    } else if ((LA137_0 == EOF || (LA137_0 >= AND && LA137_0 <= ASSIGN) || (LA137_0 >= BIT_SHIFT_RIGHT && LA137_0 <= DOT) ||
                                (LA137_0 >= EQUAL && LA137_0 <= LBRACK) || (LA137_0 >= LESS_OR_EQUAL && LA137_0 <= LOGICAL_AND) ||
                                LA137_0 == LOGICAL_OR || (LA137_0 >= MINUS && LA137_0 <= MOD_ASSIGN) ||
                                (LA137_0 >= NOT_EQUAL && LA137_0 <= XOR_ASSIGN) || LA137_0 == INSTANCEOF)) {
                        alt137 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae =
                                new NoViableAltException("", 137, 0, input);

                        throw nvae;
                    }
                    switch (alt137) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1006:13: arguments
                        {
                            pushFollow(FOLLOW_arguments_in_primaryExpression13210);
                            arguments483 = arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) stream_arguments.add(arguments483.getTree());


                            // AST REWRITE
                            // elements: SUPER, IDENT, DOT, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 1006:57: -> ^( METHOD_CALL ^( DOT SUPER IDENT ) arguments )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1006:61: ^( METHOD_CALL ^( DOT
                                    // SUPER IDENT ) arguments )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor
                                                .becomeRoot((CommonTree)adaptor.create(METHOD_CALL, "METHOD_CALL"), root_1);

                                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1006:75: ^( DOT SUPER IDENT )
                                        {
                                            CommonTree root_2 = (CommonTree)adaptor.nil();
                                            root_2 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_2);

                                            adaptor.addChild(root_2, stream_SUPER.nextNode());
                                            adaptor.addChild(root_2, stream_IDENT.nextNode());

                                            adaptor.addChild(root_1, root_2);
                                        }
                                        adaptor.addChild(root_1, stream_arguments.nextTree());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;
                        case 2:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1007:57:
                        {

                            // AST REWRITE
                            // elements: SUPER, DOT, IDENT
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if (state.backtracking == 0) {
                                retval.tree = root_0;
                                RewriteRuleSubtreeStream stream_retval =
                                        new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                root_0 = (CommonTree)adaptor.nil();
                                // 1007:57: -> ^( DOT SUPER IDENT )
                                {
                                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1007:61: ^( DOT SUPER IDENT )
                                    {
                                        CommonTree root_1 = (CommonTree)adaptor.nil();
                                        root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                        adaptor.addChild(root_1, stream_SUPER.nextNode());
                                        adaptor.addChild(root_1, stream_IDENT.nextNode());

                                        adaptor.addChild(root_0, root_1);
                                    }

                                }

                                retval.tree = root_0;
                            }
                        }
                        break;

                    }


                }
                break;
                case 9:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1009:9: ( primitiveType -> primitiveType ) (
                    // arrayDeclarator -> ^( arrayDeclarator $primaryExpression) )* DOT CLASS
                {
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1009:9: ( primitiveType -> primitiveType )
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1009:13: primitiveType
                    {
                        pushFollow(FOLLOW_primitiveType_in_primaryExpression13352);
                        primitiveType484 = primitiveType();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_primitiveType.add(primitiveType484.getTree());


                        // AST REWRITE
                        // elements: primitiveType
                        // token labels: 
                        // rule labels: retval
                        // token list labels: 
                        // rule list labels: 
                        // wildcard labels: 
                        if (state.backtracking == 0) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval =
                                    new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1009:57: -> primitiveType
                            {
                                adaptor.addChild(root_0, stream_primitiveType.nextTree());

                            }

                            retval.tree = root_0;
                        }
                    }

                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1011:9: ( arrayDeclarator -> ^( arrayDeclarator
                    // $primaryExpression) )*
                    loop138:
                    do {
                        int alt138 = 2;
                        int LA138_0 = input.LA(1);

                        if ((LA138_0 == LBRACK)) {
                            alt138 = 1;
                        }


                        switch (alt138) {
                            case 1:
                                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1011:13: arrayDeclarator
                            {
                                pushFollow(FOLLOW_arrayDeclarator_in_primaryExpression13411);
                                arrayDeclarator485 = arrayDeclarator();

                                state._fsp--;
                                if (state.failed) return retval;
                                if (state.backtracking == 0) stream_arrayDeclarator.add(arrayDeclarator485.getTree());


                                // AST REWRITE
                                // elements: primaryExpression, arrayDeclarator
                                // token labels: 
                                // rule labels: retval
                                // token list labels: 
                                // rule list labels: 
                                // wildcard labels: 
                                if (state.backtracking == 0) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval =
                                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                                    root_0 = (CommonTree)adaptor.nil();
                                    // 1011:57: -> ^( arrayDeclarator $primaryExpression)
                                    {
                                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1011:61: ^( arrayDeclarator
                                        // $primaryExpression)
                                        {
                                            CommonTree root_1 = (CommonTree)adaptor.nil();
                                            root_1 = (CommonTree)adaptor.becomeRoot(stream_arrayDeclarator.nextNode(), root_1);

                                            adaptor.addChild(root_1, stream_retval.nextTree());

                                            adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;
                                }
                            }
                            break;

                            default:
                                break loop138;
                        }
                    } while (true);

                    DOT486 = (Token)match(input, DOT, FOLLOW_DOT_in_primaryExpression13474);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_DOT.add(DOT486);

                    CLASS487 = (Token)match(input, CLASS, FOLLOW_CLASS_in_primaryExpression13476);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_CLASS.add(CLASS487);


                    // AST REWRITE
                    // elements: DOT, CLASS, primaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 1013:57: -> ^( DOT $primaryExpression CLASS )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1013:61: ^( DOT $primaryExpression CLASS )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_retval.nextTree());
                                adaptor.addChild(root_1, stream_CLASS.nextNode());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;
                case 10:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1014:9: VOID DOT CLASS
                {
                    VOID488 = (Token)match(input, VOID, FOLLOW_VOID_in_primaryExpression13536);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_VOID.add(VOID488);

                    DOT489 = (Token)match(input, DOT, FOLLOW_DOT_in_primaryExpression13538);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_DOT.add(DOT489);

                    CLASS490 = (Token)match(input, CLASS, FOLLOW_CLASS_in_primaryExpression13540);
                    if (state.failed) return retval;
                    if (state.backtracking == 0) stream_CLASS.add(CLASS490);


                    // AST REWRITE
                    // elements: VOID, CLASS, DOT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                        root_0 = (CommonTree)adaptor.nil();
                        // 1014:57: -> ^( DOT VOID CLASS )
                        {
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1014:61: ^( DOT VOID CLASS )
                            {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_DOT.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_VOID.nextNode());
                                adaptor.addChild(root_1, stream_CLASS.nextNode());

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 105, primaryExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "primaryExpression"

