    // $ANTLR start "OCTAL_LITERAL"
    public final void mOCTAL_LITERAL() throws RecognitionException {
        try {
            int _type = OCTAL_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1087:15: ( '0' ( '0' .. '7' )+ ( INTEGER_TYPE_SUFFIX )? )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1087:17: '0' ( '0' .. '7' )+ ( INTEGER_TYPE_SUFFIX )?
            {
                match('0');
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1087:21: ( '0' .. '7' )+
                int cnt6 = 0;
                loop6:
                do {
                    int alt6 = 2;
                    int LA6_0 = input.LA(1);

                    if (((LA6_0 >= '0' && LA6_0 <= '7'))) {
                        alt6 = 1;
                    }


                    switch (alt6) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1087:22: '0' .. '7'
                        {
                            matchRange('0', '7');

                        }
                        break;

                        default:
                            if (cnt6 >= 1) break loop6;
                            EarlyExitException eee =
                                    new EarlyExitException(6, input);
                            throw eee;
                    }
                    cnt6++;
                } while (true);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1087:33: ( INTEGER_TYPE_SUFFIX )?
                int alt7 = 2;
                int LA7_0 = input.LA(1);

                if ((LA7_0 == 'L' || LA7_0 == 'l')) {
                    alt7 = 1;
                }
                switch (alt7) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:1087:33: INTEGER_TYPE_SUFFIX
                    {
                        mINTEGER_TYPE_SUFFIX();

                    }
                    break;

                }


            }

            state.type = _type;
            state.channel = _channel;
        } finally {
        }
    }
    // $ANTLR end "OCTAL_LITERAL"

