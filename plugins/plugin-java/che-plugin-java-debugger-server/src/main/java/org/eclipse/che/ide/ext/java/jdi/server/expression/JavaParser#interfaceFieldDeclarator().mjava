    // $ANTLR start "interfaceFieldDeclarator"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:498:1: interfaceFieldDeclarator : variableDeclaratorId ASSIGN
    // variableInitializer -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) ;
    public final JavaParser.interfaceFieldDeclarator_return interfaceFieldDeclarator() throws RecognitionException {
        JavaParser.interfaceFieldDeclarator_return retval = new JavaParser.interfaceFieldDeclarator_return();
        retval.start = input.LT(1);
        int interfaceFieldDeclarator_StartIndex = input.index();
        CommonTree root_0 = null;

        Token ASSIGN134 = null;
        JavaParser.variableDeclaratorId_return variableDeclaratorId133 = null;

        JavaParser.variableInitializer_return variableInitializer135 = null;


        CommonTree ASSIGN134_tree = null;
        RewriteRuleTokenStream stream_ASSIGN = new RewriteRuleTokenStream(adaptor, "token ASSIGN");
        RewriteRuleSubtreeStream stream_variableDeclaratorId = new RewriteRuleSubtreeStream(adaptor, "rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableInitializer = new RewriteRuleSubtreeStream(adaptor, "rule variableInitializer");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 30)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:499:5: ( variableDeclaratorId ASSIGN variableInitializer
            // -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:499:9: variableDeclaratorId ASSIGN variableInitializer
            {
                pushFollow(FOLLOW_variableDeclaratorId_in_interfaceFieldDeclarator6465);
                variableDeclaratorId133 = variableDeclaratorId();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_variableDeclaratorId.add(variableDeclaratorId133.getTree());
                ASSIGN134 = (Token)match(input, ASSIGN, FOLLOW_ASSIGN_in_interfaceFieldDeclarator6467);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_ASSIGN.add(ASSIGN134);

                pushFollow(FOLLOW_variableInitializer_in_interfaceFieldDeclarator6469);
                variableInitializer135 = variableInitializer();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_variableInitializer.add(variableInitializer135.getTree());


                // AST REWRITE
                // elements: variableInitializer, variableDeclaratorId
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 500:9: -> ^( VAR_DECLARATOR variableDeclaratorId variableInitializer )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:500:13: ^( VAR_DECLARATOR variableDeclaratorId
                        // variableInitializer )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VAR_DECLARATOR, "VAR_DECLARATOR"), root_1);

                            adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());
                            adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 30, interfaceFieldDeclarator_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "interfaceFieldDeclarator"

