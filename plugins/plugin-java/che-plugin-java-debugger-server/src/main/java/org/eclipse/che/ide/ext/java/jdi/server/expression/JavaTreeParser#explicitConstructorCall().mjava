    // $ANTLR start "explicitConstructorCall"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:881:1: explicitConstructorCall : ( ^(
    // THIS_CONSTRUCTOR_CALL ( genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? (
    // genericTypeArgumentList )? arguments ) );
    public final void explicitConstructorCall() throws RecognitionException {
        int explicitConstructorCall_StartIndex = input.index();
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 65)) {
                return;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:882:3: ( ^( THIS_CONSTRUCTOR_CALL (
            // genericTypeArgumentList )? arguments ) | ^( SUPER_CONSTRUCTOR_CALL ( primaryExpression )? ( genericTypeArgumentList )?
            // arguments ) )
            int alt99 = 2;
            int LA99_0 = input.LA(1);

            if ((LA99_0 == THIS_CONSTRUCTOR_CALL)) {
                alt99 = 1;
            } else if ((LA99_0 == SUPER_CONSTRUCTOR_CALL)) {
                alt99 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return;
                }
                NoViableAltException nvae =
                        new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:883:3: ^( THIS_CONSTRUCTOR_CALL (
                    // genericTypeArgumentList )? arguments )
                {
                    match(input, THIS_CONSTRUCTOR_CALL, FOLLOW_THIS_CONSTRUCTOR_CALL_in_explicitConstructorCall4789);
                    if (state.failed) return;

                    match(input, Token.DOWN, null);
                    if (state.failed) return;
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:883:27: ( genericTypeArgumentList )?
                    int alt96 = 2;
                    int LA96_0 = input.LA(1);

                    if ((LA96_0 == GENERIC_TYPE_ARG_LIST)) {
                        alt96 = 1;
                    }
                    switch (alt96) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: genericTypeArgumentList
                        {
                            pushFollow(FOLLOW_genericTypeArgumentList_in_explicitConstructorCall4791);
                            genericTypeArgumentList();

                            state._fsp--;
                            if (state.failed) return;

                        }
                        break;

                    }

                    pushFollow(FOLLOW_arguments_in_explicitConstructorCall4794);
                    arguments();

                    state._fsp--;
                    if (state.failed) return;

                    match(input, Token.UP, null);
                    if (state.failed) return;

                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:885:3: ^( SUPER_CONSTRUCTOR_CALL (
                    // primaryExpression )? ( genericTypeArgumentList )? arguments )
                {
                    match(input, SUPER_CONSTRUCTOR_CALL, FOLLOW_SUPER_CONSTRUCTOR_CALL_in_explicitConstructorCall4804);
                    if (state.failed) return;

                    match(input, Token.DOWN, null);
                    if (state.failed) return;
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:885:28: ( primaryExpression )?
                    int alt97 = 2;
                    int LA97_0 = input.LA(1);

                    if ((LA97_0 == DOT || LA97_0 == FALSE || LA97_0 == NULL || LA97_0 == SUPER || LA97_0 == THIS || LA97_0 == TRUE ||
                         LA97_0 == ARRAY_DECLARATOR || LA97_0 == ARRAY_ELEMENT_ACCESS || LA97_0 == CLASS_CONSTRUCTOR_CALL ||
                         LA97_0 == METHOD_CALL || LA97_0 == PARENTESIZED_EXPR ||
                         (LA97_0 >= STATIC_ARRAY_CREATOR && LA97_0 <= SUPER_CONSTRUCTOR_CALL) || LA97_0 == THIS_CONSTRUCTOR_CALL ||
                         (LA97_0 >= IDENT && LA97_0 <= STRING_LITERAL))) {
                        alt97 = 1;
                    }
                    switch (alt97) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: primaryExpression
                        {
                            pushFollow(FOLLOW_primaryExpression_in_explicitConstructorCall4806);
                            primaryExpression();

                            state._fsp--;
                            if (state.failed) return;

                        }
                        break;

                    }

                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:885:47: ( genericTypeArgumentList )?
                    int alt98 = 2;
                    int LA98_0 = input.LA(1);

                    if ((LA98_0 == GENERIC_TYPE_ARG_LIST)) {
                        alt98 = 1;
                    }
                    switch (alt98) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:0:0: genericTypeArgumentList
                        {
                            pushFollow(FOLLOW_genericTypeArgumentList_in_explicitConstructorCall4809);
                            genericTypeArgumentList();

                            state._fsp--;
                            if (state.failed) return;

                        }
                        break;

                    }

                    pushFollow(FOLLOW_arguments_in_explicitConstructorCall4812);
                    arguments();

                    state._fsp--;
                    if (state.failed) return;

                    match(input, Token.UP, null);
                    if (state.failed) return;

                }
                break;

            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
        } finally {
            if (state.backtracking > 0) {
                memoize(input, 65, explicitConstructorCall_StartIndex);
            }
        }
        return;
    }
    // $ANTLR end "explicitConstructorCall"

