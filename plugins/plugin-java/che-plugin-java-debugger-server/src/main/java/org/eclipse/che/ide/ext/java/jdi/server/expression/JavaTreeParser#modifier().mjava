    // $ANTLR start "modifier"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:288:1: modifier : ( PUBLIC | PROTECTED | PRIVATE |
    // STATIC | ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier );
    public final void modifier() throws RecognitionException {
        int modifier_StartIndex = input.index();
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 25)) {
                return;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:289:3: ( PUBLIC | PROTECTED | PRIVATE | STATIC |
            // ABSTRACT | NATIVE | SYNCHRONIZED | TRANSIENT | VOLATILE | STRICTFP | localModifier )
            int alt48 = 11;
            switch (input.LA(1)) {
                case PUBLIC: {
                    alt48 = 1;
                }
                break;
                case PROTECTED: {
                    alt48 = 2;
                }
                break;
                case PRIVATE: {
                    alt48 = 3;
                }
                break;
                case STATIC: {
                    alt48 = 4;
                }
                break;
                case ABSTRACT: {
                    alt48 = 5;
                }
                break;
                case NATIVE: {
                    alt48 = 6;
                }
                break;
                case SYNCHRONIZED: {
                    alt48 = 7;
                }
                break;
                case TRANSIENT: {
                    alt48 = 8;
                }
                break;
                case VOLATILE: {
                    alt48 = 9;
                }
                break;
                case STRICTFP: {
                    alt48 = 10;
                }
                break;
                case AT:
                case FINAL: {
                    alt48 = 11;
                }
                break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return;
                    }
                    NoViableAltException nvae =
                            new NoViableAltException("", 48, 0, input);

                    throw nvae;
            }

            switch (alt48) {
                case 1:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:290:3: PUBLIC
                {
                    match(input, PUBLIC, FOLLOW_PUBLIC_in_modifier839);
                    if (state.failed) return;

                }
                break;
                case 2:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:291:5: PROTECTED
                {
                    match(input, PROTECTED, FOLLOW_PROTECTED_in_modifier845);
                    if (state.failed) return;

                }
                break;
                case 3:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:292:5: PRIVATE
                {
                    match(input, PRIVATE, FOLLOW_PRIVATE_in_modifier851);
                    if (state.failed) return;

                }
                break;
                case 4:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:293:5: STATIC
                {
                    match(input, STATIC, FOLLOW_STATIC_in_modifier857);
                    if (state.failed) return;

                }
                break;
                case 5:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:294:5: ABSTRACT
                {
                    match(input, ABSTRACT, FOLLOW_ABSTRACT_in_modifier863);
                    if (state.failed) return;

                }
                break;
                case 6:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:295:5: NATIVE
                {
                    match(input, NATIVE, FOLLOW_NATIVE_in_modifier869);
                    if (state.failed) return;

                }
                break;
                case 7:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:296:5: SYNCHRONIZED
                {
                    match(input, SYNCHRONIZED, FOLLOW_SYNCHRONIZED_in_modifier875);
                    if (state.failed) return;

                }
                break;
                case 8:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:297:5: TRANSIENT
                {
                    match(input, TRANSIENT, FOLLOW_TRANSIENT_in_modifier881);
                    if (state.failed) return;

                }
                break;
                case 9:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:298:5: VOLATILE
                {
                    match(input, VOLATILE, FOLLOW_VOLATILE_in_modifier887);
                    if (state.failed) return;

                }
                break;
                case 10:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:299:5: STRICTFP
                {
                    match(input, STRICTFP, FOLLOW_STRICTFP_in_modifier893);
                    if (state.failed) return;

                }
                break;
                case 11:
                    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:300:5: localModifier
                {
                    pushFollow(FOLLOW_localModifier_in_modifier899);
                    localModifier();

                    state._fsp--;
                    if (state.failed) return;

                }
                break;

            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
        } finally {
            if (state.backtracking > 0) {
                memoize(input, 25, modifier_StartIndex);
            }
        }
        return;
    }
    // $ANTLR end "modifier"

