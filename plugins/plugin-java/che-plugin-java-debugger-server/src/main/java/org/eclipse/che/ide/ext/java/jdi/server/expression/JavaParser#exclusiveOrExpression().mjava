    // $ANTLR start "exclusiveOrExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:882:1: exclusiveOrExpression : andExpression ( XOR andExpression )* ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        Token XOR397 = null;
        JavaParser.andExpression_return andExpression396 = null;

        JavaParser.andExpression_return andExpression398 = null;


        CommonTree XOR397_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 94)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:883:5: ( andExpression ( XOR andExpression )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:883:9: andExpression ( XOR andExpression )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10916);
                andExpression396 = andExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, andExpression396.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:883:23: ( XOR andExpression )*
                loop113:
                do {
                    int alt113 = 2;
                    int LA113_0 = input.LA(1);

                    if ((LA113_0 == XOR)) {
                        alt113 = 1;
                    }


                    switch (alt113) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:883:24: XOR andExpression
                        {
                            XOR397 = (Token)match(input, XOR, FOLLOW_XOR_in_exclusiveOrExpression10919);
                            if (state.failed) return retval;
                            if (state.backtracking == 0) {
                                XOR397_tree = (CommonTree)adaptor.create(XOR397);
                                root_0 = (CommonTree)adaptor.becomeRoot(XOR397_tree, root_0);
                            }
                            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression10922);
                            andExpression398 = andExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, andExpression398.getTree());

                        }
                        break;

                        default:
                            break loop113;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 94, exclusiveOrExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

