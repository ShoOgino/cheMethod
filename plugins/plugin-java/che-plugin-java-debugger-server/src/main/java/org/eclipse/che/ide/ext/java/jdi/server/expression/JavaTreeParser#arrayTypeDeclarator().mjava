    // $ANTLR start "arrayTypeDeclarator"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:888:1: arrayTypeDeclarator : ^( ARRAY_DECLARATOR (
    // arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) ;
    public final void arrayTypeDeclarator() throws RecognitionException {
        int arrayTypeDeclarator_StartIndex = input.index();
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 66)) {
                return;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:889:3: ( ^( ARRAY_DECLARATOR (
            // arrayTypeDeclarator | qualifiedIdentifier | primitiveType ) ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:890:3: ^( ARRAY_DECLARATOR ( arrayTypeDeclarator
            // | qualifiedIdentifier | primitiveType ) )
            {
                match(input, ARRAY_DECLARATOR, FOLLOW_ARRAY_DECLARATOR_in_arrayTypeDeclarator4834);
                if (state.failed) return;

                match(input, Token.DOWN, null);
                if (state.failed) return;
                // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:892:5: ( arrayTypeDeclarator |
                // qualifiedIdentifier | primitiveType )
                int alt100 = 3;
                switch (input.LA(1)) {
                    case ARRAY_DECLARATOR: {
                        alt100 = 1;
                    }
                    break;
                    case DOT:
                    case IDENT: {
                        alt100 = 2;
                    }
                    break;
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT: {
                        alt100 = 3;
                    }
                    break;
                    default:
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return;
                        }
                        NoViableAltException nvae =
                                new NoViableAltException("", 100, 0, input);

                        throw nvae;
                }

                switch (alt100) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:893:7: arrayTypeDeclarator
                    {
                        pushFollow(FOLLOW_arrayTypeDeclarator_in_arrayTypeDeclarator4848);
                        arrayTypeDeclarator();

                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;
                    case 2:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:894:9: qualifiedIdentifier
                    {
                        pushFollow(FOLLOW_qualifiedIdentifier_in_arrayTypeDeclarator4858);
                        qualifiedIdentifier();

                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;
                    case 3:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/JavaTreeParser.g:895:9: primitiveType
                    {
                        pushFollow(FOLLOW_primitiveType_in_arrayTypeDeclarator4868);
                        primitiveType();

                        state._fsp--;
                        if (state.failed) return;

                    }
                    break;

                }


                match(input, Token.UP, null);
                if (state.failed) return;

            }

        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
        } finally {
            if (state.backtracking > 0) {
                memoize(input, 66, arrayTypeDeclarator_StartIndex);
            }
        }
        return;
    }
    // $ANTLR end "arrayTypeDeclarator"

