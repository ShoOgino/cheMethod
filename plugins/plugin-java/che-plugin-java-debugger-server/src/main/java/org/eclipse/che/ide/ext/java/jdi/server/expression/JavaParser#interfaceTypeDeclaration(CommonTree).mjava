    // $ANTLR start "interfaceTypeDeclaration"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:430:1: interfaceTypeDeclaration[CommonTree modifiers] : INTERFACE
    // IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )?
    // ( interfaceExtendsClause )? interfaceBody ) ;
    public final JavaParser.interfaceTypeDeclaration_return interfaceTypeDeclaration(CommonTree modifiers) throws RecognitionException {
        JavaParser.interfaceTypeDeclaration_return retval = new JavaParser.interfaceTypeDeclaration_return();
        retval.start = input.LT(1);
        int interfaceTypeDeclaration_StartIndex = input.index();
        CommonTree root_0 = null;

        Token INTERFACE66 = null;
        Token IDENT67 = null;
        JavaParser.genericTypeParameterList_return genericTypeParameterList68 = null;

        JavaParser.interfaceExtendsClause_return interfaceExtendsClause69 = null;

        JavaParser.interfaceBody_return interfaceBody70 = null;


        CommonTree INTERFACE66_tree = null;
        CommonTree IDENT67_tree = null;
        RewriteRuleTokenStream stream_IDENT = new RewriteRuleTokenStream(adaptor, "token IDENT");
        RewriteRuleTokenStream stream_INTERFACE = new RewriteRuleTokenStream(adaptor, "token INTERFACE");
        RewriteRuleSubtreeStream stream_genericTypeParameterList = new RewriteRuleSubtreeStream(adaptor, "rule genericTypeParameterList");
        RewriteRuleSubtreeStream stream_interfaceBody = new RewriteRuleSubtreeStream(adaptor, "rule interfaceBody");
        RewriteRuleSubtreeStream stream_interfaceExtendsClause = new RewriteRuleSubtreeStream(adaptor, "rule interfaceExtendsClause");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 21)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:431:5: ( INTERFACE IDENT ( genericTypeParameterList )? (
            // interfaceExtendsClause )? interfaceBody -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )?
            // interfaceBody ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:431:9: INTERFACE IDENT ( genericTypeParameterList )? (
            // interfaceExtendsClause )? interfaceBody
            {
                INTERFACE66 = (Token)match(input, INTERFACE, FOLLOW_INTERFACE_in_interfaceTypeDeclaration5491);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_INTERFACE.add(INTERFACE66);

                IDENT67 = (Token)match(input, IDENT, FOLLOW_IDENT_in_interfaceTypeDeclaration5493);
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_IDENT.add(IDENT67);

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:431:25: ( genericTypeParameterList )?
                int alt22 = 2;
                int LA22_0 = input.LA(1);

                if ((LA22_0 == LESS_THAN)) {
                    alt22 = 1;
                }
                switch (alt22) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeParameterList
                    {
                        pushFollow(FOLLOW_genericTypeParameterList_in_interfaceTypeDeclaration5495);
                        genericTypeParameterList68 = genericTypeParameterList();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_genericTypeParameterList.add(genericTypeParameterList68.getTree());

                    }
                    break;

                }

                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:431:51: ( interfaceExtendsClause )?
                int alt23 = 2;
                int LA23_0 = input.LA(1);

                if ((LA23_0 == EXTENDS)) {
                    alt23 = 1;
                }
                switch (alt23) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: interfaceExtendsClause
                    {
                        pushFollow(FOLLOW_interfaceExtendsClause_in_interfaceTypeDeclaration5498);
                        interfaceExtendsClause69 = interfaceExtendsClause();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) stream_interfaceExtendsClause.add(interfaceExtendsClause69.getTree());

                    }
                    break;

                }

                pushFollow(FOLLOW_interfaceBody_in_interfaceTypeDeclaration5501);
                interfaceBody70 = interfaceBody();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_interfaceBody.add(interfaceBody70.getTree());


                // AST REWRITE
                // elements: IDENT, genericTypeParameterList, INTERFACE, interfaceBody, interfaceExtendsClause
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 432:9: -> ^( INTERFACE IDENT ( genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:432:13: ^( INTERFACE IDENT (
                        // genericTypeParameterList )? ( interfaceExtendsClause )? interfaceBody )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot(stream_INTERFACE.nextNode(), root_1);

                            adaptor.addChild(root_1, modifiers);
                            adaptor.addChild(root_1, stream_IDENT.nextNode());
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:432:44: ( genericTypeParameterList )?
                            if (stream_genericTypeParameterList.hasNext()) {
                                adaptor.addChild(root_1, stream_genericTypeParameterList.nextTree());

                            }
                            stream_genericTypeParameterList.reset();
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:432:70: ( interfaceExtendsClause )?
                            if (stream_interfaceExtendsClause.hasNext()) {
                                adaptor.addChild(root_1, stream_interfaceExtendsClause.nextTree());

                            }
                            stream_interfaceExtendsClause.reset();
                            adaptor.addChild(root_1, stream_interfaceBody.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 21, interfaceTypeDeclaration_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "interfaceTypeDeclaration"

