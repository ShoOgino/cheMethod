    // $ANTLR start "typeList"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:435:1: typeList : type ( COMMA type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        CommonTree root_0 = null;

        Token COMMA72 = null;
        JavaParser.type_return type71 = null;

        JavaParser.type_return type73 = null;


        CommonTree COMMA72_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 22)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:436:5: ( type ( COMMA type )* )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:436:9: type ( COMMA type )*
            {
                root_0 = (CommonTree)adaptor.nil();

                pushFollow(FOLLOW_type_in_typeList5551);
                type71 = type();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) adaptor.addChild(root_0, type71.getTree());
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:436:14: ( COMMA type )*
                loop24:
                do {
                    int alt24 = 2;
                    int LA24_0 = input.LA(1);

                    if ((LA24_0 == COMMA)) {
                        alt24 = 1;
                    }


                    switch (alt24) {
                        case 1:
                            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:436:15: COMMA type
                        {
                            COMMA72 = (Token)match(input, COMMA, FOLLOW_COMMA_in_typeList5554);
                            if (state.failed) return retval;
                            pushFollow(FOLLOW_type_in_typeList5557);
                            type73 = type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (state.backtracking == 0) adaptor.addChild(root_0, type73.getTree());

                        }
                        break;

                        default:
                            break loop24;
                    }
                } while (true);


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 22, typeList_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "typeList"

