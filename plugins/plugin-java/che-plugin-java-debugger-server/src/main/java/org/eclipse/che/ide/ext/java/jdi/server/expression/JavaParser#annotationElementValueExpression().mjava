    // $ANTLR start "annotationElementValueExpression"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:703:1: annotationElementValueExpression : conditionalExpression ->
    // ^( EXPR conditionalExpression ) ;
    public final JavaParser.annotationElementValueExpression_return annotationElementValueExpression() throws RecognitionException {
        JavaParser.annotationElementValueExpression_return retval = new JavaParser.annotationElementValueExpression_return();
        retval.start = input.LT(1);
        int annotationElementValueExpression_StartIndex = input.index();
        CommonTree root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression239 = null;


        RewriteRuleSubtreeStream stream_conditionalExpression = new RewriteRuleSubtreeStream(adaptor, "rule conditionalExpression");
        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 66)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:704:5: ( conditionalExpression -> ^( EXPR
            // conditionalExpression ) )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:704:9: conditionalExpression
            {
                pushFollow(FOLLOW_conditionalExpression_in_annotationElementValueExpression8259);
                conditionalExpression239 = conditionalExpression();

                state._fsp--;
                if (state.failed) return retval;
                if (state.backtracking == 0) stream_conditionalExpression.add(conditionalExpression239.getTree());


                // AST REWRITE
                // elements: conditionalExpression
                // token labels: 
                // rule labels: retval
                // token list labels: 
                // rule list labels: 
                // wildcard labels: 
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(adaptor, "rule retval", retval != null ? retval.tree : null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 705:9: -> ^( EXPR conditionalExpression )
                    {
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:705:13: ^( EXPR conditionalExpression )
                        {
                            CommonTree root_1 = (CommonTree)adaptor.nil();
                            root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPR, "EXPR"), root_1);

                            adaptor.addChild(root_1, stream_conditionalExpression.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 66, annotationElementValueExpression_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "annotationElementValueExpression"

