    // $ANTLR start "typeIdentSimplified"
    // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:595:1: typeIdentSimplified : IDENT (
    // genericTypeArgumentListSimplified )? ;
    public final JavaParser.typeIdentSimplified_return typeIdentSimplified() throws RecognitionException {
        JavaParser.typeIdentSimplified_return retval = new JavaParser.typeIdentSimplified_return();
        retval.start = input.LT(1);
        int typeIdentSimplified_StartIndex = input.index();
        CommonTree root_0 = null;

        Token IDENT182 = null;
        JavaParser.genericTypeArgumentListSimplified_return genericTypeArgumentListSimplified183 = null;


        CommonTree IDENT182_tree = null;

        try {
            if (state.backtracking > 0 && alreadyParsedRule(input, 48)) {
                return retval;
            }
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:596:5: ( IDENT ( genericTypeArgumentListSimplified )? )
            // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:596:9: IDENT ( genericTypeArgumentListSimplified )?
            {
                root_0 = (CommonTree)adaptor.nil();

                IDENT182 = (Token)match(input, IDENT, FOLLOW_IDENT_in_typeIdentSimplified7244);
                if (state.failed) return retval;
                if (state.backtracking == 0) {
                    IDENT182_tree = (CommonTree)adaptor.create(IDENT182);
                    root_0 = (CommonTree)adaptor.becomeRoot(IDENT182_tree, root_0);
                }
                // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:596:16: ( genericTypeArgumentListSimplified )?
                int alt64 = 2;
                int LA64_0 = input.LA(1);

                if ((LA64_0 == LESS_THAN)) {
                    alt64 = 1;
                }
                switch (alt64) {
                    case 1:
                        // org/eclipse/che/ide/ext/java/jdi/server/expression/Java.g:0:0: genericTypeArgumentListSimplified
                    {
                        pushFollow(FOLLOW_genericTypeArgumentListSimplified_in_typeIdentSimplified7247);
                        genericTypeArgumentListSimplified183 = genericTypeArgumentListSimplified();

                        state._fsp--;
                        if (state.failed) return retval;
                        if (state.backtracking == 0) adaptor.addChild(root_0, genericTypeArgumentListSimplified183.getTree());

                    }
                    break;

                }


            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        } catch (RecognitionException re) {
            reportError(re);
            recover(input, re);
            retval.tree = (CommonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        } finally {
            if (state.backtracking > 0) {
                memoize(input, 48, typeIdentSimplified_StartIndex);
            }
        }
        return retval;
    }
    // $ANTLR end "typeIdentSimplified"

