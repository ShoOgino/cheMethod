    private void findTypesWithSubMethods(IJavaElement element, List<Type> implementations) throws JavaModelException {
        IMethod selectedMethod = (IMethod)element;
        IType parentType = selectedMethod.getDeclaringType();
        if (parentType == null) {
            return;
        }
        ITypeHierarchy typeHierarchy = parentType.newTypeHierarchy(new NullProgressMonitor());
        IType[] subTypes = typeHierarchy.getAllSubtypes(parentType);

        MethodOverrideTester methodOverrideTester = new MethodOverrideTester(parentType, typeHierarchy);

        for (IType type : subTypes) {
            IMethod method = methodOverrideTester.findOverridingMethodInType(type, selectedMethod);
            if (method == null) {
                continue;
            }
            Type openDeclaration = convertToTypeDTO(type);
            setRange(openDeclaration, method);
            implementations.add(openDeclaration);
        }
    }

