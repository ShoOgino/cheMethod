  /**
   * Get all implementations of selected Java Element.
   *
   * @param project opened project
   * @param fqn fully qualified name of the class file
   * @param offset cursor position
   * @return descriptor of the implementations
   * @throws JavaModelException when JavaModel has a failure
   */
  public ImplementationsDescriptorDTO getImplementations(
      IJavaProject project, String fqn, int offset) throws JavaModelException {
    ImplementationsDescriptorDTO implementationDescriptor =
        DtoFactory.newDto(ImplementationsDescriptorDTO.class);

    IJavaElement element = getJavaElement(project, fqn, offset);
    if (element == null) {
      return implementationDescriptor.withImplementations(emptyList());
    }

    List<Type> implementations = new ArrayList<>();

    implementationDescriptor.setImplementations(implementations);

    switch (element.getElementType()) {
      case 7: // type
        findSubTypes(element, implementations);
        implementationDescriptor.setMemberName(element.getElementName());
        break;
      case 9: // method
        findTypesWithSubMethods(element, implementations);
        implementationDescriptor.setMemberName(element.getElementName());
        break;
      default:
        break;
    }

    return implementationDescriptor;
  }

