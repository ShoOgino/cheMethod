  @POST
  @Path("/format")
  @Consumes(MediaType.TEXT_PLAIN)
  @Produces({MediaType.APPLICATION_JSON})
  @ApiOperation(value = "Creates edits that describe how to format the given string")
  @ApiResponses({
    @ApiResponse(code = 200, message = "The response contains all changes after formating"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public List<Change> getFormatChanges(
      @ApiParam(value = "Path to the root project") @QueryParam("projectpath") String projectPath,
      @ApiParam(value = "The given offset to start recording the edits (inclusive)")
          @QueryParam("offset")
          int offset,
      @ApiParam(value = "The given length to stop recording the edits (exclusive)")
          @QueryParam("length")
          int length,
      @ApiParam(value = "The content to format. Java code formatting is supported only")
          String content)
      throws BadLocationException, IllegalArgumentException {
    IJavaProject javaProject = model.getJavaProject(projectPath);
    String formatterPath = CHE_FOLDER + '/' + CHE_FORMATTER_XML;
    File file = null;
    IFile iFile = javaProject.getProject().getFile(formatterPath);
    if (iFile != null) {
      file = iFile.getLocation().toFile();
    }
    if (file == null || !file.exists()) {
      file = getFormatterFromRootFolder(formatterPath);
    }
    return formatter.getFormatChanges(file, content, offset, length);
  }

