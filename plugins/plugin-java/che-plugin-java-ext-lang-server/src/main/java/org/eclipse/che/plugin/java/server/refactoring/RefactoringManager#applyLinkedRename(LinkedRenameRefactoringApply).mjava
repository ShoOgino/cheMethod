  /**
   * Apply linked mode rename refactoring.
   *
   * @param apply contains new element name
   * @return refactoring result
   * @throws RefactoringException when refactoring session not found.
   * @throws CoreException when impossible to apply rename refactoring
   */
  public RefactoringResult applyLinkedRename(LinkedRenameRefactoringApply apply)
      throws RefactoringException, CoreException {
    RefactoringSession session = getRefactoringSession(apply.getSessionId());
    if (session instanceof RenameLinkedModeRefactoringSession) {
      RenameLinkedModeRefactoringSession renameSession =
          (RenameLinkedModeRefactoringSession) session;
      try {
        RefactoringResult refactoringResult = renameSession.doRename(apply.getNewName());
        deleteRefactoringSession(apply.getSessionId());
        return refactoringResult;
      } catch (InvocationTargetException | InterruptedException | AssertionFailedException e) {
        LOG.error(e.getMessage(), e);
        return DtoConverter.toRefactoringResultDto(
            org.eclipse.ltk.core.refactoring.RefactoringStatus.createFatalErrorStatus(
                e.getMessage()));
      }
    }

    throw new RefactoringException("There is no RenameLinkedModeRefactoringSession.");
  }

