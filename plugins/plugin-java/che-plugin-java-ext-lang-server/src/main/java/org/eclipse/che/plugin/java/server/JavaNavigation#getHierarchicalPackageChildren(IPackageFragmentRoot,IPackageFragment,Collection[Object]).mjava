  /**
   * Returns the hierarchical packages inside a given fragment or root.
   *
   * @param parent the parent package fragment root
   * @param fragment the package to get the children for or 'null' to get the children of the root
   * @param result Collection where the resulting elements are added
   * @throws JavaModelException if fetching the children fails
   */
  private void getHierarchicalPackageChildren(
      IPackageFragmentRoot parent, IPackageFragment fragment, Collection<Object> result)
      throws JavaModelException {
    IJavaElement[] children = parent.getChildren();
    String prefix = fragment != null ? fragment.getElementName() + '.' : ""; // $NON-NLS-1$
    int prefixLen = prefix.length();
    for (int i = 0; i < children.length; i++) {
      IPackageFragment curr = (IPackageFragment) children[i];
      String name = curr.getElementName();
      if (name.startsWith(prefix)
          && name.length() > prefixLen
          && name.indexOf('.', prefixLen) == -1) {
        if (fFoldPackages) {
          curr = getFolded(children, curr);
        }
        result.add(curr);
      } else if (fragment == null && curr.isDefaultPackage()) {
        IJavaElement[] currChildren = curr.getChildren();
        if (currChildren != null && currChildren.length >= 1) {
          result.add(curr);
        }
      }
    }
  }

