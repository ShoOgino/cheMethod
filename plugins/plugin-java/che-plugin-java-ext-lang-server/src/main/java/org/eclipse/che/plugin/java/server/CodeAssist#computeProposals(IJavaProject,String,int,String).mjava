  public Proposals computeProposals(
      IJavaProject project, String fqn, int offset, final String content)
      throws JavaModelException {

    WorkingCopyOwner copyOwner =
        new WorkingCopyOwner() {
          @Override
          public IBuffer createBuffer(ICompilationUnit workingCopy) {
            return new org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter(
                workingCopy, workingCopy.getPath(), content);
          }
        };
    ICompilationUnit compilationUnit;

    IType type = project.findType(fqn);
    if (type == null) {
      return null;
    }
    if (type.isBinary()) {
      compilationUnit = type.getClassFile().getWorkingCopy(copyOwner, null);
    } else {
      compilationUnit = type.getCompilationUnit().getWorkingCopy(copyOwner, null);
    }

    IBuffer buffer = compilationUnit.getBuffer();
    IDocument document;
    if (buffer instanceof org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter) {
      document = ((org.eclipse.jdt.internal.ui.javaeditor.DocumentAdapter) buffer).getDocument();
    } else {
      document = new DocumentAdapter(buffer);
    }
    TextViewer viewer = new TextViewer(document, new Point(offset, 0));
    JavaContentAssistInvocationContext context =
        new JavaContentAssistInvocationContext(viewer, offset, compilationUnit);

    List<ICompletionProposal> proposals = new ArrayList<>();
    proposals.addAll(
        new JavaAllCompletionProposalComputer().computeCompletionProposals(context, null));
    proposals.addAll(
        new TemplateCompletionProposalComputer().computeCompletionProposals(context, null));

    Collections.sort(proposals, new RelevanceSorter());

    return convertProposals(offset, compilationUnit, viewer, proposals);
  }

