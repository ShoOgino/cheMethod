  @Test
  public void testUnqualifiedFieldAccess3() throws Exception {
    Hashtable hashtable = JavaCore.getOptions();
    hashtable.put(JavaCore.COMPILER_PB_UNQUALIFIED_FIELD_ACCESS, JavaCore.ERROR);
    hashtable.put(JavaCore.COMPILER_PB_FIELD_HIDING, JavaCore.ERROR);
    JavaCore.setOptions(hashtable);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class F {\n");
    buf.append("    public void setCount(int i) {}\n");
    buf.append("}\n");
    pack1.createCompilationUnit("F.java", buf.toString(), false, null);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private F f= new F();\n");
    buf.append("    public E(int i) {\n");
    buf.append("        f.setCount(i);\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 1);
    assertCorrectLabels(proposals);

    String[] expecteds = new String[1];
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private F f= new F();\n");
    buf.append("    public E(int i) {\n");
    buf.append("        this.f.setCount(i);\n");
    buf.append("    }\n");
    buf.append("}\n");
    expecteds[0] = buf.toString();
    assertExpectedExistInProposals(proposals, expecteds);
  }

