  @Test
  public void testSwitchCaseFallThrough1() throws Exception {
    Hashtable options = JavaCore.getOptions();
    options.put(JavaCore.COMPILER_PB_FALLTHROUGH_CASE, JavaCore.WARNING);
    JavaCore.setOptions(options);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("pack", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("public class E {\n");
    buf.append("    public long foo(int i) {\n");
    buf.append("        long time= 0;\n");
    buf.append("        switch (i) {\n");
    buf.append("            case 1:\n");
    buf.append("                time= System.currentTimeMillis();\n");
    buf.append("            case 2:\n");
    buf.append("                time= 3;\n");
    buf.append("        }\n");
    buf.append("        return time;\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);

    assertCorrectLabels(proposals);
    assertNumberOfProposals(proposals, 3);

    String[] expected = new String[3];
    buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("public class E {\n");
    buf.append("    public long foo(int i) {\n");
    buf.append("        long time= 0;\n");
    buf.append("        switch (i) {\n");
    buf.append("            case 1:\n");
    buf.append("                time= System.currentTimeMillis();\n");
    buf.append("                break;\n");
    buf.append("            case 2:\n");
    buf.append("                time= 3;\n");
    buf.append("        }\n");
    buf.append("        return time;\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("public class E {\n");
    buf.append("    @SuppressWarnings(\"fallthrough\")\n");
    buf.append("    public long foo(int i) {\n");
    buf.append("        long time= 0;\n");
    buf.append("        switch (i) {\n");
    buf.append("            case 1:\n");
    buf.append("                time= System.currentTimeMillis();\n");
    buf.append("            case 2:\n");
    buf.append("                time= 3;\n");
    buf.append("        }\n");
    buf.append("        return time;\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("public class E {\n");
    buf.append("    public long foo(int i) {\n");
    buf.append("        long time= 0;\n");
    buf.append("        switch (i) {\n");
    buf.append("            case 1:\n");
    buf.append("                time= System.currentTimeMillis();\n");
    buf.append("                //$FALL-THROUGH$\n");
    buf.append("            case 2:\n");
    buf.append("                time= 3;\n");
    buf.append("        }\n");
    buf.append("        return time;\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

