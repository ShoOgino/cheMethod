  @Test
  public void testTypeMismatchForInterfaceInGeneric() throws Exception {

    IPackageFragment pack0 = fSourceFolder.createPackageFragment("test0", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test0;\n");
    buf.append("public interface PrimaryContainer<A> {\n");
    buf.append("}\n");
    pack0.createCompilationUnit("PrimaryContainer.java", buf.toString(), false, null);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class Container<A> {\n");
    buf.append("    public Container<A> getContainer() {\n");
    buf.append("        return null;\n");
    buf.append("    }\n");
    buf.append("}\n");
    pack1.createCompilationUnit("Container.java", buf.toString(), false, null);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import test0.PrimaryContainer;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo(Container<String> c) {\n");
    buf.append("         PrimaryContainer<String> list= c.getContainer();\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 4);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview1 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import test0.PrimaryContainer;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo(Container<String> c) {\n");
    buf.append("         Container<String> list= c.getContainer();\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    proposal = (CUCorrectionProposal) proposals.get(1);
    String preview2 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import test0.PrimaryContainer;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo(Container<String> c) {\n");
    buf.append(
        "         PrimaryContainer<String> list= (PrimaryContainer<String>) c.getContainer();\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected2 = buf.toString();

    proposal = (CUCorrectionProposal) proposals.get(2);
    String preview3 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("import test0.PrimaryContainer;\n");
    buf.append("\n");
    buf.append("public class Container<A> {\n");
    buf.append("    public PrimaryContainer<String> getContainer() {\n");
    buf.append("        return null;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected3 = buf.toString();

    proposal = (CUCorrectionProposal) proposals.get(3);
    String preview4 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("import test0.PrimaryContainer;\n");
    buf.append("\n");
    buf.append("public class Container<A> implements PrimaryContainer<String> {\n");
    buf.append("    public Container<A> getContainer() {\n");
    buf.append("        return null;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected4 = buf.toString();

    assertEqualStringsIgnoreOrder(
        new String[] {preview1, preview2, preview3, preview4},
        new String[] {expected1, expected2, expected3, expected4});
  }

