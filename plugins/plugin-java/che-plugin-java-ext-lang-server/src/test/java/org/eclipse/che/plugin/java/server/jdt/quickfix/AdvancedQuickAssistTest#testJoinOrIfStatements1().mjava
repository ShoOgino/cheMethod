  @Test
  public void testJoinOrIfStatements1() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo(boolean a, int b, boolean c) {\n");
    buf.append("        if (a)\n");
    buf.append("            return;\n");
    buf.append("        if (b == 5)\n");
    buf.append("            return;\n");
    buf.append("        b= 9;\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    int offset1 = buf.toString().indexOf("if (a");
    int offset2 = buf.toString().lastIndexOf("b= 9;");
    AssistContext context = getCorrectionContext(cu, offset1, offset2 - offset1);
    List proposals = collectAssists(context, false);

    for (Iterator I = proposals.iterator(); I.hasNext(); ) {
      Object o = I.next();
      if (!(o instanceof CUCorrectionProposal)) I.remove();
    }

    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo(boolean a, int b, boolean c) {\n");
    buf.append("        if (a || b == 5)\n");
    buf.append("            return;\n");
    buf.append("        b= 9;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {expected1});
  }

