  //Disabled depends on bug Bug 124626 Infer Type Arguments infers ? instaed of more precise type
  //	public void testTypeParametersToRawTypeReference03() throws Exception {
  //		Hashtable options= JavaCore.getOptions();
  //		options.put(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE, JavaCore.WARNING);
  //		JavaCore.setOptions(options);
  //
  //		IPackageFragment pack1= fSourceFolder.createPackageFragment("pack", false, null);
  //		StringBuffer buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    private class E1<P2 extends E2> {}\n");
  //		buf.append("    private class E2 {}\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E1 e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);
  //
  //		CompilationUnit astRoot= getASTRoot(cu);
  //		ArrayList proposals= collectCorrections(cu, astRoot, 1);
  //
  //		assertCorrectLabels(proposals);
  //		assertNumberOfProposals(proposals, 3);
  //
  //		String[] expected= new String[2];
  //
  //		buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    private class E1<P2 extends E2> {}\n");
  //		buf.append("    private class E2 {}\n");
  //		buf.append("    @SuppressWarnings(\"unchecked\")\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E1 e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		expected[0]= buf.toString();
  //
  //		buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    private class E1<P2 extends E2> {}\n");
  //		buf.append("    private class E2 {}\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E1<E2> e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		expected[1]= buf.toString();
  //
  //		assertExpectedExistInProposals(proposals, expected);
  //	}
  //
  //	public void testTypeParametersToRawTypeReference04() throws Exception {
  //		Hashtable options= JavaCore.getOptions();
  //		options.put(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE, JavaCore.WARNING);
  //		JavaCore.setOptions(options);
  //
  //		IPackageFragment pack1= fSourceFolder.createPackageFragment("pack", false, null);
  //		StringBuffer buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    private class E1<P2 extends E2<Integer>> {}\n");
  //		buf.append("    private class E2<P1> {}\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E1 e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);
  //
  //		CompilationUnit astRoot= getASTRoot(cu);
  //		ArrayList proposals= collectCorrections(cu, astRoot, 1);
  //
  //		assertCorrectLabels(proposals);
  //		assertNumberOfProposals(proposals, 3);
  //
  //		String[] expected= new String[2];
  //
  //		buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    private class E1<P2 extends E2<Integer>> {}\n");
  //		buf.append("    private class E2<P1> {}\n");
  //		buf.append("    @SuppressWarnings(\"unchecked\")\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E1 e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		expected[0]= buf.toString();
  //
  //		buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    private class E1<P2 extends E2<Integer>> {}\n");
  //		buf.append("    private class E2<P1> {}\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E1<E2<Integer>> e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		expected[1]= buf.toString();
  //
  //		assertExpectedExistInProposals(proposals, expected);
  //	}
  //
  //	public void testTypeParametersToRawTypeReference05() throws Exception {
  //		Hashtable options= JavaCore.getOptions();
  //		options.put(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE, JavaCore.WARNING);
  //		JavaCore.setOptions(options);
  //
  //		IPackageFragment pack1= fSourceFolder.createPackageFragment("pack", false, null);
  //		StringBuffer buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("import java.io.InputStream;\n");
  //		buf.append("public class E2<P extends InputStream> {}\n");
  //		pack1.createCompilationUnit("E2.java", buf.toString(), false, null);
  //
  //		buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E2 e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);
  //
  //		CompilationUnit astRoot= getASTRoot(cu);
  //		ArrayList proposals= collectCorrections(cu, astRoot, 1);
  //
  //		assertCorrectLabels(proposals);
  //		assertNumberOfProposals(proposals, 3);
  //
  //		String[] expected= new String[2];
  //
  //		buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("public class E {\n");
  //		buf.append("    @SuppressWarnings(\"unchecked\")\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E2 e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		expected[0]= buf.toString();
  //
  //		buf= new StringBuffer();
  //		buf.append("package pack;\n");
  //		buf.append("\n");
  //		buf.append("import java.io.InputStream;\n");
  //		buf.append("\n");
  //		buf.append("public class E {\n");
  //		buf.append("    public void test() {\n");
  //		buf.append("        E2<InputStream> e1;\n");
  //		buf.append("    }\n");
  //		buf.append("}\n");
  //		expected[1]= buf.toString();
  //
  //		assertExpectedExistInProposals(proposals, expected);
  //	}
  @Test
  public void testTypeParametersToRawTypeReference06() throws Exception {
    Hashtable options = JavaCore.getOptions();
    options.put(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE, JavaCore.WARNING);
    JavaCore.setOptions(options);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("pack", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("import java.util.ArrayList;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    private List l= new ArrayList<String>();\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot, 1);

    assertCorrectLabels(proposals);
    assertNumberOfProposals(proposals, 4);

    String[] expected = new String[3];

    buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("import java.util.ArrayList;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    @SuppressWarnings(\"rawtypes\")\n");
    buf.append("    private List l= new ArrayList<String>();\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("import java.util.ArrayList;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    private List<String> l= new ArrayList<String>();\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package pack;\n");
    buf.append("import java.util.ArrayList;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    private ArrayList<String> l= new ArrayList<String>();\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

