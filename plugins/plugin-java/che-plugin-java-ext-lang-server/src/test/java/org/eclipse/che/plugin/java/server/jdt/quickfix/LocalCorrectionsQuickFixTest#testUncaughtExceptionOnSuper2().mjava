  @Test
  public void testUncaughtExceptionOnSuper2() throws Exception {

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class A {\n");
    buf.append("    public A() throws Exception {\n");
    buf.append("    }\n");
    buf.append("}\n");
    pack1.createCompilationUnit("A.java", buf.toString(), false, null);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E extends A {\n");
    buf.append("    /**\n");
    buf.append("     * @throws Exception sometimes...\n");
    buf.append("     */\n");
    buf.append("    public E() {\n");
    buf.append("        super();\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 1);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E extends A {\n");
    buf.append("    /**\n");
    buf.append("     * @throws Exception sometimes...\n");
    buf.append("     */\n");
    buf.append("    public E() throws Exception {\n");
    buf.append("        super();\n");
    buf.append("    }\n");
    buf.append("}\n");

    assertEqualString(preview, buf.toString());
  }

