  @Test
  @Ignore
  public void testInnerType() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        Object object= new F.Inner() {\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu1 = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class F {\n");
    buf.append("}\n");
    pack1.createCompilationUnit("F.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu1);
    ArrayList proposals = collectCorrections(cu1, astRoot);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        Object object= new Object() {\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class F {\n");
    buf.append("\n");
    buf.append("    public class Inner {\n");
    buf.append("\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected2 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class F {\n");
    buf.append("\n");
    buf.append("    public interface Inner {\n");
    buf.append("\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected3 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {expected1, expected2, expected3});
  }

