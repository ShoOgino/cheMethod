  @Test
  public void testEnumeration() throws Exception {
    IPackageFragment pack = fSourceFolder.createPackageFragment("test", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test;\r\n");
    buf.append("import java.util.Enumeration;\r\n");
    buf.append("import java.util.Vector;\r\n");
    buf.append("public class A {\r\n");
    buf.append("	Vector<String> c;\r\n");
    buf.append("	public A() {\r\n");
    buf.append("		for (Enumeration<String> e= c.elements(); e.hasMoreElements(); ) {\r\n");
    buf.append("			String nextElement = e.nextElement();\r\n");
    buf.append("			System.out.println(nextElement);\r\n");
    buf.append("		}\r\n");
    buf.append("	}\r\n");
    buf.append("}");
    ICompilationUnit unit = pack.createCompilationUnit("A.java", buf.toString(), false, null);

    List proposals = fetchConvertingProposal(buf, unit);

    assertNotNull(fConvertLoopProposal);

    assertCorrectLabels(proposals);

    String preview = getPreviewContent(fConvertLoopProposal);

    buf = new StringBuffer();
    buf.append("package test;\r\n");
    buf.append("import java.util.Vector;\r\n");
    buf.append("public class A {\r\n");
    buf.append("	Vector<String> c;\r\n");
    buf.append("	public A() {\r\n");
    buf.append("		for (String nextElement : c) {\r\n");
    buf.append("			System.out.println(nextElement);\r\n");
    buf.append("		}\r\n");
    buf.append("	}\r\n");
    buf.append("}");
    String expected = buf.toString();
    assertEqualString(preview, expected);
  }

