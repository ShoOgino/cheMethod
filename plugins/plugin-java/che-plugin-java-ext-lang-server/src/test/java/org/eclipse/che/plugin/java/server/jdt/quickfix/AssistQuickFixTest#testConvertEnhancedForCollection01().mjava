  @Test
  public void testConvertEnhancedForCollection01() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Collection;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo(Collection<? extends List<? extends Number>> allNums) {\n");
    buf.append("        for (List<? extends Number> nums : allNums) {\n");
    buf.append("            for (Number number : nums) {\n");
    buf.append("                System.out.println(number.doubleValue());\n");
    buf.append("            }\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf("for"), 0);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 3);
    assertCorrectLabels(proposals);

    String[] expected = new String[3];
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Collection;\n");
    buf.append("import java.util.Iterator;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo(Collection<? extends List<? extends Number>> allNums) {\n");
    buf.append("        for (Iterator<? extends List<? extends Number>> iterator = allNums\n");
    buf.append("                .iterator(); iterator.hasNext();) {\n");
    buf.append("            List<? extends Number> nums = iterator.next();\n");
    buf.append("            for (Number number : nums) {\n");
    buf.append("                System.out.println(number.doubleValue());\n");
    buf.append("            }\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Collection;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo(Collection<? extends List<? extends Number>> allNums) {\n");
    buf.append("        for (Number number : nums) {\n");
    buf.append("            System.out.println(number.doubleValue());\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Collection;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo(Collection<? extends List<? extends Number>> allNums) {\n");
    buf.append("        for (List<? extends Number> nums : allNums)\n");
    buf.append("            for (Number number : nums) {\n");
    buf.append("                System.out.println(number.doubleValue());\n");
    buf.append("            }\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

