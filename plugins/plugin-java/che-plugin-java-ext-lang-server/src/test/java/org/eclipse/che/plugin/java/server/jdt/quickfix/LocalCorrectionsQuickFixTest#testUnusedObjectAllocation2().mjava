  @Test
  public void testUnusedObjectAllocation2() throws Exception {
    Hashtable options = JavaCore.getOptions();
    options.put(JavaCore.COMPILER_PB_UNUSED_OBJECT_ALLOCATION, JavaCore.WARNING);
    JavaCore.setOptions(options);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        /*a*/new Exception()/*b*/;/*c*/\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);

    assertCorrectLabels(proposals);
    assertNumberOfProposals(proposals, 6);

    String[] expected = new String[6];
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        /*a*/throw new Exception()/*b*/;/*c*/\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    @SuppressWarnings(\"unused\")\n");
    buf.append("    public void foo() {\n");
    buf.append("        /*a*/new Exception()/*b*/;/*c*/\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        /*a*/return new Exception()/*b*/;/*c*/\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[3] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        /*a*/Exception exception = new Exception()/*b*/;/*c*/\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[4] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    private Exception exception;\n");
    buf.append("\n");
    buf.append("    public void foo() {\n");
    buf.append("        /*a*/exception = new Exception()/*b*/;/*c*/\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[5] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

