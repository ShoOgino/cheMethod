  @Test
  public void testGenerateForNameClash() throws Exception {
    //		if (LocalCorrectionsQuickFixTest.BUG_430818)
    //			return;

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int[] nums;\n");
    buf.append("    void foo() {\n");
    buf.append("        nums\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    Map saveOptions = fJProject1.getOptions(false);
    Map newOptions = new HashMap(saveOptions);
    newOptions.put(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE, "true");
    try {
      fJProject1.setOptions(newOptions);
      String selection = "nums";
      AssistContext context =
          getCorrectionContext(cu, buf.toString().lastIndexOf(selection) + selection.length(), 0);
      List proposals = collectAssists(context, false);

      assertNumberOfProposals(proposals, 4);
      assertCorrectLabels(proposals);

      String[] expected = new String[2];
      buf = new StringBuffer();
      buf.append("package test1;\n");
      buf.append("public class E {\n");
      buf.append("    private int[] nums;\n");
      buf.append("    void foo() {\n");
      buf.append("        for (int i = 0; i < nums.length; i++) {\n");
      buf.append("            int j = nums[i];\n");
      buf.append("            \n");
      buf.append("        }\n");
      buf.append("    }\n");
      buf.append("}\n");
      expected[0] = buf.toString();

      buf = new StringBuffer();
      buf.append("package test1;\n");
      buf.append("public class E {\n");
      buf.append("    private int[] nums;\n");
      buf.append("    void foo() {\n");
      buf.append("        for (int i : nums) {\n");
      buf.append("            \n");
      buf.append("        }\n");
      buf.append("    }\n");
      buf.append("}\n");
      expected[1] = buf.toString();

      assertExpectedExistInProposals(proposals, expected);
    } finally {
      fJProject1.setOptions(saveOptions);
    }
  }

