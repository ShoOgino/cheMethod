  @Test
  @Ignore
  public void testTypeInTypeArguments1() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E<T> {\n");
    buf.append("    class SomeType { }\n");
    buf.append("    void foo() {\n");
    buf.append("        E<XYX> list= new E<SomeType>();\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertCorrectLabels(proposals);

    String[] expected = new String[6];
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E<T> {\n");
    buf.append("    class SomeType { }\n");
    buf.append("    void foo() {\n");
    buf.append("        E<SomeType> list= new E<SomeType>();\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public class XYX {\n");
    buf.append("\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public interface XYX {\n");
    buf.append("\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public enum XYX {\n");
    buf.append("\n");
    buf.append("}\n");
    expected[3] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E<T> {\n");
    buf.append("    class SomeType { }\n");
    buf.append("    <XYX> void foo() {\n");
    buf.append("        E<XYX> list= new E<SomeType>();\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[4] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E<T, XYX> {\n");
    buf.append("    class SomeType { }\n");
    buf.append("    void foo() {\n");
    buf.append("        E<XYX> list= new E<SomeType>();\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[5] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

