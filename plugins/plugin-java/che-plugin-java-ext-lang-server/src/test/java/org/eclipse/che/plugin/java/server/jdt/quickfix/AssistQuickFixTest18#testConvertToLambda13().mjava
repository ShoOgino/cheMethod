  @Test
  public void testConvertToLambda13() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("interface J {\n");
    buf.append("    <M> J run(M x);\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("class Test {\n");
    buf.append("    J j = new J() {\n");
    buf.append("        @Override\n");
    buf.append("        public <M> J run(M x) {\n");
    buf.append("            return null;\n");
    buf.append("        }\n");
    buf.append("    };    \n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("Test.java", buf.toString(), false, null);

    int offset = buf.toString().indexOf("J()"); // generic lambda not allowed
    AssistContext context = getCorrectionContext(cu, offset, 0);
    assertNoErrors(context);
    List proposals = collectAssists(context, false);
    assertNumberOfProposals(proposals, 1);
    assertCorrectLabels(proposals);
    assertProposalDoesNotExist(
        proposals, FixMessages.LambdaExpressionsFix_convert_to_lambda_expression);
  }

