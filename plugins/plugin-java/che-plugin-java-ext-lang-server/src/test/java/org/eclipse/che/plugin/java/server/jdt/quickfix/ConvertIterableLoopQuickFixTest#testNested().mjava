    @Test
	public void testNested() throws Exception {
		IPackageFragment pack= fSourceFolder.createPackageFragment("test", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test;\r\n");
		buf.append("import java.util.Collection;\r\n");
		buf.append("import java.util.Iterator;\r\n");
		buf.append("public class A {\r\n");
		buf.append("	public A() {\r\n");
		buf.append("		Collection<Collection<String>> cc= null;\r\n");
		buf.append("		for (final Iterator<Collection<String>> outer= cc.iterator(); outer.hasNext();) {\r\n");
		buf.append("			final Collection<String> c = outer.next();\r\n");
		buf.append("			for (final Iterator<String> inner= c.iterator(); inner.hasNext();) {\r\n");
		buf.append("				System.out.println(inner.next());\r\n");
		buf.append("			}\r\n");
		buf.append("		}\r\n");
		buf.append("	}\r\n");
		buf.append("}");
		ICompilationUnit unit= pack.createCompilationUnit("A.java", buf.toString(), false, null);

		List proposals= fetchConvertingProposal(buf, unit);

		assertNotNull(fConvertLoopProposal);

		assertCorrectLabels(proposals);

		String preview= getPreviewContent(fConvertLoopProposal);

		buf= new StringBuffer();
		buf.append("package test;\r\n");
		buf.append("import java.util.Collection;\r\n");
		buf.append("import java.util.Iterator;\r\n");
		buf.append("public class A {\r\n");
		buf.append("	public A() {\r\n");
		buf.append("		Collection<Collection<String>> cc= null;\r\n");
		buf.append("		for (Collection<String> c : cc) {\r\n");
		buf.append("			for (final Iterator<String> inner= c.iterator(); inner.hasNext();) {\r\n");
		buf.append("				System.out.println(inner.next());\r\n");
		buf.append("			}\r\n");
		buf.append("		}\r\n");
		buf.append("	}\r\n");
		buf.append("}");
		String expected= buf.toString();
		assertEqualString(preview, expected);
	}

