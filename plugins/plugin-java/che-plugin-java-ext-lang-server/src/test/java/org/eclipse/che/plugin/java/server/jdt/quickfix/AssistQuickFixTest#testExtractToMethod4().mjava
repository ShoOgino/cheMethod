  @Test
  public void testExtractToMethod4() throws Exception {
    //https://bugs.eclipse.org/bugs/show_bug.cgi?id=41302
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        int i = 0;\n");
    buf.append("        for (; true;)\n");
    buf.append("            i++;\n");
    buf.append("    }\n");

    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String selection = "i++;";
    int offset = buf.toString().indexOf(selection);
    AssistContext context = getCorrectionContext(cu, offset, selection.length());

    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 4);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        int i = 0;\n");
    buf.append("        for (; true;)\n");
    buf.append("            i = extracted(i);\n");
    buf.append("    }\n");
    buf.append("\n");
    buf.append("    private int extracted(int i) {\n");
    buf.append("        i++;\n");
    buf.append("        return i;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex1 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        int i = 0;\n");
    buf.append("        for (; true;) {\n");
    buf.append("            int j = i++;\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex2 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int j;\n");
    buf.append("\n");
    buf.append("    void foo() {\n");
    buf.append("        int i = 0;\n");
    buf.append("        for (; true;)\n");
    buf.append("            j = i++;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex3 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        int i = 0;\n");
    buf.append("        for (; true;) {\n");
    buf.append("            i++;\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex4 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {ex1, ex2, ex3, ex4});
  }

