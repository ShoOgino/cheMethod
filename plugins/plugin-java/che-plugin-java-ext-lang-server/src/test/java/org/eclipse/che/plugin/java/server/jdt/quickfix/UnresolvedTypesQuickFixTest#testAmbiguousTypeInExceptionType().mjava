  @Test
  @Ignore
  public void testAmbiguousTypeInExceptionType() throws Exception {
    createSomeAmbiguity(false, true);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);

    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import test2.*;\n");
    buf.append("import test3.*;\n");
    buf.append("public class E {\n");
    buf.append("    B b;\n");
    buf.append("    C c;\n");
    buf.append("    public void foo() throws A {");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview1 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import test2.*;\n");
    buf.append("import test2.A;\n");
    buf.append("import test3.*;\n");
    buf.append("public class E {\n");
    buf.append("    B b;\n");
    buf.append("    C c;\n");
    buf.append("    public void foo() throws A {");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    proposal = (CUCorrectionProposal) proposals.get(1);
    String preview2 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import test2.*;\n");
    buf.append("import test3.*;\n");
    buf.append("import test3.A;\n");
    buf.append("public class E {\n");
    buf.append("    B b;\n");
    buf.append("    C c;\n");
    buf.append("    public void foo() throws A {");
    buf.append("    }\n");
    buf.append("}\n");
    String expected2 = buf.toString();

    assertEqualStringsIgnoreOrder(
        new String[] {preview1, preview2}, new String[] {expected1, expected2});
  }

