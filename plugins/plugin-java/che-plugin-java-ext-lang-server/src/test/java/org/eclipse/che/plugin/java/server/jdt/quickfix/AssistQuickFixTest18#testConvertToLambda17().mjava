  @Test
  public void testConvertToLambda17() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("interface X {\n");
    buf.append("    void foo();\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("public class CX {\n");
    buf.append("    private void fun(int a) {\n");
    buf.append("        X x= new X() {\n");
    buf.append("            @Override\n");
    buf.append("            public void foo() {\n");
    buf.append("                int a; \n");
    buf.append("                int a1;\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("CX.java", buf.toString(), false, null);

    int offset = buf.toString().indexOf("X()");
    AssistContext context = getCorrectionContext(cu, offset, 0);
    assertNoErrors(context);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("interface X {\n");
    buf.append("    void foo();\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("public class CX {\n");
    buf.append("    private void fun(int a) {\n");
    buf.append("        X x= () -> {\n");
    buf.append("            int a2; \n");
    buf.append("            int a1;\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {expected1});
  }

