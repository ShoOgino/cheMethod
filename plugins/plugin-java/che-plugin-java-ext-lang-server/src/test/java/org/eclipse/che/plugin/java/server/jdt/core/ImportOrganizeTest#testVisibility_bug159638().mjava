  @Test
  public void testVisibility_bug159638() throws Exception {
    IPackageFragmentRoot sourceFolder = JavaProjectHelper.addSourceContainer(fJProject1, "src");

    IPackageFragment pack0 = sourceFolder.createPackageFragment("pack0", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package pack0;\n");
    buf.append("public abstract class Parent<E> {\n");
    buf.append("    public static class Inner {\n");
    buf.append("    }\n");
    buf.append("    public @interface Tag{\n");
    buf.append("        String value();\n");
    buf.append("    }\n");
    buf.append("}\n");
    pack0.createCompilationUnit("Parent.java", buf.toString(), false, null);

    IPackageFragment pack1 = sourceFolder.createPackageFragment("pack1", false, null);
    buf = new StringBuffer();
    buf.append("package pack1;\n");
    buf.append("\n");
    buf.append("import pack0.Parent;\n");
    buf.append("import pack0.Parent.Inner;\n");
    buf.append("import pack0.Parent.Tag;\n");
    buf.append("\n");
    buf.append("@Tag(\"foo\")\n");
    buf.append("public class Child extends Parent<Inner> {\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("Child.java", buf.toString(), false, null);

    String[] order = new String[] {};
    IChooseImportQuery query =
        createQuery("testVisibility_bug159638", new String[] {}, new int[] {});

    OrganizeImportsOperation op = createOperation(cu, order, 99, false, true, true, query);
    op.run(null);

    assertEqualString(
        cu.getSource(), buf.toString()); // no changes, imports for Inner and tag are required
  }

