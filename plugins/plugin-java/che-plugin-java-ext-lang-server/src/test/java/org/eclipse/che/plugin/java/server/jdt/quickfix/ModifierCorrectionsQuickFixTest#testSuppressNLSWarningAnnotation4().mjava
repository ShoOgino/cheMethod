  @Test
  @Ignore
  public void testSuppressNLSWarningAnnotation4() throws Exception {

    Hashtable options = JavaCore.getOptions();
    options.put(JavaCore.COMPILER_PB_NON_NLS_STRING_LITERAL, JavaCore.WARNING);
    JavaCore.setOptions(options);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1; \n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        @SuppressWarnings(\"unused\") String s = \"\";\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);

    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 4);
    assertCorrectLabels(proposals);
    String[] expected = new String[2];
    buf = new StringBuffer();
    buf.append("package test1; \n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        @SuppressWarnings({\"unused\", \"nls\"}) String s = \"\";\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1; \n");
    buf.append("public class E {\n");
    buf.append("    @SuppressWarnings(\"nls\")\n");
    buf.append("    public void foo() {\n");
    buf.append("        @SuppressWarnings(\"unused\") String s = \"\";\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();
    assertExpectedExistInProposals(proposals, expected);
  }

