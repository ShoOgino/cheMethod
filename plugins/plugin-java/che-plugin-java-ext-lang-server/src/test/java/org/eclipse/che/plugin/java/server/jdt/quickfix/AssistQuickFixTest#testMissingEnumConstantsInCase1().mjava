  @Test
  public void testMissingEnumConstantsInCase1() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("p", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package p;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    enum MyEnum {\n");
    buf.append("        X1, X2, X3\n");
    buf.append("    }\n");
    buf.append("    \n");
    buf.append("    public void foo(MyEnum x) {\n");
    buf.append("        switch (x) {\n");
    buf.append("        \n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf("switch"), 0);
    List proposals = collectAssists(context, false);

    assertCorrectLabels(proposals);
    assertNumberOfProposals(proposals, 3);

    String[] expected = new String[3];
    buf = new StringBuffer();
    buf.append("package p;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    enum MyEnum {\n");
    buf.append("        X1, X2, X3\n");
    buf.append("    }\n");
    buf.append("    \n");
    buf.append("    public void foo(MyEnum x) {\n");
    buf.append("        switch (x) {\n");
    buf.append("            default :\n");
    buf.append("                break;\n");
    buf.append("        \n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package p;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    enum MyEnum {\n");
    buf.append("        X1, X2, X3\n");
    buf.append("    }\n");
    buf.append("    \n");
    buf.append("    public void foo(MyEnum x) {\n");
    buf.append("        switch (x) {\n");
    buf.append("            case X1 :\n");
    buf.append("                break;\n");
    buf.append("            case X2 :\n");
    buf.append("                break;\n");
    buf.append("            case X3 :\n");
    buf.append("                break;\n");
    buf.append("            default :\n");
    buf.append("                break;\n");
    buf.append("        \n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package p;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("    enum MyEnum {\n");
    buf.append("        X1, X2, X3\n");
    buf.append("    }\n");
    buf.append("    \n");
    buf.append("    public void foo(MyEnum x) {\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

