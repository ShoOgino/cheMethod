    @Test
    public void testDoRename() throws Exception {
        StringBuilder b = new StringBuilder();
        b.append("package p;\n");
        b.append("public class A{}\n");

        ICompilationUnit unit = getPackageP().createCompilationUnit("A.java", b.toString(), false, null);
        IType type = unit.getAllTypes()[0];
        RenameRefactoringSession refactoring = manager.createRenameRefactoring(type, unit, b.indexOf("A"), false);
        DtoServerImpls.ValidateNewNameImpl validateNewName = new DtoServerImpls.ValidateNewNameImpl();
        validateNewName.setSessionId(refactoring.getSessionId());
        validateNewName.setNewName("MyClass");
        manager.renameValidateNewName(validateNewName);

        RenameSettings settings = new DtoServerImpls.RenameSettingsImpl();
        settings.setSessionId(refactoring.getSessionId());
        settings.setDeprecateDelegates(true);
        settings.setUpdateReferences(true);
        manager.setRenameSettings(settings);

        ChangeCreationResult change = manager.createChange(refactoring.getSessionId());
        assertThat(change).isNotNull();

        RefactoringStatus applyRefactoring = manager.applyRefactoring(refactoring.getSessionId());
        assertThat(applyRefactoring).isNotNull();
        assertThat(applyRefactoring.getSeverity()).isEqualTo(RefactoringStatus.OK);
        assertThat(unit.exists()).isFalse();
        ICompilationUnit newUnit = getPackageP().getCompilationUnit("MyClass.java");
        assertThat(newUnit.exists()).isTrue();
    }

