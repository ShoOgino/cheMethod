  @Test
  public void testUnnecessaryThrownException2() throws Exception {
    Hashtable hashtable = JavaCore.getOptions();
    hashtable.put(JavaCore.COMPILER_PB_UNUSED_DECLARED_THROWN_EXCEPTION, JavaCore.ERROR);
    JavaCore.setOptions(hashtable);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.io.IOException;\n");
    buf.append("import java.text.ParseException;\n");
    buf.append("public class E {\n");
    buf.append("    /**\n");
    buf.append("     * @throws IOException\n");
    buf.append("     */\n");
    buf.append("    public E(int i) throws IOException, ParseException {\n");
    buf.append("        if  (i == 0) {\n");
    buf.append("            throw new IOException();\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    String[] expected = new String[2];

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.io.IOException;\n");
    buf.append("import java.text.ParseException;\n");
    buf.append("public class E {\n");
    buf.append("    /**\n");
    buf.append("     * @throws IOException\n");
    buf.append("     */\n");
    buf.append("    public E(int i) throws IOException {\n");
    buf.append("        if  (i == 0) {\n");
    buf.append("            throw new IOException();\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.io.IOException;\n");
    buf.append("import java.text.ParseException;\n");
    buf.append("public class E {\n");
    buf.append("    /**\n");
    buf.append("     * @throws IOException\n");
    buf.append("     * @throws ParseException \n");
    buf.append("     */\n");
    buf.append("    public E(int i) throws IOException, ParseException {\n");
    buf.append("        if  (i == 0) {\n");
    buf.append("            throw new IOException();\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

