  @Test
  public void testConvertToIfReturn2() throws Exception {
    // 'if' in lambda body - negative cases
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("@FunctionalInterface\n");
    buf.append("interface A {\n");
    buf.append("    void run(int n);\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("@FunctionalInterface\n");
    buf.append("interface B {\n");
    buf.append("    A foo(int x);\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("public class Test {\n");
    buf.append("    int f1(int a2, int b2) {\n");
    buf.append("        B fi3 = (x) -> {\n");
    buf.append("            if (x != 100) {\n");
    buf.append("                return (n) -> System.out.println(n + x);\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("        return a2 + b2;\n");
    buf.append("    }\n");
    buf.append("    \n");
    buf.append("    void f2(int a1, int b1) {\n");
    buf.append("        A a= (n) -> {\n");
    buf.append("            if (a1 == b1) {\n");
    buf.append("                System.out.println(n);\n");
    buf.append("                return;\n");
    buf.append("            }\n");
    buf.append("            bar();\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("\n");
    buf.append("    private void bar() {}\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("Test.java", buf.toString(), false, null);

    String str = "if (x != 100)"; // #foo does not return void
    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
    List proposals = collectAssists(context, false);
    assertNumberOfProposals(proposals, 3);
    assertCorrectLabels(proposals);
    assertProposalDoesNotExist(
        proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);

    str = "if (a1 == b1)"; // not the last executable statement in lambda body
    context = getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
    proposals = collectAssists(context, false);
    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);
    assertProposalDoesNotExist(
        proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);
  }

