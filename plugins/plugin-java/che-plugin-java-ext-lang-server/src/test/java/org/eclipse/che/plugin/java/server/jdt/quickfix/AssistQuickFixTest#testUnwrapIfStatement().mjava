  @Test
  public void testUnwrapIfStatement() throws Exception {

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        if (1+ 3 == 6) {\n");
    buf.append("            StringBuffer buf= new StringBuffer();\n");
    buf.append("            buf.append(1);\n");
    buf.append("            buf.append(2);\n");
    buf.append("            buf.append(3);\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String str = "if";
    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 4);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview1 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        StringBuffer buf= new StringBuffer();\n");
    buf.append("        buf.append(1);\n");
    buf.append("        buf.append(2);\n");
    buf.append("        buf.append(3);\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    proposal = (CUCorrectionProposal) proposals.get(1);
    String preview2 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        if (1+ 3 == 6) {\n");
    buf.append("            StringBuffer buf= new StringBuffer();\n");
    buf.append("            buf.append(1);\n");
    buf.append("            buf.append(2);\n");
    buf.append("            buf.append(3);\n");
    buf.append("        } else {\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected2 = buf.toString();

    proposal = (CUCorrectionProposal) proposals.get(2);
    String preview3 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        if (1+ 3 != 6)\n");
    buf.append("            return;\n");
    buf.append("        StringBuffer buf= new StringBuffer();\n");
    buf.append("        buf.append(1);\n");
    buf.append("        buf.append(2);\n");
    buf.append("        buf.append(3);\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected3 = buf.toString();

    proposal = (CUCorrectionProposal) proposals.get(3);
    String preview4 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        switch (6) {\n");
    buf.append("            case 1+ 3 :\n");
    buf.append("                StringBuffer buf= new StringBuffer();\n");
    buf.append("                buf.append(1);\n");
    buf.append("                buf.append(2);\n");
    buf.append("                buf.append(3);\n");
    buf.append("                break;\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected4 = buf.toString();

    assertEqualStringsIgnoreOrder(
        new String[] {preview1, preview2, preview3, preview4},
        new String[] {expected1, expected2, expected3, expected4});
  }

