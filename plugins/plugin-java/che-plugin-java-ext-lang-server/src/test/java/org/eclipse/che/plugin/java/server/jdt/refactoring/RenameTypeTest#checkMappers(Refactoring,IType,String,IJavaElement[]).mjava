  private void checkMappers(
      Refactoring refactoring, IType type, String newCUName, IJavaElement[] someClassMembers) {
    RenameTypeProcessor rtp =
        (RenameTypeProcessor) ((RenameRefactoring) refactoring).getProcessor();

    ICompilationUnit newUnit =
        (ICompilationUnit) rtp.getRefactoredJavaElement(type.getCompilationUnit());
    TestCase.assertTrue(newUnit.exists());
    TestCase.assertTrue(newUnit.getElementName().equals(newCUName));

    IFile newFile = (IFile) rtp.getRefactoredResource(type.getResource());
    TestCase.assertTrue(newFile.exists());
    TestCase.assertTrue(newFile.getName().equals(newCUName));

    if ((type.getParent().getElementType() == IJavaElement.COMPILATION_UNIT)
        && type.getCompilationUnit().getElementName().equals(type.getElementName() + ".java")) {
      Assert.assertFalse(type.getCompilationUnit().exists());
      Assert.assertFalse(type.getResource().exists());
    }

    IPackageFragment oldPackage = (IPackageFragment) type.getCompilationUnit().getParent();
    IPackageFragment newPackage = (IPackageFragment) rtp.getRefactoredJavaElement(oldPackage);
    Assert.assertEquals(oldPackage, newPackage);

    for (int i = 0; i < someClassMembers.length; i++) {
      IMember member = (IMember) someClassMembers[i];
      IJavaElement refactoredMember = rtp.getRefactoredJavaElement(member);
      if (member instanceof IMethod && member.getElementName().equals(type.getElementName()))
        continue; // constructor
      TestCase.assertTrue(refactoredMember.exists());
      Assert.assertEquals(member.getElementName(), refactoredMember.getElementName());
      Assert.assertFalse(refactoredMember.equals(member));
    }
  }

