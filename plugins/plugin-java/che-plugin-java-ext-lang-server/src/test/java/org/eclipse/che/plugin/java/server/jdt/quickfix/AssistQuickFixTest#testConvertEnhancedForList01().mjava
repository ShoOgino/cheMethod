  @Test
  public void testConvertEnhancedForList01() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Arrays;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        for (Number number : getNums()) {\n");
    buf.append("            System.out.println(number.doubleValue());\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("    private List<? extends Number> getNums() {\n");
    buf.append("        return Arrays.asList(1, 2.34, 0xFFFF);\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf(":"), 0);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 4);
    assertCorrectLabels(proposals);

    String[] expected = new String[4];
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Arrays;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        List<? extends Number> nums = getNums();\n");
    buf.append("        for (int i = 0; i < nums.size(); i++) {\n");
    buf.append("            Number number = nums.get(i);\n");
    buf.append("            System.out.println(number.doubleValue());\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("    private List<? extends Number> getNums() {\n");
    buf.append("        return Arrays.asList(1, 2.34, 0xFFFF);\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Arrays;\n");
    buf.append("import java.util.Iterator;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append(
        "        for (Iterator<? extends Number> iterator = getNums().iterator(); iterator\n");
    buf.append("                .hasNext();) {\n");
    buf.append("            Number number = iterator.next();\n");
    buf.append("            System.out.println(number.doubleValue());\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("    private List<? extends Number> getNums() {\n");
    buf.append("        return Arrays.asList(1, 2.34, 0xFFFF);\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Arrays;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        System.out.println(number.doubleValue());\n");
    buf.append("    }\n");
    buf.append("    private List<? extends Number> getNums() {\n");
    buf.append("        return Arrays.asList(1, 2.34, 0xFFFF);\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Arrays;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        for (Number number : getNums())\n");
    buf.append("            System.out.println(number.doubleValue());\n");
    buf.append("    }\n");
    buf.append("    private List<? extends Number> getNums() {\n");
    buf.append("        return Arrays.asList(1, 2.34, 0xFFFF);\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[3] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

