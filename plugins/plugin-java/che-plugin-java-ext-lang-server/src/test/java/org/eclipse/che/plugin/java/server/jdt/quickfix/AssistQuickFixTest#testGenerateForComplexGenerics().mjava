  @Test
  public void testGenerateForComplexGenerics() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.List;\n");
    buf.append("public class E {\n");
    buf.append("    void foo() {\n");
    buf.append("        getIterable()\n");
    buf.append("    }\n");
    buf.append(
        "    <T extends Iterable<? super Number> & Comparable<Number>> Iterable<T> getIterable() {\n");
    buf.append("        return null;\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    Map saveOptions = fJProject1.getOptions(false);
    Map newOptions = new HashMap(saveOptions);
    newOptions.put(DefaultCodeFormatterConstants.FORMATTER_PUT_EMPTY_STATEMENT_ON_NEW_LINE, "true");
    try {
      fJProject1.setOptions(newOptions);
      String selection = "getIterable()";
      AssistContext context =
          getCorrectionContext(cu, buf.toString().indexOf(selection) + selection.length(), 0);
      List proposals = collectAssists(context, false);

      assertNumberOfProposals(proposals, 6);
      assertCorrectLabels(proposals);

      String[] expected = new String[2];
      buf = new StringBuffer();
      buf.append("package test1;\n");
      buf.append("import java.util.List;\n");
      buf.append("public class E {\n");
      buf.append("    void foo() {\n");
      buf.append("        for (Iterable<? super Number> iterable : getIterable()) {\n");
      buf.append("            \n");
      buf.append("        }\n");
      buf.append("    }\n");
      buf.append(
          "    <T extends Iterable<? super Number> & Comparable<Number>> Iterable<T> getIterable() {\n");
      buf.append("        return null;\n");
      buf.append("    }\n");
      buf.append("}\n");
      expected[0] = buf.toString();

      buf = new StringBuffer();
      buf.append("package test1;\n");
      buf.append("import java.util.Iterator;\n");
      buf.append("import java.util.List;\n");
      buf.append("public class E {\n");
      buf.append("    void foo() {\n");
      buf.append(
          "        for (Iterator<? extends Iterable<? super Number>> iterator = getIterable()\n");
      buf.append("                .iterator(); iterator.hasNext();) {\n");
      buf.append("            Iterable<? super Number> iterable = iterator.next();\n");
      buf.append("            \n");
      buf.append("        }\n");
      buf.append("    }\n");
      buf.append(
          "    <T extends Iterable<? super Number> & Comparable<Number>> Iterable<T> getIterable() {\n");
      buf.append("        return null;\n");
      buf.append("    }\n");
      buf.append("}\n");
      expected[1] = buf.toString();

      assertExpectedExistInProposals(proposals, expected);
    } finally {
      fJProject1.setOptions(saveOptions);
    }
  }

