  @Test
  public void testConvertToIfReturn2() throws Exception {
    // negative cases
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo1() {\n");
    buf.append("        if (true) {\n");
    buf.append("            System.out.println(\"1\");\n");
    buf.append("            System.out.println(\"2\");\n");
    buf.append("        }\n");
    buf.append("        bar();");
    buf.append("    }\n\n");
    buf.append("    public void foo2() {\n");
    buf.append("        if (a) \n");
    buf.append("            if (b) {\n");
    buf.append("                System.out.println(\"1\");\n");
    buf.append("                System.out.println(\"2\");\n");
    buf.append("        	}\n");
    buf.append("    }\n\n");
    buf.append("    public void foo3() {\n");
    buf.append("        if (c) {\n");
    buf.append("            return;\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String str = "if (true)"; // not the last executable statement in the method
    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
    List proposals = collectAssists(context, false);
    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);
    assertProposalDoesNotExist(
        proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);

    str = "if (b)"; // not present in a block
    context = getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
    proposals = collectAssists(context, false);
    assertNumberOfProposals(proposals, 4);
    assertCorrectLabels(proposals);
    assertProposalDoesNotExist(
        proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);

    str = "if (c)"; // no other statement in 'then' part other than 'return'
    context = getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
    proposals = collectAssists(context, false);
    assertNumberOfProposals(proposals, 4);
    assertCorrectLabels(proposals);
    assertProposalDoesNotExist(
        proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);
  }

