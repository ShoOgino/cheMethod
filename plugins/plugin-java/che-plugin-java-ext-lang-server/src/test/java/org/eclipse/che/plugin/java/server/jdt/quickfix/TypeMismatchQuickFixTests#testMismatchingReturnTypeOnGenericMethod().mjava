  @Test
  public void testMismatchingReturnTypeOnGenericMethod() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);

    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.lang.annotation.Annotation;\n");
    buf.append("import java.lang.reflect.AccessibleObject;\n");
    buf.append("public class E {\n");
    buf.append("    void m() {\n");
    buf.append("        new AccessibleObject() {\n");
    buf.append(
        "            public <T extends Annotation> void getAnnotation(Class<T> annotationClass) {\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 1);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview1 = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.lang.annotation.Annotation;\n");
    buf.append("import java.lang.reflect.AccessibleObject;\n");
    buf.append("public class E {\n");
    buf.append("    void m() {\n");
    buf.append("        new AccessibleObject() {\n");
    buf.append(
        "            public <T extends Annotation> T getAnnotation(Class<T> annotationClass) {\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    assertEqualStringsIgnoreOrder(new String[] {preview1}, new String[] {expected1});
  }

