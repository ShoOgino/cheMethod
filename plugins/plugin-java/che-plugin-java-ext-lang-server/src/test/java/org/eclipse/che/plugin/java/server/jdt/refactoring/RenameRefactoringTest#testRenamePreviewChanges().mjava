    @Test
    public void testRenamePreviewChanges() throws Exception {
        StringBuilder b = new StringBuilder();
        b.append("package p;\n");
        b.append("public class A{\n private A a; \n}\n");

        ICompilationUnit unit = getPackageP().createCompilationUnit("A.java", b.toString(), false, null);
        IType type = unit.getAllTypes()[0];
        RenameRefactoringSession refactoring = manager.createRenameRefactoring(type, unit, b.indexOf("A"), false);
        DtoServerImpls.ValidateNewNameImpl validateNewName = new DtoServerImpls.ValidateNewNameImpl();
        validateNewName.setSessionId(refactoring.getSessionId());
        validateNewName.setNewName("MyClass");
        RefactoringStatus status = manager.renameValidateNewName(validateNewName);
        manager.createChange(refactoring.getSessionId());
        RefactoringPreview preview = manager.getRefactoringPreview(refactoring.getSessionId());

        RefactoringChange change1 = new DtoServerImpls.ChangeEnabledStateImpl();
        change1.setSessionId(refactoring.getSessionId());
        change1.setChangeId(preview.getChildrens().get(0).getId());
        ChangePreview changePreview = manager.getChangePreview(change1);

        assertThat(changePreview).isNotNull();
        assertThat(changePreview.getFileName()).isNotNull().isNotEmpty();
        assertThat(changePreview.getOldContent()).isNotNull().isNotEmpty();
        assertThat(changePreview.getNewContent()).isNotNull().isNotEmpty();
        assertThat(changePreview.getNewContent()).isNotEqualTo(changePreview.getOldContent());
    }

