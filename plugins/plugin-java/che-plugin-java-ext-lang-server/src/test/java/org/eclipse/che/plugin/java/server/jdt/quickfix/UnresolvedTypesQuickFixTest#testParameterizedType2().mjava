  @Test
  @Ignore
  public void testParameterizedType2() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Map;\n");
    buf.append("public class E<T> {\n");
    buf.append("    static class SomeType<S1, S2> { }\n");
    buf.append("    void foo() {\n");
    buf.append("        SomeType<String, String> list= new XXY<String, String>() { };\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    IProblem[] problems = astRoot.getProblems();
    assertNumberOfProblems(2, problems);

    ArrayList proposals = collectCorrections(cu, problems[0], null);
    proposals.addAll(collectCorrections(cu, problems[1], null));

    assertCorrectLabels(proposals);

    String[] expected = new String[3];
    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Map;\n");
    buf.append("public class E<T> {\n");
    buf.append("    static class SomeType<S1, S2> { }\n");
    buf.append("    void foo() {\n");
    buf.append("        SomeType<String, String> list= new SomeType<String, String>() { };\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("import test1.E.SomeType;\n");
    buf.append("\n");
    buf.append("public class XXY<T1, T2> extends SomeType<String, String> {\n");
    buf.append("\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("\n");
    buf.append("public interface XXY<T1, T2> {\n");
    buf.append("\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

