  @Test
  public void testSuppressWarningsAnonymousClass1() throws Exception {
    Hashtable options = JavaCore.getOptions();
    options.put(JavaCore.COMPILER_PB_RAW_TYPE_REFERENCE, JavaCore.WARNING);
    JavaCore.setOptions(options);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1; \n");
    buf.append("import java.util.*;\n");
    buf.append("\n");
    buf.append("public class A {\n");
    buf.append("    public void foo() {\n");
    buf.append("        @SuppressWarnings(\"unused\")\n");
    buf.append("        final Object object = new Object() {\n");
    buf.append("            {\n");
    buf.append("                for (List l = new ArrayList(), x = new Vector();;) {\n");
    buf.append("                    if (l == x)\n");
    buf.append("                        break;\n");
    buf.append("                }\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    };\n");
    buf.append("};\n");
    ICompilationUnit cu = pack1.createCompilationUnit("A.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot, 3);

    assertCorrectLabels(proposals);
    assertNumberOfProposals(proposals, 5);
    String[] expected = new String[3];

    buf = new StringBuffer();
    buf.append("package test1; \n");
    buf.append("import java.util.*;\n");
    buf.append("\n");
    buf.append("public class A {\n");
    buf.append("    public void foo() {\n");
    buf.append("        @SuppressWarnings(\"unused\")\n");
    buf.append("        final Object object = new Object() {\n");
    buf.append("            {\n");
    buf.append("                for (@SuppressWarnings(\"rawtypes\")\n");
    buf.append("                List l = new ArrayList(), x = new Vector();;) {\n");
    buf.append("                    if (l == x)\n");
    buf.append("                        break;\n");
    buf.append("                }\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    };\n");
    buf.append("};\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1; \n");
    buf.append("import java.util.*;\n");
    buf.append("\n");
    buf.append("public class A {\n");
    buf.append("    public void foo() {\n");
    buf.append("        @SuppressWarnings({\"unused\", \"rawtypes\"})\n");
    buf.append("        final Object object = new Object() {\n");
    buf.append("            {\n");
    buf.append("                for (List l = new ArrayList(), x = new Vector();;) {\n");
    buf.append("                    if (l == x)\n");
    buf.append("                        break;\n");
    buf.append("                }\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    };\n");
    buf.append("};\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1; \n");
    buf.append("import java.util.*;\n");
    buf.append("\n");
    buf.append("public class A {\n");
    buf.append("    @SuppressWarnings(\"rawtypes\")\n");
    buf.append("    public void foo() {\n");
    buf.append("        @SuppressWarnings(\"unused\")\n");
    buf.append("        final Object object = new Object() {\n");
    buf.append("            {\n");
    buf.append("                for (List l = new ArrayList(), x = new Vector();;) {\n");
    buf.append("                    if (l == x)\n");
    buf.append("                        break;\n");
    buf.append("                }\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    };\n");
    buf.append("};\n");
    expected[1] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

