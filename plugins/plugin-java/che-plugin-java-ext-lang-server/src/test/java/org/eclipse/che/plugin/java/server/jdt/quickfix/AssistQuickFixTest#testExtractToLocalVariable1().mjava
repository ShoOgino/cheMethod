  @Test
  public void testExtractToLocalVariable1() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public E() {\n");
    buf.append("        int a = 1;\n");
    buf.append("        int b = 1;\n");
    buf.append("        int d = a + b;\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String selection = "a + b";
    int offset = buf.toString().indexOf(selection);
    AssistContext context = getCorrectionContext(cu, offset, selection.length());
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 5);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public E() {\n");
    buf.append("        int a = 1;\n");
    buf.append("        int b = 1;\n");
    buf.append("        int i = a + b;\n");
    buf.append("        int d = i;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex1 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public E() {\n");
    buf.append("        int a = 1;\n");
    buf.append("        int b = 1;\n");
    buf.append("        int i = a + b;\n");
    buf.append("        int d = i;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex2 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public E() {\n");
    buf.append("        int a = 1;\n");
    buf.append("        int b = 1;\n");
    buf.append("        int d = extracted(a, b);\n");
    buf.append("    }\n");
    buf.append("\n");
    buf.append("    private int extracted(int a, int b) {\n");
    buf.append("        return a + b;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex3 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public E() {\n");
    buf.append("        int a = 1;\n");
    buf.append("        int b = 1;\n");
    buf.append("        int d = (a + b);\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex4 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public E() {\n");
    buf.append("        int a = 1;\n");
    buf.append("        int b = 1;\n");
    buf.append("        int d = b + a;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex5 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {ex1, ex2, ex3, ex4, ex5});
  }

