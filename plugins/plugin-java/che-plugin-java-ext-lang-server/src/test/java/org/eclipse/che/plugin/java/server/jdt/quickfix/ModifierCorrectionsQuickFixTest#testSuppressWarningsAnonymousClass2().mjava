    @Test
	public void testSuppressWarningsAnonymousClass2() throws Exception {
		Hashtable options= JavaCore.getOptions();
		options.put(JavaCore.COMPILER_PB_UNCHECKED_TYPE_OPERATION, JavaCore.WARNING);
		JavaCore.setOptions(options);

		IPackageFragment pack1= fSourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1; \n");
		buf.append("import java.util.*;\n");
		buf.append("\n");
		buf.append("public class A {\n");
		buf.append("    final Runnable r= new Runnable() {\n");
		buf.append("        public void run() {\n");
		buf.append("            boolean b;\n");
		buf.append("            for (b = new ArrayList().add(1);;) {\n");
		buf.append("                if (b)\n");
		buf.append("                    return;\n");
		buf.append("                        break;\n");
		buf.append("            }\n");
		buf.append("        }\n");
		buf.append("    };\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("A.java", buf.toString(), false, null);

		CompilationUnit astRoot= getASTRoot(cu);
		ArrayList proposals= collectCorrections(cu, astRoot, 1);

		assertCorrectLabels(proposals);
		assertNumberOfProposals(proposals, 2);
		String[] expected= new String[1];
		buf= new StringBuffer();
		buf.append("package test1; \n");
		buf.append("import java.util.*;\n");
		buf.append("\n");
		buf.append("public class A {\n");
		buf.append("    final Runnable r= new Runnable() {\n");
		buf.append("        @SuppressWarnings(\"unchecked\")\n");
		buf.append("        public void run() {\n");
		buf.append("            boolean b;\n");
		buf.append("            for (b = new ArrayList().add(1);;) {\n");
		buf.append("                if (b)\n");
		buf.append("                    return;\n");
		buf.append("                        break;\n");
		buf.append("            }\n");
		buf.append("        }\n");
		buf.append("    };\n");
		buf.append("}\n");
		expected[0]= buf.toString();

		assertExpectedExistInProposals(proposals, expected);
	}

