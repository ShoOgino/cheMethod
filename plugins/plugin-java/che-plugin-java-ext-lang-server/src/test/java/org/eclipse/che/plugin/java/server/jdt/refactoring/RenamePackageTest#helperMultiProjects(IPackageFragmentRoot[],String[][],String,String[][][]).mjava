  /**
   * Custom project and source folder structure.
   *
   * @param roots source folders
   * @param packageNames package names per root
   * @param newPackageName the new package name for packageNames[0][0]
   * @param cuNames cu names per package
   * @throws Exception if one of the resources cannot be created
   */
  private void helperMultiProjects(
      IPackageFragmentRoot[] roots,
      String[][] packageNames,
      String newPackageName,
      String[][][] cuNames)
      throws Exception {
    ICompilationUnit[][][] cus = new ICompilationUnit[roots.length][][];
    IPackageFragment thisPackage = null;

    for (int r = 0; r < roots.length; r++) {
      IPackageFragment[] packages = new IPackageFragment[packageNames[r].length];
      cus[r] = new ICompilationUnit[packageNames[r].length][];
      for (int pa = 0; pa < packageNames[r].length; pa++) {
        packages[pa] = roots[r].createPackageFragment(packageNames[r][pa], true, null);
        cus[r][pa] = new ICompilationUnit[cuNames[r][pa].length];
        if (r == 0 && pa == 0) thisPackage = packages[pa];
        for (int typ = 0; typ < cuNames[r][pa].length; typ++) {
          cus[r][pa][typ] =
              createCUfromTestFile(
                  packages[pa],
                  cuNames[r][pa][typ],
                  roots[r].getElementName() + "/" + packageNames[r][pa].replace('.', '/') + "/");
        }
      }
    }

    RenameJavaElementDescriptor descriptor =
        createRefactoringDescriptor(thisPackage, newPackageName);
    descriptor.setUpdateReferences(fUpdateReferences);
    descriptor.setUpdateTextualOccurrences(fUpdateTextualMatches);
    setFilePatterns(descriptor);
    descriptor.setUpdateHierarchy(fRenameSubpackages);
    RefactoringStatus result = performRefactoring(descriptor);
    TestCase.assertEquals("preconditions were supposed to pass", null, result);

    assertTrue("package not renamed", !roots[0].getPackageFragment(packageNames[0][0]).exists());
    IPackageFragment newPackage = roots[0].getPackageFragment(newPackageName);
    assertTrue("new package does not exist", newPackage.exists());

    for (int r = 0; r < cuNames.length; r++) {
      for (int pa = 0; pa < cuNames[r].length; pa++) {
        String packageName =
            roots[r].getElementName()
                + "/"
                + ((r == 0 && pa == 0) ? newPackageName : packageNames[r][pa]).replace('.', '/')
                + "/";
        for (int typ = 0; typ < cuNames[r][pa].length; typ++) {
          String s1 = getFileContents(getOutputTestFileName(cuNames[r][pa][typ], packageName));
          ICompilationUnit cu =
              (r == 0 && pa == 0)
                  ? newPackage.getCompilationUnit(cuNames[r][pa][typ] + ".java")
                  : cus[r][pa][typ];
          //DebugUtils.dump("cu:" + cu.getElementName());
          String s2 = cu.getSource();

          //DebugUtils.dump("expected:" + s1);
          //DebugUtils.dump("was:" + s2);
          assertEqualLines("invalid update in file " + cu.toString(), s1, s2);
        }
      }
    }
  }

