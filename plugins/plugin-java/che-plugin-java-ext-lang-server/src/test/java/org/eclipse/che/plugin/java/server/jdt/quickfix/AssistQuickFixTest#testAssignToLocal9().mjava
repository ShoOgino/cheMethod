  @Test
  public void testAssignToLocal9() throws Exception {
    // assign to local of field access

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int[] fField;\n");
    buf.append("    public void foo() {\n");
    buf.append("        fField[0];\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String string = "fField[0];";
    int offset = buf.toString().indexOf(string);
    AssistContext context = getCorrectionContext(cu, offset, string.length());
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 3);
    assertCorrectLabels(proposals);

    String[] expected = new String[3];

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int[] fField;\n");
    buf.append("    public void foo() {\n");
    buf.append("        int i = fField[0];\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[0] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int[] fField;\n");
    buf.append("    private int i;\n");
    buf.append("    public void foo() {\n");
    buf.append("        i = fField[0];\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[1] = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int[] fField;\n");
    buf.append("    public void foo() {\n");
    buf.append("        extracted();\n");
    buf.append("    }\n");
    buf.append("    private void extracted() {\n");
    buf.append("        fField[0];\n");
    buf.append("    }\n");
    buf.append("}\n");
    expected[2] = buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

