  @Test
  public void testConvertToAnonymousClassCreationWithParameterName() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.function.IntFunction;\n");
    buf.append("public class E {\n");
    buf.append("    IntFunction<String> toString= (int i) -> Integer.toString(i);\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    int offset = buf.toString().indexOf("->");
    AssistContext context = getCorrectionContext(cu, offset, 0);
    assertNoErrors(context);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.function.IntFunction;\n");
    buf.append("public class E {\n");
    buf.append("    IntFunction<String> toString= new IntFunction<String>() {\n");
    buf.append("        @Override\n");
    buf.append("        public String apply(int i) {\n");
    buf.append("            return Integer.toString(i);\n");
    buf.append("        }\n");
    buf.append("    };\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {expected1});
  }

