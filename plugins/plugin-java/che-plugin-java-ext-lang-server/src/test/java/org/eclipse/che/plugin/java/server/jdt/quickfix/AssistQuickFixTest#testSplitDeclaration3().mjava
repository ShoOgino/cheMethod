  @Test
  public void testSplitDeclaration3() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        final int i[] = null;\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String str = "i[]";
    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf(str), 0);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        final int i[];\n");
    buf.append("        i = null;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex1 = buf.toString();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int is[];\n");
    buf.append("\n");
    buf.append("    public void foo() {\n");
    buf.append("        is = null;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex2 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {ex1, ex2});
  }

