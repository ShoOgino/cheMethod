  @Test
  public void testPullNegationUp() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo(int i, int j, int k, int m, int n) {\n");
    buf.append("        boolean b = i > 1 || j >= 2 && k >= 3 || m > 4 || n > 5;\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    int offset1 = buf.toString().indexOf("j >= 2");
    int offset2 = buf.toString().indexOf(" || m > 4");
    AssistContext context = getCorrectionContext(cu, offset1, offset2 - offset1);
    assertNoErrors(context);
    List proposals = collectAssists(context, false);

    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo(int i, int j, int k, int m, int n) {\n");
    buf.append("        boolean b = i > 1 || !(j < 2 || k < 3) || m > 4 || n > 5;\n");
    buf.append("    }\n");
    buf.append("}\n");

    String expected1 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {expected1});
  }

