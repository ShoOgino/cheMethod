  @Test
  public void testUnusedPrivateField1() throws Exception {
    Hashtable hashtable = JavaCore.getOptions();
    hashtable.put(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER, JavaCore.ERROR);
    JavaCore.setOptions(hashtable);

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int count, color= count;\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 1);
    assertCorrectLabels(proposals);

    String[] expected = new String[2];

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int count;\n");
    buf.append("}\n");
    expected[0] = buf.toString();
    //
    //		buf= new StringBuffer();
    //		buf.append("package test1;\n");
    //		buf.append("public class E {\n");
    //		buf.append("    private int count, color= count;\n");
    //		buf.append("\n");
    //		buf.append("    public int getColor() {\n");
    //		buf.append("        return color;\n");
    //		buf.append("    }\n");
    //		buf.append("\n");
    //		buf.append("    public void setColor(int color) {\n");
    //		buf.append("        this.color = color;\n");
    //		buf.append("    }\n");
    //		buf.append("}\n");
    //		expected[1]= buf.toString();

    assertExpectedExistInProposals(proposals, expected);
  }

