  @Test
  public void testUndefinedConstructorWithEnclosing3() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class F {\n");
    buf.append("    public static class SubF {\n");
    buf.append("        public SubF(int i) {\n");
    buf.append("        }\n");
    buf.append("        public class SubF2 extends SubF {\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("F.java", buf.toString(), false, null);

    CompilationUnit astRoot = getASTRoot(cu);
    ArrayList proposals = collectCorrections(cu, astRoot);
    assertNumberOfProposals(proposals, 1);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class F {\n");
    buf.append("    public static class SubF {\n");
    buf.append("        public SubF(int i) {\n");
    buf.append("        }\n");
    buf.append("        public class SubF2 extends SubF {\n");
    buf.append("\n");
    buf.append("            public SubF2(int i) {\n");
    buf.append("                super(i);\n");
    buf.append("            }\n");
    buf.append("        }\n");
    buf.append("    }\n");
    buf.append("}\n");

    assertEqualString(preview, buf.toString());
  }

