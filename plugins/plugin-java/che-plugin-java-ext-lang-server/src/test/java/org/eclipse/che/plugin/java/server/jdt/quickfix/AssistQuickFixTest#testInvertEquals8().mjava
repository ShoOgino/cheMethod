  @Test
  public void testInvertEquals8() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        boolean x = false && \"a\".equals(get());\n");
    buf.append("    }\n");
    buf.append("    String get() {\n");
    buf.append("        return \"a\";\n");
    buf.append("    }\n");
    buf.append("}\n");

    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String str = "equals";
    AssistContext context = getCorrectionContext(cu, buf.toString().indexOf(str), 0);
    List proposals = collectAssists(context, FILTER_EQ);

    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        boolean x = false && get().equals(\"a\");\n");
    buf.append("    }\n");
    buf.append("    String get() {\n");
    buf.append("        return \"a\";\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex1 = buf.toString();
    assertEqualString(preview, ex1);

    proposal = (CUCorrectionProposal) proposals.get(1);
    preview = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        boolean x = (false && \"a\".equals(get()));\n");
    buf.append("    }\n");
    buf.append("    String get() {\n");
    buf.append("        return \"a\";\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex2 = buf.toString();
    assertEqualString(preview, ex2);

    cu = pack1.createCompilationUnit("E.java", ex1, true, null);
    context = getCorrectionContext(cu, ex1.indexOf(str), 0);
    proposals = collectAssists(context, FILTER_EQ);

    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    proposal = (CUCorrectionProposal) proposals.get(0);
    preview = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        boolean x = false && \"a\".equals(get());\n");
    buf.append("    }\n");
    buf.append("    String get() {\n");
    buf.append("        return \"a\";\n");
    buf.append("    }\n");
    buf.append("}\n");
    assertEqualString(preview, buf.toString());

    proposal = (CUCorrectionProposal) proposals.get(1);
    preview = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public void foo() {\n");
    buf.append("        boolean x = (false && get().equals(\"a\"));\n");
    buf.append("    }\n");
    buf.append("    String get() {\n");
    buf.append("        return \"a\";\n");
    buf.append("    }\n");
    buf.append("}\n");
    assertEqualString(preview, buf.toString());
  }

