  @Test
  public void testInsertInferredTypeArguments() throws Exception {

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.ArrayList;\n");
    buf.append("import java.util.List;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("\n");
    buf.append("    private void foo() {\n");
    buf.append("        List<String> al1 = new ArrayList<>();\n");
    buf.append("\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    ArrayList proposals = collectCorrections2(cu, 1);
    assertCorrectLabels(proposals);

    CUCorrectionProposal proposal = (CUCorrectionProposal) proposals.get(0);
    String preview = getPreviewContent(proposal);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.ArrayList;\n");
    buf.append("import java.util.List;\n");
    buf.append("\n");
    buf.append("public class E {\n");
    buf.append("\n");
    buf.append("    private void foo() {\n");
    buf.append("        List<String> al1 = new ArrayList<String>();\n");
    buf.append("\n");
    buf.append("    }\n");
    buf.append("}\n");
    assertEqualString(preview, buf.toString());

    String expected1 = buf.toString();
    assertExpectedExistInProposals(proposals, new String[] {expected1});
  }

