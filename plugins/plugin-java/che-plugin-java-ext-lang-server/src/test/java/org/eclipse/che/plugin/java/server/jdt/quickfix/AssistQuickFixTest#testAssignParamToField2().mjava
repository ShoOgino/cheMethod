  @Test
  public void testAssignParamToField2() throws Exception {
    //		Preferences corePrefs= JavaPlugin.getJavaCorePluginPreferences();
    //		corePrefs.setValue(JavaCore.CODEASSIST_FIELD_PREFIXES, "f");
    fJProject1.setOption(org.eclipse.jdt.core.JavaCore.CODEASSIST_FIELD_PREFIXES, "f");

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Vector;\n");
    buf.append("public class E {\n");
    buf.append("    public  E(int count, Vector vec[]) {\n");
    buf.append("        super();\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    String selection = "vec";
    int offset = buf.toString().indexOf(selection);
    AssistContext context = getCorrectionContext(cu, offset, selection.length());
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 1);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("import java.util.Vector;\n");
    buf.append("public class E {\n");
    buf.append("    private Vector[] fVec;\n");
    buf.append("\n");
    buf.append("    public  E(int count, Vector vec[]) {\n");
    buf.append("        super();\n");
    buf.append("        fVec = vec;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String ex1 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {ex1});
  }

