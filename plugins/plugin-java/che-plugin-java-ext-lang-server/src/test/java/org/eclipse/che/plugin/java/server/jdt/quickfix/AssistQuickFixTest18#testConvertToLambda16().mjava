  @Test
  public void testConvertToLambda16() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("interface FI {\n");
    buf.append("    void foo();\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("class C1 {\n");
    buf.append("    void fun1() {\n");
    buf.append("        int c = 0; // [1]\n");
    buf.append("        FI test = new FI() {\n");
    buf.append("            @Override\n");
    buf.append("            public void foo() {\n");
    buf.append("                for (int c = 0; c < 10;) { /* [2] */ }\n");
    buf.append("                for (int c = 0; c < 20;) { /* [3] */ }\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("C1.java", buf.toString(), false, null);

    int offset = buf.toString().indexOf("FI()");
    AssistContext context = getCorrectionContext(cu, offset, 0);
    assertNoErrors(context);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("interface FI {\n");
    buf.append("    void foo();\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("class C1 {\n");
    buf.append("    void fun1() {\n");
    buf.append("        int c = 0; // [1]\n");
    buf.append("        FI test = () -> {\n");
    buf.append("            for (int c1 = 0; c1 < 10;) { /* [2] */ }\n");
    buf.append("            for (int c2 = 0; c2 < 20;) { /* [3] */ }\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {expected1});
  }

