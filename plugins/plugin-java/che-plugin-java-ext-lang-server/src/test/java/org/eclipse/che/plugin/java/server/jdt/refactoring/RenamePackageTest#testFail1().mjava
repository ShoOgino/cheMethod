  //	public void testHierarchicalJUnit() throws Exception {
  //		fRenameSubpackages= true;
  //
  //		File junitSrcArchive=
  // JavaTestPlugin.getDefault().getFileInPlugin(JavaProjectHelper.JUNIT_SRC_381);
  //		assertTrue(junitSrcArchive != null && junitSrcArchive.exists());
  //		IPackageFragmentRoot src=
  // JavaProjectHelper.addSourceContainerWithImport(getRoot().getJavaProject(), "src",
  // junitSrcArchive,
  // JavaProjectHelper.JUNIT_SRC_ENCODING);
  //
  //		String[] packageNames= new String[]{"junit", "junit.extensions", "junit.framework",
  // "junit.runner", "junit.samples", "junit
  // .samples.money", "junit.tests", "junit.tests.extensions", "junit.tests.framework",
  // "junit.tests.runner", "junit.textui"};
  //		ICompilationUnit[][] cus= new ICompilationUnit[packageNames.length][];
  //		for (int i= 0; i < cus.length; i++) {
  //			cus[i]= src.getPackageFragment(packageNames[i]).getCompilationUnits();
  //		}
  //		IPackageFragment thisPackage= src.getPackageFragment("junit");
  //
  //		ParticipantTesting.reset();
  //		PackageRename rename= new PackageRename(packageNames, new
  // String[packageNames.length][0],"jdiverge");
  //
  //		RenameArguments[] renameArguments= new RenameArguments[packageNames.length + 1];
  //		for (int i= 0; i < packageNames.length; i++) {
  //			renameArguments[i]= new RenameArguments(rename.getNewPackageName(packageNames[i]), true);
  //		}
  //		renameArguments[packageNames.length]= new RenameArguments("jdiverge", true);
  //		String[] renameHandles= new String[packageNames.length + 1];
  //
  //	System.arraycopy(ParticipantTesting.createHandles(JavaElementUtil.getPackageAndSubpackages(thisPackage)), 0, renameHandles, 0,
  // packageNames.length);
  //		renameHandles[packageNames.length]=
  // ParticipantTesting.createHandles(thisPackage.getResource())[0];
  //
  //		// --- execute:
  //		RenameJavaElementDescriptor descriptor= createRefactoringDescriptor(thisPackage, "jdiverge");
  //		descriptor.setUpdateReferences(fUpdateReferences);
  //		descriptor.setUpdateTextualOccurrences(fUpdateTextualMatches);
  //		setFilePatterns(descriptor);
  //		descriptor.setUpdateHierarchy(fRenameSubpackages);
  //		Refactoring ref= createRefactoring(descriptor);
  //
  //		performDummySearch();
  //		IUndoManager undoManager= getUndoManager();
  //		CreateChangeOperation create= new CreateChangeOperation(
  //			new CheckConditionsOperation(ref, CheckConditionsOperation.ALL_CONDITIONS),
  //			RefactoringStatus.FATAL);
  //		PerformChangeOperation perform= new PerformChangeOperation(create);
  //		perform.setUndoManager(undoManager, ref.getName());
  //		ResourcesPlugin.getWorkspace().run(perform, new NullProgressMonitor());
  //		RefactoringStatus status= create.getConditionCheckingStatus();
  //		assertTrue("Change wasn't executed", perform.changeExecuted());
  //		Change undo= perform.getUndoChange();
  //		assertNotNull("Undo doesn't exist", undo);
  //		assertTrue("Undo manager is empty", undoManager.anythingToUndo());
  //
  //		assertFalse(status.hasError());
  //		assertTrue(status.hasWarning());
  //		RefactoringStatusEntry[] statusEntries= status.getEntries();
  //		for (int i= 0; i < statusEntries.length; i++) {
  //			RefactoringStatusEntry entry= statusEntries[i];
  //			assertTrue(entry.isWarning());
  //			assertTrue(entry.getCode() == RefactoringStatusCodes.MAIN_METHOD);
  //		}
  //
  //		assertTrue("package not renamed: " + rename.fPackageNames[0], !
  // src.getPackageFragment(rename.fPackageNames[0]).exists());
  //		IPackageFragment newPackage= src.getPackageFragment(rename.fNewPackageName);
  //		assertTrue("new package does not exist", newPackage.exists());
  //		// ---
  //
  //		ParticipantTesting.testRename(renameHandles, renameArguments);
  //
  //		PerformChangeOperation performUndo= new PerformChangeOperation(undo);
  //		ResourcesPlugin.getWorkspace().run(performUndo, new NullProgressMonitor());
  //
  //		assertTrue("new package still exists", ! newPackage.exists());
  //		assertTrue("original package does not exist: " + rename.fPackageNames[0],
  // src.getPackageFragment(rename.fPackageNames[0]).exists
  // ());
  //
  //		ZipInputStream zis= new ZipInputStream(new BufferedInputStream(new
  // FileInputStream(junitSrcArchive)));
  //		ZipTools.compareWithZipped(src, zis, JavaProjectHelper.JUNIT_SRC_ENCODING);
  //	}
  @Test
  @Ignore
  public void testFail1() throws Exception {
    printTestDisabledMessage("needs revisiting");
    // helper1(new String[]{"r.p1"}, new String[][]{{"A"}}, "r");
  }

