    @Test
	public void testInvalidMultiVariableModifiers() throws Exception {
		
		IPackageFragment pack1= fSourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E  {\n");
		buf.append("    public E() {\n");
		buf.append("        @Deprecated final @SuppressWarnings(\"all\") int a, b, c;\n");
		buf.append("        a = 0; b = 0; c = 12;\n");
		buf.append("        b = 5;\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);
		
		CompilationUnit astRoot= getASTRoot(cu);
		ArrayList proposals= collectCorrections(cu, astRoot);
		assertNumberOfProposals(proposals, 1);
		assertCorrectLabels(proposals);
		
		CUCorrectionProposal proposal= (CUCorrectionProposal) proposals.get(0);
		String preview= getPreviewContent(proposal);
		
		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E  {\n");
		buf.append("    public E() {\n");
		buf.append("        @Deprecated final @SuppressWarnings(\"all\") int a;\n");
		buf.append("        @Deprecated @SuppressWarnings(\"all\") int b;\n");
		buf.append("        @Deprecated final @SuppressWarnings(\"all\") int c;\n");
		buf.append("        a = 0; b = 0; c = 12;\n");
		buf.append("        b = 5;\n");
		buf.append("    }\n");
		buf.append("}\n");
		assertEqualString(preview, buf.toString());
	}

