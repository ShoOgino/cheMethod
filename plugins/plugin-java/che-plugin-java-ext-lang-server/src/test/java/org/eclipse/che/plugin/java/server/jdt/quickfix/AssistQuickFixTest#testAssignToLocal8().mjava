  @Test
  public void testAssignToLocal8() throws Exception {
    // assign to local of field access

    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public class MyLayout {\n");
    buf.append("        int indent;\n");
    buf.append("    }\n");
    buf.append("    public void foo() {\n");
    buf.append("        new MyLayout().indent;\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("E.java", buf.toString(), false, null);

    int offset = buf.toString().indexOf("new MyLayout().indent;");
    AssistContext context = getCorrectionContext(cu, offset, 0);
    List proposals = collectAssists(context, false);

    int numberOfProposals = 5;
    assertNumberOfProposals(proposals, numberOfProposals);
    assertCorrectLabels(proposals);

    ArrayList previews = new ArrayList();
    ArrayList expecteds = new ArrayList();

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public class MyLayout {\n");
    buf.append("        int indent;\n");
    buf.append("    }\n");
    buf.append("    public void foo() {\n");
    buf.append("        int indent = new MyLayout().indent;\n");
    buf.append("    }\n");
    buf.append("}\n");
    addPreviewAndExpected(proposals, buf, expecteds, previews);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private int indent;\n");
    buf.append("    public class MyLayout {\n");
    buf.append("        int indent;\n");
    buf.append("    }\n");
    buf.append("    public void foo() {\n");
    buf.append("        indent = new MyLayout().indent;\n");
    buf.append("    }\n");
    buf.append("}\n");
    addPreviewAndExpected(proposals, buf, expecteds, previews);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public class MyLayout {\n");
    buf.append("        int indent;\n");
    buf.append("    }\n");
    buf.append("    public void foo() {\n");
    buf.append("        MyLayout myLayout = new MyLayout();\n");
    buf.append("        myLayout.indent;\n");
    buf.append("    }\n");
    buf.append("}\n");
    addPreviewAndExpected(proposals, buf, expecteds, previews);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    public class MyLayout {\n");
    buf.append("        int indent;\n");
    buf.append("    }\n");
    buf.append("    public void foo() {\n");
    buf.append("        MyLayout myLayout = new MyLayout();\n");
    buf.append("        myLayout.indent;\n");
    buf.append("    }\n");
    buf.append("}\n");
    addPreviewAndExpected(proposals, buf, expecteds, previews);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("public class E {\n");
    buf.append("    private static final MyLayout MY_LAYOUT = new MyLayout();\n");
    buf.append("    public class MyLayout {\n");
    buf.append("        int indent;\n");
    buf.append("    }\n");
    buf.append("    public void foo() {\n");
    buf.append("        MY_LAYOUT.indent;\n");
    buf.append("    }\n");
    buf.append("}\n");
    addPreviewAndExpected(proposals, buf, expecteds, previews);

    assertEqualStringsIgnoreOrder(previews, expecteds);
  }

