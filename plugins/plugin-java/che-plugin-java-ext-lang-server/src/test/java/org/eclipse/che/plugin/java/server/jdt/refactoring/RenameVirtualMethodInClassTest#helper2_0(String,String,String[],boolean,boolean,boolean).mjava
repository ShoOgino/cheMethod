  private void helper2_0(
      String methodName,
      String newMethodName,
      String[] signatures,
      boolean shouldPass,
      boolean updateReferences,
      boolean createDelegate)
      throws Exception {
    final ICompilationUnit cu = createCUfromTestFile(getPackageP(), "A");
    final IType classA = getType(cu, "A");
    final IMethod method = classA.getMethod(methodName, signatures);
    final RenameJavaElementDescriptor descriptor =
        RefactoringSignatureDescriptorFactory.createRenameJavaElementDescriptor(
            IJavaRefactorings.RENAME_METHOD);
    descriptor.setJavaElement(method);
    descriptor.setNewName(newMethodName);
    descriptor.setUpdateReferences(updateReferences);
    descriptor.setKeepOriginal(createDelegate);
    descriptor.setDeprecateDelegate(createDelegate);
    final RefactoringStatus status = new RefactoringStatus();
    final Refactoring refactoring = descriptor.createRefactoring(status);
    assertNotNull("Refactoring should not be null", refactoring);
    assertTrue("status should be ok", status.isOK());
    assertEquals("was supposed to pass", null, performRefactoring(refactoring));
    if (!shouldPass) {
      assertTrue(
          "incorrect renaming because of java model",
          !getFileContents(getOutputTestFileName("A")).equals(cu.getSource()));
      return;
    }
    String expectedRenaming = getFileContents(getOutputTestFileName("A"));
    String actuaRenaming = cu.getSource();
    assertEqualLines("incorrect renaming", expectedRenaming, actuaRenaming);

    assertTrue("anythingToUndo", RefactoringCore.getUndoManager().anythingToUndo());
    assertTrue("! anythingToRedo", !RefactoringCore.getUndoManager().anythingToRedo());
    // assertEquals("1 to undo", 1, Refactoring.getUndoManager().getRefactoringLog().size());

    RefactoringCore.getUndoManager().performUndo(null, new NullProgressMonitor());
    assertEqualLines("invalid undo", getFileContents(getInputTestFileName("A")), cu.getSource());

    assertTrue("! anythingToUndo", !RefactoringCore.getUndoManager().anythingToUndo());
    assertTrue("anythingToRedo", RefactoringCore.getUndoManager().anythingToRedo());
    // assertEquals("1 to redo", 1, Refactoring.getUndoManager().getRedoStack().size());

    RefactoringCore.getUndoManager().performRedo(null, new NullProgressMonitor());
    assertEqualLines("invalid redo", getFileContents(getOutputTestFileName("A")), cu.getSource());
  }

