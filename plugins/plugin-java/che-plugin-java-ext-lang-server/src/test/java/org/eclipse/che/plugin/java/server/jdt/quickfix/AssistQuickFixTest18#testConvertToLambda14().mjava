  @Test
  public void testConvertToLambda14() throws Exception {
    IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
    StringBuffer buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("@FunctionalInterface\n");
    buf.append("interface FI {\n");
    buf.append("    int foo(int x, int y, int z);\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("class C {\n");
    buf.append("    int i;\n");
    buf.append("    private void test(int x) {\n");
    buf.append("        int y;\n");
    buf.append("        FI fi = new FI() {\n");
    buf.append("            @Override\n");
    buf.append("            public int foo(int x/*km*/, int i /*inches*/, int y/*yards*/) {\n");
    buf.append("                return x + i + y;\n");
    buf.append("            }\n");
    buf.append("        };\n");
    buf.append("    }\n");
    buf.append("}\n");
    ICompilationUnit cu = pack1.createCompilationUnit("C.java", buf.toString(), false, null);

    int offset = buf.toString().indexOf("FI()");
    AssistContext context = getCorrectionContext(cu, offset, 0);
    assertNoErrors(context);
    List proposals = collectAssists(context, false);

    assertNumberOfProposals(proposals, 2);
    assertCorrectLabels(proposals);

    buf = new StringBuffer();
    buf.append("package test1;\n");
    buf.append("@FunctionalInterface\n");
    buf.append("interface FI {\n");
    buf.append("    int foo(int x, int y, int z);\n");
    buf.append("}\n");
    buf.append("\n");
    buf.append("class C {\n");
    buf.append("    int i;\n");
    buf.append("    private void test(int x) {\n");
    buf.append("        int y;\n");
    buf.append("        FI fi = (x1/*km*/, i /*inches*/, y1/*yards*/) -> x1 + i + y1;\n");
    buf.append("    }\n");
    buf.append("}\n");
    String expected1 = buf.toString();

    assertExpectedExistInProposals(proposals, new String[] {expected1});
  }

