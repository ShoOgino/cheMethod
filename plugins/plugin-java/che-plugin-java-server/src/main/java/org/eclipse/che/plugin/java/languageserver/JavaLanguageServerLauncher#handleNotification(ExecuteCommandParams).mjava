  private void handleNotification(ExecuteCommandParams params) {
    String command = params.getCommand();
    List<Object> arguments = params.getArguments();
    switch (command) {
      case Notifications.UPDATE_PROJECTS_CLASSPATH:
        {
          List<Object> fixedPathList = new ArrayList<>(arguments.size());
          for (Object uri : arguments) {
            String uriString = convertToJson(uri).getAsString();
            String projectPath = removePrefixUri(uriString);
            fixedPathList.add(projectPath);
            projectManager
                .get(projectPath)
                .ifPresent(
                    project -> {
                      try {
                        LOG.info("updating projectconfig for {}", projectPath);
                        eventService.publish(new ProjectClassPathChangedEvent(project.getPath()));
                        projectManager.update(project);
                      } catch (ForbiddenException
                          | ServerException
                          | NotFoundException
                          | ConflictException
                          | BadRequestException e) {
                        throw toJsonRpcException(e);
                      }
                    });
          }
          params.setArguments(fixedPathList);
          notifyClient(params);

          break;
        }
      case Notifications.MAVEN_PROJECT_CREATED:
        {
          List<Object> fixedPathList = new ArrayList<>(arguments.size());
          for (Object uri : arguments) {
            String uriString = convertToJson(uri).getAsString();
            String projectPath = removePrefixUri(uriString);
            fixedPathList.add(projectPath);
            projectSynchronizer.ensureMavenProject(projectPath);
          }
          params.setArguments(fixedPathList);
          notifyClient(params);

          break;
        }
    }
  }

