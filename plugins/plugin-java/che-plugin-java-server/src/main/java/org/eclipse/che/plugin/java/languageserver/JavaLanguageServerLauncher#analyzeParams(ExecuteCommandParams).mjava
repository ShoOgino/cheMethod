  private ExecuteCommandParams analyzeParams(ExecuteCommandParams params) {
    String command = params.getCommand();
    List<Object> arguments = params.getArguments();
    switch (command) {
      case Notifications.UPDATE_PROJECTS_CLASSPATH:
      case Notifications.UPDATE_ON_PROJECT_CLASSPATH_CHANGED:
        List<Object> fixedPathList = new ArrayList<>(arguments.size());
        for (Object uri : arguments) {
          fixedPathList.add(removePrefixUri(convertToJson(uri).getAsString()));
        }
        params.setArguments(fixedPathList);
        break;
      case Notifications.UPDATE_PROJECT:
      case Notifications.UPDATE_PROJECT_CONFIG:
        Object projectUri = arguments.get(0);
        params.setArguments(
            singletonList(removePrefixUri(convertToJson(projectUri).getAsString())));
        break;
      case Notifications.UPDATE_MAVEN_MODULE:
        updateMavenModules(params, arguments);
        break;
      default:
        break;
    }
    return params;
  }

