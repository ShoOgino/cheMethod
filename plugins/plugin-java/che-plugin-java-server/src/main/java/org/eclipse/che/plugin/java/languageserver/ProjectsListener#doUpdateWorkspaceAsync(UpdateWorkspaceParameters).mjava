  private void doUpdateWorkspaceAsync(UpdateWorkspaceParameters updateWorkspaceParameters) {
    executorService.submit(
        (Runnable)
            () -> {
              JobResult jobResult = service.updateWorkspace(updateWorkspaceParameters);

              updateWorkspaceParameters
                  .getAddedProjectsUri()
                  .forEach(
                      projectUri -> {
                        String projectPath = removePrefixUri(projectUri);
                        projectsSynchronizer.synchronize(projectPath);
                      });

              switch (jobResult.getSeverity()) {
                case ERROR:
                  LOG.error(
                      "Workspace updated. Result code: '{}', message: '{}'. Added projects: '{}', removed projects: '{}'",
                      jobResult.getResultCode(),
                      jobResult.getMessage(),
                      updateWorkspaceParameters.getAddedProjectsUri().toString(),
                      updateWorkspaceParameters.getRemovedProjectsUri().toString());
                  break;
                case WARNING:
                case CANCEL:
                  LOG.warn(
                      "Workspace updated. Result code: '{}', message: '{}'. Added projects: '{}', removed projects: '{}'",
                      jobResult.getResultCode(),
                      jobResult.getMessage(),
                      updateWorkspaceParameters.getAddedProjectsUri().toString(),
                      updateWorkspaceParameters.getRemovedProjectsUri().toString());
                  break;
                default:
                  LOG.info(
                      "Workspace updated. Result code: '{}', message: '{}'. Added projects: '{}', removed projects: '{}'",
                      jobResult.getResultCode(),
                      jobResult.getMessage(),
                      updateWorkspaceParameters.getAddedProjectsUri().toString(),
                      updateWorkspaceParameters.getRemovedProjectsUri().toString());
                  break;
              }
            });
  }

