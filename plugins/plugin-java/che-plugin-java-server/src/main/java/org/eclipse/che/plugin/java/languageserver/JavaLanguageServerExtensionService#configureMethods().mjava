  @PostConstruct
  public void configureMethods() {
    requestHandler
        .newConfiguration()
        .methodName(FILE_STRUCTURE)
        .paramsAsDto(FileStructureCommandParameters.class)
        .resultAsListOfDto(ExtendedSymbolInformationDto.class)
        .withFunction(this::executeFileStructure);

    requestHandler
        .newConfiguration()
        .methodName(RECOMPUTE_POM_DIAGNOSTICS)
        .paramsAsString()
        .noResult()
        .withConsumer(this::reComputeDiagnostics);

    requestHandler
        .newConfiguration()
        .methodName(EFFECTIVE_POM)
        .paramsAsString()
        .resultAsString()
        .withFunction(this::getEffectivePom);

    requestHandler
        .newConfiguration()
        .methodName(REIMPORT_MAVEN_PROJECTS)
        .paramsAsDto(ReImportMavenProjectsCommandParameters.class)
        .resultAsListOfString()
        .withFunction(this::reImportMavenProjects);

    requestHandler
        .newConfiguration()
        .methodName(EXTERNAL_LIBRARIES)
        .paramsAsDto(ExternalLibrariesParameters.class)
        .resultAsListOfDto(Jar.class)
        .withFunction(this::getProjectExternalLibraries);

    requestHandler
        .newConfiguration()
        .methodName(EXTERNAL_LIBRARIES_CHILDREN)
        .paramsAsDto(ExternalLibrariesParameters.class)
        .resultAsListOfDto(JarEntry.class)
        .withFunction(this::getExternalLibrariesChildren);

    requestHandler
        .newConfiguration()
        .methodName(EXTERNAL_LIBRARY_CHILDREN)
        .paramsAsDto(ExternalLibrariesParameters.class)
        .resultAsListOfDto(JarEntry.class)
        .withFunction(this::getLibraryChildren);

    requestHandler
        .newConfiguration()
        .methodName(EXTERNAL_LIBRARY_ENTRY)
        .paramsAsString()
        .resultAsDto(JarEntry.class)
        .withFunction(this::getLibraryEntry);

    requestHandler
        .newConfiguration()
        .methodName(CLASS_PATH_TREE)
        .paramsAsString()
        .resultAsListOfDto(ClasspathEntry.class)
        .withFunction(this::getClasspathTree);

    requestHandler
        .newConfiguration()
        .methodName(ORGANIZE_IMPORTS)
        .paramsAsDto(OrganizeImportParams.class)
        .resultAsDto(OrganizeImportsResult.class)
        .withFunction(this::organizeImports);

    requestHandler
        .newConfiguration()
        .methodName(IMPLEMENTERS)
        .paramsAsDto(TextDocumentPositionParams.class)
        .resultAsDto(ImplementersResponseDto.class)
        .withFunction(this::findImplementers);

    requestHandler
        .newConfiguration()
        .methodName(USAGES)
        .paramsAsDto(TextDocumentPositionParams.class)
        .resultAsDto(UsagesResponse.class)
        .withFunction(this::usages);

    requestHandler
        .newConfiguration()
        .methodName(GET_JAVA_CORE_OPTIONS)
        .paramsAsListOfString()
        .resultAsDto(JavaCoreOptions.class)
        .withFunction(this::getJavaCoreOptions);

    requestHandler
        .newConfiguration()
        .methodName(UPDATE_JAVA_CORE_OPTIONS)
        .paramsAsDto(JavaCoreOptions.class)
        .resultAsBoolean()
        .withFunction(this::updateJavaCoreOptions);

    requestHandler
        .newConfiguration()
        .methodName(REFACTORING_RENAME)
        .paramsAsDto(RenameSettings.class)
        .resultAsDto(CheWorkspaceEdit.class)
        .withFunction(this::rename);

    requestHandler
        .newConfiguration()
        .methodName(REFACTORING_GET_RENAME_TYPE)
        .paramsAsDto(RenameSelectionParams.class)
        .resultAsDto(RenamingElementInfo.class)
        .withFunction(this::getRenamingElementInfo);

    requestHandler
        .newConfiguration()
        .methodName(VALIDATE_RENAMED_NAME)
        .paramsAsDto(RenameSelectionParams.class)
        .resultAsDto(RefactoringStatus.class)
        .withFunction(this::validateName);

    requestHandler
        .newConfiguration()
        .methodName(GET_LINKED_MODEL)
        .paramsAsDto(TextDocumentPositionParams.class)
        .resultAsListOfDto(Range.class)
        .withFunction(this::getLinkedElements);

    requestHandler
        .newConfiguration()
        .methodName(GET_DESTINATIONS)
        .noParams()
        .resultAsListOfDto(JavaProjectStructure.class)
        .withFunction(this::getDestinations);

    requestHandler
        .newConfiguration()
        .methodName(REFACTORING_MOVE)
        .paramsAsDto(MoveSettings.class)
        .resultAsDto(CheWorkspaceEdit.class)
        .withFunction(this::move);

    requestHandler
        .newConfiguration()
        .methodName(Constants.VALIDATE_MOVE_COMMAND)
        .paramsAsDto(CreateMoveParams.class)
        .resultAsBoolean()
        .withFunction(this::validateMove);

    requestHandler
        .newConfiguration()
        .methodName(VERIFY_DESTINATION)
        .paramsAsDto(MoveSettings.class)
        .resultAsDto(RefactoringStatus.class)
        .withFunction(this::verifyMoveDestination);
  }

