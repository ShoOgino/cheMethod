    /** {@inheritDoc} */
    @NotNull
    @Override
    public String resolveFqn(@NotNull final VirtualFile file) {
        final HasProjectConfig projectNode = file.getProject();
        final List<String> sourceFolders = detectSourceFolders(projectNode);

        final String projectPath = projectNode.getProjectConfig().getPath();
        String filePath = file.getPath();
        int i = 1;
        int j = filePath.lastIndexOf('.');
        if (j < 0) {
            j = filePath.length();
        }
        for (String sourceFolder : sourceFolders) {
            boolean projectPathEndsWithSeparator = projectPath.charAt(projectPath.length() - 1) == '/';
            boolean sourcePathStartsWithSeparator = sourceFolder.charAt(0) == '/';
            boolean sourcePathEndsWithSeparator = sourceFolder.charAt(sourceFolder.length() - 1) == '/';
            String base;
            if (projectPathEndsWithSeparator && sourcePathStartsWithSeparator) {
                base = projectNode + sourceFolder.substring(1);
            } else if (!(projectPathEndsWithSeparator || sourcePathStartsWithSeparator)) {
                base = projectPath + '/' + sourceFolder;
            } else {
                base = projectNode + sourceFolder;
            }
            if (!sourcePathEndsWithSeparator) {
                base = base + '/';
            }

            if (filePath.startsWith(base)) {
                i = base.length();
                return filePath.substring(i, j).replaceAll("/", ".");
            }
        }
        return filePath.substring(i, j).replaceAll("/", ".");
    }

