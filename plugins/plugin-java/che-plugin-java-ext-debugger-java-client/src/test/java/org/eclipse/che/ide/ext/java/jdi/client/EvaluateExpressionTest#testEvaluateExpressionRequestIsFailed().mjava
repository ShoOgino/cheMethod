    @Test
    public void testEvaluateExpressionRequestIsFailed() throws Exception {
        final Throwable throwable = mock(Throwable.class);
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<String> callback = (AsyncRequestCallback<String>)arguments[2];
                Method onFailure = GwtReflectionUtils.getMethod(callback.getClass(), "onFailure");
                onFailure.invoke(callback, throwable);
                return callback;
            }
        }).when(service).evaluateExpression(anyString(), anyString(), (AsyncRequestCallback<String>)anyObject());
        when(view.getExpression()).thenReturn(EXPRESSION);
        when(throwable.getMessage()).thenReturn(FAIL_REASON);

        presenter.showDialog(debuggerInfo);
        presenter.onEvaluateClicked();

        verify(view, atLeastOnce()).setEnableEvaluateButton(eq(DISABLE_BUTTON));
        verify(service).evaluateExpression(eq(DEBUGGER_ID), eq(EXPRESSION), (AsyncRequestCallback<String>)anyObject());
        verify(constants).evaluateExpressionFailed(FAIL_REASON);
        verify(view).setEnableEvaluateButton(eq(!DISABLE_BUTTON));
    }

