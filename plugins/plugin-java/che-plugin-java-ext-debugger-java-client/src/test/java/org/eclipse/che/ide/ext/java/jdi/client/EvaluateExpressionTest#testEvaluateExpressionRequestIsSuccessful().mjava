    @Test
    public void testEvaluateExpressionRequestIsSuccessful() throws Exception {
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<String> callback = (AsyncRequestCallback<String>)arguments[2];
                Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
                onSuccess.invoke(callback, EVALUATION_RESULT);
                return callback;
            }
        }).when(service).evaluateExpression(anyString(), anyString(), (AsyncRequestCallback<String>)anyObject());
        when(view.getExpression()).thenReturn(EXPRESSION);

        presenter.showDialog(debuggerInfo);
        presenter.onEvaluateClicked();

        verify(view, atLeastOnce()).setEnableEvaluateButton(eq(DISABLE_BUTTON));
        verify(service).evaluateExpression(eq(DEBUGGER_ID), eq(EXPRESSION), (AsyncRequestCallback<String>)anyObject());
        verify(view).setResult(eq(EVALUATION_RESULT));
        verify(view).setEnableEvaluateButton(eq(!DISABLE_BUTTON));
    }

