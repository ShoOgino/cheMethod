    @Test
    public void testGetStackFrameDump() throws Exception {
        Promise<StackFrameDump> promiseStackFrameDump = mock(Promise.class);
        StackFrameDump mockStackFrameDump = mock(StackFrameDump.class);
        final String json = "json";
        doReturn(json).when(dtoFactory).toJson(mockStackFrameDump);

        doReturn(promiseStackFrameDump).when(service).getStackFrameDump(DEBUGGER_ID);
        doReturn(promiseStackFrameDump).when(promiseStackFrameDump).then((Function<StackFrameDump, Object>)any());
        doReturn(promiseStackFrameDump).when(promiseStackFrameDump).catchError((Operation<PromiseError>)any());

        Promise<String> result = debugger.getStackFrameDump();
        assertEquals(promiseStackFrameDump, result);

        verify(promiseStackFrameDump).then(functionStackFrameDumpStringCaptor.capture());
        assertEquals(json, functionStackFrameDumpStringCaptor.getValue().apply(mockStackFrameDump));

        verify(promiseStackFrameDump).catchError(operationPromiseErrorCaptor.capture());
        try {
            operationPromiseErrorCaptor.getValue().apply(promiseError);
            fail("Operation Exception expected");
        } catch (OperationException e) {
            verify(promiseError).getMessage();
            verify(promiseError).getCause();
        }
    }

