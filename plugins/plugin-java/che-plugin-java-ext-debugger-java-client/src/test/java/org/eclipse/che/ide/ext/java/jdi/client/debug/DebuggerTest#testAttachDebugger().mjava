    @Test
    public void testAttachDebugger() throws Exception {
        debugger.setJavaDebuggerInfo(null);

        final String host = "some.host";
        final String port = "8000";
        final String vmName = "vm.name";
        final String vmVersion = "vm.version";
        final DebuggerDescriptor expectedDebuggerDescriptor = new DebuggerDescriptor(vmName + " " + vmVersion, host + ":" + port);

        final String javaDebuggerInfoJson = "javaDebuggerInfo";
        doReturn(javaDebuggerInfoJson).when(dtoFactory).toJson(javaDebuggerInfo);

        Map<String, String> connectionProperties = mock(Map.class);
        doReturn(host).when(connectionProperties).get(JavaDebugger.JavaConnectionProperties.HOST.toString());
        doReturn(port).when(connectionProperties).get(JavaDebugger.JavaConnectionProperties.PORT.toString());

        doReturn(vmName).when(javaDebuggerInfo).getVmName();
        doReturn(vmVersion).when(javaDebuggerInfo).getVmVersion();

        Promise<JavaDebuggerInfo> promiseJavaDebuggerInfo = mock(Promise.class);

        doReturn(promiseJavaDebuggerInfo).when(service).connect(connectionProperties);
        doReturn(promiseVoid).when(promiseJavaDebuggerInfo).then((Function<JavaDebuggerInfo, Void>)any());
        doReturn(promiseVoid).when(promiseVoid).catchError((Operation<PromiseError>)any());

        Promise<Void> result = debugger.attachDebugger(connectionProperties);
        assertEquals(promiseVoid, result);

        verify(promiseJavaDebuggerInfo).then(argumentCaptorFunctionJavaDebuggerInfoVoid.capture());
        argumentCaptorFunctionJavaDebuggerInfoVoid.getValue().apply(javaDebuggerInfo);

        verify(promiseVoid).catchError(operationPromiseErrorCaptor.capture());
        try {
            operationPromiseErrorCaptor.getValue().apply(promiseError);
            fail("Operation Exception expected");
        } catch (OperationException e) {
            verify(promiseError).getMessage();
            verify(promiseError).getCause();
        }

        verify(observer).onDebuggerAttached(expectedDebuggerDescriptor, promiseVoid);

        verify(promiseJavaDebuggerInfo).then(argumentCaptorOperationJavaDebuggerInfo.capture());
        argumentCaptorOperationJavaDebuggerInfo.getValue().apply(javaDebuggerInfo);
        assertTrue(debugger.isConnected());
        verify(localStorage).setItem(eq(JavaDebugger.LOCAL_STORAGE_DEBUGGER_KEY), eq(javaDebuggerInfoJson));
        verify(messageBus).subscribe(eq(JavaRuntimeExtension.EVENTS_CHANNEL + DEBUGGER_ID), any(SubscriptionHandler.class));
        verify(messageBus).subscribe(eq(JavaRuntimeExtension.DISCONNECT_CHANNEL + DEBUGGER_ID), any(SubscriptionHandler.class));
    }

