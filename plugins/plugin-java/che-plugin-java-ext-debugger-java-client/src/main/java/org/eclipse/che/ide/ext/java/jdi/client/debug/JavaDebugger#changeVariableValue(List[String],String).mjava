    @Override
    public void changeVariableValue(final List<String> path, final String newValue) {
        if (isConnected()) {
            VariablePath variablePath = dtoFactory.createDto(VariablePath.class);
            variablePath.setPath(path);

            UpdateVariableRequest updateVariableRequest = dtoFactory.createDto(UpdateVariableRequest.class);
            updateVariableRequest.setVariablePath(variablePath);
            updateVariableRequest.setExpression(newValue);

            Promise<Void> promise = service.setValue(javaDebuggerInfo.getId(), updateVariableRequest);

            promise.then(new Operation<Void>() {
                @Override
                public void apply(Void arg) throws OperationException {
                    for (DebuggerObserver observer : observers) {
                        observer.onValueChanged(path, newValue);
                    }
                }
            }).catchError(new Operation<PromiseError>() {
                @Override
                public void apply(PromiseError arg) throws OperationException {
                    Log.error(JavaDebugger.class, arg.getMessage());
                }
            });
        }
    }

