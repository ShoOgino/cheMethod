    @Inject
    public DebuggerPresenter(final DebuggerView view,
                             final DebuggerServiceClient service,
                             final EventBus eventBus,
                             final JavaRuntimeLocalizationConstant constant,
                             final WorkspaceAgent workspaceAgent,
                             final BreakpointManager breakpointManager,
                             final FqnResolverFactory resolverFactory,
                             final EditorAgent editorAgent,
                             final EvaluateExpressionPresenter evaluateExpressionPresenter,
                             final NotificationManager notificationManager,
                             final DtoFactory dtoFactory,
                             final DtoUnmarshallerFactory dtoUnmarshallerFactory,
                             final AppContext appContext,
                             final ProjectExplorerPresenter projectExplorer,
                             final MessageBusProvider messageBusProvider,
                             final JavaNodeManager javaNodeManager,
                             final JavaRuntimeResources javaRuntimeResources,
                             final LocalStorageProvider localStorageProvider,
                             final @DebuggerToolbar ToolbarPresenter debuggerToolbar) {
        this.view = view;
        this.eventBus = eventBus;
        this.dtoFactory = dtoFactory;
        this.dtoUnmarshallerFactory = dtoUnmarshallerFactory;
        this.appContext = appContext;
        this.projectExplorer = projectExplorer;
        this.javaRuntimeResources = javaRuntimeResources;
        this.debuggerToolbar = debuggerToolbar;
        this.view.setDelegate(this);
        this.view.setTitle(TITLE);
        this.service = service;
        this.constant = constant;
        this.workspaceAgent = workspaceAgent;
        this.breakpointManager = breakpointManager;
        this.resolverFactory = resolverFactory;
        this.resolverFactory.addFqnResolverObserver(this);
        this.variables = new ArrayList<>();
        this.editorAgent = editorAgent;
        this.notificationManager = notificationManager;
        this.javaNodeManager = javaNodeManager;
        this.addRule(ProjectPerspective.PROJECT_PERSPECTIVE_ID);
        this.localStorageProvider = localStorageProvider;
        this.debuggerInfo = EmptyDebuggerInfo.INSTANCE;


        eventBus.addHandler(WsAgentStateEvent.TYPE, new WsAgentStateHandler() {
            @Override
            public void onWsAgentStarted(WsAgentStateEvent event) {
                messageBus = messageBusProvider.getMachineMessageBus();
                debuggerInfo = loadDebugInfo();

                if (isDebuggerConnected()) {
                    service.checkEvents(debuggerInfo.getId(), new AsyncRequestCallback<DebuggerEventList>() {
                        @Override
                        protected void onSuccess(DebuggerEventList result) {
                            onDebuggerConnected();
                        }

                        @Override
                        protected void onFailure(Throwable exception) {
                            debuggerInfo = EmptyDebuggerInfo.INSTANCE;
                            preserveDebugInfo();
                        }
                    });
                }
            }

            @Override
            public void onWsAgentStopped(WsAgentStateEvent event) {
            }
        });

        this.debuggerEventsHandler = new SubscriptionHandler<DebuggerEventList>(new DebuggerEventListUnmarshallerWS(dtoFactory)) {
            @Override
            public void onMessageReceived(DebuggerEventList result) {
                onEventListReceived(result);
            }

            @Override
            public void onErrorReceived(Throwable exception) {
                try {
                    messageBus.unsubscribe(debuggerEventsChannel, this);
                } catch (WebSocketException e) {
                    Log.error(DebuggerPresenter.class, e);
                }

                if (exception instanceof ServerException) {
                    ServerException serverException = (ServerException)exception;
                    if (HTTPStatus.INTERNAL_ERROR == serverException.getHTTPStatus() && serverException.getMessage() != null
                        && serverException.getMessage().contains("not found")) {

                        onDebuggerDisconnected();
                        return;
                    }
                }
            }
        };

        this.debuggerDisconnectedHandler = new SubscriptionHandler<Void>() {
            @Override
            protected void onMessageReceived(Void result) {
                try {
                    messageBus.unsubscribe(debuggerDisconnectedChannel, this);
                } catch (WebSocketException e) {
                    Log.error(DebuggerPresenter.class, e);
                }

                evaluateExpressionPresenter.closeDialog();
                onDebuggerDisconnected();
            }

            @Override
            protected void onErrorReceived(Throwable exception) {
                try {
                    messageBus.unsubscribe(debuggerDisconnectedChannel, this);
                } catch (WebSocketException e) {
                    Log.error(DebuggerPresenter.class, e);
                }
            }
        };

        eventBus.fireEvent(createInitializedStateEvent(this));
    }

