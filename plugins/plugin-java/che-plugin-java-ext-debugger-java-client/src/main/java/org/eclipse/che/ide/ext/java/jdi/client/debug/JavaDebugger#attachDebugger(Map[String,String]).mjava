    @Override
    public Promise<Void> attachDebugger(Map<String, String> connectionProperties) {
        if (isConnected()) {
            return Promises.reject(JsPromiseError.create("Debugger already connected"));
        }

        Promise<JavaDebuggerInfo> connect = service.connect(connectionProperties);

        String info = "";
        String address = connectionProperties.get(HOST.toString()) + ":" + connectionProperties.get(PORT.toString());
        final DebuggerDescriptor debuggerDescriptor = new DebuggerDescriptor(info, address);

        Promise<Void> promise = connect.then(new Function<JavaDebuggerInfo, Void>() {
            @Override
            public Void apply(JavaDebuggerInfo arg) throws FunctionException {
                debuggerDescriptor.setInfo(arg.getVmName() + " " + arg.getVmVersion());
                return null;
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                Log.error(JavaDebugger.class, arg.getMessage());
                throw new OperationException(arg.getCause());
            }
        });

        for (DebuggerObserver observer : observers) {
            observer.onDebuggerAttached(debuggerDescriptor, promise);
        }

        connect.then(new Operation<JavaDebuggerInfo>() {
            @Override
            public void apply(JavaDebuggerInfo arg) throws OperationException {
                setJavaDebuggerInfo(arg);
                preserveDebuggerInfo();
                startCheckingEvents();
            }
        });

        return promise;
    }

