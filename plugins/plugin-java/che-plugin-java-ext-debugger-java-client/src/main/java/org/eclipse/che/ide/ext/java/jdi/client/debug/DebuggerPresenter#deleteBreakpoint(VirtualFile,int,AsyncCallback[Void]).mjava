    /**
     * {@inheritDoc}
     */
    @Override
    public void deleteBreakpoint(@NotNull VirtualFile file, int lineNumber, final AsyncCallback<Void> callback) {
        if (isDebuggerConnected()) {
            Location location = dtoFactory.createDto(Location.class);
            location.setLineNumber(lineNumber + 1);
            String mediaType = fileTypeRegistry.getFileTypeByFile(file).getMimeTypes().get(0);
            FqnResolver resolver = resolverFactory.getResolver(mediaType);
            if (resolver != null) {
                location.setClassName(resolver.resolveFqn(file));
            } else {
                Log.warn(DebuggerPresenter.class, "FqnResolver is not found");
            }

            BreakPoint point = dtoFactory.createDto(BreakPoint.class);
            point.setLocation(location);
            point.setEnabled(true);

            service.deleteBreakpoint(debuggerInfo.getId(), point, new AsyncRequestCallback<Void>() {
                @Override
                protected void onSuccess(Void result) {
                    callback.onSuccess(null);
                    updateBreakPoints();
                }

                @Override
                protected void onFailure(Throwable exception) {
                    callback.onFailure(exception);
                    updateBreakPoints();
                }
            });
        } else {
            callback.onFailure(new IllegalStateException("Debugger not attached"));
            updateBreakPoints();
        }
    }

