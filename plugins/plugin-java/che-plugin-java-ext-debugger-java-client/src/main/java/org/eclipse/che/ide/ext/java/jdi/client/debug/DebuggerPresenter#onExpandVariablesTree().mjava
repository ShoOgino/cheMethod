    @Override
    public void onExpandVariablesTree() {
        List<DebuggerVariable> rootVariables = selectedVariable.getVariables();
        if (rootVariables.isEmpty()) {
            Debugger debugger = debuggerManager.getActiveDebugger();
            if (debugger != null) {
                Promise<String> promise = debugger.getValue(dtoFactory.toJson(selectedVariable.getVariable()));

                promise.then(new Operation<String>() {
                    @Override
                    public void apply(String arg) throws OperationException {
                        List<Variable> variables = dtoFactory.createListDtoFromJson(arg, Variable.class);
                        List<DebuggerVariable> debuggerVariables = getDebuggerVariables(variables);

                        view.setVariablesIntoSelectedVariable(debuggerVariables);
                        view.updateSelectedVariable();
                    }
                }).catchError(new Operation<PromiseError>() {
                    @Override
                    public void apply(PromiseError arg) throws OperationException {
                        notificationManager.notify(constant.failedToGetVariableValueTitle(), arg.getMessage(), FAIL, true);
                    }
                });
            }
        }
    }

