  @Test
  public void errorLabelShouldBeShowedIfRefactoringStatusIsNotOK() throws Exception {
    when(moveSettings.isUpdateQualifiedNames()).thenReturn(true);
    when(changeCreationResult.isCanShowPreviewPage()).thenReturn(true);
    when(changeCreationResult.getStatus()).thenReturn(refactoringResult);
    when(refactoringResult.getSeverity()).thenReturn(2);

    when(refactorInfo.getResources()).thenReturn(new Resource[] {file});
    when(file.getRelatedProject()).thenReturn(Optional.of(relatedProject));
    when(relatedProject.getLocation()).thenReturn(Path.valueOf("/project"));
    presenter.refactorInfo = refactorInfo;

    presenter.onAcceptButtonClicked();

    verify(moveSettings).setSessionId(nullable(String.class));
    verify(moveSettings).setUpdateReferences(anyBoolean());
    verify(moveSettings).setUpdateQualifiedNames(anyBoolean());
    verify(moveSettings).setFilePatterns(nullable(String.class));
    verify(session).setSessionId(nullable(String.class));

    verify(moveSettingsPromise).thenPromise(changeCreationFunction.capture());
    changeCreationFunction.getValue().apply(any());
    verify(refactorService).createChange(session);

    verify(changeCreationResultPromise).then(changeResultOperation.capture());
    changeResultOperation.getValue().apply(changeCreationResult);

    verify(fileTrackingSuspendEventPromise).then(clientServerSuspendOperation.capture());
    clientServerSuspendOperation.getValue().apply(any());

    verify(refactoringResultPromise).then(refResultOperation.capture());
    refResultOperation.getValue().apply(refactoringResult);
    verify(moveView, never()).close();
    verify(refactoringUpdater, never()).updateAfterRefactoring(anyList());

    verify(moveView).showErrorMessage(refactoringResult);
    verify(refactoringUpdater).handleMovingFiles(anyList());
    verify(clientServerEventService).sendFileTrackingResumeEvent();
  }

