  @Before
  public void setUp() throws Exception {
    List<EditorPartPresenter> editors = new ArrayList<>();
    editors.add(editor);
    when(editorAgent.getActiveEditor()).thenReturn(activeEditor);
    when(dtoFactory.createDto(RefactoringSession.class)).thenReturn(refactoringSession);
    when(dtoFactory.createDto(ChangeEnabledState.class)).thenReturn(changeEnableState);
    when(dtoFactory.createDto(RefactoringChange.class)).thenReturn(refactoringChanges);
    when(refactoringService.getRefactoringPreview(refactoringSession))
        .thenReturn(refactoringPreviewPromise);
    when(refactoringService.applyRefactoring(anyObject())).thenReturn(refactoringStatusPromise);
    when(refactoringService.getChangePreview(refactoringChanges)).thenReturn(changePreviewPromise);
    when(refactoringService.changeChangeEnabledState(changeEnableState))
        .thenReturn(changeEnableStatePromise);
    when(editorAgent.getOpenedEditors()).thenReturn(editors);
    when(clientServerEventService.sendFileTrackingSuspendEvent())
        .thenReturn(fileTrackingSuspendEventPromise);
    List<ChangeInfo> changes = new ArrayList<>();
    when(refactoringStatus.getChanges()).thenReturn(changes);
    when(refactoringUpdater.handleMovingFiles(anyList())).thenReturn(handleMovingFilesPromise);
    when(refactoringUpdater.updateAfterRefactoring(anyList()))
        .thenReturn(updateAfterRefactoringPromise);

    presenter =
        new PreviewPresenter(
            view,
            movePresenterProvider,
            renamePresenterProvider,
            dtoFactory,
            editorAgent,
            refactoringUpdater,
            refactoringService,
            clientServerEventService);
  }

