  @Before
  public void setUp() throws Exception {
    EditorInput editorInput = mock(EditorInput.class);
    Project project = mock(Project.class);
    when(project.exists()).thenReturn(true);
    Optional<Resource> srcFolder = mock(Optional.class);
    Container startPoint = mock(Container.class);

    when(editor.getEditorInput()).thenReturn(editorInput);
    when(editorInput.getFile()).thenReturn(file);
    when(file.getName()).thenReturn(FILE_NAME);
    when(file.getProject()).thenReturn(project);
    when(file.getLocation()).thenReturn(Path.valueOf(FILE_PATH));

    when(project.getPath()).thenReturn(PROJECT_PATH);
    when(file.getParentWithMarker(any())).thenReturn(srcFolder);
    when(srcFolder.isPresent()).thenReturn(true);
    when(srcFolder.get()).thenReturn(startPoint);
    when(startPoint.getLocation()).thenReturn(Path.valueOf("some/path"));

    when(resolvingProjectStateHolderRegistry.getResolvingProjectStateHolder(anyString()))
        .thenReturn(resolvingProjectStateHolder);
    when(localizationConstant.codeAssistErrorMessageResolvingProject()).thenReturn("error");

    when(client.reconcile(anyString(), anyString())).thenReturn(reconcileResultPromise);
    when(reconcileResultPromise.onSuccess(Matchers.<Consumer<ReconcileResult>>anyObject()))
        .thenReturn(reconcileResultPromise);

    javaReconcilerStrategy.setDocument(mock(Document.class));
  }

