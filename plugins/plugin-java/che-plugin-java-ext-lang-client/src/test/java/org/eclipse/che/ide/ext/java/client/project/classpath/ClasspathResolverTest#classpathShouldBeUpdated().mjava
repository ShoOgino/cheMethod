    @Test
    public void classpathShouldBeUpdated() throws Exception {
        when(appContext.getCurrentProject()).thenReturn(currentProject);
        when(dtoFactory.createDto(ClasspathEntryDTO.class)).thenReturn(entry);
        when(entry.withPath(PATH_TO_LIB1)).thenReturn(lib1);
        when(entry.withPath(PATH_TO_LIB2)).thenReturn(lib2);
        when(entry.withPath(PATH_TO_CONTAINER)).thenReturn(container);
        when(entry.withPath(PATH_TO_SOURCE)).thenReturn(source);
        when(currentProject.getProjectConfig()).thenReturn(projectConfig);
        when(projectConfig.getPath()).thenReturn(PATH_TO_PROJECT);
        when(appContext.getDevMachine()).thenReturn(devMachine);

        when(classpathUpdater.setRawClasspath(anyString(), anyObject())).thenReturn(classpathPromise);
        when(classpathPromise.then(Matchers.<Operation<Void>>anyObject())).thenReturn(classpathPromise);
        when(projectServiceClient.getProject(devMachine, PATH_TO_PROJECT)).thenReturn(getProjectPromise);

        classpathResolver.resolveClasspathEntries(entries);
        classpathResolver.updateClasspath();

        verify(classpathPromise).then(updateOperation.capture());
        updateOperation.getValue().apply(null);

        verify(getProjectPromise).then(getProjectOperation.capture());
        getProjectOperation.getValue().apply(projectConfig);

        verify(eventBus).fireEvent(Matchers.<Event>anyObject());
    }

