  @Test
  public void changesShouldBeAppliedWithOkStatus() throws Exception {
    RefactorInfo refactorInfo =
        RefactorInfo.of(
            MoveType.REFACTOR_MENU, RefactoredItemType.COMPILATION_UNIT, new Resource[] {file});

    List<ChangeInfo> changes = new ArrayList<>();
    when(refactoringStatus.getChanges()).thenReturn(changes);

    when(changeCreationResult.isCanShowPreviewPage()).thenReturn(true);
    when(refactoringStatus.getSeverity()).thenReturn(0);

    renamePresenter.show(refactorInfo);

    verify(refactorService).createRenameRefactoring(createRenameRefactoringDto);
    verify(renameRefactoringSessionPromise).then(renameRefactoringSessionCaptor.capture());
    renameRefactoringSessionCaptor.getValue().apply(session);

    renamePresenter.onAcceptButtonClicked();

    verify(refactoringSession).setSessionId(SESSION_ID);

    verifyPreparingRenameSettingsDto();
    verifyPreparingRenameChanges();

    verify(changeCreationResultPromise).then(changeCreationResultCaptor.capture());
    changeCreationResultCaptor.getValue().apply(changeCreationResult);

    verify(fileTrackingSuspendEventPromise).then(clientServerSuspendOperation.capture());
    clientServerSuspendOperation.getValue().apply(null);

    verify(refactorService).applyRefactoring(refactoringSession);
    verify(refactoringStatusPromise).then(refactoringStatusCaptor.capture());
    refactoringStatusCaptor.getValue().apply(refactoringStatus);

    verify(refactoringStatus, times(2)).getSeverity();
    verify(view).close();

    verify(updateAfterRefactoringPromise).then(updateAfterRefactoringOperation.capture());
    updateAfterRefactoringOperation.getValue().apply(null);
    verify(refactoringUpdater)
        .updateAfterRefactoring(org.mockito.ArgumentMatchers.<List<ChangeInfo>>anyObject());
    verify(refactoringUpdater).handleMovingFiles(anyList());
    verify(clientServerEventService).sendFileTrackingResumeEvent();
  }

