    @Before
    public void setUp() throws Exception {
        when(editorAgent.getActiveEditor()).thenReturn(activeEditor);
        when(dtoFactory.createDto(CreateRenameRefactoring.class)).thenReturn(createRenameRefactoringDto);
        when(dtoFactory.createDto(RefactoringSession.class)).thenReturn(refactoringSession);
        when(dtoFactory.createDto(RenameSettings.class)).thenReturn(renameSettings);
        when(refactoringSession.getSessionId()).thenReturn(SESSION_ID);
        when(appContext.getCurrentProject()).thenReturn(currentProject);
        when(currentProject.getProjectConfig()).thenReturn(projectConfig);
        when(javaFileNode.getParent()).thenReturn(javaFileNode);
        when(javaFileNode.getName()).thenReturn(TEXT);
        when(promiseError.getMessage()).thenReturn(TEXT);
        when(session.getOldName()).thenReturn(TEXT);
        when(projectConfig.getPath()).thenReturn(PROJECT_PATH);
        when(session.getSessionId()).thenReturn(SESSION_ID);
        when(refactorService.createRenameRefactoring(createRenameRefactoringDto)).thenReturn(renameRefactoringSessionPromise);
        List<?> selectedElements = Collections.singletonList(javaFileNode);
        refactorInfo = RefactorInfo.of(MoveType.REFACTOR_MENU, RefactoredItemType.COMPILATION_UNIT, selectedElements);
        when(session.getWizardType()).thenReturn(RenameRefactoringSession.RenameWizard.LOCAL_VARIABLE);
        when(renameRefactoringSessionPromise.then(Matchers.<Operation<RenameRefactoringSession>>anyObject()))
                .thenReturn(renameRefactoringSessionPromise);
        when(view.isUpdateDelegateUpdating()).thenReturn(true);
        when(view.isUpdateQualifiedNames()).thenReturn(true);
        when(view.isUpdateSimilarlyVariables()).thenReturn(true);
        when(similarNamesConfigurationPresenter.getMachStrategy()).thenReturn(RenameSettings.MachStrategy.SUFFIX);
        when(refactorService.setRenameSettings(renameSettings)).thenReturn(renameSettingsPromise);
        when(renameSettingsPromise.thenPromise(Matchers.<Function<Void, Promise<ChangeCreationResult>>>any()))
                .thenReturn(changeCreationResultPromise);
        when(refactorService.createChange(refactoringSession)).thenReturn(changeCreationResultPromise);
        when(changeCreationResultPromise.then(Matchers.<Operation<ChangeCreationResult>>any())).thenReturn(changeCreationResultPromise);
        when(changeCreationResultPromise.catchError(Matchers.<Operation<PromiseError>>anyObject())).thenReturn(changeCreationResultPromise);
        when(refactorService.applyRefactoring(refactoringSession)).thenReturn(refactoringStatusPromise);

        when(changeCreationResult.getStatus()).thenReturn(refactoringStatus);

        renamePresenter = new RenamePresenter(view,
                                              similarNamesConfigurationPresenter,
                                              locale,
                                              editorAgent,
                                              refactoringUpdater,
                                              appContext,
                                              notificationManager,
                                              previewPresenter,
                                              refactorService,
                                              dtoFactory,
                                              dialogFactory);
    }

