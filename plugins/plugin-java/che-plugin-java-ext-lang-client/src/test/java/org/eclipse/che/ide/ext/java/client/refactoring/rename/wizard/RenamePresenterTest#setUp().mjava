    @Before
    public void setUp() throws Exception {
        when(editorAgent.getActiveEditor()).thenReturn(activeEditor);
        when(activeEditor.getEditorInput()).thenReturn(editorInput);
        when(editorInput.getFile()).thenReturn(file);
        when(file.getRelatedProject()).thenReturn(Optional.of(project));
        when(file.getParentWithMarker(eq(SourceFolderMarker.ID))).thenReturn(Optional.of(srcFolder));
        when(file.getName()).thenReturn("A.java");
        when(file.getExtension()).thenReturn("java");
        when(file.getLocation()).thenReturn(Path.valueOf("/project/src/a/b/c/A.java"));
        when(file.getResourceType()).thenReturn(Resource.FILE);
        when(srcFolder.getLocation()).thenReturn(Path.valueOf("/project/src"));
        when(project.getLocation()).thenReturn(Path.valueOf("/project"));
        when(dtoFactory.createDto(CreateRenameRefactoring.class)).thenReturn(createRenameRefactoringDto);
        when(container.getLocation()).thenReturn(Path.valueOf("/project/src/a/b/c"));
        when(container.getRelatedProject()).thenReturn(Optional.of(project));
        when(dtoFactory.createDto(RefactoringSession.class)).thenReturn(refactoringSession);
        when(dtoFactory.createDto(RenameSettings.class)).thenReturn(renameSettings);
        when(refactoringSession.getSessionId()).thenReturn(SESSION_ID);
        when(session.getOldName()).thenReturn(TEXT);
        when(session.getSessionId()).thenReturn(SESSION_ID);
        when(refactorService.createRenameRefactoring(createRenameRefactoringDto)).thenReturn(renameRefactoringSessionPromise);
        when(session.getWizardType()).thenReturn(RenameRefactoringSession.RenameWizard.LOCAL_VARIABLE);
        when(renameRefactoringSessionPromise.then(Matchers.<Operation<RenameRefactoringSession>>anyObject()))
                .thenReturn(renameRefactoringSessionPromise);
        when(view.isUpdateDelegateUpdating()).thenReturn(true);
        when(view.isUpdateQualifiedNames()).thenReturn(true);
        when(view.isUpdateSimilarlyVariables()).thenReturn(true);
        when(similarNamesConfigurationPresenter.getMachStrategy()).thenReturn(RenameSettings.MachStrategy.SUFFIX);
        when(refactorService.setRenameSettings(renameSettings)).thenReturn(renameSettingsPromise);
        when(renameSettingsPromise.thenPromise(Matchers.<Function<Void, Promise<ChangeCreationResult>>>any()))
                .thenReturn(changeCreationResultPromise);
        when(changeCreationResultPromise.then(Matchers.<Operation<ChangeCreationResult>>any())).thenReturn(changeCreationResultPromise);
        when(changeCreationResultPromise.catchError(Matchers.<Operation<PromiseError>>anyObject())).thenReturn(changeCreationResultPromise);
        when(refactorService.applyRefactoring(refactoringSession)).thenReturn(refactoringStatusPromise);

        when(changeCreationResult.getStatus()).thenReturn(refactoringStatus);

        renamePresenter = new RenamePresenter(view,
                                              similarNamesConfigurationPresenter,
                                              locale,
                                              editorAgent,
                                              refactoringUpdater,
                                              appContext,
                                              notificationManager,
                                              previewPresenter,
                                              refactorService,
                                              dtoFactory,
                                              dialogFactory);
    }

