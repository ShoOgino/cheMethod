  @Test
  public void testShouldDisplayOneImplementationIsRealFile() throws Exception {
    when(editor.getEditorInput()).thenReturn(editorInput);
    when(editorInput.getFile()).thenReturn(file);
    when(file.getLocation()).thenReturn(Path.valueOf("/a/b/c/d/file.java"));
    when(srcFolder.getLocation()).thenReturn(Path.valueOf("/a/b"));
    when(file.getResourceType()).thenReturn(Resource.FILE);
    when(file.getExtension()).thenReturn("java");
    when(file.getName()).thenReturn("file.java");
    when(relatedProject.getLocation()).thenReturn(Path.valueOf("/a"));
    when(editor.getCursorPosition()).thenReturn(new TextPosition(1, 1));
    when(editor.getCursorOffset()).thenReturn(123);
    when(editor.getPositionConverter()).thenReturn(positionConverter);
    when(implementersPromise.then(any(Operation.class))).thenReturn(implementersPromise);
    when(javaLanguageExtensionServiceClient.findImplementations(any()))
        .thenReturn(implementersPromise);

    when(implementationDescriptor.getImplementers()).thenReturn(Collections.singletonList(type));
    when(implementationDescriptor.getSearchedElement()).thenReturn("memberName");
    when(locale.openImplementationWindowTitle(eq("memberName"), eq(1))).thenReturn("foo");

    when(type.getKind()).thenReturn(SymbolKind.Class);
    when(type.getLocation()).thenReturn(new Location("/memberPath", mock(Range.class)));

    presenter.show(editor);
    verify(implementersPromise).then(implementationsOperation.capture());
    implementationsOperation.getValue().apply(implementationDescriptor);

    verify(openHelper).openLocation(eq(type.getLocation()));
  }

