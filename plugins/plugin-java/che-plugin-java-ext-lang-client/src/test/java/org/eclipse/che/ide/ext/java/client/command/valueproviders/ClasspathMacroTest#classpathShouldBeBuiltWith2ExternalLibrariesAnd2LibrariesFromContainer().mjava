    @Test
    public void classpathShouldBeBuiltWith2ExternalLibrariesAnd2LibrariesFromContainer() throws Exception {
        String lib1 = "lib1.jar";
        String lib2 = "lib2.jar";

        List<ClasspathEntryDto> entries = new ArrayList<>();

        Set<String> libs = new HashSet<>();
        libs.add(lib1);
        libs.add(lib2);

        ClasspathEntryDto container = mock(ClasspathEntryDto.class);
        ClasspathEntryDto cLib1 = mock(ClasspathEntryDto.class);
        ClasspathEntryDto cLib2 = mock(ClasspathEntryDto.class);
        when(container.getPath()).thenReturn("containerPath");
        when(container.getExpandedEntries()).thenReturn(asList(cLib1, cLib2));
        when(cLib1.getPath()).thenReturn("cLib1.jar");
        when(cLib1.getEntryKind()).thenReturn(LIBRARY);
        when(cLib2.getPath()).thenReturn("cLib2.jar");
        when(cLib2.getEntryKind()).thenReturn(LIBRARY);

        Set<ClasspathEntryDto> containers = new HashSet<>();
        containers.add(container);

        when(classpathContainer.getClasspathEntries(anyString())).thenReturn(classpathEntriesPromise);
        when(classpathResolver.getLibs()).thenReturn(libs);
        when(classpathResolver.getContainers()).thenReturn(containers);

        classpathMacro.expand();

        verify(classpathEntriesPromise).then(classpathEntriesCapture.capture());
        String classpath = classpathEntriesCapture.getValue().apply(entries);

        verify(classpathResolver).resolveClasspathEntries(entries);
        assertEquals("lib2.jar:lib1.jar:cLib1.jar:cLib2.jar:", classpath);
    }

