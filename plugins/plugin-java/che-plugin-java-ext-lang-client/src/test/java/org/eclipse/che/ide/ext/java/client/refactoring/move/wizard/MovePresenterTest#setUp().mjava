    @SuppressWarnings("unchecked")
    @Before
    public void setUp() throws Exception {
        List selectedItems = new ArrayList<>();

        selectedItems.add(packageNode);
        selectedItems.add(sourceFileNode);

        when(editorAgent.getActiveEditor()).thenReturn(activeEditor);
        when(refactorInfo.getSelectedItems()).thenReturn(selectedItems);
        when(dtoFactory.createDto(ElementToMove.class)).thenReturn(javaElement);
        when(dtoFactory.createDto(CreateMoveRefactoring.class)).thenReturn(moveRefactoring);
        when(dtoFactory.createDto(ReorgDestination.class)).thenReturn(destination);
        when(appContext.getCurrentProject()).thenReturn(currentProject);
        when(currentProject.getProjectConfig()).thenReturn(projectConfig);
        when(projectConfig.getPath()).thenReturn(PROJECT_PATH);
        when(refactorService.createMoveRefactoring(moveRefactoring)).thenReturn(sessionPromise);
        when(refactorService.applyRefactoring(session)).thenReturn(refactoringResultPromise);
        when(refactorService.setDestination(destination)).thenReturn(refactoringStatusPromise);
        when(navigationService.getProjectsAndPackages(true)).thenReturn(projectsPromise);
        when(projectsPromise.then(Matchers.<Operation<List<JavaProject>>>anyObject())).thenReturn(projectsPromise);
        when(dtoFactory.createDto(MoveSettings.class)).thenReturn(moveSettings);
        when(dtoFactory.createDto(RefactoringSession.class)).thenReturn(session);
        when(changeCreationResult.getStatus()).thenReturn(refactoringStatus);

        when(refactorService.setMoveSettings(moveSettings)).thenReturn(moveSettingsPromise);
        when(moveSettingsPromise.thenPromise(Matchers.<Function<Void, Promise<ChangeCreationResult>>>anyObject()))
                .thenReturn(changeCreationResultPromise);
        when(changeCreationResultPromise.then(Matchers.<Operation<ChangeCreationResult>>anyObject()))
                .thenReturn(changeCreationResultPromise);

        presenter = new MovePresenter(moveView,
                                      refactoringUpdater,
                                      appContext,
                                      editorAgent,
                                      previewPresenter,
                                      refactorService,
                                      navigationService,
                                      dtoFactory,
                                      locale,
                                      notificationManager);
    }

