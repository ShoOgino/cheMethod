    /** Iterate over changes that has UPDATE mode. In this case we try to update opened editors only. */
    private Promise<Void> proceedUpdateChanges(Promise<Void> promise, Iterator<ChangeInfo> iterator) {
        if (!iterator.hasNext()) {
            return promise;
        }

        final ChangeInfo changeInfo = iterator.next();

        //iterate over opened files in editor and find those file that matches ours
        final FileReferenceNode editorFile = getOpenedFileOrNull(!isNullOrEmpty(changeInfo.getOldPath()) ? changeInfo.getOldPath()
                                                                                                         : changeInfo.getPath());

        //if no one file were found, than it means that we shouldn't update anything
        if (editorFile == null) {
            return proceedUpdateChanges(promise, iterator);
        }

        final Promise<Void> derivedPromise = promise.thenPromise(new Function<Void, Promise<Void>>() {
            @Override
            public Promise<Void> apply(Void arg) throws FunctionException {
                return projectExplorer.getNodeByPath(new StorablePath(changeInfo.getPath()), true, false)
                                      .thenPromise(updateEditorContent(editorFile))
                                      .catchError(onNodeNotFound());

            }
        });

        return proceedUpdateChanges(derivedPromise, iterator);
    }

