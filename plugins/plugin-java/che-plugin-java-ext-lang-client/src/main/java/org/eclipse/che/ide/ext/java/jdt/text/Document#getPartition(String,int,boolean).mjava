    /**
     * Returns the document partition of the given partitioning in which the given offset is located.
     * <p>
     * If <code>preferOpenPartitions</code> is <code>true</code>, precedence is given to an open partition ending at
     * <code>offset</code> over a delimited partition starting at <code>offset</code>. If it is <code>false</code>, precedence is
     * given to the partition that does not end at <code>offset</code>.
     * </p>
     * This is only supported if the connected <code>DocumentPartitioner</code> supports it, i.e. implements
     * <code>DocumentPartitionerExtension2</code>. Otherwise, <code>preferOpenPartitions</code> is ignored. </p>
     *
     * @param partitioning
     *         the partitioning
     * @param offset
     *         the document offset
     * @param preferOpenPartitions
     *         <code>true</code> if precedence should be given to a open partition ending at
     *         <code>offset</code> over a closed partition starting at <code>offset</code>
     * @return a specification of the partition
     * @throws BadLocationException
     *         if offset is invalid in this document
     * @throws BadPartitioningException
     *         if partitioning is invalid for this document
     */
    TypedRegion getPartition(String partitioning, int offset, boolean preferOpenPartitions)
            throws BadLocationException, BadPartitioningException;

