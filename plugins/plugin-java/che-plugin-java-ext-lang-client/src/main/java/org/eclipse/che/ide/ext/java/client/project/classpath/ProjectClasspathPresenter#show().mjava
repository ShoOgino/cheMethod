  /** Show dialog. */
  public void show() {

    final Resource[] resources = appContext.getResources();

    Preconditions.checkState(resources != null && resources.length == 1);

    final Project project = resources[0].getProject();

    Preconditions.checkState(isJavaProject(project));

    classpathContainer
        .getClasspathEntries(project.getLocation().toString())
        .then(
            arg -> {
              classpathResolver.resolveClasspathEntries(arg);
              if (propertiesMap == null) {
                propertiesMap = new HashMap<>();
                for (ClasspathPagePresenter page : classpathPages) {
                  Set<ClasspathPagePresenter> pages =
                      propertiesMap.computeIfAbsent(page.getCategory(), k -> new HashSet<>());
                  pages.add(page);
                }

                view.setPages(propertiesMap);
              }
              view.showDialog();
              view.selectPage(
                  propertiesMap.entrySet().iterator().next().getValue().iterator().next());
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError arg) throws OperationException {
                notificationManager.notify(
                    "Problems with getting classpath", arg.getMessage(), FAIL, EMERGE_MODE);
              }
            });
  }

