  /**
   * Show Rename window with the special information.
   *
   * @param refactorInfo information about the rename operation
   */
  public void show(RefactorInfo refactorInfo) {
    this.refactorInfo = refactorInfo;
    TextEditor editor = (TextEditor) editorAgent.getActiveEditor();

    RenameSelectionParams params = dtoFactory.createDto(RenameSelectionParams.class);

    if (RefactoredItemType.JAVA_ELEMENT.equals(refactorInfo.getRefactoredItemType())) {
      TextPosition cursorPosition = editor.getCursorPosition();
      org.eclipse.lsp4j.Position position = dtoFactory.createDto(org.eclipse.lsp4j.Position.class);
      position.setCharacter(cursorPosition.getCharacter());
      position.setLine(cursorPosition.getLine());
      params.setPosition(position);
      String location =
          editorAgent.getActiveEditor().getEditorInput().getFile().getLocation().toString();
      params.setResourceUri(location);
      params.setRenameKind(RenameKind.JAVA_ELEMENT);
    } else {
      // get selected resource
      Resource resource = refactorInfo.getResources()[0];
      params.setResourceUri(resource.getLocation().toString());
      if (RefactoredItemType.COMPILATION_UNIT.equals(refactorInfo.getRefactoredItemType())) {
        params.setRenameKind(RenameKind.COMPILATION_UNIT);
      } else {
        params.setRenameKind(RenameKind.PACKAGE);
      }
    }

    extensionServiceClient
        .getRenameType(params)
        .then(this::showWizard)
        .catchError(
            error -> {
              notificationManager.notify(
                  locale.failedToRename(),
                  error.getMessage(),
                  StatusNotification.Status.FAIL,
                  FLOAT_MODE);
            });
  }

