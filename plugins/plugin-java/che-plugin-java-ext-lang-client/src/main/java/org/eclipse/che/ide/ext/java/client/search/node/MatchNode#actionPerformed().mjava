  @Override
  public void actionPerformed() {
    if (compilationUnit != null) {
      final EditorPartPresenter editorPartPresenter =
          editorAgent.getOpenedEditor(Path.valueOf(compilationUnit.getPath()));
      if (editorPartPresenter != null) {
        selectRange(editorPartPresenter);
        Scheduler.get()
            .scheduleDeferred(
                new Scheduler.ScheduledCommand() {
                  @Override
                  public void execute() {
                    editorAgent.activateEditor(editorPartPresenter);
                  }
                });
        return;
      }

      appContext
          .getWorkspaceRoot()
          .getFile(compilationUnit.getPath())
          .then(
              new Operation<Optional<File>>() {
                @Override
                public void apply(Optional<File> file) throws OperationException {
                  if (file.isPresent()) {
                    editorAgent.openEditor(
                        file.get(),
                        new OpenEditorCallbackImpl() {
                          @Override
                          public void onEditorOpened(EditorPartPresenter editor) {
                            selectRange(editor);
                          }
                        });
                  }
                }
              });
    } else if (classFile != null) {
      final String className = classFile.getElementName();

      final Resource resource = appContext.getResource();

      if (resource == null) {
        return;
      }

      final Project project = resource.getRelatedProject().get();

      service
          .getContent(project.getLocation(), className)
          .then(
              new Operation<ClassContent>() {
                @Override
                public void apply(ClassContent content) throws OperationException {
                  final VirtualFile file =
                      new SyntheticFile(
                          Path.valueOf(className.replace('.', '/')).lastSegment(),
                          content.getContent());
                  editorAgent.openEditor(
                      file,
                      new OpenEditorCallbackImpl() {
                        @Override
                        public void onEditorOpened(EditorPartPresenter editor) {
                          selectRange(editor);
                        }
                      });
                }
              });
    }
  }

