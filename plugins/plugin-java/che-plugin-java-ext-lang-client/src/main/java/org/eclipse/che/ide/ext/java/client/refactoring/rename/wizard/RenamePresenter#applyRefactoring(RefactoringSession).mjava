    private void applyRefactoring(RefactoringSession session) {
        refactorService.applyRefactoring(session).then(new Operation<RefactoringResult>() {
            @Override
            public void apply(RefactoringResult arg) throws OperationException {
                if (arg.getSeverity() == OK) {
                    view.hide();
                    refactoringUpdater.updateAfterRefactoring(arg.getChanges());

                    final Resource[] resources = refactorInfo != null ? refactorInfo.getResources() : null;
                    Project project = null;

                    if (resources != null && resources.length == 1) {
                        final Optional<Project> optProject = resources[0].getRelatedProject();
                        if (optProject.isPresent()) {
                            project = optProject.get();
                        }
                    } else {
                        final Resource resource = appContext.getResource();

                        if (resource != null) {
                            final Optional<Project> optProject = resource.getRelatedProject();
                            if (optProject.isPresent()) {
                                project = optProject.get();
                            }
                        }
                    }

                    if (project != null) {
                        refactorService.reindexProject(project.getLocation().toString());
                    }

                    setEditorFocus();
                } else {
                    view.showErrorMessage(arg);
                }
            }
        });
    }

