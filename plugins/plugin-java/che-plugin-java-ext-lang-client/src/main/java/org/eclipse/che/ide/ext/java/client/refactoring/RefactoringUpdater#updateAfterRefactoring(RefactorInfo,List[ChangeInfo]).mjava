    /**
     * Iterates over each refactoring change and according to change type performs specific update operation.
     * i.e. for {@code ChangeName#UPDATE} updates only opened editors, for {@code ChangeName#MOVE or ChangeName#RENAME_COMPILATION_UNIT}
     * updates only new paths and opened editors, for {@code ChangeName#RENAME_PACKAGE} reloads package structure and restore expansion.
     *
     * @param changes
     *         applied changes
     */
    public void updateAfterRefactoring(RefactorInfo refactoringInfo, List<ChangeInfo> changes) {
        if (changes == null || changes.isEmpty()) {
            return;
        }

        final Iterable<ChangeInfo> changesExceptUpdates = filter(changes, not(UPDATE_ONLY));
        final Iterable<ChangeInfo> updateChangesOnly = filter(changes, UPDATE_ONLY);

        Promise<Void> promise = resolve(null);
        promise = proceedGeneralChanges(promise, changesExceptUpdates.iterator(), refactoringInfo);
        proceedUpdateChanges(promise, updateChangesOnly.iterator());
    }

