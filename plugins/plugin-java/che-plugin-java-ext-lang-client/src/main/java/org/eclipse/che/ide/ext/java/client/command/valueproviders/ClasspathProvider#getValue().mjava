    @Override
    public Promise<String> getValue() {

        final Resource[] resources = appContext.getResources();

        if (resources == null || resources.length != 1) {
            return promises.resolve("");
        }

        final Resource resource = resources[0];
        final Optional<Project> project = resource.getRelatedProject();

        if (!JavaUtil.isJavaProject(project.get())) {
            return promises.resolve("");
        }

        final String projectPath = project.get().getLocation().toString();

        return classpathContainer.getClasspathEntries(projectPath).then(new Function<List<ClasspathEntryDto>, String>() {
            @Override
            public String apply(List<ClasspathEntryDto> arg) throws FunctionException {
                classpathResolver.resolveClasspathEntries(arg);
                Set<String> libs = classpathResolver.getLibs();
                StringBuilder classpath = new StringBuilder();
                for (String lib : libs) {
                    classpath.append(lib).append(':');
                }

                for (ClasspathEntryDto container : classpathResolver.getContainers()) {
                    if (!JRE_CONTAINER.equals(container.getPath())) {
                        addLibsFromContainer(container, classpath);
                    }
                }

                if (classpath.toString().isEmpty()) {
                    classpath.append(appContext.getProjectsRoot().toString()).append(projectPath).append(':');
                }

                return classpath.toString();
            }
        });
    }

