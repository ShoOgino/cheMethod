    @Override
    public Promise<String> getValue() {
        CurrentProject currentProject = appContext.getCurrentProject();
        if (currentProject == null) {
            return Promises.resolve("");
        }

        String languageAttribute = currentProject.getAttributeValue(Constants.LANGUAGE);
        if (!Constants.JAVA_ID.equals(languageAttribute)) {
            return Promises.resolve("");
        }

        final String projectPath = currentProject.getProjectConfig().getPath();

        return classpathContainer.getClasspathEntries(projectPath).then(
                new Function<List<ClasspathEntryDTO>, String>() {
                    @Override
                    public String apply(List<ClasspathEntryDTO> arg) throws FunctionException {
                        classpathResolver.resolveClasspathEntries(arg);
                        Set<String> sources = classpathResolver.getSources();
                        StringBuilder classpath = new StringBuilder("");
                        for (String source : sources) {
                            classpath.append(source);
                        }

                        if (classpath.toString().isEmpty()) {
                            classpath.append(appContext.getProjectsRoot()).append(projectPath);
                        }

                        classpath.append(':');

                        return classpath.toString();
                    }
                });
    }

