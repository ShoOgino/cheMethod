    /**
     * Removes a listener from this list. Has no effect if the <a href="ListenerList.html#same">same</a> listener was not already
     * registered.
     *
     * @param listener
     *         the non-<code>null</code> listener to remove
     */
    public synchronized void remove(Object listener) {
        // This method is synchronized to protect against multiple threads adding
        // or removing listeners concurrently. This does not block concurrent readers.
        if (listener == null)
            throw new IllegalArgumentException();
        int oldSize = listeners.length;
        for (int i = 0; i < oldSize; ++i) {
            Object listener2 = listeners[i];
            if (identity ? listener == listener2 : listener.equals(listener2)) {
                if (oldSize == 1) {
                    listeners = EmptyArray;
                } else {
                    // Thread safety: create new array to avoid affecting concurrent readers
                    Object[] newListeners = new Object[oldSize - 1];
                    System.arraycopy(listeners, 0, newListeners, 0, i);
                    System.arraycopy(listeners, i + 1, newListeners, i, oldSize - i - 1);
                    // atomic assignment to field
                    this.listeners = newListeners;
                }
                return;
            }
        }
    }

