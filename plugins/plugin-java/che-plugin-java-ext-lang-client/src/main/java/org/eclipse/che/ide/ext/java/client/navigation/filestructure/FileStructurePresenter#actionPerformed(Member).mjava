  /** {@inheritDoc} */
  @Override
  public void actionPerformed(final Member member) {
    view.close();
    showInheritedMembers = false;
    if (member.isBinary()) {

      final Resource resource = context.getResource();

      if (resource == null) {
        return;
      }

      final Optional<Project> project = resource.getRelatedProject();

      javaNavigationService
          .getEntry(project.get().getLocation(), member.getLibId(), member.getRootPath())
          .then(
              entry -> {
                javaNavigationService
                    .getContent(
                        project.get().getLocation(),
                        member.getLibId(),
                        Path.valueOf(entry.getPath()))
                    .then(
                        content -> {
                          final String clazz =
                              entry.getName().substring(0, entry.getName().indexOf('.'));
                          final VirtualFile file =
                              new SyntheticFile(entry.getName(), clazz, content.getContent());
                          editorAgent.openEditor(
                              file,
                              new OpenEditorCallbackImpl() {
                                @Override
                                public void onEditorOpened(EditorPartPresenter editor) {
                                  setCursor(editor, member.getFileRegion().getOffset());
                                }
                              });
                        });
              });
    } else {
      context
          .getWorkspaceRoot()
          .getFile(member.getRootPath())
          .then(
              file -> {
                if (file.isPresent()) {
                  editorAgent.openEditor(
                      file.get(),
                      new OpenEditorCallbackImpl() {
                        @Override
                        public void onEditorOpened(EditorPartPresenter editor) {
                          setCursor(editor, member.getFileRegion().getOffset());
                        }
                      });
                }
              });
    }
    Scheduler.get()
        .scheduleDeferred(
            new Scheduler.ScheduledCommand() {
              @Override
              public void execute() {
                setCursorPosition(member.getFileRegion());
              }
            });
    showInheritedMembers = false;
  }

