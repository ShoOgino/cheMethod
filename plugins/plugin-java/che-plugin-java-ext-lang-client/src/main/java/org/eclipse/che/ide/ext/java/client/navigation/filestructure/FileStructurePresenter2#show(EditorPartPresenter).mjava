  /**
   * Shows the structure of the opened class.
   *
   * @param editorPartPresenter the active editor
   */
  public void show(EditorPartPresenter editorPartPresenter) {
    loader.show();
    if (view.isShowing()) {
      showInheritedMembers = !showInheritedMembers;
      view.setShowInherited(showInheritedMembers);
      VirtualFile file = activeEditor.getEditorInput().getFile();
      javaExtensionService
          .fileStructure(
              new DtoClientImpls.FileStructureCommandParametersDto(
                  new FileStructureCommandParameters(dtoHelper.getUri(file), showInheritedMembers)))
          .then(
              result -> {
                loader.hide();
                view.setInput(result);
                view.show();
              })
          .catchError(
              e -> {
                loader.hide();
              });
    } else {
      showInheritedMembers = false;
      view.setTitle(editorPartPresenter.getEditorInput().getFile().getName());
      view.setShowInherited(showInheritedMembers);

      if (!(editorPartPresenter instanceof TextEditor)) {
        Log.error(getClass(), "Open Declaration support only TextEditor as editor");
        return;
      }
      activeEditor = ((TextEditor) editorPartPresenter);
      VirtualFile file = activeEditor.getEditorInput().getFile();
      javaExtensionService
          .fileStructure(
              new DtoClientImpls.FileStructureCommandParametersDto(
                  new FileStructureCommandParameters(dtoHelper.getUri(file), showInheritedMembers)))
          .then(
              result -> {
                loader.hide();
                view.setInput(result);
                view.show();
              })
          .catchError(
              e -> {
                loader.hide();
                Log.error(getClass(), e);
              });
    }
  }

