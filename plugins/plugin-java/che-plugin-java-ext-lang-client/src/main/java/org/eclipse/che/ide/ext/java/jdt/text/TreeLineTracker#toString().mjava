  /* @see java.lang.Object#toString() */
  public String toString() {
    int depth = computeDepth(fRoot);
    int WIDTH = 30;
    int leaves = (int) Math.pow(2, depth - 1);
    int width = WIDTH * leaves;
    String empty = "."; //$NON-NLS-1$

    List<Node> roots = new LinkedList<TreeLineTracker.Node>();
    roots.add(fRoot);
    StringBuffer buf = new StringBuffer((width + 1) * depth);
    int indents = leaves;
    char[] space = new char[leaves * WIDTH / 2];
    Arrays.fill(space, ' ');
    for (int d = 0; d < depth; d++) {
      // compute indent
      indents /= 2;
      int spaces = Math.max(0, indents * WIDTH - WIDTH / 2);
      // print nodes
      for (ListIterator<Node> it = roots.listIterator(); it.hasNext(); ) {
        // pad before
        buf.append(space, 0, spaces);

        Node node = it.next();
        String box;
        // replace the node with its children
        if (node == null) {
          it.add(null);
          box = empty;
        } else {
          it.set(node.left);
          it.add(node.right);
          box = node.toString();
        }

        // draw the node, pad to WIDTH
        int pad_left = (WIDTH - box.length() + 1) / 2;
        int pad_right = WIDTH - box.length() - pad_left;
        buf.append(space, 0, pad_left);
        buf.append(box);
        buf.append(space, 0, pad_right);

        // pad after
        buf.append(space, 0, spaces);
      }

      buf.append('\n');
    }

    return buf.toString();
  }

