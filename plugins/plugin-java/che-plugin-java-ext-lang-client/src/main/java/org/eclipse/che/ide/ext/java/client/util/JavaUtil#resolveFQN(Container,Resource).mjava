  /**
   * Resolves fully qualified name based on base on start point container and end point resource.
   *
   * <p>Usually as start point there is a source directory and as end point there is a package
   * fragment or java file.
   *
   * @param startPoint the start point container from which fqn should be resolved
   * @param endPoint the end point resource to which fqn should be resolved
   * @return the resolved fully qualified name
   * @throws IllegalArgumentException in case if given arguments are invalid. Reason includes:
   *     <ul>
   *       <li>Null source folder occurred
   *       <li>Null resource occurred
   *       <li>Given base folder is not prefix of checked resource
   *     </ul>
   *
   * @since 4.4.0
   */
  public static String resolveFQN(Container startPoint, Resource endPoint) {
    checkArgument(startPoint != null, "Null source folder occurred");
    checkArgument(endPoint != null, "Null resource occurred");
    checkArgument(
        startPoint.getLocation().isPrefixOf(endPoint.getLocation()),
        "Given base folder is not prefix of checked resource");

    Path path = endPoint.getLocation().removeFirstSegments(startPoint.getLocation().segmentCount());

    if (isJavaFile(endPoint)) {
      final String ext = ((File) endPoint).getExtension();

      if (!isNullOrEmpty(ext)) {
        final String name = endPoint.getName();
        path =
            path.removeLastSegments(1).append(name.substring(0, name.length() - ext.length() - 1));
      }
    }

    return path.toString().replace('/', '.');
  }

