    private void performRename(RenameRefactoringSession session) {
        final LinkedRenameRefactoringApply dto = createLinkedRenameRefactoringApplyDto(newName, session.getSessionId());
        Promise<RefactoringResult> applyModelPromise = refactoringServiceClient.applyLinkedModeRename(dto);
        applyModelPromise.then(new Operation<RefactoringResult>() {
            @Override
            public void apply(RefactoringResult result) throws OperationException {
                switch (result.getSeverity()) {
                    case OK:
                    case INFO:
                        RefactorInfo refactorInfo = RefactorInfo.of(RefactoredItemType.JAVA_ELEMENT, null);

                        refactoringUpdater.updateAfterRefactoring(refactorInfo, result.getChanges());
                        String projectPath = textEditor.getDocument().getFile().getProject().getProjectConfig().getPath();
                        refactoringServiceClient.reindexProject(projectPath);
                        break;
                    case WARNING:
                    case ERROR:
                        enableAutoSave();

                        undoChanges();

                        showWarningDialog();
                        break;
                    case FATAL:
                        undoChanges();

                        notificationManager.notify(locale.failedToRename(), result.getEntries().get(0).getMessage(), FAIL, FLOAT_MODE);
                        break;
                    default:
                        break;
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                enableAutoSave();

                undoChanges();

                notificationManager.notify(locale.failedToRename(), arg.getMessage(), FAIL, FLOAT_MODE);
            }
        });
    }

