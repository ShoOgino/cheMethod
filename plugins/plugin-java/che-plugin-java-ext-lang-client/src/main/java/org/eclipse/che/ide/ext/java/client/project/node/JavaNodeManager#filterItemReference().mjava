    @Override
    public Function<List<ItemReference>, Promise<List<ItemReference>>> filterItemReference() {
        return new Function<List<ItemReference>, Promise<List<ItemReference>>>() {
            @Override
            public Promise<List<ItemReference>> apply(List<ItemReference> referenceList) throws FunctionException {

                final List<ItemReference> collector = new ArrayList<>();

                Promise<Void> promise = Promises.resolve(null);

                return getNonEmptyChildren(promise, referenceList.listIterator(), collector)
                        .thenPromise(new Function<Void, Promise<List<ItemReference>>>() {
                            @Override
                            public Promise<List<ItemReference>> apply(Void arg) throws FunctionException {
                                return Promises.resolve(collector);
                            }
                        });
            }
        };
    }

