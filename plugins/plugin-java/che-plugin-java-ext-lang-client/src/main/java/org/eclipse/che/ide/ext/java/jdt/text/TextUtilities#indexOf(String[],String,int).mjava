  /**
   * Returns the starting position and the index of the first matching search string in the given
   * text that is greater than the given offset. If more than one search string matches with the
   * same starting position then the longest one is returned.
   *
   * @param searchStrings the strings to search for
   * @param text the text to be searched
   * @param offset the offset at which to start the search
   * @return an <code>int[]</code> with two elements where the first is the starting offset, the
   *     second the index of the found search string in the given <code>searchStrings</code> array,
   *     returns <code>[-1, -1]</code> if no match exists
   */
  public static int[] indexOf(String[] searchStrings, String text, int offset) {

    int[] result = {-1, -1};
    int zeroIndex = -1;

    for (int i = 0; i < searchStrings.length; i++) {

      int length = searchStrings[i].length();

      if (length == 0) {
        zeroIndex = i;
        continue;
      }

      int index = text.indexOf(searchStrings[i], offset);
      if (index >= 0) {

        if (result[0] == -1) {
          result[0] = index;
          result[1] = i;
        } else if (index < result[0]) {
          result[0] = index;
          result[1] = i;
        } else if (index == result[0] && length > searchStrings[result[1]].length()) {
          result[0] = index;
          result[1] = i;
        }
      }
    }

    if (zeroIndex > -1 && result[0] == -1) {
      result[0] = 0;
      result[1] = zeroIndex;
    }

    return result;
  }

