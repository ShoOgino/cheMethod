  /**
   * Returns the node (line) including a certain offset. If the offset is between two lines, the
   * line starting at <code>offset</code> is returned.
   *
   * <p>This means that for offsets smaller than the length, the following holds:
   *
   * <p><code>line.offset <= offset < line.offset + offset.length</code>.
   *
   * <p>If <code>offset</code> is the document length, then this is true:
   *
   * <p><code>offset= line.offset + line.length</code>.
   *
   * @param offset a document offset
   * @return the line starting at or containing <code>offset</code>
   * @throws BadLocationException if the offset is invalid
   */
  private Node nodeByOffset(final int offset) throws BadLocationException {
    /* Works for any binary search tree. */
    int remaining = offset;
    Node node = fRoot;
    while (true) {
      if (node == null) fail(offset);

      if (remaining < node.offset) {
        node = node.left;
      } else {
        remaining -= node.offset;
        if (remaining < node.length
            || remaining == node.length && node.right == null) { // last line
          break;
        }
        remaining -= node.length;
        node = node.right;
      }
    }

    return node;
  }

