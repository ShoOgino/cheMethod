  /**
   * Computes the partitioning of the given document range based on the given partitioning type.
   *
   * <p>If <code>includeZeroLengthPartitions</code> is <code>true</code>, a zero-length partition of
   * an open partition type (usually the default partition) is included between two closed
   * partitions. If it is <code>false</code>, no zero-length partitions are included. This is only
   * supported if the connected <code>DocumentPartitioner</code> supports it, i.e. implements <code>
   * DocumentPartitionerExtension2</code>. Otherwise, <code>includeZeroLengthPartitions</code> is
   * ignored.
   *
   * @param partitioning the document's partitioning type
   * @param offset the document offset at which the range starts
   * @param length the length of the document range
   * @param includeZeroLengthPartitions <code>true</code> if zero-length partitions should be
   *     returned as part of the computed partitioning
   * @return a specification of the range's partitioning
   * @throws BadLocationException if the range is invalid in this document$
   * @throws BadPartitioningException if partitioning is invalid for this document
   */
  TypedRegion[] computePartitioning(
      String partitioning, int offset, int length, boolean includeZeroLengthPartitions)
      throws BadLocationException, BadPartitioningException;

