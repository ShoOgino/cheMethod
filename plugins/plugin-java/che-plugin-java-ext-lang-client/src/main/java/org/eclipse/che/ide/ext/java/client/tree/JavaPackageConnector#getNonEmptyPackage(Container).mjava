    protected Promise<Container> getNonEmptyPackage(final Container source) {
        return source.getChildren().thenPromise(new Function<Resource[], Promise<Container>>() {
            @Override
            public Promise<Container> apply(Resource[] children) throws FunctionException {

                if (children == null || children.length == 0 || children.length > 1) {
                    return promises.resolve(source);
                } else {
                    final Resource resource = children[0];

                    if (resource.getResourceType() == FILE) {
                        return promises.resolve(source);
                    } else {
                        return getNonEmptyPackage((Container)resource);
                    }
                }
            }
        }).catchErrorPromise(new Function<PromiseError, Promise<Container>>() {
            @Override
            public Promise<Container> apply(PromiseError arg) throws FunctionException {
                return promises.resolve(source);
            }
        });
    }

