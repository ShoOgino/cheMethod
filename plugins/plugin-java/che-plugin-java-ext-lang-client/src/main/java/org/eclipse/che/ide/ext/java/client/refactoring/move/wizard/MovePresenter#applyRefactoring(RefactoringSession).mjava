  private void applyRefactoring(RefactoringSession session) {
    refactorService
        .applyRefactoring(session)
        .then(
            refactoringResult -> {
              List<ChangeInfo> changes = refactoringResult.getChanges();
              if (refactoringResult.getSeverity() == OK) {
                view.close();
                refactoringUpdater
                    .updateAfterRefactoring(changes)
                    .then(
                        arg -> {
                          Project project = null;
                          Resource[] resources = refactorInfo.getResources();
                          if (resources != null && resources.length == 1) {
                            project = resources[0].getProject();
                          }

                          if (project != null) {
                            refactorService.reindexProject(project.getPath());
                          }

                          refactoringUpdater
                              .handleMovingFiles(changes)
                              .then(clientServerEventService.sendFileTrackingResumeEvent());
                        });
              } else {
                view.showErrorMessage(refactoringResult);
                refactoringUpdater
                    .handleMovingFiles(changes)
                    .then(clientServerEventService.sendFileTrackingResumeEvent());
              }
            });
  }

