  @Override
  public void setTreeOfChanges(Map<String, PreviewNode> nodes) {
    containerChanges.clear();
    showDiffPanel(false);

    final SelectionModel<PreviewNode> selectionModel = new SingleSelectionModel<>();
    selectionModel.addSelectionChangeHandler(
        event -> {
          PreviewNode selectedNode =
              (PreviewNode) ((SingleSelectionModel) selectionModel).getSelectedObject();
          delegate.onSelectionChanged(selectedNode);
        });

    Tree tree = new Tree();

    tree.getElement().setId("tree-of-changes");

    for (PreviewNode parentChange : nodes.values()) {
      TreeItem treeItem = new TreeItem();
      containerChanges.put(treeItem, parentChange);
      createTreeElement(treeItem, parentChange.getDescription(), parentChange.getChildren());
      tree.addItem(treeItem);
    }

    tree.addSelectionHandler(
        event -> {
          if (selectedElement != null) {
            selectedElement.getStyle().setProperty("background", "transparent");
          }

          selectedElement = event.getSelectedItem().getWidget().getElement();
          selectedElement.getStyle().setProperty("background", getEditorSelectionColor());
        });

    treePanel.clear();
    treePanel.add(tree);
  }

