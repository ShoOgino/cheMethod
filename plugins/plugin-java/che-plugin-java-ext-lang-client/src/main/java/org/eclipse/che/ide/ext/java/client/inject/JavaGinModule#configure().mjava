    /** {@inheritDoc} */
    @Override
    protected void configure() {
        GinMapBinder<String, ProposalAction> proposalActionMapBinder = GinMapBinder.newMapBinder(binder(), String.class, ProposalAction.class);
        proposalActionMapBinder.addBinding(JAVA_ORGANIZE_IMPORT_ID).to(OrganizeImportsAction.class);

        bind(NewJavaSourceFileView.class).to(NewJavaSourceFileViewImpl.class).in(Singleton.class);
        bind(QuickDocumentation.class).to(QuickDocPresenter.class).in(Singleton.class);
        bind(JavaNavigationService.class).to(JavaNavigationServiceImpl.class);
        bind(JavaClasspathServiceClient.class).to(JavaClasspathServiceClientImpl.class);
        bind(JavaSearchService.class).to(JavaSearchServiceWS.class);

        GinMultibinder.newSetBinder(binder(), NodeInterceptor.class).addBinding().to(TestFolderDecorator.class);
        GinMultibinder.newSetBinder(binder(), NodeInterceptor.class).addBinding().to(JavaPackageConnector.class);
        GinMultibinder.newSetBinder(binder(), NodeIconProvider.class).addBinding().to(SourceFolderDecorator.class);

        GinMultibinder.newSetBinder(binder(), NodeInterceptor.class).addBinding().to(LibraryNodeProvider.class);

        GinMultibinder.newSetBinder(binder(), ResourceInterceptor.class).addBinding().to(SourceFolderInterceptor.class);
        GinMultibinder.newSetBinder(binder(), ResourceInterceptor.class).addBinding().to(ClassInterceptor.class);


        GinMultibinder.newSetBinder(binder(), CommandType.class).addBinding().to(JavaCommandType.class);

        GinMapBinder<String, FqnProvider> fqnProviders = GinMapBinder.newMapBinder(binder(), String.class, FqnProvider.class);
        fqnProviders.addBinding("maven").to(JavaFqnProvider.class);

        install(new GinFactoryModuleBuilder().build(JavaNodeFactory.class));
        install(new GinFactoryModuleBuilder().implement(PropertyWidget.class, PropertyWidgetImpl.class)
                                             .build(PropertyWidgetFactory.class));

        install(new GinFactoryModuleBuilder().build(NodeFactory.class));
        install(new GinFactoryModuleBuilder().build(org.eclipse.che.ide.ext.java.client.navigation.factory.NodeFactory.class));

        GinMultibinder<PreferencePagePresenter> settingsBinder = GinMultibinder.newSetBinder(binder(), PreferencePagePresenter.class);
        settingsBinder.addBinding().to(JavaCompilerPreferencePresenter.class);

        bind(PreferencesManager.class).annotatedWith(JavaCompilerPreferenceManager.class).to(ErrorsWarningsPreferenceManager.class);
        GinMultibinder.newSetBinder(binder(), PreferencesManager.class).addBinding().to(ErrorsWarningsPreferenceManager.class);

        GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class).addBinding().to(ClasspathProvider.class);
        GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class).addBinding().to(OutputDirProvider.class);
        GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class).addBinding().to(MainClassProvider.class);
        GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class).addBinding().to(SourcepathProvider.class);
        GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class).addBinding().to(CurrentClassFQNProvider.class);
        GinMultibinder.newSetBinder(binder(), ClasspathPagePresenter.class).addBinding().to(LibEntryPresenter.class);
        GinMultibinder.newSetBinder(binder(), ClasspathPagePresenter.class).addBinding().to(SourceEntryPresenter.class);
        GinMultibinder.newSetBinder(binder(), RenamingSupport.class).addBinding().to(JavaSourceRenameValidator.class);
    }

