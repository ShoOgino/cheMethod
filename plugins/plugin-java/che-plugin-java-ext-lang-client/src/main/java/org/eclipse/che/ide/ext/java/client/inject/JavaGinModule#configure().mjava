  /** {@inheritDoc} */
  @Override
  protected void configure() {
    install(new FormatterGinModule());
    newSetBinder(binder(), LanguageDescription.class)
        .addBinding()
        .toProvider(JavaLanguageDescriptionProvider.class);

    GinMapBinder<String, ProposalAction> proposalActionMapBinder =
        GinMapBinder.newMapBinder(binder(), String.class, ProposalAction.class);
    proposalActionMapBinder.addBinding(JAVA_ORGANIZE_IMPORT_ID).to(OrganizeImportsAction.class);

    bind(NewJavaSourceFileView.class).to(NewJavaSourceFileViewImpl.class).in(Singleton.class);
    bind(QuickDocumentation.class).to(QuickDocPresenter.class).in(Singleton.class);

    bind(PomDiagnosticsRequestor.class).asEagerSingleton();

    GinMultibinder.newSetBinder(binder(), NodeInterceptor.class)
        .addBinding()
        .to(TestFolderDecorator.class);
    GinMultibinder.newSetBinder(binder(), NodeInterceptor.class)
        .addBinding()
        .to(JavaPackageConnector.class);
    GinMultibinder.newSetBinder(binder(), NodeIconProvider.class)
        .addBinding()
        .to(SourceFolderDecorator.class);

    GinMultibinder.newSetBinder(binder(), NodeInterceptor.class)
        .addBinding()
        .to(LibraryNodeProvider.class);

    GinMultibinder.newSetBinder(binder(), ResourceInterceptor.class)
        .addBinding()
        .to(SourceFolderInterceptor.class);
    GinMultibinder.newSetBinder(binder(), ResourceInterceptor.class)
        .addBinding()
        .to(ClassInterceptor.class);

    GinMultibinder.newSetBinder(binder(), CommandType.class).addBinding().to(JavaCommandType.class);

    GinMapBinder<String, FqnProvider> fqnProviders =
        GinMapBinder.newMapBinder(binder(), String.class, FqnProvider.class);
    fqnProviders.addBinding("maven").to(JavaFqnProvider.class);

    install(
        new GinFactoryModuleBuilder()
            .build(org.eclipse.che.ide.ext.java.client.navigation.filestructure.NodeFactory.class));
    install(new GinFactoryModuleBuilder().build(JavaNodeFactory.class));
    install(
        new GinFactoryModuleBuilder()
            .implement(PropertyWidget.class, PropertyWidgetImpl.class)
            .build(PropertyWidgetFactory.class));

    install(
        new GinFactoryModuleBuilder()
            .implement(ProgressView.class, ProgressViewImpl.class)
            .build(ProgressWidgetFactory.class));

    install(
        new GinFactoryModuleBuilder()
            .build(org.eclipse.che.ide.ext.java.client.search.NodeFactory.class));
    bind(FindUsagesView.class).to(FindUsagesViewImpl.class);

    GinMultibinder<PreferencePagePresenter> settingsBinder =
        GinMultibinder.newSetBinder(binder(), PreferencePagePresenter.class);
    settingsBinder.addBinding().to(JavaCompilerPreferencePresenter.class);

    bind(PreferencesManager.class)
        .annotatedWith(JavaCompilerPreferenceManager.class)
        .to(ErrorsWarningsPreferenceManager.class);
    GinMultibinder.newSetBinder(binder(), PreferencesManager.class)
        .addBinding()
        .to(ErrorsWarningsPreferenceManager.class);

    GinMultibinder.newSetBinder(binder(), Macro.class).addBinding().to(ClasspathMacro.class);
    GinMultibinder.newSetBinder(binder(), Macro.class).addBinding().to(OutputDirMacro.class);
    GinMultibinder.newSetBinder(binder(), Macro.class).addBinding().to(MainClassMacro.class);
    GinMultibinder.newSetBinder(binder(), Macro.class).addBinding().to(SourcepathMacro.class);
    GinMultibinder.newSetBinder(binder(), Macro.class).addBinding().to(CurrentClassFQN_Macro.class);
    GinMultibinder.newSetBinder(binder(), ClasspathPagePresenter.class)
        .addBinding()
        .to(LibEntryPresenter.class);
    GinMultibinder.newSetBinder(binder(), ClasspathPagePresenter.class)
        .addBinding()
        .to(SourceEntryPresenter.class);
    GinMultibinder.newSetBinder(binder(), RenamingSupport.class)
        .addBinding()
        .to(JavaSourceRenameValidator.class);
  }

