    public PreviewChangesModel(RefactoringPreview changes,
                               final SelectionModel<RefactoringPreview> selectionModel,
                               final PreviewView.ActionDelegate delegate) {
        this.changes = changes;
        this.selectionModel = selectionModel;

        List<HasCell<RefactoringPreview, ?>> hasCells = new ArrayList<>();

        hasCells.add(new HasCell<RefactoringPreview, Boolean>() {

            private CheckboxCell cell = new CheckboxCell(false, false);

            @Override
            public Cell<Boolean> getCell() {
                return cell;
            }

            @Override
            public FieldUpdater<RefactoringPreview, Boolean> getFieldUpdater() {
                return new FieldUpdater<RefactoringPreview, Boolean>() {
                    @Override
                    public void update(int index, RefactoringPreview object, Boolean value) {
                        object.setEnabled(value);
                        delegate.onEnabledStateChanged(object);
                    }
                };
            }

            @Override
            public Boolean getValue(RefactoringPreview object) {
                return object.isEnabled();
            }

        });

        hasCells.add(new HasCell<RefactoringPreview, RefactoringPreview>() {

            private RefactoringPreviewCell cell = new RefactoringPreviewCell();

            @Override
            public Cell<RefactoringPreview> getCell() {
                return cell;
            }

            @Override
            public FieldUpdater<RefactoringPreview, RefactoringPreview> getFieldUpdater() {
                return null;
            }

            @Override
            public RefactoringPreview getValue(RefactoringPreview object) {
                return object;
            }
        });

        refactoringPreviewCell = new CompositeCell<RefactoringPreview>(hasCells) {
            @Override
            public void render(Context context, RefactoringPreview value, SafeHtmlBuilder sb) {
                sb.appendHtmlConstant("<div style=\"display: inline-flex\">");
                super.render(context, value, sb);
                sb.appendHtmlConstant("</div>");
            }

            @Override
            protected Element getContainerElement(Element parent) {
                return parent.getFirstChildElement();
            }

            @Override
            protected <X> void render(Context context,
                                      RefactoringPreview value,
                                      SafeHtmlBuilder sb,
                                      HasCell<RefactoringPreview, X> hasCell) {
                Cell<X> cell = hasCell.getCell();
                sb.appendHtmlConstant("<div style=\"display: flex; align-items: center;\">");
                cell.render(context, hasCell.getValue(value), sb);
                sb.appendHtmlConstant("</div>");
            }
        };
    }

