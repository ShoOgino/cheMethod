    /**
     * Launch java rename refactoring process
     *
     * @param textEditorPresenter
     *         editor where user makes refactoring
     */
    public void refactor(final TextEditor textEditorPresenter) {
        final CreateRenameRefactoring createRenameRefactoring = createRenameRefactoringDto(textEditorPresenter);

        textEditorPresenter.setFocus();

        Promise<RenameRefactoringSession> createRenamePromise = refactoringServiceClient.createRenameRefactoring(createRenameRefactoring);
        createRenamePromise.then(new Operation<RenameRefactoringSession>() {
            @Override
            public void apply(RenameRefactoringSession session) throws OperationException {
                if (session.isMastShowWizard() || isActiveLinkedEditor) {
                    renamePresenter.show(session);
                    if (mode != null) {
                        mode.exitLinkedMode(false);
                    }
                } else if (session.getLinkedModeModel() != null && textEditorPresenter instanceof HasLinkedMode) {
                    isActiveLinkedEditor = true;
                    activateLinkedModeIntoEditor(session, ((HasLinkedMode)textEditorPresenter), textEditorPresenter.getDocument());
                } else {
                    notificationManager.notify(locale.failedToRename(), locale.renameErrorEditor(), FAIL, true,
                                               textEditorPresenter.getEditorInput().getFile().getProject().getProjectConfig());
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                dialogFactory.createMessageDialog(locale.renameRename(), locale.renameOperationUnavailable(), null).show();
                if (mode != null) {
                    mode.exitLinkedMode(false);
                }
            }
        });
    }

