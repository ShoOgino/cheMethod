    /** {@inheritDoc} */
    @Override
    public void setMoveDestinationPath(String path, String projectPath) {
        ReorgDestination destination = dtoFactory.createDto(ReorgDestination.class);
        destination.setType(ReorgDestination.DestinationType.PACKAGE);
        destination.setSessionId(refactoringSessionId);
        destination.setProjectPath(projectPath);
        destination.setDestination(path);
        Promise<RefactoringStatus> promise = refactorService.setDestination(destination);
        promise.then(new Operation<RefactoringStatus>() {
            @Override
            public void apply(RefactoringStatus arg) throws OperationException {
                view.setEnableAcceptButton(true);
                view.setEnablePreviewButton(true);

                switch (arg.getSeverity()) {
                    case INFO:
                        view.showStatusMessage(arg);
                        break;
                    case WARNING:
                        view.showStatusMessage(arg);
                        break;
                    case ERROR:
                        showErrorMessage(arg);
                        break;
                    case FATAL:
                        showErrorMessage(arg);
                        break;
                    case OK:
                    default:
                        view.clearStatusMessage();
                        break;
                }
            }
        });
    }

