  /** {@inheritDoc} */
  @Override
  public void setTreeOfChanges(final RefactoringPreview changes) {
    showDiffPanel(false);

    final SelectionModel<RefactoringPreview> selectionModel = new SingleSelectionModel<>();
    selectionModel.addSelectionChangeHandler(
        event -> {
          RefactoringPreview selectedNode =
              (RefactoringPreview) ((SingleSelectionModel) selectionModel).getSelectedObject();
          delegate.onSelectionChanged(selectedNode);
        });

    Tree tree = new Tree();

    tree.getElement().setId("tree-of-changes");

    for (RefactoringPreview parentChange : changes.getChildrens()) {
      TreeItem treeItem = new TreeItem();
      containerChanges.put(treeItem, parentChange);
      createTreeElement(treeItem, parentChange.getText(), parentChange.getChildrens());
      tree.addItem(treeItem);
    }

    tree.addSelectionHandler(
        event -> {
          if (selectedElement != null) {
            selectedElement.getStyle().setProperty("background", "transparent");
          }

          selectedElement = event.getSelectedItem().getWidget().getElement();
          selectedElement.getStyle().setProperty("background", getEditorSelectionColor());
        });

    treePanel.add(tree);
  }

