    /**
     * Show Rename window with the special information.
     *
     * @param renameRefactoringSession
     *         data of current refactoring session
     */
    public void show(RenameRefactoringSession renameRefactoringSession) {
        this.renameRefactoringSession = renameRefactoringSession;
        prepareWizard();

        switch (renameRefactoringSession.getWizardType()) {
            case COMPILATION_UNIT:
                view.setTitle(locale.renameCompilationUnitTitle());
                view.setVisiblePatternsPanel(true);
                view.setVisibleFullQualifiedNamePanel(true);
                view.setVisibleSimilarlyVariablesPanel(true);
                break;
            case PACKAGE:
                view.setTitle(locale.renamePackageTitle());
                view.setVisiblePatternsPanel(true);
                view.setVisibleFullQualifiedNamePanel(true);
                view.setVisibleRenameSubpackagesPanel(true);
                break;
            case TYPE:
                view.setTitle(locale.renameTypeTitle());
                view.setVisiblePatternsPanel(true);
                view.setVisibleFullQualifiedNamePanel(true);
                view.setVisibleSimilarlyVariablesPanel(true);
                break;
            case FIELD:
                view.setTitle(locale.renameFieldTitle());
                view.setVisiblePatternsPanel(true);
                break;
            case ENUM_CONSTANT:
                view.setTitle(locale.renameEnumTitle());
                view.setVisiblePatternsPanel(true);
                break;
            case TYPE_PARAMETER:
                view.setTitle(locale.renameTypeVariableTitle());
                break;
            case METHOD:
                view.setTitle(locale.renameMethodTitle());
                view.setVisibleKeepOriginalPanel(true);
                break;
            case LOCAL_VARIABLE:
                view.setTitle(locale.renameLocalVariableTitle());
                break;
            default:
        }

        view.show();
    }

