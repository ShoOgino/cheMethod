  private void showProjectsAndPackages() {
    Promise<List<JavaProject>> projectsPromise = navigationService.getProjectsAndPackages(true);

    projectsPromise
        .then(
            new Operation<List<JavaProject>>() {
              @Override
              public void apply(List<JavaProject> projects) throws OperationException {
                List<JavaProject> currentProject = new ArrayList<>();
                for (JavaProject project : projects) {
                  currentProject.add(project);
                }
                view.setTreeOfDestinations(refactorInfo, currentProject);
                view.show(refactorInfo);
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError error) throws OperationException {
                notificationManager.notify(
                    locale.showPackagesError(), error.getMessage(), Status.FAIL, FLOAT_MODE);
              }
            });
  }

