    private void showProjectsAndPackages() {
        Promise<List<JavaProject>> projectsPromise = navigationService.getProjectsAndPackages(true);

        projectsPromise.then(new Operation<List<JavaProject>>() {
            @Override
            public void apply(List<JavaProject> projects) throws OperationException {
                for (JavaProject project : projects) {
                    if (project.getPath().equals(getPathToProject())) {
                        List<JavaProject> currentProject = new ArrayList<>();
                        currentProject.add(project);

                        view.setTreeOfDestinations(currentProject);
                        view.show(refactorInfo);

                        return;
                    }
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                notificationManager.notify(locale.showPackagesError(), error.getMessage(), Status.FAIL, true);
            }
        });
    }

