  /** Concatenates classpath entries and update classpath file. */
  public Promise<Void> updateClasspath() {

    final Resource resource = appContext.getResource();

    checkState(resource != null);

    Project optProject = resource.getProject();

    final List<ClasspathEntry> entries = new ArrayList<>();
    for (String path : libs) {
      entries.add(dtoFactory.createDto(ClasspathEntry.class).withPath(path).withEntryKind(LIBRARY));
    }

    entries.addAll(containers);

    for (String path : sources) {
      entries.add(dtoFactory.createDto(ClasspathEntry.class).withPath(path).withEntryKind(SOURCE));
    }
    for (String path : projects) {
      entries.add(dtoFactory.createDto(ClasspathEntry.class).withPath(path).withEntryKind(PROJECT));
    }

    Promise<Void> promise =
        classpathUpdater.setRawClasspath(optProject.getLocation().toString(), entries);

    promise
        .then(
            emptyResponse -> {
              optProject
                  .synchronize()
                  .then(
                      resources -> {
                        eventBus.fireEvent(
                            new ClasspathChangedEvent(
                                optProject.getLocation().toString(), entries));
                      });
            })
        .catchError(
            error -> {
              notificationManager.notify(
                  "Problems with updating classpath", error.getMessage(), FAIL, EMERGE_MODE);
            });

    return promise;
  }

