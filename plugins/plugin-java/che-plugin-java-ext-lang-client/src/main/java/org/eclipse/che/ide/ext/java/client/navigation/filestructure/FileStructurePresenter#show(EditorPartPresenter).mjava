  /**
   * Shows the structure of the opened class.
   *
   * @param editorPartPresenter the active editor
   */
  public void show(EditorPartPresenter editorPartPresenter) {
    if (!(editorPartPresenter instanceof TextEditor)) {
      Log.error(getClass(), "Open Declaration support only TextEditor as editor");
      return;
    }
    activeEditor = ((TextEditor) editorPartPresenter);
    cursorOffset = activeEditor.getCursorOffset();
    VirtualFile file = activeEditor.getEditorInput().getFile();

    if (file instanceof Resource) {
      final Optional<Project> project = ((Resource) file).getRelatedProject();

      final Optional<Resource> srcFolder =
          ((Resource) file).getParentWithMarker(SourceFolderMarker.ID);

      if (!srcFolder.isPresent()) {
        return;
      }

      final String fqn = JavaUtil.resolveFQN((Container) srcFolder.get(), (Resource) file);
      javaNavigationService
          .getCompilationUnit(project.get().getLocation(), fqn, showInheritedMembers)
          .then(
              unit -> {
                view.setTitle(editorPartPresenter.getEditorInput().getFile().getName());
                view.setStructure(unit, showInheritedMembers);
                view.show();
                showInheritedMembers = !showInheritedMembers;
              })
          .catchError(
              arg -> {
                Log.error(FileStructurePresenter.class, arg.getMessage());
              });
    }
  }

