    private CreateMoveRefactoring createMoveDto() {
        List<ElementToMove> elements = new ArrayList<>();

        for (Object node : refactorInfo.getSelectedItems()) {
            HasStorablePath storableNode = (HasStorablePath)node;

            ElementToMove element = dtoFactory.createDto(ElementToMove.class);

            if (storableNode instanceof PackageNode) {
                element.setPath(storableNode.getStorablePath());
                element.setPack(true);
            }

            if (storableNode instanceof JavaFileNode) {
                element.setPath(JavaSourceFolderUtil.getFQNForFile((VirtualFile)storableNode));
                element.setPack(false);
            }

            elements.add(element);
        }

        String pathToProject = getPathToProject();

        CreateMoveRefactoring moveRefactoring = dtoFactory.createDto(CreateMoveRefactoring.class);

        moveRefactoring.setElements(elements);
        moveRefactoring.setProjectPath(pathToProject);

        return moveRefactoring;
    }

