  private CreateMoveRefactoring createMoveDto() {
    List<ElementToMove> elements = new ArrayList<>();

    Project project = null;

    for (Resource resource : refactorInfo.getResources()) {
      ElementToMove element = dtoFactory.createDto(ElementToMove.class);

      if (resource instanceof Container) {
        element.setPath(resource.getLocation().toString());
        element.setPack(true);
      } else {
        element.setPath(JavaUtil.resolveFQN(resource));
        element.setPack(false);
      }

      elements.add(element);

      if (project == null) {
        project = resource.getRelatedProject().get();
      }
    }

    CreateMoveRefactoring moveRefactoring = dtoFactory.createDto(CreateMoveRefactoring.class);

    moveRefactoring.setElements(elements);

    if (project != null) {
      moveRefactoring.setProjectPath(project.getLocation().toString());
    }

    return moveRefactoring;
  }

