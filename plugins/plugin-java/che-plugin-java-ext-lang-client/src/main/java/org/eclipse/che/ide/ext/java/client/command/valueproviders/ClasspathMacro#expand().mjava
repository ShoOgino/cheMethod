  @Override
  public Promise<String> expand() {

    final Resource[] resources = appContext.getResources();

    if (resources == null || resources.length != 1) {
      return promises.resolve("");
    }

    final Resource resource = resources[0];
    final Project project = resource.getProject();

    if (!JavaUtil.isJavaProject(project)) {
      return promises.resolve("");
    }

    final String projectPath = project.getLocation().toString();

    return classpathContainer
        .getClasspathEntries(projectPath)
        .then(
            (Function<List<ClasspathEntry>, String>)
                arg -> {
                  classpathResolver.resolveClasspathEntries(arg);
                  Set<String> libs = classpathResolver.getLibs();
                  StringBuilder classpath = new StringBuilder();
                  for (String lib : libs) {
                    classpath.append(lib).append(':');
                  }

                  for (ClasspathEntry container : classpathResolver.getContainers()) {
                    if (!JRE_CONTAINER.equals(container.getPath())) {
                      addLibsFromContainer(container, classpath);
                    }
                  }

                  if (classpath.toString().isEmpty()) {
                    classpath
                        .append(appContext.getProjectsRoot().toString())
                        .append(projectPath)
                        .append(':');
                  }

                  return classpath.toString();
                });
  }

