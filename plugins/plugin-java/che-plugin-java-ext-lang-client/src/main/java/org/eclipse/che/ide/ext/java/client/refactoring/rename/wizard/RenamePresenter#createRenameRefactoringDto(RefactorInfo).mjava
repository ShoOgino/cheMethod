  private CreateRenameRefactoring createRenameRefactoringDto(RefactorInfo refactorInfo) {
    CreateRenameRefactoring dto = dtoFactory.createDto(CreateRenameRefactoring.class);

    dto.setRefactorLightweight(false);

    if (refactorInfo == null) {
      final VirtualFile file = editorAgent.getActiveEditor().getEditorInput().getFile();

      dto.setType(JAVA_ELEMENT);
      dto.setPath(JavaUtil.resolveFQN(file));
      dto.setOffset(((TextEditor) editorAgent.getActiveEditor()).getCursorOffset());

      if (file instanceof Resource) {
        final Project project = ((Resource) file).getRelatedProject().get();

        dto.setProjectPath(project.getLocation().toString());
      }
    } else {
      final Resource[] resources = refactorInfo.getResources();

      checkState(resources != null && resources.length == 1);

      final Resource resource = resources[0];

      if (resource.getResourceType() == FILE) {
        dto.setPath(JavaUtil.resolveFQN(resource));
        dto.setType(COMPILATION_UNIT);
      } else if (resource instanceof Container) {
        dto.setPath(resource.getLocation().toString());
        dto.setType(PACKAGE);
      }

      final Project project = resource.getRelatedProject().get();

      dto.setProjectPath(project.getLocation().toString());
    }

    return dto;
  }

