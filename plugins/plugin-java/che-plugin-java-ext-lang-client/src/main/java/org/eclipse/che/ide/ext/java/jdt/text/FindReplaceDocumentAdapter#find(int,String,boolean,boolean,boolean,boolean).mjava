  /**
   * Returns the location of a given string in this adapter's document based on a set of search
   * criteria.
   *
   * @param startOffset document offset at which search starts
   * @param findString the string to find
   * @param forwardSearch the search direction
   * @param caseSensitive indicates whether lower and upper case should be distinguished
   * @param wholeWord indicates whether the findString should be limited by white spaces as defined
   *     by Character.isWhiteSpace. Must not be used in combination with <code>regExSearch</code>.
   * @param regExSearch if <code>true</code> findString represents a regular expression Must not be
   *     used in combination with <code>wholeWord</code>.
   * @return the find or replace region or <code>null</code> if there was no match
   * @throws BadLocationException if startOffset is an invalid document offset
   * @throws PatternSyntaxException if a regular expression has invalid syntax
   */
  public Region find(
      int startOffset,
      String findString,
      boolean forwardSearch,
      boolean caseSensitive,
      boolean wholeWord,
      boolean regExSearch)
      throws BadLocationException {
    Assert.isTrue(!(regExSearch && wholeWord));

    // Adjust offset to special meaning of -1
    if (startOffset == -1 && forwardSearch) startOffset = 0;
    if (startOffset == -1 && !forwardSearch) startOffset = length() - 1;
    return findReplace(
        FIND_FIRST, startOffset, findString, null, forwardSearch, caseSensitive, wholeWord);
  }

