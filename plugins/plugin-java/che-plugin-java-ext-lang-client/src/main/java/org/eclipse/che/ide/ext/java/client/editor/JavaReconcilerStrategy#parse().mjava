    void parse() {
        if (getFile() instanceof Resource) {
            final Optional<Project> project = ((Resource)getFile()).getRelatedProject();

            if (!project.isPresent()) {
                return;
            }

            String fqn = JavaUtil.resolveFQN(getFile());
            String projectPath = project.get().getLocation().toString();

            client.reconcile(fqn, projectPath).onSuccess(reconcileResult -> {
                if (isProjectResolving()) {
                    disableReconciler(localizationConstant.codeAssistErrorMessageResolvingProject());
                    return;
                } else {
                    codeAssistProcessor.enableCodeAssistant();
                }

                if (reconcileResult == null) {
                    return;
                }

                doReconcile(reconcileResult.getProblems());
                highlighter.reconcile(reconcileResult.getHighlightedPositions());
            }).onFailure(jsonRpcError -> {
                Log.info(getClass(), jsonRpcError.getMessage());
            });
        }
    }

