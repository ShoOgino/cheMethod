    void parse() {
        if (first) {
            codeAssistProcessor.disableCodeAssistant();
            first = false;
        }

        if (getFile() instanceof Resource) {
            final Optional<Project> project = ((Resource)getFile()).getRelatedProject();

            if (!project.isPresent()) {
                return;
            }

            try {
                client.reconcile(project.get().getLocation().toString(), JavaUtil.resolveFQN(getFile()),
                                 new JavaReconcileClient.ReconcileCallback() {
                                     @Override
                                     public void onReconcile(ReconcileResult result) {
                                         if (result == null) {
                                             return;
                                         }
                                         doReconcile(result.getProblems());
                                         highlighter.reconcile(result.getHighlightedPositions());
                                     }
                                 });
            } catch (RuntimeException e) {
                Log.info(getClass(), e.getMessage());
            }
        }


    }

