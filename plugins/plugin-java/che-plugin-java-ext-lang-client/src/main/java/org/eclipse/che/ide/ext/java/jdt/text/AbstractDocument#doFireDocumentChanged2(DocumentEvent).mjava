    /**
     * Notifies all listeners about the given document change. Uses a robust iterator.
     * <p/>
     * Executes all registered post notification replace operation.
     * <p/>
     * This method will be renamed to <code>doFireDocumentChanged</code>.
     *
     * @param event
     *         the event to be sent out
     * @since 3.0
     */
    protected void doFireDocumentChanged2(DocumentEvent event) {

        DocumentPartitioningChangedEvent p = fDocumentPartitioningChangedEvent;
        fDocumentPartitioningChangedEvent = null;
        if (p != null && !p.isEmpty())
            fireDocumentPartitioningChanged(p);

        Object[] listeners = fPrenotifiedDocumentListeners.getListeners();
        for (int i = 0; i < listeners.length; i++) {
            try {
                ((DocumentListener)listeners[i]).documentChanged(event);
            } catch (Exception ex) {
                fail(ex);
            }
        }

        listeners = fDocumentListeners.getListeners();
        for (int i = 0; i < listeners.length; i++) {
            try {
                ((DocumentListener)listeners[i]).documentChanged(event);
            } catch (Exception ex) {
                fail(ex);
            }
        }
    }

