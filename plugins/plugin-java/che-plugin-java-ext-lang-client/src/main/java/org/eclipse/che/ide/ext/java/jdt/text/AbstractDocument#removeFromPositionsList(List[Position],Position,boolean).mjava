  /**
   * Remove the given position form the given list of positions based on identity not equality.
   *
   * @param positions a list of positions
   * @param position the position to remove
   * @param orderedByOffset true if <code>positions</code> is ordered by offset, false if ordered by
   *     end position
   * @since 3.4
   */
  private void removeFromPositionsList(
      List<Position> positions, Position position, boolean orderedByOffset) {
    int size = positions.size();

    // Assume position is somewhere near it was before
    int index =
        computeIndexInPositionList(
            positions,
            orderedByOffset ? position.offset : position.offset + position.length - 1,
            orderedByOffset);
    if (index < size && positions.get(index) == position) {
      positions.remove(index);
      return;
    }

    int back = index - 1;
    int forth = index + 1;
    while (back >= 0 || forth < size) {
      if (back >= 0) {
        if (position == positions.get(back)) {
          positions.remove(back);
          return;
        }
        back--;
      }

      if (forth < size) {
        if (position == positions.get(forth)) {
          positions.remove(forth);
          return;
        }
        forth++;
      }
    }
  }

