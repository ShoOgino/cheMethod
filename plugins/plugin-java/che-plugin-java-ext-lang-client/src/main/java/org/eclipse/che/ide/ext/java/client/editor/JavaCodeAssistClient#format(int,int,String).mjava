    /**
     * Creates edits that describe how to format the given string.
     * Returns the changes required to format source.
     * Note: Java code formatting is supported only.
     *
     * @param offset
     *         The given offset to start recording the edits (inclusive).
     * @param length
     *         the given length to stop recording the edits (exclusive).
     * @param content
     *         the content to format
     */
    public Promise<List<Change>> format(final int offset, final int length, final String content) {

        return newPromise(new AsyncPromiseHelper.RequestCall<List<Change>>() {
            @Override
            public void makeCall(AsyncCallback<List<Change>> callback) {
                String url =
                        appContext.getDevMachine().getWsAgentBaseUrl() + CODE_ASSIST_URL_PREFIX + "/format?offset=" + offset + "&length=" +
                        length;
                asyncRequestFactory.createPostRequest(url, null)
                                   .header(CONTENT_TYPE, MimeType.TEXT_PLAIN)
                                   .data(content)
                                   .send(newCallback(callback, unmarshallerFactory.newListUnmarshaller(Change.class)));
            }
        }).then(new Function<List<Change>, List<Change>>() {
            @Override
            public List<Change> apply(List<Change> arg) throws FunctionException {
                final List<Change> changes = new ArrayList<>();
                for (Change change : arg) {
                    changes.add(change);
                }
                return changes;
            }
        });
    }

