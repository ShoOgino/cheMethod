    /**
     * Updates the balance information in the parent chain of node.
     *
     * @param node
     *         the first node that needs balance updating
     * @param wasLeftChild
     *         <code>true</code> if the deletion happened on <code>node</code>'s left subtree, <code>false</code> if it
     *         occurred on <code>node</code>'s right subtree
     */
    private void updateParentBalanceAfterDeletion(Node node, boolean wasLeftChild) {
        while (node != null) {
            if (wasLeftChild)
                node.balance++;
            else
                node.balance--;

            Node parent = node.parent;
            if (parent != null)
                wasLeftChild = node == parent.left;

            switch (node.balance) {
                case 1:
                case -1:
                    return; // done, no tree change
                case -2:
                    if (rebalanceAfterDeletionRight(node.left))
                        return;
                    break; // propagate up
                case 2:
                    if (rebalanceAfterDeletionLeft(node.right))
                        return;
                    break; // propagate up
                case 0:
                    break; // propagate up
                default:
                    if (ASSERT)
                        Assert.isTrue(false);
            }

            node = parent;
        }
    }

