  /**
   * Right rotation - the given node is rotated down, its left child is rotated up, taking the
   * previous structural position of <code>node</code>.
   *
   * @param node the node to rotate around
   */
  private void rotateRight(Node node) {
    if (ASSERT) Assert.isNotNull(node);
    Node child = node.left;
    if (ASSERT) Assert.isNotNull(child);
    boolean leftChild = node.parent == null || node == node.parent.left;

    setChild(node.parent, child, leftChild);

    setChild(node, child.right, true);
    setChild(child, node, false);

    // update relative info
    // node loses its left subtree, except for what it keeps in its new subtree
    // this is exactly the amount in child
    node.line -= child.line + 1;
    node.offset -= child.offset + child.length;
  }

