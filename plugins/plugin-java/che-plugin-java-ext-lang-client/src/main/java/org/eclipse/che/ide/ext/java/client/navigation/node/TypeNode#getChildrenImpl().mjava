    /** {@inheritDoc} */
    @Override
    public Promise<List<Node>> getChildrenImpl() {
        return PromiseHelper.newPromise(new AsyncPromiseHelper.RequestCall<List<Node>>() {
            @Override
            public void makeCall(AsyncCallback<List<Node>> callback) {
                List<Node> child = new ArrayList<>();

                createTypeChildren(child, type, isFromSuper);

                if (type.isPrimary()) {
                    for (Type type : compilationUnit.getSuperTypes()) {
                        createTypeChildren(child, type, true);
                    }
                }

                Collections.sort(child, new NodeComparator());
                callback.onSuccess(child);
            }
        });
    }

