    /**
     * Fires the given document event to all registers document listeners informing them about the forthcoming document
     * manipulation. Uses a robust iterator.
     *
     * @param event
     *         the event to be sent out
     */
    protected void fireDocumentAboutToBeChanged(DocumentEvent event) {
        if (fDocumentPartitioners != null) {
            Iterator<DocumentPartitioner> e = fDocumentPartitioners.values().iterator();
            while (e.hasNext()) {
                DocumentPartitioner p = e.next();
                try {
                    p.documentAboutToBeChanged(event);
                } catch (Exception ex) {
                    fail(ex);
                }
            }
        }

        Object[] listeners = fPrenotifiedDocumentListeners.getListeners();
        for (int i = 0; i < listeners.length; i++) {
            try {
                ((DocumentListener)listeners[i]).documentAboutToBeChanged(event);
            } catch (Exception ex) {
                fail(ex);
            }
        }

        listeners = fDocumentListeners.getListeners();
        for (int i = 0; i < listeners.length; i++) {
            try {
                ((DocumentListener)listeners[i]).documentAboutToBeChanged(event);
            } catch (Exception ex) {
                fail(ex);
            }
        }

    }

