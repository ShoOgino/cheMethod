    @Override
    protected Promise<List<Node>> getChildrenImpl() {
        return PromiseHelper.newPromise(new AsyncPromiseHelper.RequestCall<List<Node>>() {
            @Override
            public void makeCall(AsyncCallback<List<Node>> callback) {
                List<Node> child = new ArrayList<Node>();
                if (packageFragment.getKind() == PackageFragmentRoot.K_SOURCE) {
                    for (CompilationUnit compilationUnit : packageFragment.getCompilationUnits()) {
                        for (Type type : compilationUnit.getTypes()) {
                            if (type.isPrimary()) {
                                child.add(nodeFactory.create(type, compilationUnit, null, matches));
                            }
                        }
                    }
                } else {
                    for (ClassFile classFile : packageFragment.getClassFiles()) {
                        child.add(nodeFactory.create(classFile.getType(), null, classFile, matches));
                    }
                }

                callback.onSuccess(child);
            }
        });
    }

