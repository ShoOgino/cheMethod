    @Override
    protected Promise<List<Node>> getChildrenImpl() {
        return createFromAsyncRequest(callback -> {
            final List<Node> children = new ArrayList<>();
            if (packageFragment.getKind() == PackageFragmentRoot.K_SOURCE) {
                for (CompilationUnit compilationUnit : packageFragment.getCompilationUnits()) {
                    final List<Type> types = compilationUnit.getTypes();
                    final List<Node> nodes = types.stream()
                                                  .filter(Type::isPrimary)
                                                  .map(type -> nodeFactory.create(type, compilationUnit, null, matches))
                                                  .collect(Collectors.toList());
                    children.addAll(nodes);
                }
            } else {
                children.addAll(packageFragment.getClassFiles().stream()
                                               .map(classFile -> nodeFactory.create(classFile.getType(), null, classFile, matches))
                                               .collect(Collectors.toList()));
            }

            callback.onSuccess(children);
        });
    }

