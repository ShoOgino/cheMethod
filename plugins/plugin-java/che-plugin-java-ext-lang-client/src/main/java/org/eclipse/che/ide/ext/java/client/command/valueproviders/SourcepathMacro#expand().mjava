  @Override
  public Promise<String> expand() {
    final Resource[] resources = appContext.getResources();

    if (resources == null || resources.length != 1) {
      return promises.resolve("");
    }

    final Resource resource = resources[0];
    final Project project = resource.getProject();

    if (!JavaUtil.isJavaProject(project)) {
      return promises.resolve("");
    }

    final String projectPath = project.getLocation().toString();

    return classpathContainer
        .getClasspathEntries(projectPath)
        .then(
            (Function<List<ClasspathEntry>, String>)
                arg -> {
                  classpathResolver.resolveClasspathEntries(arg);
                  Set<String> sources = classpathResolver.getSources();
                  StringBuilder classpath = new StringBuilder();
                  for (String source : sources) {
                    classpath.append(source.substring(projectPath.length() + 1)).append(':');
                  }

                  if (classpath.toString().isEmpty()) {
                    classpath.append(appContext.getProjectsRoot().toString()).append(projectPath);
                  }

                  return classpath.toString();
                })
        .catchError(PromiseError::getMessage);
  }

