    /** Find new package node and restore expansion if need. */
    private Function<Void, Promise<Void>> proceedRefactoringRenamePackage(final ChangeInfo changeInfo, final RefactorInfo refactorInfo) {
        return new Function<Void, Promise<Void>>() {
            @Override
            public Promise<Void> apply(Void arg) throws FunctionException {
                //according to Rename package action it can be enabled if we have only one selected Package in selection agent
                Object refItem = refactorInfo.getSelectedItems().get(0);
                final boolean wasPackageExpanded = refItem instanceof PackageNode && projectExplorer.isExpanded((Node)refItem);

                return projectExplorer.getNodeByPath(new StorablePath(changeInfo.getPath()), true, false)
                                      .thenPromise(new Function<Node, Promise<Void>>() {
                                          @Override
                                          public Promise<Void> apply(Node node) throws FunctionException {
                                              //restore expand state
                                              if (wasPackageExpanded) {
                                                  projectExplorer.setExpanded(node, true);
                                              }

                                              return resolve(null);
                                          }
                                      })
                                      .catchError(onNodeNotFound());

            }
        };
    }

