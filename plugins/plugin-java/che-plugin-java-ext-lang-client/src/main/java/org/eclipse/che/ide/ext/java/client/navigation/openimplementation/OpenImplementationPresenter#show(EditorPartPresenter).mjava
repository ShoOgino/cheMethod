  /**
   * Shows the implementations of the selected element.
   *
   * @param editorPartPresenter the active editor
   */
  public void show(final EditorPartPresenter editorPartPresenter) {
    if (!(editorPartPresenter instanceof TextEditor)) {
      Log.error(getClass(), "Open Declaration support only TextEditor as editor");
      return;
    }
    activeEditor = ((TextEditor) editorPartPresenter);
    final VirtualFile file = activeEditor.getEditorInput().getFile();

    javaLanguageExtensionServiceClient
        .findImplementations(
            new TextDocumentPositionParamsDto(
                new TextDocumentPositionParams(
                    new TextDocumentIdentifier(file.getLocation().toString()),
                    new Position(
                        activeEditor.getCursorPosition().getLine(),
                        activeEditor.getCursorPosition().getCharacter()))))
        .then(
            impls -> {
              int overridingSize = impls.getImplementers().size();

              String title =
                  locale.openImplementationWindowTitle(impls.getSearchedElement(), overridingSize);
              PositionConverter.PixelCoordinates coordinates =
                  activeEditor.getPositionConverter().offsetToPixel(activeEditor.getCursorOffset());
              if (overridingSize == 1) {
                openOneImplementation(impls.getImplementers().get(0));
              } else if (!isNullOrEmpty(impls.getSearchedElement())) {
                openImplementations(impls, title, coordinates);
              }
            });
  }

