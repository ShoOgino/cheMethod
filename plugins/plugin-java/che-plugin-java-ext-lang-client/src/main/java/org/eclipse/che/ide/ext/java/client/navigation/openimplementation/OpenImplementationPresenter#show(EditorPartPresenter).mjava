    /**
     * Shows the implementations of the selected element.
     *
     * @param editorPartPresenter
     *         the active editor
     */
    public void show(final EditorPartPresenter editorPartPresenter) {
        if (!(editorPartPresenter instanceof EmbeddedTextEditorPresenter)) {
            Log.error(getClass(), "Open Declaration support only EmbeddedTextEditorPresenter as editor");
            return;
        }
        activeEditor = ((EmbeddedTextEditorPresenter)editorPartPresenter);
        final VirtualFile file = activeEditor.getEditorInput().getFile();

        String projectPath = file.getProject().getProjectConfig().getPath();
        String fqn = JavaSourceFolderUtil.getFQNForFile(file);

        Promise<ImplementationsDescriptorDTO> promise = service.getImplementations(projectPath, fqn, activeEditor.getCursorOffset());
        promise.then(new Operation<ImplementationsDescriptorDTO>() {
            @Override
            public void apply(ImplementationsDescriptorDTO implementationsDescriptor) throws OperationException {
                int overridingSize = implementationsDescriptor.getImplementations().size();

                String title = locale.openImplementationWindowTitle(implementationsDescriptor.getMemberName(), overridingSize);
                NoImplementationWidget noImplementationWidget = new NoImplementationWidget(popupResources,
                                                                                           javaResources,
                                                                                           locale,
                                                                                           OpenImplementationPresenter.this,
                                                                                           title);
                if (overridingSize == 1) {
                    actionPerformed(implementationsDescriptor.getImplementations().get(0));
                } else if (overridingSize > 1) {
                    openOneImplementation(implementationsDescriptor,
                                          noImplementationWidget,
                                          (EmbeddedTextEditorPresenter)editorPartPresenter);
                } else if (!isNullOrEmpty(implementationsDescriptor.getMemberName()) && overridingSize == 0) {
                    showNoImplementations(noImplementationWidget, (EmbeddedTextEditorPresenter)editorPartPresenter);
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                Log.error(OpenImplementationPresenter.class, arg.getMessage());
            }
        });
    }

