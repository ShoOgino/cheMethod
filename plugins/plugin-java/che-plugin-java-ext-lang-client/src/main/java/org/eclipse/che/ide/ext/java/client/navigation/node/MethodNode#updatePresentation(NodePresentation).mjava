    /** {@inheritDoc} */
    @Override
    public void updatePresentation(@NotNull NodePresentation presentation) {
        StringBuilder presentableName = new StringBuilder(method.getLabel() + " : " + method.getReturnType());
        if (showingInheritedMembers) {
            String path = method.getRootPath();
            String className = method.isBinary() ? path.substring(path.lastIndexOf('.') + 1)
                                                 : path.substring(path.lastIndexOf('/') + 1, path.indexOf('.'));

            presentableName.append(" -> ").append(className);
        }

        updatePresentationField(isFromSuper, presentation, presentableName.toString(), resources);

        SVGResource icon;
        int flag = method.getFlags();
        if (Flags.isPublic(flag)) {
            icon = resources.publicMethod();
        } else if (Flags.isPrivate(flag)) {
            icon = resources.privateMethod();
        } else if (Flags.isProtected(flag)) {
            icon = resources.protectedMethod();
        } else {
            icon = resources.publicMethod();
        }
        presentation.setPresentableIcon(icon);
    }

