    /** Stops generator and releases any associated resources. */
    @PreDestroy
    void stop() {
        boolean interrupted = false;
        scheduler.shutdownNow();
        try {
            if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                LOG.warn("Unable to terminate scheduler");
            }
        } catch (InterruptedException e) {
            interrupted = true;
        }
        executor.shutdown();
        try {
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                executor.shutdownNow();
                if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                    LOG.warn("Unable to terminate main pool");
                }
            }
        } catch (InterruptedException e) {
            interrupted |= true;
            executor.shutdownNow();
        }
        if (IoUtil.deleteRecursive(archetypeGeneratorTempFolder.toFile())) {
            LOG.warn("Error occurs on removing " + archetypeGeneratorTempFolder.toString());
        }

        tasks.clear();
        if (interrupted) {
            Thread.currentThread().interrupt();
        }
    }

