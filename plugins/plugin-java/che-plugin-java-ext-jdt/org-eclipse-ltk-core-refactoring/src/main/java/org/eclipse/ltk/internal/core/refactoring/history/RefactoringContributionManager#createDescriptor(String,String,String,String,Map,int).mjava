  /**
   * Creates a new refactoring descriptor for the specified input data.
   *
   * @param id the unique id of the refactoring
   * @param project the project name, or <code>null</code>
   * @param description a description
   * @param comment the comment, or <code>null</code>
   * @param arguments the argument map
   * @param flags the flags
   * @return the refactoring descriptor
   * @throws IllegalArgumentException if the argument map contains invalid keys/values
   */
  public RefactoringDescriptor createDescriptor(
      final String id,
      final String project,
      final String description,
      final String comment,
      final Map arguments,
      final int flags)
      throws IllegalArgumentException {
    Assert.isNotNull(id);
    Assert.isNotNull(description);
    Assert.isNotNull(arguments);
    Assert.isLegal(flags >= RefactoringDescriptor.NONE);
    final RefactoringContribution contribution = getRefactoringContribution(id);
    if (contribution != null)
      return contribution.createDescriptor(id, project, description, comment, arguments, flags);
    return new DefaultRefactoringDescriptor(id, project, description, comment, arguments, flags);
  }

