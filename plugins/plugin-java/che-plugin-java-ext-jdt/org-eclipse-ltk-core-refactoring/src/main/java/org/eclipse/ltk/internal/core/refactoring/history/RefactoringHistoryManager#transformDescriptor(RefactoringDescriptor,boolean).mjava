  /**
   * Transforms the specified refactoring descriptor into a DOM node.
   *
   * @param descriptor the descriptor to transform
   * @param projects <code>true</code> to include project information, <code>false</code> otherwise
   * @return the DOM node representing the refactoring descriptor
   * @throws CoreException if an error occurs while transforming the descriptor
   */
  private static Document transformDescriptor(
      final RefactoringDescriptor descriptor, final boolean projects) throws CoreException {
    final RefactoringSessionTransformer transformer = new RefactoringSessionTransformer(projects);
    try {
      transformer.beginSession(null, IRefactoringSerializationConstants.CURRENT_VERSION);
      try {
        final String id = descriptor.getID();
        transformer.beginRefactoring(
            id,
            descriptor.getTimeStamp(),
            descriptor.getProject(),
            descriptor.getDescription(),
            descriptor.getComment(),
            descriptor.getFlags());
        final Map arguments = getArgumentMap(descriptor);
        if (arguments != null) {
          checkArgumentMap(arguments);
          for (final Iterator iterator = arguments.entrySet().iterator(); iterator.hasNext(); ) {
            final Map.Entry entry = (Entry) iterator.next();
            transformer.createArgument((String) entry.getKey(), (String) entry.getValue());
          }
        }
      } finally {
        transformer.endRefactoring();
      }
    } finally {
      transformer.endSession();
    }
    return transformer.getResult();
  }

