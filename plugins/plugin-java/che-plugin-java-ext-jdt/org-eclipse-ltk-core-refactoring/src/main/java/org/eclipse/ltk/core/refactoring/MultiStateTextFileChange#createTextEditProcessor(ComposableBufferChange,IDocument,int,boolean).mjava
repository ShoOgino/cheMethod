  // Copied from TextChange
  private TextEditProcessor createTextEditProcessor(
      ComposableBufferChange change, IDocument document, int flags, boolean preview) {
    List excludes = new ArrayList(0);
    for (final Iterator iterator = change.getGroups().iterator(); iterator.hasNext(); ) {
      TextEditBasedChangeGroup group = (TextEditBasedChangeGroup) iterator.next();
      if (!group.isEnabled()) excludes.addAll(Arrays.asList(group.getTextEdits()));
    }

    if (preview) {
      fCopier = new TextEditCopier(change.getEdit());
      TextEdit copiedEdit = fCopier.perform();
      boolean keep = getKeepPreviewEdits();
      if (keep) flags = flags | TextEdit.UPDATE_REGIONS;
      LocalTextEditProcessor result = new LocalTextEditProcessor(document, copiedEdit, flags);
      result.setExcludes(
          mapEdits((TextEdit[]) excludes.toArray(new TextEdit[excludes.size()]), fCopier));
      if (!keep) fCopier = null;
      return result;
    } else {
      LocalTextEditProcessor result =
          new LocalTextEditProcessor(document, change.getEdit(), flags | TextEdit.UPDATE_REGIONS);
      result.setExcludes((TextEdit[]) excludes.toArray(new TextEdit[excludes.size()]));
      return result;
    }
  }

