  /**
   * Validates if the a name is valid. This method does not change the name settings on the
   * refactoring. It is intended to be used in a wizard to validate user input.
   *
   * @param newName the name to validate
   * @return returns the resulting status of the validation
   */
  public RefactoringStatus validateNewElementName(String newName) {
    Assert.isNotNull(newName, "new name"); //$NON-NLS-1$
    IContainer c = fResource.getParent();
    if (c == null)
      return RefactoringStatus.createFatalErrorStatus(
          RefactoringCoreMessages.RenameResourceProcessor_error_no_parent);

    if (!c.getFullPath().isValidSegment(newName))
      return RefactoringStatus.createFatalErrorStatus(
          RefactoringCoreMessages.RenameResourceProcessor_error_invalid_name);

    if (c.findMember(newName) != null)
      return RefactoringStatus.createFatalErrorStatus(
          RefactoringCoreMessages.RenameResourceProcessor_error_resource_already_exists);

    RefactoringStatus result =
        RefactoringStatus.create(c.getWorkspace().validateName(newName, fResource.getType()));
    if (!result.hasFatalError())
      result.merge(
          RefactoringStatus.create(
              c.getWorkspace().validatePath(createNewPath(newName), fResource.getType())));
    return result;
  }

