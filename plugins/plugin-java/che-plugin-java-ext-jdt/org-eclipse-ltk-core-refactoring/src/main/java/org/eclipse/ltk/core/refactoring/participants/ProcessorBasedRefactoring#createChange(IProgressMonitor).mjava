  /** {@inheritDoc} */
  public Change createChange(IProgressMonitor pm) throws CoreException {
    if (pm == null) pm = new NullProgressMonitor();
    pm.beginTask("", fParticipants.size() + 3); //$NON-NLS-1$
    pm.setTaskName(RefactoringCoreMessages.ProcessorBasedRefactoring_create_change);
    Change processorChange = getProcessor().createChange(new SubProgressMonitor(pm, 1));
    if (pm.isCanceled()) throw new OperationCanceledException();

    fTextChangeMap = new HashMap();
    addToTextChangeMap(processorChange);

    List /*<Change>*/ changes = new ArrayList();
    List /*<Change>*/ preChanges = new ArrayList();
    Map /*<Change, RefactoringParticipant>*/ participantMap = new HashMap();
    for (Iterator iter = fParticipants.iterator(); iter.hasNext(); ) {
      final RefactoringParticipant participant = (RefactoringParticipant) iter.next();

      try {
        final PerformanceStats stats =
            PerformanceStats.getStats(
                PERF_CREATE_CHANGES, getName() + ", " + participant.getName()); //$NON-NLS-1$
        stats.startRun();

        Change preChange = participant.createPreChange(new SubProgressMonitor(pm, 1));
        Change change = participant.createChange(new SubProgressMonitor(pm, 1));

        stats.endRun();

        if (preChange != null) {
          if (fPreChangeParticipants == null) fPreChangeParticipants = new ArrayList();
          fPreChangeParticipants.add(participant);
          preChanges.add(preChange);
          participantMap.put(preChange, participant);
          addToTextChangeMap(preChange);
        }

        if (change != null) {
          changes.add(change);
          participantMap.put(change, participant);
          addToTextChangeMap(change);
        }

      } catch (CoreException e) {
        disableParticipant(participant, e);
        throw e;
      } catch (OperationCanceledException e) {
        throw e;
      } catch (RuntimeException e) {
        disableParticipant(participant, e);
        throw e;
      }
      if (pm.isCanceled()) throw new OperationCanceledException();
    }

    fTextChangeMap = null;

    Change postChange =
        getProcessor()
            .postCreateChange(
                (Change[]) changes.toArray(new Change[changes.size()]),
                new SubProgressMonitor(pm, 1));

    ProcessorChange result = new ProcessorChange(getName());
    result.addAll((Change[]) preChanges.toArray(new Change[preChanges.size()]));
    result.add(processorChange);
    result.addAll((Change[]) changes.toArray(new Change[changes.size()]));
    result.setParticipantMap(participantMap);
    result.setPreChangeParticipants(fPreChangeParticipants);
    if (postChange != null) result.add(postChange);
    return result;
  }

