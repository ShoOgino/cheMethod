  /**
   * Creates a refactoring argument with the specified name and value.
   *
   * <p>If no refactoring is currently processed, this call has no effect.
   *
   * @param name the non-empty name of the argument
   * @param value the value of the argument
   * @throws CoreException if an error occurs while creating a new argument
   */
  public void createArgument(final String name, final String value) throws CoreException {
    Assert.isNotNull(name);
    Assert.isTrue(!"".equals(name)); //$NON-NLS-1$
    Assert.isNotNull(value);
    if (fDocument != null && fRefactoringArguments != null && value != null) {
      try {
        final Attr attribute = fDocument.createAttribute(name);
        attribute.setValue(value);
        fRefactoringArguments.add(attribute);
      } catch (DOMException exception) {
        throw new CoreException(
            new Status(
                IStatus.ERROR,
                RefactoringCorePlugin.getPluginId(),
                IRefactoringCoreStatusCodes.REFACTORING_HISTORY_FORMAT_ERROR,
                exception.getLocalizedMessage(),
                null));
      }
    }
  }

