  /**
   * Validates if the a destination is valid. This method does not change the destination settings
   * on the refactoring. It is intended to be used in a wizard to validate user input.
   *
   * @param destination the destination to validate
   * @return returns the resulting status of the validation
   */
  public RefactoringStatus validateDestination(IContainer destination) {
    Assert.isNotNull(destination, "container is null"); //$NON-NLS-1$
    if (destination instanceof IWorkspaceRoot)
      return RefactoringStatus.createFatalErrorStatus(
          RefactoringCoreMessages.MoveResourceProcessor_error_invalid_destination);

    if (!destination.exists()) {
      return RefactoringStatus.createFatalErrorStatus(
          RefactoringCoreMessages.MoveResourceProcessor_error_destination_not_exists);
    }

    IPath destinationPath = destination.getFullPath();
    for (int i = 0; i < fResourcesToMove.length; i++) {
      IPath path = fResourcesToMove[i].getFullPath();
      if (path.isPrefixOf(destinationPath) || path.equals(destinationPath)) {
        return RefactoringStatus.createFatalErrorStatus(
            Messages.format(
                RefactoringCoreMessages.MoveResourceProcessor_destination_inside_moved,
                BasicElementLabels.getPathLabel(path, false)));
      }
      if (path.removeLastSegments(1).equals(destinationPath)) {
        return RefactoringStatus.createFatalErrorStatus(
            Messages.format(
                RefactoringCoreMessages.MoveResourceProcessor_destination_same_as_moved,
                BasicElementLabels.getPathLabel(path, false)));
      }
    }
    return new RefactoringStatus();
  }

