  /**
   * Creates a new <code>RefactoringStatus</code> from the given <code>IStatus</code>. An OK status
   * is mapped to an OK refactoring status, an information status is mapped to a warning refactoring
   * status, a warning status is mapped to an error refactoring status and an error or cancel status
   * is mapped to a fatal refactoring status. An unknown status is converted into a fatal error
   * status as well. If the status is a <code>MultiStatus
   * </code> then the first level of children of the status will be added as refactoring status
   * entries to the created refactoring status.
   *
   * @param status the status to create a refactoring status from
   * @return the refactoring status
   * @see IStatus
   * @since 3.2
   */
  public static RefactoringStatus create(IStatus status) {
    if (status.isOK()) return new RefactoringStatus();

    if (!status.isMultiStatus()) {
      switch (status.getSeverity()) {
        case IStatus.OK:
          return new RefactoringStatus();
        case IStatus.INFO:
          return RefactoringStatus.createWarningStatus(status.getMessage());
        case IStatus.WARNING:
          return RefactoringStatus.createErrorStatus(status.getMessage());
        case IStatus.ERROR:
          return RefactoringStatus.createFatalErrorStatus(status.getMessage());
        case IStatus.CANCEL:
          return RefactoringStatus.createFatalErrorStatus(status.getMessage());
        default:
          return RefactoringStatus.createFatalErrorStatus(status.getMessage());
      }
    } else {
      IStatus[] children = status.getChildren();
      RefactoringStatus result = new RefactoringStatus();
      for (int i = 0; i < children.length; i++) {
        result.merge(RefactoringStatus.create(children[i]));
      }
      return result;
    }
  }

