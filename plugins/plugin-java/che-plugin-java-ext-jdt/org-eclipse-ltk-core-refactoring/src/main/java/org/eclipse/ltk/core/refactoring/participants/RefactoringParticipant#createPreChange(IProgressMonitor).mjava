  /**
   * Creates a {@link Change} object that contains the workspace modifications of this participant
   * to be executed <em>before</em> the changes from the refactoring are executed. Note that this
   * implies that the undo change of the returned Change object will be executed <em>after</em> the
   * undo changes from the refactoring have been executed.
   *
   * <p>The changes provided by a participant <em>must</em> not conflict with any change provided by
   * other participants or by the refactoring itself.
   *
   * <p>If the change conflicts with any change provided by other participants or by the refactoring
   * itself, then change execution will fail and the participant will be disabled for the rest of
   * the eclipse session.
   *
   * <p>If an exception occurs while creating the change, the refactoring can not be carried out,
   * and the participant will be disabled for the rest of the eclipse session.
   *
   * <p>A participant can manipulate text resource already manipulated by the processor as long as
   * the textual manipulations don't conflict (e.g. the participant manipulates a different region
   * of the text resource). The method must not return those changes in its change tree since the
   * change is already part of another change tree. If the participant only manipulates shared
   * changes then it can return <code>null</code> to indicate that it didn't create own changes. A
   * shared text change can be accessed via the method {@link #getTextChange(Object)}.
   *
   * <p>The default implementation returns <code>null</code>. Subclasses can extend or override.
   *
   * <p>Note that most refactorings will implement {@link #createChange(IProgressMonitor)} rather
   * than this method.
   *
   * @param pm a progress monitor to report progress
   * @return the change representing the workspace modifications to be executed before the
   *     refactoring change or <code>null</code> if no changes are made
   * @throws CoreException if an error occurred while creating the change
   * @throws OperationCanceledException if the change creation got canceled
   * @see #createChange(IProgressMonitor)
   * @since 3.4
   */
  public Change createPreChange(IProgressMonitor pm)
      throws CoreException, OperationCanceledException {
    return null;
  }

