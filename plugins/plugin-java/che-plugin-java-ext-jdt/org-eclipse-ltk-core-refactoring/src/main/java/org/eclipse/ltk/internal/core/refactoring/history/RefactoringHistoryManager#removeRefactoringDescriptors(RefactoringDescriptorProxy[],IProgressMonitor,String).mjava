	/**
	 * Removes refactoring descriptors from the managed history.
	 *
	 * @param proxies
	 *            the refactoring descriptors
	 * @param monitor
	 *            the progress monitor to use
	 * @param task
	 *            the task label to use
	 * @throws CoreException
	 *             if an error occurs
	 */
	void removeRefactoringDescriptors(final RefactoringDescriptorProxy[] proxies, final IProgressMonitor monitor, final String task) throws CoreException {
		try {
			final Map paths= new HashMap();
			monitor.beginTask(task, proxies.length + 300);
			for (int index= 0; index < proxies.length; index++) {
				final IPath path= stampToPath(proxies[index].getTimeStamp());
				Collection collection= (Collection) paths.get(path);
				if (collection == null) {
					collection= new ArrayList(64);
					paths.put(path, collection);
				}
				collection.add(proxies[index]);
			}
			final IProgressMonitor subMonitor= new SubProgressMonitor(monitor, 300);
			try {
				final Set entries= paths.entrySet();
				subMonitor.beginTask(task, entries.size());
				for (final Iterator iterator= entries.iterator(); iterator.hasNext();) {
					final Map.Entry entry= (Map.Entry) iterator.next();
					final Collection collection= (Collection) entry.getValue();
					removeRefactoringDescriptors((RefactoringDescriptorProxy[]) collection.toArray(new RefactoringDescriptorProxy[collection.size()]), (IPath) entry.getKey(), new SubProgressMonitor(subMonitor, 1), task);
				}
			} finally {
				subMonitor.done();
			}
		} finally {
			monitor.done();
		}
	}

