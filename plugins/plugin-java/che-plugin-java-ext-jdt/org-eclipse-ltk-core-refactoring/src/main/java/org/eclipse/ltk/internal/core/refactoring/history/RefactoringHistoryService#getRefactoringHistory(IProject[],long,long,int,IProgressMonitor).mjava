  /** {@inheritDoc} */
  public RefactoringHistory getRefactoringHistory(
      final IProject[] projects,
      final long start,
      final long end,
      final int flags,
      IProgressMonitor monitor) {
    Assert.isNotNull(projects);
    Assert.isTrue(start >= 0);
    Assert.isTrue(end >= start);
    Assert.isTrue(flags >= RefactoringDescriptor.NONE);
    if (monitor == null) monitor = new NullProgressMonitor();
    try {
      monitor.beginTask(
          RefactoringCoreMessages.RefactoringHistoryService_retrieving_history,
          3 * projects.length);
      final Set set = new HashSet();
      if (flags > RefactoringDescriptor.NONE) {
        for (int index = 0; index < projects.length; index++) {
          final IProject project = projects[index];
          if (project.isAccessible()) {
            final RefactoringDescriptorProxy[] proxies =
                getProjectHistory(project, start, end, flags, new SubProgressMonitor(monitor, 1))
                    .getDescriptors();
            filterRefactoringDescriptors(
                proxies, set, false, flags, new SubProgressMonitor(monitor, 2));
          }
        }
      } else {
        for (int index = 0; index < projects.length; index++) {
          final IProject project = projects[index];
          if (project.isAccessible()) {
            final RefactoringDescriptorProxy[] proxies =
                getProjectHistory(
                        project,
                        start,
                        end,
                        RefactoringDescriptor.NONE,
                        new SubProgressMonitor(monitor, 3))
                    .getDescriptors();
            for (int offset = 0; offset < proxies.length; offset++) set.add(proxies[offset]);
          }
        }
      }
      final RefactoringDescriptorProxy[] proxies = new RefactoringDescriptorProxy[set.size()];
      set.toArray(proxies);
      return new RefactoringHistoryImplementation(proxies);
    } finally {
      monitor.done();
    }
  }

