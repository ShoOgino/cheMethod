  /**
   * This implementation of {@link Change#isValid(IProgressMonitor)} tests the modified resource
   * using the validation method specified by {@link #setValidationMethod(int)}.
   */
  public RefactoringStatus isValid(IProgressMonitor pm)
      throws CoreException, OperationCanceledException {
    pm.beginTask("", 2); //$NON-NLS-1$
    try {
      RefactoringStatus result = new RefactoringStatus();
      IResource resource = getModifiedResource();
      checkExistence(result, resource);
      if (result.hasFatalError()) return result;
      if (fValidationMethod == VALIDATE_DEFAULT) return result;

      ValidationState state = new ValidationState(resource);
      state.checkModificationStamp(result, fModificationStamp);
      if (result.hasFatalError()) return result;
      state.checkSameReadOnly(result, fReadOnly);
      if (result.hasFatalError()) return result;
      if ((fValidationMethod & VALIDATE_NOT_READ_ONLY) != 0) {
        state.checkReadOnly(result);
        if (result.hasFatalError()) return result;
      }
      if ((fValidationMethod & SAVE_IF_DIRTY) != 0) {
        state.saveIfDirty(result, fModificationStamp, new SubProgressMonitor(pm, 1));
      }
      if ((fValidationMethod & VALIDATE_NOT_DIRTY) != 0) {
        state.checkDirty(result);
      }
      return result;
    } finally {
      pm.done();
    }
  }

