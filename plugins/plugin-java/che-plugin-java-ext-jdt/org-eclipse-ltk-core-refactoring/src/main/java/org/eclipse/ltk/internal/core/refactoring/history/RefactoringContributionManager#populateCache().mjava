  /**
   * Populates the refactoring contribution cache if necessary.
   *
   * @since 3.3
   */
  private void populateCache() {
    if (fContributionCache == null || fIdCache == null) {
      fContributionCache = new HashMap(32);
      fIdCache = new HashMap(32);
      Map<String, String> contributions = CheRefactoringContributions.getRefactoringContributions();
      contributions.forEach(
          (id, clazz) -> {
            try {
              final Object implementation =
                  CheRefactoringContributions.createExecutableExtension(clazz);
              if (implementation instanceof RefactoringContribution) {
                if (fContributionCache.get(id) != null)
                  RefactoringCorePlugin.logErrorMessage(
                      Messages.format(
                          RefactoringCoreMessages.RefactoringCorePlugin_duplicate_warning,
                          new String[] {id, clazz}));
                fContributionCache.put(id, implementation);
                fIdCache.put(implementation, id);
              } else
                RefactoringCorePlugin.logErrorMessage(
                    Messages.format(
                        RefactoringCoreMessages.RefactoringCorePlugin_creation_error,
                        new String[] {id, clazz}));
            } catch (CoreException exception) {
              RefactoringCorePlugin.log(exception);
            }
          });
      //			final IConfigurationElement[] elements=
      // Platform.getExtensionRegistry().getConfigurationElementsFor(RefactoringCore.ID_PLUGIN,
      // REFACTORING_CONTRIBUTIONS_EXTENSION_POINT);
      //			for (int index= 0; index < elements.length; index++) {
      //				final IConfigurationElement element= elements[index];
      //				final String attributeId= element.getAttribute(ATTRIBUTE_ID);
      //				final String point= RefactoringCore.ID_PLUGIN + "." +
      // REFACTORING_CONTRIBUTIONS_EXTENSION_POINT; //$NON-NLS-1$
      //				if (attributeId != null && !"".equals(attributeId)) { //$NON-NLS-1$
      //					final String className= element.getAttribute(ATTRIBUTE_CLASS);
      //					if (className != null && !"".equals(className)) { //$NON-NLS-1$
      //						try {
      //							final Object implementation= element.createExecutableExtension(ATTRIBUTE_CLASS);
      //							if (implementation instanceof RefactoringContribution) {
      //								if (fContributionCache.get(attributeId) != null)
      //									RefactoringCorePlugin.logErrorMessage(Messages.format(RefactoringCoreMessages
      // .RefactoringCorePlugin_duplicate_warning, new String[] { attributeId, point}));
      //								fContributionCache.put(attributeId, implementation);
      //								fIdCache.put(implementation, attributeId);
      //							} else
      //
      //	RefactoringCorePlugin.logErrorMessage(Messages.format(RefactoringCoreMessages.RefactoringCorePlugin_creation_error, new String[] { point, attributeId}));
      //						} catch (CoreException exception) {
      //							RefactoringCorePlugin.log(exception);
      //						}
      //					} else
      //
      //	RefactoringCorePlugin.logErrorMessage(Messages.format(RefactoringCoreMessages.RefactoringCorePlugin_missing_class_attribute, new String[] { point, attributeId, ATTRIBUTE_CLASS}));
      //				} else
      //
      //	RefactoringCorePlugin.logErrorMessage(Messages.format(RefactoringCoreMessages.RefactoringCorePlugin_missing_attribute, new String[] { point, ATTRIBUTE_ID}));
      //			}
    }
  }

