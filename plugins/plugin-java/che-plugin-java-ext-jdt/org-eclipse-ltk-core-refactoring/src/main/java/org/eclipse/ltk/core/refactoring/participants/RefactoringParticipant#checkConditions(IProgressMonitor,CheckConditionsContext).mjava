  /**
   * Checks the conditions of the refactoring participant.
   *
   * <p>The refactoring is considered as not being executable if the returned status has the
   * severity of <code>RefactoringStatus#FATAL</code>. Note that this blocks the whole refactoring
   * operation!
   *
   * <p>Clients should use the passed {@link CheckConditionsContext} to validate the changes they
   * generate. If the generated changes include workspace resource modifications, clients should
   * call ...
   *
   * <pre> (ResourceChangeChecker) context.getChecker(ResourceChangeChecker.class);
   * IResourceChangeDescriptionFactory deltaFactory= checker.getDeltaFactory();</pre>
   *
   * ... and use the delta factory to describe all resource modifications in advance.
   *
   * <p>This method can be called more than once.
   *
   * @param pm a progress monitor to report progress
   * @param context a condition checking context to collect shared condition checks
   * @return a refactoring status. If the status is <code>RefactoringStatus#FATAL</code> the
   *     refactoring is considered as not being executable.
   * @throws OperationCanceledException if the condition checking got canceled
   * @see org.eclipse.ltk.core.refactoring.Refactoring#checkInitialConditions(IProgressMonitor)
   * @see RefactoringStatus
   */
  public abstract RefactoringStatus checkConditions(
      IProgressMonitor pm, CheckConditionsContext context) throws OperationCanceledException;

