  /**
   * Compares two refactoring status entries for order. Returns a negative integer, zero, or a
   * positive integer as the first status entry is less than, equal to, or greater than the second.
   *
   * <p>The implementor must ensure that <tt>sgn(compare(x, y)) == -sgn(compare(y, x))</tt> for all
   * <tt>x</tt> and <tt>y</tt>.
   *
   * <p>The implementor must ensure that the relation is transitive: <tt>((compare(x, y)&gt;0)
   * &amp;&amp; (compare(y, z)&gt;0))</tt> implies <tt>compare(x, z)&gt;0</tt>.
   *
   * <p>Furthermore, the implementer must ensure that <tt>compare(x, y)==0</tt> implies that
   * <tt>sgn(compare(x, z))==sgn(compare(y, z))</tt> for all <tt>z</tt>.
   *
   * @param entry1 the first refactoring status entry to be compared.
   * @param entry2 the second refactoring status entry to be compared.
   * @return a negative integer, zero, or a positive integer as the first status entry is less than,
   *     equal to, or greater than the second.
   */
  public int compare(RefactoringStatusEntry entry1, RefactoringStatusEntry entry2);

