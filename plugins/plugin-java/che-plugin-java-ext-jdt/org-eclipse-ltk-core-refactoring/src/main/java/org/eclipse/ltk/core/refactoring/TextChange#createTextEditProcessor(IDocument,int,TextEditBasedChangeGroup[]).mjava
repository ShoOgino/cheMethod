  private TextEditProcessor createTextEditProcessor(
      IDocument document, int flags, TextEditBasedChangeGroup[] changes) {
    if (fEdit == null) return new TextEditProcessor(document, new MultiTextEdit(0, 0), flags);
    List includes = new ArrayList(0);
    for (int c = 0; c < changes.length; c++) {
      TextEditBasedChangeGroup change = changes[c];
      Assert.isTrue(change.getTextEditChange() == this);
      if (change.isEnabled()) {
        includes.addAll(Arrays.asList(change.getTextEditGroup().getTextEdits()));
      }
    }
    fCopier = new TextEditCopier(fEdit);
    TextEdit copiedEdit = fCopier.perform();
    boolean keep = getKeepPreviewEdits();
    if (keep) flags = flags | TextEdit.UPDATE_REGIONS;
    LocalTextEditProcessor result = new LocalTextEditProcessor(document, copiedEdit, flags);
    result.setIncludes(
        mapEdits((TextEdit[]) includes.toArray(new TextEdit[includes.size()]), fCopier));
    if (!keep) fCopier = null;
    return result;
  }

