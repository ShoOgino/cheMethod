  /**
   * Returns the cached refactoring session descriptor.
   *
   * @param store the file store of the descriptor
   * @param projectName project name, or <code>null</code> for the workspace
   * @param input the input stream where to read the descriptor
   * @return the cached refactoring session descriptor
   * @throws CoreException if an error occurs while reading the session
   */
  private RefactoringSessionDescriptor getCachedSession(
      final IFileStore store, String projectName, final InputStream input) throws CoreException {
    if (store.equals(fCachedStore) && fCachedDescriptor != null) return fCachedDescriptor;
    final RefactoringSessionDescriptor descriptor;
    try {
      descriptor =
          new RefactoringSessionReader(false, projectName).readSession(new InputSource(input));
      fCachedDescriptor = descriptor;
      fCachedStore = store;
      return descriptor;
    } catch (CoreException e) {
      throw new CoreException(
          new MultiStatus(
              RefactoringCorePlugin.getPluginId(),
              IRefactoringCoreStatusCodes.REFACTORING_HISTORY_IO_ERROR,
              new IStatus[] {e.getStatus()},
              Messages.format(
                  RefactoringCoreMessages.RefactoringHistoryManager_error_reading_file,
                  BasicElementLabels.getURLPart(store.toURI().toString())),
              null));
    }
  }

