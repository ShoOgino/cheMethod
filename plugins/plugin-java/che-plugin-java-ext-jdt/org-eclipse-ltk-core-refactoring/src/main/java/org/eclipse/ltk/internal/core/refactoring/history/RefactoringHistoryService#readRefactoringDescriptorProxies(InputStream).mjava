  /**
   * Reads refactoring descriptor proxies from the input stream.
   *
   * <p>Note that calling this method with a flag argument unequal to <code>
   * RefactoringDescriptor#NONE</code> may result in a performance degradation, since the actual
   * descriptors have to be eagerly resolved. This in turn results in faster execution of any
   * subsequent calls to {@link RefactoringDescriptorProxy#requestDescriptor(IProgressMonitor)}
   * which try to request a descriptor from the returned refactoring history.
   *
   * @param stream the input stream to read from
   * @return the refactoring descriptor proxies
   * @throws CoreException if an error occurs while reading the refactoring descriptor proxies
   */
  public RefactoringDescriptorProxy[] readRefactoringDescriptorProxies(final InputStream stream)
      throws CoreException {
    Assert.isNotNull(stream);
    try {
      return RefactoringHistoryManager.readRefactoringDescriptorProxies(
          stream, null, 0, Long.MAX_VALUE);
    } catch (IOException exception) {
      throw new CoreException(
          new Status(
              IStatus.ERROR,
              RefactoringCorePlugin.getPluginId(),
              0,
              exception.getLocalizedMessage(),
              null));
    }
  }

