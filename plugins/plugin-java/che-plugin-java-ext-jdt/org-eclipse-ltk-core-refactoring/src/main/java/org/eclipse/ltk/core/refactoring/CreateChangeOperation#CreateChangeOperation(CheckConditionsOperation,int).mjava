  /**
   * Creates a new operation with the given {@link CheckConditionsOperation}. When performed the
   * operation first checks the conditions as specified by the <code>
   * CheckConditionsOperation</code>. Depending on the result of the condition checking a change
   * object is created or not.
   *
   * @param operation the condition checking operation
   * @param checkFailedSeverity the severity from which on the condition checking is interpreted as
   *     failed. The passed value must be greater than {@link RefactoringStatus#OK} and less than or
   *     equal {@link RefactoringStatus#FATAL}. The standard value from which on a condition check
   *     should is to be interpreted as failed can be accessed via {@link
   *     RefactoringCore#getConditionCheckingFailedSeverity()}.
   */
  public CreateChangeOperation(CheckConditionsOperation operation, int checkFailedSeverity) {
    Assert.isNotNull(operation);
    fCheckConditionOperation = operation;
    fRefactoring = operation.getRefactoring();
    Assert.isTrue(
        checkFailedSeverity > RefactoringStatus.OK
            && checkFailedSeverity <= RefactoringStatus.FATAL);
    fConditionCheckingFailedSeverity = checkFailedSeverity;
  }

