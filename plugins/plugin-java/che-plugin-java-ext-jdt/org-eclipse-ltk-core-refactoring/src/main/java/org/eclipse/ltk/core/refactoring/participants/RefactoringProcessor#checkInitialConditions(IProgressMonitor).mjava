  /**
   * Checks some initial conditions based on the element to be refactored.
   *
   * <p>The refactoring using this processor is considered as not being executable if the returned
   * status has the severity of <code>RefactoringStatus#FATAL</code>.
   *
   * <p>This method can be called more than once.
   *
   * @param pm a progress monitor to report progress. Although availability checks are supposed to
   *     execute fast, there can be certain situations where progress reporting is necessary. For
   *     example rebuilding a corrupted index may report progress.
   * @return a refactoring status. If the status is <code>RefactoringStatus#FATAL</code> the
   *     refactoring is considered as not being executable.
   * @throws CoreException if an exception occurred during initial condition checking. If this
   *     happens, the initial condition checking is interpreted as failed.
   * @throws OperationCanceledException if the condition checking got canceled
   * @see org.eclipse.ltk.core.refactoring.Refactoring#checkInitialConditions(IProgressMonitor)
   * @see RefactoringStatus#FATAL
   */
  public abstract RefactoringStatus checkInitialConditions(IProgressMonitor pm)
      throws CoreException, OperationCanceledException;

