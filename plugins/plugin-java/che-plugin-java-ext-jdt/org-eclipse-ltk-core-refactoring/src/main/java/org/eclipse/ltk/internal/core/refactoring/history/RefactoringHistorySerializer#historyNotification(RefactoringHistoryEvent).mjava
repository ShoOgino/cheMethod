  /** {@inheritDoc} */
  public void historyNotification(final RefactoringHistoryEvent event) {
    Assert.isNotNull(event);
    switch (event.getEventType()) {
      case RefactoringHistoryEvent.ADDED:
      case RefactoringHistoryEvent.PUSHED:
      case RefactoringHistoryEvent.POPPED:
        {
          final RefactoringDescriptorProxy proxy = event.getDescriptor();
          final long stamp = proxy.getTimeStamp();
          if (stamp >= 0) {
            final String name = proxy.getProject();
            final IFileStore store =
                EFS.getLocalFileSystem()
                    .getStore(RefactoringCorePlugin.getDefault().getStateLocation())
                    .getChild(RefactoringHistoryService.NAME_HISTORY_FOLDER);
            if (name != null && !"".equals(name)) { // $NON-NLS-1$
              final IProject project = ResourcesPlugin.getWorkspace().getRoot().getProject(name);
              if (project.isAccessible()) {
                if (RefactoringHistoryService.hasSharedRefactoringHistory(project)) {
                  final URI uri = project.getLocationURI();
                  if (uri != null) {
                    try {
                      processHistoryNotification(
                          EFS.getStore(uri).getChild(RefactoringHistoryService.NAME_HISTORY_FOLDER),
                          event,
                          name);
                    } catch (CoreException exception) {
                      RefactoringCorePlugin.log(exception);
                    } finally {
                      try {
                        project.refreshLocal(IResource.DEPTH_INFINITE, null);
                      } catch (CoreException exception) {
                        RefactoringCorePlugin.log(exception);
                      }
                    }
                  }
                } else {
                  try {
                    processHistoryNotification(store.getChild(name), event, name);
                  } catch (CoreException exception) {
                    RefactoringCorePlugin.log(exception);
                  }
                }
              }
            } else {
              try {
                processHistoryNotification(
                    store.getChild(RefactoringHistoryService.NAME_WORKSPACE_PROJECT), event, name);
              } catch (CoreException exception) {
                RefactoringCorePlugin.log(exception);
              }
            }
          }
        }
    }
  }

