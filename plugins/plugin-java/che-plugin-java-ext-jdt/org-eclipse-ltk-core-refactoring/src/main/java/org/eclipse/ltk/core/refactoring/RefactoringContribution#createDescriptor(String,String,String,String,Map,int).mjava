  /**
   * Creates a new refactoring descriptor initialized with the values provided by the arguments of
   * this method.
   *
   * <p>This method is used by the refactoring framework to create a language-specific refactoring
   * descriptor representing the refactoring instance corresponding to the specified arguments.
   * Implementations of this method must never return <code>null</code>. The refactoring framework
   * guarantees that this method is only called with <code>id</code> values for which the
   * refactoring contribution has been registered with the extension point.
   *
   * @param id the unique id of the refactoring
   * @param project the non-empty name of the project associated with this refactoring, or <code>
   *     null</code> for a workspace refactoring
   * @param description a non-empty human-readable description of the particular refactoring
   *     instance
   * @param comment the comment associated with the refactoring, or <code>null</code> for no comment
   * @param arguments the argument map (element type: &lt;String, String&gt;). The keys of the
   *     arguments are required to be non-empty strings which must not contain spaces. The values
   *     must be non-empty strings
   * @param flags the flags of the refactoring descriptor
   * @return the refactoring descriptor
   * @throws IllegalArgumentException if the argument map contains invalid keys/values
   * @see #retrieveArgumentMap(RefactoringDescriptor)
   */
  public abstract RefactoringDescriptor createDescriptor(
      String id, String project, String description, String comment, Map arguments, int flags)
      throws IllegalArgumentException;

