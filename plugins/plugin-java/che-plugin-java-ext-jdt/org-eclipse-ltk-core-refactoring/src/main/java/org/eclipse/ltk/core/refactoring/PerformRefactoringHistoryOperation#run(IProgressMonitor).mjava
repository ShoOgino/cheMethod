  /** {@inheritDoc} */
  public void run(final IProgressMonitor monitor) throws CoreException {
    fExecutionStatus = new RefactoringStatus();
    final RefactoringDescriptorProxy[] proxies = fRefactoringHistory.getDescriptors();
    monitor.beginTask(
        RefactoringCoreMessages.PerformRefactoringHistoryOperation_perform_refactorings,
        170 * proxies.length);
    final IRefactoringHistoryService service = RefactoringHistoryService.getInstance();
    try {
      service.connect();
      for (int index = 0; index < proxies.length; index++) {
        final RefactoringDescriptor descriptor =
            proxies[index].requestDescriptor(
                new SubProgressMonitor(monitor, 10, SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));
        if (descriptor != null) {
          RefactoringContext context = null;
          RefactoringStatus status = new RefactoringStatus();
          try {
            try {
              context =
                  createRefactoringContext(
                      descriptor,
                      status,
                      new SubProgressMonitor(
                          monitor, 30, SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));
            } catch (CoreException exception) {
              status.merge(RefactoringStatus.create(exception.getStatus()));
            }
            if (context != null && !status.hasFatalError()) {
              Refactoring refactoring = context.getRefactoring();
              final PerformRefactoringOperation operation =
                  new PerformRefactoringOperation(
                      refactoring, CheckConditionsOperation.ALL_CONDITIONS);
              try {
                status.merge(
                    aboutToPerformRefactoring(
                        refactoring,
                        descriptor,
                        new SubProgressMonitor(
                            monitor, 30, SubProgressMonitor.SUPPRESS_SUBTASK_LABEL)));
                if (!status.hasFatalError()) {
                  ResourcesPlugin.getWorkspace()
                      .run(
                          operation,
                          new SubProgressMonitor(
                              monitor, 90, SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));
                  status.merge(operation.getConditionStatus());
                  if (!status.hasFatalError()) status.merge(operation.getValidationStatus());
                }
              } finally {
                refactoringPerformed(
                    refactoring,
                    new SubProgressMonitor(monitor, 10, SubProgressMonitor.SUPPRESS_SUBTASK_LABEL));
              }
            }
          } finally {
            fExecutionStatus.merge(status);
            if (context != null) context.dispose();
          }
        }
      }
    } finally {
      service.disconnect();
      monitor.done();
    }
  }

