  public RefactoringParticipant[] getParticipants(
      RefactoringStatus status,
      RefactoringProcessor processor,
      String[] natures,
      SharableParticipants shared) {
    List result = new ArrayList(5);
    if (fDelete != null) {
      DeleteArguments arguments = new DeleteArguments();
      for (Iterator iter = fDelete.iterator(); iter.hasNext(); ) {
        DeleteParticipant[] deletes =
            ParticipantManager.loadDeleteParticipants(
                status, processor, iter.next(), arguments, natures, shared);
        result.addAll(Arrays.asList(deletes));
      }
    }
    if (fCreate != null) {
      CreateArguments arguments = new CreateArguments();
      for (Iterator iter = fCreate.iterator(); iter.hasNext(); ) {
        CreateParticipant[] creates =
            ParticipantManager.loadCreateParticipants(
                status, processor, iter.next(), arguments, natures, shared);
        result.addAll(Arrays.asList(creates));
      }
    }
    if (fCopy != null) {
      for (int i = 0; i < fCopy.size(); i++) {
        Object element = fCopy.get(i);
        CopyArguments arguments = (CopyArguments) fCopyArguments.get(i);
        CopyParticipant[] copies =
            ParticipantManager.loadCopyParticipants(
                status, processor, element, arguments, natures, shared);
        result.addAll(Arrays.asList(copies));
      }
    }
    return (RefactoringParticipant[]) result.toArray(new RefactoringParticipant[result.size()]);
  }

