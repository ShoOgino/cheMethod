  /**
   * Checks all conditions. This implementation calls <code>checkInitialConditions</code> and <code>
   * checkFinalConditions</code>.
   *
   * <p>Subclasses may extend this method to provide additional condition checks.
   *
   * @param pm a progress monitor to report progress
   * @return a refactoring status. If the status is <code>RefactoringStatus#FATAL</code> the
   *     refactoring has to be considered as not being executable.
   * @throws CoreException if an exception occurred during condition checking. If this happens then
   *     the condition checking has to be interpreted as failed
   * @throws OperationCanceledException if the condition checking got canceled
   * @see #checkInitialConditions(IProgressMonitor)
   * @see #checkFinalConditions(IProgressMonitor)
   */
  public RefactoringStatus checkAllConditions(IProgressMonitor pm)
      throws CoreException, OperationCanceledException {
    RefactoringTickProvider refactoringTickProvider = getRefactoringTickProvider();
    pm.beginTask("", refactoringTickProvider.getCheckAllConditionsTicks()); // $NON-NLS-1$
    RefactoringStatus result = new RefactoringStatus();
    result.merge(
        checkInitialConditions(
            new SubProgressMonitor(pm, refactoringTickProvider.getCheckInitialConditionsTicks())));
    if (!result.hasFatalError()) {
      if (pm.isCanceled()) throw new OperationCanceledException();
      result.merge(
          checkFinalConditions(
              new SubProgressMonitor(pm, refactoringTickProvider.getCheckFinalConditionsTicks())));
    }
    pm.done();
    return result;
  }

