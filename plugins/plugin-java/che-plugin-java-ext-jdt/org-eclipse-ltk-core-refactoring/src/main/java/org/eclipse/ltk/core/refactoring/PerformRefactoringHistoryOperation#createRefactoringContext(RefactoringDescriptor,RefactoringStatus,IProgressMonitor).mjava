  /**
   * Method which is called to create a refactoring context from a refactoring descriptor. The
   * refactoring context must contain a refactoring in an initialized state at the return of the
   * method call.
   *
   * <p>A caller of this method must ensure that {@link RefactoringContext#dispose()} is eventually
   * called.
   *
   * <p>The default implementation delegates the task to the refactoring descriptor.
   *
   * @param descriptor the refactoring descriptor
   * @param status a refactoring status to describe the outcome of the initialization
   * @param monitor the progress monitor to use
   * @return the refactoring context, or <code>null</code> if this refactoring descriptor represents
   *     the unknown refactoring, or if no refactoring contribution is available for this
   *     refactoring descriptor
   * @throws CoreException if an error occurs while creating the refactoring context
   * @since 3.6
   */
  protected RefactoringContext createRefactoringContext(
      final RefactoringDescriptor descriptor,
      final RefactoringStatus status,
      final IProgressMonitor monitor)
      throws CoreException {
    try {
      Assert.isNotNull(descriptor);
      return descriptor.createRefactoringContext(status);
    } finally {
      if (monitor != null) {
        monitor.done();
      }
    }
  }

