	/**
	 * Checks the condition of all registered condition checkers and returns a
	 * merge status result.
	 *
	 * @param pm a progress monitor or <code>null</code> if no progress
	 *  reporting is desired
	 *
	 * @return the combined status result
	 *
	 * @throws CoreException if an error occurs during condition checking
	 */
	public RefactoringStatus check(IProgressMonitor pm) throws CoreException {
		if (pm == null)
			pm= new NullProgressMonitor();
		RefactoringStatus result= new RefactoringStatus();
		mergeResourceOperationAndValidateEdit();
		List values= new ArrayList(fCheckers.values());
		Collections.sort(values, new Comparator() {
			public int compare(Object o1, Object o2) {
				// Note there can only be one ResourceOperationChecker. So it
				// is save to not test the case that both objects are
				// ResourceOperationChecker
				if (o1 instanceof ResourceChangeChecker)
					return -1;
				if (o2 instanceof ResourceChangeChecker)
					return 1;
				return 0;
			}
		});
		pm.beginTask("", values.size()); //$NON-NLS-1$
		for (Iterator iter= values.iterator(); iter.hasNext();) {
			IConditionChecker checker= (IConditionChecker)iter.next();
			result.merge(checker.check(new SubProgressMonitor(pm, 1)));
			if (pm.isCanceled())
				throw new OperationCanceledException();
		}
		return result;
	}

