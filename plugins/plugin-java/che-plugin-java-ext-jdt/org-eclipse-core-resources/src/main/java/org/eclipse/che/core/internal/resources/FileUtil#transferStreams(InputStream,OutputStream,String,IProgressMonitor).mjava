  public static final void transferStreams(
      InputStream source, OutputStream destination, String path, IProgressMonitor monitor)
      throws CoreException {
    //		monitor = Policy.monitorFor(monitor);
    try {
      /*
       * Note: although synchronizing on the buffer is thread-safe,
       * it may result in slower performance in the future if we want
       * to allow concurrent writes.
       */
      synchronized (buffer) {
        while (true) {
          int bytesRead = -1;
          try {
            bytesRead = source.read(buffer);
          } catch (IOException e) {
            String msg = NLS.bind(Messages.localstore_failedReadDuringWrite, path);
            throw new ResourceException(IResourceStatus.FAILED_READ_LOCAL, new Path(path), msg, e);
          }
          try {
            if (bytesRead == -1) {
              // Bug 332543 - ensure we don't ignore failures on close()
              destination.close();
              break;
            }
            destination.write(buffer, 0, bytesRead);
          } catch (IOException e) {
            String msg = NLS.bind(Messages.localstore_couldNotWrite, path);
            throw new ResourceException(IResourceStatus.FAILED_WRITE_LOCAL, new Path(path), msg, e);
          }
          //					monitor.worked(1);
        }
      }
    } finally {
      safeClose(source);
      safeClose(destination);
    }
  }

