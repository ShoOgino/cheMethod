	/**
	 * Returns the build configurations referenced by the passed in build configuration
	 * on this project.
	 * <p>
	 * This includes both the static and dynamic project level references.  These are 
	 * converted to build configurations pointing at the currently active referenced 
	 * project configuration.
	 * The result will not contain duplicates.
	 * </p>
	 * <p>
	 * References to active configurations will be translated to references to actual
	 * build configurations, if the project is accessible.  Note that if includeMissing
	 * is true BuildConfigurations which can't be resolved (i.e. exist on missing projects,
	 * or aren't listed on the referenced project) are still included in the  returned 
	 * IBuildConfiguration array.
	 * </p>
	 * <p>
	 * Returns an empty array if there are no references.
	 * </p>
	 *
	 * @param configName the configuration to get the references for
	 * @param includeMissing boolean controls whether unresolved buildConfiguration should 
	 *        be included in the result
	 * @return an array of project build configurations
	 * @exception CoreException if this method fails. Reasons include:
	 * <ul>
	 * <li> This project does not exist.</li>
	 * <li> This project is not open.</li>
	 * <li> The build configuration does not exist in this project.</li>
	 * </ul>
	 * @see IProjectDescription#getBuildConfigReferences(String)
	 * @since 3.7
	 */
	public IBuildConfiguration[] getReferencedBuildConfigs(String configName, boolean includeMissing) throws CoreException;

