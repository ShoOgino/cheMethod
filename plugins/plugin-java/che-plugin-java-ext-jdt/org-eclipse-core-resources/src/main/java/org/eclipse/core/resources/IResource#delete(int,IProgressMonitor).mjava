	/**
	 * Deletes this resource from the workspace.
	 * Deletion applies recursively to all members of this resource in a "best-
	 * effort" fashion.  That is, all resources which can be deleted are deleted.
	 * Resources which could not be deleted are noted in a thrown exception. The
	 * method does not fail if resources do not exist; it fails only if resources
	 * could not be deleted.
	 * <p>
	 * Deleting a non-linked resource also deletes its contents from the local file
	 * system. In the case of a file or folder resource, the corresponding file or
	 * directory in the local file system is deleted. Deleting an open project
	 * recursively deletes its members; deleting a closed project just gets rid of
	 * the project itself (closed projects have no members); files in the project's
	 * local content area are retained; referenced projects are unaffected.
	 * </p>
	 * <p>
	 * Deleting a linked resource does not delete its contents from the file system,
	 * it just removes that resource and its children from the workspace.  Deleting
	 * children of linked resources does remove the contents from the file system.
	 * </p>
	 * <p>
	 * Deleting a resource also deletes its session and persistent properties and
	 * markers.
	 * </p>
	 * <p>
	 * Deleting a non-project resource which has sync information converts the
	 * resource to a phantom and retains the sync information for future use.
	 * </p>
	 * <p>
	 * Deleting the workspace root resource recursively deletes all projects,
	 * and removes all markers, properties, sync info and other data related to the
	 * workspace root; the root resource itself is not deleted, however.
	 * </p>
	 * <p>
	 * This method changes resources; these changes will be reported
	 * in a subsequent resource change event.
	 * </p>
	 * <p>
	 * This method is long-running; progress and cancellation are provided
	 * by the given progress monitor. 
	 * </p>
	 * <p>
	 * The {@link #FORCE} update flag controls how this method deals with
	 * cases where the workspace is not completely in sync with the local
	 * file system. If {@link #FORCE} is not specified, the method will only
	 * attempt to delete files and directories in the local file system that
	 * correspond to, and are in sync with, resources in the workspace; it will fail
	 * if it encounters a file or directory in the file system that is out of sync
	 * with  the workspace.  This option ensures there is no unintended data loss;
	 * it is the recommended setting. However, if {@link #FORCE} is specified,
	 * the method will ruthlessly attempt to delete corresponding files and
	 * directories in the local file system, including ones that have been recently
	 * updated or created.
	 * </p>
	 * <p>
	 * The {@link #KEEP_HISTORY} update flag controls whether or not files that
	 * are about to be deleted from the local file system have their current
	 * contents saved in the workspace's local history. The local history mechanism
	 * serves as a safety net to help the user recover from mistakes that might
	 * otherwise result in data loss. Specifying {@link #KEEP_HISTORY} is
	 * recommended except in circumstances where past states of the files are of no
	 * conceivable interest to the user. Note that local history is maintained
	 * with each individual project, and gets discarded when a project is deleted
	 * from the workspace. Hence {@link #KEEP_HISTORY} is only really applicable
	 * when deleting files and folders, but not projects.
	 * </p>
	 * <p>
	 * The {@link #ALWAYS_DELETE_PROJECT_CONTENT} update flag controls how
	 * project deletions are handled. If {@link #ALWAYS_DELETE_PROJECT_CONTENT}
	 * is specified, then the files and folders in a project's local content area
	 * are deleted, regardless of whether the project is open or closed;
	 * {@link #FORCE} is assumed regardless of whether it is specified. If
	 * {@link #NEVER_DELETE_PROJECT_CONTENT} is specified, then the files and
	 * folders in a project's local content area are retained, regardless of whether
	 * the project is open or closed; the {@link #FORCE} flag is ignored. If
	 * neither of these flags is specified, files and folders in a project's local
	 * content area from open projects (subject to the {@link #FORCE} flag), but
	 * never from closed projects.
	 * </p>
	 * 
	 * @param updateFlags bit-wise or of update flag constants (
	 *   {@link #FORCE}, {@link #KEEP_HISTORY},
	 *   {@link #ALWAYS_DELETE_PROJECT_CONTENT},
	 *   and {@link #NEVER_DELETE_PROJECT_CONTENT})
	 * @param monitor a progress monitor, or <code>null</code> if progress
	 *    reporting is not desired
	 * @exception CoreException if this method fails. Reasons include:
	 * <ul>
	 * <li> This resource could not be deleted for some reason.</li>
	 * <li> This resource or one of its descendents is out of sync with the local file system
	 *      and {@link #FORCE} is not specified.</li>
	 * <li> Resource changes are disallowed during certain types of resource change 
	 *       event notification. See <code>IResourceChangeEvent</code> for more details.</li>
	 * </ul>
	 * @exception OperationCanceledException if the operation is canceled. 
	 * Cancelation can occur even if no progress monitor is provided.
	 * @see IFile#delete(boolean, boolean, IProgressMonitor)
	 * @see IFolder#delete(boolean, boolean, IProgressMonitor)
	 * @see #FORCE
	 * @see #KEEP_HISTORY
	 * @see #ALWAYS_DELETE_PROJECT_CONTENT
	 * @see #NEVER_DELETE_PROJECT_CONTENT
	 * @see IResourceRuleFactory#deleteRule(IResource)
	 * @since 2.0
	 */
	public void delete(int updateFlags, IProgressMonitor monitor) throws CoreException;

