  /**
   * Appends the entire contents of the given stream to this file.
   *
   * <p>This is a convenience method, fully equivalent to:
   *
   * <pre>
   *   appendContents(source, (keepHistory ? KEEP_HISTORY : IResource.NONE) | (force ? FORCE : IResource.NONE), monitor);
   * </pre>
   *
   * <p>This method changes resources; these changes will be reported in a subsequent resource
   * change event, including an indication that this file's content have been changed.
   *
   * <p>This method is long-running; progress and cancelation are provided by the given progress
   * monitor.
   *
   * @param source an input stream containing the new contents of the file
   * @param force a flag controlling how to deal with resources that are not in sync with the local
   *     file system
   * @param keepHistory a flag indicating whether or not to store the current contents in the local
   *     history
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @exception CoreException if this method fails. Reasons include:
   *     <ul>
   *       <li>This resource does not exist.
   *       <li>The corresponding location in the local file system is occupied by a directory.
   *       <li>The workspace is not in sync with the corresponding location in the local file system
   *           and <code>force </code> is <code>false</code>.
   *       <li>Resource changes are disallowed during certain types of resource change event
   *           notification. See <code>IResourceChangeEvent</code> for more details.
   *       <li>The file modification validator disallowed the change.
   *     </ul>
   *
   * @exception OperationCanceledException if the operation is canceled. Cancelation can occur even
   *     if no progress monitor is provided.
   * @see #appendContents(java.io.InputStream,int,IProgressMonitor)
   */
  public void appendContents(
      InputStream source, boolean force, boolean keepHistory, IProgressMonitor monitor)
      throws CoreException;

