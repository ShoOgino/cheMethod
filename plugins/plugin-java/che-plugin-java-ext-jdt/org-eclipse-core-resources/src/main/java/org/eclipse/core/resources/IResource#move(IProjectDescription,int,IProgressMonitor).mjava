	/**
	 * Renames or relocates this project so that it is the project specified by the
	 * given project description. The description specifies the name and location
	 * of the new project. After successful completion, the old project
	 * and any direct or indirect members will no longer exist; but corresponding
	 * new resources will now exist in the new project.
	 * <p>
	 * When a resource moves, its session and persistent properties move with it.
	 * Likewise for all the other attributes of the resource including markers.
	 * </p>
	 * <p>
	 * When this project's location is the default location, then the directories
	 * and files on disk are moved to be in the location specified by the given
	 * description. If the given description specifies the default location for the
	 * project, the directories and files are moved to the default location. If the name
	 * in the given description is the same as this project's name and the location
	 * is different, then the project contents will be moved to the new location.
	 * In all other cases the directories and files on disk are left untouched.
	 * Parts of the supplied description other than the name and location are ignored.
	 * </p>
	 * <p>
	 * The <code>FORCE</code> update flag controls how this method deals with cases
	 * where the workspace is not completely in sync with the local file system. If
	 * <code>FORCE</code> is not specified, the method will only attempt to move
	 * resources that are in sync with the corresponding files and directories in
	 * the local file system; it will fail if it encounters a resource that is out
	 * of sync with the file system. However, if <code>FORCE</code> is specified,
	 * the method moves all corresponding files and directories from the local file
	 * system, including ones that have been recently updated or created. Note that
	 * in both settings of the <code>FORCE</code> flag, the operation fails if the
	 * newly created resources in the workspace would be out of sync with the local
	 * file system; this ensures files in the file system cannot be accidentally
	 * overwritten.
	 * </p>
	 * <p>
	 * The <code>KEEP_HISTORY</code> update flag controls whether or not file that
	 * are about to be deleted from the local file system have their current
	 * contents saved in the workspace's local history. The local history mechanism
	 * serves as a safety net to help the user recover from mistakes that might
	 * otherwise result in data loss. Specifying <code>KEEP_HISTORY</code> is
	 * recommended except in circumstances where past states of the files are of no
	 * conceivable interest to the user. Note that local history is maintained
	 * with each individual project, and gets discarded when a project is deleted
	 * from the workspace. Hence <code>KEEP_HISTORY</code> is only really applicable
	 * when moving files and folders, but not whole projects.
	 * </p>
	 * <p>
	 * Local history information for this project and its children will not be moved to the
	 * destination.
	 * </p>
	 * <p>
	 * The <code>SHALLOW</code> update flag controls how this method deals with linked
	 * resources.  If <code>SHALLOW</code> is not specified, then the underlying
	 * contents of any linked resource will always be moved in the file system.  In
	 * this case, the destination of the move will not contain any linked resources.
	 * If  <code>SHALLOW</code> is specified when a project containing linked
	 * resources is moved, new linked resources are created in the destination
	 * project pointing to the same file system locations.  In this case, no files
	 * on disk under any linked resource are actually moved.  The
	 * <code>SHALLOW</code> update flag is ignored when moving non- linked
	 * resources.
	 * </p>
	 * <p>
	 * The {@link #REPLACE} update flag controls how this method deals
	 * with a change of location.  If the location changes and the {@link #REPLACE}
	 * flag is not specified, then the projects contents on disk are moved to the new
	 * location.  If the location changes and the {@link #REPLACE}
	 * flag is specified, then the project is reoriented to correspond to the new
	 * location, but no contents are moved on disk.  The contents already on
	 * disk at the new location become the project contents.  If the new project
	 * location does not exist, it will be created.
	 * </p>
	 * <p>  
	 * Update flags other than those listed above are ignored.
	 * </p>
	 * <p>
	 * This method changes resources; these changes will be reported in a subsequent
	 * resource change event that will include an indication that the resource has
	 * been removed from its parent and that a corresponding resource has been added
	 * to its new parent. Additional information provided with resource delta shows
	 * that these additions and removals are related.
	 * </p>
	 * <p>
	 * This method is long-running; progress and cancellation are provided
	 * by the given progress monitor. 
	 * </p>
	 *
	 * @param description the destination project description
	 * @param updateFlags bit-wise or of update flag constants
	 *   ({@link #FORCE}, {@link #KEEP_HISTORY}, {@link #SHALLOW}
	 *   and {@link #REPLACE}).
	 * @param monitor a progress monitor, or <code>null</code> if progress
	 *    reporting is not desired
	 * @exception CoreException if this resource could not be moved. Reasons include:
	 * <ul>
	 * <li> This resource does not exist.</li>
	 * <li> This resource or one of its descendents is not local.</li>
	 * <li> This resource is not a project.</li>
	 * <li> The project at the destination already exists.</li>
	 * <li> This resource or one of its descendents is out of sync with the
	 *      local  file system and <code>FORCE</code> is not specified.</li>
	 * <li> The workspace and the local file system are out of sync
	 *      at the destination resource or one of its descendents.</li>
	 * <li> Resource changes are disallowed during certain types of resource change 
	 *      event notification. See <code>IResourceChangeEvent</code> for more details.</li>
	 *  <li> The destination file system location is occupied. When moving a project
	 *  in the file system, the destination directory must either not exist or be empty.</li>
	 * </ul>
	 * @exception OperationCanceledException if the operation is canceled. 
	 * Cancelation can occur even if no progress monitor is provided.
	 * @see IResourceDelta#getFlags()
	 * @see #FORCE
	 * @see #KEEP_HISTORY
	 * @see #SHALLOW
	 * @see #REPLACE
	 * @see IResourceRuleFactory#moveRule(IResource, IResource)
	 * @since  2.0
	 */
	public void move(IProjectDescription description, int updateFlags, IProgressMonitor monitor) throws CoreException;

