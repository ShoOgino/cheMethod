  /**
   * Validates that the given files can be modified. The files must all exist in the workspace. The
   * optional context object may be supplied if UI-based validation is required. If the context is
   * <code>null</code>, the validator must attempt to perform the validation in a headless manner.
   * The returned status is <code>IStatus.OK</code> if this validator believes the given file can be
   * modified. Other return statuses indicate the reason why the individual files cannot be
   * modified.
   *
   * @param files the files that are to be modified; these files must all exist in the workspace
   * @param context the <code>org.eclipse.swt.widgets.Shell</code> that is to be used to parent any
   *     dialogs with the user, or <code>null</code> if there is no UI context (declared as an
   *     <code>Object</code> to avoid any direct references on the SWT component)
   * @return a status object that is OK if things are fine, otherwise a status describing reasons
   *     why modifying the given files is not reasonable
   * @see IWorkspace#validateEdit(IFile[], Object)
   * @deprecated this method is part of the deprecated {@link IFileModificationValidator} interface.
   *     Clients should call {@link #validateEdit(IFile[], FileModificationValidationContext)}
   *     instead.
   */
  @Deprecated
  public final IStatus validateEdit(IFile[] files, Object context) {
    FileModificationValidationContext validationContext;
    if (context == null) validationContext = null;
    else if (context instanceof FileModificationValidationContext)
      validationContext = (FileModificationValidationContext) context;
    else validationContext = new FileModificationValidationContext(context);
    return validateEdit(files, validationContext);
  }

