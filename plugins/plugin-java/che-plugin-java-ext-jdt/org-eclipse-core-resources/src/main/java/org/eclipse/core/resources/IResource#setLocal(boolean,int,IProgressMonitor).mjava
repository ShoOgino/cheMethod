	/**
	 * Set whether or not this resource and its members (to the 
	 * specified depth) are expected to have their contents (and properties)
	 * available locally.  The workspace root and projects are always local and 
	 * attempting to set either to non-local (i.e., passing <code>false</code>) 
	 * has no effect on the resource.
	 * <p>
	 * When a resource is not local, its content and properties are
	 * unavailable for both reading and writing.
	 * </p>
	 * <p>
	 * This method is long-running; progress and cancellation are provided
	 * by the given progress monitor.
	 * </p>
	 * 
	 * @param flag whether this resource should be considered local
	 * @param depth valid values are <code>DEPTH_ZERO</code>, 
	 *  <code>DEPTH_ONE</code>, or <code>DEPTH_INFINITE</code>
	 * @param monitor a progress monitor, or <code>null</code> if progress
	 *    reporting is not desired
	 * @exception CoreException if this method fails. Reasons include:
	 * <ul>
	 * <li> Resource changes are disallowed during certain types of resource change 
	 *       event notification. See {@link IResourceChangeEvent} for more details.</li>
	 * </ul>
	 * @exception OperationCanceledException if the operation is canceled. 
	 * Cancelation can occur even if no progress monitor is provided.
	 * @see #isLocal(int)
	 * @deprecated This API is no longer in use.  Note that this API is unrelated 
	 * to whether the resource is in the local file system versus some other file system.
	 */
	@Deprecated
	public void setLocal(boolean flag, int depth, IProgressMonitor monitor) throws CoreException;

