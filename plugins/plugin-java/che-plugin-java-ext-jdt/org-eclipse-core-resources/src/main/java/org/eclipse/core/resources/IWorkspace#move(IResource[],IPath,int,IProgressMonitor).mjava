  /**
   * Moves the given sibling resources so that they are located as members of the resource at the
   * given path; the names of the new members are the same.
   *
   * <p>This method can be expressed as a series of calls to <code>IResource.move</code>, with "best
   * effort" semantics:
   *
   * <ul>
   *   <li>Resources are moved in the order specified.
   *   <li>Duplicate resources are only moved once.
   *   <li>The <code>force</code> flag has the same meaning as it does on the corresponding
   *       single-resource method.
   *   <li>The method fails if the resources are not all siblings.
   *   <li>The method fails the path of any of the resources is a prefix of the destination path.
   *   <li>The failure of an individual move does not necessarily prevent the method from attempting
   *       to move other resources.
   *   <li>This method also fails if one or more of the individual resource moves fails; that is, if
   *       at least one of the resources in the list still exists at the end of this method.
   *   <li>History is kept for moved files. When projects are moved, no history is kept
   * </ul>
   *
   * <p>After successful completion, the resources and descendents will no longer exist; but
   * corresponding new resources will now exist as members of the resource at the given path.
   *
   * <p>The supplied path may be absolute or relative. Absolute paths fully specify the new location
   * for the resource, including its project. Relative paths are considered to be relative to the
   * container of the resources being moved. A trailing separator is ignored.
   *
   * <p>This method changes resources; these changes will be reported in a subsequent resource
   * change event that will include an indication that the resources have been removed from their
   * parent and that corresponding resources have been added to the new parent. Additional
   * information provided with resource delta shows that these additions and removals are pairwise
   * related.
   *
   * <p>This method is long-running; progress and cancellation are provided by the given progress
   * monitor.
   *
   * @param resources the resources to move
   * @param destination the destination container path
   * @param updateFlags bit-wise or of update flag constants
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @return status with code <code>OK</code> if there were no problems; otherwise a description
   *     (possibly a multi-status) consisting of low-severity warnings or informational messages.
   * @exception CoreException if the method fails to move some resources. The status contained in
   *     the exception may be a multi-status indicating where the individual failures occurred.
   *     Reasons include:
   *     <ul>
   *       <li>One of the resources does not exist.
   *       <li>The resources are not siblings.
   *       <li>One of the resources, or one of its descendents, is not local.
   *       <li>The resource corresponding to the destination path does not exist.
   *       <li>The resource corresponding to the parent destination path is a closed project.
   *       <li>A corresponding target resource does exist.
   *       <li>A resource of a different type exists at the target path.
   *       <li>The path of one of the resources is a prefix of the destination path.
   *       <li>One of the resources, or one of its descendents, is out of sync with the local file
   *           system and <code>FORCE</code> is <code>false</code>.
   *       <li>Resource changes are disallowed during certain types of resource change event
   *           notification. See <code>IResourceChangeEvent</code> for more details.
   *     </ul>
   *
   * @exception OperationCanceledException if the operation is canceled. Cancelation can occur even
   *     if no progress monitor is provided.
   * @see IResource#move(IPath,int,IProgressMonitor)
   * @see IResourceRuleFactory#moveRule(IResource, IResource)
   * @since 2.0
   */
  public IStatus move(
      IResource[] resources, IPath destination, int updateFlags, IProgressMonitor monitor)
      throws CoreException;

