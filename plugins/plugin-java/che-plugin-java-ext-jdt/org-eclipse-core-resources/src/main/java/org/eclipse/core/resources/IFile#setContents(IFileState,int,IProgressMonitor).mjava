	/**
	 * Sets the contents of this file to the bytes in the given file state.
	 * <p>
	 * The <code>FORCE</code> update flag controls how this method deals with
	 * cases where the workspace is not completely in sync with the local file 
	 * system. If <code>FORCE</code> is not specified, the method will only attempt
	 * to overwrite a corresponding file in the local file system provided
	 * it is in sync with the workspace. This option ensures there is no 
	 * unintended data loss; it is the recommended setting.
	 * However, if <code>FORCE</code> is specified, an attempt will be made
	 * to write a corresponding file in the local file system, overwriting any
	 * existing one if need be. In either case, if this method succeeds, the 
	 * resource will be marked as being local (even if it wasn't before).
	 * </p>
	 * <p>
	 * The <code>KEEP_HISTORY</code> update flag controls whether or not a copy of
	 * current contents of this file should be captured in the workspace's local
	 * history (properties are not recorded in the local history). The local history
	 * mechanism serves as a safety net to help the user recover from mistakes that
	 * might otherwise result in data loss. Specifying <code>KEEP_HISTORY</code>
	 * is recommended except in circumstances where past states of the files are of
	 * no conceivable interest to the user. Note that local history is maintained
	 * with each individual project, and gets discarded when a project is deleted
	 * from the workspace.  This flag is ignored if the file was not previously local.
	 * </p>
	 * <p>
	 * Update flags other than <code>FORCE</code> and <code>KEEP_HISTORY</code> 
	 * are ignored.
	 * </p>
	 * <p>
	 * Prior to modifying the contents of this file, the file modification validator (if provided 
	 * by the VCM plug-in), will be given a chance to perform any last minute preparations.  Validation
	 * is performed by calling <code>IFileModificationValidator.validateSave</code> on this file.
	 * If the validation fails, then this operation will fail.
	 * </p>
	 * <p>
	 * This method changes resources; these changes will be reported
	 * in a subsequent resource change event, including an indication 
	 * that this file's content have been changed.
	 * </p>
	 * <p>
	 * This method is long-running; progress and cancellation are provided
	 * by the given progress monitor. 
	 * </p>
	 *
	 * @param source a previous state of this resource
	 * @param updateFlags bit-wise or of update flag constants
	 *   (<code>FORCE</code> and <code>KEEP_HISTORY</code>)
	 * @param monitor a progress monitor, or <code>null</code> if progress
	 *    reporting is not desired
	 * @exception CoreException if this method fails. Reasons include:
	 * <ul>
	 * <li> This resource does not exist.</li>
	 * <li> The state does not exist.</li>
	 * <li> The corresponding location in the local file system
	 *       is occupied by a directory.</li>
	 * <li> The workspace is not in sync with the corresponding location
	 *       in the local file system and <code>FORCE</code> is not specified.</li>
	 * <li> Resource changes are disallowed during certain types of resource change 
	 *       event notification. See <code>IResourceChangeEvent</code> for more details.</li>
	 * <li> The file modification validator disallowed the change.</li>
	 * </ul>
	 * @exception OperationCanceledException if the operation is canceled. 
	 * Cancelation can occur even if no progress monitor is provided.
	 * @see IResourceRuleFactory#modifyRule(IResource)
	 * @since 2.0
	 */
	public void setContents(IFileState source, int updateFlags, IProgressMonitor monitor) throws CoreException;

