	/**
	 * Returns the name of a charset to be used when decoding the contents of this 
	 * file into characters. 
	 * <p>
	 * If checkImplicit is <code>false</code>, this method will return the 
	 * charset defined by calling <code>setCharset</code>, provided this file 
	 * exists, or <code>null</code> otherwise.
	 * </p><p>
	 * If checkImplicit is <code>true</code>, this method uses the following 
	 * algorithm to determine the charset to be returned:
	 * <ol>
	 * <li>the charset defined by calling #setCharset, if any, and this file 
	 * exists, or</li>
	 * <li>the charset automatically discovered based on this file's contents,
	 * if one can be determined, or</li>
	 * <li>the default encoding for this file's parent (as defined by 
	 * <code>IContainer#getDefaultCharset</code>).</li>
	 * </ol>
	 * </p><p>
	 * <b>Note 1</b>:  this method does not check whether the result is a supported
	 * charset name. Callers should be prepared to handle 
	 * <code>UnsupportedEncodingException</code> where this charset is used. 
	 * </p>
	 * <p>
	 * <b>Note 2</b>: this method returns a cached value for the encoding
	 * that may be out of date if the file is not synchronized with the local file system
	 * and the encoding has since changed in the file system.
	 * </p>
	 *  
	 * @return the name of a charset, or <code>null</code>
	 * @exception CoreException if this method fails. Reasons include:
	 * <ul>
	 * <li> This resource could not be read.</li>
	 * <li> This resource is not local.</li>
	 * <li> The corresponding location in the local file system
	 *       is occupied by a directory.</li>
	 * </ul>
	 * @see IEncodedStorage#getCharset()
	 * @see IContainer#getDefaultCharset()
	 * @since 3.0
	 */
	public String getCharset(boolean checkImplicit) throws CoreException;

