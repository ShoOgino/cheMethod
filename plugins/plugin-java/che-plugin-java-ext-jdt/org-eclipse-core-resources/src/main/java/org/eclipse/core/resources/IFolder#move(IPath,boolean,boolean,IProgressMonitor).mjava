  /**
   * Moves this resource so that it is located at the given path.
   *
   * <p>This is a convenience method, fully equivalent to:
   *
   * <pre>
   *   move(destination, (keepHistory ? KEEP_HISTORY : IResource.NONE) | (force ? FORCE : IResource.NONE), monitor);
   * </pre>
   *
   * <p>This method changes resources; these changes will be reported in a subsequent resource
   * change event, including an indication that this folder has been removed from its parent and a
   * new folder has been added to the parent of the destination.
   *
   * <p>This method is long-running; progress and cancellation are provided by the given progress
   * monitor.
   *
   * @param destination the destination path
   * @param force a flag controlling whether resources that are not in sync with the local file
   *     system will be tolerated
   * @param keepHistory a flag controlling whether files under this folder should be stored in the
   *     workspace's local history
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @exception CoreException if this resource could not be moved. Reasons include:
   *     <ul>
   *       <li>This resource does not exist.
   *       <li>This resource or one of its descendents is not local.
   *       <li>The resource corresponding to the parent destination path does not exist.
   *       <li>The resource corresponding to the parent destination path is a closed project.
   *       <li>A resource at destination path does exist.
   *       <li>A resource of a different type exists at the destination path.
   *       <li>This resource or one of its descendents is out of sync with the local file system and
   *           <code>force</code> is <code>false</code>.
   *       <li>The workspace and the local file system are out of sync at the destination resource
   *           or one of its descendents.
   *       <li>Resource changes are disallowed during certain types of resource change event
   *           notification. See <code>IResourceChangeEvent</code> for more details.
   *     </ul>
   *
   * @exception OperationCanceledException if the operation is canceled. Cancelation can occur even
   *     if no progress monitor is provided.
   * @see IResourceRuleFactory#moveRule(IResource, IResource)
   * @see IResource#move(IPath,int,IProgressMonitor)
   */
  public void move(IPath destination, boolean force, boolean keepHistory, IProgressMonitor monitor)
      throws CoreException;

