  /**
   * Closes a stream and ignores any resulting exception. This is useful when doing stream cleanup
   * in a finally block where secondary exceptions are not worth logging.
   *
   * <p><strong>WARNING:</strong> If the API contract requires notifying clients of I/O problems,
   * then you <strong>must</strong> explicitly close() output streams outside of safeClose(). Some
   * OutputStreams will defer an IOException from write() to close(). So while the writes may
   * 'succeed', ignoring the IOExcpetion will result in silent data loss.
   *
   * <p>This method should only be used as a fail-safe to ensure resources are not leaked. See also:
   * https://bugs.eclipse.org/bugs/show_bug.cgi?id=332543
   */
  public static void safeClose(Closeable stream) {
    try {
      if (stream != null) stream.close();
    } catch (IOException e) {
      //ignore
    }
  }

