  /**
   * Resolves a relative <code>IPath</code> object potentially containing a variable reference as
   * its first segment, replacing the variable reference (if any) with the variable's value (which
   * is a concrete absolute path). If the given path is absolute or has a non- <code>null</code>
   * device then no variable substitution is done and that path is returned as is. If the given path
   * is relative and has a <code>null</code> device, but the first segment does not correspond to a
   * defined variable, then the path is returned as is.
   *
   * <p>If the given path is <code>null</code> then <code>null</code> will be returned. In all other
   * cases the result will be non-<code>null</code>.
   *
   * <p>For example, consider the following collection of path variables:
   *
   * <ul>
   *   <li>TEMP = c:/temp
   *   <li>BACKUP = /tmp/backup
   * </ul>
   *
   * <p>The following paths would be resolved as:
   *
   * <p>c:/bin => c:/bin
   *
   * <p>c:TEMP => c:TEMP
   *
   * <p>/TEMP => /TEMP
   *
   * <p>TEMP => c:/temp
   *
   * <p>TEMP/foo => c:/temp/foo
   *
   * <p>BACKUP => /tmp/backup
   *
   * <p>BACKUP/bar.txt => /tmp/backup/bar.txt
   *
   * <p>SOMEPATH/foo => SOMEPATH/foo
   *
   * @param path the path to be resolved
   * @return the resolved path or <code>null</code>
   * @deprecated use resolveURI(URI) instead.
   */
  @Deprecated
  public IPath resolvePath(IPath path);

