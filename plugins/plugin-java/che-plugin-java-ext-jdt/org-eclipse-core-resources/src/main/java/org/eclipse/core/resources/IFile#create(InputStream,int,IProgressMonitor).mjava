  /**
   * Creates a new file resource as a member of this handle's parent resource. The resource's
   * contents are supplied by the data in the given stream. This method closes the stream whether it
   * succeeds or fails. If the stream is <code>null</code> then a file is not created in the local
   * file system and the created file resource is marked as being non-local.
   *
   * <p>The {@link IResource#FORCE} update flag controls how this method deals with cases where the
   * workspace is not completely in sync with the local file system. If {@link IResource#FORCE} is
   * not specified, the method will only attempt to write a file in the local file system if it does
   * not already exist. This option ensures there is no unintended data loss; it is the recommended
   * setting. However, if {@link IResource#FORCE} is specified, this method will attempt to write a
   * corresponding file in the local file system, overwriting any existing one if need be.
   *
   * <p>The {@link IResource#DERIVED} update flag indicates that this resource should immediately be
   * set as a derived resource. Specifying this flag is equivalent to atomically calling {@link
   * IResource#setDerived(boolean)} with a value of <code>true</code> immediately after creating the
   * resource.
   *
   * <p>The {@link IResource#TEAM_PRIVATE} update flag indicates that this resource should
   * immediately be set as a team private resource. Specifying this flag is equivalent to atomically
   * calling {@link IResource#setTeamPrivateMember(boolean)} with a value of <code>true</code>
   * immediately after creating the resource.
   *
   * <p>The {@link IResource#HIDDEN} update flag indicates that this resource should immediately be
   * set as a hidden resource. Specifying this flag is equivalent to atomically calling {@link
   * IResource#setHidden(boolean)} with a value of <code>true</code> immediately after creating the
   * resource.
   *
   * <p>Update flags other than those listed above are ignored.
   *
   * <p>This method changes resources; these changes will be reported in a subsequent resource
   * change event, including an indication that the file has been added to its parent.
   *
   * <p>This method is long-running; progress and cancellation are provided by the given progress
   * monitor.
   *
   * @param source an input stream containing the initial contents of the file, or <code>null</code>
   *     if the file should be marked as not local
   * @param updateFlags bit-wise or of update flag constants ({@link IResource#FORCE}, {@link
   *     IResource#DERIVED}, and {@link IResource#TEAM_PRIVATE})
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @exception CoreException if this method fails. Reasons include:
   *     <ul>
   *       <li>This resource already exists in the workspace.
   *       <li>The parent of this resource does not exist.
   *       <li>The parent of this resource is a virtual folder.
   *       <li>The project of this resource is not accessible.
   *       <li>The parent contains a resource of a different type at the same path as this resource.
   *       <li>The name of this resource is not valid (according to <code>IWorkspace.validateName
   *           </code>).
   *       <li>The corresponding location in the local file system is occupied by a directory.
   *       <li>The corresponding location in the local file system is occupied by a file and <code>
   *           FORCE</code> is not specified.
   *       <li>Resource changes are disallowed during certain types of resource change event
   *           notification. See <code>IResourceChangeEvent</code> for more details.
   *     </ul>
   *
   * @exception OperationCanceledException if the operation is canceled. Cancelation can occur even
   *     if no progress monitor is provided.
   * @see IResourceRuleFactory#createRule(IResource)
   * @since 2.0
   */
  public void create(InputStream source, int updateFlags, IProgressMonitor monitor)
      throws CoreException;

