    @Override
    public void accept(final IResourceVisitor  visitor, int depth, int memberFlags) throws CoreException {
        //use the fast visitor if visiting to infinite depth
        if (depth == IResource.DEPTH_INFINITE) {
            accept(new IResourceProxyVisitor() {
                public boolean visit(IResourceProxy proxy) throws CoreException {
                    return visitor.visit(proxy.requestResource());
                }
            }, memberFlags);
            return;
        }
        // it is invalid to call accept on a phantom when INCLUDE_PHANTOMS is not specified
        final boolean includePhantoms = (memberFlags & IContainer.INCLUDE_PHANTOMS) != 0;
        ResourceInfo info = getResourceInfo(includePhantoms, false);
        int flags = getFlags(info);
        if ((memberFlags & IContainer.DO_NOT_CHECK_EXISTENCE) == 0)
            checkAccessible(flags);

        //check that this resource matches the member flags
        if (!isMember(flags, memberFlags))
            return;
        // visit this resource
        if (!visitor.visit(this) || depth == DEPTH_ZERO)
            return;
        // get the info again because it might have been changed by the visitor
        info = getResourceInfo(includePhantoms, false);
        if (info == null)
            return;
        // thread safety: (cache the type to avoid changes -- we might not be inside an operation)
        int type = info.getType();
        if (type == FILE)
            return;
        // if we had a gender change we need to fix up the resource before asking for its members
        IContainer resource = getType() != type ? (IContainer) workspace.newResource(getFullPath(), type) : (IContainer) this;
        IResource[] members = resource.members(memberFlags);
        for (int i = 0; i < members.length; i++)
            members[i].accept(visitor, DEPTH_ZERO, memberFlags | IContainer.DO_NOT_CHECK_EXISTENCE);
    }

