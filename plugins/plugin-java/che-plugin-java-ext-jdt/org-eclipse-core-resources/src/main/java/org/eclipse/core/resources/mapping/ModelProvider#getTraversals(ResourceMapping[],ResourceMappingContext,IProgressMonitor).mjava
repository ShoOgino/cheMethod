  /**
   * Return a set of traversals that cover the given resource mappings. The provided mappings must
   * be from this provider or one of the providers this provider extends.
   *
   * <p>The default implementation accumulates the traversals from the given mappings. Subclasses
   * can override to provide a more optimal transformation.
   *
   * @param mappings the mappings being mapped to resources
   * @param context the context used to determine the set of traversals that cover the mappings
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @return a set of traversals that cover the given mappings
   * @exception CoreException
   */
  public ResourceTraversal[] getTraversals(
      ResourceMapping[] mappings, ResourceMappingContext context, IProgressMonitor monitor)
      throws CoreException {
    try {
      monitor.beginTask("", 100 * mappings.length); //$NON-NLS-1$
      List<ResourceTraversal> traversals = new ArrayList<ResourceTraversal>();
      for (int i = 0; i < mappings.length; i++) {
        ResourceMapping mapping = mappings[i];
        traversals.addAll(
            Arrays.asList(mapping.getTraversals(context, new SubProgressMonitor(monitor, 100))));
      }
      return traversals.toArray(new ResourceTraversal[traversals.size()]);
    } finally {
      monitor.done();
    }
  }

