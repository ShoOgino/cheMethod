	/**
	 * Validates the given string as a path for a resource of the given type(s).
	 * <p>
	 * In addition to the restrictions for paths in general (see
	 * <code>IPath.isValidPath</code>), a resource path should also obey the
	 * following rules:
	 * <ul>
	 * <li>a resource path should be an absolute path with no device id
	 * <li>its segments should be valid names according to
	 * <code>validateName</code>
	 * <li>a path for the workspace root must be the canonical root path
	 * <li>a path for a project should have exactly 1 segment
	 * <li>a path for a file or folder should have more than 1 segment
	 * <li>the first segment should be a valid project name
	 * <li>the second through penultimate segments should be valid folder names
	 * <li>the last segment should be a valid name of the given type
	 * </ul>
	 * </p>
	 * <p>
	 * Note: this method does not consider whether a resource at the specified
	 * path exists.
	 * </p>
	 * <p>
	 * This validation check is done automatically as a resource is created (but
	 * not when the resource handle is constructed); this means that any
	 * resource that exists can be safely assumed to have a valid name and path.
	 * </p>
	 * 
	 * @param path the path string to be checked
	 * @param typeMask bitwise-or of the resource type constants (
	 * <code>FILE</code>,<code>FOLDER</code>,<code>PROJECT</code>, or
	 * <code>ROOT</code>) indicating expected resource type(s)
	 * @return a status object with code <code>IStatus.OK</code> if the given
	 * path is valid as a resource path, otherwise a status object indicating
	 * what is wrong with the string
	 * @see IResource#PROJECT
	 * @see IResource#FOLDER
	 * @see IResource#FILE
	 * @see IStatus#OK
	 * @see IResourceStatus#getPath()
	 */
	public IStatus validatePath(String path, int typeMask);

