  /**
   * Makes a copy of this resource at the given path. The resource's descendents are copied as well.
   * The path of this resource must not be a prefix of the destination path. The workspace root may
   * not be the source or destination location of a copy operation, and a project can only be copied
   * to another project. After successful completion, corresponding new resources will exist at the
   * given path; their contents and properties will be copies of the originals. The original
   * resources are not affected.
   *
   * <p>The supplied path may be absolute or relative. Absolute paths fully specify the new location
   * for the resource, including its project. Relative paths are considered to be relative to the
   * container of the resource being copied. A trailing separator is ignored.
   *
   * <p>Calling this method with a one segment absolute destination path is equivalent to calling:
   *
   * <pre>
   *   copy(workspace.newProjectDescription(folder.getName()),updateFlags,monitor);
   * </pre>
   *
   * <p>When a resource is copied, its persistent properties are copied with it. Session properties
   * and markers are not copied.
   *
   * <p>The <code>FORCE</code> update flag controls how this method deals with cases where the
   * workspace is not completely in sync with the local file system. If <code>FORCE</code> is not
   * specified, the method will only attempt to copy resources that are in sync with the
   * corresponding files and directories in the local file system; it will fail if it encounters a
   * resource that is out of sync with the file system. However, if <code>FORCE</code> is specified,
   * the method copies all corresponding files and directories from the local file system, including
   * ones that have been recently updated or created. Note that in both settings of the <code>FORCE
   * </code> flag, the operation fails if the newly created resources in the workspace would be out
   * of sync with the local file system; this ensures files in the file system cannot be
   * accidentally overwritten.
   *
   * <p>The <code>SHALLOW</code> update flag controls how this method deals with linked resources.
   * If <code>SHALLOW</code> is not specified, then the underlying contents of the linked resource
   * will always be copied in the file system. In this case, the destination of the copy will never
   * be a linked resource or contain any linked resources. If <code>SHALLOW</code> is specified when
   * a linked resource is copied into another project, a new linked resource is created in the
   * destination project that points to the same file system location. When a project containing
   * linked resources is copied, the new project will contain the same linked resources pointing to
   * the same file system locations. For both of these shallow cases, no files on disk under the
   * linked resource are actually copied. With the <code>SHALLOW</code> flag, copying of linked
   * resources into anything other than a project is not permitted. The <code>SHALLOW</code> update
   * flag is ignored when copying non- linked resources.
   *
   * <p>The {@link #DERIVED} update flag indicates that the new resource should immediately be set
   * as a derived resource. Specifying this flag is equivalent to atomically calling {@link
   * #setDerived(boolean)} with a value of <code>true</code> immediately after creating the
   * resource.
   *
   * <p>The {@link #TEAM_PRIVATE} update flag indicates that the new resource should immediately be
   * set as a team private resource. Specifying this flag is equivalent to atomically calling {@link
   * #setTeamPrivateMember(boolean)} with a value of <code>true</code> immediately after creating
   * the resource.
   *
   * <p>The {@link #HIDDEN} update flag indicates that the new resource should immediately be set as
   * a hidden resource. Specifying this flag is equivalent to atomically calling {@link
   * #setHidden(boolean)} with a value of <code>true</code> immediately after creating the resource.
   *
   * <p>Update flags other than those listed above are ignored.
   *
   * <p>This operation changes resources; these changes will be reported in a subsequent resource
   * change event that will include an indication that the resource copy has been added to its new
   * parent.
   *
   * <p>An attempt will be made to copy the local history for this resource and its children, to the
   * destination. Since local history existence is a safety-net mechanism, failure of this action
   * will not result in automatic failure of the copy operation.
   *
   * <p>This operation is long-running; progress and cancellation are provided by the given progress
   * monitor.
   *
   * @param destination the destination path
   * @param updateFlags bit-wise or of update flag constants ({@link #FORCE}, {@link #SHALLOW},
   *     {@link #DERIVED}, {@link #TEAM_PRIVATE}, {@link #HIDDEN})
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @exception CoreException if this resource could not be copied. Reasons include:
   *     <ul>
   *       <li>This resource does not exist.
   *       <li>This resource or one of its descendents is not local.
   *       <li>The source or destination is the workspace root.
   *       <li>The source is a project but the destination is not.
   *       <li>The destination is a project but the source is not.
   *       <li>The resource corresponding to the parent destination path does not exist.
   *       <li>The resource corresponding to the parent destination path is a closed project.
   *       <li>The source is a linked resource, but the destination is not a project, and <code>
   *           SHALLOW</code> is specified.
   *       <li>A resource at destination path does exist.
   *       <li>This resource or one of its descendants is out of sync with the local file system and
   *           <code>FORCE</code> is not specified.
   *       <li>The workspace and the local file system are out of sync at the destination resource
   *           or one of its descendants.
   *       <li>The source resource is a file and the destination path specifies a project.
   *       <li>The source is a linked resource, and the destination path does not specify a project.
   *       <li>The location of the source resource on disk is the same or a prefix of the location
   *           of the destination resource on disk.
   *       <li>Resource changes are disallowed during certain types of resource change event
   *           notification. See <code>IResourceChangeEvent</code> for more details.
   *     </ul>
   *
   * @exception OperationCanceledException if the operation is canceled. Cancellation can occur even
   *     if no progress monitor is provided.
   * @see #FORCE
   * @see #SHALLOW
   * @see #DERIVED
   * @see #TEAM_PRIVATE
   * @see IResourceRuleFactory#copyRule(IResource, IResource)
   * @since 2.0
   */
  public void copy(IPath destination, int updateFlags, IProgressMonitor monitor)
      throws CoreException;

