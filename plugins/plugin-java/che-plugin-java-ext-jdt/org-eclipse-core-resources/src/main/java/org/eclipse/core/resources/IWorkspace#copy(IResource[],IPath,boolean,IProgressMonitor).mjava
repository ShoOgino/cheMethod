	/**
	 * Copies the given sibling resources so that they are located as members of
	 * the resource at the given path; the names of the copies are the same as
	 * the corresponding originals.
	 * <p>
	 * This is a convenience method, fully equivalent to:
	 * 
	 * <pre>
	 * copy(resources, destination, (force ? IResource.FORCE : IResource.NONE), monitor);
	 * </pre>
	 * 
	 * </p>
	 * <p>
	 * This method changes resources; these changes will be reported in a
	 * subsequent resource change event that will include an indication that the
	 * resources have been added to the new parent.
	 * </p>
	 * <p>
	 * This method is long-running; progress and cancellation are provided by
	 * the given progress monitor.
	 * </p>
	 * 
	 * @param resources the resources to copy
	 * @param destination the destination container path
	 * @param force a flag controlling whether resources that are not in sync
	 * with the local file system will be tolerated
	 * @param monitor a progress monitor, or <code>null</code> if progress
	 * reporting is not desired
	 * @return a status object with code <code>OK</code> if there were no
	 * problems; otherwise a description (possibly a multi-status) consisting of
	 * low-severity warnings or informational messages
	 * @exception CoreException if the method fails to copy some resources. The
	 * status contained in the exception may be a multi-status indicating where
	 * the individual failures occurred.
	 * @exception OperationCanceledException if the operation is canceled. 
	 * Cancelation can occur even if no progress monitor is provided.
	 * @see #copy(IResource[],IPath,int,IProgressMonitor)
	 */
	public IStatus copy(IResource[] resources, IPath destination, boolean force, IProgressMonitor monitor) throws CoreException;

