	/**
	 * Returns the prerequisite ordering of the given projects. The computation
	 * is done by interpreting the projects' active build configuration references
	 * as dependency relationships.
	 * For example if A references B and C, and C references B, this method,
	 * given the list A, B, C will return the order B, C, A. That is, projects
	 * with no dependencies are listed first.
	 * <p>
	 * The return value is a two element array of project arrays. The first
	 * project array is the list of projects which could be sorted (as outlined
	 * above). The second element of the return value is an array of the
	 * projects which are ambiguously ordered (e.g., they are part of a cycle).
	 * </p>
	 * <p>
	 * Cycles and ambiguities are handled by elimination. Projects involved in
	 * cycles are simply cut out of the ordered list and returned in an
	 * undefined order. Closed and non-existent projects are ignored and do not
	 * appear in the returned value at all.
	 * </p>
	 * 
	 * @param projects the projects to order
	 * @return the projects in sorted order and a list of projects which could
	 * not be ordered
	 * @deprecated Replaced by <code>IWorkspace.computeProjectOrder</code>,
	 * which produces a more usable result when there are cycles in project
	 * reference graph.
	 */
	@Deprecated
	public IProject[][] computePrerequisiteOrder(IProject[] projects);

