  /**
   * Closes this project. The project need not be open. Closing a closed project does nothing.
   *
   * <p>Closing a project involves ensuring that all important project-related state is safely
   * stored on disk, and then discarding the in-memory representation of its resources and other
   * volatile state, including session properties. After this method, the project continues to exist
   * in the workspace but its member resources (and their members, etc.) do not. A closed project
   * can later be re-opened.
   *
   * <p>This method changes resources; these changes will be reported in a subsequent resource
   * change event that includes an indication that this project has been closed and its members have
   * been removed.
   *
   * <p>This method is long-running; progress and cancellation are provided by the given progress
   * monitor.
   *
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @exception CoreException if this method fails. Reasons include:
   *     <ul>
   *       <li>This resource does not exist.
   *       <li>Resource changes are disallowed during certain types of resource change event
   *           notification. See <code>IResourceChangeEvent</code> for more details.
   *     </ul>
   *
   * @exception OperationCanceledException if the operation is canceled. Cancelation can occur even
   *     if no progress monitor is provided.
   * @see #open(IProgressMonitor)
   * @see #isOpen()
   * @see IResourceRuleFactory#modifyRule(IResource)
   */
  public void close(IProgressMonitor monitor) throws CoreException;

