  /**
   * Deletes everything in the workspace except the workspace root resource itself.
   *
   * <p>This is a convenience method, fully equivalent to:
   *
   * <pre>
   *   delete(
   *     (deleteContent ? IResource.ALWAYS_DELETE_PROJECT_CONTENT : IResource.NEVER_DELETE_PROJECT_CONTENT )
   *        | (force ? FORCE : IResource.NONE),
   *     monitor);
   * </pre>
   *
   * <p>This method changes resources; these changes will be reported in a subsequent resource
   * change event.
   *
   * <p>This method is long-running; progress and cancellation are provided by the given progress
   * monitor.
   *
   * @param deleteContent a flag controlling how whether content is aggressively deleted
   * @param force a flag controlling whether resources that are not in sync with the local file
   *     system will be tolerated
   * @param monitor a progress monitor, or <code>null</code> if progress reporting is not desired
   * @exception CoreException if this method fails. Reasons include:
   *     <ul>
   *       <li>A project could not be deleted.
   *       <li>A project's contents could not be deleted.
   *       <li>Resource changes are disallowed during certain types of resource change event
   *           notification. See <code>IResourceChangeEvent</code> for more details.
   *     </ul>
   *
   * @exception OperationCanceledException if the operation is canceled. Cancelation can occur even
   *     if no progress monitor is provided.
   * @see IResource#delete(int,IProgressMonitor)
   */
  public void delete(boolean deleteContent, boolean force, IProgressMonitor monitor)
      throws CoreException;

