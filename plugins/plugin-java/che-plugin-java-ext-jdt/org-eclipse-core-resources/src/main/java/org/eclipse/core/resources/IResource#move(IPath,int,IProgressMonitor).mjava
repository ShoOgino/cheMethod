	/**
	 * Moves this resource so that it is located at the given path.  
	 * The path of the resource must not be a prefix of the destination path. The
	 * workspace root may not be the source or destination location of a move
	 * operation, and a project can only be moved to another project. After
	 * successful completion, the resource and any direct or indirect members will
	 * no longer exist; but corresponding new resources will now exist at the given
	 * path.
	 * <p>
	 * The supplied path may be absolute or relative.  Absolute paths fully specify
	 * the new location for the resource, including its project.  Relative paths are
	 * considered to be relative to the container of the resource being moved. A
	 * trailing slash is ignored.
	 * </p>
	 * <p>
	 * Calling this method with a one segment absolute destination path is
	 * equivalent to calling:
	 * <pre>
	 IProjectDescription description = getDescription();
	 description.setName(path.lastSegment());
	 move(description, updateFlags, monitor);
	 * </pre>
	 * </p>
	 * <p> When a resource moves, its session and persistent properties move with
	 * it. Likewise for all other attributes of the resource including markers.
	 * </p>
	 * <p>
	 * The <code>FORCE</code> update flag controls how this method deals with cases
	 * where the workspace is not completely in sync with the local file system. If
	 * <code>FORCE</code> is not specified, the method will only attempt to move
	 * resources that are in sync with the corresponding files and directories in
	 * the local file system; it will fail if it encounters a resource that is out
	 * of sync with the file system. However, if <code>FORCE</code> is specified,
	 * the method moves all corresponding files and directories from the local file
	 * system, including ones that have been recently updated or created. Note that
	 * in both settings of the <code>FORCE</code> flag, the operation fails if the
	 * newly created resources in the workspace would be out of sync with the local
	 * file system; this ensures files in the file system cannot be accidentally
	 * overwritten.
	 * </p>
	 * <p>
	 * The <code>KEEP_HISTORY</code> update flag controls whether or not 
	 * file that are about to be deleted from the local file system have their
	 * current contents saved in the workspace's local history. The local history
	 * mechanism serves as a safety net to help the user recover from mistakes that
	 * might otherwise result in data loss. Specifying <code>KEEP_HISTORY</code>
	 * is recommended except in circumstances where past states of the files are of
	 * no conceivable interest to the user. Note that local history is maintained
	 * with each individual project, and gets discarded when a project is deleted
	 * from the workspace. Hence <code>KEEP_HISTORY</code> is only really applicable
	 * when moving files and folders, but not whole projects.
	 * </p>
	 * <p>
	 * If this resource is not a project, an attempt will be made to copy the local history 
	 * for this resource and its children, to the destination. Since local history existence 
	 * is a safety-net mechanism, failure of this action will not result in automatic failure 
	 * of the move operation.
	 * </p>
	 * <p>
	 * The <code>SHALLOW</code> update flag controls how this method deals with linked
	 * resources.  If <code>SHALLOW</code> is not specified, then the underlying
	 * contents of the linked resource will always be moved in the file system.  In
	 * this case, the destination of the move will never be a linked resource or
	 * contain any linked resources. If <code>SHALLOW</code> is specified when a
	 * linked resource is moved into another project, a new linked resource is
	 * created in the destination project that points to the same file system
	 * location.  When a project containing linked resources is moved, the new
	 * project will contain the same linked resources pointing to the same file
	 * system locations.  For either of these cases, no files on disk under the
	 * linked resource are actually moved. With the <code>SHALLOW</code> flag,
	 * moving of linked resources into anything other than a project is not
	 * permitted.  The <code>SHALLOW</code> update flag is ignored when moving non-
	 * linked resources.
	 * </p>
	 * <p> 
	 * Update flags other than <code>FORCE</code>, <code>KEEP_HISTORY</code>and
	 * <code>SHALLOW</code> are ignored.
	 * </p>
	 * <p>
	 * This method changes resources; these changes will be reported in a subsequent
	 * resource change event that will include an indication that the resource has
	 * been removed from its parent and that a corresponding resource has been added
	 * to its new parent. Additional information provided with resource delta shows
	 * that these additions and removals are related.
	 * </p>
	 * <p>
	 * This method is long-running; progress and cancellation are provided
	 * by the given progress monitor. 
	 * </p>
	 *
	 * @param destination the destination path 
	 * @param updateFlags bit-wise or of update flag constants
	 *   (<code>FORCE</code>, <code>KEEP_HISTORY</code> and <code>SHALLOW</code>)
	 * @param monitor a progress monitor, or <code>null</code> if progress
	 *    reporting is not desired
	 * @exception CoreException if this resource could not be moved. Reasons include:
	 * <ul>
	 * <li> This resource does not exist.</li>
	 * <li> This resource or one of its descendents is not local.</li>
	 * <li> The source or destination is the workspace root.</li>
	 * <li> The source is a project but the destination is not.</li>
	 * <li> The destination is a project but the source is not.</li>
	 * <li> The resource corresponding to the parent destination path does not exist.</li>
	 * <li> The resource corresponding to the parent destination path is a closed 
	 *      project.</li>
	 * <li> The source is a linked resource, but the destination is not a project
	 *      and  <code>SHALLOW</code> is specified.</li>
	 * <li> A resource at destination path does exist.</li>
	 * <li> A resource of a different type exists at the destination path.</li>
	 * <li> This resource or one of its descendents is out of sync with the local file system
	 *      and <code>force</code> is <code>false</code>.</li>
	 * <li> The workspace and the local file system are out of sync
	 *      at the destination resource or one of its descendents.</li>
	 * <li> The source resource is a file and the destination path specifies a project.</li>
	 * <li> The location of the source resource on disk is the same or a prefix of
	 * the location of the destination resource on disk.</li>
	 * <li> Resource changes are disallowed during certain types of resource change
	 * event notification. See <code>IResourceChangeEvent</code> for more details.</li>
	 * </ul>
	 * @exception OperationCanceledException if the operation is canceled. 
	 * Cancelation can occur even if no progress monitor is provided.
	 * @see IResourceDelta#getFlags()
	 * @see #FORCE
	 * @see #KEEP_HISTORY
	 * @see #SHALLOW
	 * @see IResourceRuleFactory#moveRule(IResource, IResource)
	 * @since  2.0
	 */
	public void move(IPath destination, int updateFlags, IProgressMonitor monitor) throws CoreException;

