  /**
   * Reads templates from an <code>InputSource</code> and adds them to the templates.
   *
   * @param source the input source
   * @param bundle a resource bundle to use for translating the read templates, or <code>null</code>
   *     if no translation should occur
   * @param singleId the template id to extract, or <code>null</code> to read in all templates
   * @return the read templates, encapsulated in instances of <code>TemplatePersistenceData</code>
   * @throws IOException if reading from the stream fails
   */
  private TemplatePersistenceData[] read(InputSource source, ResourceBundle bundle, String singleId)
      throws IOException {
    try {
      Collection templates = new ArrayList();
      Set ids = new HashSet();

      DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
      DocumentBuilder parser = factory.newDocumentBuilder();
      parser.setErrorHandler(new DefaultHandler());
      Document document = parser.parse(source);

      NodeList elements = document.getElementsByTagName(TEMPLATE_ELEMENT);

      int count = elements.getLength();
      for (int i = 0; i != count; i++) {
        Node node = elements.item(i);
        NamedNodeMap attributes = node.getAttributes();

        if (attributes == null) continue;

        String id = getStringValue(attributes, ID_ATTRIBUTE, null);
        if (id != null && ids.contains(id))
          throw new IOException(
              TemplatePersistenceMessages.getString(
                  "TemplateReaderWriter.duplicate.id")); //$NON-NLS-1$

        if (singleId != null && !singleId.equals(id)) continue;

        boolean deleted = getBooleanValue(attributes, DELETED_ATTRIBUTE, false);

        String name = getStringValue(attributes, NAME_ATTRIBUTE);
        name = translateString(name, bundle);

        String description = getStringValue(attributes, DESCRIPTION_ATTRIBUTE, ""); //$NON-NLS-1$
        description = translateString(description, bundle);

        String context = getStringValue(attributes, CONTEXT_ATTRIBUTE);

        if (name == null || context == null)
          throw new IOException(
              TemplatePersistenceMessages.getString(
                  "TemplateReaderWriter.error.missing_attribute")); //$NON-NLS-1$

        boolean enabled = getBooleanValue(attributes, ENABLED_ATTRIBUTE, true);
        boolean autoInsertable = getBooleanValue(attributes, AUTO_INSERTABLE_ATTRIBUTE, true);

        StringBuffer buffer = new StringBuffer();
        NodeList children = node.getChildNodes();
        for (int j = 0; j != children.getLength(); j++) {
          String value = children.item(j).getNodeValue();
          if (value != null) buffer.append(value);
        }
        String pattern = buffer.toString();
        pattern = translateString(pattern, bundle);

        Template template = new Template(name, description, context, pattern, autoInsertable);
        TemplatePersistenceData data = new TemplatePersistenceData(template, enabled, id);
        data.setDeleted(deleted);

        templates.add(data);

        if (singleId != null && singleId.equals(id)) break;
      }

      return (TemplatePersistenceData[])
          templates.toArray(new TemplatePersistenceData[templates.size()]);

    } catch (ParserConfigurationException e) {
      Assert.isTrue(false);
    } catch (SAXException e) {
      throw (IOException)
          new IOException("Could not read template file").initCause(e); //$NON-NLS-1$
    }

    return null; // dummy
  }

