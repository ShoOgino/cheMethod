    private String getModifiers(int flags, int typeFlags) {
        StringBuilder modifiers = new StringBuilder();
        //package private modifier has no string representation

        if (Flags.isPublic(flags)) {
            modifiers.append("public ");
        }

        if (Flags.isProtected(flags)) {
            modifiers.append("protected ");
        }

        if (Flags.isPrivate(flags)) {
            modifiers.append("private ");
        }

        if (Flags.isStatic(flags)) {
            modifiers.append("static ");
        }

        if (Flags.isAbstract(flags) && !Flags.isInterface(typeFlags)) {
            modifiers.append("abstract ");
        }

        if (Flags.isFinal(flags)) {
            modifiers.append("final ");
        }

        if (Flags.isNative(flags)) {
            modifiers.append("native ");
        }

        if (Flags.isSynchronized(flags)) {
            modifiers.append("synchronized ");
        }

        if (Flags.isVolatile(flags)) {
            modifiers.append("volatile ");
        }

        int len = modifiers.length();
        if (len == 0)
            return "";
        modifiers.setLength(len - 1);
        return modifiers.toString();
    }

