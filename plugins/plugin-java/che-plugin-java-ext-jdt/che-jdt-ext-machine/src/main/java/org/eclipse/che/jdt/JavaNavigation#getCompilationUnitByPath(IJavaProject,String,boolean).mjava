    /**
     * Get the compilation unit representation of the java file.
     *
     * @param javaProject
     *         path to the project which is contained class file
     * @param fqn
     *         fully qualified name of the class file
     * @param isShowingInheritedMembers
     *         <code>true</code> iff inherited members are shown
     * @return instance of {@link CompilationUnit}
     * @throws JavaModelException
     *         when JavaModel has a failure
     */
    public CompilationUnit getCompilationUnitByPath(IJavaProject javaProject,
                                                    String fqn,
                                                    boolean isShowingInheritedMembers) throws JavaModelException {
        IType type = javaProject.findType(fqn);
        CompilationUnit compilationUnit = DtoFactory.newDto(CompilationUnit.class);
        ITypeRoot unit;
        if (type.isBinary()) {
            unit = type.getClassFile();
            compilationUnit.setPath(((IClassFile)unit).getType().getFullyQualifiedName());
        }   else {
            unit = type.getCompilationUnit();
            compilationUnit.setProjectPath(unit.getJavaProject().getPath().toOSString());
            compilationUnit.setPath(unit.getResource().getFullPath().toOSString());
        }

        compilationUnit.setElementName(unit.getElementName());
        compilationUnit.setHandleIdentifier(unit.getHandleIdentifier());
        compilationUnit.setLabel(org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(unit,
                                                                                      org.eclipse.jdt.ui.JavaElementLabels.ALL_DEFAULT));
        List<Type> types = new ArrayList<>(1);
        Type dtoType = convertToDTOType(type);
        dtoType.setPrimary(true);
        types.add(dtoType);
        compilationUnit.setTypes(types);

        if (isShowingInheritedMembers) {
            compilationUnit.setSuperTypes(calculateSuperTypes(type));
        }

        return compilationUnit;
    }

