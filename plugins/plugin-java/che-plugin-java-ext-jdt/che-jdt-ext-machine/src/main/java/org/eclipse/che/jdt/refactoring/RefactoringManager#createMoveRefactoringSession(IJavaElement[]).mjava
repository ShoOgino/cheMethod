    /**
     * Create move refactoring session.
     *
     * @param javaElements the java elements
     * @return the ID of the refactoring session
     */
    public String createMoveRefactoringSession(IJavaElement[] javaElements) throws JavaModelException, RefactoringException {
        IReorgPolicy.IMovePolicy policy = ReorgPolicyFactory.createMovePolicy(new IResource[0], javaElements);
        if (policy.canEnable()) {
            JavaMoveProcessor processor = new JavaMoveProcessor(policy);
            //TODO this may overwrite existing sources.
            processor.setReorgQueries(new NullReorgQueries());
            processor.setCreateTargetQueries(() -> null);
            Refactoring refactoring = new MoveRefactoring(processor);
            MoveRefactoringSession session = new MoveRefactoringSession(refactoring, processor);
            String uuid = UUID.uuid();
            sessions.put(uuid, session);
            return uuid;
        } else {
            throw new RefactoringException("Can't create move refactoring session.");
        }
    }

