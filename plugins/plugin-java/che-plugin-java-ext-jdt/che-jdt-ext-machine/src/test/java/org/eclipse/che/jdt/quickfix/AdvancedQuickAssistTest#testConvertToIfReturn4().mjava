    @Test
	public void testConvertToIfReturn4() throws Exception {
		// 'if' should not be in a loop
		IPackageFragment pack1= fSourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("    public void foo1() {\n");
		buf.append("        for (int i; i < 3; i++) {\n");
		buf.append("            if (a) {\n");
		buf.append("                System.out.println(\"1\");\n");
		buf.append("        	}\n");
		buf.append("        }\n");
		buf.append("    }\n\n");
		buf.append("    public void foo2() {\n");
		buf.append("        List<String> strs= new ArrayList<String>;\n");
		buf.append("        for (String s : strs) {\n");
		buf.append("            if (b) {\n");
		buf.append("                System.out.println(\"2\");\n");
		buf.append("        	}\n");
		buf.append("        }\n");
		buf.append("    }\n\n");
		buf.append("    public void foo3() {\n");
		buf.append("        do {\n");
		buf.append("            if (c) {\n");
		buf.append("                System.out.println(\"3\");\n");
		buf.append("        	}\n");
		buf.append("        } while (true)\n");
		buf.append("    }\n\n");
		buf.append("    public void foo4() {\n");
		buf.append("        while (true) {\n");
		buf.append("            if (d) {\n");
		buf.append("                System.out.println(\"4\");\n");
		buf.append("        	}\n");
		buf.append("        }\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);

		String str= "if (a)";
		AssistContext context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		List proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 4);
		assertCorrectLabels(proposals);
		assertProposalDoesNotExist(proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);

		str= "if (b)";
		context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 3);
		assertCorrectLabels(proposals);
		assertProposalDoesNotExist(proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);

		str= "if (c)";
		context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 3);
		assertCorrectLabels(proposals);
		assertProposalDoesNotExist(proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);

		str= "if (d)";
		context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 4);
		assertCorrectLabels(proposals);
		assertProposalDoesNotExist(proposals, CorrectionMessages.AdvancedQuickAssistProcessor_convertToIfReturn);
	}

