    @Test
    public void test1() throws Exception {
        fIsPreDeltaTest = true;
        RenamePackageProcessor proc = helper2(new String[]{"r"}, new String[][]{{"A"}}, "p1");
        IJavaElementMapper jm = (IJavaElementMapper)proc.getAdapter(IJavaElementMapper.class);
        IResourceMapper rm = (IResourceMapper)proc.getAdapter(IResourceMapper.class);

        IJavaModel javaModel = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot());
        IJavaProject project = getRoot().getJavaProject();
        IFile _project = project.getProject().getFile(".project");
        checkMappingUnchanged(jm, rm, new Object[]{project, _project, getRoot(), getPackageP(),
                                                   getRoot().getPackageFragment("inexistent"), getRoot().getPackageFragment("r.inexistent"),
                                                   getRoot().getPackageFragment("p1.inexistent")});

        IPackageFragment r = getRoot().getPackageFragment("p1");
        ICompilationUnit r_A = r.getCompilationUnit("A.java");
        IType r_A_A = r_A.getType("A");
        IField r_A_A_a = r_A_A.getField("a");
        IPackageFragment p1 = getRoot().getPackageFragment("p1");
        ICompilationUnit p1_A = p1.getCompilationUnit("A.java");
        IType p1_A_A = p1_A.getType("A");
        IField p1_A_A_a = p1_A_A.getField("a");
        checkMappingChanged(jm, rm, new Object[][]{
                {r, p1},
                {r_A, p1_A},
                {r_A_A, p1_A_A},
                {r_A_A_a, p1_A_A_a},
        });
    }

