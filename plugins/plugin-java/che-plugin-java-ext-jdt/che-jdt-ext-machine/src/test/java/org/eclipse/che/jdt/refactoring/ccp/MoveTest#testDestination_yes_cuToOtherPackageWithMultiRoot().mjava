    @Test
	public void testDestination_yes_cuToOtherPackageWithMultiRoot() throws Exception {
		ParticipantTesting.reset();
		//regression test for https://bugs.eclipse.org/bugs/show_bug.cgi?id=47788
		IPackageFragment otherPackage= getRoot().createPackageFragment("otherPackage", true, new NullProgressMonitor());
		String oldA= "package p;public class A{}";
		String newA= "package otherPackage;public class A{}";
		ICompilationUnit cuA= getPackageP().createCompilationUnit("A.java", oldA, false, new NullProgressMonitor());

		IPackageFragmentRoot testSrc= JavaProjectHelper.addSourceContainer(RefactoringTestSetup.getProject(), "testSrc");

        ResourceChangedEvent event = new ResourceChangedEvent(new File(BaseTest.class.getResource("/projects").getFile()),new ProjectItemModifiedEvent(
                ProjectItemModifiedEvent.EventType.CREATED, "projects",testSrc.getJavaProject().getProject().getName(), testSrc.getResource().getFullPath().toOSString(), false));
        JavaModelManager.getJavaModelManager().deltaState.resourceChanged(event);

		IPackageFragment testP= testSrc.createPackageFragment("p", true, new NullProgressMonitor());
		String oldRef= "package p;\npublic class Ref { A t = new A(); }";
		String newRef= "package p;\n\nimport otherPackage.A;\n\npublic class Ref { A t = new A(); }";
		ICompilationUnit cuRef= testP.createCompilationUnit("Ref.java", oldRef, false, new NullProgressMonitor());
        event = new ResourceChangedEvent(new File(BaseTest.class.getResource("/projects").getFile()),new ProjectItemModifiedEvent(
                ProjectItemModifiedEvent.EventType.CREATED, "projects",cuRef.getJavaProject().getProject().getName(), cuRef.getResource().getFullPath().toOSString(), false));
        JavaModelManager.getJavaModelManager().deltaState.resourceChanged(event);
		IJavaElement[] javaElements= {cuA};
		IResource[] resources= {};
		String[] handles= ParticipantTesting.createHandles(new Object[] {cuA, cuA.getTypes()[0], cuA.getResource()});
		JavaMoveProcessor processor= verifyEnabled(resources, javaElements, createReorgQueries());

		Object destination= otherPackage;
		verifyValidDestination(processor, destination);

		assertTrue("source file does not exist before moving", cuA.exists());
		RefactoringStatus status= performRefactoring(processor, true);
		assertEquals(null, status);
		assertTrue("source file exists after moving", ! cuA.exists());
		ICompilationUnit newCu= otherPackage.getCompilationUnit(cuA.getElementName());
		assertTrue("new file does not exist after moving", newCu.exists());
		assertEqualLines("source differs", newA, newCu.getSource());
		assertEqualLines("Ref differs", newRef, cuRef.getSource());

		ParticipantTesting.testMove(
				handles,
				new MoveArguments[] {
						new MoveArguments(otherPackage, processor.getUpdateReferences()),
						new MoveArguments(otherPackage, processor.getUpdateReferences()),
						new MoveArguments(otherPackage.getResource(), processor.getUpdateReferences())});
	}

