    private void helper1(String[] newNames, String[] signature) throws Exception {
        ICompilationUnit cu = createCUfromTestFile(getPackageP(), true, true);
        IType classA = getType(cu, "A");
        IMethod method = classA.getMethod("m", signature);
        assertTrue("refactoring not available", RefactoringAvailabilityTester.isChangeSignatureAvailable(method));
        ChangeSignatureProcessor processor = new ChangeSignatureProcessor(method);
        Refactoring ref = new ProcessorBasedRefactoring(processor);
        //ref.setUpdateReferences(updateReferences);
        //ref.setNewParameterNames(newNames);
        //ref.setNewNames(createRenamings(method, newNames));
        modifyInfos(processor.getParameterInfos(), newNames);

        RefactoringStatus result = performRefactoring(ref);
        assertEquals("precondition was supposed to pass", null, result);

        IPackageFragment pack = (IPackageFragment)cu.getParent();
        String newCuName = getSimpleTestFileName(true, true);
        ICompilationUnit newcu = pack.getCompilationUnit(newCuName);
        assertTrue(newCuName + " does not exist", newcu.exists());
        assertEquals("invalid renaming", getFileContents(getTestFileName(true, false)).length(), newcu.getSource().length());
        assertEqualLines("invalid renaming", getFileContents(getTestFileName(true, false)), newcu.getSource());
    }

