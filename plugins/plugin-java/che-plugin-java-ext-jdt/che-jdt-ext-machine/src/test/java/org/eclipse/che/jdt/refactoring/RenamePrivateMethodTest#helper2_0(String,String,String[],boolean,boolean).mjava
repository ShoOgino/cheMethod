    private void helper2_0(String methodName, String newMethodName, String[] signatures, boolean updateReferences, boolean createDelegate)
            throws Exception {
        ParticipantTesting.reset();
        ICompilationUnit cu = createCUfromTestFile(getPackageP(), "A");
        IType classA = getType(cu, "A");
        IMethod method = classA.getMethod(methodName, signatures);
        String[] handles = ParticipantTesting.createHandles(method);
        RenameMethodProcessor processor = new RenameNonVirtualMethodProcessor(method);
        RenameRefactoring refactoring = new RenameRefactoring(processor);
        processor.setUpdateReferences(updateReferences);
        processor.setNewElementName(newMethodName);
        processor.setDelegateUpdating(createDelegate);
        assertEquals("was supposed to pass", null, performRefactoring(refactoring));
        assertEqualLines("invalid renaming", getFileContents(getOutputTestFileName("A")), cu.getSource());

        ParticipantTesting.testRename(
                handles,
                new RenameArguments[]{
                        new RenameArguments(newMethodName, updateReferences)});

        assertTrue("anythingToUndo", RefactoringCore.getUndoManager().anythingToUndo());
        assertTrue("! anythingToRedo", !RefactoringCore.getUndoManager().anythingToRedo());
        //assertEquals("1 to undo", 1, Refactoring.getUndoManager().getRefactoringLog().size());

        RefactoringCore.getUndoManager().performUndo(null, new NullProgressMonitor());
        assertEqualLines("invalid undo", getFileContents(getInputTestFileName("A")), cu.getSource());

        assertTrue("! anythingToUndo", !RefactoringCore.getUndoManager().anythingToUndo());
        assertTrue("anythingToRedo", RefactoringCore.getUndoManager().anythingToRedo());
        //assertEquals("1 to redo", 1, Refactoring.getUndoManager().getRedoStack().size());

        RefactoringCore.getUndoManager().performRedo(null, new NullProgressMonitor());
        assertEqualLines("invalid redo", getFileContents(getOutputTestFileName("A")), cu.getSource());
    }

