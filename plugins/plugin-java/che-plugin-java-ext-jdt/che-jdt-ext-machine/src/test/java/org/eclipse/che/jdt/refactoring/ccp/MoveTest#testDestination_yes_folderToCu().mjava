    @Test
	public void testDestination_yes_folderToCu() throws Exception{
		ParticipantTesting.reset();
		IProject superFolder= RefactoringTestSetup.getProject().getProject();
		IFolder folder= superFolder.getFolder("folder");
		folder.create(true, true, null);

		ICompilationUnit cu= getPackageP().createCompilationUnit("A.java", "package p;class A{void foo(){}class Inner{}}", false, new NullProgressMonitor());

		IJavaElement[] javaElements= {};
		IResource[] resources= {folder};
		String[] handles= ParticipantTesting.createHandles(new Object[] {folder});
		JavaMoveProcessor ref= verifyEnabled(resources, javaElements, createReorgQueries());

		Object destination= cu;
		verifyValidDestination(ref, destination);

		assertTrue("folder does not exist before", folder.exists());
		RefactoringStatus status= performRefactoring(ref, true);
		assertEquals(null, status);
		assertTrue("folder not moved", ! folder.exists());
		IPackageFragment newPackage= getRoot().getPackageFragment(getPackageP().getElementName() + "." + folder.getName());
		assertTrue("new package does not exist after", newPackage.exists());
		ParticipantTesting.testMove(
				handles,
				new MoveArguments[] {
						new MoveArguments(cu.getParent().getResource(), ref.getUpdateReferences())});
	}

