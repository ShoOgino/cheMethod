    @Test
	public void testUnimplementedMethodsWithCovariantReturn() throws Exception {
		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=272657
		IPackageFragment pack1= fSourceFolder.createPackageFragment("test", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test;\n");
		buf.append("public class Test {\n");
		buf.append("    interface Interface1 { Object getX(); }\n");
		buf.append("    interface Interface2 { Integer getX(); }\n");
		buf.append("    class Cls implements Interface1, Interface2 {\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("Test.java", buf.toString(), false, null);

		CompilationUnit astRoot= getASTRoot(cu);
		ArrayList proposals= collectCorrections(cu, astRoot);

		assertCorrectLabels(proposals);
		assertNumberOfProposals(proposals, 2);

		String[] expected= new String[2];
		buf= new StringBuffer();
		buf.append("package test;\n");
		buf.append("public class Test {\n");
		buf.append("    interface Interface1 { Object getX(); }\n");
		buf.append("    interface Interface2 { Integer getX(); }\n");
		buf.append("    class Cls implements Interface1, Interface2 {\n");
		buf.append("\n");
		buf.append("        public Integer getX() {\n");
		buf.append("            return null;\n");
		buf.append("        }\n");
		buf.append("    }\n");
		buf.append("}\n");
		expected[0]= buf.toString();

		buf= new StringBuffer();
		buf.append("package test;\n");
		buf.append("public class Test {\n");
		buf.append("    interface Interface1 { Object getX(); }\n");
		buf.append("    interface Interface2 { Integer getX(); }\n");
		buf.append("    abstract class Cls implements Interface1, Interface2 {\n");
		buf.append("    }\n");
		buf.append("}\n");
		expected[1]= buf.toString();

		assertExpectedExistInProposals(proposals, expected);
	}

