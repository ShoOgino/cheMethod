    @Test
	public void testUnusedPrivateField3() throws Exception {
		Hashtable hashtable= JavaCore.getOptions();
		hashtable.put(JavaCore.COMPILER_PB_UNUSED_PRIVATE_MEMBER, JavaCore.ERROR);
		JavaCore.setOptions(hashtable);

		IPackageFragment pack1= fSourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("    private E e= new E();\n");
		buf.append("    private int value;\n");
		buf.append("    public void foo() {\n");
		buf.append("        value= 0;\n");
		buf.append("        this.value= 0;\n");
		buf.append("        e.value= 0;\n");
		buf.append("        this.e.value= 0;\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("E.java", buf.toString(), false, null);

		CompilationUnit astRoot= getASTRoot(cu);
		ArrayList proposals= collectCorrections(cu, astRoot);
		assertNumberOfProposals(proposals, 1);
		assertCorrectLabels(proposals);

		String[] expected= new String[2];

		buf= new StringBuffer();
		buf.append("package test1;\n");
		buf.append("public class E {\n");
		buf.append("    private E e= new E();\n");
		buf.append("    public void foo() {\n");
		buf.append("    }\n");
		buf.append("}\n");
		expected[0]= buf.toString();

//		buf= new StringBuffer();
//		buf.append("package test1;\n");
//		buf.append("public class E {\n");
//		buf.append("    private E e= new E();\n");
//		buf.append("    private int value;\n");
//		buf.append("    public void foo() {\n");
//		buf.append("        setValue(0);\n");
//		buf.append("        this.setValue(0);\n");
//		buf.append("        e.setValue(0);\n");
//		buf.append("        this.e.setValue(0);\n");
//		buf.append("    }\n");
//		buf.append("    public int getValue() {\n");
//		buf.append("        return value;\n");
//		buf.append("    }\n");
//		buf.append("    public void setValue(int value) {\n");
//		buf.append("        this.value = value;\n");
//		buf.append("    }\n");
//		buf.append("}\n");
//		expected[1]= buf.toString();

		assertExpectedExistInProposals(proposals, expected);
	}

