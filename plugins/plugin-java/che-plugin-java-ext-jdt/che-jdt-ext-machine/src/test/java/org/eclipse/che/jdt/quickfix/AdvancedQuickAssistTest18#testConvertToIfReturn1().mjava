    @Test
	public void testConvertToIfReturn1() throws Exception {
		// 'if' in lambda body - positive cases
		IPackageFragment pack1 = fSourceFolder.createPackageFragment("test1", false, null);
		StringBuffer buf = new StringBuffer();
		buf.append("package test1;\n");
		buf.append("@FunctionalInterface\n");
		buf.append("interface A {\n");
		buf.append("    void run(int n);\n");
		buf.append("}\n");
		buf.append("\n");
		buf.append("@FunctionalInterface\n");
		buf.append("interface B {\n");
		buf.append("    A foo(int x);\n");
		buf.append("}\n");
		buf.append("\n");
		buf.append("public class Test {\n");
		buf.append("    A fi0 = (n1) -> {\n");
		buf.append("        if (n1 == 0) {\n");
		buf.append("            System.out.println(n1);\n");
		buf.append("            return;\n");
		buf.append("        }\n");
		buf.append("    };\n");
		buf.append("    \n");
		buf.append("    int fun1(int a, int b) {\n");
		buf.append("        A fi2 = (n2) -> {\n");
		buf.append("            if (a == b) {\n");
		buf.append("                System.out.println(n2);\n");
		buf.append("                return;\n");
		buf.append("            }\n");
		buf.append("        };\n");
		buf.append("        return a + b;\n");
		buf.append("    }\n");
		buf.append("\n");
		buf.append("    A fun2(int a1, int b1) {\n");
		buf.append("        return (n) -> {\n");
		buf.append("            if (a1 == b1) {\n");
		buf.append("                System.out.println(n);\n");
		buf.append("                return;\n");
		buf.append("            }\n");
		buf.append("        };\n");
		buf.append("    }\n");
		buf.append("\n");
		buf.append("    int fun3(int a2, int b2) {\n");
		buf.append("        B fi3 = (x) -> (n) -> {\n");
		buf.append("            if (a2 == b2) {\n");
		buf.append("                System.out.println(a2);\n");
		buf.append("                return;\n");
		buf.append("            }\n");
		buf.append("        };\n");
		buf.append("        return a2 + b2;\n");
		buf.append("    }\n");
		buf.append("}\n");
		ICompilationUnit cu= pack1.createCompilationUnit("Test.java", buf.toString(), false, null);

		String str= "if (n1 == 0)";
		AssistContext context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		List proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 4);
		assertCorrectLabels(proposals);
		StringBuffer buf1= new StringBuffer();
		buf1.append("package test1;\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface A {\n");
		buf1.append("    void run(int n);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface B {\n");
		buf1.append("    A foo(int x);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("public class Test {\n");
		buf1.append("    A fi0 = (n1) -> {\n");
		buf1.append("        if (n1 != 0)\n");
		buf1.append("            return;\n");
		buf1.append("        System.out.println(n1);\n");
		buf1.append("    };\n");
		buf1.append("    \n");
		buf1.append("    int fun1(int a, int b) {\n");
		buf1.append("        A fi2 = (n2) -> {\n");
		buf1.append("            if (a == b) {\n");
		buf1.append("                System.out.println(n2);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("        return a + b;\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    A fun2(int a1, int b1) {\n");
		buf1.append("        return (n) -> {\n");
		buf1.append("            if (a1 == b1) {\n");
		buf1.append("                System.out.println(n);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    int fun3(int a2, int b2) {\n");
		buf1.append("        B fi3 = (x) -> (n) -> {\n");
		buf1.append("            if (a2 == b2) {\n");
		buf1.append("                System.out.println(a2);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("        return a2 + b2;\n");
		buf1.append("    }\n");
		buf1.append("}\n");
		String expected1= buf1.toString();
		assertExpectedExistInProposals(proposals, new String[] { expected1 });

		str= "if (a == b)";
		context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 3);
		assertCorrectLabels(proposals);
		buf1= new StringBuffer();
		buf1.append("package test1;\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface A {\n");
		buf1.append("    void run(int n);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface B {\n");
		buf1.append("    A foo(int x);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("public class Test {\n");
		buf1.append("    A fi0 = (n1) -> {\n");
		buf1.append("        if (n1 == 0) {\n");
		buf1.append("            System.out.println(n1);\n");
		buf1.append("            return;\n");
		buf1.append("        }\n");
		buf1.append("    };\n");
		buf1.append("    \n");
		buf1.append("    int fun1(int a, int b) {\n");
		buf1.append("        A fi2 = (n2) -> {\n");
		buf1.append("            if (a != b)\n");
		buf1.append("                return;\n");
		buf1.append("            System.out.println(n2);\n");
		buf1.append("        };\n");
		buf1.append("        return a + b;\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    A fun2(int a1, int b1) {\n");
		buf1.append("        return (n) -> {\n");
		buf1.append("            if (a1 == b1) {\n");
		buf1.append("                System.out.println(n);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    int fun3(int a2, int b2) {\n");
		buf1.append("        B fi3 = (x) -> (n) -> {\n");
		buf1.append("            if (a2 == b2) {\n");
		buf1.append("                System.out.println(a2);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("        return a2 + b2;\n");
		buf1.append("    }\n");
		buf1.append("}\n");
		expected1= buf1.toString();
		assertExpectedExistInProposals(proposals, new String[] { expected1 });


		str= "if (a1 == b1)";
		context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 3);
		assertCorrectLabels(proposals);
		buf1= new StringBuffer();
		buf1.append("package test1;\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface A {\n");
		buf1.append("    void run(int n);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface B {\n");
		buf1.append("    A foo(int x);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("public class Test {\n");
		buf1.append("    A fi0 = (n1) -> {\n");
		buf1.append("        if (n1 == 0) {\n");
		buf1.append("            System.out.println(n1);\n");
		buf1.append("            return;\n");
		buf1.append("        }\n");
		buf1.append("    };\n");
		buf1.append("    \n");
		buf1.append("    int fun1(int a, int b) {\n");
		buf1.append("        A fi2 = (n2) -> {\n");
		buf1.append("            if (a == b) {\n");
		buf1.append("                System.out.println(n2);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("        return a + b;\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    A fun2(int a1, int b1) {\n");
		buf1.append("        return (n) -> {\n");
		buf1.append("            if (a1 != b1)\n");
		buf1.append("                return;\n");
		buf1.append("            System.out.println(n);\n");
		buf1.append("        };\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    int fun3(int a2, int b2) {\n");
		buf1.append("        B fi3 = (x) -> (n) -> {\n");
		buf1.append("            if (a2 == b2) {\n");
		buf1.append("                System.out.println(a2);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("        return a2 + b2;\n");
		buf1.append("    }\n");
		buf1.append("}\n");
		expected1= buf1.toString();
		assertExpectedExistInProposals(proposals, new String[] { expected1 });


		str= "if (a2 == b2)";
		context= getCorrectionContext(cu, buf.toString().indexOf(str) + str.length(), 0);
		proposals= collectAssists(context, false);
		assertNumberOfProposals(proposals, 3);
		assertCorrectLabels(proposals);
		buf1= new StringBuffer();
		buf1.append("package test1;\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface A {\n");
		buf1.append("    void run(int n);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("@FunctionalInterface\n");
		buf1.append("interface B {\n");
		buf1.append("    A foo(int x);\n");
		buf1.append("}\n");
		buf1.append("\n");
		buf1.append("public class Test {\n");
		buf1.append("    A fi0 = (n1) -> {\n");
		buf1.append("        if (n1 == 0) {\n");
		buf1.append("            System.out.println(n1);\n");
		buf1.append("            return;\n");
		buf1.append("        }\n");
		buf1.append("    };\n");
		buf1.append("    \n");
		buf1.append("    int fun1(int a, int b) {\n");
		buf1.append("        A fi2 = (n2) -> {\n");
		buf1.append("            if (a == b) {\n");
		buf1.append("                System.out.println(n2);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("        return a + b;\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    A fun2(int a1, int b1) {\n");
		buf1.append("        return (n) -> {\n");
		buf1.append("            if (a1 == b1) {\n");
		buf1.append("                System.out.println(n);\n");
		buf1.append("                return;\n");
		buf1.append("            }\n");
		buf1.append("        };\n");
		buf1.append("    }\n");
		buf1.append("\n");
		buf1.append("    int fun3(int a2, int b2) {\n");
		buf1.append("        B fi3 = (x) -> (n) -> {\n");
		buf1.append("            if (a2 != b2)\n");
		buf1.append("                return;\n");
		buf1.append("            System.out.println(a2);\n");
		buf1.append("        };\n");
		buf1.append("        return a2 + b2;\n");
		buf1.append("    }\n");
		buf1.append("}\n");
		expected1= buf1.toString();
		assertExpectedExistInProposals(proposals, new String[] { expected1 });
	}

