	/**
	 * Returns the set of setup participants for the given content types. This
	 * method considers the base content types of the given set of content
	 * types.
	 *
	 * @param contentTypes the contentTypes to be used for lookup
	 * @return the sharable set of document setup participants
	 */
	protected List getDocumentSetupParticipants(IContentType[] contentTypes) {
		List participants= doGetDocumentSetupParticipants(contentTypes);
		while (participants == null) {
			contentTypes= computeBaseContentTypes(contentTypes);
			if (contentTypes == null)
				break;
			participants= doGetDocumentSetupParticipants(contentTypes);
		}
		return participants;
	}
//
//	/**
//	 * Returns a sharable annotation model factory for the given content types.
//	 *
//	 * @param contentTypes the content types used to find the factory
//	 * @return the sharable annotation model factory or <code>null</code>
//	 */
//	private IAnnotationModelFactory doGetAnnotationModelFactory(IContentType[] contentTypes) {
//		Set set= null;
//		int i= 0;
//		while (i < contentTypes.length && set == null) {
//			set= (Set) fAnnotationModelFactoryDescriptors.get(new ContentTypeAdapter(contentTypes[i++]));
//		}
//
//		if (set != null) {
//			IConfigurationElement entry= selectConfigurationElement(set);
//			return (IAnnotationModelFactory) getExtension(entry, fAnnotationModelFactories, IAnnotationModelFactory.class);
//		}
//		return null;
//	}

