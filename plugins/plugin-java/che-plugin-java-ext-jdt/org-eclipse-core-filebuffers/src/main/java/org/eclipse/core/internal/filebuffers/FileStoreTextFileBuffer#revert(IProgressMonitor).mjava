  /*
   * @see org.eclipse.core.filebuffers.IFileBuffer#revert(org.eclipse.core.runtime.IProgressMonitor)
   */
  public void revert(IProgressMonitor monitor) throws CoreException {
    if (isDisconnected()) return;

    IDocument original = null;
    fStatus = null;

    try {
      original = fManager.createEmptyDocument(getLocationOrName(), LocationKind.LOCATION);
      cacheEncodingState();
      setDocumentContent(original, fFileStore, fEncoding, fHasBOM, monitor);
    } catch (CoreException x) {
      fStatus = x.getStatus();
    }

    if (original == null) return;

    String originalContents = original.get();
    boolean replaceContents = !originalContents.equals(fDocument.get());

    if (!replaceContents && !fCanBeSaved) return;

    fManager.fireStateChanging(this);
    try {

      if (replaceContents) {
        fManager.fireBufferContentAboutToBeReplaced(this);
        fDocument.set(original.get());
      }

      boolean fireDirtyStateChanged = fCanBeSaved;
      if (fCanBeSaved) {
        fCanBeSaved = false;
        addFileBufferContentListeners();
      }

      if (replaceContents) fManager.fireBufferContentReplaced(this);

      IFileInfo info = fFileStore.fetchInfo();
      if (info.exists()) fSynchronizationStamp = fFileStore.fetchInfo().getLastModified();

      //			if (fAnnotationModel instanceof IPersistableAnnotationModel) {
      //				IPersistableAnnotationModel persistableModel =
      // (IPersistableAnnotationModel)fAnnotationModel;
      //				try {
      //					persistableModel.revert(fDocument);
      //				} catch (CoreException x) {
      //					fStatus = x.getStatus();
      //				}
      //			}

      if (fireDirtyStateChanged) fManager.fireDirtyStateChanged(this, fCanBeSaved);

    } catch (RuntimeException x) {
      fManager.fireStateChangeFailed(this);
      throw x;
    }
  }

