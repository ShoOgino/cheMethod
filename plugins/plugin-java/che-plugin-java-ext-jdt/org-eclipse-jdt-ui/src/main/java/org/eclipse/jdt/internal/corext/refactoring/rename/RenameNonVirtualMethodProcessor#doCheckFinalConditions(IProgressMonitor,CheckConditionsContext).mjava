  @Override
  protected RefactoringStatus doCheckFinalConditions(
      IProgressMonitor pm, CheckConditionsContext checkContext) throws CoreException {
    try {
      pm.beginTask("", 3); //$NON-NLS-1$
      RefactoringStatus result = new RefactoringStatus();
      result.merge(super.doCheckFinalConditions(new SubProgressMonitor(pm, 1), checkContext));
      if (result.hasFatalError()) return result;

      final IMethod method = getMethod();
      final IType declaring = method.getDeclaringType();
      final String name = getNewElementName();
      IMethod[] hierarchyMethods =
          hierarchyDeclaresMethodName(
              new SubProgressMonitor(pm, 1),
              declaring.newTypeHierarchy(new SubProgressMonitor(pm, 1)),
              method,
              name);

      for (int i = 0; i < hierarchyMethods.length; i++) {
        IMethod hierarchyMethod = hierarchyMethods[i];
        RefactoringStatusContext context = JavaStatusContext.create(hierarchyMethod);
        if (Checks.compareParamTypes(
            method.getParameterTypes(), hierarchyMethod.getParameterTypes())) {
          String message =
              Messages.format(
                  RefactoringCoreMessages.RenamePrivateMethodRefactoring_hierarchy_defines,
                  new String[] {
                    BasicElementLabels.getJavaElementName(declaring.getFullyQualifiedName('.')),
                    BasicElementLabels.getJavaElementName(name)
                  });
          result.addError(message, context);
        } else {
          String message =
              Messages.format(
                  RefactoringCoreMessages.RenamePrivateMethodRefactoring_hierarchy_defines2,
                  new String[] {
                    BasicElementLabels.getJavaElementName(declaring.getFullyQualifiedName('.')),
                    BasicElementLabels.getJavaElementName(name)
                  });
          result.addWarning(message, context);
        }
      }
      return result;
    } finally {
      pm.done();
    }
  }

