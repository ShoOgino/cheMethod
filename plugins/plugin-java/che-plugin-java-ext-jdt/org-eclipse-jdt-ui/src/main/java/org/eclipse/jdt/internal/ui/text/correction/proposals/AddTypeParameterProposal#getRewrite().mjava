  @Override
  protected ASTRewrite getRewrite() throws CoreException {
    ASTNode boundNode = fAstRoot.findDeclaringNode(fBinding);
    ASTNode declNode = null;

    if (boundNode != null) {
      declNode = boundNode; // is same CU
      createImportRewrite(fAstRoot);
    } else {
      CompilationUnit newRoot = ASTResolving.createQuickFixAST(getCompilationUnit(), null);
      declNode = newRoot.findDeclaringNode(fBinding.getKey());
      createImportRewrite(newRoot);
    }
    AST ast = declNode.getAST();
    TypeParameter newTypeParam = ast.newTypeParameter();
    newTypeParam.setName(ast.newSimpleName(fTypeParamName));
    if (fBounds != null && fBounds.length > 0) {
      List<Type> typeBounds = newTypeParam.typeBounds();
      ImportRewriteContext importRewriteContext =
          new ContextSensitiveImportRewriteContext(declNode, getImportRewrite());
      for (int i = 0; i < fBounds.length; i++) {
        Type newBound = getImportRewrite().addImport(fBounds[i], ast, importRewriteContext);
        typeBounds.add(newBound);
      }
    }
    ASTRewrite rewrite = ASTRewrite.create(ast);
    ListRewrite listRewrite;
    Javadoc javadoc;
    List<TypeParameter> otherTypeParams;
    if (declNode instanceof TypeDeclaration) {
      TypeDeclaration declaration = (TypeDeclaration) declNode;
      listRewrite = rewrite.getListRewrite(declaration, TypeDeclaration.TYPE_PARAMETERS_PROPERTY);
      otherTypeParams = declaration.typeParameters();
      javadoc = declaration.getJavadoc();
    } else {
      MethodDeclaration declaration = (MethodDeclaration) declNode;
      listRewrite = rewrite.getListRewrite(declNode, MethodDeclaration.TYPE_PARAMETERS_PROPERTY);
      otherTypeParams = declaration.typeParameters();
      javadoc = declaration.getJavadoc();
    }
    listRewrite.insertLast(newTypeParam, null);

    if (javadoc != null && otherTypeParams != null) {
      ListRewrite tagsRewriter = rewrite.getListRewrite(javadoc, Javadoc.TAGS_PROPERTY);
      Set<String> previousNames =
          JavadocTagsSubProcessor.getPreviousTypeParamNames(otherTypeParams, null);

      String name = '<' + fTypeParamName + '>';
      TagElement newTag = ast.newTagElement();
      newTag.setTagName(TagElement.TAG_PARAM);
      TextElement text = ast.newTextElement();
      text.setText(name);
      newTag.fragments().add(text);

      JavadocTagsSubProcessor.insertTag(tagsRewriter, newTag, previousNames);
    }
    return rewrite;
  }

