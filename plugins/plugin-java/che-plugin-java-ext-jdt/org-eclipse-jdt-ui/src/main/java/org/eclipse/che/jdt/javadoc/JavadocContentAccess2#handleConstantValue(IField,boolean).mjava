    private boolean handleConstantValue(IField field, boolean link) throws JavaModelException {
        String text = null;

        ISourceRange nameRange = field.getNameRange();
        if (SourceRange.isAvailable(nameRange)) {
            CompilationUnit cuNode = ASTProvider.createAST(field.getTypeRoot(), null);
            if (cuNode != null) {
                ASTNode nameNode = NodeFinder.perform(cuNode, nameRange);
                if (nameNode instanceof SimpleName) {
                    IBinding binding = ((SimpleName)nameNode).resolveBinding();
                    if (binding instanceof IVariableBinding) {
                        IVariableBinding variableBinding = (IVariableBinding)binding;
                        Object constantValue = variableBinding.getConstantValue();
                        if (constantValue != null) {
                            if (constantValue instanceof String) {
                                text = ASTNodes.getEscapedStringLiteral((String)constantValue);
                            } else {
                                text = constantValue.toString(); // Javadoc tool is even worse for chars...
                            }
                        }
                    }
                }
            }
        }

        if (text == null) {
            Object constant = field.getConstant();
            if (constant != null) {
                text = constant.toString();
            }
        }

        if (text != null) {
            text = HTMLPrinter.convertToHTMLContentWithWhitespace(text);
            if (link) {
                String uri;
                try {
                    uri = JavaElementLinks.createURI(urlPrefix, field);
                    fBuf.append(JavaElementLinks.createLink(uri, text));
                } catch (URISyntaxException e) {
                    LOG.error(e.getMessage(), e);
                    return false;
                }
            } else {
                handleText(text);
            }
            return true;
        }
        return false;
    }

