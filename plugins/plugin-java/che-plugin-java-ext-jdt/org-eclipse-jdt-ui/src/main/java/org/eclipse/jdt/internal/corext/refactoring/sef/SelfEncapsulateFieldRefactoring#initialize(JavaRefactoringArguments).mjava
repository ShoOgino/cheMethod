  public RefactoringStatus initialize(JavaRefactoringArguments arguments) {
    final String handle = arguments.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT);
    if (handle != null) {
      final IJavaElement element =
          JavaRefactoringDescriptorUtil.handleToElement(arguments.getProject(), handle, false);
      if (element == null || !element.exists() || element.getElementType() != IJavaElement.FIELD)
        return JavaRefactoringDescriptorUtil.createInputFatalStatus(
            element, getName(), IJavaRefactorings.ENCAPSULATE_FIELD);
      else {
        fField = (IField) element;
        try {
          initialize(fField);
        } catch (JavaModelException exception) {
          return JavaRefactoringDescriptorUtil.createInputFatalStatus(
              element, getName(), IJavaRefactorings.ENCAPSULATE_FIELD);
        }
      }
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT));
    String name = arguments.getAttribute(ATTRIBUTE_GETTER);
    if (name != null && !"".equals(name)) //$NON-NLS-1$
    fGetterName = name;
    else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_GETTER));
    name = arguments.getAttribute(ATTRIBUTE_SETTER);
    if (name != null && !"".equals(name)) //$NON-NLS-1$
    fSetterName = name;
    else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_SETTER));
    final String encapsulate = arguments.getAttribute(ATTRIBUTE_DECLARING);
    if (encapsulate != null) {
      fEncapsulateDeclaringClass = Boolean.valueOf(encapsulate).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_DECLARING));
    final String matches = arguments.getAttribute(ATTRIBUTE_COMMENTS);
    if (matches != null) {
      fGenerateJavadoc = Boolean.valueOf(matches).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_COMMENTS));
    final String visibility = arguments.getAttribute(ATTRIBUTE_VISIBILITY);
    if (visibility != null && !"".equals(visibility)) { //$NON-NLS-1$
      int flag = 0;
      try {
        flag = Integer.parseInt(visibility);
      } catch (NumberFormatException exception) {
        return RefactoringStatus.createFatalErrorStatus(
            Messages.format(
                RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
                ATTRIBUTE_VISIBILITY));
      }
      fVisibility = flag;
    }
    final String insertion = arguments.getAttribute(ATTRIBUTE_INSERTION);
    if (insertion != null && !"".equals(insertion)) { //$NON-NLS-1$
      int index = 0;
      try {
        index = Integer.parseInt(insertion);
      } catch (NumberFormatException exception) {
        return RefactoringStatus.createFatalErrorStatus(
            Messages.format(
                RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
                ATTRIBUTE_INSERTION));
      }
      fInsertionIndex = index;
    }
    return new RefactoringStatus();
  }

