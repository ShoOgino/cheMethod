  public void replace(ASTRewrite rewrite, ASTNode replacement, TextEditGroup textEditGroup) {
    ASTNode groupNode = getGroupRoot();

    List<Expression> allOperands = findGroupMembersInOrderFor(getGroupRoot());
    if (allOperands.size() == fOperands.size()) {
      if (replacement instanceof Name && groupNode.getParent() instanceof ParenthesizedExpression) {
        // replace including the parenthesized expression around it
        rewrite.replace(groupNode.getParent(), replacement, textEditGroup);
      } else {
        rewrite.replace(groupNode, replacement, textEditGroup);
      }
      return;
    }

    rewrite.replace(fOperands.get(0), replacement, textEditGroup);
    int first = allOperands.indexOf(fOperands.get(0));
    int after = first + fOperands.size();
    for (int i = first + 1; i < after; i++) {
      rewrite.remove(allOperands.get(i), textEditGroup);
    }
  }

