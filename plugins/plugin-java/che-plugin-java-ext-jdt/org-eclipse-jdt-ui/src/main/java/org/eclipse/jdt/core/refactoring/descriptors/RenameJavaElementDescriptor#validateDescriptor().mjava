  /** {@inheritDoc} */
  public RefactoringStatus validateDescriptor() {
    RefactoringStatus status = super.validateDescriptor();
    if (fName == null || "".equals(fName)) //$NON-NLS-1$
    status.merge(
          RefactoringStatus.createFatalErrorStatus(
              DescriptorMessages.RenameResourceDescriptor_no_new_name));
    if (fJavaElement == null)
      status.merge(
          RefactoringStatus.createFatalErrorStatus(
              DescriptorMessages.RenameJavaElementDescriptor_no_java_element));
    else {
      final int type = fJavaElement.getElementType();
      if (type == IJavaElement.JAVA_PROJECT && getProject() != null)
        status.merge(
            RefactoringStatus.createFatalErrorStatus(
                DescriptorMessages.RenameJavaElementDescriptor_project_constraint));
      if (type == IJavaElement.PACKAGE_FRAGMENT_ROOT && fReferences)
        status.merge(
            RefactoringStatus.createFatalErrorStatus(
                DescriptorMessages.RenameJavaElementDescriptor_reference_constraint));
      if (fTextual) {
        switch (type) {
          case IJavaElement.PACKAGE_FRAGMENT:
          case IJavaElement.TYPE:
          case IJavaElement.FIELD:
            break;
          default:
            status.merge(
                RefactoringStatus.createFatalErrorStatus(
                    DescriptorMessages.RenameJavaElementDescriptor_textual_constraint));
        }
      }
      if (fDeprecate) {
        switch (type) {
          case IJavaElement.METHOD:
          case IJavaElement.FIELD:
            break;
          default:
            status.merge(
                RefactoringStatus.createFatalErrorStatus(
                    DescriptorMessages.RenameJavaElementDescriptor_deprecation_constraint));
        }
      }
      if (fDelegate) {
        switch (type) {
          case IJavaElement.METHOD:
          case IJavaElement.FIELD:
            break;
          default:
            status.merge(
                RefactoringStatus.createFatalErrorStatus(
                    DescriptorMessages.RenameJavaElementDescriptor_delegate_constraint));
        }
      }
      if (fRenameGetter || fRenameSetter) {
        if (type != IJavaElement.FIELD)
          status.merge(
              RefactoringStatus.createFatalErrorStatus(
                  DescriptorMessages.RenameJavaElementDescriptor_accessor_constraint));
      }
      if (fQualified) {
        switch (type) {
          case IJavaElement.PACKAGE_FRAGMENT:
          case IJavaElement.TYPE:
            break;
          default:
            status.merge(
                RefactoringStatus.createFatalErrorStatus(
                    DescriptorMessages.RenameJavaElementDescriptor_qualified_constraint));
        }
      }
      if (fSimilarDeclarations) {
        switch (type) {
          case IJavaElement.TYPE:
            break;
          default:
            status.merge(
                RefactoringStatus.createFatalErrorStatus(
                    DescriptorMessages.RenameJavaElementDescriptor_similar_constraint));
        }
      }
      if (fHierarchical) {
        switch (type) {
          case IJavaElement.PACKAGE_FRAGMENT:
            break;
          default:
            status.merge(
                RefactoringStatus.createFatalErrorStatus(
                    DescriptorMessages.RenameJavaElementDescriptor_hierarchical_constraint));
        }
      }
    }
    return status;
  }

