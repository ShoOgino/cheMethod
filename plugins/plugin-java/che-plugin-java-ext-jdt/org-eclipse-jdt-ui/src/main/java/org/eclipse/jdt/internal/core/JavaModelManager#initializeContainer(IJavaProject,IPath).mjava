  private IClasspathContainer initializeContainer(IJavaProject project, IPath containerPath)
      throws JavaModelException {
    ClasspathContainerInitializer initializer =
        containerInitializersCache.get(containerPath.segment(0));
    IClasspathContainer container = null;
    if (initializer != null) {
      containerPut(
          project,
          containerPath,
          CONTAINER_INITIALIZATION_IN_PROGRESS); // avoid initialization cycles
      try {
        initializer.initialize(containerPath, project);

        //            if (monitor != null)
        //                monitor.subTask(""); //$NON-NLS-1$

        // retrieve value (if initialization was successful)
        container = containerBeingInitializedGet(project, containerPath);
        if (container == null && containerGet(project, containerPath) == null) {
          // initializer failed to do its job: redirect to the failure container
          container = initializer.getFailureContainer(containerPath, project);
          //                if (container == null) {
          //                    if (CP_RESOLVE_VERBOSE || CP_RESOLVE_VERBOSE_FAILURE)
          //                        verbose_container_null_failure_container(project, containerPath, initializer);
          //                    return null; // break cycle
          //                }
          //                if (CP_RESOLVE_VERBOSE || CP_RESOLVE_VERBOSE_FAILURE)
          //                    verbose_container_using_failure_container(project, containerPath, initializer);
          containerPut(project, containerPath, container);
        }
      } catch (CoreException e) {
        if (e instanceof JavaModelException) {
          throw (JavaModelException) e;
        } else {
          throw new JavaModelException(e);
        }
      }
    } else {
      // create a dummy initializer and get the default failure container
      container =
          (new ClasspathContainerInitializer() {
                public void initialize(IPath path, IJavaProject javaProject) throws CoreException {
                  // not used
                }
              })
              .getFailureContainer(containerPath, project);
    }
    return container;
  }

