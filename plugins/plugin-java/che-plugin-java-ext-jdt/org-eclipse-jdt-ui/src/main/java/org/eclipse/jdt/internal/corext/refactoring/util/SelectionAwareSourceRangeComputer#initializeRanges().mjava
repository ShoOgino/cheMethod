	private void initializeRanges() throws CoreException {
		fRanges = new HashMap<ASTNode, SourceRange>();
		if (fSelectedNodes.length == 0)
			return;

		fRanges.put(fSelectedNodes[0], super.computeSourceRange(fSelectedNodes[0]));
		int last = fSelectedNodes.length - 1;
		fRanges.put(fSelectedNodes[last], super.computeSourceRange(fSelectedNodes[last]));

		IScanner scanner = ToolFactory.createScanner(true, false, false, false);
		char[] source = fDocumentPortionToScan.toCharArray();
		scanner.setSource(source);
		fDocumentPortionToScan = null; // initializeRanges() is only called once

		TokenScanner tokenizer= new TokenScanner(scanner);
		int pos= tokenizer.getNextStartOffset(0, false);

		ASTNode currentNode= fSelectedNodes[0];
		int newStart= Math.min(fSelectionStart + pos, currentNode.getStartPosition());
		SourceRange range= fRanges.get(currentNode);
		fRanges.put(currentNode, new SourceRange(newStart, range.getLength() + range.getStartPosition() - newStart));

		currentNode= fSelectedNodes[last];
		int scannerStart= currentNode.getStartPosition() + currentNode.getLength() - fSelectionStart;
		tokenizer.setOffset(scannerStart);
		pos= scannerStart;
		int token= -1;
		try {
			while (true) {
				token= tokenizer.readNext(false);
				pos= tokenizer.getCurrentEndOffset();
			}
		} catch (CoreException e) {
		}
		if (token == ITerminalSymbols.TokenNameCOMMENT_LINE) {
			int index= pos - 1;
			while (index >= 0 && IndentManipulation.isLineDelimiterChar(source[index])) {
				pos--;
				index--;
			}
		}

		int newEnd= Math.max(fSelectionStart + pos, currentNode.getStartPosition() + currentNode.getLength());
		range= fRanges.get(currentNode);
		fRanges.put(currentNode, new SourceRange(range.getStartPosition(), newEnd - range.getStartPosition()));
	}

