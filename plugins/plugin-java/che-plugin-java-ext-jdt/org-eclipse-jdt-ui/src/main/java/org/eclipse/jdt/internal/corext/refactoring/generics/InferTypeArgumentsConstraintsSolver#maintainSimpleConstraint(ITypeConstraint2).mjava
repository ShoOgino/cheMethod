  private void maintainSimpleConstraint(ITypeConstraint2 stc) {
    ConstraintVariable2 left = stc.getLeft();
    ConstraintVariable2 right = stc.getRight();

    TypeEquivalenceSet leftSet = left.getTypeEquivalenceSet();
    TypeEquivalenceSet rightSet = right.getTypeEquivalenceSet();
    TypeSet leftEstimate = (TypeSet) leftSet.getTypeEstimate();
    TypeSet rightEstimate = (TypeSet) rightSet.getTypeEstimate();

    if (leftEstimate.isUniverse() && rightEstimate.isUniverse()) return; // nothing to do

    if (leftEstimate.equals(rightEstimate)) return; // nothing to do

    TypeSet lhsSuperTypes = leftEstimate.superTypes();
    TypeSet rhsSubTypes = rightEstimate.subTypes();

    if (!rhsSubTypes.containsAll(leftEstimate)) {
      TypeSet xsection = leftEstimate.intersectedWith(rhsSubTypes);

      //			if (xsection.isEmpty()) // too bad, but this can happen
      //				throw new IllegalStateException("Type estimate set is now empty for LHS in " + left + " <= " + right + "; estimates were " + leftEstimate + " <= " + rightEstimate); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$

      leftSet.setTypeEstimate(xsection);
      fWorkList.addAll(Arrays.asList(leftSet.getContributingVariables()));
    }
    if (!lhsSuperTypes.containsAll(rightEstimate)) {
      TypeSet xsection = rightEstimate.intersectedWith(lhsSuperTypes);

      //			if (xsection.isEmpty())
      //				throw new IllegalStateException("Type estimate set is now empty for RHS in " + left + " <= " + right + "; estimates were " + leftEstimate + " <= " + rightEstimate); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$

      rightSet.setTypeEstimate(xsection);
      fWorkList.addAll(Arrays.asList(rightSet.getContributingVariables()));
    }
  }

