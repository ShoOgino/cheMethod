	public static RefactoringStatus checkParameterTypeSyntax(String type, IJavaProject project) {
		String newTypeName = ParameterInfo.stripEllipsis(type.trim()).trim();
		String typeLabel = BasicElementLabels.getJavaElementName(type);

		if ("".equals(newTypeName.trim())) { //$NON-NLS-1$
			String msg = Messages.format(RefactoringCoreMessages.TypeContextChecker_parameter_type, typeLabel);
			return RefactoringStatus.createFatalErrorStatus(msg);
		}

		if (ParameterInfo.isVarargs(type) && !JavaModelUtil.is50OrHigher(project)) {
			String msg = Messages.format(RefactoringCoreMessages.TypeContextChecker_no_vararg_below_50, typeLabel);
			return RefactoringStatus.createFatalErrorStatus(msg);
		}

		List<String> problemsCollector = new ArrayList<String>(0);
		Type parsedType = parseType(newTypeName, project, problemsCollector);
		boolean valid = parsedType != null;
		if (valid && parsedType instanceof PrimitiveType)
			valid = !PrimitiveType.VOID.equals(((PrimitiveType)parsedType).getPrimitiveTypeCode());
		if (!valid) {
			String msg = Messages.format(RefactoringCoreMessages.TypeContextChecker_invalid_type_name,
										 BasicElementLabels.getJavaElementName(newTypeName));
			return RefactoringStatus.createFatalErrorStatus(msg);
		}
		if (problemsCollector.size() == 0)
			return null;

		RefactoringStatus result = new RefactoringStatus();
		for (Iterator<String> iter = problemsCollector.iterator(); iter.hasNext(); ) {
			String msg = Messages.format(RefactoringCoreMessages.TypeContextChecker_invalid_type_syntax,
										 new String[]{BasicElementLabels.getJavaElementName(newTypeName),
													  BasicElementLabels.getJavaElementName(iter.next())});
			result.addError(msg);
		}
		return result;
	}

