  /**
   * Retrieves an <code>IJavaElement[]</code> attribute from map.
   *
   * @param map the map with <code>&lt;String, String&gt;</code> mapping
   * @param countAttribute the attribute that contains the number of elements. Can be <code>null
   *     </code> to indicate that no count attribute exists
   * @param arrayAttribute the attribute name where the values are stored. The index starting from
   *     offset is appended to this
   * @param offset the starting index for arrayAttribute
   * @param project the project for resolving the java element. Can be <code>null</code> for
   *     workspace
   * @param arrayClass the component type for the resulting array. The resulting array can then be
   *     safely casted to arrayClass[]
   * @return the <code>IJavaElement[]</code>
   * @throws IllegalArgumentException if any of the attribute does not exist or is not a number
   */
  public static IJavaElement[] getJavaElementArray(
      Map map,
      String countAttribute,
      String arrayAttribute,
      int offset,
      String project,
      Class arrayClass)
      throws IllegalArgumentException {
    if (countAttribute != null) {
      int count = getInt(map, countAttribute);
      IJavaElement[] result = (IJavaElement[]) Array.newInstance(arrayClass, count);
      for (int i = 0; i < count; i++) {
        result[i] = getJavaElement(map, getAttributeName(arrayAttribute, i + offset), project);
      }
      return result;
    } else {
      ArrayList result = new ArrayList();
      IJavaElement element = null;
      while ((element = getJavaElement(map, arrayAttribute, project, true)) != null) {
        result.add(element);
      }
      return (IJavaElement[])
          result.toArray((Object[]) Array.newInstance(arrayClass, result.size()));
    }
  }

