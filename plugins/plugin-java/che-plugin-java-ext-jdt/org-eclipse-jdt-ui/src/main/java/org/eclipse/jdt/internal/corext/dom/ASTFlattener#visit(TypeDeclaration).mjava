  /*
   * @see ASTVisitor#visit(TypeDeclaration)
   */
  @Override
  public boolean visit(TypeDeclaration node) {
    if (node.getJavadoc() != null) {
      node.getJavadoc().accept(this);
    }
    if (node.getAST().apiLevel() >= JLS3) {
      printModifiers(node.modifiers());
    }
    this.fBuffer.append(node.isInterface() ? "interface " : "class "); // $NON-NLS-2$//$NON-NLS-1$
    node.getName().accept(this);
    if (node.getAST().apiLevel() >= JLS3) {
      if (!node.typeParameters().isEmpty()) {
        this.fBuffer.append("<"); // $NON-NLS-1$
        for (Iterator<TypeParameter> it = node.typeParameters().iterator(); it.hasNext(); ) {
          TypeParameter t = it.next();
          t.accept(this);
          if (it.hasNext()) {
            this.fBuffer.append(","); // $NON-NLS-1$
          }
        }
        this.fBuffer.append(">"); // $NON-NLS-1$
      }
    }
    this.fBuffer.append(" "); // $NON-NLS-1$
    if (node.getAST().apiLevel() >= JLS3) {
      if (node.getSuperclassType() != null) {
        this.fBuffer.append("extends "); // $NON-NLS-1$
        node.getSuperclassType().accept(this);
        this.fBuffer.append(" "); // $NON-NLS-1$
      }
      if (!node.superInterfaceTypes().isEmpty()) {
        this.fBuffer.append(
            node.isInterface() ? "extends " : "implements "); // $NON-NLS-2$//$NON-NLS-1$
        for (Iterator<Type> it = node.superInterfaceTypes().iterator(); it.hasNext(); ) {
          Type t = it.next();
          t.accept(this);
          if (it.hasNext()) {
            this.fBuffer.append(", "); // $NON-NLS-1$
          }
        }
        this.fBuffer.append(" "); // $NON-NLS-1$
      }
    }
    this.fBuffer.append("{"); // $NON-NLS-1$
    BodyDeclaration prev = null;
    for (Iterator<BodyDeclaration> it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
      BodyDeclaration d = it.next();
      if (prev instanceof EnumConstantDeclaration) {
        // enum constant declarations do not include punctuation
        if (d instanceof EnumConstantDeclaration) {
          // enum constant declarations are separated by commas
          this.fBuffer.append(", "); // $NON-NLS-1$
        } else {
          // semicolon separates last enum constant declaration from
          // first class body declarations
          this.fBuffer.append("; "); // $NON-NLS-1$
        }
      }
      d.accept(this);
      prev = d;
    }
    this.fBuffer.append("}"); // $NON-NLS-1$
    return false;
  }

