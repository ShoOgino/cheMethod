  /**
   * Checks whether the Symbols.TokenLBRACE after <code>offset</code> probably represents the
   * beginning of a method body declaration.
   *
   * @param offset the document offset for which {@link #peekChar(int) peekChar(offset)} returns
   *     Symbols.TokenLBRACE
   * @return <code>true</code> if the left brace after <code>offset</code> looks like the beginning
   *     of a method body declaration, <code>false</code> otherwise
   * @since 3.9
   */
  private boolean looksLikeMethodDeclLBrace(int offset) {
    nextToken();
    while (true) {
      switch (fToken) {
        case Symbols.TokenTHROWS:
        case Symbols.TokenIDENT: // identifier for exception/annotation/annotation value
        case Symbols.TokenCOMMA:
        case Symbols.TokenAT:
        case Symbols.TokenLBRACKET: // for array valued return type
        case Symbols.TokenRBRACKET:
          break; // possible tokens between '{' and ')' in method declaration
        case Symbols.TokenOTHER: // dot of qualification
          try {
            if (fDocument.getChar(fPosition) != '.') {
              return false;
            }
          } catch (BadLocationException e) {
            return false;
          }
          break;
        case Symbols.TokenRPAREN: // parenthesis for annotation value / method declaration
          skipScope();
          int storedPos = fPosition;
          if (looksLikeMethodDecl()) return true;
          fPosition = storedPos;
          break;
        case Symbols.TokenEOF:
          return false;
        default:
          return false;
      }
      nextToken();
    }
  }

