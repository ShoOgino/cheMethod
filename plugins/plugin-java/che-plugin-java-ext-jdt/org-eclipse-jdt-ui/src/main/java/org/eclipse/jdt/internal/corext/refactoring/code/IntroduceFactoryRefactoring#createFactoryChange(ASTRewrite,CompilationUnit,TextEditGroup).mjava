  /**
   * Perform the AST rewriting necessary on the given <code>CompilationUnit</code> to create the
   * factory method. The method will reside on the type identified by <code>fFactoryOwningClass
   * </code>.
   *
   * @param unitRewriter the ASTRewrite to be used
   * @param unit the <code>CompilationUnit</code> where factory method will be created
   * @param gd the <code>GroupDescription</code> to associate with the changes made
   * @throws CoreException if an exception occurs while accessing its corresponding resource
   */
  private void createFactoryChange(ASTRewrite unitRewriter, CompilationUnit unit, TextEditGroup gd)
      throws CoreException {
    // ================================================================================
    // First add the factory itself (method, class, and interface as needed/directed by user)
    AST ast = unit.getAST();

    fFactoryMethod = createFactoryMethod(ast, fCtorBinding, unitRewriter);

    AbstractTypeDeclaration factoryOwner =
        (AbstractTypeDeclaration)
            unit.findDeclaringNode(fFactoryOwningClass.resolveBinding().getKey());
    fImportRewriter.addImport(fCtorOwningClass.resolveBinding());

    int idx = ASTNodes.getInsertionIndex(fFactoryMethod, factoryOwner.bodyDeclarations());

    if (idx < 0) idx = 0; // Guard against bug in getInsertionIndex()
    unitRewriter
        .getListRewrite(factoryOwner, factoryOwner.getBodyDeclarationsProperty())
        .insertAt(fFactoryMethod, idx, gd);
  }

