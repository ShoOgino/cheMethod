    private List<SimpleName> getNamesInMethod(MethodDeclaration methodDeclaration) {
      class NamesCollector extends HierarchicalASTVisitor {
        private int fTypeCounter;

        private List<SimpleName> fNames = new ArrayList<SimpleName>();

        @Override
        public boolean visit(AbstractTypeDeclaration node) {
          if (fTypeCounter++ == 0) {
            fNames.add(node.getName());
          }
          return true;
        }

        @Override
        public void endVisit(AbstractTypeDeclaration node) {
          fTypeCounter--;
        }

        @Override
        public boolean visit(AnonymousClassDeclaration node) {
          fTypeCounter++;
          return true;
        }

        @Override
        public void endVisit(AnonymousClassDeclaration node) {
          fTypeCounter--;
        }

        @Override
        public boolean visit(VariableDeclaration node) {
          if (fTypeCounter == 0) fNames.add(node.getName());
          return true;
        }
      }

      NamesCollector namesCollector = new NamesCollector();
      methodDeclaration.accept(namesCollector);
      return namesCollector.fNames;
    }

