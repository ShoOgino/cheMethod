  private static boolean needsParenthesesInInfixExpression(
      Expression expression,
      InfixExpression parentInfix,
      StructuralPropertyDescriptor locationInParent,
      ITypeBinding leftOperandType) {
    InfixExpression.Operator parentInfixOperator = parentInfix.getOperator();
    ITypeBinding rightOperandType;
    ITypeBinding parentInfixExprType;
    if (leftOperandType == null) { // parentInfix has bindings
      leftOperandType = parentInfix.getLeftOperand().resolveTypeBinding();
      rightOperandType = parentInfix.getRightOperand().resolveTypeBinding();
      parentInfixExprType = parentInfix.resolveTypeBinding();
    } else {
      rightOperandType = expression.resolveTypeBinding();
      parentInfixExprType =
          getInfixExpressionType(parentInfixOperator, leftOperandType, rightOperandType);
    }
    boolean isAllOperandsHaveSameType =
        isAllOperandsHaveSameType(parentInfix, leftOperandType, rightOperandType);

    if (locationInParent == InfixExpression.LEFT_OPERAND_PROPERTY) {
      // we have (expr op expr) op expr
      // infix expressions are evaluated from left to right -> parentheses not needed
      return false;
    } else if (isAssociative(parentInfixOperator, parentInfixExprType, isAllOperandsHaveSameType)) {
      // we have parent op (expr op expr) and op is associative
      // left op (right) == (right) op left == right op left
      if (expression instanceof InfixExpression) {
        InfixExpression infixExpression = (InfixExpression) expression;
        Operator operator = infixExpression.getOperator();

        if (isStringType(parentInfixExprType)) {
          if (parentInfixOperator == InfixExpression.Operator.PLUS
              && operator == InfixExpression.Operator.PLUS
              && isStringType(infixExpression.resolveTypeBinding())) {
            // 1 + ("" + 2) == 1 + "" + 2
            // 1 + (2 + "") != 1 + 2 + ""
            // "" + (2 + "") == "" + 2 + ""
            return !isStringType(infixExpression.getLeftOperand().resolveTypeBinding())
                && !isStringType(leftOperandType);
          }
          // "" + (1 + 2), "" + (1 - 2) etc
          return true;
        }

        if (parentInfixOperator != InfixExpression.Operator.TIMES) return false;

        if (operator == InfixExpression.Operator.TIMES)
          // x * (y * z) == x * y * z
          return false;

        if (operator == InfixExpression.Operator.REMAINDER
            || operator == InfixExpression.Operator.DIVIDE)
          // x * (y % z) != x * y % z , x * (y / z) == x * y / z rounding involved
          return true;

        return false;
      }
      return false;
    } else {
      return true;
    }
  }

