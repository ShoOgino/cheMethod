  private boolean handleValueTag(TagElement node) {

    List<? extends ASTNode> fragments = node.fragments();
    try {
      if (!(fElement instanceof IMember)) {
        return false;
      }
      if (fragments.isEmpty()) {
        if (fElement instanceof IField
            && JdtFlags.isStatic((IField) fElement)
            && JdtFlags.isFinal((IField) fElement)) {
          IField field = (IField) fElement;
          return handleConstantValue(field, false);
        }
      } else if (fragments.size() == 1) {
        Object first = fragments.get(0);
        if (first instanceof MemberRef) {
          MemberRef memberRef = (MemberRef) first;
          if (memberRef.getQualifier() == null) {
            SimpleName name = memberRef.getName();
            IType type =
                fElement instanceof IType
                    ? (IType) fElement
                    : ((IMember) fElement).getDeclaringType();
            while (type != null) {
              IField field = type.getField(name.getIdentifier());
              if (field != null && field.exists()) {
                if (JdtFlags.isStatic(field) && JdtFlags.isFinal(field))
                  return handleConstantValue(field, true);
                break;
              }
              type = type.getDeclaringType();
            }
          }
        }
      }
    } catch (JavaModelException e) {
      LOG.error(e.getMessage(), e);
    }

    return false;
  }

