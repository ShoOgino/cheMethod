		private String prepareInitializerForLocation(Expression location) throws CoreException {
			HashSet<SimpleName> staticImportsInReference = new HashSet<SimpleName>();
			final IJavaProject project = fCuRewrite.getCu().getJavaProject();
			if (fIs15)
				ImportReferencesCollector.collect(location, project, null, new ArrayList<SimpleName>(), staticImportsInReference);

			InitializerTraversal traversal =
					new InitializerTraversal(fInitializer, fStaticImportsInInitializer, location, staticImportsInReference, fCuRewrite);
			ASTRewrite initializerRewrite = traversal.getInitializerRewrite();
			IDocument document = new Document(
					fInitializerUnit.getBuffer().getContents()); // could reuse document when generating and applying undo edits

			final RangeMarker marker = new RangeMarker(fInitializer.getStartPosition(), fInitializer.getLength());
			TextEdit[] rewriteEdits =
					initializerRewrite.rewriteAST(document, fInitializerUnit.getJavaProject().getOptions(true)).removeChildren();
			marker.addChildren(rewriteEdits);
			try {
				marker.apply(document, TextEdit.UPDATE_REGIONS);
				String rewrittenInitializer = document.get(marker.getOffset(), marker.getLength());
				IRegion region = document.getLineInformation(document.getLineOfOffset(marker.getOffset()));
				int oldIndent = Strings.computeIndentUnits(document.get(region.getOffset(), region.getLength()), project);
				return Strings.changeIndent(rewrittenInitializer, oldIndent, project, "",
											TextUtilities.getDefaultLineDelimiter(document)); //$NON-NLS-1$
			} catch (MalformedTreeException e) {
				JavaPlugin.log(e);
			} catch (BadLocationException e) {
				JavaPlugin.log(e);
			}
			return fInitializerUnit.getBuffer().getText(fInitializer.getStartPosition(), fInitializer.getLength());
		}

