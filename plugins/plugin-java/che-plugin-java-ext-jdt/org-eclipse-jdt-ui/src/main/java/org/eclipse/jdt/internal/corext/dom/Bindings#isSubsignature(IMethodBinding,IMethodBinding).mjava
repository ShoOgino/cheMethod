  /**
   * @param overriding overriding method (m1)
   * @param overridden overridden method (m2)
   * @return <code>true</code> iff the method <code>m1</code> is a subsignature of the method <code>
   *     m2</code>. This is one of the requirements for m1 to override m2. Accessibility and return
   *     types are not taken into account. Note that subsignature is <em>not</em> symmetric!
   */
  public static boolean isSubsignature(IMethodBinding overriding, IMethodBinding overridden) {
    // TODO: use IMethodBinding#isSubsignature(..) once it is tested and fixed (only erasure of m1's
    // parameter types, considering type variable counts, doing type variable substitution
    if (!overriding.getName().equals(overridden.getName())) return false;

    ITypeBinding[] m1Params = overriding.getParameterTypes();
    ITypeBinding[] m2Params = overridden.getParameterTypes();
    if (m1Params.length != m2Params.length) return false;

    ITypeBinding[] m1TypeParams = overriding.getTypeParameters();
    ITypeBinding[] m2TypeParams = overridden.getTypeParameters();
    if (m1TypeParams.length != m2TypeParams.length
        && m1TypeParams.length != 0) // non-generic m1 can override a generic m2
    return false;

    // m1TypeParameters.length == (m2TypeParameters.length || 0)
    if (m2TypeParams.length != 0) {
      // Note: this branch does not 100% adhere to the spec and may report some false positives.
      // Full compliance would require major duplication of compiler code.

      // Compare type parameter bounds:
      for (int i = 0; i < m1TypeParams.length; i++) {
        // loop over m1TypeParams, which is either empty, or equally long as m2TypeParams
        Set<ITypeBinding> m1Bounds = getTypeBoundsForSubsignature(m1TypeParams[i]);
        Set<ITypeBinding> m2Bounds = getTypeBoundsForSubsignature(m2TypeParams[i]);
        if (!m1Bounds.equals(m2Bounds)) return false;
      }
      // Compare parameter types:
      if (equals(m2Params, m1Params)) return true;
      for (int i = 0; i < m1Params.length; i++) {
        ITypeBinding m1Param = m1Params[i];
        ITypeBinding m2Param = m2Params[i];
        if (containsTypeVariables(m1Param) || m1Param.isRawType())
          m1Param = m1Param.getErasure(); // try to achieve effect of "rename type variables"
        if (!(equals(m1Param, m2Param) || equals(m1Param, m2Param.getErasure()))) return false;
      }
      return true;

    } else {
      // m1TypeParams.length == m2TypeParams.length == 0
      if (equals(m1Params, m2Params)) return true;
      for (int i = 0; i < m1Params.length; i++) {
        ITypeBinding m1Param = m1Params[i];
        ITypeBinding m2Param = m2Params[i];
        if (m1Param.isRawType()) m1Param = m1Param.getTypeDeclaration();
        if (!(equals(m1Param, m2Param) || equals(m1Param, m2Param.getErasure()))) return false;
      }
      return true;
    }
  }

