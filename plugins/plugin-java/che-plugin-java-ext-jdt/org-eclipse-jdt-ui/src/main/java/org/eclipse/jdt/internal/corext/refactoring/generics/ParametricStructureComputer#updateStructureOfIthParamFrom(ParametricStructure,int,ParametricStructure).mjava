  /**
   * Updates the structure of the i'th type parameter of the given ParametricStructure to be
   * consistent with that of 'otherStructure'.
   */
  private boolean updateStructureOfIthParamFrom(
      ParametricStructure structure1, int i, ParametricStructure otherStructure) {
    if ((otherStructure == null)) // no structure info to use to update 'structure1'
    return false;

    Assert.isTrue(
        structure1 != otherStructure,
        "updateStructureOfIthParamFrom(): attempt to unify ith param of a parametric type with itself!"); //$NON-NLS-1$

    ParametricStructure param1 = structure1.getParameters()[i];
    boolean param1Unknown = (param1 == null);

    if (param1Unknown) {
      if (DEBUG_INITIALIZATION)
        System.out.println(
            "  setting param "
                + i
                + " of "
                + structure1
                + " to "
                + otherStructure); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
      structure1.getParameters()[i] = otherStructure;
      return true;
    }

    boolean paramStructured = !(param1 == ParametricStructure.NONE);
    boolean otherStructured = !(otherStructure == ParametricStructure.NONE);

    if (paramStructured && otherStructured) { // both parametric
      // rmf 12/15/2004 - handle cases where different parametric types (e.g.
      // List and Map) flow into the same place. If base types are different,
      // conservatively make the type param of structure1 unstructured.
      if (param1.getBase().equals(otherStructure.getBase()))
        return updateStructureOfType(param1, otherStructure);
      else {
        structure1.getParameters()[i] = ParametricStructure.NONE;
        return true;
      }
    }

    return false;
  }

