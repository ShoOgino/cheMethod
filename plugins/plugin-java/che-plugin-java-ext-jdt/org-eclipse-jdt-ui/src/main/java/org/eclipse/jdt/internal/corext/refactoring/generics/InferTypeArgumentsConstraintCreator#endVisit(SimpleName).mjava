	@Override
	public void endVisit(SimpleName node) {
		if (node.resolveBoxing()) {
			ImmutableTypeVariable2 boxed = fTCModel.makeImmutableTypeVariable(node.resolveTypeBinding(), node);
			setConstraintVariable(node, boxed);
			return;
		}
		IBinding binding = node.resolveBinding();
		if (binding instanceof IVariableBinding) {
			//TODO: code is similar to handling of method return value
			IVariableBinding variableBinding = (IVariableBinding)binding;
			ITypeBinding declaredVariableType = variableBinding.getVariableDeclaration().getType();
			if (declaredVariableType.isTypeVariable()) {
				Expression receiver = getSimpleNameReceiver(node);
				if (receiver != null) {
					ConstraintVariable2 receiverCv = getConstraintVariable(receiver);
					Assert.isNotNull(receiverCv); // the type variable must come from the receiver!

					ConstraintVariable2 elementCv = fTCModel.getElementVariable(receiverCv, declaredVariableType);
					// [retVal] =^= Elem[receiver]:
					setConstraintVariable(node, elementCv);
					return;
				}

			} else if (declaredVariableType.isParameterizedType()) {
				Expression receiver = getSimpleNameReceiver(node);
				if (receiver != null) {
					ConstraintVariable2 receiverCv = getConstraintVariable(receiver);
					if (receiverCv != null) {
//						ITypeBinding genericVariableType= declaredVariableType.getTypeDeclaration();
						ConstraintVariable2 returnTypeCv = fTCModel.makeParameterizedTypeVariable(declaredVariableType);
						setConstraintVariable(node, returnTypeCv);
						// Elem[retVal] =^= Elem[receiver]
						TType declaredVariableTType = fTCModel.createTType(declaredVariableType);
						fTCModel.createTypeVariablesEqualityConstraints(receiverCv,
																		Collections.<String, IndependentTypeVariable2>emptyMap(),
																		returnTypeCv, declaredVariableTType);
						return;
					}
				}

			} else {
				//TODO: array...
				//logUnexpectedNode(node, null);
			}

			// default:
			VariableVariable2 cv = fTCModel.makeVariableVariable(variableBinding);
			setConstraintVariable(node, cv);
		}
		// TODO else?
	}

