  /**
   * Helper to generate an index based <code>for</code> loop to iterate over an array.
   *
   * @param ast the current {@link AST} instance to generate the {@link ASTRewrite} for
   * @return an applicable {@link ASTRewrite} instance
   */
  private ASTRewrite generateForRewrite(AST ast) {
    ASTRewrite rewrite = ASTRewrite.create(ast);

    ForStatement loopStatement = ast.newForStatement();
    SimpleName loopVariableName =
        resolveLinkedVariableNameWithProposals(rewrite, "int", null, true); //$NON-NLS-1$
    loopStatement.initializers().add(getForInitializer(ast, loopVariableName));

    FieldAccess getArrayLengthExpression = ast.newFieldAccess();
    getArrayLengthExpression.setExpression(
        (Expression) rewrite.createCopyTarget(fCurrentExpression));
    getArrayLengthExpression.setName(ast.newSimpleName("length")); //$NON-NLS-1$

    loopStatement.setExpression(
        getLinkedInfixExpression(
            rewrite,
            loopVariableName.getIdentifier(),
            getArrayLengthExpression,
            InfixExpression.Operator.LESS));
    loopStatement
        .updaters()
        .add(getLinkedIncrementExpression(rewrite, loopVariableName.getIdentifier()));

    Block forLoopBody = ast.newBlock();
    forLoopBody
        .statements()
        .add(ast.newExpressionStatement(getForBodyAssignment(rewrite, loopVariableName)));
    forLoopBody.statements().add(createBlankLineStatementWithCursorPosition(rewrite));
    loopStatement.setBody(forLoopBody);
    rewrite.replace(fCurrentNode, loopStatement, null);

    return rewrite;
  }

