    /**
     * @param tags existing tags
     * @param tagName name of tag to add
     * @return the <code>TagElement<code> just before a new <code>TagElement</code> with name
     *         <code>tagName</code>, or <code>null</code>.
     */
    private TagElement findTagElementToInsertAfter(List<TagElement> tags, String tagName) {
      List<String> tagOrder =
          Arrays.asList(
              new String[] {
                TagElement.TAG_AUTHOR,
                TagElement.TAG_VERSION,
                TagElement.TAG_PARAM,
                TagElement.TAG_RETURN,
                TagElement.TAG_THROWS,
                TagElement.TAG_EXCEPTION,
                TagElement.TAG_SEE,
                TagElement.TAG_SINCE,
                TagElement.TAG_SERIAL,
                TagElement.TAG_SERIALFIELD,
                TagElement.TAG_SERIALDATA,
                TagElement.TAG_DEPRECATED,
                TagElement.TAG_VALUE
              });
      int goalOrdinal = tagOrder.indexOf(tagName);
      if (goalOrdinal == -1) // unknown tag -> to end
      return (tags.size() == 0) ? null : (TagElement) tags.get(tags.size());
      for (int i = 0; i < tags.size(); i++) {
        int tagOrdinal = tagOrder.indexOf(tags.get(i).getTagName());
        if (tagOrdinal >= goalOrdinal) return (i == 0) ? null : (TagElement) tags.get(i - 1);
      }
      return (tags.size() == 0) ? null : (TagElement) tags.get(tags.size() - 1);
    }

