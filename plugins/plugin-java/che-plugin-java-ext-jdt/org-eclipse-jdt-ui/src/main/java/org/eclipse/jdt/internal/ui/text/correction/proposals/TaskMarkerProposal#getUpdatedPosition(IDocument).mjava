	private Position getUpdatedPosition(IDocument document) throws BadLocationException {
		IScanner scanner = ToolFactory.createScanner(true, false, false, false);
		scanner.setSource(document.get().toCharArray());

		int token = getSurroundingComment(scanner);
		if (token == ITerminalSymbols.TokenNameEOF) {
			return null;
		}
		int commentStart = scanner.getCurrentTokenStartPosition();
		int commentEnd = scanner.getCurrentTokenEndPosition() + 1;

		int contentStart = commentStart + 2;
		int contentEnd = commentEnd;
		if (token == ITerminalSymbols.TokenNameCOMMENT_JAVADOC) {
			contentStart = commentStart + 3;
			contentEnd= commentEnd - 2;
		} else if (token == ITerminalSymbols.TokenNameCOMMENT_BLOCK) {
			contentEnd= commentEnd - 2;
		}
		if (hasContent(document, contentStart, fLocation.getOffset()) || hasContent(document, contentEnd, fLocation.getOffset() + fLocation.getLength())) {

			return new Position(fLocation.getOffset(), fLocation.getLength());
		}

		IRegion startRegion= document.getLineInformationOfOffset(commentStart);
		int start= startRegion.getOffset();
		boolean contentAtBegining= hasContent(document, start, commentStart);

		if (contentAtBegining) {
			start= commentStart;
		}

		int end;
		if (token == ITerminalSymbols.TokenNameCOMMENT_LINE) {
			if (contentAtBegining) {
				end= startRegion.getOffset() + startRegion.getLength(); // only to the end of the line
			} else {
				end= commentEnd; // includes new line
			}
		} else {
			int endLine= document.getLineOfOffset(commentEnd - 1);
			if (endLine + 1 == document.getNumberOfLines() || contentAtBegining) {
				IRegion endRegion= document.getLineInformation(endLine);
				end= endRegion.getOffset() + endRegion.getLength();
			} else {
				IRegion endRegion= document.getLineInformation(endLine + 1);
				end= endRegion.getOffset();
			}
		}
		if (hasContent(document, commentEnd, end)) {
			end= commentEnd;
			start= commentStart; // only remove comment
		}
		return new Position(start, end - start);
	}

