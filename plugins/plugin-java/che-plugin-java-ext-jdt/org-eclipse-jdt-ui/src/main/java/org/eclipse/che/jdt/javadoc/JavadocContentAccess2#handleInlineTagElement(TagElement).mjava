  private void handleInlineTagElement(TagElement node) {
    String name = node.getTagName();

    if (TagElement.TAG_VALUE.equals(name) && handleValueTag(node)) return;

    boolean isLink = TagElement.TAG_LINK.equals(name);
    boolean isLinkplain = TagElement.TAG_LINKPLAIN.equals(name);
    boolean isCode = TagElement.TAG_CODE.equals(name);
    boolean isLiteral = TagElement.TAG_LITERAL.equals(name);

    if (isLiteral || isCode) fLiteralContent++;
    if (isLink || isCode) fBuf.append("<code>"); // $NON-NLS-1$

    if (isLink || isLinkplain) handleLink(node.fragments());
    else if (isCode || isLiteral) handleContentElements(node.fragments(), true);
    else if (handleInheritDoc(node)) {
      // handled
    } else if (handleDocRoot(node)) {
      // handled
    } else {
      // print uninterpreted source {@tagname ...} for unknown tags
      int start = node.getStartPosition();
      String text = fSource.substring(start, start + node.getLength());
      fBuf.append(removeDocLineIntros(text));
    }

    if (isLink || isCode) fBuf.append("</code>"); // $NON-NLS-1$
    if (isLiteral || isCode) fLiteralContent--;
  }

