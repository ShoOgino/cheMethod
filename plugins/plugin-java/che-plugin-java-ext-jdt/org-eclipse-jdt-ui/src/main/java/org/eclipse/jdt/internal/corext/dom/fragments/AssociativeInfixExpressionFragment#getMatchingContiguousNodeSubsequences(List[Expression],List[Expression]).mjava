	/**
	 * Returns all matching subsequences of <code>toMatch</code> in <code>source</code>.
	 *
	 * @param source the source to look for matching subsequences
	 * @param toMatch the sequence to match
	 * @return returns a List of Lists of <code>Expression</code>s
	 */
	private static List<List<Expression>> getMatchingContiguousNodeSubsequences(List<Expression> source, List<Expression> toMatch) {
		//naive implementation:

		List<List<Expression>> subsequences= new ArrayList<List<Expression>>();

		for(int i= 0; i < source.size();) {
			if(matchesAt(i, source, toMatch)) {
				subsequences.add(source.subList(i, i + toMatch.size()));
				i += toMatch.size();
			} else
				i++;
		}

		return subsequences;
	}

