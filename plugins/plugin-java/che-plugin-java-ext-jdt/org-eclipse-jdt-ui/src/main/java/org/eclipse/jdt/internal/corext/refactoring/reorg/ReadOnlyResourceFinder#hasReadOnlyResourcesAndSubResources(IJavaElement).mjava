  private static boolean hasReadOnlyResourcesAndSubResources(IJavaElement javaElement)
      throws CoreException {
    switch (javaElement.getElementType()) {
      case IJavaElement.CLASS_FILE:
      case IJavaElement.COMPILATION_UNIT:
        IResource resource = ReorgUtils.getResource(javaElement);
        // if this assert fails, it means that a precondition is missing
        Assert.isTrue(resource instanceof IFile);
        return (Resources.isReadOnly(resource));
      case IJavaElement.PACKAGE_FRAGMENT:
        IResource packResource = ReorgUtils.getResource(javaElement);
        if (packResource == null) return false;
        IPackageFragment pack = (IPackageFragment) javaElement;
        if (Resources.isReadOnly(packResource)) return true;
        Object[] nonJava = pack.getNonJavaResources();
        for (int i = 0; i < nonJava.length; i++) {
          Object object = nonJava[i];
          if (object instanceof IResource
              && hasReadOnlyResourcesAndSubResources((IResource) object)) return true;
        }
        return hasReadOnlyResourcesAndSubResources(pack.getChildren());
      case IJavaElement.PACKAGE_FRAGMENT_ROOT:
        IPackageFragmentRoot root = (IPackageFragmentRoot) javaElement;
        if (root.isArchive() || root.isExternal()) return false;
        IResource pfrResource = ReorgUtils.getResource(javaElement);
        if (pfrResource == null) return false;
        if (Resources.isReadOnly(pfrResource)) return true;
        Object[] nonJava1 = root.getNonJavaResources();
        for (int i = 0; i < nonJava1.length; i++) {
          Object object = nonJava1[i];
          if (object instanceof IResource
              && hasReadOnlyResourcesAndSubResources((IResource) object)) return true;
        }
        return hasReadOnlyResourcesAndSubResources(root.getChildren());

      case IJavaElement.FIELD:
      case IJavaElement.IMPORT_CONTAINER:
      case IJavaElement.IMPORT_DECLARATION:
      case IJavaElement.INITIALIZER:
      case IJavaElement.METHOD:
      case IJavaElement.PACKAGE_DECLARATION:
      case IJavaElement.TYPE:
        return false;
      default:
        Assert.isTrue(false); // not handled here
        return false;
    }
  }

