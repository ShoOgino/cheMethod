    private List<Variable> evaluateVisibleMatches(String expectedType, IJavaElement[] suggestions) throws JavaModelException {
        IType currentType = null;
        if (fEnclosingElement != null) {
            currentType = (IType)fEnclosingElement.getAncestor(IJavaElement.TYPE);
        }

        ArrayList<Variable> res = new ArrayList<Variable>();
        for (int i = 0; i < suggestions.length; i++) {
            Variable variable = createVariable(suggestions[i], currentType, expectedType, i);
            if (variable != null) {
                if (fAlreadyMatchedNames.contains(variable.name)) {
                    variable.alreadyMatched = true;
                }
                res.add(variable);
            }
        }

        // add 'this'
        if (currentType != null && !(fEnclosingElement instanceof IMethod && Flags.isStatic(((IMethod)fEnclosingElement).getFlags()))) {
            String fullyQualifiedName = currentType.getFullyQualifiedName('.');
            if (fullyQualifiedName.equals(expectedType)) {
                ImageDescriptor desc = new JavaElementImageDescriptor(JavaPluginImages.DESC_FIELD_PUBLIC,
                                                                      JavaElementImageDescriptor.FINAL | JavaElementImageDescriptor.STATIC
                                                                     /* JavaElementImageProvider.SMALL_SIZE*/);
                res.add(new Variable(fullyQualifiedName, "this", Variable.LITERALS, false, res.size(), new char[]{'.'},
                                     desc));  //$NON-NLS-1$
            }
        }

        Code primitiveTypeCode = getPrimitiveTypeCode(expectedType);
        if (primitiveTypeCode == null) {
            // add 'null'
            res.add(new Variable(expectedType, "null", Variable.LITERALS, false, res.size(), NO_TRIGGERS, null));  //$NON-NLS-1$
        } else {
            String typeName = primitiveTypeCode.toString();
            boolean isAutoboxing = !typeName.equals(expectedType);
            if (primitiveTypeCode == PrimitiveType.BOOLEAN) {
                // add 'true', 'false'
                res.add(new Variable(typeName, "true", Variable.LITERALS, isAutoboxing, res.size(), NO_TRIGGERS, null)); //$NON-NLS-1$
                res.add(new Variable(typeName, "false", Variable.LITERALS, isAutoboxing, res.size(), NO_TRIGGERS, null)); //$NON-NLS-1$
            } else {
                // add 0
                res.add(new Variable(typeName, "0", Variable.LITERALS, isAutoboxing, res.size(), NO_TRIGGERS, null));   //$NON-NLS-1$
            }
        }
        return res;
    }

