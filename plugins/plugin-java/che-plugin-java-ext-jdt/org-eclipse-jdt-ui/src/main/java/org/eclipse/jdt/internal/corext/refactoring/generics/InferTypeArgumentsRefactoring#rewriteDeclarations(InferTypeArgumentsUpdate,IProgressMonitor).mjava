	private void rewriteDeclarations(InferTypeArgumentsUpdate update, IProgressMonitor pm) throws CoreException {
		HashMap<ICompilationUnit, CuUpdate> updates= update.getUpdates();

		Set<Entry<ICompilationUnit, CuUpdate>> entrySet= updates.entrySet();
		pm.beginTask("", entrySet.size()); //$NON-NLS-1$
		pm.setTaskName(RefactoringCoreMessages.InferTypeArgumentsRefactoring_creatingChanges);
		for (Iterator<Entry<ICompilationUnit, CuUpdate>> iter= entrySet.iterator(); iter.hasNext();) {
			if (pm.isCanceled())
				throw new OperationCanceledException();

			Entry<ICompilationUnit, CuUpdate> entry= iter.next();
			ICompilationUnit cu= entry.getKey();
			pm.worked(1);
			pm.subTask(BasicElementLabels.getFileName(cu));

			CompilationUnitRewrite rewrite= new CompilationUnitRewrite(cu);
			rewrite.setResolveBindings(false);
			CuUpdate cuUpdate= entry.getValue();

			for (Iterator<CollectionElementVariable2> cvIter= cuUpdate.getDeclarations().iterator(); cvIter.hasNext();) {
				ConstraintVariable2 cv= cvIter.next();
				rewriteConstraintVariable(cv, rewrite, fTCModel, fLeaveUnconstrainedRaw, null);
			}

			for (Iterator<CastVariable2> castsIter= cuUpdate.getCastsToRemove().iterator(); castsIter.hasNext();) {
				CastVariable2 castCv= castsIter.next();
				rewriteCastVariable(castCv, rewrite, fTCModel);
			}

			CompilationUnitChange change= rewrite.createChange(true);
			if (change != null) {
				fChangeManager.manage(cu, change);
			}
		}

	}

