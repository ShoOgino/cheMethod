  public static IMovePolicy createMovePolicy(
      RefactoringStatus status, JavaRefactoringArguments arguments) {
    final String policy = arguments.getAttribute(ATTRIBUTE_POLICY);
    if (policy != null && !"".equals(policy)) { // $NON-NLS-1$
      if (MoveFilesFoldersAndCusPolicy.POLICY_MOVE_RESOURCES.equals(policy)) {
        return new MoveFilesFoldersAndCusPolicy(null, null, null);
      } else if (MovePackageFragmentRootsPolicy.POLICY_MOVE_ROOTS.equals(policy)) {
        return new MovePackageFragmentRootsPolicy(null);
      } else if (MovePackagesPolicy.POLICY_MOVE_PACKAGES.equals(policy)) {
        return new MovePackagesPolicy(null);
      } else if (MoveMembersPolicy.POLICY_MOVE_MEMBERS.equals(policy)) {
        return new MoveMembersPolicy(null);
      } else if (MoveImportDeclarationsPolicy.POLICY_MOVE_IMPORT_DECLARATIONS.equals(policy)) {
        return new MoveImportDeclarationsPolicy(null);
      } else
        status.merge(
            RefactoringStatus.createFatalErrorStatus(
                Messages.format(
                    RefactoringCoreMessages.InitializableRefactoring_illegal_argument,
                    new String[] {policy, ATTRIBUTE_POLICY})));
    } else
      status.merge(
          RefactoringStatus.createFatalErrorStatus(
              Messages.format(
                  RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
                  ATTRIBUTE_POLICY)));
    return null;
  }

