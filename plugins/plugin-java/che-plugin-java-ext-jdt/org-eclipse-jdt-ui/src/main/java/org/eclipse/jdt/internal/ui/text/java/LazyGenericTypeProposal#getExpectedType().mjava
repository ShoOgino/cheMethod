  /**
   * Returns the type binding of the expected type as it is contained in the code completion
   * context.
   *
   * @return the binding of the expected type
   */
  private ITypeBinding getExpectedType() {
    char[][] chKeys = fInvocationContext.getCoreContext().getExpectedTypesKeys();
    if (chKeys == null || chKeys.length == 0) return null;

    String[] keys = new String[chKeys.length];
    for (int i = 0; i < keys.length; i++) {
      keys[i] = String.valueOf(chKeys[0]);
    }

    final CheASTParser parser = CheASTParser.newParser(ASTProvider.SHARED_AST_LEVEL);
    parser.setProject(fCompilationUnit.getJavaProject());
    parser.setResolveBindings(true);
    parser.setStatementsRecovery(true);

    final Map<String, IBinding> bindings = new HashMap<String, IBinding>();
    ASTRequestor requestor =
        new ASTRequestor() {
          @Override
          public void acceptBinding(String bindingKey, IBinding binding) {
            bindings.put(bindingKey, binding);
          }
        };
    parser.createASTs(new ICompilationUnit[0], keys, requestor, null);

    if (bindings.size() > 0) return (ITypeBinding) bindings.get(keys[0]);

    return null;
  }

