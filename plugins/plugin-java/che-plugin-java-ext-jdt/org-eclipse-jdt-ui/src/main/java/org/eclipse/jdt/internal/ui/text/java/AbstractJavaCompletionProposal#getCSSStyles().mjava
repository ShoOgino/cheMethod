	/**
	 * Returns the style information for displaying HTML (Javadoc) content.
	 *
	 * @return the CSS styles
	 * @since 3.3
	 */
	protected String getCSSStyles() {
//		if (fgCSSStyles == null) {
//			Bundle bundle= Platform.getBundle(JavaPlugin.getPluginId());
//			URL url= bundle.getEntry("/JavadocHoverStyleSheet.css"); //$NON-NLS-1$
//			if (url != null) {
//				BufferedReader reader= null;
//				try {
//					url= FileLocator.toFileURL(url);
//					reader= new BufferedReader(new InputStreamReader(url.openStream()));
//					StringBuffer buffer= new StringBuffer(200);
//					String line= reader.readLine();
//					while (line != null) {
//						buffer.append(line);
//						buffer.append('\n');
//						line= reader.readLine();
//					}
//					fgCSSStyles= buffer.toString();
//				} catch (IOException ex) {
//					JavaPlugin.log(ex);
//				} finally {
//					try {
//						if (reader != null)
//							reader.close();
//					} catch (IOException e) {
//					}
//				}
//
//			}
//		}
//		String css= fgCSSStyles;
//		if (css != null) {
//			FontData fontData= JFaceResources.getFontRegistry().getFontData(PreferenceConstants.APPEARANCE_JAVADOC_FONT)[0];
//			css= HTMLPrinter.convertTopLevelFont(css, fontData);
//		}
//		return css;
        if(fgCSSStyles == null){
            try(InputStream stream = AbstractJavaCompletionProposal.class.getClassLoader().getResource("JavadocHoverStyleSheet.css").openStream()) {
                fgCSSStyles = IoUtil.readStream(stream);
            } catch (IOException e) {
                JavaPlugin.log(e);
            }
        }
        return fgCSSStyles;
	}

