  /**
   * Returns the comment for a method or constructor using the comment code templates (constructor /
   * method / overriding method). <code>null</code> is returned if the template is empty.
   *
   * @param cu The compilation unit to which the method belongs. The compilation unit does not need
   *     to exist.
   * @param declaringTypeName Name of the type to which the method belongs. For inner types the name
   *     must be qualified and include the outer types names (dot separated). See {@link
   *     org.eclipse.jdt.core.IType#getTypeQualifiedName(char)}.
   * @param decl The MethodDeclaration AST node that will be added as new method. The node does not
   *     need to exist in an AST (no parent needed) and does not need to resolve. See {@link
   *     org.eclipse.jdt.core.dom.AST#newMethodDeclaration()} for how to create such a node.
   * @param overridden The binding of the method to which to add an "@see" link or <code>null</code>
   *     if no link should be created.
   * @param lineDelimiter The line delimiter to be used.
   * @return Returns the generated method comment or <code>null</code> if the code template is
   *     empty. The returned content is unformatted and not indented (formatting required).
   * @throws CoreException Thrown when the evaluation of the code template fails.
   */
  public static String getMethodComment(
      ICompilationUnit cu,
      String declaringTypeName,
      MethodDeclaration decl,
      IMethodBinding overridden,
      String lineDelimiter)
      throws CoreException {
    if (overridden != null) {
      overridden = overridden.getMethodDeclaration();
      String declaringClassQualifiedName = overridden.getDeclaringClass().getQualifiedName();
      String linkToMethodName = overridden.getName();
      String[] parameterTypesQualifiedNames =
          StubUtility.getParameterTypeNamesForSeeTag(overridden);
      return StubUtility.getMethodComment(
          cu,
          declaringTypeName,
          decl,
          overridden.isDeprecated(),
          linkToMethodName,
          declaringClassQualifiedName,
          parameterTypesQualifiedNames,
          false,
          lineDelimiter);
    } else {
      return StubUtility.getMethodComment(
          cu, declaringTypeName, decl, false, null, null, null, false, lineDelimiter);
    }
  }

