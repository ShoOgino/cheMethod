  private void check(
      RefactoringStatus result, Selection selection, IScanner scanner, int start, int end) {
    char[] characters = scanner.getSource();
    selection = adjustSelection(characters, selection, end);
    scanner.resetTo(start, end);

    int token = 0;
    try {
      loop:
      while (token != ITerminalSymbols.TokenNameEOF) {
        token = scanner.getNextToken();
        switch (token) {
          case ITerminalSymbols.TokenNameCOMMENT_LINE:
          case ITerminalSymbols.TokenNameCOMMENT_BLOCK:
          case ITerminalSymbols.TokenNameCOMMENT_JAVADOC:
            if (checkStart(scanner, selection.getOffset())) {
              result.addFatalError(RefactoringCoreMessages.CommentAnalyzer_starts_inside_comment);
              break loop;
            }
            if (checkEnd(scanner, selection.getInclusiveEnd())) {
              result.addFatalError(RefactoringCoreMessages.CommentAnalyzer_ends_inside_comment);
              break loop;
            }
            break;
        }
      }
    } catch (InvalidInputException e) {
      result.addFatalError(RefactoringCoreMessages.CommentAnalyzer_internal_error);
    }
  }

