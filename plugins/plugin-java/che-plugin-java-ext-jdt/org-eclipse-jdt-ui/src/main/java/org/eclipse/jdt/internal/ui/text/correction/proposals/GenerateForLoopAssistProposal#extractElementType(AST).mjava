	/**
	 * Extracts the type parameter of the variable contained in fCurrentExpression or the elements
	 * type to iterate over an array using <code>foreach</code>.
	 * 
	 * @param ast the current {@link AST} instance
	 * @return the {@link ITypeBinding} of the elements to iterate over
	 */
	private ITypeBinding extractElementType(AST ast) {
		if (fExpressionType.isArray()) {
			return Bindings.normalizeForDeclarationUse(fExpressionType.getElementType(), ast);
		}

		// extract elements type directly out of the bindings
		IMethodBinding iteratorMethodBinding= Bindings.findMethodInHierarchy(fExpressionType, "iterator", new ITypeBinding[]{}); //$NON-NLS-1$
		IMethodBinding iteratorNextMethodBinding= Bindings
				.findMethodInHierarchy(iteratorMethodBinding.getReturnType(), "next", new ITypeBinding[]{}); //$NON-NLS-1$

		ITypeBinding currentElementBinding= iteratorNextMethodBinding.getReturnType();

		return Bindings.normalizeForDeclarationUse(currentElementBinding, ast);
	}

