  /*
   * (non-Javadoc)
   *
   * @see org.eclipse.jdt.internal.corext.refactoring.typeconstraints.ITypeConstraintFactory#createCompositeOrTypeConstraint(org.eclipse.jdt.internal.corext.refactoring.typeconstraints.ITypeConstraint[])
   */
  public CompositeOrTypeConstraint createCompositeOrTypeConstraint(ITypeConstraint[] constraints) {
    ConstraintVariable left = ((SimpleTypeConstraint) constraints[0]).getLeft();
    String bounds = ""; //$NON-NLS-1$
    for (int i = 0; i < constraints.length; i++) {
      ConstraintVariable right = ((SimpleTypeConstraint) constraints[i]).getRight();
      ITypeBinding binding = right.getBinding();
      String typeName = binding.getQualifiedName();
      bounds = bounds + typeName + ","; //$NON-NLS-1$
    }

    if (fOrConstraints.containsKey(left)) {
      Map<String, CompositeOrTypeConstraint> m2 = fOrConstraints.get(left);
      if (m2.containsKey(bounds)) {
        if (PRINT_STATS) fNrRetrieved++;
        if (PRINT_STATS) dumpStats();
        return m2.get(bounds);
      } else {
        CompositeOrTypeConstraint constraint = new CompositeOrTypeConstraint(constraints);
        m2.put(bounds, constraint);
        if (PRINT_STATS) dumpStats();
        if (PRINT_STATS) fNrCreated++;
        return constraint;
      }
    } else {
      Map<String, CompositeOrTypeConstraint> m2 = new HashMap<String, CompositeOrTypeConstraint>();
      fOrConstraints.put(left, m2);
      CompositeOrTypeConstraint constraint = new CompositeOrTypeConstraint(constraints);
      m2.put(bounds, constraint);
      if (PRINT_STATS) dumpStats();
      if (PRINT_STATS) fNrCreated++;
      return constraint;
    }
  }

