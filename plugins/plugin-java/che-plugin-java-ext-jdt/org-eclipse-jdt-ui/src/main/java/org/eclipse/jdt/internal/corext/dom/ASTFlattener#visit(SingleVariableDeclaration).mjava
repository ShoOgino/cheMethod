    /*
     * @see ASTVisitor#visit(SingleVariableDeclaration)
     */
    @Override
    public boolean visit(SingleVariableDeclaration node) {
        if (node.getAST().apiLevel() >= JLS3) {
            printModifiers(node.modifiers());
        }
        node.getType().accept(this);
        if (node.getAST().apiLevel() >= JLS3) {
            if (node.isVarargs()) {
                if (node.getAST().apiLevel() >= AST.JLS8) {
                    this.fBuffer.append(' ');
                    List<Annotation> annotations = node.varargsAnnotations();
                    printAnnotationsList(annotations);
                }
                this.fBuffer.append("...");//$NON-NLS-1$
            }
        }
        this.fBuffer.append(" ");//$NON-NLS-1$
        node.getName().accept(this);
        if (node.getAST().apiLevel() >= AST.JLS8) {
            List<Dimension> dimensions = node.extraDimensions();
            for (Iterator<Dimension> it = dimensions.iterator(); it.hasNext(); ) {
                Dimension e = it.next();
                e.accept(this);
            }
        } else {
            for (int i = 0; i < node.getExtraDimensions(); i++) {
                this.fBuffer.append("[]"); //$NON-NLS-1$
            }
        }
        if (node.getInitializer() != null) {
            this.fBuffer.append("=");//$NON-NLS-1$
            node.getInitializer().accept(this);
        }
        return false;
    }

