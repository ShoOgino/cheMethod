	public static ITypeBinding[] createTypeBindings(TType[] types, IJavaProject project) {
		final Map<String, Object> mapping = new HashMap<String, Object>();
		List<String> keys = new ArrayList<String>();
		for (int i = 0; i < types.length; i++) {
			TType type = types[i];
			String bindingKey = type.getBindingKey();
			mapping.put(bindingKey, type);
			keys.add(bindingKey);
		}
		ASTParser parser = ASTParser.newParser(ASTProvider.SHARED_AST_LEVEL);
		parser.setProject(project);
		parser.setResolveBindings(true);
		parser.createASTs(new ICompilationUnit[0], keys.toArray(new String[keys.size()]),
						  new ASTRequestor() {
							  @Override
							  public void acceptBinding(String bindingKey, IBinding binding) {
								  mapping.put(bindingKey, binding);
							  }
						  }, null);
		ITypeBinding[] result = new ITypeBinding[types.length];
		for (int i = 0; i < types.length; i++) {
			TType type = types[i];
			String bindingKey = type.getBindingKey();
			Object value = mapping.get(bindingKey);
			if (value instanceof ITypeBinding) {
				result[i] = (ITypeBinding)value;
			}
		}
		return result;
	}

