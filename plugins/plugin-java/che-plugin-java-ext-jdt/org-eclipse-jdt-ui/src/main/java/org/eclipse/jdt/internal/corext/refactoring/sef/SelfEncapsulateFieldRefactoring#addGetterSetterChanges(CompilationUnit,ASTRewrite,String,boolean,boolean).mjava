  private List<TextEditGroup> addGetterSetterChanges(
      CompilationUnit root,
      ASTRewrite rewriter,
      String lineDelimiter,
      boolean usingLocalSetter,
      boolean usingLocalGetter)
      throws CoreException {
    List<TextEditGroup> result = new ArrayList<TextEditGroup>(2);
    AST ast = root.getAST();
    FieldDeclaration decl =
        (FieldDeclaration) ASTNodes.getParent(fFieldDeclaration, ASTNode.FIELD_DECLARATION);
    int position = 0;
    int numberOfMethods = 0;
    List<BodyDeclaration> members = ASTNodes.getBodyDeclarations(decl.getParent());
    for (Iterator<BodyDeclaration> iter = members.iterator(); iter.hasNext(); ) {
      BodyDeclaration element = iter.next();
      if (element.getNodeType() == ASTNode.METHOD_DECLARATION) {
        if (fInsertionIndex == -1) {
          break;
        } else if (fInsertionIndex == numberOfMethods) {
          position++;
          break;
        }
        numberOfMethods++;
      }
      position++;
    }
    TextEditGroup description;
    ListRewrite rewrite =
        fRewriter.getListRewrite(decl.getParent(), getBodyDeclarationsProperty(decl.getParent()));
    if (!usingLocalGetter) {
      description = new TextEditGroup(RefactoringCoreMessages.SelfEncapsulateField_add_getter);
      result.add(description);
      rewrite.insertAt(createGetterMethod(ast, rewriter, lineDelimiter), position++, description);
    }
    if (!JdtFlags.isFinal(fField) && !usingLocalSetter) {
      description = new TextEditGroup(RefactoringCoreMessages.SelfEncapsulateField_add_setter);
      result.add(description);
      rewrite.insertAt(createSetterMethod(ast, rewriter, lineDelimiter), position, description);
    }
    if (!JdtFlags.isPrivate(fField)) result.add(makeDeclarationPrivate(rewriter, decl));
    return result;
  }

