  @Override
  public Change createChange(IProgressMonitor pm) throws CoreException {
    try {
      pm.beginTask(RefactoringCoreMessages.InlineConstantRefactoring_preview, 2);
      final Map<String, String> arguments = new HashMap<String, String>();
      String project = null;
      IJavaProject javaProject = fSelectionCu.getJavaProject();
      if (javaProject != null) project = javaProject.getElementName();
      int flags =
          RefactoringDescriptor.STRUCTURAL_CHANGE
              | JavaRefactoringDescriptor.JAR_REFACTORING
              | JavaRefactoringDescriptor.JAR_SOURCE_ATTACHMENT;
      try {
        if (!Flags.isPrivate(fField.getFlags())) flags |= RefactoringDescriptor.MULTI_CHANGE;
      } catch (JavaModelException exception) {
        JavaPlugin.log(exception);
      }
      final String description =
          Messages.format(
              RefactoringCoreMessages.InlineConstantRefactoring_descriptor_description_short,
              JavaElementLabels.getElementLabel(fField, JavaElementLabels.ALL_DEFAULT));
      final String header =
          Messages.format(
              RefactoringCoreMessages.InlineConstantRefactoring_descriptor_description,
              new String[] {
                JavaElementLabels.getElementLabel(fField, JavaElementLabels.ALL_FULLY_QUALIFIED),
                JavaElementLabels.getElementLabel(
                    fField.getParent(), JavaElementLabels.ALL_FULLY_QUALIFIED)
              });
      final JDTRefactoringDescriptorComment comment =
          new JDTRefactoringDescriptorComment(project, this, header);
      comment.addSetting(
          Messages.format(
              RefactoringCoreMessages.InlineConstantRefactoring_original_pattern,
              JavaElementLabels.getElementLabel(fField, JavaElementLabels.ALL_FULLY_QUALIFIED)));
      if (fRemoveDeclaration)
        comment.addSetting(RefactoringCoreMessages.InlineConstantRefactoring_remove_declaration);
      if (fReplaceAllReferences)
        comment.addSetting(RefactoringCoreMessages.InlineConstantRefactoring_replace_references);
      final InlineConstantDescriptor descriptor =
          RefactoringSignatureDescriptorFactory.createInlineConstantDescriptor(
              project, description, comment.asString(), arguments, flags);
      arguments.put(
          JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT,
          JavaRefactoringDescriptorUtil.elementToHandle(project, fSelectionCu));
      arguments.put(
          JavaRefactoringDescriptorUtil.ATTRIBUTE_SELECTION,
          new Integer(fSelectionStart).toString()
              + " "
              + new Integer(fSelectionLength).toString()); //$NON-NLS-1$
      arguments.put(ATTRIBUTE_REMOVE, Boolean.valueOf(fRemoveDeclaration).toString());
      arguments.put(ATTRIBUTE_REPLACE, Boolean.valueOf(fReplaceAllReferences).toString());
      return new DynamicValidationRefactoringChange(
          descriptor, RefactoringCoreMessages.InlineConstantRefactoring_inline, fChanges);
    } finally {
      pm.done();
      fChanges = null;
    }
  }

