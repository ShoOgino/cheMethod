  public ChangePreview setInput(ChangePreviewViewerInput input) {
    try {
      Change change = input.getChange();
      if (input instanceof TextEditBasedChangeInput) {
        TextEditBasedChangeInput extended = (TextEditBasedChangeInput) input;
        if (extended.group != null && extended.surroundingLines >= 0) {
          TextEditBasedChangeGroup group = extended.group;
          TextEditBasedChange editChange = group.getTextEditChange();
          //					setInput(editChange, editChange.getCurrentContent(group.getRegion(), true, 2, new
          // NullProgressMonitor()),
          //							 editChange.getPreviewContent(new TextEditBasedChangeGroup[]{group},
          // group.getRegion(), true, 2,
          //														  new NullProgressMonitor()),
          //							 editChange.getTextType());
          ChangePreview preview = DtoFactory.newDto(ChangePreview.class);
          preview.setFileName(getFileName(editChange));
          preview.setOldContent(
              editChange.getCurrentContent(group.getRegion(), true, 2, new NullProgressMonitor()));
          preview.setNewContent(
              editChange.getPreviewContent(
                  new TextEditBasedChangeGroup[] {group},
                  group.getRegion(),
                  true,
                  2,
                  new NullProgressMonitor()));
          return preview;
        } else if (extended.groups != null
            && extended.groups.length > 0
            && extended.range != null) {
          TextEditBasedChange editChange = extended.groups[0].getTextEditChange();
          TextEditBasedChangeGroup[] groups = extended.groups;
          //					if (extended.groupCategory != null) {
          //
          //					}
          //					setInput(editChange, editChange.getCurrentContent(extended.range, true, 0, new
          // NullProgressMonitor()),
          //							 editChange.getPreviewContent(groups, extended.range, true, 0, new
          // NullProgressMonitor()),
          //							 editChange.getTextType());
          ChangePreview preview = DtoFactory.newDto(ChangePreview.class);
          preview.setFileName(getFileName(editChange));
          preview.setOldContent(
              editChange.getCurrentContent(extended.range, true, 0, new NullProgressMonitor()));
          preview.setNewContent(
              editChange.getPreviewContent(
                  groups, extended.range, true, 0, new NullProgressMonitor()));
          return preview;
        }
      } else if (change instanceof TextEditBasedChange) {
        TextEditBasedChange editChange = (TextEditBasedChange) change;
        //				setInput(editChange, editChange.getCurrentContent(new NullProgressMonitor()),
        //						 editChange.getPreviewContent(new NullProgressMonitor()), editChange.getTextType());
        ChangePreview preview = DtoFactory.newDto(ChangePreview.class);
        preview.setFileName(getFileName(editChange));
        preview.setOldContent(editChange.getCurrentContent(new NullProgressMonitor()));
        preview.setNewContent(editChange.getPreviewContent(new NullProgressMonitor()));
        return preview;
      } else {
        //				fViewer.setInput(null);
        return null;
      }
    } catch (CoreException | AssertionFailedException e) {
      JavaPlugin.log(e);
      //			fViewer.setInput(null);
      return null;
    }
    //		} catch (AssertionFailedException e) {
    //			RefactoringUIPlugin.log(e);
    //			fViewer.setInput(null);
    //		}
    return null;
  }

