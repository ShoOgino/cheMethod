  @Override
  public RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException {
    // TargetProvider must get an untampered AST with original invocation node
    // SourceProvider must get a tweaked AST with method body / parameter names replaced

    RefactoringStatus result = new RefactoringStatus();

    if (fMethod == null) {
      if (!(fSelectionTypeRoot instanceof ICompilationUnit))
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.ReplaceInvocationsRefactoring_cannot_replace_in_binary);

      ICompilationUnit cu = (ICompilationUnit) fSelectionTypeRoot;
      CompilationUnit root = new RefactoringASTParser(ASTProvider.SHARED_AST_LEVEL).parse(cu, true);
      fSelectionNode = getTargetNode(cu, root, fSelectionStart, fSelectionLength);
      if (fSelectionNode == null)
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.ReplaceInvocationsRefactoring_select_method_to_apply);

      if (fSelectionNode.getNodeType() == ASTNode.METHOD_DECLARATION) {
        MethodDeclaration methodDeclaration = (MethodDeclaration) fSelectionNode;
        fTargetProvider = TargetProvider.create(methodDeclaration);
        fMethodBinding = methodDeclaration.resolveBinding();
      } else {
        MethodInvocation methodInvocation = (MethodInvocation) fSelectionNode;
        fTargetProvider = TargetProvider.create(cu, methodInvocation);
        fMethodBinding = methodInvocation.resolveMethodBinding();
      }
      if (fMethodBinding == null)
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.InlineMethodRefactoring_error_noMethodDeclaration);
      fMethod = (IMethod) fMethodBinding.getJavaElement();

    } else {
      ASTParser parser = ASTParser.newParser(ASTProvider.SHARED_AST_LEVEL);
      parser.setProject(fMethod.getJavaProject());
      IBinding[] bindings = parser.createBindings(new IJavaElement[] {fMethod}, null);
      fMethodBinding = (IMethodBinding) bindings[0];
      if (fMethodBinding == null)
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.InlineMethodRefactoring_error_noMethodDeclaration);

      fTargetProvider = TargetProvider.create(fMethodBinding);
    }

    result.merge(fTargetProvider.checkActivation());
    return result;
  }

