  // Do not modify without modifying getDefaultOptions()
  private Hashtable getDefaultOptionsNoInitialization() {
    Map defaultOptionsMap = new CompilerOptions().getMap(); // compiler defaults

    // Override some compiler defaults
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.COMPILER_LOCAL_VARIABLE_ATTR,
        org.eclipse.jdt.core.JavaCore.GENERATE);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.COMPILER_CODEGEN_UNUSED_LOCAL,
        org.eclipse.jdt.core.JavaCore.PRESERVE);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.COMPILER_TASK_TAGS,
        org.eclipse.jdt.core.JavaCore.DEFAULT_TASK_TAGS);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.COMPILER_TASK_PRIORITIES,
        org.eclipse.jdt.core.JavaCore.DEFAULT_TASK_PRIORITIES);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.COMPILER_TASK_CASE_SENSITIVE,
        org.eclipse.jdt.core.JavaCore.ENABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.COMPILER_DOC_COMMENT_SUPPORT,
        org.eclipse.jdt.core.JavaCore.ENABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.COMPILER_PB_FORBIDDEN_REFERENCE,
        org.eclipse.jdt.core.JavaCore.ERROR);

    // Builder settings
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_JAVA_BUILD_RESOURCE_COPY_FILTER, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_JAVA_BUILD_INVALID_CLASSPATH,
        org.eclipse.jdt.core.JavaCore.ABORT);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_JAVA_BUILD_DUPLICATE_RESOURCE,
        org.eclipse.jdt.core.JavaCore.WARNING);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_JAVA_BUILD_CLEAN_OUTPUT_FOLDER,
        org.eclipse.jdt.core.JavaCore.CLEAN);

    // JavaCore settings
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_JAVA_BUILD_ORDER, org.eclipse.jdt.core.JavaCore.IGNORE);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_INCOMPLETE_CLASSPATH,
        org.eclipse.jdt.core.JavaCore.ERROR);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_CIRCULAR_CLASSPATH, org.eclipse.jdt.core.JavaCore.ERROR);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_INCOMPATIBLE_JDK_LEVEL,
        org.eclipse.jdt.core.JavaCore.IGNORE);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_OUTPUT_LOCATION_OVERLAPPING_ANOTHER_SOURCE,
        org.eclipse.jdt.core.JavaCore.ERROR);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_ENABLE_CLASSPATH_EXCLUSION_PATTERNS,
        org.eclipse.jdt.core.JavaCore.ENABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CORE_ENABLE_CLASSPATH_MULTIPLE_OUTPUT_LOCATIONS,
        org.eclipse.jdt.core.JavaCore.ENABLED);

    // Formatter settings
    defaultOptionsMap.putAll(DefaultCodeFormatterConstants.getEclipseDefaultSettings());

    // CodeAssist settings
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_VISIBILITY_CHECK,
        org.eclipse.jdt.core.JavaCore.DISABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_DEPRECATION_CHECK,
        org.eclipse.jdt.core.JavaCore.DISABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_IMPLICIT_QUALIFICATION,
        org.eclipse.jdt.core.JavaCore.DISABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_FIELD_PREFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_STATIC_FIELD_PREFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_STATIC_FINAL_FIELD_PREFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_LOCAL_PREFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_ARGUMENT_PREFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_FIELD_SUFFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_STATIC_FIELD_SUFFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_STATIC_FINAL_FIELD_SUFFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_LOCAL_SUFFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_ARGUMENT_SUFFIXES, ""); // $NON-NLS-1$
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_FORBIDDEN_REFERENCE_CHECK,
        org.eclipse.jdt.core.JavaCore.ENABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_DISCOURAGED_REFERENCE_CHECK,
        org.eclipse.jdt.core.JavaCore.DISABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_CAMEL_CASE_MATCH,
        org.eclipse.jdt.core.JavaCore.ENABLED);
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.CODEASSIST_SUGGEST_STATIC_IMPORTS,
        org.eclipse.jdt.core.JavaCore.ENABLED);

    // Time out for parameter names
    defaultOptionsMap.put(
        org.eclipse.jdt.core.JavaCore.TIMEOUT_FOR_PARAMETER_NAME_FROM_ATTACHED_JAVADOC,
        "50"); // $NON-NLS-1$

    return new Hashtable(defaultOptionsMap);
  }

