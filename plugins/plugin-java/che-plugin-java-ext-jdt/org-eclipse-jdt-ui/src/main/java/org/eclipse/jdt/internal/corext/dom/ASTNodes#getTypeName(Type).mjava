    /**
     * Returns the simple name of the type, followed by array dimensions.
     * Skips qualifiers, type arguments, and type annotations.
     * <p>
     * Does <b>not</b> work for WildcardTypes, etc.!
     *
     * @param type a type that has a simple name
     * @return the simple name, followed by array dimensions
     * @see #getSimpleNameIdentifier(org.eclipse.jdt.core.dom.Name)
     * @since 3.10
     */
    public static String getTypeName(Type type) {
        final StringBuffer buffer = new StringBuffer();
        ASTVisitor visitor = new ASTVisitor() {
            @Override
            public boolean visit(PrimitiveType node) {
                buffer.append(node.getPrimitiveTypeCode().toString());
                return false;
            }

            @Override
            public boolean visit(SimpleType node) {
                buffer.append(getSimpleNameIdentifier(node.getName()));
                return false;
            }

            @Override
            public boolean visit(QualifiedType node) {
                buffer.append(node.getName().getIdentifier());
                return false;
            }

            @Override
            public boolean visit(NameQualifiedType node) {
                buffer.append(node.getName().getIdentifier());
                return false;
            }

            @Override
            public boolean visit(ParameterizedType node) {
                node.getType().accept(this);
                return false;
            }

            @Override
            public void endVisit(ArrayType node) {
                for (int i = 0; i < node.dimensions().size(); i++) {
                    buffer.append("[]"); //$NON-NLS-1$
                }
            }
        };
        type.accept(visitor);
        return buffer.toString();
    }

