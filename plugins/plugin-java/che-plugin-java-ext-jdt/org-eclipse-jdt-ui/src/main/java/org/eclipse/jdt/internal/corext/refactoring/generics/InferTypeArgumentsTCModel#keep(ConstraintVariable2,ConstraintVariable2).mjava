	/**
	 * Allows for avoiding the creation of SimpleTypeConstraints based on properties of
	 * their constituent ConstraintVariables and ConstraintOperators. Can be used to e.g.
	 * avoid creation of constraints for assignments between built-in types.
	 *
	 * @param cv1
	 * @param cv2
	 * @return <code>true</code> iff the type constraint should really be created
	 */
	protected boolean keep(ConstraintVariable2 cv1, ConstraintVariable2 cv2) {
		if ((cv1 == null || cv2 == null))
			return false;

		if (cv1.equals(cv2)) {
			if (cv1 == cv2)
				return false;
			else
				Assert.isTrue(false);
		}

		if (cv1 instanceof CollectionElementVariable2 || cv2 instanceof CollectionElementVariable2)
			return true;

		if (cv1 instanceof IndependentTypeVariable2 || cv2 instanceof IndependentTypeVariable2)
			return true;

		if (isAGenericType(cv1.getType()))
			return true;

		if (isAGenericType(cv2.getType()))
			return true;

		return false;
	}

