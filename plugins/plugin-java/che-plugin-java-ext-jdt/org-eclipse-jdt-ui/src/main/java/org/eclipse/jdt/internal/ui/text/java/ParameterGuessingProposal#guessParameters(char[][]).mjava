	private ICompletionProposal[][] guessParameters(char[][] parameterNames) throws JavaModelException {
		// find matches in reverse order.  Do this because people tend to declare the variable meant for the last
		// parameter last.  That is, local variables for the last parameter in the method completion are more
		// likely to be closer to the point of code completion. As an example consider a "delegation" completion:
		//
		// 		public void myMethod(int param1, int param2, int param3) {
		// 			someOtherObject.yourMethod(param1, param2, param3);
		//		}
		//
		// The other consideration is giving preference to variables that have not previously been used in this
		// code completion (which avoids "someOtherObject.yourMethod(param1, param1, param1)";

		int count= parameterNames.length;
		fPositions= new Position[count];
		fChoices= new ICompletionProposal[count][];

		String[] parameterTypes= getParameterTypes();
		ParameterGuesser guesser= new ParameterGuesser(getEnclosingElement());
		IJavaElement[][] assignableElements= getAssignableElements();

		for (int i= count - 1; i >= 0; i--) {
			String paramName= new String(parameterNames[i]);
			Position position= new Position(0,0);

			boolean isLastParameter= i == count - 1;
			ICompletionProposal[] argumentProposals= guesser.parameterProposals(parameterTypes[i], paramName, position, assignableElements[i], fFillBestGuess, isLastParameter);
			if (argumentProposals.length == 0) {
				JavaCompletionProposal proposal= new JavaCompletionProposal(paramName, 0, paramName.length(), null, paramName, 0);
				if (isLastParameter)
					proposal.setTriggerCharacters(new char[] { ',' });
				argumentProposals= new ICompletionProposal[] { proposal };
			}

			fPositions[i]= position;
			fChoices[i]= argumentProposals;
		}

		return fChoices;
	}

