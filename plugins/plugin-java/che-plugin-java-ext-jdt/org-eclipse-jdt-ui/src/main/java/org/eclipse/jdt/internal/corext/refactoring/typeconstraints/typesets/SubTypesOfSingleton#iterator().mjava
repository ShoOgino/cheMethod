  /* (non-Javadoc)
   * @see org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets.TypeSet#iterator()
   */
  @Override
  public Iterator<TType> iterator() {
    return enumerate().iterator();
    //		return new Iterator() {
    //			// First type returned is fUpperBound, then each of the subtypes, in turn
    //			//
    //			// If the upper bound is an array type, return the set of array types
    //			// { Array(subType(elementTypeOf(fUpperBound))) }
    //			private Set/*<TType>*/ subTypes=
    // sTypeHierarchy.getAllSubtypes(getElementTypeOf(fUpperBound));
    //			private Iterator/*<TType>*/ subTypeIter= subTypes.iterator();
    //			private int nDims= getDimsOf(fUpperBound);
    //			private int idx=-1;
    //			public void remove() { /*do nothing*/}
    //			public boolean hasNext() { return idx < subTypes.size(); }
    //			public Object next() {
    //				int i=idx++;
    //				if (i < 0) return fUpperBound;
    //				return makePossiblyArrayTypeFor((TType) subTypeIter.next(), nDims);
    //			}
    //		};
  }

