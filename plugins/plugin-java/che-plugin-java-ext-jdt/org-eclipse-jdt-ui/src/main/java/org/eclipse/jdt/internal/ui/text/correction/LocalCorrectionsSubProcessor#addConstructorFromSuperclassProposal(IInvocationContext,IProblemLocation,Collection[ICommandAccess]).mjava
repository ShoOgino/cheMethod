  public static void addConstructorFromSuperclassProposal(
      IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals)
      throws CoreException {
    ASTNode selectedNode = problem.getCoveringNode(context.getASTRoot());
    if (selectedNode == null) {
      return;
    }

    TypeDeclaration typeDeclaration = null;
    if (selectedNode.getLocationInParent() == TypeDeclaration.NAME_PROPERTY) {
      typeDeclaration = (TypeDeclaration) selectedNode.getParent();
    } else {
      BodyDeclaration declaration = ASTResolving.findParentBodyDeclaration(selectedNode);
      if (declaration instanceof Initializer
          && problem.getProblemId() == IProblem.UnhandledExceptionInDefaultConstructor) {
        addUncaughtExceptionProposals(context, problem, proposals);
      }
      return;
    }

    ITypeBinding binding = typeDeclaration.resolveBinding();
    if (binding == null || binding.getSuperclass() == null) {
      return;
    }
    ICompilationUnit cu = context.getCompilationUnit();
    IMethodBinding[] methods = binding.getSuperclass().getDeclaredMethods();
    for (int i = 0; i < methods.length; i++) {
      IMethodBinding curr = methods[i];
      if (curr.isConstructor() && !Modifier.isPrivate(curr.getModifiers())) {
        proposals.add(
            new ConstructorFromSuperclassProposal(
                cu, typeDeclaration, curr, IProposalRelevance.ADD_CONSTRUCTOR_FROM_SUPER_CLASS));
      }
    }
  }

