  private TextEdit evaluateEdits(
      CompilationUnit root,
      ImportRewrite importRewrite,
      int offset,
      int length,
      IProgressMonitor monitor)
      throws JavaModelException {
    SimpleName nameNode = null;
    if (root != null) { // got an AST
      ASTNode node = NodeFinder.perform(root, offset, length);
      if (node instanceof MarkerAnnotation) {
        node = ((Annotation) node).getTypeName();
      }
      if (node instanceof QualifiedName) {
        nameNode = ((QualifiedName) node).getName();
      } else if (node instanceof SimpleName) {
        nameNode = (SimpleName) node;
      }
    }

    String name, simpleName, containerName;
    int qualifierStart;
    int simpleNameStart;

    if (nameNode != null) {
      simpleName = nameNode.getIdentifier();
      simpleNameStart = nameNode.getStartPosition();
      if (nameNode.getLocationInParent() == QualifiedName.NAME_PROPERTY) {
        Name qualifier = ((QualifiedName) nameNode.getParent()).getQualifier();
        containerName = qualifier.getFullyQualifiedName();
        name = JavaModelUtil.concatenateName(containerName, simpleName);
        qualifierStart = qualifier.getStartPosition();
      } else if (nameNode.getLocationInParent() == NameQualifiedType.NAME_PROPERTY) {
        NameQualifiedType nameQualifiedType = (NameQualifiedType) nameNode.getParent();
        Name qualifier = nameQualifiedType.getQualifier();
        containerName = qualifier.getFullyQualifiedName();
        name = JavaModelUtil.concatenateName(containerName, simpleName);
        qualifierStart = qualifier.getStartPosition();
        List<Annotation> annotations = nameQualifiedType.annotations();
        if (!annotations.isEmpty()) { // don't remove annotations
          simpleNameStart = annotations.get(0).getStartPosition();
        }
      } else if (nameNode.getLocationInParent() == MethodInvocation.NAME_PROPERTY) {
        ASTNode qualifier = ((MethodInvocation) nameNode.getParent()).getExpression();
        if (qualifier instanceof Name) {
          containerName = ASTNodes.asString(qualifier);
          name = JavaModelUtil.concatenateName(containerName, simpleName);
          qualifierStart = qualifier.getStartPosition();
        } else {
          return null;
        }
      } else {
        containerName = ""; // $NON-NLS-1$
        name = simpleName;
        qualifierStart = simpleNameStart;
      }

      IBinding binding = nameNode.resolveBinding();
      if (binding != null && !binding.isRecovered()) {
        if (binding instanceof ITypeBinding) {
          ITypeBinding typeBinding = ((ITypeBinding) binding).getTypeDeclaration();
          String qualifiedBindingName = typeBinding.getQualifiedName();
          if (containerName.length() > 0 && !qualifiedBindingName.equals(name)) {
            return null;
          }

          ImportRewriteContext context =
              new ContextSensitiveImportRewriteContext(root, qualifierStart, importRewrite);
          String res = importRewrite.addImport(typeBinding, context);
          if (containerName.length() > 0 && !res.equals(simpleName)) {
            // adding import failed
            fStatus =
                JavaUIStatus.createError(
                    IStatus.ERROR,
                    CodeGenerationMessages.AddImportsOperation_error_importclash,
                    null);
            return null;
          }
          if (containerName.length() == 0 && res.equals(simpleName)) {
            // no change necessary
            return null;
          }
          return new ReplaceEdit(qualifierStart, simpleNameStart - qualifierStart, new String());
        } else if (JavaModelUtil.is50OrHigher(fCompilationUnit.getJavaProject())
            && (binding instanceof IVariableBinding || binding instanceof IMethodBinding)) {
          boolean isField = binding instanceof IVariableBinding;
          ITypeBinding declaringClass =
              isField
                  ? ((IVariableBinding) binding).getDeclaringClass()
                  : ((IMethodBinding) binding).getDeclaringClass();
          if (declaringClass == null) {
            return null; // variableBinding.getDeclaringClass() is null for array.length
          }
          if (Modifier.isStatic(binding.getModifiers())) {
            if (containerName.length() > 0) {
              if (containerName.equals(declaringClass.getName())
                  || containerName.equals(declaringClass.getQualifiedName())) {
                ASTNode node = nameNode.getParent();
                boolean isDirectlyAccessible = false;
                while (node != null) {
                  if (isTypeDeclarationSubTypeCompatible(node, declaringClass)) {
                    isDirectlyAccessible = true;
                    break;
                  }
                  node = node.getParent();
                }
                if (!isDirectlyAccessible) {
                  if (Modifier.isPrivate(declaringClass.getModifiers())) {
                    fStatus =
                        JavaUIStatus.createError(
                            IStatus.ERROR,
                            Messages.format(
                                CodeGenerationMessages.AddImportsOperation_error_not_visible_class,
                                BasicElementLabels.getJavaElementName(declaringClass.getName())),
                            null);
                    return null;
                  }
                  String res =
                      importRewrite.addStaticImport(
                          declaringClass.getQualifiedName(), binding.getName(), isField);
                  if (!res.equals(simpleName)) {
                    // adding import failed
                    return null;
                  }
                }
                return new ReplaceEdit(
                    qualifierStart, simpleNameStart - qualifierStart, ""); // $NON-NLS-1$
              }
            }
          }
          return null; // no static imports for packages
        } else {
          return null;
        }
      }
      if (binding != null && binding.getKind() != IBinding.TYPE) {
        // recovered binding
        return null;
      }

    } else {
      IBuffer buffer = fCompilationUnit.getBuffer();

      qualifierStart = getNameStart(buffer, offset);
      int nameEnd = getNameEnd(buffer, offset + length);
      int len = nameEnd - qualifierStart;
      name = buffer.getText(qualifierStart, len).trim();
      if (name.length() == 0) {
        return null;
      }

      simpleName = Signature.getSimpleName(name);
      containerName = Signature.getQualifier(name);

      IJavaProject javaProject = fCompilationUnit.getJavaProject();
      if (simpleName.length() == 0
          || JavaConventionsUtil.validateJavaTypeName(simpleName, javaProject)
              .matches(IStatus.ERROR)
          || (containerName.length() > 0
              && JavaConventionsUtil.validateJavaTypeName(containerName, javaProject)
                  .matches(IStatus.ERROR))) {
        fStatus =
            JavaUIStatus.createError(
                IStatus.ERROR,
                CodeGenerationMessages.AddImportsOperation_error_invalid_selection,
                null);
        return null;
      }

      simpleNameStart = getSimpleNameStart(buffer, qualifierStart, containerName);

      int res =
          importRewrite
              .getDefaultImportRewriteContext()
              .findInContext(containerName, simpleName, ImportRewriteContext.KIND_TYPE);
      if (res == ImportRewriteContext.RES_NAME_CONFLICT) {
        fStatus =
            JavaUIStatus.createError(
                IStatus.ERROR, CodeGenerationMessages.AddImportsOperation_error_importclash, null);
        return null;
      } else if (res == ImportRewriteContext.RES_NAME_FOUND) {
        return new ReplaceEdit(qualifierStart, simpleNameStart - qualifierStart, ""); // $NON-NLS-1$
      }
    }
    IJavaSearchScope searchScope =
        SearchEngine.createJavaSearchScope(new IJavaElement[] {fCompilationUnit.getJavaProject()});

    TypeNameMatch[] types =
        findAllTypes(simpleName, searchScope, nameNode, new SubProgressMonitor(monitor, 1));
    if (types.length == 0) {
      fStatus =
          JavaUIStatus.createError(
              IStatus.ERROR,
              Messages.format(
                  CodeGenerationMessages.AddImportsOperation_error_notresolved_message,
                  BasicElementLabels.getJavaElementName(simpleName)),
              null);
      return null;
    }

    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    TypeNameMatch chosen;
    if (types.length > 1 && fQuery != null) {
      chosen = fQuery.chooseImport(types, containerName);
      if (chosen == null) {
        throw new OperationCanceledException();
      }
    } else {
      chosen = types[0];
    }
    ImportRewriteContext context =
        root == null
            ? null
            : new ContextSensitiveImportRewriteContext(root, simpleNameStart, importRewrite);
    importRewrite.addImport(chosen.getFullyQualifiedName(), context);
    return new ReplaceEdit(qualifierStart, simpleNameStart - qualifierStart, ""); // $NON-NLS-1$
  }

