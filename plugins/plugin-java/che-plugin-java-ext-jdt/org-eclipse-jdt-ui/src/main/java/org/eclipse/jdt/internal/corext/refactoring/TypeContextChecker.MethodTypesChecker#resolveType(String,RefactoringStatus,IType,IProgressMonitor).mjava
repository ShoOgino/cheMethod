    private static String resolveType(
        String elementTypeName, RefactoringStatus status, IType declaringType, IProgressMonitor pm)
        throws CoreException {
      String[][] fqns = declaringType.resolveType(elementTypeName);
      if (fqns != null) {
        if (fqns.length == 1) {
          return JavaModelUtil.concatenateName(fqns[0][0], fqns[0][1]);
        } else if (fqns.length > 1) {
          String[] keys = {
            BasicElementLabels.getJavaElementName(elementTypeName), String.valueOf(fqns.length)
          };
          String msg = Messages.format(RefactoringCoreMessages.TypeContextChecker_ambiguous, keys);
          status.addError(msg);
          return elementTypeName;
        }
      }

      List<TypeNameMatch> typeRefsFound = findTypeInfos(elementTypeName, declaringType, pm);
      if (typeRefsFound.size() == 0) {
        String msg =
            Messages.format(
                RefactoringCoreMessages.TypeContextChecker_not_unique,
                BasicElementLabels.getJavaElementName(elementTypeName));
        status.addError(msg);
        return elementTypeName;
      } else if (typeRefsFound.size() == 1) {
        TypeNameMatch typeInfo = typeRefsFound.get(0);
        return typeInfo.getFullyQualifiedName();
      } else {
        Assert.isTrue(typeRefsFound.size() > 1);
        String[] keys = {
          BasicElementLabels.getJavaElementName(elementTypeName),
          String.valueOf(typeRefsFound.size())
        };
        String msg = Messages.format(RefactoringCoreMessages.TypeContextChecker_ambiguous, keys);
        status.addError(msg);
        return elementTypeName;
      }
    }

