  /* (non-Javadoc)
   * @see JavaTypeCompletionProposal#updateReplacementString(IDocument, char, int, ImportRewrite)
   */
  @Override
  protected boolean updateReplacementString(
      IDocument document, char trigger, int offset, ImportRewrite impRewrite)
      throws CoreException, BadLocationException {

    CodeGenerationSettings settings =
        JavaPreferencesSettings.getCodeGenerationSettings(fField.getJavaProject());
    boolean addComments = settings.createComments;
    int flags = Flags.AccPublic | (fField.getFlags() & Flags.AccStatic);

    String stub;
    if (fIsGetter) {
      String getterName = GetterSetterUtil.getGetterName(fField, null);
      stub = GetterSetterUtil.getGetterStub(fField, getterName, addComments, flags);
    } else {
      String setterName = GetterSetterUtil.getSetterName(fField, null);
      stub = GetterSetterUtil.getSetterStub(fField, setterName, addComments, flags);
    }

    // use the code formatter
    String lineDelim = TextUtilities.getDefaultLineDelimiter(document);

    IRegion region = document.getLineInformationOfOffset(getReplacementOffset());
    int lineStart = region.getOffset();
    int indent =
        Strings.computeIndentUnits(
            document.get(lineStart, getReplacementOffset() - lineStart),
            settings.tabWidth,
            settings.indentWidth);

    String replacement =
        CodeFormatterUtil.format(
            CodeFormatter.K_CLASS_BODY_DECLARATIONS,
            stub,
            indent,
            lineDelim,
            fField.getJavaProject());

    if (replacement.endsWith(lineDelim)) {
      replacement = replacement.substring(0, replacement.length() - lineDelim.length());
    }

    setReplacementString(Strings.trimLeadingTabsAndSpaces(replacement));
    return true;
  }

