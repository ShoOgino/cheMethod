	public static IStatus collectProposals(IInvocationContext context, /*IAnnotationModel model, */List<Problem> annotations, boolean addQuickFixes, boolean addQuickAssists, Collection<IJavaCompletionProposal> proposals) {
		ArrayList<ProblemLocation> problems= new ArrayList<>();

		// collect problem locations and corrections from marker annotations
		for (Problem curr : annotations) {
				problems.add(new ProblemLocation(curr));
		}
//		for (int i= 0; i < annotations.length; i++) {
//			Annotation curr= annotations[i];
//			ProblemLocation problemLocation= null;
//			if (curr instanceof IJavaAnnotation) {
//				problemLocation= getProblemLocation((IJavaAnnotation) curr, model);
//				if (problemLocation != null) {
//					problems.add(problemLocation);
//				}
//			}
////			if (problemLocation == null && addQuickFixes && curr instanceof SimpleMarkerAnnotation) {
////				collectMarkerProposals((SimpleMarkerAnnotation) curr, proposals);
////			}
//		}
		MultiStatus resStatus= null;

		IProblemLocation[] problemLocations= problems.toArray(new IProblemLocation[problems.size()]);
		if (addQuickFixes) {
			IStatus status= collectCorrections(context, problemLocations, proposals);
			if (!status.isOK()) {
				resStatus= new MultiStatus(JavaPlugin.ID_PLUGIN, IStatus.ERROR, CorrectionMessages.JavaCorrectionProcessor_error_quickfix_message, null);
				resStatus.add(status);
			}
		}
		if (addQuickAssists) {
			IStatus status= collectAssists(context, problemLocations, proposals);
			if (!status.isOK()) {
				if (resStatus == null) {
					resStatus= new MultiStatus(JavaPlugin.ID_PLUGIN, IStatus.ERROR, CorrectionMessages.JavaCorrectionProcessor_error_quickassist_message, null);
				}
				resStatus.add(status);
			}
		}
		if (resStatus != null) {
			return resStatus;
		}
		return Status.OK_STATUS;
	}

