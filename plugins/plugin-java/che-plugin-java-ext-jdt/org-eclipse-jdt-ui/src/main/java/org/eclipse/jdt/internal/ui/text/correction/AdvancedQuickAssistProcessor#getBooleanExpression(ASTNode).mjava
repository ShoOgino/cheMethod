  private static Expression getBooleanExpression(ASTNode node) {
    if (!(node instanceof Expression)) {
      return null;
    }

    // check if the node is a location where it can be negated
    StructuralPropertyDescriptor locationInParent = node.getLocationInParent();
    if (locationInParent == QualifiedName.NAME_PROPERTY) {
      node = node.getParent();
      locationInParent = node.getLocationInParent();
    }
    while (locationInParent == ParenthesizedExpression.EXPRESSION_PROPERTY) {
      node = node.getParent();
      locationInParent = node.getLocationInParent();
    }
    Expression expression = (Expression) node;
    if (!isBoolean(expression)) {
      return null;
    }
    if (expression.getParent() instanceof InfixExpression) {
      return expression;
    }
    if (locationInParent == Assignment.RIGHT_HAND_SIDE_PROPERTY
        || locationInParent == IfStatement.EXPRESSION_PROPERTY
        || locationInParent == WhileStatement.EXPRESSION_PROPERTY
        || locationInParent == DoStatement.EXPRESSION_PROPERTY
        || locationInParent == ReturnStatement.EXPRESSION_PROPERTY
        || locationInParent == ForStatement.EXPRESSION_PROPERTY
        || locationInParent == AssertStatement.EXPRESSION_PROPERTY
        || locationInParent == MethodInvocation.ARGUMENTS_PROPERTY
        || locationInParent == ConstructorInvocation.ARGUMENTS_PROPERTY
        || locationInParent == SuperMethodInvocation.ARGUMENTS_PROPERTY
        || locationInParent == EnumConstantDeclaration.ARGUMENTS_PROPERTY
        || locationInParent == SuperConstructorInvocation.ARGUMENTS_PROPERTY
        || locationInParent == ClassInstanceCreation.ARGUMENTS_PROPERTY
        || locationInParent == ConditionalExpression.EXPRESSION_PROPERTY
        || locationInParent == PrefixExpression.OPERAND_PROPERTY) {
      return expression;
    }
    return null;
  }

