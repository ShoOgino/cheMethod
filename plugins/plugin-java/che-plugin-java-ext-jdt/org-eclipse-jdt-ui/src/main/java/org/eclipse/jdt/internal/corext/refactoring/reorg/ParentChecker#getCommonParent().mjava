	public Object getCommonParent() {
		if (fJavaElements.length == 0 && fResources.length == 0 && fJarResources.length == 0)
			return null;
		if (!resourcesHaveCommonParent() || !javaElementsHaveCommonParent() || !jarResourcesHaveCommonParent())
			return null;
		if (fJavaElements.length == 0 && fResources.length == 0)
			return getCommonJarResourceParent();
		if (fJavaElements.length == 0 && fJarResources.length == 0) {
			IResource commonResourceParent = getCommonResourceParent();
			Assert.isNotNull(commonResourceParent);
			IJavaElement convertedToJava= JavaCore.create(commonResourceParent);
			if (convertedToJava != null && convertedToJava.exists())
				return convertedToJava;
			else
				return commonResourceParent;
		}
		if (fResources.length == 0 && fJarResources.length == 0)
			return getCommonJavaElementParent();

		IJavaElement convertedToJava= null;
		IJavaElement commonJavaElementParent= null;
		Object commonJarResourcesParent= null;
		Object commonParent= null;
		if (fResources.length != 0) {
			IResource commonResourceParent= getCommonResourceParent();
			Assert.isNotNull(commonResourceParent);
			convertedToJava= JavaCore.create(commonResourceParent);
			if (convertedToJava == null || !convertedToJava.exists())
				return null;
		}
		if (fJavaElements.length != 0) {
			commonJavaElementParent= getCommonJavaElementParent();
			Assert.isNotNull(commonJavaElementParent);
			if (convertedToJava != null && !commonJavaElementParent.equals(convertedToJava))
				return null;
		}
		commonParent= convertedToJava == null ? commonJavaElementParent : convertedToJava;
		if (fJarResources.length != 0) {
			commonJarResourcesParent= getCommonJarResourceParent();
			Assert.isNotNull(commonJarResourcesParent);
			if (!commonJarResourcesParent.equals(commonParent))
				return null;
		}
		return commonParent;
	}

