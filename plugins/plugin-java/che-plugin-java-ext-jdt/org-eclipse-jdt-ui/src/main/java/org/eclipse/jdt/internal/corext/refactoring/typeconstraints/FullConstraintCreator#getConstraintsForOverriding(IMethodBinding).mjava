  private Collection<ITypeConstraint> getConstraintsForOverriding(IMethodBinding overridingMethod) {
    Collection<ITypeConstraint> result = new ArrayList<ITypeConstraint>();
    Set<ITypeBinding> declaringSupertypes = getDeclaringSuperTypes(overridingMethod);
    for (Iterator<ITypeBinding> iter = declaringSupertypes.iterator(); iter.hasNext(); ) {
      ITypeBinding superType = iter.next();
      IMethodBinding overriddenMethod = findMethod(overridingMethod, superType);
      Assert.isNotNull(overriddenMethod); //because we asked for declaring types
      if (Bindings.equals(overridingMethod, overriddenMethod)) continue;
      ITypeConstraint[] returnTypeConstraint =
          fTypeConstraintFactory.createEqualsConstraint(
              fConstraintVariableFactory.makeReturnTypeVariable(overriddenMethod),
              fConstraintVariableFactory.makeReturnTypeVariable(overridingMethod));
      result.addAll(Arrays.asList(returnTypeConstraint));
      Assert.isTrue(
          overriddenMethod.getParameterTypes().length
              == overridingMethod.getParameterTypes().length);
      for (int i = 0, n = overriddenMethod.getParameterTypes().length; i < n; i++) {
        ITypeConstraint[] parameterTypeConstraint =
            fTypeConstraintFactory.createEqualsConstraint(
                fConstraintVariableFactory.makeParameterTypeVariable(overriddenMethod, i),
                fConstraintVariableFactory.makeParameterTypeVariable(overridingMethod, i));
        result.addAll(Arrays.asList(parameterTypeConstraint));
      }
      ITypeConstraint[] declaringTypeConstraint =
          fTypeConstraintFactory.createStrictSubtypeConstraint(
              fConstraintVariableFactory.makeDeclaringTypeVariable(overridingMethod),
              fConstraintVariableFactory.makeDeclaringTypeVariable(overriddenMethod));
      result.addAll(Arrays.asList(declaringTypeConstraint));
    }
    return result;
  }

