  private void printReferenceTypeArguments(List<Type> typeArguments) {
    this.fBuffer.append("::"); // $NON-NLS-1$
    if (!typeArguments.isEmpty()) {
      this.fBuffer.append('<');
      for (Iterator<Type> it = typeArguments.iterator(); it.hasNext(); ) {
        Type t = it.next();
        t.accept(this);
        if (it.hasNext()) {
          this.fBuffer.append(',');
        }
      }
      this.fBuffer.append('>');
    }
  }

