  private Type getNewCastTypeNode(ASTRewrite rewrite, ImportRewrite importRewrite) {
    AST ast = rewrite.getAST();

    ImportRewriteContext context =
        new ContextSensitiveImportRewriteContext(
            (CompilationUnit) fNodeToCast.getRoot(), fNodeToCast.getStartPosition(), importRewrite);

    if (fCastType != null) {
      return importRewrite.addImport(fCastType, ast, context);
    }

    ASTNode node = fNodeToCast;
    ASTNode parent = node.getParent();
    if (parent instanceof CastExpression) {
      node = parent;
      parent = parent.getParent();
    }
    while (parent instanceof ParenthesizedExpression) {
      node = parent;
      parent = parent.getParent();
    }
    if (parent instanceof MethodInvocation) {
      MethodInvocation invocation = (MethodInvocation) node.getParent();
      if (invocation.getExpression() == node) {
        IBinding targetContext = ASTResolving.getParentMethodOrTypeBinding(node);
        ITypeBinding[] bindings =
            ASTResolving.getQualifierGuess(
                node.getRoot(),
                invocation.getName().getIdentifier(),
                invocation.arguments(),
                targetContext);
        if (bindings.length > 0) {
          ITypeBinding first = getCastFavorite(bindings, fNodeToCast.resolveTypeBinding());

          Type newTypeNode = importRewrite.addImport(first, ast, context);
          addLinkedPosition(rewrite.track(newTypeNode), true, "casttype"); //$NON-NLS-1$
          for (int i = 0; i < bindings.length; i++) {
            addLinkedPositionProposal("casttype", bindings[i]); //$NON-NLS-1$
          }
          return newTypeNode;
        }
      }
    }
    Type newCastType = ast.newSimpleType(ast.newSimpleName("Object")); //$NON-NLS-1$
    addLinkedPosition(rewrite.track(newCastType), true, "casttype"); //$NON-NLS-1$
    return newCastType;
  }

