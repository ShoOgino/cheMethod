  private void initializeTypeEstimates(ConstraintVariable2[] allConstraintVariables) {
    for (int i = 0; i < allConstraintVariables.length; i++) {
      ConstraintVariable2 cv = allConstraintVariables[i];
      // TODO: not necessary for types that are not used in a TypeConstraint but only as type in
      // CollectionElementVariable
      // TODO: handle nested element variables; see ParametricStructureComputer.createAndInitVars()
      TypeEquivalenceSet set = cv.getTypeEquivalenceSet();
      if (set == null) {
        set = new TypeEquivalenceSet(cv);
        set.setTypeEstimate(createInitialEstimate(cv));
        cv.setTypeEquivalenceSet(set);
      } else {
        TypeSet typeEstimate = (TypeSet) cv.getTypeEstimate();
        if (typeEstimate == null) {
          ConstraintVariable2[] cvs = set.getContributingVariables();
          typeEstimate = fTypeSetEnvironment.getUniverseTypeSet();
          for (int j = 0;
              j < cvs.length;
              j++) // TODO: optimize: just try to find an immutable CV; if not found, use Universe
          typeEstimate = typeEstimate.intersectedWith(createInitialEstimate(cvs[j]));
          set.setTypeEstimate(typeEstimate);
        }
      }
    }
  }

