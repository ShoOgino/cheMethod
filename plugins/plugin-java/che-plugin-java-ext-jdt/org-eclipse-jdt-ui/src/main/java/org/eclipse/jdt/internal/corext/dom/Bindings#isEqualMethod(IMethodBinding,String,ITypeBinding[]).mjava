  /**
   * Tests whether the two methods are erasure-equivalent.
   *
   * @param method the first method
   * @param methodName the name of the second method
   * @param parameters the parameters of the second method
   * @return return <code>true</code> if the two bindings are equal
   * @deprecated use {@link #isSubsignature(IMethodBinding, IMethodBinding)}
   */
  // TODO: rename to isErasureEquivalentMethod and change to two IMethodBinding parameters
  public static boolean isEqualMethod(
      IMethodBinding method, String methodName, ITypeBinding[] parameters) {
    if (!method.getName().equals(methodName)) return false;

    ITypeBinding[] methodParameters = method.getParameterTypes();
    if (methodParameters.length != parameters.length) return false;
    for (int i = 0; i < parameters.length; i++) {
      if (!equals(methodParameters[i].getErasure(), parameters[i].getErasure())) return false;
    }
    // Can't use this fix, since some clients assume that this method tests erasure equivalence:
    //		if (method.getTypeParameters().length == 0) {
    //			//a method without type parameters cannot be overridden by one that declares type
    // parameters -> can be exact here
    //			for (int i= 0; i < parameters.length; i++) {
    //				if ( ! (equals(methodParameters[i], parameters[i])
    //						|| equals(methodParameters[i].getErasure(), parameters[i]))) // subsignature
    //					return false;
    //			}
    //		} else {
    //			//this will find all overridden methods, but may generate false positives in some cases:
    //			for (int i= 0; i < parameters.length; i++) {
    //				if (!equals(methodParameters[i].getErasure(), parameters[i].getErasure()))
    //					return false;
    //			}
    //		}
    return true;
  }

