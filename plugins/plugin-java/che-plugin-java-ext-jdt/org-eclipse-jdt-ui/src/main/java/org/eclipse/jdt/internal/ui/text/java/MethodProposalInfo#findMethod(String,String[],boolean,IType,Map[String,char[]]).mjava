  /**
   * Finds a method by name. This searches for a method with a name and signature. Parameter types
   * are only compared by the simple name, no resolving for the fully qualified type name is done.
   * Constructors are only compared by parameters, not the name.
   *
   * @param name The name of the method to find
   * @param paramTypes The type signatures of the parameters e.g. <code>{"QString;","I"}</code>
   * @param isConstructor If the method is a constructor
   * @param type the given type in which to search for methods
   * @param typeVariables a map from type variables to concretely used types
   * @return The found method or <code>null</code>, if nothing found
   * @throws org.eclipse.jdt.core.JavaModelException if the method does not exist or if an exception
   *     occurs while accessing its corresponding resource
   */
  private IMethod findMethod(
      String name,
      String[] paramTypes,
      boolean isConstructor,
      IType type,
      Map<String, char[]> typeVariables)
      throws JavaModelException {
    IMethod[] methods = type.getMethods();
    for (int i = methods.length - 1; i >= 0; i--) {
      if (isSameMethodSignature(name, paramTypes, isConstructor, methods[i], typeVariables, type)) {
        return methods[i];
      }
    }
    return fFallbackMatch;
  }

