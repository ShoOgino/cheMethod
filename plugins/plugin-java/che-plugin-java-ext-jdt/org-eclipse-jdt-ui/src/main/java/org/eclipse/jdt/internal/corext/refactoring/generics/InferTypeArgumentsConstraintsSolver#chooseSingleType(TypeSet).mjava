  private TType chooseSingleType(TypeSet typeEstimate) {
    if (typeEstimate.isUniverse() || typeEstimate.isEmpty()) {
      return null;

    } else if (typeEstimate.hasUniqueLowerBound()) {
      return typeEstimate.uniqueLowerBound();

    } else {
      EnumeratedTypeSet lowerBound = typeEstimate.lowerBound().enumerate();
      ArrayList<TType> interfaceCandidates = null;
      for (Iterator<TType> iter = lowerBound.iterator(); iter.hasNext(); ) {
        TType type = iter.next();
        if (!type.isInterface()) {
          return type;
        } else {
          if (interfaceCandidates == null) interfaceCandidates = new ArrayList<TType>(2);
          interfaceCandidates.add(type);
        }
      }

      if (interfaceCandidates == null || interfaceCandidates.size() == 0) {
        return null;
      } else if (interfaceCandidates.size() == 1) {
        return interfaceCandidates.get(0);
      } else {
        ArrayList<TType> nontaggingCandidates = getNonTaggingInterfaces(interfaceCandidates);
        if (nontaggingCandidates.size() != 0) {
          return Collections.min(nontaggingCandidates, TTypeComparator.INSTANCE);
        } else {
          return Collections.min(interfaceCandidates, TTypeComparator.INSTANCE);
        }
      }
    }
  }

