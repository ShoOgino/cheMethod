    /**
     * Visits the super types of the given <code>currentType</code>.
     *
     * @param currentType the starting type
     * @param typeHierarchy a super type hierarchy that contains <code>currentType</code>
     * @return the result from a call to {@link #visit(org.eclipse.jdt.core.IType)}, or <code>null
     *     </code> if none of the calls returned a result
     * @throws org.eclipse.jdt.core.JavaModelException unexpected problem
     */
    public Object visitInheritDoc(IType currentType, ITypeHierarchy typeHierarchy)
        throws JavaModelException {
      ArrayList<IType> visited = new ArrayList<IType>();
      visited.add(currentType);
      Object result = visitInheritDocInterfaces(visited, currentType, typeHierarchy);
      if (result != InheritDocVisitor.CONTINUE) return result;

      IType superClass;
      if (currentType.isInterface())
        superClass = currentType.getJavaProject().findType("java.lang.Object"); //$NON-NLS-1$
      else superClass = typeHierarchy.getSuperclass(currentType);

      while (superClass != null && !visited.contains(superClass)) {
        result = visit(superClass);
        if (result == InheritDocVisitor.STOP_BRANCH) {
          return null;
        } else if (result == InheritDocVisitor.CONTINUE) {
          visited.add(superClass);
          result = visitInheritDocInterfaces(visited, superClass, typeHierarchy);
          if (result != InheritDocVisitor.CONTINUE) return result;
          else superClass = typeHierarchy.getSuperclass(superClass);
        } else {
          return result;
        }
      }

      return null;
    }

