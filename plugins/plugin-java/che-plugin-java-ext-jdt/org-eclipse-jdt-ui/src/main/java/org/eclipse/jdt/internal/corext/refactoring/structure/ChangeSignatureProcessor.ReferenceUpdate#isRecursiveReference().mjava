    private boolean isRecursiveReference() {
      MethodDeclaration enclosingMethodDeclaration =
          (MethodDeclaration) ASTNodes.getParent(fNode, MethodDeclaration.class);
      if (enclosingMethodDeclaration == null) return false;

      IMethodBinding enclosingMethodBinding = enclosingMethodDeclaration.resolveBinding();
      if (enclosingMethodBinding == null) return false;

      if (fNode instanceof MethodInvocation)
        return enclosingMethodBinding == ((MethodInvocation) fNode).resolveMethodBinding();

      if (fNode instanceof SuperMethodInvocation) {
        IMethodBinding methodBinding = ((SuperMethodInvocation) fNode).resolveMethodBinding();
        return isSameMethod(methodBinding, enclosingMethodBinding);
      }

      if (fNode instanceof ClassInstanceCreation)
        return enclosingMethodBinding
            == ((ClassInstanceCreation) fNode).resolveConstructorBinding();

      if (fNode instanceof ConstructorInvocation)
        return enclosingMethodBinding
            == ((ConstructorInvocation) fNode).resolveConstructorBinding();

      if (fNode instanceof SuperConstructorInvocation) {
        return false; // Constructors don't override -> enclosing has not been changed -> no
        // recursion
      }

      if (fNode instanceof EnumConstantDeclaration) {
        return false; // cannot define enum constant inside enum constructor
      }

      Assert.isTrue(false);
      return false;
    }

