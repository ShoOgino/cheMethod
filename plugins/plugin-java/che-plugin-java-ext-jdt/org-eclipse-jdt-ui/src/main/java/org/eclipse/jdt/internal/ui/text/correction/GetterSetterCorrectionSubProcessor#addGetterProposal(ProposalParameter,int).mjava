	/**
	 * Proposes a getter for this field.
	 * 
	 * @param context the proposal parameter
	 * @param relevance relevance of this proposal
	 * @return the proposal if available or null
	 */
	private static ChangeCorrectionProposal addGetterProposal(ProposalParameter context, int relevance) {
		IMethodBinding method= findGetter(context);
		if (method != null) {
			Expression mi= createMethodInvocation(context, method, null);
			context.astRewrite.replace(context.accessNode, mi, null);

			String label= Messages.format(CorrectionMessages.GetterSetterCorrectionSubProcessor_replacewithgetter_description,
										  BasicElementLabels.getJavaCodeString(ASTNodes.asString(context.accessNode)));
			Image image= JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
			ASTRewriteCorrectionProposal
					proposal= new ASTRewriteCorrectionProposal(label, context.compilationUnit, context.astRewrite, relevance, image);
			return proposal;
		} else {
//			IJavaElement element= context.variableBinding.getJavaElement();
//			if (element instanceof IField) {
//				IField field= (IField) element;
//				try {
//					if (RefactoringAvailabilityTester.isSelfEncapsulateAvailable(field))
//						return new SelfEncapsulateFieldProposal(relevance, field);
//				} catch (JavaModelException e) {
//					JavaPlugin.log(e);
//				}
//			}
		}
		return null;
	}

