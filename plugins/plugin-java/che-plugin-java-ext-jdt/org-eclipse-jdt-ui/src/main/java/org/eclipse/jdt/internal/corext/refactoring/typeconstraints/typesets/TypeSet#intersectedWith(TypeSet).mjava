  /**
   * Computes and returns a <em>new</em> TypeSet representing the intersection of the receiver with
   * s2. Does not modify the receiver or argument sets.
   *
   * @param s2 another type set
   * @return the new TypeSet
   */
  public TypeSet intersectedWith(TypeSet s2) {
    if (s2.isUniverse()) return makeClone();
    else if (isUniverse()) return s2.makeClone();
    else if (isEmpty() || s2.isEmpty()) return getTypeSetEnvironment().getEmptyTypeSet();
    else if (isSingleton()) {
      if (s2.contains(anyMember())) return makeClone();
      else return getTypeSetEnvironment().getEmptyTypeSet();
    } else if (s2.isSingleton()) {
      if (contains(s2.anyMember())) return s2.makeClone();
      else return getTypeSetEnvironment().getEmptyTypeSet();
    } else if (s2 instanceof TypeSetIntersection) {
      TypeSetIntersection x = (TypeSetIntersection) s2;
      // xsect(A,xsect(A,B)) = xsect(A,B) and
      // xsect(B,xsect(A,B)) = xsect(A,B)
      if (x.getLHS().equals(this) || x.getRHS().equals(this)) return x;
    }

    TypeSet result = specialCasesIntersectedWith(s2);

    if (result != null) return result;
    else return new TypeSetIntersection(this, s2);
  }

