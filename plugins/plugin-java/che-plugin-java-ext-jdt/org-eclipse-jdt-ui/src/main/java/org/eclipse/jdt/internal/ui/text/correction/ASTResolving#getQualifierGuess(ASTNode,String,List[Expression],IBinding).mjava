  /**
   * Finds all type bindings that contain a method of a given signature
   *
   * @param searchRoot the ast node to start the search from
   * @param selector the method name
   * @param arguments the method arguments
   * @param context the context in which the method would be called
   * @return returns all types known in the AST that have a method with a given name
   */
  public static ITypeBinding[] getQualifierGuess(
      ASTNode searchRoot,
      final String selector,
      List<Expression> arguments,
      final IBinding context) {
    final int nArgs = arguments.size();
    final ArrayList<ITypeBinding> result = new ArrayList<ITypeBinding>();

    // test if selector is a object method
    ITypeBinding binding =
        searchRoot.getAST().resolveWellKnownType("java.lang.Object"); //$NON-NLS-1$
    IMethodBinding[] objectMethods = binding.getDeclaredMethods();
    for (int i = 0; i < objectMethods.length; i++) {
      IMethodBinding meth = objectMethods[i];
      if (meth.getName().equals(selector) && meth.getParameterTypes().length == nArgs) {
        return new ITypeBinding[] {binding};
      }
    }

    visitAllBindings(
        searchRoot,
        new TypeBindingVisitor() {
          private HashSet<String> fVisitedBindings = new HashSet<String>(100);

          public boolean visit(ITypeBinding node) {
            node = Bindings.normalizeTypeBinding(node);
            if (node == null) {
              return true;
            }

            if (!fVisitedBindings.add(node.getKey())) {
              return true;
            }
            if (node.isGenericType()) {
              return true; // only look at  parameterized types
            }
            if (context != null && !isUseableTypeInContext(node, context, false)) {
              return true;
            }

            IMethodBinding[] methods = node.getDeclaredMethods();
            for (int i = 0; i < methods.length; i++) {
              IMethodBinding meth = methods[i];
              if (meth.getName().equals(selector) && meth.getParameterTypes().length == nArgs) {
                result.add(node);
              }
            }
            return true;
          }
        });
    return result.toArray(new ITypeBinding[result.size()]);
  }

