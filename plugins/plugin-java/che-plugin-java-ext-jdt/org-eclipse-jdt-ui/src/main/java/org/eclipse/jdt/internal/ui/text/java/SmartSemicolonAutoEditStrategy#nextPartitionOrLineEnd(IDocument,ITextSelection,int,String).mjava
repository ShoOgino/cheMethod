  /**
   * Returns a position in the first java partition after the last non-empty and non-comment
   * partition. There is no non-whitespace from the returned position to the end of the partition it
   * is contained in.
   *
   * @param document the document being modified
   * @param line the line under investigation
   * @param offset the caret offset into <code>line</code>
   * @param partitioning the document partitioning
   * @return the position of the next Java partition, or the end of <code>line</code>
   */
  private static int nextPartitionOrLineEnd(
      IDocument document, ITextSelection line, int offset, String partitioning) {
    // run relative to document
    final int docOffset = offset + line.getOffset();
    final int eol = line.getOffset() + line.getLength();
    int nextPartitionPos = eol; // init with line end
    int validPosition = docOffset;

    try {
      ITypedRegion partition =
          TextUtilities.getPartition(document, partitioning, nextPartitionPos, true);
      validPosition = getValidPositionForPartition(document, partition, eol);
      while (validPosition == -1) {
        nextPartitionPos = partition.getOffset() - 1;
        if (nextPartitionPos < docOffset) {
          validPosition = docOffset;
          break;
        }
        partition = TextUtilities.getPartition(document, partitioning, nextPartitionPos, false);
        validPosition = getValidPositionForPartition(document, partition, eol);
      }
    } catch (BadLocationException e) {
    }

    validPosition = Math.max(validPosition, docOffset);
    // make relative to line
    validPosition -= line.getOffset();
    return validPosition;
  }

