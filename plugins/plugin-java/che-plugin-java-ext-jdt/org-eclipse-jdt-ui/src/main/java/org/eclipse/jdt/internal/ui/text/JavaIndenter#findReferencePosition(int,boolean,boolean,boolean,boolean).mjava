  /**
   * Returns the reference position regarding to indentation for <code>position</code>, or <code>
   * NOT_FOUND</code>.<code>fIndent</code> will contain the relative indentation (in indentation
   * units, not characters) after the call. If there is a special alignment (e.g. for a method
   * declaration where parameters should be aligned), <code>fAlign</code> will contain the absolute
   * position of the alignment reference in <code>fDocument</code>, otherwise <code>fAlign</code> is
   * set to <code>JavaHeuristicScanner.NOT_FOUND</code>. This method calls {@link
   * #findReferencePosition(int, boolean, boolean, boolean, boolean, boolean)
   * findReferencePosition(offset, danglingElse, matchBrace, matchParen, matchCase, throwsClause)}
   * where <code>throwsClause</code> indicates whether a throws clause was found at <code>position
   * </code>.
   *
   * @param offset the offset for which the reference is computed
   * @param danglingElse whether a dangling else should be assumed at <code>position</code>
   * @param matchBrace whether the position of the matching brace should be returned instead of
   *     doing code analysis
   * @param matchParen whether the position of the matching parenthesis should be returned instead
   *     of doing code analysis
   * @param matchCase whether the position of a switch statement reference should be returned
   *     (either an earlier case statement or the switch block brace)
   * @return the reference statement relative to which <code>position</code> should be indented, or
   *     {@link JavaHeuristicScanner#NOT_FOUND}
   */
  public int findReferencePosition(
      int offset, boolean danglingElse, boolean matchBrace, boolean matchParen, boolean matchCase) {
    return findReferencePosition(offset, danglingElse, matchBrace, matchParen, matchCase, false);
  }

