  private void appendInternalArchiveLabel(IPackageFragmentRoot root, long flags) {
    IResource resource = root.getResource();
    boolean rootQualified = getFlag(flags, JavaElementLabels.ROOT_QUALIFIED);
    if (rootQualified) {
      fBuffer.append(root.getPath().makeRelative().toString());
    } else {
      fBuffer.append(root.getElementName());
      int offset = fBuffer.length();
      boolean referencedPostQualified =
          getFlag(flags, JavaElementLabels.REFERENCED_ROOT_POST_QUALIFIED);
      if (referencedPostQualified && isReferenced(root)) {
        fBuffer.append(JavaElementLabels.CONCAT_STRING);
        fBuffer.append(resource.getParent().getFullPath().makeRelative().toString());
      } else if (getFlag(flags, JavaElementLabels.ROOT_POST_QUALIFIED)) {
        fBuffer.append(JavaElementLabels.CONCAT_STRING);
        fBuffer.append(root.getParent().getPath().makeRelative().toString());
      }
      if (referencedPostQualified) {
        try {
          IClasspathEntry referencingEntry =
              JavaModelUtil.getClasspathEntry(root).getReferencingEntry();
          if (referencingEntry != null) {
            fBuffer.append(
                Messages.format(
                    JavaUIMessages.JavaElementLabels_onClassPathOf,
                    new Object[] {
                      Name.CLASS_PATH.toString(), referencingEntry.getPath().lastSegment()
                    }));
          }
        } catch (JavaModelException e) {
          // ignore
        }
      }
      if (getFlag(flags, JavaElementLabels.COLORIZE)) {
        fBuffer.setStyle(offset, fBuffer.length() - offset, QUALIFIER_STYLE);
      }
    }
  }

