	/**
	 * Returns the precedence of the expression. Expression
	 * with higher precedence are executed before expressions
	 * with lower precedence.
	 * i.e. in:
	 * <br><code> int a= ++3--;</code></br>
	 *
	 * the  precedence order is
	 * <ul>
	 * <li>3</li>
	 * <li>++</li>
	 * <li>--</li>
	 * <li>=</li>
	 * </ul>
	 * 1. 3 -(++)-> 4<br>
	 * 2. 4 -(--)-> 3<br>
	 * 3. 3 -(=)-> a<br>
	 *
	 * @param expression the expression to determine the precedence for
	 * @return the precedence the higher to stronger the binding to its operand(s)
	 */
	public static int getExpressionPrecedence(Expression expression) {
		if (expression instanceof InfixExpression) {
			return getOperatorPrecedence(((InfixExpression)expression).getOperator());
		} else if (expression instanceof Assignment) {
			return ASSIGNMENT;
		} else if (expression instanceof ConditionalExpression) {
			return CONDITIONAL;
		} else if (expression instanceof InstanceofExpression) {
			return RELATIONAL;
		} else if (expression instanceof CastExpression) {
			return TYPEGENERATION;
		} else if (expression instanceof ClassInstanceCreation) {
			return POSTFIX;
		} else if (expression instanceof PrefixExpression) {
			return PREFIX;
		} else if (expression instanceof FieldAccess) {
			return POSTFIX;
		} else if (expression instanceof MethodInvocation) {
			return POSTFIX;
		} else if (expression instanceof ArrayAccess) {
			return POSTFIX;
		} else if (expression instanceof PostfixExpression) {
			return POSTFIX;
		}
		return Integer.MAX_VALUE;
	}

