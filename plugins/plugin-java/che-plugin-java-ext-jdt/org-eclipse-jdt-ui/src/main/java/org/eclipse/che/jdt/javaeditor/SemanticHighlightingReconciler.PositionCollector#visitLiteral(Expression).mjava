    private boolean visitLiteral(Expression node) {
      fToken.update(node);
      for (int i = 0, n = fJobSemanticHighlightings.length; i < n; i++) {
        SemanticHighlighting semanticHighlighting = fJobSemanticHighlightings[i];
        if (semanticHighlighting.consumesLiteral(fToken)) {
          int offset = node.getStartPosition();
          int length = node.getLength();
          if (offset > -1 && length > 0) addPosition(offset, length, semanticHighlighting);
          break;
        }
      }
      fToken.clear();
      return false;
    }

