  /**
   * Generates the initializer for an iterator based <code>for</code> loop, which declares and
   * initializes the variable to loop over.
   *
   * @param rewrite the instance of {@link ASTRewrite}
   * @param loopVariableName the proposed name of the loop variable
   * @return a {@link VariableDeclarationExpression} to use as initializer
   */
  private VariableDeclarationExpression getIteratorBasedForInitializer(
      ASTRewrite rewrite, SimpleName loopVariableName) {
    AST ast = rewrite.getAST();
    IMethodBinding iteratorMethodBinding =
        Bindings.findMethodInHierarchy(
            fExpressionType, "iterator", new ITypeBinding[] {}); // $NON-NLS-1$
    // initializing fragment
    VariableDeclarationFragment varDeclarationFragment = ast.newVariableDeclarationFragment();
    varDeclarationFragment.setName(loopVariableName);
    MethodInvocation iteratorExpression = ast.newMethodInvocation();
    iteratorExpression.setName(ast.newSimpleName(iteratorMethodBinding.getName()));
    iteratorExpression.setExpression((Expression) rewrite.createCopyTarget(fCurrentExpression));
    varDeclarationFragment.setInitializer(iteratorExpression);

    // declaration
    VariableDeclarationExpression varDeclarationExpression =
        ast.newVariableDeclarationExpression(varDeclarationFragment);
    varDeclarationExpression.setType(
        getImportRewrite()
            .addImport(
                iteratorMethodBinding.getReturnType(),
                ast,
                new ContextSensitiveImportRewriteContext(fCurrentNode, getImportRewrite())));

    return varDeclarationExpression;
  }

