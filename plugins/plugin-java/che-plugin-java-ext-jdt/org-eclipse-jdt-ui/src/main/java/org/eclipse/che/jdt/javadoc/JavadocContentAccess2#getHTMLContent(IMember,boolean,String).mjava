  /**
   * Gets an IMember's Javadoc comment content from the source or Javadoc attachment and renders the
   * tags and links in HTML. Returns <code>null</code> if the member does not contain a Javadoc
   * comment or if no source is available.
   *
   * @param member the member to get the Javadoc of
   * @param useAttachedJavadoc if <code>true</code> Javadoc will be extracted from attached Javadoc
   *     if there's no source
   * @return the Javadoc comment content in HTML or <code>null</code> if the member does not have a
   *     Javadoc comment or if no source is available
   * @throws org.eclipse.jdt.core.JavaModelException is thrown when the element's Javadoc cannot be
   *     accessed
   */
  public static String getHTMLContent(IMember member, boolean useAttachedJavadoc, String urlPrefix)
      throws JavaModelException {
    String sourceJavadoc = getHTMLContentFromSource(member, urlPrefix);
    if (sourceJavadoc == null
        || sourceJavadoc.length() == 0
        || sourceJavadoc.trim().equals("{@inheritDoc}")) { // $NON-NLS-1$
      if (useAttachedJavadoc) {
        if (member.getOpenable().getBuffer() == null) { // only if no source available
          return member.getAttachedJavadoc(null);
        }
        if (canInheritJavadoc(member)) {
          IMethod method = (IMethod) member;
          String attachedDocInHierarchy = findAttachedDocInHierarchy(method);

          // Prepend "Overrides:" / "Specified by:" reference headers to make clear
          // that description has been copied from super method.
          if (attachedDocInHierarchy == null) return sourceJavadoc;
          StringBuffer superMethodReferences = createSuperMethodReferences(method, urlPrefix);
          if (superMethodReferences == null) return attachedDocInHierarchy;
          superMethodReferences.append(attachedDocInHierarchy);
          return superMethodReferences.toString();
        }
      }
    }
    return sourceJavadoc;
  }

