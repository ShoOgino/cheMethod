  private RefactoringStatus initialize(JavaRefactoringArguments extended) {
    final String handle = extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT);
    if (handle != null) {
      final IJavaElement element =
          JavaRefactoringDescriptorUtil.handleToElement(extended.getProject(), handle, false);
      if (element != null && element.exists()) {
        if (element.getElementType() == IJavaElement.COMPILATION_UNIT) {
          fCu = (ICompilationUnit) element;
        } else if (element.getElementType() == IJavaElement.LOCAL_VARIABLE) {
          fLocalVariable = (ILocalVariable) element;
          fCu = (ICompilationUnit) fLocalVariable.getAncestor(IJavaElement.COMPILATION_UNIT);
          if (fCu == null)
            return JavaRefactoringDescriptorUtil.createInputFatalStatus(
                element, getProcessorName(), IJavaRefactorings.RENAME_LOCAL_VARIABLE);
        } else
          return JavaRefactoringDescriptorUtil.createInputFatalStatus(
              element, getProcessorName(), IJavaRefactorings.RENAME_LOCAL_VARIABLE);
      } else
        return JavaRefactoringDescriptorUtil.createInputFatalStatus(
            element, getProcessorName(), IJavaRefactorings.RENAME_LOCAL_VARIABLE);
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT));
    final String name = extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_NAME);
    if (name != null && !"".equals(name)) // $NON-NLS-1$
    setNewElementName(name);
    else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_NAME));
    if (fCu != null && fLocalVariable == null) {
      final String selection =
          extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_SELECTION);
      if (selection != null) {
        int offset = -1;
        int length = -1;
        final StringTokenizer tokenizer = new StringTokenizer(selection);
        if (tokenizer.hasMoreTokens()) offset = Integer.valueOf(tokenizer.nextToken()).intValue();
        if (tokenizer.hasMoreTokens()) length = Integer.valueOf(tokenizer.nextToken()).intValue();
        if (offset >= 0 && length >= 0) {
          try {
            final IJavaElement[] elements = fCu.codeSelect(offset, length);
            if (elements != null) {
              for (int index = 0; index < elements.length; index++) {
                final IJavaElement element = elements[index];
                if (element instanceof ILocalVariable) fLocalVariable = (ILocalVariable) element;
              }
            }
            if (fLocalVariable == null)
              return JavaRefactoringDescriptorUtil.createInputFatalStatus(
                  null, getProcessorName(), IJavaRefactorings.RENAME_LOCAL_VARIABLE);
          } catch (JavaModelException exception) {
            JavaPlugin.log(exception);
          }
        } else
          return RefactoringStatus.createFatalErrorStatus(
              Messages.format(
                  RefactoringCoreMessages.InitializableRefactoring_illegal_argument,
                  new Object[] {selection, JavaRefactoringDescriptorUtil.ATTRIBUTE_SELECTION}));
      } else
        return RefactoringStatus.createFatalErrorStatus(
            Messages.format(
                RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
                JavaRefactoringDescriptorUtil.ATTRIBUTE_SELECTION));
    }
    final String references =
        extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_REFERENCES);
    if (references != null) {
      fUpdateReferences = Boolean.valueOf(references).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_REFERENCES));
    return new RefactoringStatus();
  }

