  /**
   * Creates a new refactoring descriptor.
   *
   * @param project the non-empty name of the project associated with this refactoring, or <code>
   *     null</code> for a workspace refactoring
   * @param description a non-empty human-readable description of the particular refactoring
   *     instance
   * @param comment the human-readable comment of the particular refactoring instance, or <code>null
   *     </code> for no comment
   * @param arguments a map of arguments that will be persisted and describes all settings for this
   *     refactoring
   * @param flags the flags of the refactoring descriptor
   * @throws IllegalArgumentException if the argument map contains invalid keys/values
   */
  public ExtractClassDescriptor(
      String project, String description, String comment, Map arguments, int flags)
      throws IllegalArgumentException {
    super(IJavaRefactorings.EXTRACT_CLASS, project, description, comment, arguments, flags);
    if (JavaRefactoringDescriptorUtil.getString(arguments, OLD_FIELD_COUNT, true) != null) {
      String[] oldFieldNames =
          JavaRefactoringDescriptorUtil.getStringArray(
              arguments, OLD_FIELD_COUNT, OLD_FIELD_NAME, 0);
      boolean[] createField =
          JavaRefactoringDescriptorUtil.getBooleanArray(
              arguments, CREATE_FIELD_COUNT, CREATE_FIELD, 0);
      fFields = new Field[oldFieldNames.length];
      for (int i = 0; i < oldFieldNames.length; i++) {
        fFields[i] = new Field(oldFieldNames[i]);
        fFields[i].setCreateField(createField[i]);
        if (createField[i])
          fFields[i].setNewFieldName(
              JavaRefactoringDescriptorUtil.getString(
                  arguments, JavaRefactoringDescriptorUtil.getAttributeName(NEW_FIELD_NAME, i)));
      }
    }
  }

