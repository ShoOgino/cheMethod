  /**
   * Don't use this method directly, use CodeGeneration.
   *
   * @param templateID the template id of the type body to get. Valid id's are {@link
   *     CodeTemplateContextType#CLASSBODY_ID}, {@link CodeTemplateContextType#INTERFACEBODY_ID},
   *     {@link CodeTemplateContextType#ENUMBODY_ID}, {@link
   *     CodeTemplateContextType#ANNOTATIONBODY_ID},
   * @param cu the compilation unit to which the template is added
   * @param typeName the type name
   * @param lineDelim the line delimiter to use
   * @return return the type body template or <code>null</code>
   * @throws CoreException thrown if the template could not be evaluated
   * @see org.eclipse.jdt.ui.CodeGeneration#getTypeBody(String, ICompilationUnit, String, String)
   */
  public static String getTypeBody(
      String templateID, ICompilationUnit cu, String typeName, String lineDelim)
      throws CoreException {
    if (!VALID_TYPE_BODY_TEMPLATES.contains(templateID)) {
      throw new IllegalArgumentException("Invalid code template ID: " + templateID); //$NON-NLS-1$
    }

    Template template = getCodeTemplate(templateID, cu.getJavaProject());
    if (template == null) {
      return null;
    }
    CodeTemplateContext context =
        new CodeTemplateContext(template.getContextTypeId(), cu.getJavaProject(), lineDelim);
    context.setCompilationUnitVariables(cu);
    context.setVariable(CodeTemplateContextType.TYPENAME, typeName);

    return evaluateTemplate(context, template);
  }

