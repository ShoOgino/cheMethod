	public RefactoringStatus checkInitialConditions(ImportRewrite rewriter) {
		RefactoringStatus result = getStatus();
		checkExpression(result);
		if (result.hasFatalError())
			return result;

		List<ASTNode> validDestinations = new ArrayList<ASTNode>();
		ASTNode destination = ASTResolving.findParentType(fEnclosingBodyDeclaration.getParent());
		while (destination != null) {
			if (isValidDestination(destination)) {
				validDestinations.add(destination);
			}
			destination = ASTResolving.findParentType(destination.getParent());
		}
		if (validDestinations.size() == 0) {
			result.addFatalError(RefactoringCoreMessages.ExtractMethodAnalyzer_no_valid_destination_type);
			return result;
		}

		fReturnKind = UNDEFINED;
		fMaxVariableId = LocalVariableIndex.perform(fEnclosingBodyDeclaration);
		if (analyzeSelection(result).hasFatalError())
			return result;

		int returns = fReturnKind == NO ? 0 : 1;
		if (fReturnValue != null) {
			fReturnKind = ACCESS_TO_LOCAL;
			returns++;
		}
		if (isExpressionSelected()) {
			fReturnKind = EXPRESSION;
			returns++;
		}

		if (returns > 1) {
			result.addFatalError(RefactoringCoreMessages.ExtractMethodAnalyzer_ambiguous_return_value,
								 JavaStatusContext.create(fCUnit, getSelection()));
			fReturnKind = MULTIPLE;
			return result;
		}
		initReturnType(rewriter);
		return result;
	}

