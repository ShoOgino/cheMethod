  //	public static IJavaElement getElementAtOffset(ITypeRoot input, ITextSelection selection) throws
  // JavaModelException {
  //		if (input instanceof ICompilationUnit) {
  //			JavaModelUtil.reconcile((ICompilationUnit)input);
  //		}
  //		IJavaElement ref = input.getElementAt(selection.getOffset());
  //		if (ref == null)
  //			return input;
  //		return ref;
  //	}
  //
  //	public static IJavaElement resolveEnclosingElement(JavaEditor editor, ITextSelection selection)
  // throws JavaModelException {
  //		ITypeRoot input = getInput(editor);
  //		if (input != null)
  //			return resolveEnclosingElement(input, selection);
  //		return null;
  //	}
  //
  public static IJavaElement resolveEnclosingElement(IJavaElement input, ITextSelection selection)
      throws JavaModelException {
    IJavaElement atOffset = null;
    if (input instanceof ICompilationUnit) {
      ICompilationUnit cunit = (ICompilationUnit) input;
      JavaModelUtil.reconcile(cunit);
      atOffset = cunit.getElementAt(selection.getOffset());
    } else if (input instanceof IClassFile) {
      IClassFile cfile = (IClassFile) input;
      atOffset = cfile.getElementAt(selection.getOffset());
    } else {
      return null;
    }
    if (atOffset == null) {
      return input;
    } else {
      int selectionEnd = selection.getOffset() + selection.getLength();
      IJavaElement result = atOffset;
      if (atOffset instanceof ISourceReference) {
        ISourceRange range = ((ISourceReference) atOffset).getSourceRange();
        while (range.getOffset() + range.getLength() < selectionEnd) {
          result = result.getParent();
          if (!(result instanceof ISourceReference)) {
            result = input;
            break;
          }
          range = ((ISourceReference) result).getSourceRange();
        }
      }
      return result;
    }
  }
  //
  //	/**
  //	 * Shows a dialog for resolving an ambiguous Java element. Utility method that can be called by
  // subclasses.
  //	 *
  //	 * @param elements the elements to select from
  //	 * @param shell the parent shell
  //	 * @param title the title of the selection dialog
  //	 * @param message the message of the selection dialog
  //	 * @return returns the selected element or <code>null</code> if the dialog has been cancelled
  //	 */
  //	public static IJavaElement selectJavaElement(IJavaElement[] elements, Shell shell, String
  // title, String message) {
  //		int nResults = elements.length;
  //		if (nResults == 0)
  //			return null;
  //		if (nResults == 1)
  //			return elements[0];
  //
  //		int flags = JavaElementLabelProvider.SHOW_DEFAULT | JavaElementLabelProvider.SHOW_QUALIFIED |
  // JavaElementLabelProvider.SHOW_ROOT;
  //
  //		ElementListSelectionDialog dialog = new ElementListSelectionDialog(shell, new
  // JavaElementLabelProvider(flags));
  //		dialog.setTitle(title);
  //		dialog.setMessage(message);
  //		dialog.setElements(elements);
  //
  //		if (dialog.open() == Window.OK) {
  //			return (IJavaElement)dialog.getFirstResult();
  //		}
  //		return null;
  //	}

