  /**
   * From <code>position</code> to the left, eats any whitespace and then a pair of brackets as used
   * to declare an array return type like
   *
   * <pre>String [ ]</pre>
   *
   * . The return value is either the position of the opening bracket or <code>position</code> if no
   * pair of brackets can be parsed.
   *
   * @param document the document being modified
   * @param position the first character position in <code>document</code> to be considered
   * @param partitioning the document partitioning
   * @return the smallest character position of bracket pair or <code>position</code>
   */
  private static int eatBrackets(IDocument document, int position, String partitioning) {
    // accept array return type
    int pos = firstNonWhitespaceBackward(document, position, partitioning, -1);
    try {
      if (pos > 1 && document.getChar(pos) == ']') {
        pos = firstNonWhitespaceBackward(document, pos - 1, partitioning, -1);
        if (pos > 0 && document.getChar(pos) == '[') return pos;
      }
    } catch (BadLocationException e) {
      // won't happen
    }
    return position;
  }

