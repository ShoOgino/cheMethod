    /*
     * @see ASTVisitor#visit(EnumDeclaration)
     * @since 3.0
     */
    @Override
    public boolean visit(EnumDeclaration node) {
        if (node.getJavadoc() != null) {
            node.getJavadoc().accept(this);
        }
        printModifiers(node.modifiers());
        this.fBuffer.append("enum ");//$NON-NLS-1$
        node.getName().accept(this);
        this.fBuffer.append(" ");//$NON-NLS-1$
        if (!node.superInterfaceTypes().isEmpty()) {
            this.fBuffer.append("implements ");//$NON-NLS-1$
            for (Iterator<Type> it = node.superInterfaceTypes().iterator(); it.hasNext(); ) {
                Type t = it.next();
                t.accept(this);
                if (it.hasNext()) {
                    this.fBuffer.append(", ");//$NON-NLS-1$
                }
            }
            this.fBuffer.append(" ");//$NON-NLS-1$
        }
        this.fBuffer.append("{");//$NON-NLS-1$
        for (Iterator<EnumConstantDeclaration> it = node.enumConstants().iterator(); it.hasNext(); ) {
            EnumConstantDeclaration d = it.next();
            d.accept(this);
            // enum constant declarations do not include punctuation
            if (it.hasNext()) {
                // enum constant declarations are separated by commas
                this.fBuffer.append(", ");//$NON-NLS-1$
            }
        }
        if (!node.bodyDeclarations().isEmpty()) {
            this.fBuffer.append("; ");//$NON-NLS-1$
            for (Iterator<BodyDeclaration> it = node.bodyDeclarations().iterator(); it.hasNext(); ) {
                BodyDeclaration d = it.next();
                d.accept(this);
                // other body declarations include trailing punctuation
            }
        }
        this.fBuffer.append("}");//$NON-NLS-1$
        return false;
    }

