  /*
   * @see ICompletionProposalExtension#apply(IDocument, char)
   */
  @Override
  public void apply(final IDocument document, char trigger, int offset) {
    super.apply(document, trigger, offset);

    int baseOffset = getReplacementOffset();
    String replacement = getReplacementString();

    if (fPositions != null && getTextViewer() != null) {

      LinkedModeModelImpl model = new LinkedModeModelImpl();

      for (int i = 0; i < fPositions.length; i++) {
        LinkedPositionGroupImpl group = new LinkedPositionGroupImpl();
        int positionOffset = fPositions[i].getOffset();
        int positionLength = fPositions[i].getLength();

        if (fChoices[i].length < 2) {
          RegionImpl region = new RegionImpl();
          region.setOffset(positionOffset);
          region.setLength(positionLength);
          //                        group.addPositions(new LinkedPosition(document, positionOffset, positionLength, LinkedPositionGroup.NO_STOP));
          group.addPositions(region);
        } else {
          //                        ensurePositionCategoryInstalled(document, model);
          //                        document.addPosition(getCategory(), fPositions[i]);
          RegionImpl region = new RegionImpl();
          region.setOffset(positionOffset);
          region.setLength(positionLength);
          //                        group.addPositions(
          //                                new ProposalPosition(document, positionOffset, positionLength, LinkedPositionGroup.NO_STOP, fChoices[i]));
          group.addPositions(region);
          LinkedDataImpl data = new LinkedDataImpl();
          for (ICompletionProposal proposal : fChoices[i]) {
            data.addValues(proposal.getDisplayString());
          }
          group.setData(data);
        }
        model.addGroups(group);
      }
      model.setEscapePosition(baseOffset + replacement.length());
      this.linkedModel = model;

      //                model.forceInstall();
      //                JavaEditor editor = getJavaEditor();
      //                if (editor != null) {
      //                    model.addLinkingListener(new EditorHighlightingSynchronizer(editor));
      //                }

      //                LinkedModeUI ui = new EditorLinkedModeUI(model, getTextViewer());
      //                ui.setExitPosition(getTextViewer(), baseOffset + replacement.length(), 0, Integer.MAX_VALUE);
      //                // exit character can be either ')' or ';'
      //                final char exitChar = replacement.charAt(replacement.length() - 1);
      //                ui.setExitPolicy(new ExitPolicy(exitChar, document) {
      //                    @Override
      //                    public ExitFlags doExit(LinkedModeModel model2, VerifyEvent event, int offset2, int length) {
      //                        if (event.character == ',') {
      //                            for (int i = 0; i < fPositions.length - 1; i++) { // not for the last one
      //                                Position position = fPositions[i];
      //                                if (position.offset <= offset2 && offset2 + length <= position.offset + position.length) {
      //                                    try {
      //                                        ITypedRegion partition = TextUtilities
      //                                                .getPartition(document, IJavaPartitions.JAVA_PARTITIONING, offset2 + length, false);
      //                                        if (IDocument.DEFAULT_CONTENT_TYPE.equals(partition.getType())
      //                                            || offset2 + length == partition.getOffset() + partition.getLength()) {
      //                                            event.character = '\t';
      //                                            event.keyCode = SWT.TAB;
      //                                            return null;
      //                                        }
      //                                    } catch (BadLocationException e) {
      //                                        // continue; not serious enough to log
      //                                    }
      //                                }
      //                            }
      //                        } else if (event.character == ')' && exitChar != ')') {
      //                            // exit from link mode when user is in the last ')' position.
      //                            Position position = fPositions[fPositions.length - 1];
      //                            if (position.offset <= offset2 && offset2 + length <= position.offset + position.length) {
      //								return new ExitFlags(ILinkedModeListener.UPDATE_CARET, false);
      //							}
      //						}
      //						return super.doExit(model2, event, offset2, length);
      //					}
      //				});
      //				ui.setCyclingMode(LinkedModeUI.CYCLE_WHEN_NO_PARENT);
      //				ui.setDoContextInfo(true);
      //				ui.enter();
      fSelectedRegion = new Region(baseOffset + replacement.length(), 0);

    } else {
      fSelectedRegion = new Region(baseOffset + replacement.length(), 0);
    }
  }

