    /**
     * Computes the insertion index to be used to add the given member to the
     * the list <code>container</code>.
     * @param member the member to add
     * @param container a list containing objects of type <code>BodyDeclaration</code>
     * @return the insertion index to be used
     */
    public static int getInsertionIndex(BodyDeclaration member, List<? extends BodyDeclaration> container) {
        int containerSize = container.size();

        MembersOrderPreferenceCache orderStore = JavaPlugin.getDefault().getMemberOrderPreferenceCache();

        int orderIndex = getOrderPreference(member, orderStore);

        int insertPos = containerSize;
        int insertPosOrderIndex = -1;

        for (int i = containerSize - 1; i >= 0; i--) {
            int currOrderIndex = getOrderPreference(container.get(i), orderStore);
            if (orderIndex == currOrderIndex) {
                if (insertPosOrderIndex != orderIndex) { // no perfect match yet
                    insertPos = i + 1; // after a same kind
                    insertPosOrderIndex = orderIndex; // perfect match
                }
            } else if (insertPosOrderIndex != orderIndex) { // not yet a perfect match
                if (currOrderIndex < orderIndex) { // we are bigger
                    if (insertPosOrderIndex == -1) {
                        insertPos = i + 1; // after
                        insertPosOrderIndex = currOrderIndex;
                    }
                } else {
                    insertPos = i; // before
                    insertPosOrderIndex = currOrderIndex;
                }
            }
        }
        return insertPos;
    }

