    /**
     * Verifies the destination.
     *
     * @param destination the destination
     * @param location the location
     * @return returns the status
     * @throws JavaModelException should not happen
     */
    protected RefactoringStatus verifyDestination(IJavaElement destination, int location)
        throws JavaModelException {
      Assert.isNotNull(destination);
      if (!fCheckDestination) return new RefactoringStatus();
      if (!destination.exists())
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.ReorgPolicyFactory_doesnotexist1);
      if (destination instanceof IJavaModel)
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.ReorgPolicyFactory_jmodel);
      if (!(destination instanceof ICompilationUnit)
          && !ReorgUtils.isInsideCompilationUnit(destination))
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.ReorgPolicyFactory_cannot);

      ICompilationUnit destinationCu = getEnclosingCompilationUnit(destination);
      Assert.isNotNull(destinationCu);
      if (destinationCu.isReadOnly())
        return RefactoringStatus.createFatalErrorStatus(
            RefactoringCoreMessages.ReorgPolicyFactory_cannot_modify);

      switch (destination.getElementType()) {
        case IJavaElement.COMPILATION_UNIT:
          if (location != IReorgDestination.LOCATION_ON)
            return RefactoringStatus.createFatalErrorStatus(
                RefactoringCoreMessages.ReorgPolicyFactory_cannot);

          int[] types0 =
              new int[] {
                IJavaElement.TYPE,
                IJavaElement.PACKAGE_DECLARATION,
                IJavaElement.IMPORT_CONTAINER,
                IJavaElement.IMPORT_DECLARATION
              };
          if (!ReorgUtils.hasOnlyElementsOfType(getJavaElements(), types0)) {
            if (JavaElementUtil.getMainType(destinationCu) == null
                || !ReorgUtils.hasOnlyElementsOfType(
                    getJavaElements(),
                    new int[] {
                      IJavaElement.FIELD,
                      IJavaElement.INITIALIZER,
                      IJavaElement.METHOD,
                      IJavaElement.TYPE
                    }))
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);
          }

          break;
        case IJavaElement.PACKAGE_DECLARATION: // drop nothing
          return RefactoringStatus.createFatalErrorStatus(
              RefactoringCoreMessages.ReorgPolicyFactory_package_decl);
        case IJavaElement.IMPORT_CONTAINER:
          if (location == IReorgDestination.LOCATION_ON) {
            if (ReorgUtils.hasElementsNotOfType(getJavaElements(), IJavaElement.IMPORT_DECLARATION))
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);
          } else {
            if (ReorgUtils.hasElementsNotOfType(getJavaElements(), IJavaElement.IMPORT_CONTAINER))
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);
          }

          break;
        case IJavaElement.IMPORT_DECLARATION: // drop import declarations before/after
          if (location == IReorgDestination.LOCATION_ON)
            return RefactoringStatus.createFatalErrorStatus(
                RefactoringCoreMessages.ReorgPolicyFactory_cannot);

          if (ReorgUtils.hasElementsNotOfType(getJavaElements(), IJavaElement.IMPORT_DECLARATION))
            return RefactoringStatus.createFatalErrorStatus(
                RefactoringCoreMessages.ReorgPolicyFactory_cannot);

          break;
        case IJavaElement.FIELD: // fall thru
        case IJavaElement.INITIALIZER: // fall thru
        case IJavaElement.METHOD: // fall thru
          if (location == IReorgDestination.LOCATION_ON) {
            // can paste on itself (drop on itself is disabled in the SelectionTransferDropAdapter)
            if (getJavaElements().length != 1)
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);

            if (!destination.equals(getJavaElements()[0]))
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);
          } else {
            int[] types =
                new int[] {
                  IJavaElement.FIELD,
                  IJavaElement.INITIALIZER,
                  IJavaElement.METHOD,
                  IJavaElement.TYPE
                };
            if (!ReorgUtils.hasOnlyElementsOfType(getJavaElements(), types))
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);
          }

          break;
        case IJavaElement.TYPE:
          if (location == IReorgDestination.LOCATION_ON) { // can drop type members
            int[] types1 =
                new int[] {
                  IJavaElement.FIELD,
                  IJavaElement.INITIALIZER,
                  IJavaElement.METHOD,
                  IJavaElement.TYPE
                };
            if (!ReorgUtils.hasOnlyElementsOfType(getJavaElements(), types1))
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);
          } else { // can drop type before/after
            if (destination.getParent() instanceof IMethod)
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);

            int[] types =
                new int[] {
                  IJavaElement.FIELD,
                  IJavaElement.INITIALIZER,
                  IJavaElement.METHOD,
                  IJavaElement.TYPE
                };
            if (!ReorgUtils.hasOnlyElementsOfType(getJavaElements(), types))
              return RefactoringStatus.createFatalErrorStatus(
                  RefactoringCoreMessages.ReorgPolicyFactory_cannot);
          }

          break;
      }

      return new RefactoringStatus();
    }

