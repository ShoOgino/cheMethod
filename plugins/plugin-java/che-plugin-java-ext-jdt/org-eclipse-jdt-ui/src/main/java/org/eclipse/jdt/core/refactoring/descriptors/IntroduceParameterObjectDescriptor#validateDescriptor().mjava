  /** {@inheritDoc} */
  public RefactoringStatus validateDescriptor() {
    RefactoringStatus result = super.validateDescriptor();
    if (!result.isOK()) return result;
    if (fMethod == null) {
      result.addFatalError("The method must not be null"); //$NON-NLS-1$
      return result;
    }
    IJavaProject javaProject = fMethod.getJavaProject();
    if (javaProject == null) {
      result.addFatalError("Can not derive Java project from method"); //$NON-NLS-1$
      return result;
    }
    String sourceLevel = javaProject.getOption(JavaCore.COMPILER_SOURCE, true);
    String complianceLevel = javaProject.getOption(JavaCore.COMPILER_COMPLIANCE, true);
    if (fParameters != null) {
      if (fParameters.length - 1 != fMethod.getNumberOfParameters()) {
        result.addFatalError(
            "The number of parameters does not match the number of parameters of the method"); //$NON-NLS-1$
      }
      boolean hasParameterObject = false;
      for (int i = 0; i < fParameters.length; i++) {
        Parameter parameter = fParameters[i];
        if (parameter.isCreateField()) {
          String fieldName = parameter.getFieldName();
          if (fieldName == null)
            result.addError(
                "The parameter "
                    + parameter.getIndex()
                    + " is marked for field creation but does not have a field"
                    + " name"); //$NON-NLS-1$ //$NON-NLS-2$
          else {
            result.merge(
                RefactoringStatus.create(
                    JavaConventions.validateFieldName(fieldName, sourceLevel, complianceLevel)));
          }
        }
        if (parameter == PARAMETER_OBJECT) {
          if (hasParameterObject)
            result.addError("Can not have more than one parameter object"); //$NON-NLS-1$
          else hasParameterObject = true;
        }
      }
    }
    if (fClassName != null) {
      result.merge(
          RefactoringStatus.create(
              JavaConventions.validateIdentifier(fClassName, sourceLevel, complianceLevel)));
    }
    if (fParameterName != null) {
      result.merge(
          RefactoringStatus.create(
              JavaConventions.validateIdentifier(fParameterName, sourceLevel, complianceLevel)));
    }
    if (fPackageName != null && !"".equals(fPackageName)) { //$NON-NLS-1$
      result.merge(
          RefactoringStatus.create(
              JavaConventions.validatePackageName(fPackageName, sourceLevel, complianceLevel)));
    }
    return result;
  }

