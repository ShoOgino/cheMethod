  private static boolean getPullNegationUpProposals(
      IInvocationContext context,
      ArrayList<ASTNode> coveredNodes,
      Collection<ICommandAccess> resultingCollections) {
    if (coveredNodes.size() != 1) {
      return false;
    }
    //
    ASTNode fullyCoveredNode = coveredNodes.get(0);

    Expression expression = getBooleanExpression(fullyCoveredNode);
    if (expression == null
        || (!(expression instanceof InfixExpression)
            && !(expression instanceof ConditionalExpression))) {
      return false;
    }
    //  we could produce quick assist
    if (resultingCollections == null) {
      return true;
    }
    //
    AST ast = expression.getAST();
    final ASTRewrite rewrite = ASTRewrite.create(ast);
    // prepared inverted expression
    Expression inversedExpression = getInversedExpression(rewrite, expression);
    // prepare ParenthesizedExpression
    ParenthesizedExpression parenthesizedExpression = ast.newParenthesizedExpression();
    parenthesizedExpression.setExpression(inversedExpression);
    // prepare NOT prefix expression
    PrefixExpression prefixExpression = ast.newPrefixExpression();
    prefixExpression.setOperator(PrefixExpression.Operator.NOT);
    prefixExpression.setOperand(parenthesizedExpression);
    // replace old expression
    rewrite.replace(expression, prefixExpression, null);
    // add correction proposal
    String label = CorrectionMessages.AdvancedQuickAssistProcessor_pullNegationUp;
    Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
    ASTRewriteCorrectionProposal proposal =
        new ASTRewriteCorrectionProposal(
            label,
            context.getCompilationUnit(),
            rewrite,
            IProposalRelevance.PULL_NEGATION_UP,
            image);
    resultingCollections.add(proposal);
    return true;
  }

