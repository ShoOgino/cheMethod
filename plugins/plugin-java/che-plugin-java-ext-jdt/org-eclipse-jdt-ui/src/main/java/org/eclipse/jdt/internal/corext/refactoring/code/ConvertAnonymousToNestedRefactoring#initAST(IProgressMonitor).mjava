	private void initAST(IProgressMonitor pm) {
		if (fCompilationUnitNode == null) {
			fCompilationUnitNode = RefactoringASTParser.parseWithASTProvider(fCu, true, pm);
		}
		if (fAnonymousInnerClassNode == null) {
			fAnonymousInnerClassNode = getAnonymousInnerClass(NodeFinder.perform(fCompilationUnitNode, fSelectionStart, fSelectionLength));
		}
		if (fAnonymousInnerClassNode != null) {
			final AbstractTypeDeclaration declaration =
					(AbstractTypeDeclaration)ASTNodes.getParent(fAnonymousInnerClassNode, AbstractTypeDeclaration.class);
			if (declaration instanceof TypeDeclaration) {
				final AbstractTypeDeclaration[] nested = ((TypeDeclaration)declaration).getTypes();
				fClassNamesUsed = new HashSet<String>(nested.length);
				for (int index = 0; index < nested.length; index++)
					fClassNamesUsed.add(nested[index].getName().getIdentifier());
			} else
				fClassNamesUsed = Collections.emptySet();
		}
	}

