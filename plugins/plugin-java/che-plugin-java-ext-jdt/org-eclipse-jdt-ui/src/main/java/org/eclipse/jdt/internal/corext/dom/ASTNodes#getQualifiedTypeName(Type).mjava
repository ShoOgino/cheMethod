  /**
   * Returns the (potentially qualified) name of a type, followed by array dimensions. Skips type
   * arguments and type annotations.
   *
   * @param type a type that has a name
   * @return the name, followed by array dimensions
   * @since 3.10
   */
  public static String getQualifiedTypeName(Type type) {
    final StringBuffer buffer = new StringBuffer();
    ASTVisitor visitor =
        new ASTVisitor() {
          @Override
          public boolean visit(SimpleType node) {
            buffer.append(node.getName().getFullyQualifiedName());
            return false;
          }

          @Override
          public boolean visit(QualifiedType node) {
            node.getQualifier().accept(this);
            buffer.append('.');
            buffer.append(node.getName().getIdentifier());
            return false;
          }

          @Override
          public boolean visit(NameQualifiedType node) {
            buffer.append(node.getQualifier().getFullyQualifiedName());
            buffer.append('.');
            buffer.append(node.getName().getIdentifier());
            return false;
          }

          @Override
          public boolean visit(ParameterizedType node) {
            node.getType().accept(this);
            return false;
          }

          @Override
          public void endVisit(ArrayType node) {
            for (int i = 0; i < node.dimensions().size(); i++) {
              buffer.append("[]"); //$NON-NLS-1$
            }
          }
        };
    type.accept(visitor);
    return buffer.toString();
  }

