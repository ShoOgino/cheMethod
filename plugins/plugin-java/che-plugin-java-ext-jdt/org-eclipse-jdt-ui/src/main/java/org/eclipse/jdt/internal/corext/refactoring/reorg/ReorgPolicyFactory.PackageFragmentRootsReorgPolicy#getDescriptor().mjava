		public final ChangeDescriptor getDescriptor() {
			final Map<String, String> arguments = new HashMap<String, String>();
			final int length = fPackageFragmentRoots.length;
			final String description = length == 1 ? getDescriptionSingular() : getDescriptionPlural();
			final IProject resource = getSingleProject();
			final String project = resource != null ? resource.getName() : null;
			final String header = length == 1 ? Messages
					.format(getHeaderPatternSingular(), new String[]{fPackageFragmentRoots[0].getElementName(), getDestinationLabel()})
											  : Messages.format(
													  getHeaderPatternPlural(),
													  new String[]{String.valueOf(length), getDestinationLabel()});
			int flags = RefactoringDescriptor.STRUCTURAL_CHANGE | RefactoringDescriptor.MULTI_CHANGE;
			final JDTRefactoringDescriptorComment comment = new JDTRefactoringDescriptorComment(project, this, header);
			arguments.put(ATTRIBUTE_POLICY, getPolicyId());
			arguments.put(ATTRIBUTE_ROOTS, new Integer(fPackageFragmentRoots.length).toString());
			for (int offset = 0; offset < fPackageFragmentRoots.length; offset++)
				arguments.put(JavaRefactoringDescriptorUtil.ATTRIBUTE_ELEMENT + (offset + 1),
							  JavaRefactoringDescriptorUtil.elementToHandle(project, fPackageFragmentRoots[offset]));
			arguments.putAll(getRefactoringArguments(project));
			final JavaRefactoringDescriptor descriptor = createRefactoringDescriptor(comment, arguments, description, project, flags);
			return new RefactoringChangeDescriptor(descriptor);
		}

