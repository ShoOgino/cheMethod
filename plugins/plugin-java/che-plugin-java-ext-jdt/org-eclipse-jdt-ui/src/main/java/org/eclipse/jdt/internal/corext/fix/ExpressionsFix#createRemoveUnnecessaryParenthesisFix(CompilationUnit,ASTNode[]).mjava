  public static ExpressionsFix createRemoveUnnecessaryParenthesisFix(
      CompilationUnit compilationUnit, ASTNode[] nodes) {
    // check sub-expressions in fully covered nodes
    final ArrayList<ParenthesizedExpression> changedNodes =
        new ArrayList<ParenthesizedExpression>();
    for (int i = 0; i < nodes.length; i++) {
      ASTNode covered = nodes[i];
      if (covered instanceof ParenthesizedExpression || covered instanceof InfixExpression)
        covered.accept(new UnnecessaryParenthesisVisitor(changedNodes));
    }
    if (changedNodes.isEmpty()) return null;

    HashSet<ParenthesizedExpression> expressions =
        new HashSet<ParenthesizedExpression>(changedNodes);
    RemoveParenthesisOperation op = new RemoveParenthesisOperation(expressions);
    return new ExpressionsFix(
        FixMessages.ExpressionsFix_removeUnnecessaryParentheses_description,
        compilationUnit,
        new CompilationUnitRewriteOperation[] {op});
  }

