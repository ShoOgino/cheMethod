  public RefactoringStatus checkActivation() throws JavaModelException {
    RefactoringStatus result = new RefactoringStatus();
    if (!fTypeRoot.isStructureKnown()) {
      result.addFatalError(
          RefactoringCoreMessages.InlineMethodRefactoring_SourceAnalyzer_syntax_errors,
          JavaStatusContext.create(fTypeRoot));
      return result;
    }
    IProblem[] problems = ASTNodes.getProblems(fDeclaration, ASTNodes.NODE_ONLY, ASTNodes.ERROR);
    if (problems.length > 0) {
      result.addFatalError(
          RefactoringCoreMessages.InlineMethodRefactoring_SourceAnalyzer_declaration_has_errors,
          JavaStatusContext.create(fTypeRoot, fDeclaration));
      return result;
    }
    final IMethodBinding declarationBinding = fDeclaration.resolveBinding();
    if (declarationBinding != null) {
      final int modifiers = declarationBinding.getModifiers();
      if (Modifier.isAbstract(modifiers)) {
        result.addFatalError(
            RefactoringCoreMessages.InlineMethodRefactoring_SourceAnalyzer_abstract_methods,
            JavaStatusContext.create(fTypeRoot, fDeclaration));
        return result;
      } else if (Modifier.isNative(modifiers)) {
        result.addFatalError(
            RefactoringCoreMessages.InlineMethodRefactoring_SourceAnalyzer_native_methods,
            JavaStatusContext.create(fTypeRoot, fDeclaration));
        return result;
      }
    } else {
      result.addFatalError(
          RefactoringCoreMessages
              .InlineMethodRefactoring_SourceAnalyzer_methoddeclaration_has_errors,
          JavaStatusContext.create(fTypeRoot));
      return result;
    }
    ActivationAnalyzer analyzer = new ActivationAnalyzer();
    fDeclaration.accept(analyzer);
    result.merge(analyzer.status);
    if (!result.hasFatalError()) {
      List<SingleVariableDeclaration> parameters = fDeclaration.parameters();
      fParameters = new HashMap<IVariableBinding, ParameterData>(parameters.size() * 2);
      for (Iterator<SingleVariableDeclaration> iter = parameters.iterator(); iter.hasNext(); ) {
        SingleVariableDeclaration element = iter.next();
        IVariableBinding binding = element.resolveBinding();
        if (binding == null) {
          result.addFatalError(
              RefactoringCoreMessages.InlineMethodRefactoring_SourceAnalyzer_declaration_has_errors,
              JavaStatusContext.create(fTypeRoot, fDeclaration));
          return result;
        }
        fParameters.put(binding, (ParameterData) element.getProperty(ParameterData.PROPERTY));
      }
      fNames = new HashMap<IBinding, NameData>();
      fImplicitReceivers = new ArrayList<Expression>(2);

      fTypeParameterReferences = new ArrayList<NameData>(0);
      fTypeParameterMapping = new HashMap<ITypeBinding, NameData>();
      ITypeBinding declaringType = declarationBinding.getDeclaringClass();
      if (declaringType == null) {
        result.addFatalError(
            RefactoringCoreMessages
                .InlineMethodRefactoring_SourceAnalyzer_typedeclaration_has_errors,
            JavaStatusContext.create(fTypeRoot));
        return result;
      }
      ITypeBinding[] typeParameters = declaringType.getTypeParameters();
      for (int i = 0; i < typeParameters.length; i++) {
        NameData data = new NameData(typeParameters[i].getName());
        fTypeParameterReferences.add(data);
        fTypeParameterMapping.put(typeParameters[i], data);
      }

      fMethodTypeParameterReferences = new ArrayList<NameData>(0);
      fMethodTypeParameterMapping = new HashMap<ITypeBinding, NameData>();
      IMethodBinding method = declarationBinding;
      typeParameters = method.getTypeParameters();
      for (int i = 0; i < typeParameters.length; i++) {
        NameData data = new NameData(typeParameters[i].getName());
        fMethodTypeParameterReferences.add(data);
        fMethodTypeParameterMapping.put(typeParameters[i], data);
      }
    }
    if (fDeclaration.isVarargs()) {
      List<SingleVariableDeclaration> parameters = fDeclaration.parameters();
      VarargAnalyzer vAnalyzer =
          new VarargAnalyzer(parameters.get(parameters.size() - 1).getName().resolveBinding());
      fDeclaration.getBody().accept(vAnalyzer);
    }
    return result;
  }

