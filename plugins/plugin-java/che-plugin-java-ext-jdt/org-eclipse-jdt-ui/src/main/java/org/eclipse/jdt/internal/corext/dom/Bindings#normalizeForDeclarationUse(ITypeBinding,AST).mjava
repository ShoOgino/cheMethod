  /**
   * Normalizes the binding so that it can be used as a type inside a declaration (e.g. variable
   * declaration, method return type, parameter type, ...). For null bindings, java.lang.Object is
   * returned. For void bindings, <code>null</code> is returned.
   *
   * @param binding binding to normalize
   * @param ast current AST
   * @return the normalized type to be used in declarations, or <code>null</code>
   */
  public static ITypeBinding normalizeForDeclarationUse(ITypeBinding binding, AST ast) {
    if (binding.isNullType()) return ast.resolveWellKnownType("java.lang.Object"); // $NON-NLS-1$
    if (binding.isPrimitive()) return binding;
    binding = normalizeTypeBinding(binding);
    if (binding == null || !binding.isWildcardType()) return binding;
    ITypeBinding bound = binding.getBound();
    if (bound == null || !binding.isUpperbound()) {
      ITypeBinding[] typeBounds = binding.getTypeBounds();
      if (typeBounds.length > 0) {
        return typeBounds[0];
      } else {
        return binding.getErasure();
      }
    } else {
      return bound;
    }
  }

