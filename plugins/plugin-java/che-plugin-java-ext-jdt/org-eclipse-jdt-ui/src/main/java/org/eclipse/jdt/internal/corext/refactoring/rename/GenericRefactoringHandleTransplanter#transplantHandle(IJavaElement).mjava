  public final IJavaElement transplantHandle(IJavaElement element) {
    IJavaElement parent = element.getParent();
    if (parent != null) parent = transplantHandle(parent); // recursive

    switch (element.getElementType()) {
      case IJavaElement.JAVA_MODEL:
        return transplantHandle((IJavaModel) element);

      case IJavaElement.JAVA_PROJECT:
        return transplantHandle((IJavaProject) element);

      case IJavaElement.PACKAGE_FRAGMENT_ROOT:
        return transplantHandle((IJavaProject) parent, (IPackageFragmentRoot) element);

      case IJavaElement.PACKAGE_FRAGMENT:
        return transplantHandle((IPackageFragmentRoot) parent, (IPackageFragment) element);

      case IJavaElement.COMPILATION_UNIT:
        return transplantHandle((IPackageFragment) parent, (ICompilationUnit) element);

      case IJavaElement.CLASS_FILE:
        return transplantHandle((IPackageFragment) parent, (IClassFile) element);

      case IJavaElement.TYPE:
        return transplantHandle(parent, (IType) element);

      case IJavaElement.FIELD:
        return transplantHandle((IType) parent, (IField) element);

      case IJavaElement.METHOD:
        return transplantHandle((IType) parent, (IMethod) element);

      case IJavaElement.INITIALIZER:
        return transplantHandle((IType) parent, (IInitializer) element);

      case IJavaElement.PACKAGE_DECLARATION:
        return transplantHandle((ICompilationUnit) parent, (IPackageDeclaration) element);

      case IJavaElement.IMPORT_CONTAINER:
        return transplantHandle((ICompilationUnit) parent, (IImportContainer) element);

      case IJavaElement.IMPORT_DECLARATION:
        return transplantHandle((IImportContainer) parent, (IImportDeclaration) element);

      case IJavaElement.LOCAL_VARIABLE:
        return transplantHandle((ILocalVariable) element);

      case IJavaElement.TYPE_PARAMETER:
        return transplantHandle((IMember) parent, (ITypeParameter) element);

      case IJavaElement.ANNOTATION:
        return transplantHandle((IAnnotatable) parent, (IAnnotation) element);

      default:
        throw new IllegalArgumentException(element.toString());
    }
  }

