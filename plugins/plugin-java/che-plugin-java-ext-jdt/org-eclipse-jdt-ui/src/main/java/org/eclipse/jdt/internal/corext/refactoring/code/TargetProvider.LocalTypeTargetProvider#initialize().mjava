    @Override
    public void initialize() {
      IMethodBinding methodBinding = fDeclaration.resolveBinding();
      InvocationFinder finder;
      ASTNode type = ASTNodes.getParent(fDeclaration, AbstractTypeDeclaration.class);
      if (methodBinding.getDeclaringClass().isAnonymous()) {
        finder = new InvocationFinder(methodBinding);
        type.accept(finder);
      } else {
        // scope of local class is enclosing block
        ASTNode block = type.getParent().getParent();
        finder =
            new InvocationFinder(methodBinding) {
              @Override
              public boolean visit(Block node) {
                return visitNonTypeBodyDeclaration();
              }

              @Override
              public void endVisit(Block node) {
                if (fCurrent.hasInvocations()) {
                  result.put(
                      (BodyDeclaration) ASTNodes.getParent(node, BodyDeclaration.class), fCurrent);
                }
                endVisitBodyDeclaration();
              }
            };
        block.accept(finder);
      }
      fBodies = finder.result;
    }

