	public void move(IPackageFragment pack, MoveArguments args) throws CoreException {
		add(pack, args, null);
		if (pack.getResource() == null)
			return;
		IPackageFragmentRoot javaDestination = (IPackageFragmentRoot)args.getDestination();
		if (javaDestination.getResource() == null)
			return;
		IPackageFragment newPack = javaDestination.getPackageFragment(pack.getElementName());
		if (!pack.hasSubpackages() && !newPack.exists()) {
			// we can do a simple move
			IContainer resourceDestination = newPack.getResource().getParent();
			createIncludingParents(resourceDestination);
			getResourceModifications().addMove(
					pack.getResource(),
					new MoveArguments(resourceDestination, args.getUpdateReferences()));
		} else {
			IContainer resourceSource = (IContainer)pack.getResource();
			IContainer resourceDestination = (IContainer)newPack.getResource();
			createIncludingParents(resourceDestination);
			MoveArguments arguments = new MoveArguments(resourceDestination, args.getUpdateReferences());
			IResource[] resourcesToMove = collectResourcesOfInterest(pack);
			Set<IResource> allMembers = new HashSet<IResource>(Arrays.asList(resourceSource.members()));
			for (int i = 0; i < resourcesToMove.length; i++) {
				IResource toMove = resourcesToMove[i];
				getResourceModifications().addMove(toMove, arguments);
				allMembers.remove(toMove);
			}
			for (Iterator<IResource> iter= allMembers.iterator(); iter.hasNext();) {
				IResource element= iter.next();
				if (element instanceof IFile) {
					getResourceModifications().addDelete(element);
					iter.remove();
				}
			}
			if (allMembers.isEmpty()) {
				getResourceModifications().addDelete(resourceSource);
			}
		}
	}

