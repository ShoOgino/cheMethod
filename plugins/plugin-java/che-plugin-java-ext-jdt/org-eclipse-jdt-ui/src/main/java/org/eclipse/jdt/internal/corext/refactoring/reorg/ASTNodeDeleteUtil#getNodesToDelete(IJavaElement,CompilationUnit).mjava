	private static ASTNode[] getNodesToDelete(IJavaElement element, CompilationUnit cuNode) throws JavaModelException {
		// fields are different because you don't delete the whole declaration but only a fragment of it
		if (element.getElementType() == IJavaElement.FIELD) {
			if (JdtFlags.isEnum((IField)element))
				return new ASTNode[] { ASTNodeSearchUtil.getEnumConstantDeclaration((IField)element, cuNode)};
			else
				return new ASTNode[] { ASTNodeSearchUtil.getFieldDeclarationFragmentNode((IField)element, cuNode)};
		}
		if (element.getElementType() == IJavaElement.TYPE && ((IType) element).isLocal()) {
			IType type= (IType) element;
			if (type.isAnonymous()) {
				if (type.getParent().getElementType() == IJavaElement.FIELD) {
					EnumConstantDeclaration enumDecl= ASTNodeSearchUtil.getEnumConstantDeclaration((IField)element.getParent(), cuNode);
					if (enumDecl != null && enumDecl.getAnonymousClassDeclaration() != null)  {
						return new ASTNode[] { enumDecl.getAnonymousClassDeclaration() };
					}
				}
				ClassInstanceCreation creation= ASTNodeSearchUtil.getClassInstanceCreationNode(type, cuNode);
				if (creation != null) {
					if (creation.getLocationInParent() == ExpressionStatement.EXPRESSION_PROPERTY) {
						return new ASTNode[] { creation.getParent() };
					} else if (creation.getLocationInParent() == VariableDeclarationFragment.INITIALIZER_PROPERTY) {
						return new ASTNode[] { creation};
					}
					return new ASTNode[] { creation.getAnonymousClassDeclaration() };
				}
				return new ASTNode[0];
			} else {
				ASTNode[] nodes= ASTNodeSearchUtil.getDeclarationNodes(element, cuNode);
				// we have to delete the TypeDeclarationStatement
				nodes[0]= nodes[0].getParent();
				return nodes;
			}
		}
		return ASTNodeSearchUtil.getDeclarationNodes(element, cuNode);
	}

