  /* (non-Javadoc)
   * @see org.eclipse.jdt.internal.ui.text.correction.ChangeCorrectionProposal#performChange(org.eclipse.jface.text.IDocument, org.eclipse.ui.IEditorPart)
   */
  @Override
  protected void performChange(/*IEditorPart part,*/ IDocument document) throws CoreException {
    //		try {
    super.performChange(/*part,*/ document);
    //			if (part == null) {
    //				return;
    //			}
    //
    if (fLinkedProposalModel != null) {
      if (fLinkedProposalModel.hasLinkedPositions()) {
        // enter linked mode
        //					ITextViewer viewer= ((JavaEditor) part).getViewer();
        //					new LinkedProposalModelPresenter().enterLinkedMode(viewer, part, didOpenEditor(), fLinkedProposalModel);
        boolean added = false;
        LinkedModeModelImpl model = new LinkedModeModelImpl();
        Iterator<LinkedProposalPositionGroup> iterator =
            fLinkedProposalModel.getPositionGroupIterator();
        while (iterator.hasNext()) {
          LinkedProposalPositionGroup curr = iterator.next();

          LinkedPositionGroupImpl group = new LinkedPositionGroupImpl();

          LinkedProposalPositionGroup.PositionInformation[] positions = curr.getPositions();
          if (positions.length > 0) {
            LinkedProposalPositionGroup.Proposal[] linkedModeProposals = curr.getProposals();
            if (linkedModeProposals.length <= 1) {
              for (int i = 0; i < positions.length; i++) {
                LinkedProposalPositionGroup.PositionInformation pos = positions[i];
                if (pos.getOffset() != -1) {
                  RegionImpl position = new RegionImpl();
                  position.setOffset(pos.getOffset());
                  position.setLength(pos.getLength());
                  //                                        group.addPositions(
                  //                                                new LinkedPosition(document, pos.getOffset(), pos.getLength(), pos.getSequenceRank()));
                  group.addPositions(position);
                }
              }
            } else {
              //                                LinkedPositionProposalImpl[] proposalImpls= new LinkedPositionProposalImpl[linkedModeProposals.length];
              LinkedDataImpl data = new LinkedDataImpl();
              for (int i = 0; i < linkedModeProposals.length; i++) {
                //                                    proposalImpls[i] = new LinkedPositionProposalImpl(linkedModeProposals[i], model);
                data.addValues(linkedModeProposals[i].getDisplayString());
              }
              group.setData(data);
              for (int i = 0; i < positions.length; i++) {
                LinkedProposalPositionGroup.PositionInformation pos = positions[i];
                if (pos.getOffset() != -1) {
                  //                                        group.addPosition(
                  //                                                new ProposalPosition(document, pos.getOffset(), pos.getLength(), pos.getSequenceRank(),
                  //                                                                     proposalImpls));
                  RegionImpl position = new RegionImpl();
                  position.setOffset(pos.getOffset());
                  position.setLength(pos.getLength());
                  group.addPositions(position);
                }
              }
            }
            model.addGroups(group);
            added = true;
          }
        }
        if (added) {
          LinkedProposalPositionGroup.PositionInformation endPosition =
              fLinkedProposalModel.getEndPosition();
          if (endPosition != null && endPosition.getOffset() != -1) {
            model.setEscapePosition(endPosition.getOffset() + endPosition.getLength());
          }
          this.linkedModel = model;
        }
      }
      //				else if (part instanceof ITextEditor) {
      //					LinkedProposalPositionGroup.PositionInformation endPosition= fLinkedProposalModel.getEndPosition();
      //					if (endPosition != null) {
      //						// select a result
      //						int pos= endPosition.getOffset() + endPosition.getLength();
      //						((ITextEditor) part).selectAndReveal(pos, 0);
      //					}
      //				}
    }
    //		} catch (BadLocationException e) {
    //			throw new CoreException(JavaUIStatus.createError(IStatus.ERROR, e));
    //		}
  }

