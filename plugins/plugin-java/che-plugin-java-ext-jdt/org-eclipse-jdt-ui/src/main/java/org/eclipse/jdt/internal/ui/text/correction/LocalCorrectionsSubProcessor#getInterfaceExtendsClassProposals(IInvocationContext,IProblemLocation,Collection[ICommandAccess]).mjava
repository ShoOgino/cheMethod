	public static void getInterfaceExtendsClassProposals(IInvocationContext context, IProblemLocation problem,
														 Collection<ICommandAccess> proposals) {
		CompilationUnit root = context.getASTRoot();
		ASTNode selectedNode = problem.getCoveringNode(root);
		if (selectedNode == null) {
			return;
		}
		while (selectedNode.getParent() instanceof Type) {
			selectedNode = selectedNode.getParent();
		}

		StructuralPropertyDescriptor locationInParent = selectedNode.getLocationInParent();
		if (locationInParent != TypeDeclaration.SUPERCLASS_TYPE_PROPERTY) {
			return;
		}

		TypeDeclaration typeDecl = (TypeDeclaration)selectedNode.getParent();
		{
			ASTRewrite rewrite = ASTRewrite.create(root.getAST());
			ASTNode placeHolder = rewrite.createMoveTarget(selectedNode);
			ListRewrite interfaces = rewrite.getListRewrite(typeDecl, TypeDeclaration.SUPER_INTERFACE_TYPES_PROPERTY);
			interfaces.insertFirst(placeHolder, null);

			String label = CorrectionMessages.LocalCorrectionsSubProcessor_extendstoimplements_description;
			Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
			ASTRewriteCorrectionProposal proposal = new ASTRewriteCorrectionProposal(label, context.getCompilationUnit(), rewrite,
																					 IProposalRelevance.CHANGE_EXTENDS_TO_IMPLEMENTS,
																					 image);
			proposals.add(proposal);
		}
		{
			ASTRewrite rewrite = ASTRewrite.create(root.getAST());

			rewrite.set(typeDecl, TypeDeclaration.INTERFACE_PROPERTY, Boolean.TRUE, null);

			String typeName = typeDecl.getName().getIdentifier();
			String label = Messages.format(CorrectionMessages.LocalCorrectionsSubProcessor_classtointerface_description,
										   BasicElementLabels.getJavaElementName(typeName));
			Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
			ASTRewriteCorrectionProposal proposal = new ASTRewriteCorrectionProposal(label, context.getCompilationUnit(), rewrite,
																					 IProposalRelevance.CHANGE_CLASS_TO_INTERFACE, image);
			proposals.add(proposal);
		}
	}

