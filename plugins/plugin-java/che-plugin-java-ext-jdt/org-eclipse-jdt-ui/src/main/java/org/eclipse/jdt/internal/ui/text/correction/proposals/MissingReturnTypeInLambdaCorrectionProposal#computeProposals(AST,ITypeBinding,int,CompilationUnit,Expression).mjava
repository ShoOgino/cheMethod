  @Override
  protected Expression computeProposals(
      AST ast,
      ITypeBinding returnBinding,
      int returnOffset,
      CompilationUnit root,
      Expression result) {
    ScopeAnalyzer analyzer = new ScopeAnalyzer(root);
    IBinding[] bindings =
        analyzer.getDeclarationsInScope(
            returnOffset, ScopeAnalyzer.VARIABLES | ScopeAnalyzer.CHECK_VISIBILITY);

    org.eclipse.jdt.core.dom.NodeFinder finder =
        new org.eclipse.jdt.core.dom.NodeFinder(root, returnOffset, 0);
    ASTNode varDeclFrag =
        ASTResolving.findAncestor(finder.getCoveringNode(), ASTNode.VARIABLE_DECLARATION_FRAGMENT);
    IVariableBinding varDeclFragBinding = null;
    if (varDeclFrag != null)
      varDeclFragBinding = ((VariableDeclarationFragment) varDeclFrag).resolveBinding();
    for (int i = 0; i < bindings.length; i++) {
      IVariableBinding curr = (IVariableBinding) bindings[i];
      ITypeBinding type = curr.getType();
      // Bindings are compared to make sure that a lambda does not return a variable which is yet to be initialised.
      if (type != null
          && type.isAssignmentCompatible(returnBinding)
          && testModifier(curr)
          && !Bindings.equals(curr, varDeclFragBinding)) {
        if (result == null) {
          result = ast.newSimpleName(curr.getName());
        }
        addLinkedPositionProposal(RETURN_EXPRESSION_KEY, curr.getName(), null);
      }
    }
    return result;
  }

