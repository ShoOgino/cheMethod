  private ListRewrite evaluateListRewrite(ASTRewrite rewrite, ASTNode declNode) {
    switch (declNode.getNodeType()) {
      case ASTNode.METHOD_DECLARATION:
        return rewrite.getListRewrite(declNode, MethodDeclaration.MODIFIERS2_PROPERTY);
      case ASTNode.FIELD_DECLARATION:
        return rewrite.getListRewrite(declNode, FieldDeclaration.MODIFIERS2_PROPERTY);
      case ASTNode.VARIABLE_DECLARATION_EXPRESSION:
        return rewrite.getListRewrite(declNode, VariableDeclarationExpression.MODIFIERS2_PROPERTY);
      case ASTNode.VARIABLE_DECLARATION_STATEMENT:
        return rewrite.getListRewrite(declNode, VariableDeclarationStatement.MODIFIERS2_PROPERTY);
      case ASTNode.SINGLE_VARIABLE_DECLARATION:
        return rewrite.getListRewrite(declNode, SingleVariableDeclaration.MODIFIERS2_PROPERTY);
      case ASTNode.TYPE_DECLARATION:
        return rewrite.getListRewrite(declNode, TypeDeclaration.MODIFIERS2_PROPERTY);
      case ASTNode.ENUM_DECLARATION:
        return rewrite.getListRewrite(declNode, EnumDeclaration.MODIFIERS2_PROPERTY);
      case ASTNode.ANNOTATION_TYPE_DECLARATION:
        return rewrite.getListRewrite(declNode, AnnotationTypeDeclaration.MODIFIERS2_PROPERTY);
      case ASTNode.ENUM_CONSTANT_DECLARATION:
        return rewrite.getListRewrite(declNode, EnumConstantDeclaration.MODIFIERS2_PROPERTY);
      case ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION:
        return rewrite.getListRewrite(
            declNode, AnnotationTypeMemberDeclaration.MODIFIERS2_PROPERTY);
      default:
        throw new IllegalArgumentException(
            "node has no modifiers: " + declNode.getClass().getName()); // $NON-NLS-1$
    }
  }

