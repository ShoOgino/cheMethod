	@Override
	public int findInContext(String qualifier, String name, int kind) {
		IBinding[] declarationsInScope = getDeclarationsInScope();
		for (int i = 0; i < declarationsInScope.length; i++) {
			if (declarationsInScope[i] instanceof ITypeBinding) {
				ITypeBinding typeBinding = (ITypeBinding)declarationsInScope[i];
				if (isSameType(typeBinding, qualifier, name)) {
					return RES_NAME_FOUND;
				} else if (isConflicting(typeBinding, name)) {
					return RES_NAME_CONFLICT;
				}
			} else if (declarationsInScope[i] != null) {
				if (isConflicting(declarationsInScope[i], name)) {
					return RES_NAME_CONFLICT;
				}
			}
		}


		Name[] names = getImportedNames();
		for (int i = 0; i < names.length; i++) {
			IBinding binding = names[i].resolveBinding();
			if (binding instanceof ITypeBinding && !binding.isRecovered()) {
				ITypeBinding typeBinding = (ITypeBinding)binding;
				if (isConflictingType(typeBinding, qualifier, name)) {
					return RES_NAME_CONFLICT;
				}
			}
		}

		List<AbstractTypeDeclaration> list= fCompilationUnit.types();
		for (Iterator<AbstractTypeDeclaration> iter= list.iterator(); iter.hasNext();) {
			AbstractTypeDeclaration type= iter.next();
			ITypeBinding binding= type.resolveBinding();
			if (binding != null) {
				if (isSameType(binding, qualifier, name)) {
					return RES_NAME_FOUND;
				} else {
					ITypeBinding decl= containingDeclaration(binding, qualifier, name);
					while (decl != null && !decl.equals(binding)) {
						int modifiers= decl.getModifiers();
						if (Modifier.isPrivate(modifiers))
							return RES_NAME_CONFLICT;
						decl= decl.getDeclaringClass();
					}
				}
			}
		}

		String[] addedImports= fImportRewrite.getAddedImports();
		String qualifiedName= JavaModelUtil.concatenateName(qualifier, name);
		for (int i= 0; i < addedImports.length; i++) {
			String addedImport= addedImports[i];
			if (qualifiedName.equals(addedImport)) {
				return RES_NAME_FOUND;
			} else {
				if (isConflicting(name, addedImport))
					return RES_NAME_CONFLICT;
			}
		}

		if (qualifier.equals("java.lang")) { //$NON-NLS-1$
			//No explicit import statement required
			ITypeRoot typeRoot= fCompilationUnit.getTypeRoot();
			if (typeRoot != null) {
				IPackageFragment packageFragment= (IPackageFragment) typeRoot.getParent();
				try {
					ICompilationUnit[] compilationUnits= packageFragment.getCompilationUnits();
					for (int i= 0; i < compilationUnits.length; i++) {
						ICompilationUnit cu= compilationUnits[i];
						IType[] allTypes= cu.getAllTypes();
						for (int j= 0; j < allTypes.length; j++) {
							IType type= allTypes[j];
							String packageTypeName= type.getFullyQualifiedName();
							if (isConflicting(name, packageTypeName))
								return RES_NAME_CONFLICT;
						}
					}
				} catch (JavaModelException e) {
				}
			}
		}

		return fImportRewrite.getDefaultImportRewriteContext().findInContext(qualifier, name, kind);
	}

