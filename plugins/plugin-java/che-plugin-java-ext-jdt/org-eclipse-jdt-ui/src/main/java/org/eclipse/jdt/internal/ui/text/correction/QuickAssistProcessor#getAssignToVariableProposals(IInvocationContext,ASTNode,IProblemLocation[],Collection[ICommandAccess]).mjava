  public static boolean getAssignToVariableProposals(
      IInvocationContext context,
      ASTNode node,
      IProblemLocation[] locations,
      Collection<ICommandAccess> resultingCollections) {
    Statement statement = ASTResolving.findParentStatement(node);
    if (!(statement instanceof ExpressionStatement)) {
      return false;
    }
    ExpressionStatement expressionStatement = (ExpressionStatement) statement;

    Expression expression = expressionStatement.getExpression();
    if (expression.getNodeType() == ASTNode.ASSIGNMENT) {
      return false; // too confusing and not helpful
    }

    ITypeBinding typeBinding = expression.resolveTypeBinding();
    typeBinding = Bindings.normalizeTypeBinding(typeBinding);
    if (typeBinding == null) {
      return false;
    }
    if (resultingCollections == null) {
      return true;
    }

    // don't add if already added as quick fix
    if (containsMatchingProblem(locations, IProblem.UnusedObjectAllocation)) return false;

    ICompilationUnit cu = context.getCompilationUnit();

    AssignToVariableAssistProposal localProposal =
        new AssignToVariableAssistProposal(
            cu,
            AssignToVariableAssistProposal.LOCAL,
            expressionStatement,
            typeBinding,
            IProposalRelevance.ASSIGN_TO_LOCAL);
    localProposal.setCommandId(ASSIGN_TO_LOCAL_ID);
    resultingCollections.add(localProposal);

    ASTNode type = ASTResolving.findParentType(expression);
    if (type != null) {
      AssignToVariableAssistProposal fieldProposal =
          new AssignToVariableAssistProposal(
              cu,
              AssignToVariableAssistProposal.FIELD,
              expressionStatement,
              typeBinding,
              IProposalRelevance.ASSIGN_TO_FIELD);
      fieldProposal.setCommandId(ASSIGN_TO_FIELD_ID);
      resultingCollections.add(fieldProposal);
    }
    return true;
  }

