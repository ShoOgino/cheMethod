  public void initialize() {
    Block body = fDeclaration.getBody();
    // first collect the static imports. This is necessary to not mark
    // static imported fields and methods as implicit visible.
    fTypesToImport = new ArrayList<SimpleName>();
    fStaticsToImport = new ArrayList<SimpleName>();
    ImportReferencesCollector.collect(
        body, fTypeRoot.getJavaProject(), null, fTypesToImport, fStaticsToImport);

    // Now collect implicit references and name references
    body.accept(new UpdateCollector());

    int numberOfLocals = LocalVariableIndex.perform(fDeclaration);
    FlowContext context = new FlowContext(0, numberOfLocals + 1);
    context.setConsiderAccessMode(true);
    context.setComputeMode(FlowContext.MERGE);
    InOutFlowAnalyzer flowAnalyzer = new InOutFlowAnalyzer(context);
    FlowInfo info = flowAnalyzer.perform(getStatements());

    for (Iterator<SingleVariableDeclaration> iter = fDeclaration.parameters().iterator();
        iter.hasNext(); ) {
      SingleVariableDeclaration element = iter.next();
      IVariableBinding binding = element.resolveBinding();
      ParameterData data = (ParameterData) element.getProperty(ParameterData.PROPERTY);
      data.setAccessMode(info.getAccessMode(context, binding));
    }
  }

