      /**
       * @param scope not a TypeDeclaration
       * @return Set containing Strings representing simple names
       */
      private Set<String> getLocallyDeclaredNames(BodyDeclaration scope) {
        Assert.isTrue(!(scope instanceof AbstractTypeDeclaration));

        final Set<String> result = new HashSet<String>();

        if (scope instanceof FieldDeclaration) return result;

        scope.accept(
            new HierarchicalASTVisitor() {

              @Override
              public boolean visit(AbstractTypeDeclaration node) {
                Assert.isTrue(node.getParent() instanceof TypeDeclarationStatement);

                result.add(node.getName().getIdentifier());
                return false;
              }

              @Override
              public boolean visit(AnonymousClassDeclaration anonDecl) {
                return false;
              }

              @Override
              public boolean visit(VariableDeclaration varDecl) {
                result.add(varDecl.getName().getIdentifier());
                return false;
              }
            });
        return result;
      }

