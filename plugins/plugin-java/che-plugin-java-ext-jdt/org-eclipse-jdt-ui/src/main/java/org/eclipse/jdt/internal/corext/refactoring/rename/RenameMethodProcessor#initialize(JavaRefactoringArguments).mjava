  /**
   * Initializes the refactoring from scripting arguments. Used by {@link
   * RenameVirtualMethodProcessor} and {@link RenameNonVirtualMethodProcessor}
   *
   * @param extended the arguments
   * @return the resulting status
   */
  protected final RefactoringStatus initialize(JavaRefactoringArguments extended) {
    fInitialized = true;
    final String handle = extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT);
    if (handle != null) {
      final IJavaElement element =
          JavaRefactoringDescriptorUtil.handleToElement(extended.getProject(), handle, false);
      final String refactoring = getProcessorName();
      if (element instanceof IMethod) {
        final IMethod method = (IMethod) element;
        final IType declaring = method.getDeclaringType();
        if (declaring != null && declaring.exists()) {
          final IMethod[] methods = declaring.findMethods(method);
          if (methods != null && methods.length == 1 && methods[0] != null) {
            if (!methods[0].exists())
              return JavaRefactoringDescriptorUtil.createInputFatalStatus(
                  methods[0], refactoring, IJavaRefactorings.RENAME_METHOD);
            fMethod = methods[0];
            initializeWorkingCopyOwner();
          } else
            return JavaRefactoringDescriptorUtil.createInputFatalStatus(
                null, refactoring, IJavaRefactorings.RENAME_METHOD);
        } else
          return JavaRefactoringDescriptorUtil.createInputFatalStatus(
              element, refactoring, IJavaRefactorings.RENAME_METHOD);
      } else
        return JavaRefactoringDescriptorUtil.createInputFatalStatus(
            element, refactoring, IJavaRefactorings.RENAME_METHOD);
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT));
    final String name = extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_NAME);
    if (name != null && !"".equals(name)) //$NON-NLS-1$
    setNewElementName(name);
    else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_NAME));
    final String references =
        extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_REFERENCES);
    if (references != null) {
      fUpdateReferences = Boolean.valueOf(references).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_REFERENCES));
    final String delegate = extended.getAttribute(ATTRIBUTE_DELEGATE);
    if (delegate != null) {
      fDelegateUpdating = Boolean.valueOf(delegate).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_DELEGATE));
    final String deprecate = extended.getAttribute(ATTRIBUTE_DEPRECATE);
    if (deprecate != null) {
      fDelegateDeprecation = Boolean.valueOf(deprecate).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_DEPRECATE));
    return new RefactoringStatus();
  }

