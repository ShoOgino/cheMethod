  private JDTRefactoringDescriptorComment createComment(String project, final String header)
      throws JavaModelException {
    final JDTRefactoringDescriptorComment comment =
        new JDTRefactoringDescriptorComment(project, this, header);
    if (!fMethod.getElementName().equals(fMethodName))
      comment.addSetting(
          Messages.format(
              RefactoringCoreMessages.ChangeSignatureRefactoring_new_name_pattern,
              BasicElementLabels.getJavaElementName(fMethodName)));
    if (!isVisibilitySameAsInitial()) {
      String visibility = JdtFlags.getVisibilityString(fVisibility);
      if ("".equals(visibility)) //$NON-NLS-1$
      visibility = RefactoringCoreMessages.ChangeSignatureRefactoring_default_visibility;
      comment.addSetting(
          Messages.format(
              RefactoringCoreMessages.ChangeSignatureRefactoring_new_visibility_pattern,
              visibility));
    }
    if (fReturnTypeInfo.isTypeNameChanged())
      comment.addSetting(
          Messages.format(
              RefactoringCoreMessages.ChangeSignatureRefactoring_new_return_type_pattern,
              BasicElementLabels.getJavaElementName(fReturnTypeInfo.getNewTypeName())));
    List<String> deleted = new ArrayList<String>();
    List<String> added = new ArrayList<String>();
    List<String> changed = new ArrayList<String>();
    for (final Iterator<ParameterInfo> iterator = fParameterInfos.iterator();
        iterator.hasNext();
        ) {
      final ParameterInfo info = iterator.next();
      if (info.isDeleted())
        deleted.add(
            Messages.format(
                RefactoringCoreMessages.ChangeSignatureRefactoring_deleted_parameter_pattern,
                new String[] {
                  BasicElementLabels.getJavaElementName(info.getOldTypeName()),
                  BasicElementLabels.getJavaElementName(info.getOldName())
                }));
      else if (info.isAdded())
        added.add(
            Messages.format(
                RefactoringCoreMessages.ChangeSignatureRefactoring_added_parameter_pattern,
                new String[] {
                  BasicElementLabels.getJavaElementName(info.getNewTypeName()),
                  BasicElementLabels.getJavaElementName(info.getNewName())
                }));
      else if (info.isRenamed() || info.isTypeNameChanged() || info.isVarargChanged())
        changed.add(
            Messages.format(
                RefactoringCoreMessages.ChangeSignatureRefactoring_changed_parameter_pattern,
                new String[] {
                  BasicElementLabels.getJavaElementName(info.getOldTypeName()),
                  BasicElementLabels.getJavaElementName(info.getOldName())
                }));
    }
    if (!added.isEmpty())
      comment.addSetting(
          JDTRefactoringDescriptorComment.createCompositeSetting(
              RefactoringCoreMessages.ChangeSignatureRefactoring_added_parameters,
              added.toArray(new String[added.size()])));
    if (!deleted.isEmpty())
      comment.addSetting(
          JDTRefactoringDescriptorComment.createCompositeSetting(
              RefactoringCoreMessages.ChangeSignatureRefactoring_removed_parameters,
              deleted.toArray(new String[deleted.size()])));
    if (!changed.isEmpty())
      comment.addSetting(
          JDTRefactoringDescriptorComment.createCompositeSetting(
              RefactoringCoreMessages.ChangeSignatureRefactoring_changed_parameters,
              changed.toArray(new String[changed.size()])));
    added.clear();
    deleted.clear();
    changed.clear();
    for (final Iterator<ExceptionInfo> iterator = fExceptionInfos.iterator();
        iterator.hasNext();
        ) {
      final ExceptionInfo info = iterator.next();
      if (info.isAdded()) added.add(info.getElement().getElementName());
      else if (info.isDeleted()) deleted.add(info.getElement().getElementName());
    }
    if (!added.isEmpty())
      comment.addSetting(
          JDTRefactoringDescriptorComment.createCompositeSetting(
              RefactoringCoreMessages.ChangeSignatureRefactoring_added_exceptions,
              added.toArray(new String[added.size()])));
    if (!deleted.isEmpty())
      comment.addSetting(
          JDTRefactoringDescriptorComment.createCompositeSetting(
              RefactoringCoreMessages.ChangeSignatureRefactoring_removed_exceptions,
              deleted.toArray(new String[deleted.size()])));
    return comment;
  }

