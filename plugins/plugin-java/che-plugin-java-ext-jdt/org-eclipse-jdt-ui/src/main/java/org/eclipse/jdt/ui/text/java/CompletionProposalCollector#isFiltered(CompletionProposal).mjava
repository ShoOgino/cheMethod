  /**
   * Returns <code>true</code> if <code>proposal</code> is filtered, e.g. should not be proposed to
   * the user, <code>false</code> if it is valid.
   *
   * <p>Subclasses may extends this method. The default implementation filters proposals set to be
   * ignored via {@linkplain org.eclipse.jdt.core.CompletionRequestor#setIgnored(int, boolean)
   * setIgnored} and types set to be ignored in the preferences.
   *
   * @param proposal the proposal to filter
   * @return <code>true</code> to filter <code>proposal</code>, <code>false</code> to let it pass
   */
  protected boolean isFiltered(CompletionProposal proposal) {
    if (isIgnored(proposal.getKind())) return true;
    char[] declaringType = getDeclaringType(proposal);
    return declaringType != null && TypeFilter.isFiltered(declaringType);
  }

