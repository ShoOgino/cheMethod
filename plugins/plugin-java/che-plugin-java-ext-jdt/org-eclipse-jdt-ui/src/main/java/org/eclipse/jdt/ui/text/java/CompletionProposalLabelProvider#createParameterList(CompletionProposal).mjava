  /**
   * Creates and returns a parameter list of the given method or type proposal suitable for display.
   * The list does not include parentheses. The lower bound of parameter types is returned.
   *
   * <p>Examples:
   *
   * <pre>
   *   &quot;void method(int i, String s)&quot; -&gt; &quot;int i, String s&quot;
   *   &quot;? extends Number method(java.lang.String s, ? super Number n)&quot; -&gt; &quot;String s, Number n&quot;
   * </pre>
   *
   * @param proposal the proposal to create the parameter list for
   * @return the list of comma-separated parameters suitable for display
   */
  public String createParameterList(CompletionProposal proposal) {
    String paramList;
    int kind = proposal.getKind();
    switch (kind) {
      case CompletionProposal.METHOD_REF:
      case CompletionProposal.CONSTRUCTOR_INVOCATION:
        paramList = appendUnboundedParameterList(new StyledString(), proposal).getString();
        return Strings.markJavaElementLabelLTR(paramList);
      case CompletionProposal.TYPE_REF:
      case CompletionProposal.JAVADOC_TYPE_REF:
        paramList = appendTypeParameterList(new StyledString(), proposal).getString();
        return Strings.markJavaElementLabelLTR(paramList);
      case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:
      case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:
        paramList = appendUnboundedParameterList(new StyledString(), proposal).getString();
        return Strings.markJavaElementLabelLTR(paramList);
      default:
        Assert.isLegal(false);
        return null; // dummy
    }
  }

