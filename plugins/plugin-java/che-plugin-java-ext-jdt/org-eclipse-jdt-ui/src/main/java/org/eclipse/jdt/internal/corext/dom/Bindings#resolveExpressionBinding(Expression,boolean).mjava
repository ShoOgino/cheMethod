  /**
   * Resolve the binding (<em>not</em> the type binding) for the expression or a nested expression
   * (e.g. nested in parentheses, cast, ...).
   *
   * @param expression an expression node
   * @param goIntoCast iff <code>true</code>, go into a CastExpression's expression to resolve
   * @return the expression binding, or <code>null</code> if the expression has no binding or the
   *     binding could not be resolved
   * @see StubUtility#getVariableNameSuggestions(int, IJavaProject, ITypeBinding, Expression,
   *     java.util.Collection)
   * @since 3.5
   */
  public static IBinding resolveExpressionBinding(Expression expression, boolean goIntoCast) {
    //TODO: search for callers of resolve*Binding() methods and replace with call to this method

    // similar to StubUtility#getVariableNameSuggestions(int, IJavaProject, ITypeBinding, Expression, Collection)
    switch (expression.getNodeType()) {
      case ASTNode.SIMPLE_NAME:
      case ASTNode.QUALIFIED_NAME:
        return ((Name) expression).resolveBinding();

      case ASTNode.FIELD_ACCESS:
        return ((FieldAccess) expression).resolveFieldBinding();
      case ASTNode.SUPER_FIELD_ACCESS:
        return ((SuperFieldAccess) expression).resolveFieldBinding();

      case ASTNode.METHOD_INVOCATION:
        return ((MethodInvocation) expression).resolveMethodBinding();
      case ASTNode.SUPER_METHOD_INVOCATION:
        return ((SuperMethodInvocation) expression).resolveMethodBinding();
      case ASTNode.CLASS_INSTANCE_CREATION:
        return ((ClassInstanceCreation) expression).resolveConstructorBinding();

      case ASTNode.MARKER_ANNOTATION:
      case ASTNode.SINGLE_MEMBER_ANNOTATION:
      case ASTNode.NORMAL_ANNOTATION:
        return ((Annotation) expression).resolveAnnotationBinding();

      case ASTNode.ARRAY_ACCESS:
        return resolveExpressionBinding(((ArrayAccess) expression).getArray(), goIntoCast);
      case ASTNode.CAST_EXPRESSION:
        if (goIntoCast) {
          return resolveExpressionBinding(((CastExpression) expression).getExpression(), true);
        } else {
          return null;
        }
      case ASTNode.PARENTHESIZED_EXPRESSION:
        return resolveExpressionBinding(
            ((ParenthesizedExpression) expression).getExpression(), goIntoCast);
      case ASTNode.PREFIX_EXPRESSION:
        return resolveExpressionBinding(((PrefixExpression) expression).getOperand(), goIntoCast);
      case ASTNode.POSTFIX_EXPRESSION:
        return resolveExpressionBinding(((PostfixExpression) expression).getOperand(), goIntoCast);
      default:
        return null;
    }
  }

