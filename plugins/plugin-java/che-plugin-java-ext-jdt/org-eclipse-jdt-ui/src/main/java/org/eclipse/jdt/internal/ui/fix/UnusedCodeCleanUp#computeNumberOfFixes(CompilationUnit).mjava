  /** {@inheritDoc} */
  @Override
  public int computeNumberOfFixes(CompilationUnit compilationUnit) {
    int result = 0;
    IProblem[] problems = compilationUnit.getProblems();
    if (isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_IMPORTS)
        && !isEnabled(CleanUpConstants.ORGANIZE_IMPORTS)) {
      for (int i = 0; i < problems.length; i++) {
        int id = problems[i].getID();
        if (id == IProblem.UnusedImport
            || id == IProblem.DuplicateImport
            || id == IProblem.ConflictingImport
            || id == IProblem.CannotImportPackage
            || id == IProblem.ImportNotFound) result++;
      }
    }
    if (isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_MEMBERS)
        && isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_METHODS))
      result += getNumberOfProblems(problems, IProblem.UnusedPrivateMethod);
    if (isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_MEMBERS)
        && isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_CONSTRUCTORS))
      result += getNumberOfProblems(problems, IProblem.UnusedPrivateConstructor);
    if (isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_MEMBERS)
        && isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_TYPES))
      result += getNumberOfProblems(problems, IProblem.UnusedPrivateType);
    if (isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_MEMBERS)
        && isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_PRIVATE_FELDS))
      result += getNumberOfProblems(problems, IProblem.UnusedPrivateField);
    if (isEnabled(CleanUpConstants.REMOVE_UNUSED_CODE_LOCAL_VARIABLES))
      result += getNumberOfProblems(problems, IProblem.LocalVariableIsNeverUsed);
    return result;
  }

