  public static void getArrayAccessProposals(
      IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals) {

    CompilationUnit root = context.getASTRoot();
    ASTNode selectedNode = problem.getCoveringNode(root);
    if (!(selectedNode instanceof MethodInvocation)) {
      return;
    }

    MethodInvocation decl = (MethodInvocation) selectedNode;
    SimpleName nameNode = decl.getName();
    String methodName = nameNode.getIdentifier();

    IBinding[] bindings =
        (new ScopeAnalyzer(root)).getDeclarationsInScope(nameNode, ScopeAnalyzer.METHODS);
    for (int i = 0; i < bindings.length; i++) {
      String currName = bindings[i].getName();
      if (NameMatcher.isSimilarName(methodName, currName)) {
        String label =
            Messages.format(
                CorrectionMessages.UnresolvedElementsSubProcessor_arraychangetomethod_description,
                BasicElementLabels.getJavaElementName(currName));
        proposals.add(
            new RenameNodeCorrectionProposal(
                label,
                context.getCompilationUnit(),
                nameNode.getStartPosition(),
                nameNode.getLength(),
                currName,
                IProposalRelevance.ARRAY_CHANGE_TO_METHOD));
      }
    }
    // always suggest 'length'
    String lengthId = "length"; //$NON-NLS-1$
    String label =
        CorrectionMessages.UnresolvedElementsSubProcessor_arraychangetolength_description;
    int offset = nameNode.getStartPosition();
    int length = decl.getStartPosition() + decl.getLength() - offset;
    proposals.add(
        new RenameNodeCorrectionProposal(
            label,
            context.getCompilationUnit(),
            offset,
            length,
            lengthId,
            IProposalRelevance.ARRAY_CHANGE_TO_LENGTH));
  }

