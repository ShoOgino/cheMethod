    private List<TypedPosition> createRangeMarkers(TemplateVariable[] variables, IDocument document)
        throws MalformedTreeException, BadLocationException {
      Map<ReplaceEdit, String> markerToOriginal = new HashMap<ReplaceEdit, String>();

      MultiTextEdit root = new MultiTextEdit(0, document.getLength());
      List<TextEdit> edits = new ArrayList<TextEdit>();
      boolean hasModifications = false;
      for (int i = 0; i != variables.length; i++) {
        final TemplateVariable variable = variables[i];
        int[] offsets = variable.getOffsets();

        String value = variable.getDefaultValue();
        if (isWhitespaceVariable(value)) {
          // replace whitespace positions with unformattable comments
          String placeholder = COMMENT_START + value + COMMENT_END;
          for (int j = 0; j != offsets.length; j++) {
            ReplaceEdit replace = new ReplaceEdit(offsets[j], value.length(), placeholder);
            root.addChild(replace);
            hasModifications = true;
            markerToOriginal.put(replace, value);
            edits.add(replace);
          }
        } else {
          for (int j = 0; j != offsets.length; j++) {
            RangeMarker marker = new RangeMarker(offsets[j], value.length());
            root.addChild(marker);
            edits.add(marker);
          }
        }
      }

      if (hasModifications) {
        // update the document and convert the replaces to markers
        root.apply(document, TextEdit.UPDATE_REGIONS);
      }

      List<TypedPosition> positions = new ArrayList<TypedPosition>();
      for (Iterator<TextEdit> it = edits.iterator(); it.hasNext(); ) {
        TextEdit edit = it.next();
        try {
          // abuse TypedPosition to piggy back the original contents of the position
          final TypedPosition pos =
              new TypedPosition(edit.getOffset(), edit.getLength(), markerToOriginal.get(edit));
          document.addPosition(CATEGORY, pos);
          positions.add(pos);
        } catch (BadPositionCategoryException x) {
          Assert.isTrue(false);
        }
      }

      return positions;
    }

