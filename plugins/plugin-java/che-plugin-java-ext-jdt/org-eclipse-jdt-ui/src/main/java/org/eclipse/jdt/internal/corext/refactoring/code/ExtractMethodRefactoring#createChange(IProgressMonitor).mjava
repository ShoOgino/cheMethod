  /* (non-Javadoc)
   * Method declared in IRefactoring
   */
  @Override
  public Change createChange(IProgressMonitor pm) throws CoreException {
    if (fMethodName == null) return null;
    pm.beginTask("", 2); // $NON-NLS-1$
    try {
      fAnalyzer.aboutToCreateChange();
      BodyDeclaration declaration = fAnalyzer.getEnclosingBodyDeclaration();
      fRewriter = ASTRewrite.create(declaration.getAST());

      final CompilationUnitChange result =
          new CompilationUnitChange(
              RefactoringCoreMessages.ExtractMethodRefactoring_change_name, fCUnit);
      result.setSaveMode(TextFileChange.KEEP_SAVE_STATE);
      result.setDescriptor(new RefactoringChangeDescriptor(getRefactoringDescriptor()));

      MultiTextEdit root = new MultiTextEdit();
      result.setEdit(root);

      ASTNode[] selectedNodes = fAnalyzer.getSelectedNodes();
      fRewriter.setTargetSourceRangeComputer(
          new SelectionAwareSourceRangeComputer(
              selectedNodes, fCUnit.getBuffer(), fSelectionStart, fSelectionLength));

      TextEditGroup substituteDesc =
          new TextEditGroup(
              Messages.format(
                  RefactoringCoreMessages.ExtractMethodRefactoring_substitute_with_call,
                  BasicElementLabels.getJavaElementName(fMethodName)));
      result.addTextEditGroup(substituteDesc);

      MethodDeclaration mm =
          createNewMethod(selectedNodes, fCUnit.findRecommendedLineSeparator(), substituteDesc);

      if (fLinkedProposalModel != null) {
        LinkedProposalPositionGroup typeGroup =
            fLinkedProposalModel.getPositionGroup(KEY_TYPE, true);
        typeGroup.addPosition(fRewriter.track(mm.getReturnType2()), false);

        ITypeBinding typeBinding = fAnalyzer.getReturnTypeBinding();
        if (typeBinding != null) {
          ITypeBinding[] relaxingTypes = ASTResolving.getNarrowingTypes(fAST, typeBinding);
          for (int i = 0; i < relaxingTypes.length; i++) {
            typeGroup.addProposal(relaxingTypes[i], fCUnit, relaxingTypes.length - i);
          }
        }

        LinkedProposalPositionGroup nameGroup =
            fLinkedProposalModel.getPositionGroup(KEY_NAME, true);
        nameGroup.addPosition(fRewriter.track(mm.getName()), false);

        ModifierCorrectionSubProcessor.installLinkedVisibilityProposals(
            fLinkedProposalModel, fRewriter, mm.modifiers(), false);
      }

      TextEditGroup insertDesc =
          new TextEditGroup(
              Messages.format(
                  RefactoringCoreMessages.ExtractMethodRefactoring_add_method,
                  BasicElementLabels.getJavaElementName(fMethodName)));
      result.addTextEditGroup(insertDesc);

      if (fDestination == ASTResolving.findParentType(declaration.getParent())) {
        ChildListPropertyDescriptor desc =
            (ChildListPropertyDescriptor) declaration.getLocationInParent();
        ListRewrite container = fRewriter.getListRewrite(declaration.getParent(), desc);
        container.insertAfter(mm, declaration, insertDesc);
      } else {
        BodyDeclarationRewrite container = BodyDeclarationRewrite.create(fRewriter, fDestination);
        container.insert(mm, insertDesc);
      }

      replaceDuplicates(result, mm.getModifiers());
      replaceBranches(result);

      if (fImportRewriter.hasRecordedChanges()) {
        TextEdit edit = fImportRewriter.rewriteImports(null);
        root.addChild(edit);
        result.addTextEditGroup(
            new TextEditGroup(
                RefactoringCoreMessages.ExtractMethodRefactoring_organize_imports,
                new TextEdit[] {edit}));
      }
      root.addChild(fRewriter.rewriteAST());
      return result;
    } finally {
      pm.done();
    }
  }

