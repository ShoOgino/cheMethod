	/**
	 * Create equality constraints between generic type variables of expressionCv and referenceCv.
	 * For example, the generic interface <code>java.lang.Iterable&lt;E&gt;</code> defines a method
	 * <code>Iterator&lt;E&gt; iterator()</code>. Given
	 * <ul>
	 *   <li>an expressionCv of a subtype of <code>Iterable</code>,</li>
	 *   <li>a referenceCv of a subtype of <code>Iterator</code>, and</li>
	 *   <li>a reference binding of the Iterable#iterator()'s return type (the parameterized type <code>Iterator&lt;E&gt;</code>),</li>
	 * </ul>
	 * this method creates an equality constraint between the type variable E in expressionCV and
	 * the type variable E in referenceCV.
	 *
	 * @param expressionCv the type constraint variable of an expression
	 * @param methodTypeVariables
	 * @param referenceCv the type constraint variable of a type reference
	 * @param reference the declared type reference
	 */
	public void createTypeVariablesEqualityConstraints(ConstraintVariable2 expressionCv, Map<String, IndependentTypeVariable2> methodTypeVariables, ConstraintVariable2 referenceCv, TType reference) {
		if (reference.isParameterizedType() || reference.isRawType()) {
			TType[] referenceTypeArguments= null;
			if (reference.isParameterizedType()) {
				referenceTypeArguments= ((ParameterizedType) reference).getTypeArguments();
			}
			TType[] referenceTypeParameters= ((GenericType) reference.getTypeDeclaration()).getTypeParameters();
			for (int i= 0; i < referenceTypeParameters.length; i++) {
				TypeVariable referenceTypeParameter= (TypeVariable) referenceTypeParameters[i];
				TType referenceTypeArgument;
				if (referenceTypeArguments == null)
					referenceTypeArgument= referenceTypeParameter.getErasure();
				else
					referenceTypeArgument= referenceTypeArguments[i];
				if (referenceTypeArgument.isTypeVariable()) {
					ConstraintVariable2 referenceTypeArgumentCv= getElementTypeCv(referenceTypeArgument, expressionCv, methodTypeVariables);
					CollectionElementVariable2 referenceTypeParametersCv= getElementVariable(referenceCv, referenceTypeParameter);
					createEqualsConstraint(referenceTypeArgumentCv, referenceTypeParametersCv);
				} else if (referenceTypeArgument.isWildcardType()) {
					ConstraintVariable2 referenceTypeArgumentCv= makeImmutableTypeVariable(fTypeEnvironment.VOID); //block it for now (bug 106174)
					CollectionElementVariable2 referenceTypeParametersCv= getElementVariable(referenceCv, referenceTypeParameter);
					createEqualsConstraint(referenceTypeArgumentCv, referenceTypeParametersCv);

//					WildcardType wildcardType= (WildcardType) referenceTypeArgument;
//					if (wildcardType.isUnboundWildcardType()) {
//						ConstraintVariable2 referenceTypeArgumentCv= makeImmutableTypeVariable(wildcardType);
//						CollectionElementVariable2 referenceTypeParametersCv= getElementVariable(referenceCv, referenceTypeParameter);
//						createEqualsConstraint(referenceTypeArgumentCv, referenceTypeParametersCv);
//					} else if (wildcardType.isSuperWildcardType() && wildcardType.getBound().isTypeVariable()) {
//						ConstraintVariable2 referenceTypeArgumentBoundCv= getElementTypeCv(wildcardType.getBound(), expressionCv, methodTypeVariables);
//						CollectionElementVariable2 referenceTypeParametersCv= getElementVariable(referenceCv, referenceTypeParameter);
//						//TODO: need *strict* subtype constraint?
//						createSubtypeConstraint(referenceTypeParametersCv, referenceTypeArgumentBoundCv);
//					}
					// else: TODO

//				} else if (referenceTypeArgument.isParameterizedType()) {
//					//TODO: nested containers
//					ParameterizedType parameterizedType= (ParameterizedType) referenceTypeArgument;
//					ParameterizedTypeVariable2 parameterizedTypeCv= makeParameterizedTypeVariable(parameterizedType.getTypeDeclaration());
//					CollectionElementVariable2 referenceTypeParametersCv= getElementVariable(referenceCv, referenceTypeParameter);
//					createEqualsConstraint(parameterizedTypeCv, referenceTypeParametersCv);
//					createElementEqualsConstraints(parameterizedTypeCv, referenceTypeParametersCv);
				} else {
					//TODO
				}
			}

		} else if (reference.isArrayType()) {
			TType elementType= ((ArrayType) reference).getElementType();
			if (elementType.isRawType())
				elementType= elementType.getErasure();
			ConstraintVariable2 elementTypeCv= getElementTypeCv(elementType, expressionCv, methodTypeVariables);
			ArrayElementVariable2 arrayElementTypeCv= getArrayElementVariable(referenceCv);
			createEqualsConstraint(elementTypeCv, arrayElementTypeCv);
		}
	}

