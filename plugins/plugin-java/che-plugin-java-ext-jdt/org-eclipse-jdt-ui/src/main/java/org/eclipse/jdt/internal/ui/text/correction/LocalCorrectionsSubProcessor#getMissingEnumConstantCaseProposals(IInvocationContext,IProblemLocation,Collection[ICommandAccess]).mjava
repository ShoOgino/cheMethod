	public static void getMissingEnumConstantCaseProposals(IInvocationContext context, IProblemLocation problem,
														   Collection<ICommandAccess> proposals) {
		for (Iterator<ICommandAccess> iterator = proposals.iterator(); iterator.hasNext(); ) {
			ICommandAccess proposal = iterator.next();
			if (proposal instanceof ChangeCorrectionProposal) {
				if (CorrectionMessages.LocalCorrectionsSubProcessor_add_missing_cases_description
						.equals(((ChangeCorrectionProposal)proposal).getName())) {
					return;
				}
			}
		}

		ASTNode selectedNode = problem.getCoveringNode(context.getASTRoot());
		if (selectedNode instanceof Expression && selectedNode.getLocationInParent() == SwitchStatement.EXPRESSION_PROPERTY) {
			SwitchStatement statement = (SwitchStatement)selectedNode.getParent();
			ITypeBinding binding = statement.getExpression().resolveTypeBinding();
			if (binding == null || !binding.isEnum()) {
				return;
			}

			ArrayList<String> missingEnumCases = new ArrayList<String>();
			boolean hasDefault = evaluateMissingSwitchCases(binding, statement.statements(), missingEnumCases);
			if (missingEnumCases.size() == 0 && hasDefault)
				return;

			createMissingCaseProposals(context, statement, missingEnumCases, proposals);
		}
	}

