        private boolean needsImport(ITypeBinding typeBinding, SimpleName ref) {
            if (!typeBinding.isTopLevel() && !typeBinding.isMember() || typeBinding.isRecovered()) {
                return false; // no imports for anonymous, local, primitive types or parameters types
            }
            int modifiers = typeBinding.getModifiers();
            if (Modifier.isPrivate(modifiers)) {
                return false; // imports for privates are not required
            }
            ITypeBinding currTypeBinding = Bindings.getBindingOfParentType(ref);
            if (currTypeBinding == null) {
                if (ASTNodes.getParent(ref, ASTNode.PACKAGE_DECLARATION) != null) {
                    return true; // reference in package-info.java
                }
                return false; // not in a type
            }
            if (!Modifier.isPublic(modifiers)) {
                if (!currTypeBinding.getPackage().getName().equals(typeBinding.getPackage().getName())) {
                    return false; // not visible
                }
            }

            ASTNode parent = ref.getParent();
            while (parent instanceof Type) {
                parent = parent.getParent();
            }
            if (parent instanceof AbstractTypeDeclaration && parent.getParent() instanceof CompilationUnit) {
                return true;
            }

            if (typeBinding.isMember()) {
                if (fAnalyzer.isDeclaredInScope(typeBinding, ref, ScopeAnalyzer.TYPES | ScopeAnalyzer.CHECK_VISIBILITY))
                    return false;
            }
            return true;
        }

