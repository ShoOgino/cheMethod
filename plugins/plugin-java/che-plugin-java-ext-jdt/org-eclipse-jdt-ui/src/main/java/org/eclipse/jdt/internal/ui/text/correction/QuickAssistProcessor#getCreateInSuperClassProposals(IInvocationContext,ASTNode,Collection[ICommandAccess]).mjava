  public static boolean getCreateInSuperClassProposals(
      IInvocationContext context, ASTNode node, Collection<ICommandAccess> resultingCollections)
      throws CoreException {
    if (!(node instanceof SimpleName) || !(node.getParent() instanceof MethodDeclaration)) {
      return false;
    }
    MethodDeclaration decl = (MethodDeclaration) node.getParent();
    if (decl.getName() != node
        || decl.resolveBinding() == null
        || Modifier.isPrivate(decl.getModifiers())) {
      return false;
    }

    ICompilationUnit cu = context.getCompilationUnit();
    CompilationUnit astRoot = context.getASTRoot();

    IMethodBinding binding = decl.resolveBinding();
    ITypeBinding[] paramTypes = binding.getParameterTypes();

    ITypeBinding[] superTypes = Bindings.getAllSuperTypes(binding.getDeclaringClass());
    if (resultingCollections == null) {
      for (int i = 0; i < superTypes.length; i++) {
        ITypeBinding curr = superTypes[i];
        if (curr.isFromSource() && Bindings.findOverriddenMethodInType(curr, binding) == null) {
          return true;
        }
      }
      return false;
    }
    List<SingleVariableDeclaration> params = decl.parameters();
    String[] paramNames = new String[paramTypes.length];
    for (int i = 0; i < params.size(); i++) {
      SingleVariableDeclaration param = params.get(i);
      paramNames[i] = param.getName().getIdentifier();
    }

    for (int i = 0; i < superTypes.length; i++) {
      ITypeBinding curr = superTypes[i];
      if (curr.isFromSource()) {
        IMethodBinding method = Bindings.findOverriddenMethodInType(curr, binding);
        if (method == null) {
          ITypeBinding typeDecl = curr.getTypeDeclaration();
          ICompilationUnit targetCU =
              ASTResolving.findCompilationUnitForBinding(cu, astRoot, typeDecl);
          if (targetCU != null) {
            String label =
                Messages.format(
                    CorrectionMessages.QuickAssistProcessor_createmethodinsuper_description,
                    new String[] {
                      BasicElementLabels.getJavaElementName(curr.getName()),
                      BasicElementLabels.getJavaElementName(binding.getName())
                    });
            resultingCollections.add(
                new NewDefiningMethodProposal(
                    label,
                    targetCU,
                    astRoot,
                    typeDecl,
                    binding,
                    paramNames,
                    IProposalRelevance.CREATE_METHOD_IN_SUPER));
          }
        }
      }
    }
    return true;
  }

