		/**
		 * Rewrites the visibility adjustment.
		 *
		 * @param adjustor the java element visibility adjustor
		 * @param rewrite the AST rewrite to use
		 * @param root the root of the AST used in the rewrite
		 * @param group the text edit group description to use, or <code>null</code>
		 * @param status the refactoring status, or <code>null</code>
		 * @throws JavaModelException if an error occurs
		 */
		protected final void rewriteVisibility(final MemberVisibilityAdjustor adjustor, final ASTRewrite rewrite,
											   final CompilationUnit root, final CategorizedTextEditGroup group,
											   final RefactoringStatus status) throws JavaModelException {
			Assert.isNotNull(adjustor);
			Assert.isNotNull(rewrite);
			Assert.isNotNull(root);
			final int visibility = fKeyword != null ? fKeyword.toFlagValue() : Modifier.NONE;
			if (fMember instanceof IField && !Flags.isEnum(fMember.getFlags())) {
				final VariableDeclarationFragment fragment = ASTNodeSearchUtil.getFieldDeclarationFragmentNode((IField)fMember, root);
				final FieldDeclaration declaration = (FieldDeclaration)fragment.getParent();
				VariableDeclarationFragment[] fragmentsToChange = new VariableDeclarationFragment[]{fragment};
				VariableDeclarationRewrite
						.rewriteModifiers(declaration, fragmentsToChange, visibility, ModifierRewrite.VISIBILITY_MODIFIERS, rewrite,
										  group);
				if (status != null)
					adjustor.fStatus.merge(status);
			} else if (fMember != null) {
				final BodyDeclaration declaration = ASTNodeSearchUtil.getBodyDeclarationNode(fMember, root);
				if (declaration != null) {
					ModifierRewrite.create(rewrite, declaration).setVisibility(visibility, group);
					if (status != null)
						adjustor.fStatus.merge(status);
				}
			}
		}

