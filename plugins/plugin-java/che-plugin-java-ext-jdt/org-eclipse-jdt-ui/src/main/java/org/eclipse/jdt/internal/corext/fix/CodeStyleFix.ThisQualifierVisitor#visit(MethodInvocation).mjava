    /** {@inheritDoc} */
    @Override
    public boolean visit(final MethodInvocation node) {
      if (!fRemoveMethodQualifiers) return true;

      Expression expression = node.getExpression();
      if (!(expression instanceof ThisExpression)) return true;

      final SimpleName name = node.getName();
      if (name.resolveBinding() == null) return true;

      if (hasConflict(
          expression.getStartPosition(),
          name,
          ScopeAnalyzer.METHODS | ScopeAnalyzer.CHECK_VISIBILITY)) return true;

      Name qualifier = ((ThisExpression) expression).getQualifier();
      if (qualifier != null) {
        ITypeBinding declaringClass = ((IMethodBinding) name.resolveBinding()).getDeclaringClass();
        if (declaringClass == null) return true;

        ITypeBinding caller = getDeclaringType(node);
        if (caller == null) return true;

        ITypeBinding callee = (ITypeBinding) qualifier.resolveBinding();
        if (callee == null) return true;

        if (callee.isAssignmentCompatible(declaringClass)
            && caller.isAssignmentCompatible(declaringClass)) return true;
      }

      fOperations.add(
          new CompilationUnitRewriteOperation() {
            @Override
            public void rewriteAST(CompilationUnitRewrite cuRewrite, LinkedProposalModel model)
                throws CoreException {
              ASTRewrite rewrite = cuRewrite.getASTRewrite();
              TextEditGroup group =
                  createTextEditGroup(
                      FixMessages.CodeStyleFix_removeThis_groupDescription, cuRewrite);
              rewrite.remove(node.getExpression(), group);
            }
          });
      return super.visit(node);
    }

