  /**
   * Returns <code>true</code> if imports may be added. The return value depends on the context and
   * preferences only and does not take into account the contents of the compilation unit or the
   * kind of proposal. Even if <code>true</code> is returned, there may be cases where no imports
   * are added for the proposal. For example:
   *
   * <ul>
   *   <li>when completing within the import section
   *   <li>when completing informal javadoc references (e.g. within <code>&lt;code&gt;</code> tags)
   *   <li>when completing a type that conflicts with an existing import
   *   <li>when completing an implicitly imported type (same package, <code>java.lang</code> types)
   * </ul>
   *
   * <p>The decision whether a qualified type or the simple type name should be inserted must take
   * into account these different scenarios.
   *
   * <p>Subclasses may extend.
   *
   * @return <code>true</code> if imports may be added, <code>false</code> if not
   */
  protected boolean allowAddingImports() {
    if (isInJavadoc()) {
      // TODO fix
      //			if (!fContext.isInJavadocFormalReference())
      //				return false;
      if (fProposal.getKind() == CompletionProposal.TYPE_REF
          && fInvocationContext.getCoreContext().isInJavadocText()) return false;

      if (!isJavadocProcessingEnabled()) return false;
    }

    //		IPreferenceStore preferenceStore= JavaPlugin.getDefault().getPreferenceStore();
    //		return preferenceStore.getBoolean(PreferenceConstants.CODEASSIST_ADDIMPORT);
    return true;
  }

