    /**
     * Tests if a method equals to the given signature.
     * Parameter types are only compared by the simple name, no resolving for
     * the fully qualified type name is done. Constructors are only compared by
     * parameters, not the name.
     * @param name Name of the method
     * @param paramTypes The type signatures of the parameters e.g. <code>{"QString;","I"}</code>
     * @param isConstructor Specifies if the method is a constructor
     * @param curr the method
     * @return Returns <code>true</code> if the method has the given name and parameter types and constructor state.
     * @throws JavaModelException thrown when the method can not be accessed
     */
    public static boolean isSameMethodSignature(String name, String[] paramTypes, boolean isConstructor, IMethod curr) throws JavaModelException {
        if (isConstructor || name.equals(curr.getElementName())) {
            if (isConstructor == curr.isConstructor()) {
                String[] currParamTypes= curr.getParameterTypes();
                if (paramTypes.length == currParamTypes.length) {
                    for (int i= 0; i < paramTypes.length; i++) {
                        String t1= Signature.getSimpleName(Signature.toString(paramTypes[i]));
                        String t2= Signature.getSimpleName(Signature.toString(currParamTypes[i]));
                        if (!t1.equals(t2)) {
                            return false;
                        }
                    }
                    return true;
                }
            }
        }
        return false;
    }

