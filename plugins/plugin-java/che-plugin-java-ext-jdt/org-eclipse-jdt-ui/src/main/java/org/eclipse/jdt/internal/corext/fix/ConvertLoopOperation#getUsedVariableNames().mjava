  protected String[] getUsedVariableNames() {
    final List<String> results = new ArrayList<String>();

    ForStatement forStatement = getForStatement();
    CompilationUnit root = (CompilationUnit) forStatement.getRoot();

    Collection<String> variableNames =
        new ScopeAnalyzer(root)
            .getUsedVariableNames(forStatement.getStartPosition(), forStatement.getLength());
    results.addAll(variableNames);

    forStatement.accept(
        new GenericVisitor() {
          @Override
          public boolean visit(SingleVariableDeclaration node) {
            results.add(node.getName().getIdentifier());
            return super.visit(node);
          }

          @Override
          public boolean visit(VariableDeclarationFragment fragment) {
            results.add(fragment.getName().getIdentifier());
            return super.visit(fragment);
          }
        });

    results.addAll(Arrays.asList(fUsedNames));

    return results.toArray(new String[results.size()]);
  }

