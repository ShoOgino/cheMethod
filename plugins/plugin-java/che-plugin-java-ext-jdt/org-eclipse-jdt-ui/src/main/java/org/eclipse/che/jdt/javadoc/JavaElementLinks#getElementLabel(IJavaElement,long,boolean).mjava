  /**
   * Returns the label for a Java element with the flags as defined by {@link JavaElementLabels}.
   * Referenced element names in the label are rendered as header links. If <code>linkAllNames
   * </code> is <code>false</code>, don't link the name of the given element
   *
   * @param element the element to render
   * @param flags the rendering flags
   * @param linkAllNames if <code>true</code>, link all names; if <code>false</code>, link all names
   *     except original element's name
   * @return the label of the Java element
   * @since 3.6
   */
  public static String getElementLabel(IJavaElement element, long flags, boolean linkAllNames) {
    StringBuffer buf = new StringBuffer();

    //        if (!Strings.USE_TEXT_PROCESSOR) {
    //            new JavaElementLinkedLabelComposer(linkAllNames ? null : element,
    // buf).appendElementLabel(element, flags);
    //            return Strings.markJavaElementLabelLTR(buf.toString());
    //        } else {
    String label = JavaElementLabels.getElementLabel(element, flags);
    return label
        .replaceAll("<", "&lt;")
        .replaceAll(">", "&gt;"); // $NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
    //        }
  }

