  private RefactoringStatus initialize(JavaRefactoringArguments arguments) {
    final String selection =
        arguments.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_SELECTION);
    if (selection != null) {
      int offset = -1;
      int length = -1;
      final StringTokenizer tokenizer = new StringTokenizer(selection);
      if (tokenizer.hasMoreTokens()) offset = Integer.valueOf(tokenizer.nextToken()).intValue();
      if (tokenizer.hasMoreTokens()) length = Integer.valueOf(tokenizer.nextToken()).intValue();
      if (offset >= 0 && length >= 0) {
        fSelectionStart = offset;
        fSelectionLength = length;
      } else
        return RefactoringStatus.createFatalErrorStatus(
            Messages.format(
                RefactoringCoreMessages.InitializableRefactoring_illegal_argument,
                new Object[] {selection, JavaRefactoringDescriptorUtil.ATTRIBUTE_SELECTION}));
    }
    final String handle = arguments.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT);
    if (handle != null) {
      final IJavaElement element =
          JavaRefactoringDescriptorUtil.handleToElement(arguments.getProject(), handle, false);
      if (element == null || !element.exists())
        return JavaRefactoringDescriptorUtil.createInputFatalStatus(
            element, getName(), IJavaRefactorings.INLINE_CONSTANT);
      else {
        if (element instanceof ICompilationUnit) {
          fSelectionCu = (ICompilationUnit) element;
          if (selection == null)
            return RefactoringStatus.createFatalErrorStatus(
                Messages.format(
                    RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
                    JavaRefactoringDescriptorUtil.ATTRIBUTE_SELECTION));
        } else if (element instanceof IField) {
          final IField field = (IField) element;
          try {
            final ISourceRange range = field.getNameRange();
            if (range != null) {
              fSelectionStart = range.getOffset();
              fSelectionLength = range.getLength();
            } else
              return RefactoringStatus.createFatalErrorStatus(
                  Messages.format(
                      RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
                      IJavaRefactorings.INLINE_CONSTANT));
          } catch (JavaModelException exception) {
            return JavaRefactoringDescriptorUtil.createInputFatalStatus(
                element, getName(), IJavaRefactorings.INLINE_CONSTANT);
          }
          fSelectionCu = field.getCompilationUnit();
        } else
          return RefactoringStatus.createFatalErrorStatus(
              Messages.format(
                  RefactoringCoreMessages.InitializableRefactoring_illegal_argument,
                  new Object[] {handle, JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT}));
        final ASTParser parser = ASTParser.newParser(ASTProvider.SHARED_AST_LEVEL);
        parser.setResolveBindings(true);
        parser.setSource(fSelectionCu);
        final CompilationUnit unit = (CompilationUnit) parser.createAST(null);
        initialize(fSelectionCu, unit);
        if (checkStaticFinalConstantNameSelected().hasFatalError())
          return JavaRefactoringDescriptorUtil.createInputFatalStatus(
              element, getName(), IJavaRefactorings.INLINE_CONSTANT);
      }
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT));
    final String replace = arguments.getAttribute(ATTRIBUTE_REPLACE);
    if (replace != null) {
      fReplaceAllReferences = Boolean.valueOf(replace).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_REPLACE));
    final String remove = arguments.getAttribute(ATTRIBUTE_REMOVE);
    if (remove != null) fRemoveDeclaration = Boolean.valueOf(remove).booleanValue();
    else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_REMOVE));
    return new RefactoringStatus();
  }

