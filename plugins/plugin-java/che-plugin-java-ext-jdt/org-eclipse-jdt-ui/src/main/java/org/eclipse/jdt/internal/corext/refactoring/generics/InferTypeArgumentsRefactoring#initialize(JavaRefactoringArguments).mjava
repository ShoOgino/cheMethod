  private RefactoringStatus initialize(JavaRefactoringArguments arguments) {
    final String clone = arguments.getAttribute(ATTRIBUTE_CLONE);
    if (clone != null) {
      fAssumeCloneReturnsSameType = Boolean.valueOf(clone).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_CLONE));
    final String leave = arguments.getAttribute(ATTRIBUTE_LEAVE);
    if (leave != null) {
      fLeaveUnconstrainedRaw = Boolean.valueOf(leave).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_LEAVE));
    int count = 1;
    final List<IJavaElement> elements = new ArrayList<IJavaElement>();
    String handle = null;
    String attribute = JavaRefactoringDescriptorUtil.ATTRIBUTE_ELEMENT + count;
    final RefactoringStatus status = new RefactoringStatus();
    while ((handle = arguments.getAttribute(attribute)) != null) {
      final IJavaElement element =
          JavaRefactoringDescriptorUtil.handleToElement(arguments.getProject(), handle, false);
      if (element == null || !element.exists())
        return JavaRefactoringDescriptorUtil.createInputFatalStatus(
            element, getName(), IJavaRefactorings.INFER_TYPE_ARGUMENTS);
      else elements.add(element);
      count++;
      attribute = JavaRefactoringDescriptorUtil.ATTRIBUTE_ELEMENT + count;
    }
    fElements = elements.toArray(new IJavaElement[elements.size()]);
    if (elements.isEmpty())
      return JavaRefactoringDescriptorUtil.createInputFatalStatus(
          null, getName(), IJavaRefactorings.INFER_TYPE_ARGUMENTS);
    if (!status.isOK()) return status;
    return new RefactoringStatus();
  }

