  /**
   * Update internal structures after reconcile.
   *
   * @param ast the compilation unit AST or <code>null</code> if the working copy was consistent or
   *     reconciliation has been cancelled
   * @param javaElement the Java element for which the AST was built
   * @param progressMonitor the progress monitor
   * @see org.eclipse.jdt.internal.ui.text.java.IJavaReconcilingListener#reconciled(CompilationUnit,
   *     boolean, IProgressMonitor)
   */
  void reconciled(CompilationUnit ast, ITypeRoot javaElement, IProgressMonitor progressMonitor) {
    //        if (DEBUG)
    //            System.out.println(getThreadName() + " - " + DEBUG_PREFIX + "reconciled: " + toString(javaElement) + ", AST: " + toString(ast)); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
    //
    //        synchronized (fReconcileLock) {
    //            fIsReconciling= false;
    //            if (javaElement == null || !javaElement.equals(fReconcilingJavaElement)) {
    //
    //                if (DEBUG)
    //                    System.out.println(getThreadName() + " - " + DEBUG_PREFIX + "  ignoring AST of out-dated editor"); //$NON-NLS-1$ //$NON-NLS-2$
    //
    //                // Signal - threads might wait for wrong element
    //                synchronized (fWaitLock) {
    //                    fWaitLock.notifyAll();
    //                }
    //
    //                return;
    //            }
    //            cache(ast, javaElement);
    //        }
  }

