	/*
	 * @see org.eclipse.jface.text.templates.TemplateVariableResolver#resolve(org.eclipse.jface.text.templates.TemplateVariable, org.eclipse.jface.text.templates.TemplateContext)
	 */
	@Override
	public void resolve(TemplateVariable variable, TemplateContext context) {
		List<String> params= variable.getVariableType().getParams();
		String param;
		if (params.size() == 0)
			param= fDefaultType;
		else
			param= params.get(0);
		JavaContext jc= (JavaContext) context;
		TemplateVariable ref= jc.getTemplateVariable(param);
		MultiVariable mv= (MultiVariable) variable;
		if (ref instanceof MultiVariable) {
			// reference is another variable
			MultiVariable refVar= (MultiVariable) ref;
			jc.addDependency(refVar, mv);

			refVar.getAllChoices();
			Object[] types= flatten(refVar.getAllChoices());
			for (int i= 0; i < types.length; i++) {
				String[] names= jc.suggestVariableNames(mv.toString(types[i]));
				mv.setChoices(types[i], names);
			}

			mv.setKey(refVar.getCurrentChoice());
			jc.markAsUsed(mv.getDefaultValue());
		} else {
			// reference is a Java type name
			jc.addImport(param);
			String[] names= jc.suggestVariableNames(param);
			mv.setChoices(names);
			jc.markAsUsed(names[0]);
		}
	}

