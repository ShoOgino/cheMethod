  /**
   * From <code>position</code> to the left, eats any whitespace and the first identifier, returning
   * the position of the first identifier character (in normal read order).
   *
   * <p>When called on a document with content <code>" some string  "</code> and positionition 13,
   * the return value will be 6 (the first letter in <code>string</code>).
   *
   * @param document the document being modified
   * @param position the first character position in <code>document</code> to be considered
   * @param partitioning the document partitioning
   * @return the smallest character position of an identifier or -1 if none can be found; always
   *     &lt;= <code>position</code>
   */
  private static int eatIdentToLeft(IDocument document, int position, String partitioning) {
    if (position < 0) return -1;
    Assert.isTrue(position < document.getLength());

    int p = firstNonWhitespaceBackward(document, position, partitioning, -1);
    if (p == -1) return -1;

    try {
      while (p >= 0) {

        char ch = document.getChar(p);
        if (Character.isJavaIdentifierPart(ch)) {
          p--;
          continue;
        }

        // length must be > 0
        if (Character.isWhitespace(ch) && p != position) return p + 1;
        else return -1;
      }

      // start of document reached
      return 0;

    } catch (BadLocationException e) {
    }
    return -1;
  }

