  private static void checkName(
      RefactoringStatus status,
      String name,
      List<IMethodBinding> usedNames,
      IType type,
      boolean reUseExistingField,
      IField field) {
    if ("".equals(name)) { // $NON-NLS-1$
      status.addFatalError(RefactoringCoreMessages.Checks_Choose_name);
      return;
    }
    boolean isStatic = false;
    try {
      isStatic = Flags.isStatic(field.getFlags());
    } catch (JavaModelException e) {
      JavaPlugin.log(e);
    }
    status.merge(Checks.checkMethodName(name, field));
    for (Iterator<IMethodBinding> iter = usedNames.iterator(); iter.hasNext(); ) {
      IMethodBinding method = iter.next();
      String selector = method.getName();
      if (selector.equals(name)) {
        if (!reUseExistingField) {
          status.addFatalError(
              Messages.format(
                  RefactoringCoreMessages.SelfEncapsulateField_method_exists,
                  new String[] {
                    BindingLabelProvider.getBindingLabel(
                        method, JavaElementLabels.ALL_FULLY_QUALIFIED),
                    BasicElementLabels.getJavaElementName(type.getElementName())
                  }));
        } else {
          boolean methodIsStatic = Modifier.isStatic(method.getModifiers());
          if (methodIsStatic && !isStatic)
            status.addWarning(
                Messages.format(
                    RefactoringCoreMessages
                        .SelfEncapsulateFieldRefactoring_static_method_but_nonstatic_field,
                    new String[] {
                      BasicElementLabels.getJavaElementName(method.getName()),
                      BasicElementLabels.getJavaElementName(field.getElementName())
                    }));
          if (!methodIsStatic && isStatic)
            status.addFatalError(
                Messages.format(
                    RefactoringCoreMessages
                        .SelfEncapsulateFieldRefactoring_nonstatic_method_but_static_field,
                    new String[] {
                      BasicElementLabels.getJavaElementName(method.getName()),
                      BasicElementLabels.getJavaElementName(field.getElementName())
                    }));
          return;
        }
      }
    }
    if (reUseExistingField)
      status.addFatalError(
          Messages.format(
              RefactoringCoreMessages
                  .SelfEncapsulateFieldRefactoring_methoddoesnotexist_status_fatalError,
              new String[] {
                BasicElementLabels.getJavaElementName(name),
                BasicElementLabels.getJavaElementName(type.getElementName())
              }));
  }

