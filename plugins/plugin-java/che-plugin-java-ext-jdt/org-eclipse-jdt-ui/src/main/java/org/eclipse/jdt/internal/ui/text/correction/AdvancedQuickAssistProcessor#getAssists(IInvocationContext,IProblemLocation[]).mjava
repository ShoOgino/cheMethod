  /* (non-Javadoc)
   * @see org.eclipse.jdt.internal.ui.text.correction.IAssistProcessor#getAssists(org.eclipse.jdt.internal.ui.text.correction.IAssistContext, org.eclipse.jdt.internal.ui.text.correction.IProblemLocation[])
   */
  public IJavaCompletionProposal[] getAssists(
      IInvocationContext context, IProblemLocation[] locations) throws CoreException {
    ASTNode coveringNode = context.getCoveringNode();
    if (coveringNode != null) {
      ArrayList<ASTNode> coveredNodes = getFullyCoveredNodes(context, coveringNode);
      ArrayList<ICommandAccess> resultingCollections = new ArrayList<ICommandAccess>();

      //quick assists that show up also if there is an error/warning
      getReplaceConditionalWithIfElseProposals(context, coveringNode, resultingCollections);

      if (QuickAssistProcessor.noErrorsAtLocation(locations)) {
        getConvertToIfReturnProposals(context, coveringNode, resultingCollections);
        getInverseIfProposals(context, coveringNode, resultingCollections);
        getIfReturnIntoIfElseAtEndOfVoidMethodProposals(
            context, coveringNode, resultingCollections);
        getInverseIfContinueIntoIfThenInLoopsProposals(context, coveringNode, resultingCollections);
        getInverseIfIntoContinueInLoopsProposals(context, coveringNode, resultingCollections);
        getInverseConditionProposals(context, coveringNode, coveredNodes, resultingCollections);
        getRemoveExtraParenthesesProposals(
            context, coveringNode, coveredNodes, resultingCollections);
        getAddParanoidalParenthesesProposals(context, coveredNodes, resultingCollections);
        getAddParenthesesForExpressionProposals(context, coveringNode, resultingCollections);
        getJoinAndIfStatementsProposals(context, coveringNode, resultingCollections);
        getSplitAndConditionProposals(context, coveringNode, resultingCollections);
        getJoinOrIfStatementsProposals(context, coveringNode, coveredNodes, resultingCollections);
        getSplitOrConditionProposals(context, coveringNode, resultingCollections);
        getInverseConditionalExpressionProposals(context, coveringNode, resultingCollections);
        getExchangeInnerAndOuterIfConditionsProposals(context, coveringNode, resultingCollections);
        getExchangeOperandsProposals(context, coveringNode, resultingCollections);
        getCastAndAssignIfStatementProposals(context, coveringNode, resultingCollections);
        getCombineStringProposals(context, coveringNode, resultingCollections);
        getPickOutStringProposals(context, coveringNode, resultingCollections);
        getReplaceIfElseWithConditionalProposals(context, coveringNode, resultingCollections);
        getInverseLocalVariableProposals(context, coveringNode, resultingCollections);
        getPushNegationDownProposals(context, coveringNode, resultingCollections);
        getPullNegationUpProposals(context, coveredNodes, resultingCollections);
        getJoinIfListInIfElseIfProposals(context, coveringNode, coveredNodes, resultingCollections);
        getConvertSwitchToIfProposals(context, coveringNode, resultingCollections);
        getConvertIfElseToSwitchProposals(context, coveringNode, resultingCollections);
        GetterSetterCorrectionSubProcessor.addGetterSetterProposal(
            context, coveringNode, locations, resultingCollections);
      }

      return resultingCollections.toArray(new IJavaCompletionProposal[resultingCollections.size()]);
    }
    return null;
  }

