	/**
	 * Helper to generate an index based <code>for</code> loop to iterate over a {@link List}
	 * implementation.
	 * 
	 * @param ast the current {@link AST} instance to generate the {@link ASTRewrite} for
	 * @return an applicable {@link ASTRewrite} instance
	 */
	private ASTRewrite generateIndexBasedForRewrite(AST ast) {
		ASTRewrite rewrite= ASTRewrite.create(ast);

		ForStatement loopStatement= ast.newForStatement();
		SimpleName loopVariableName= resolveLinkedVariableNameWithProposals(rewrite, "int", null, true); //$NON-NLS-1$
		loopStatement.initializers().add(getForInitializer(ast, loopVariableName));

		MethodInvocation listSizeExpression= ast.newMethodInvocation();
		listSizeExpression.setName(ast.newSimpleName("size")); //$NON-NLS-1$
		Expression listExpression= (Expression) rewrite.createCopyTarget(fCurrentExpression);
		listSizeExpression.setExpression(listExpression);

		loopStatement.setExpression(getLinkedInfixExpression(rewrite, loopVariableName.getIdentifier(), listSizeExpression, InfixExpression.Operator.LESS));
		loopStatement.updaters().add(getLinkedIncrementExpression(rewrite, loopVariableName.getIdentifier()));

		Block forLoopBody= ast.newBlock();
		forLoopBody.statements().add(ast.newExpressionStatement(getIndexBasedForBodyAssignment(rewrite, loopVariableName)));
		forLoopBody.statements().add(createBlankLineStatementWithCursorPosition(rewrite));
		loopStatement.setBody(forLoopBody);
		rewrite.replace(fCurrentNode, loopStatement, null);

		return rewrite;
	}

