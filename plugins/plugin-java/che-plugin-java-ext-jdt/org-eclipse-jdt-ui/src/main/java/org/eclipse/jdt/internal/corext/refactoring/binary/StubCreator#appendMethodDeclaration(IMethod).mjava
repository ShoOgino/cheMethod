  protected void appendMethodDeclaration(final IMethod method) throws JavaModelException {
    appendFlags(method);
    fBuffer.append(" "); //$NON-NLS-1$
    final ITypeParameter[] parameters = method.getTypeParameters();
    if (parameters.length > 0) {
      appendTypeParameters(parameters);
      fBuffer.append(" "); //$NON-NLS-1$
    }
    final String returnType = method.getReturnType();
    if (!method.isConstructor()) {
      fBuffer.append(Signature.toString(returnType));
      fBuffer.append(" "); //$NON-NLS-1$
    }
    fBuffer.append(method.getElementName());
    fBuffer.append("("); //$NON-NLS-1$
    final String[] parameterTypes = method.getParameterTypes();
    final int flags = method.getFlags();
    final boolean varargs = Flags.isVarargs(flags);
    final int parameterLength = parameterTypes.length;
    for (int index = 0; index < parameterLength; index++) {
      if (index > 0) fBuffer.append(","); //$NON-NLS-1$
      fBuffer.append(Signature.toString(parameterTypes[index]));
      if (varargs && index == parameterLength - 1) {
        final int length = fBuffer.length();
        if (length >= 2 && fBuffer.indexOf("[]", length - 2) >= 0) //$NON-NLS-1$
        fBuffer.setLength(length - 2);
        fBuffer.append("..."); //$NON-NLS-1$
      }
      fBuffer.append(" "); //$NON-NLS-1$
      appendMethodParameterName(method, index);
    }
    fBuffer.append(")"); //$NON-NLS-1$
    final String[] exceptionTypes = method.getExceptionTypes();
    final int exceptionLength = exceptionTypes.length;
    if (exceptionLength > 0) fBuffer.append(" throws "); //$NON-NLS-1$
    for (int index = 0; index < exceptionLength; index++) {
      if (index > 0) fBuffer.append(","); //$NON-NLS-1$
      fBuffer.append(Signature.toString(exceptionTypes[index]));
    }
    if (Flags.isAbstract(flags) || Flags.isNative(flags)) fBuffer.append(";"); //$NON-NLS-1$
    else {
      fBuffer.append("{\n"); //$NON-NLS-1$
      appendMethodBody(method);
      fBuffer.append("}"); //$NON-NLS-1$
    }
  }

