    /**
     * Normalizes a type binding received from an expression to a type binding that can be used inside a
     * declaration signature, but <em>not</em> as type of a declaration (use {@link #normalizeForDeclarationUse(ITypeBinding, AST)} for that).
     * <p>
     * Anonymous types are normalized to the super class or interface. For
     * null or void bindings, <code>null</code> is returned.
     * </p>
     *
     * @param binding the binding to normalize
     * @return the normalized binding, can be <code>null</code>
     *
     * @see #normalizeForDeclarationUse(ITypeBinding, AST)
     */
    public static ITypeBinding normalizeTypeBinding(ITypeBinding binding) {
        if (binding != null && !binding.isNullType() && !isVoidType(binding)) {
            if (binding.isAnonymous()) {
                ITypeBinding[] baseBindings= binding.getInterfaces();
                if (baseBindings.length > 0) {
                    return baseBindings[0];
                }
                return binding.getSuperclass();
            }
            if (binding.isCapture()) {
                return binding.getWildcard();
            }
            return binding;
        }
        return null;
    }

