  private static Expression createSwitchCaseCondition(
      AST ast,
      ASTRewrite rewrite,
      ImportRewrite importRewrite,
      ImportRewriteContext importRewriteContext,
      Name switchExpression,
      SwitchCase switchCase,
      boolean isStringsInSwitch,
      boolean preserveNPE) {
    Expression expression = switchCase.getExpression();
    if (expression == null) return null;

    if (isStringsInSwitch) {
      MethodInvocation methodInvocation = ast.newMethodInvocation();
      methodInvocation.setName(ast.newSimpleName("equals")); // $NON-NLS-1$
      if (preserveNPE) {
        methodInvocation.setExpression(
            (Expression)
                rewrite.createStringPlaceholder(
                    switchExpression.getFullyQualifiedName(), ASTNode.QUALIFIED_NAME));
        methodInvocation.arguments().add(rewrite.createCopyTarget(expression));
      } else {
        methodInvocation.setExpression((Expression) rewrite.createCopyTarget(expression));
        methodInvocation
            .arguments()
            .add(
                rewrite.createStringPlaceholder(
                    switchExpression.getFullyQualifiedName(), ASTNode.QUALIFIED_NAME));
      }
      return methodInvocation;
    } else {
      InfixExpression condition = ast.newInfixExpression();
      condition.setOperator(InfixExpression.Operator.EQUALS);
      condition.setLeftOperand(
          (Expression)
              rewrite.createStringPlaceholder(
                  switchExpression.getFullyQualifiedName(), ASTNode.QUALIFIED_NAME));

      Expression rightExpression = null;
      if (expression instanceof SimpleName
          && ((SimpleName) expression).resolveBinding() instanceof IVariableBinding) {
        IVariableBinding binding = (IVariableBinding) ((SimpleName) expression).resolveBinding();
        if (binding.isEnumConstant()) {
          String qualifiedName =
              importRewrite.addImport(binding.getDeclaringClass(), importRewriteContext)
                  + '.'
                  + binding.getName();
          rightExpression = ast.newName(qualifiedName);
        }
      }
      if (rightExpression == null) {
        rightExpression = (Expression) rewrite.createCopyTarget(expression);
      }
      condition.setRightOperand(rightExpression);
      return condition;
    }
  }

