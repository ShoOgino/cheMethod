	/* (non-Javadoc)
	 * @see org.eclipse.jface.text.templates.TemplateVariableResolver#resolve(org.eclipse.jface.text.templates.TemplateVariable, org.eclipse.jface.text.templates.TemplateContext)
	 */
	@Override
	public void resolve(TemplateVariable variable, TemplateContext context) {

		if (variable instanceof JavaVariable) {
			JavaContext jc= (JavaContext) context;
			JavaVariable jv= (JavaVariable) variable;

			List<String> params= variable.getVariableType().getParams();
			if (params.size() == 0) {
				fVariables= getVisibleVariables(fDefaultType, jc);
				jv.setParamType(fDefaultType);
			} else if (params.size() == 1) {
				String type= params.get(0);
				fVariables= getVisibleVariables(type, jc);
				jv.setParamType(type);
			} else {
				ArrayList<Variable> variables= new ArrayList<Variable>();
				for (Iterator<String> iterator= params.iterator(); iterator.hasNext();) {
					variables.addAll(Arrays.asList(getVisibleVariables(iterator.next(), jc)));
				}
				fVariables= variables.toArray(new Variable[variables.size()]);

				//set to default type, a template which references to the type
				//of _the_ parameter will not correctly work anyway
				jv.setParamType(fDefaultType);
			}

			if (fVariables.length > 0) {
				jv.setChoices(fVariables);
				jc.markAsUsed(jv.getDefaultValue());
			} else {
				super.resolve(variable, context);
				return;
			}
			if (fVariables.length > 1)
				variable.setUnambiguous(false);
			else
				variable.setUnambiguous(isUnambiguous(context));
		} else
			super.resolve(variable, context);
	}

