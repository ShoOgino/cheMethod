  private static CUCorrectionProposal createTypeRefChangeProposal(
      ICompilationUnit cu, String fullName, Name node, int relevance, int maxProposals) {
    ImportRewrite importRewrite = null;
    String simpleName = fullName;
    String packName = Signature.getQualifier(fullName);
    if (packName.length() > 0) { // no imports for primitive types, type variables
      importRewrite = StubUtility.createImportRewrite((CompilationUnit) node.getRoot(), true);
      BodyDeclaration scope =
          ASTResolving.findParentBodyDeclaration(node); // can be null in package-info.java
      ImportRewriteContext context =
          new ContextSensitiveImportRewriteContext(scope != null ? scope : node, importRewrite);
      simpleName = importRewrite.addImport(fullName, context);
    }

    if (!isLikelyTypeName(simpleName)) {
      relevance -= 2;
    }

    ASTRewriteCorrectionProposal proposal;
    if (importRewrite != null
        && node.isSimpleName()
        && simpleName.equals(((SimpleName) node).getIdentifier())) { // import only
      // import only
      String[] arg = {
        BasicElementLabels.getJavaElementName(simpleName),
        BasicElementLabels.getJavaElementName(packName)
      };
      String label =
          Messages.format(
              CorrectionMessages.UnresolvedElementsSubProcessor_importtype_description, arg);
      Image image = JavaPluginImages.get(JavaPluginImages.IMG_OBJS_IMPDECL);
      int boost = QualifiedTypeNameHistory.getBoost(fullName, 0, maxProposals);
      proposal =
          new AddImportCorrectionProposal(
              label, cu, relevance + 100 + boost, image, packName, simpleName, (SimpleName) node);
      proposal.setCommandId(ADD_IMPORT_ID);
    } else {
      String label;
      if (packName.length() == 0) {
        label =
            Messages.format(
                CorrectionMessages.UnresolvedElementsSubProcessor_changetype_nopack_description,
                BasicElementLabels.getJavaElementName(simpleName));
      } else {
        String[] arg = {
          BasicElementLabels.getJavaElementName(simpleName),
          BasicElementLabels.getJavaElementName(packName)
        };
        label =
            Messages.format(
                CorrectionMessages.UnresolvedElementsSubProcessor_changetype_description, arg);
      }
      ASTRewrite rewrite = ASTRewrite.create(node.getAST());
      rewrite.replace(node, rewrite.createStringPlaceholder(simpleName, ASTNode.SIMPLE_TYPE), null);
      Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
      proposal = new ASTRewriteCorrectionProposal(label, cu, rewrite, relevance, image);
    }
    if (importRewrite != null) {
      proposal.setImportRewrite(importRewrite);
    }
    return proposal;
  }

