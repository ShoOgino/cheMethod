  private RefactoringStatus initialize(JavaRefactoringArguments extended) {
    final String handle = extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT);
    if (handle != null) {
      final IJavaElement element =
          JavaRefactoringDescriptorUtil.handleToElement(extended.getProject(), handle, false);
      if (element == null || !element.exists() || element.getElementType() != IJavaElement.FIELD)
        return JavaRefactoringDescriptorUtil.createInputFatalStatus(
            element, getProcessorName(), IJavaRefactorings.RENAME_FIELD);
      else fField = (IField) element;
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_INPUT));
    final String name = extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_NAME);
    if (name != null && !"".equals(name)) //$NON-NLS-1$
    setNewElementName(name);
    else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_NAME));
    final String references =
        extended.getAttribute(JavaRefactoringDescriptorUtil.ATTRIBUTE_REFERENCES);
    if (references != null) {
      fUpdateReferences = Boolean.valueOf(references).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              JavaRefactoringDescriptorUtil.ATTRIBUTE_REFERENCES));
    final String matches = extended.getAttribute(ATTRIBUTE_TEXTUAL_MATCHES);
    if (matches != null) {
      fUpdateTextualMatches = Boolean.valueOf(matches).booleanValue();
    } else
      return RefactoringStatus.createFatalErrorStatus(
          Messages.format(
              RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
              ATTRIBUTE_TEXTUAL_MATCHES));
    final String getters = extended.getAttribute(ATTRIBUTE_RENAME_GETTER);
    if (getters != null) fRenameGetter = Boolean.valueOf(getters).booleanValue();
    else fRenameGetter = false;
    final String setters = extended.getAttribute(ATTRIBUTE_RENAME_SETTER);
    if (setters != null) fRenameSetter = Boolean.valueOf(setters).booleanValue();
    else fRenameSetter = false;
    final String delegate = extended.getAttribute(ATTRIBUTE_DELEGATE);
    if (delegate != null) {
      fDelegateUpdating = Boolean.valueOf(delegate).booleanValue();
    } else fDelegateUpdating = false;
    final String deprecate = extended.getAttribute(ATTRIBUTE_DEPRECATE);
    if (deprecate != null) {
      fDelegateDeprecation = Boolean.valueOf(deprecate).booleanValue();
    } else fDelegateDeprecation = false;
    return new RefactoringStatus();
  }

