  /**
   * Returns the found search matches in grouped by their containing resource.
   *
   * @return the found search matches
   */
  private SearchResultGroup[] getGroupedMatches() {
    final Map<IResource, List<SearchMatch>> grouped = new HashMap<IResource, List<SearchMatch>>();
    List<SearchMatch> matches = null;
    IResource resource = null;
    SearchMatch match = null;
    for (final Iterator<?> iterator = getSearchMatches().iterator(); iterator.hasNext(); ) {
      match = (SearchMatch) iterator.next();
      resource = match.getResource();
      if (!grouped.containsKey(resource)) grouped.put(resource, new ArrayList<SearchMatch>(4));
      matches = grouped.get(resource);
      matches.add(match);
    }
    if (fBinary) {
      final Collection<IResource> collection = getCollector().getBinaryResources();
      for (final Iterator<IResource> iterator = grouped.keySet().iterator(); iterator.hasNext(); ) {
        resource = iterator.next();
        if (collection.contains(resource)) iterator.remove();
      }
    }
    final SearchResultGroup[] result = new SearchResultGroup[grouped.keySet().size()];
    int index = 0;
    for (final Iterator<IResource> iterator = grouped.keySet().iterator(); iterator.hasNext(); ) {
      resource = iterator.next();
      matches = grouped.get(resource);
      result[index++] =
          new SearchResultGroup(resource, matches.toArray(new SearchMatch[matches.size()]));
    }
    return result;
  }

