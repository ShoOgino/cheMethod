    public void rewriteImports(TextChangeManager changeManager, IProgressMonitor pm)
        throws CoreException {
      for (Iterator<Entry<ICompilationUnit, ImportChange>> iter =
              fImportChanges.entrySet().iterator();
          iter.hasNext();
          ) {
        Entry<ICompilationUnit, ImportChange> entry = iter.next();
        ICompilationUnit cu = entry.getKey();
        ImportChange importChange = entry.getValue();

        ImportRewrite importRewrite = StubUtility.createImportRewrite(cu, true);
        importRewrite.setFilterImplicitImports(false);
        for (Iterator<String> iterator = importChange.fStaticToRemove.iterator();
            iterator.hasNext();
            ) {
          importRewrite.removeStaticImport(iterator.next());
        }
        for (Iterator<String> iterator = importChange.fToRemove.iterator(); iterator.hasNext(); ) {
          importRewrite.removeImport(iterator.next());
        }
        for (Iterator<String[]> iterator = importChange.fStaticToAdd.iterator();
            iterator.hasNext();
            ) {
          String[] toAdd = iterator.next();
          importRewrite.addStaticImport(toAdd[0], toAdd[1], true);
        }
        for (Iterator<String> iterator = importChange.fToAdd.iterator(); iterator.hasNext(); ) {
          importRewrite.addImport(iterator.next());
        }

        if (importRewrite.hasRecordedChanges()) {
          TextEdit importEdit = importRewrite.rewriteImports(pm);
          String name = RefactoringCoreMessages.RenamePackageRefactoring_update_imports;
          try {
            TextChangeCompatibility.addTextEdit(changeManager.get(cu), name, importEdit);
          } catch (MalformedTreeException e) {
            JavaPlugin.logErrorMessage(
                "MalformedTreeException while processing cu " + cu); //$NON-NLS-1$
            throw e;
          }
        }
      }
    }

