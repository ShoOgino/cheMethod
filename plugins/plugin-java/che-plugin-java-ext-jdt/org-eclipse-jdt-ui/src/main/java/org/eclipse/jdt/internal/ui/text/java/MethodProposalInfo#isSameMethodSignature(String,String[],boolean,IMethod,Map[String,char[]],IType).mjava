  /**
   * Tests if a method equals to the given signature. Parameter types are only compared by the
   * simple name, no resolving for the fully qualified type name is done. Constructors are only
   * compared by parameters, not the name.
   *
   * @param name Name of the method
   * @param paramTypes The type signatures of the parameters e.g. <code>{"QString;","I"}</code>
   * @param isConstructor Specifies if the method is a constructor
   * @param method the method to be compared with this info's method
   * @param typeVariables a map from type variables to types
   * @param type the given type that declares the method
   * @return Returns <code>true</code> if the method has the given name and parameter types and
   *     constructor state.
   * @throws org.eclipse.jdt.core.JavaModelException if the method does not exist or if an exception
   *     occurs while accessing its corresponding resource
   */
  private boolean isSameMethodSignature(
      String name,
      String[] paramTypes,
      boolean isConstructor,
      IMethod method,
      Map<String, char[]> typeVariables,
      IType type)
      throws JavaModelException {
    if (isConstructor || name.equals(method.getElementName())) {
      if (isConstructor == method.isConstructor()) {
        String[] otherParams = method.getParameterTypes(); // types may be type variables
        boolean isBinaryConstructorForNonStaticMemberClass =
            method.isBinary() && type.isMember() && !Flags.isStatic(type.getFlags());
        int syntheticParameterCorrection =
            isBinaryConstructorForNonStaticMemberClass
                    && paramTypes.length == otherParams.length - 1
                ? 1
                : 0;
        if (paramTypes.length == otherParams.length - syntheticParameterCorrection) {
          fFallbackMatch = method;
          String signature = method.getSignature();
          String[] otherParamsFromSignature =
              Signature.getParameterTypes(signature); // types are resolved / upper-bounded
          // no need to check method type variables since these are
          // not yet bound when proposing a method
          for (int i = 0; i < paramTypes.length; i++) {
            String ourParamName = computeSimpleTypeName(paramTypes[i], typeVariables);
            String otherParamName1 =
                computeSimpleTypeName(otherParams[i + syntheticParameterCorrection], typeVariables);
            String otherParamName2 =
                computeSimpleTypeName(
                    otherParamsFromSignature[i + syntheticParameterCorrection], typeVariables);

            if (!ourParamName.equals(otherParamName1) && !ourParamName.equals(otherParamName2)) {
              return false;
            }
          }
          return true;
        }
      }
    }
    return false;
  }

