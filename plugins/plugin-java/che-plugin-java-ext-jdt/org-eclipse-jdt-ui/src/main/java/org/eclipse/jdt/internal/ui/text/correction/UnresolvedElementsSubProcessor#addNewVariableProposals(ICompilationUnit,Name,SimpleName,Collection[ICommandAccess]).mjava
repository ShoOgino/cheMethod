  private static void addNewVariableProposals(
      ICompilationUnit cu, Name node, SimpleName simpleName, Collection<ICommandAccess> proposals) {
    String name = simpleName.getIdentifier();
    BodyDeclaration bodyDeclaration = ASTResolving.findParentBodyDeclaration(node, true);
    int type = bodyDeclaration.getNodeType();
    if (type == ASTNode.METHOD_DECLARATION) {
      int relevance =
          StubUtility.hasParameterName(cu.getJavaProject(), name)
              ? IProposalRelevance.CREATE_PARAMETER_PREFIX_OR_SUFFIX_MATCH
              : IProposalRelevance.CREATE_PARAMETER;
      String label =
          Messages.format(
              CorrectionMessages.UnresolvedElementsSubProcessor_createparameter_description,
              BasicElementLabels.getJavaElementName(name));
      Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_LOCAL);
      proposals.add(
          new NewVariableCorrectionProposal(
              label, cu, NewVariableCorrectionProposal.PARAM, simpleName, null, relevance, image));
    }
    if (type == ASTNode.INITIALIZER
        || type == ASTNode.METHOD_DECLARATION
            && !ASTResolving.isInsideConstructorInvocation(
                (MethodDeclaration) bodyDeclaration, node)) {
      int relevance =
          StubUtility.hasLocalVariableName(cu.getJavaProject(), name)
              ? IProposalRelevance.CREATE_LOCAL_PREFIX_OR_SUFFIX_MATCH
              : IProposalRelevance.CREATE_LOCAL;
      String label =
          Messages.format(
              CorrectionMessages.UnresolvedElementsSubProcessor_createlocal_description,
              BasicElementLabels.getJavaElementName(name));
      Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_LOCAL);
      proposals.add(
          new NewVariableCorrectionProposal(
              label, cu, NewVariableCorrectionProposal.LOCAL, simpleName, null, relevance, image));
    }

    if (node.getParent().getNodeType() == ASTNode.ASSIGNMENT) {
      Assignment assignment = (Assignment) node.getParent();
      if (assignment.getLeftHandSide() == node
          && assignment.getParent().getNodeType() == ASTNode.EXPRESSION_STATEMENT) {
        ASTNode statement = assignment.getParent();
        ASTRewrite rewrite = ASTRewrite.create(statement.getAST());
        if (ASTNodes.isControlStatementBody(assignment.getParent().getLocationInParent())) {
          rewrite.replace(statement, rewrite.getAST().newBlock(), null);
        } else {
          rewrite.remove(statement, null);
        }
        String label =
            CorrectionMessages.UnresolvedElementsSubProcessor_removestatement_description;
        Image image =
            JavaPluginImages.get(
                JavaPluginImages
                    .IMG_TOOL_DELETE); //JavaPlugin.getDefault().getWorkbench().getSharedImages().getImage(ISharedImages.IMG_TOOL_DELETE);
        ASTRewriteCorrectionProposal proposal =
            new ASTRewriteCorrectionProposal(
                label, cu, rewrite, IProposalRelevance.REMOVE_ASSIGNMENT, image);
        proposals.add(proposal);
      }
    }
  }

