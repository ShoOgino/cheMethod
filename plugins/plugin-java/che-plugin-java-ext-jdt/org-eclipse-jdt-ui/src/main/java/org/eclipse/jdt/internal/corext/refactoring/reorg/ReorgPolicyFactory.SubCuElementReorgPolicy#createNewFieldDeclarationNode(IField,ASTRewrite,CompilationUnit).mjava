    private BodyDeclaration createNewFieldDeclarationNode(
        IField field, ASTRewrite rewrite, CompilationUnit sourceCuNode) throws CoreException {
      AST targetAst = rewrite.getAST();
      BodyDeclaration newDeclaration = null;

      BodyDeclaration bodyDeclaration =
          ASTNodeSearchUtil.getFieldOrEnumConstantDeclaration(field, sourceCuNode);
      if (bodyDeclaration instanceof FieldDeclaration) {
        FieldDeclaration fieldDeclaration = (FieldDeclaration) bodyDeclaration;
        if (fieldDeclaration.fragments().size() == 1)
          return (FieldDeclaration)
              rewrite.createStringPlaceholder(
                  getUnindentedSource(field), ASTNode.FIELD_DECLARATION);
        VariableDeclarationFragment originalFragment =
            ASTNodeSearchUtil.getFieldDeclarationFragmentNode(field, sourceCuNode);
        VariableDeclarationFragment copiedFragment =
            (VariableDeclarationFragment) ASTNode.copySubtree(targetAst, originalFragment);
        newDeclaration = targetAst.newFieldDeclaration(copiedFragment);
        ((FieldDeclaration) newDeclaration)
            .setType((Type) ASTNode.copySubtree(targetAst, fieldDeclaration.getType()));
      } else if (bodyDeclaration instanceof EnumConstantDeclaration) {
        EnumConstantDeclaration constantDeclaration = (EnumConstantDeclaration) bodyDeclaration;
        EnumConstantDeclaration newConstDeclaration = targetAst.newEnumConstantDeclaration();
        newConstDeclaration.setName(
            (SimpleName) ASTNode.copySubtree(targetAst, constantDeclaration.getName()));
        AnonymousClassDeclaration anonymousDeclaration =
            constantDeclaration.getAnonymousClassDeclaration();
        if (anonymousDeclaration != null) {
          String content = ASTNodes.getNodeSource(anonymousDeclaration, false, true);
          if (content != null) {
            newConstDeclaration.setAnonymousClassDeclaration(
                (AnonymousClassDeclaration)
                    rewrite.createStringPlaceholder(content, ASTNode.ANONYMOUS_CLASS_DECLARATION));
          }
        }
        newDeclaration = newConstDeclaration;
      } else Assert.isTrue(false);
      if (newDeclaration != null) {
        newDeclaration
            .modifiers()
            .addAll(ASTNodeFactory.newModifiers(targetAst, bodyDeclaration.getModifiers()));
        Javadoc javadoc = bodyDeclaration.getJavadoc();
        if (javadoc != null) {
          String content = ASTNodes.getNodeSource(javadoc, false, true);
          if (content != null) {
            newDeclaration.setJavadoc(
                (Javadoc) rewrite.createStringPlaceholder(content, ASTNode.JAVADOC));
          }
        }
      }

      return newDeclaration;
    }

