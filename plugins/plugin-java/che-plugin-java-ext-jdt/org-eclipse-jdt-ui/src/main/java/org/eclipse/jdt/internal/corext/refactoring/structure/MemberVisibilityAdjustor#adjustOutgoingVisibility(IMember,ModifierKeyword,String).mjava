  /**
   * Adjusts the visibility of the referenced body declaration.
   *
   * @param member the member where to adjust the visibility
   * @param threshold the visibility keyword representing the required visibility, or <code>null
   *     </code> for default visibility
   * @param template the message template to use
   * @throws JavaModelException if an error occurs
   */
  private void adjustOutgoingVisibility(
      final IMember member, final ModifierKeyword threshold, final String template)
      throws JavaModelException {
    Assert.isTrue(!member.isBinary() && !member.isReadOnly());
    boolean adjust = true;
    final IType declaring = member.getDeclaringType();
    if (declaring != null
        && (JavaModelUtil.isInterfaceOrAnnotation(declaring)
            || (member instanceof IField) && Flags.isEnum(member.getFlags())
            || declaring.equals(fReferenced))) adjust = false;
    if (adjust
        && hasLowerVisibility(member.getFlags(), keywordToVisibility(threshold))
        && needsVisibilityAdjustment(member, threshold))
      fAdjustments.put(
          member,
          new OutgoingMemberVisibilityAdjustment(
              member,
              threshold,
              RefactoringStatus.createStatus(
                  fVisibilitySeverity,
                  Messages.format(
                      template,
                      new String[] {
                        JavaElementLabels.getTextLabel(
                            member,
                            JavaElementLabels.M_PARAMETER_TYPES
                                | JavaElementLabels.ALL_FULLY_QUALIFIED),
                        getLabel(threshold)
                      }),
                  JavaStatusContext.create(member),
                  null,
                  RefactoringStatusEntry.NO_CODE,
                  null)));
  }

