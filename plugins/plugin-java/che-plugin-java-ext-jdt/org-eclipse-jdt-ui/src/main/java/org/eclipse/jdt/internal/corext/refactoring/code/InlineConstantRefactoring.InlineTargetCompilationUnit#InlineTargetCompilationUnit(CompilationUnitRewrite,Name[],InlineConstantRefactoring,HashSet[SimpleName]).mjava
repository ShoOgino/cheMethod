    private InlineTargetCompilationUnit(
        CompilationUnitRewrite cuRewrite,
        Name[] references,
        InlineConstantRefactoring refactoring,
        HashSet<SimpleName> staticImportsInInitializer) {
      fInitializer = refactoring.getInitializer();
      fInitializerUnit = refactoring.getDeclaringCompilationUnit();

      fCuRewrite = cuRewrite;
      fSourceRangeComputer = new TightSourceRangeComputer();
      fCuRewrite.getASTRewrite().setTargetSourceRangeComputer(fSourceRangeComputer);
      if (refactoring.getRemoveDeclaration()
          && refactoring.getReplaceAllReferences()
          && cuRewrite.getCu().equals(fInitializerUnit))
        fDeclarationToRemove = refactoring.getDeclaration();
      else fDeclarationToRemove = null;

      fOriginalDeclaration = refactoring.getDeclaration();

      fReferences = new Expression[references.length];
      for (int i = 0; i < references.length; i++)
        fReferences[i] = getQualifiedReference(references[i]);

      fIs15 = JavaModelUtil.is50OrHigher(cuRewrite.getCu().getJavaProject());
      fStaticImportsInInitializer = fIs15 ? staticImportsInInitializer : new HashSet<SimpleName>(0);
    }

