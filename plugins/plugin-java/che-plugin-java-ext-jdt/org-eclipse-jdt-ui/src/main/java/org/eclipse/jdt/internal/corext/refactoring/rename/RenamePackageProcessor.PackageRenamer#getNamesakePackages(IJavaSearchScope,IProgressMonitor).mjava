    /**
     * @param scope search scope
     * @param pm mrogress monitor
     * @return all package fragments in <code>scope</code> with same name as <code>fPackage</code>,
     *     excluding fPackage
     * @throws CoreException if search failed
     */
    private IPackageFragment[] getNamesakePackages(IJavaSearchScope scope, IProgressMonitor pm)
        throws CoreException {
      SearchPattern pattern =
          SearchPattern.createPattern(
              fPackage.getElementName(),
              IJavaSearchConstants.PACKAGE,
              IJavaSearchConstants.DECLARATIONS,
              SearchPattern.R_EXACT_MATCH | SearchPattern.R_CASE_SENSITIVE);

      final HashSet<IPackageFragment> packageFragments = new HashSet<IPackageFragment>();
      SearchRequestor requestor =
          new SearchRequestor() {
            @Override
            public void acceptSearchMatch(SearchMatch match) throws CoreException {
              IJavaElement enclosingElement = SearchUtils.getEnclosingJavaElement(match);
              if (enclosingElement instanceof IPackageFragment) {
                IPackageFragment pack = (IPackageFragment) enclosingElement;
                if (!fPackage.equals(pack)) packageFragments.add(pack);
              }
            }
          };
      new SearchEngine()
          .search(pattern, SearchUtils.getDefaultSearchParticipants(), scope, requestor, pm);

      return packageFragments.toArray(new IPackageFragment[packageFragments.size()]);
    }

