  /* (non-Javadoc)
   * @see org.eclipse.jdt.core.refactoring.descriptors.JavaRefactoringDescriptor#populateArgumentMap()
   */
  protected void populateArgumentMap() {
    super.populateArgumentMap();
    JavaRefactoringDescriptorUtil.setJavaElement(
        fArguments, ATTRIBUTE_INPUT, getProject(), fMethod);
    Parameter[] parameters = fParameters;
    if (parameters == null) {
      parameters = createParameters(fMethod);
    }
    JavaRefactoringDescriptorUtil.setInt(fArguments, PARAMETER_COUNT, parameters.length);
    for (int i = 0; i < parameters.length; i++) {
      Parameter param = parameters[i];
      JavaRefactoringDescriptorUtil.setInt(
          fArguments,
          JavaRefactoringDescriptorUtil.getAttributeName(PARAMETER_IDX, i),
          param.getIndex());
      JavaRefactoringDescriptorUtil.setBoolean(
          fArguments,
          JavaRefactoringDescriptorUtil.getAttributeName(PARAMETER_CREATE_FIELD, i),
          param.isCreateField());
      if (param.isCreateField())
        JavaRefactoringDescriptorUtil.setString(
            fArguments,
            JavaRefactoringDescriptorUtil.getAttributeName(PARAMETER_FIELD_NAME, i),
            param.getFieldName());
    }
    JavaRefactoringDescriptorUtil.setString(fArguments, CLASS_NAME, fClassName);
    JavaRefactoringDescriptorUtil.setString(fArguments, PACKAGE_NAME, fPackageName);
    JavaRefactoringDescriptorUtil.setString(fArguments, PARAMETER_NAME, fParameterName);
    JavaRefactoringDescriptorUtil.setBoolean(fArguments, DELEGATE, fDelegate);
    JavaRefactoringDescriptorUtil.setBoolean(fArguments, DEPRECATE_DELEGATE, fDeprecateDelegate);
    JavaRefactoringDescriptorUtil.setBoolean(fArguments, GETTERS, fGetters);
    JavaRefactoringDescriptorUtil.setBoolean(fArguments, SETTERS, fSetters);
    JavaRefactoringDescriptorUtil.setBoolean(fArguments, TOP_LEVEL, fTopLevel);
  }

