  /**
   * Prepares the delegate member. The delegate member will have the same signature as the old
   * member and contain a call to the new member and a javadoc reference with a reference to the new
   * member.
   *
   * <p>All references to the new member will contain the new name of the member and/or new
   * declaring type, if any.
   */
  public void prepareDelegate() throws JavaModelException {
    Assert.isNotNull(fDelegateRewrite);
    Assert.isNotNull(fDeclaration);

    initialize();

    // Moving to a new type?
    if (fDestinationTypeBinding != null) {
      fDestinationType =
          fOriginalRewrite.getImportRewrite().addImport(fDestinationTypeBinding, getAst());
      fIsMoveToAnotherFile = true;
    } else fIsMoveToAnotherFile = false;

    fTrackedPosition = fDelegateRewrite.getASTRewrite().track(fDeclaration);

    ASTNode delegateBody = createBody(fDeclaration);
    if (delegateBody != null) {
      // is null for interface and abstract methods
      fDelegateRewrite
          .getASTRewrite()
          .set(getBodyHead(fDeclaration), getBodyProperty(), delegateBody, null);
    }

    if (fDeclareDeprecated) {
      createJavadoc();
    }
  }

