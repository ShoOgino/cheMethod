  private IMember[] convertElements(IMember[] oldElements) {

    final IMember[] newElements = new IMember[oldElements.length];
    final IMember first = oldElements[0];

    Assert.isTrue(first instanceof IType);

    if (first.equals(fOldType))
      // We renamed a top level type.
      newElements[0] = fNewType;
    else newElements[0] = first;

    /*
     * Note that we only need to translate the information necessary to
     * create new handles. For example, the return type of a method is not
     * relevant; neither is information about generic specifics in types.
     */

    for (int i = 1; i < oldElements.length; i++) {
      final IJavaElement newParent = newElements[i - 1];
      final IJavaElement currentElement = oldElements[i];
      switch (newParent.getElementType()) {
        case IJavaElement.TYPE:
          {
            switch (currentElement.getElementType()) {
              case IJavaElement.TYPE:
                {
                  final String newName = resolveTypeName((IType) currentElement);
                  newElements[i] = ((IType) newParent).getType(newName);
                  break;
                }
              case IJavaElement.METHOD:
                {
                  final String newName = resolveElementName(currentElement);
                  final String[] newParameterTypes =
                      resolveParameterTypes((IMethod) currentElement);
                  newElements[i] = ((IType) newParent).getMethod(newName, newParameterTypes);
                  break;
                }
              case IJavaElement.INITIALIZER:
                {
                  final IInitializer initializer = (IInitializer) currentElement;
                  newElements[i] =
                      ((IType) newParent).getInitializer(initializer.getOccurrenceCount());
                  break;
                }
              case IJavaElement.FIELD:
                {
                  final String newName = resolveElementName(currentElement);
                  newElements[i] = ((IType) newParent).getField(newName);
                  break;
                }
            }
            break;
          }
        case IJavaElement.METHOD:
          {
            switch (currentElement.getElementType()) {
              case IJavaElement.TYPE:
                {
                  newElements[i] = resolveTypeInMember((IMethod) newParent, (IType) currentElement);
                  break;
                }
            }
            break;
          }
        case IJavaElement.INITIALIZER:
          {
            switch (currentElement.getElementType()) {
              case IJavaElement.TYPE:
                {
                  newElements[i] =
                      resolveTypeInMember((IInitializer) newParent, (IType) currentElement);
                  break;
                }
            }
            break;
          }
        case IJavaElement.FIELD:
          {
            switch (currentElement.getElementType()) {
              case IJavaElement.TYPE:
                {
                  // anonymous type in field declaration
                  newElements[i] = resolveTypeInMember((IField) newParent, (IType) currentElement);
                  break;
                }
            }
            break;
          }
      }
    }
    return newElements;
  }

