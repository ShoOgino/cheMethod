  /**
   * Helper to generate an iterator based <code>for</code> loop to iterate over an {@link Iterable}.
   *
   * @param ast the {@link AST} instance to rewrite the loop to
   * @return the complete {@link ASTRewrite} object
   */
  private ASTRewrite generateIteratorBasedForRewrite(AST ast) {
    ASTRewrite rewrite = ASTRewrite.create(ast);
    ForStatement loopStatement = ast.newForStatement();

    ITypeBinding loopOverType = extractElementType(ast);

    SimpleName loopVariableName =
        resolveLinkedVariableNameWithProposals(rewrite, "iterator", null, true); //$NON-NLS-1$
    loopStatement.initializers().add(getIteratorBasedForInitializer(rewrite, loopVariableName));

    MethodInvocation loopExpression = ast.newMethodInvocation();
    loopExpression.setName(ast.newSimpleName("hasNext")); //$NON-NLS-1$
    SimpleName expressionName = ast.newSimpleName(loopVariableName.getIdentifier());
    addLinkedPosition(
        rewrite.track(expressionName), LinkedPositionGroup.NO_STOP, expressionName.getIdentifier());
    loopExpression.setExpression(expressionName);

    loopStatement.setExpression(loopExpression);

    Block forLoopBody = ast.newBlock();
    Assignment assignResolvedVariable =
        getIteratorBasedForBodyAssignment(rewrite, loopOverType, loopVariableName);
    forLoopBody.statements().add(ast.newExpressionStatement(assignResolvedVariable));
    forLoopBody.statements().add(createBlankLineStatementWithCursorPosition(rewrite));

    loopStatement.setBody(forLoopBody);

    rewrite.replace(fCurrentNode, loopStatement, null);

    return rewrite;
  }

