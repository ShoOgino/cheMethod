  private ArrayList<TType> getNonTaggingInterfaces(ArrayList<TType> interfaceCandidates) {
    ArrayList<TType> unresolvedTypes = new ArrayList<TType>();
    ArrayList<TType> nonTagging = new ArrayList<TType>();

    for (int i = 0; i < interfaceCandidates.size(); i++) {
      TType interf = interfaceCandidates.get(i);
      Object isTagging = fInterfaceTaggingCache.get(interf);
      if (isTagging == null) unresolvedTypes.add(interf);
      else if (isTagging == Boolean.FALSE) nonTagging.add(interf);
    }

    if (unresolvedTypes.size() != 0) {
      TType[] interfaces = unresolvedTypes.toArray(new TType[unresolvedTypes.size()]);
      for (int i = 0; i < interfaces.length; i++) {
        TType interf = interfaces[i];
        if (isTaggingInterface(interf)) {
          fInterfaceTaggingCache.put(interf, Boolean.TRUE);
        } else {
          fInterfaceTaggingCache.put(interf, Boolean.FALSE);
          nonTagging.add(interf);
        }
      }
    }

    return nonTagging;
  }

