  private static Type parseSuperType(String superType, boolean isInterface) {
    if (!superType.trim().equals(superType)) {
      return null;
    }

    StringBuffer cuBuff = new StringBuffer();
    if (isInterface) cuBuff.append("class __X__ implements "); //$NON-NLS-1$
    else cuBuff.append("class __X__ extends "); //$NON-NLS-1$
    int offset = cuBuff.length();
    cuBuff.append(superType).append(" {}"); //$NON-NLS-1$

    ASTParser p = ASTParser.newParser(ASTProvider.SHARED_AST_LEVEL);
    p.setSource(cuBuff.toString().toCharArray());
    Map<String, String> options = new HashMap<String, String>();
    JavaModelUtil.setComplianceOptions(options, JavaModelUtil.VERSION_LATEST);
    p.setCompilerOptions(options);
    CompilationUnit cu = (CompilationUnit) p.createAST(null);
    ASTNode selected = NodeFinder.perform(cu, offset, superType.length());
    if (selected instanceof Name) selected = selected.getParent();
    if (selected.getStartPosition() != offset
        || selected.getLength() != superType.length()
        || !(selected instanceof Type)
        || selected instanceof PrimitiveType) {
      return null;
    }
    Type type = (Type) selected;

    String typeNodeRange =
        cuBuff.substring(type.getStartPosition(), ASTNodes.getExclusiveEnd(type));
    if (!superType.equals(typeNodeRange)) {
      return null;
    }
    return type;
  }

