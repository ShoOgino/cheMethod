  public static ICopyPolicy createCopyPolicy(
      RefactoringStatus status, JavaRefactoringArguments arguments) {
    final String policy = arguments.getAttribute(ATTRIBUTE_POLICY);
    if (policy != null && !"".equals(policy)) { // $NON-NLS-1$
      if (CopyFilesFoldersAndCusPolicy.POLICY_COPY_RESOURCE.equals(policy)) {
        return new CopyFilesFoldersAndCusPolicy(null, null, null);
      } else if (CopyPackageFragmentRootsPolicy.POLICY_COPY_ROOTS.equals(policy)) {
        return new CopyPackageFragmentRootsPolicy(null);
      } else if (CopyPackagesPolicy.POLICY_COPY_PACKAGES.equals(policy)) {
        return new CopyPackagesPolicy(null);
      } else if (CopySubCuElementsPolicy.POLICY_COPY_MEMBERS.equals(policy)) {
        return new CopySubCuElementsPolicy(null);
      } else
        status.merge(
            RefactoringStatus.createFatalErrorStatus(
                Messages.format(
                    RefactoringCoreMessages.InitializableRefactoring_illegal_argument,
                    new String[] {policy, ATTRIBUTE_POLICY})));
    } else
      status.merge(
          RefactoringStatus.createFatalErrorStatus(
              Messages.format(
                  RefactoringCoreMessages.InitializableRefactoring_argument_not_exist,
                  ATTRIBUTE_POLICY)));
    return null;
  }

