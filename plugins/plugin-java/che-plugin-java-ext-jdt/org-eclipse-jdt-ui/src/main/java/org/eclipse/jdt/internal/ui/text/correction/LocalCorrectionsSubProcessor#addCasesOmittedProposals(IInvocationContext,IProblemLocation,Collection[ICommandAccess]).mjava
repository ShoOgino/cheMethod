  public static void addCasesOmittedProposals(
      IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals) {
    ASTNode selectedNode = problem.getCoveringNode(context.getASTRoot());
    if (selectedNode instanceof Expression
        && selectedNode.getLocationInParent() == SwitchStatement.EXPRESSION_PROPERTY) {
      AST ast = selectedNode.getAST();
      SwitchStatement parent = (SwitchStatement) selectedNode.getParent();

      for (Statement statement : (List<Statement>) parent.statements()) {
        if (statement instanceof SwitchCase && ((SwitchCase) statement).isDefault()) {

          // insert //$CASES-OMITTED$:
          ASTRewrite rewrite = ASTRewrite.create(ast);
          rewrite.setTargetSourceRangeComputer(new NoCommentSourceRangeComputer());
          ListRewrite listRewrite =
              rewrite.getListRewrite(parent, SwitchStatement.STATEMENTS_PROPERTY);
          ASTNode casesOmittedComment =
              rewrite.createStringPlaceholder(
                  "//$CASES-OMITTED$", ASTNode.EMPTY_STATEMENT); // $NON-NLS-1$
          listRewrite.insertBefore(casesOmittedComment, statement, null);

          String label = CorrectionMessages.LocalCorrectionsSubProcessor_insert_cases_omitted;
          Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
          ASTRewriteCorrectionProposal proposal =
              new ASTRewriteCorrectionProposal(
                  label,
                  context.getCompilationUnit(),
                  rewrite,
                  IProposalRelevance.INSERT_CASES_OMITTED,
                  image);
          proposals.add(proposal);
          break;
        }
      }
    }
  }

