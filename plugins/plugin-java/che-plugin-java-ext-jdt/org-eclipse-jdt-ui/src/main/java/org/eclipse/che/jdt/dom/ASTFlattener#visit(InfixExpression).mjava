  /*
   * @see ASTVisitor#visit(InfixExpression)
   */
  @Override
  public boolean visit(InfixExpression node) {
    node.getLeftOperand().accept(this);
    this.fBuffer.append(' '); // for cases like x= i - -1; or x= i++ + ++i;
    this.fBuffer.append(node.getOperator().toString());
    this.fBuffer.append(' ');
    node.getRightOperand().accept(this);
    final List<Expression> extendedOperands = node.extendedOperands();
    if (extendedOperands.size() != 0) {
      this.fBuffer.append(' ');
      for (Iterator<Expression> it = extendedOperands.iterator(); it.hasNext(); ) {
        this.fBuffer.append(node.getOperator().toString()).append(' ');
        Expression e = it.next();
        e.accept(this);
      }
    }
    return false;
  }

