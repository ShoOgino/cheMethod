  private static void fillWithTypeStubs(
      final StringBuffer bufBefore,
      final StringBuffer bufAfter,
      final int focalPosition,
      List<? extends BodyDeclaration> types) {
    StringBuffer buf;
    for (Iterator<? extends BodyDeclaration> iter = types.iterator(); iter.hasNext(); ) {
      BodyDeclaration bodyDeclaration = iter.next();
      if (!(bodyDeclaration instanceof AbstractTypeDeclaration)) {
        // account for local classes:
        if (!(bodyDeclaration instanceof MethodDeclaration)) continue;
        int bodyStart = bodyDeclaration.getStartPosition();
        int bodyEnd = bodyDeclaration.getStartPosition() + bodyDeclaration.getLength();
        if (!(bodyStart < focalPosition && focalPosition < bodyEnd)) continue;
        MethodDeclaration methodDeclaration = (MethodDeclaration) bodyDeclaration;
        buf = bufBefore;
        appendModifiers(buf, methodDeclaration.modifiers());
        appendTypeParameters(buf, methodDeclaration.typeParameters());
        buf.append(" void "); // $NON-NLS-1$
        buf.append(methodDeclaration.getName().getIdentifier());
        buf.append("(){\n"); // $NON-NLS-1$
        Block body = methodDeclaration.getBody();
        body.accept(
            new HierarchicalASTVisitor() {
              @Override
              public boolean visit(AbstractTypeDeclaration node) {
                fillWithTypeStubs(
                    bufBefore, bufAfter, focalPosition, Collections.singletonList(node));
                return false;
              }

              @Override
              public boolean visit(ClassInstanceCreation node) {
                AnonymousClassDeclaration anonDecl = node.getAnonymousClassDeclaration();
                if (anonDecl == null) return true; // could be in CIC parameter list
                int anonStart = anonDecl.getStartPosition();
                int anonEnd = anonDecl.getStartPosition() + anonDecl.getLength();
                if (!(anonStart < focalPosition && focalPosition < anonEnd)) return false;
                bufBefore.append(" new "); // $NON-NLS-1$
                bufBefore.append(node.getType().toString());
                bufBefore.append("(){\n"); // $NON-NLS-1$
                fillWithTypeStubs(bufBefore, bufAfter, focalPosition, anonDecl.bodyDeclarations());
                bufAfter.append("};\n"); // $NON-NLS-1$
                return false;
              }
            });
        buf = bufAfter;
        buf.append("}\n"); // $NON-NLS-1$
        continue;
      }

      AbstractTypeDeclaration decl = (AbstractTypeDeclaration) bodyDeclaration;
      buf = decl.getStartPosition() < focalPosition ? bufBefore : bufAfter;
      appendModifiers(buf, decl.modifiers());

      if (decl instanceof TypeDeclaration) {
        TypeDeclaration type = (TypeDeclaration) decl;
        buf.append(type.isInterface() ? "interface " : "class "); // $NON-NLS-1$//$NON-NLS-2$
        buf.append(type.getName().getIdentifier());
        appendTypeParameters(buf, type.typeParameters());
        if (type.getSuperclassType() != null) {
          buf.append(" extends "); // $NON-NLS-1$
          buf.append(ASTNodes.asString(type.getSuperclassType()));
        }
        List<Type> superInterfaces = type.superInterfaceTypes();
        appendSuperInterfaces(buf, superInterfaces);

      } else if (decl instanceof AnnotationTypeDeclaration) {
        AnnotationTypeDeclaration annotation = (AnnotationTypeDeclaration) decl;
        buf.append("@interface "); // $NON-NLS-1$
        buf.append(annotation.getName().getIdentifier());

      } else if (decl instanceof EnumDeclaration) {
        EnumDeclaration enumDecl = (EnumDeclaration) decl;
        buf.append("enum "); // $NON-NLS-1$
        buf.append(enumDecl.getName().getIdentifier());
        List<Type> superInterfaces = enumDecl.superInterfaceTypes();
        appendSuperInterfaces(buf, superInterfaces);
      }

      buf.append("{\n"); // $NON-NLS-1$
      if (decl instanceof EnumDeclaration) buf.append(";\n"); // $NON-NLS-1$
      fillWithTypeStubs(bufBefore, bufAfter, focalPosition, decl.bodyDeclarations());
      buf = decl.getStartPosition() + decl.getLength() < focalPosition ? bufBefore : bufAfter;
      buf.append("}\n"); // $NON-NLS-1$
    }
  }

