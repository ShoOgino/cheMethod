  /* (non-Javadoc)
   * @see org.eclipse.jdt.core.dom.ASTVisitor#visit(org.eclipse.jdt.core.dom.MethodInvocation)
   */
  @Override
  public ITypeConstraint[] create(MethodInvocation invocation) {
    List<Expression> arguments = invocation.arguments();
    List<ITypeConstraint> result = new ArrayList<ITypeConstraint>(arguments.size());
    IMethodBinding methodBinding = invocation.resolveMethodBinding();
    if (methodBinding == null) return new ITypeConstraint[0];
    ITypeConstraint[] returnTypeConstraint = getReturnTypeConstraint(invocation, methodBinding);
    result.addAll(Arrays.asList(returnTypeConstraint));
    result.addAll(Arrays.asList(getArgumentConstraints(arguments, methodBinding)));
    if (invocation.getExpression() != null) {
      if (MethodChecks.isVirtual(methodBinding)) {
        IMethodBinding[] rootDefs = getRootDefs(methodBinding);
        Assert.isTrue(rootDefs.length > 0);
        ConstraintVariable expressionVar =
            fConstraintVariableFactory.makeExpressionOrTypeVariable(
                invocation.getExpression(), getContext());
        if (rootDefs.length == 1) {
          result.addAll(
              Arrays.asList(
                  fTypeConstraintFactory.createSubtypeConstraint(
                      expressionVar,
                      fConstraintVariableFactory.makeDeclaringTypeVariable(rootDefs[0]))));
        } else {
          Collection<ITypeConstraint> constraints = new ArrayList<ITypeConstraint>();
          for (int i = 0; i < rootDefs.length; i++) {
            ConstraintVariable rootDefTypeVar =
                fConstraintVariableFactory.makeDeclaringTypeVariable(rootDefs[i]);
            ITypeConstraint[] tc =
                fTypeConstraintFactory.createSubtypeConstraint(expressionVar, rootDefTypeVar);
            constraints.addAll(Arrays.asList(tc));
          }
          ITypeConstraint[] constraintsArray =
              constraints.toArray(new ITypeConstraint[constraints.size()]);
          if (constraintsArray.length > 0) {
            result.add(fTypeConstraintFactory.createCompositeOrTypeConstraint(constraintsArray));
          }
        }
      } else {
        ConstraintVariable typeVar =
            fConstraintVariableFactory.makeDeclaringTypeVariable(methodBinding);
        ConstraintVariable expressionVar =
            fConstraintVariableFactory.makeExpressionOrTypeVariable(
                invocation.getExpression(), getContext());
        result.addAll(
            Arrays.asList(fTypeConstraintFactory.createSubtypeConstraint(expressionVar, typeVar)));
      }
    }
    return result.toArray(new ITypeConstraint[result.size()]);
  }

