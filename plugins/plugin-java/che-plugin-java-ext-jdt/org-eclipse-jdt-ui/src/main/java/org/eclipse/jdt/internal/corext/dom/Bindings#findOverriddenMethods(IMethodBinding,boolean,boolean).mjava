    /**
     * Finds all methods that are overridden by the given method. The search is bottom-up, so this
     * returns the nearest defining/declaring methods in order.
     *
     * @param overriding overriding method
     * @param testVisibility if <code>true</code> the result is tested on visibility
     * @param firstOnly if <code>true</code> this method will return when the first overridden
     *            method is found
     * @return the method bindings representing the overridden method or an empty list if no result
     *         is found
     * @since 3.9
     */
    public static List<IMethodBinding> findOverriddenMethods(IMethodBinding overriding, boolean testVisibility, boolean firstOnly) {
        List<IMethodBinding> methodList= new ArrayList<IMethodBinding>();

        int modifiers= overriding.getModifiers();
        if (Modifier.isPrivate(modifiers) || Modifier.isStatic(modifiers) || overriding.isConstructor()) {
            return methodList;
        }

        ITypeBinding type= overriding.getDeclaringClass();
        if (type.getSuperclass() != null) {
            IMethodBinding res= findOverriddenMethodInHierarchy(type.getSuperclass(), overriding);
            if (res != null && !Modifier.isPrivate(res.getModifiers())) {
                if (!testVisibility || isVisibleInHierarchy(res, overriding.getDeclaringClass().getPackage())) {
                    methodList.add(res);
                    if (firstOnly) {
                        return methodList;
                    }
                }
            }
        }
        ITypeBinding[] interfaces= type.getInterfaces();
        for (int i= 0; i < interfaces.length; i++) {
            IMethodBinding res= findOverriddenMethodInHierarchy(interfaces[i], overriding);
            if (res != null) {
                methodList.add(res); // methods from interfaces are always public and therefore visible
                if (firstOnly) {
                    return methodList;
                }
            }
        }
        return methodList;
    }

