    private TypeNameMatch[] processTypeInfo(List<TypeNameMatch> typeRefsFound) {
      int nFound = typeRefsFound.size();
      if (nFound == 0) {
        // nothing found
        return null;
      } else if (nFound == 1) {
        TypeNameMatch typeRef = typeRefsFound.get(0);
        fImpStructure.addImport(typeRef.getFullyQualifiedName());
        return null;
      } else {
        String typeToImport = null;
        boolean ambiguousImports = false;

        // multiple found, use old imports to find an entry
        for (int i = 0; i < nFound; i++) {
          TypeNameMatch typeRef = typeRefsFound.get(i);
          String fullName = typeRef.getFullyQualifiedName();
          String containerName = typeRef.getTypeContainerName();
          if (fOldSingleImports.contains(fullName)) {
            // was single-imported
            fImpStructure.addImport(fullName);
            return null;
          } else if (fOldDemandImports.contains(containerName)
              || fImplicitImports.contains(containerName)) {
            if (typeToImport == null) {
              typeToImport = fullName;
            } else { // more than one import-on-demand
              ambiguousImports = true;
            }
          }
        }

        if (typeToImport != null && !ambiguousImports) {
          fImpStructure.addImport(typeToImport);
          return null;
        }
        // return the open choices
        return typeRefsFound.toArray(new TypeNameMatch[nFound]);
      }
    }

