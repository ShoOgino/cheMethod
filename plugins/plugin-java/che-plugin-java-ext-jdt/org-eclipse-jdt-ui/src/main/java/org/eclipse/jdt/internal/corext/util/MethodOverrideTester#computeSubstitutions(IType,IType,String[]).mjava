  private void computeSubstitutions(
      IType instantiatedType, IType instantiatingType, String[] typeArguments)
      throws JavaModelException {
    Substitutions s = new Substitutions();
    fTypeVariableSubstitutions.put(instantiatedType, s);

    ITypeParameter[] typeParameters = instantiatedType.getTypeParameters();

    if (instantiatingType == null) { // the focus type
      for (int i = 0; i < typeParameters.length; i++) {
        ITypeParameter curr = typeParameters[i];
        // use star to make type variables different from type refs
        s.addSubstitution(
            curr.getElementName(),
            '*' + curr.getElementName(),
            getTypeParameterErasure(curr, instantiatedType));
      }
    } else {
      if (typeParameters.length == typeArguments.length) {
        for (int i = 0; i < typeParameters.length; i++) {
          ITypeParameter curr = typeParameters[i];
          String substString =
              getSubstitutedTypeName(
                  typeArguments[i],
                  instantiatingType); // substitute in the context of the instantiatingType
          String erasure =
              getErasedTypeName(
                  typeArguments[i], instantiatingType); // get the erasure from the type argument
          s.addSubstitution(curr.getElementName(), substString, erasure);
        }
      } else if (typeArguments.length == 0) { // raw type reference
        for (int i = 0; i < typeParameters.length; i++) {
          ITypeParameter curr = typeParameters[i];
          String erasure = getTypeParameterErasure(curr, instantiatedType);
          s.addSubstitution(curr.getElementName(), erasure, erasure);
        }
      } else {
        // code with errors
      }
    }
    String superclassTypeSignature = instantiatedType.getSuperclassTypeSignature();
    if (superclassTypeSignature != null) {
      String[] superTypeArguments = Signature.getTypeArguments(superclassTypeSignature);
      IType superclass = fHierarchy.getSuperclass(instantiatedType);
      if (superclass != null && !fTypeVariableSubstitutions.containsKey(superclass)) {
        computeSubstitutions(superclass, instantiatedType, superTypeArguments);
      }
    }
    String[] superInterfacesTypeSignature;
    if (instantiatedType.isAnonymous()) {
      // special case: superinterface is also returned by IType#getSuperclassTypeSignature()
      superInterfacesTypeSignature = new String[] {superclassTypeSignature};
    } else {
      superInterfacesTypeSignature = instantiatedType.getSuperInterfaceTypeSignatures();
    }
    int nInterfaces = superInterfacesTypeSignature.length;
    if (nInterfaces > 0) {
      IType[] superInterfaces = fHierarchy.getSuperInterfaces(instantiatedType);
      if (superInterfaces.length == nInterfaces) {
        for (int i = 0; i < nInterfaces; i++) {
          String[] superTypeArguments = Signature.getTypeArguments(superInterfacesTypeSignature[i]);
          IType superInterface = superInterfaces[i];
          if (!fTypeVariableSubstitutions.containsKey(superInterface)) {
            computeSubstitutions(superInterface, instantiatedType, superTypeArguments);
          }
        }
      }
    }
  }

