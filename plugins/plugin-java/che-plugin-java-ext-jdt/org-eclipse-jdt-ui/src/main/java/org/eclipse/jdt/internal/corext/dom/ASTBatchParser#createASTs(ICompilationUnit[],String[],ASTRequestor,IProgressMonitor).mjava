  /**
   * Creates ASTs for each compilation unit in <code>units</code>.
   *
   * <p><code>ASTRequestor.acceptAST</code> is called in no particular order to pass the compilation
   * unit and the corresponding AST to <code>requestor</code>.
   *
   * <p>The <code>bindingKeys</code> parameter specifies bindings keys ({@link IBinding#getKey()})
   * that are to be looked up.
   *
   * @param compilationUnits the compilation units to create ASTs for
   * @param bindingKeys the binding keys to create bindings for
   * @param requestor the AST requestor that collects abstract syntax trees and bindings
   * @param monitor the progress monitor used to report progress and request cancelation, or <code>
   *     null</code> if none
   * @see ASTParser#createASTs(ICompilationUnit[], String[], ASTRequestor, IProgressMonitor)
   */
  public final void createASTs(
      ICompilationUnit[] compilationUnits,
      String[] bindingKeys,
      ASTRequestor requestor,
      IProgressMonitor monitor) {
    if (compilationUnits.length == 0) return;

    if (monitor == null) monitor = new NullProgressMonitor();

    monitor.beginTask("", compilationUnits.length); //$NON-NLS-1$
    try {

      ICompilationUnit[][] splited = splitByProject(compilationUnits);
      for (int i = 0; i < splited.length; i++) {
        ICompilationUnit[] units = splited[i];

        if (units.length <= MAX_AT_ONCE) {
          createParser(units[0].getJavaProject())
              .createASTs(
                  units, bindingKeys, requestor, new SubProgressMonitor(monitor, units.length));
        } else {
          List<ICompilationUnit> list = Arrays.asList(units);
          int end = 0;
          int cursor = 0;
          while (cursor < units.length) {
            end = Math.min(end + MAX_AT_ONCE, units.length);
            List<ICompilationUnit> toParse = list.subList(cursor, end);

            createParser(units[0].getJavaProject())
                .createASTs(
                    toParse.toArray(new ICompilationUnit[toParse.size()]),
                    bindingKeys,
                    requestor,
                    new SubProgressMonitor(monitor, toParse.size()));
            cursor = end;
          }
        }
      }
    } finally {
      monitor.done();
    }
  }

