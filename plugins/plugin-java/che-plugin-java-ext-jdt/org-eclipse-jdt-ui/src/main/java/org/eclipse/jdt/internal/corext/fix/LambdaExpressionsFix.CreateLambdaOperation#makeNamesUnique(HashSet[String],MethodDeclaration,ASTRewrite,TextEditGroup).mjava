    private HashSet<String> makeNamesUnique(
        HashSet<String> excludedNames,
        MethodDeclaration methodDeclaration,
        ASTRewrite rewrite,
        TextEditGroup group) {
      HashSet<String> newNames = new HashSet<String>();
      excludedNames.addAll(ASTNodes.getVisibleLocalVariablesInScope(methodDeclaration));
      List<SimpleName> simpleNamesInMethod = getNamesInMethod(methodDeclaration);
      List<String> namesInMethod = new ArrayList<String>();
      for (SimpleName name : simpleNamesInMethod) {
        namesInMethod.add(name.getIdentifier());
      }

      for (int i = 0; i < simpleNamesInMethod.size(); i++) {
        SimpleName name = simpleNamesInMethod.get(i);
        String identifier = namesInMethod.get(i);
        HashSet<String> allNamesToExclude = getNamesToExclude(excludedNames, namesInMethod, i);
        if (allNamesToExclude.contains(identifier)) {
          String newIdentifier = createName(identifier, allNamesToExclude);
          excludedNames.add(newIdentifier);
          newNames.add(newIdentifier);
          SimpleName[] references = LinkedNodeFinder.findByNode(name.getRoot(), name);
          for (SimpleName ref : references) {
            rewrite.set(ref, SimpleName.IDENTIFIER_PROPERTY, newIdentifier, group);
          }
        }
      }

      return newNames;
    }

