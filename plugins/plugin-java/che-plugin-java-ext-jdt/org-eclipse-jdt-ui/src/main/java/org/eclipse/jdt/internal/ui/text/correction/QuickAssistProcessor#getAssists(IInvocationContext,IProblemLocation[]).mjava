  public IJavaCompletionProposal[] getAssists(
      IInvocationContext context, IProblemLocation[] locations) throws CoreException {
    ASTNode coveringNode = context.getCoveringNode();
    if (coveringNode != null) {
      ArrayList<ASTNode> coveredNodes =
          AdvancedQuickAssistProcessor.getFullyCoveredNodes(context, coveringNode);
      ArrayList<ICommandAccess> resultingCollections = new ArrayList<ICommandAccess>();
      boolean noErrorsAtLocation = noErrorsAtLocation(locations);

      // quick assists that show up also if there is an error/warning
      getRenameLocalProposals(context, coveringNode, locations, resultingCollections);
      getRenameRefactoringProposal(context, coveringNode, locations, resultingCollections);
      getAssignToVariableProposals(context, coveringNode, locations, resultingCollections);
      getAssignParamToFieldProposals(context, coveringNode, resultingCollections);
      getInferDiamondArgumentsProposal(context, coveringNode, locations, resultingCollections);
      getGenerateForLoopProposals(context, coveringNode, locations, resultingCollections);

      if (noErrorsAtLocation) {
        boolean problemsAtLocation = locations.length != 0;
        getCatchClauseToThrowsProposals(context, coveringNode, resultingCollections);
        getPickoutTypeFromMulticatchProposals(
            context, coveringNode, coveredNodes, resultingCollections);
        getConvertToMultiCatchProposals(context, coveringNode, resultingCollections);
        getUnrollMultiCatchProposals(context, coveringNode, resultingCollections);
        getUnWrapProposals(context, coveringNode, resultingCollections);
        getJoinVariableProposals(context, coveringNode, resultingCollections);
        getSplitVariableProposals(context, coveringNode, resultingCollections);
        getAddFinallyProposals(context, coveringNode, resultingCollections);
        getAddElseProposals(context, coveringNode, resultingCollections);
        getAddBlockProposals(context, coveringNode, resultingCollections);
        getInvertEqualsProposal(context, coveringNode, resultingCollections);
        getArrayInitializerToArrayCreation(context, coveringNode, resultingCollections);
        getCreateInSuperClassProposals(context, coveringNode, resultingCollections);
        getExtractVariableProposal(context, problemsAtLocation, resultingCollections);
        getExtractMethodProposal(context, coveringNode, problemsAtLocation, resultingCollections);
        getInlineLocalProposal(context, coveringNode, resultingCollections);
        getConvertLocalToFieldProposal(context, coveringNode, resultingCollections);
        getConvertAnonymousToNestedProposal(context, coveringNode, resultingCollections);
        getConvertAnonymousClassCreationsToLambdaProposals(
            context, coveringNode, resultingCollections);
        getConvertLambdaToAnonymousClassCreationsProposals(
            context, coveringNode, resultingCollections);
        getChangeLambdaBodyToBlockProposal(context, coveringNode, resultingCollections);
        getChangeLambdaBodyToExpressionProposal(context, coveringNode, resultingCollections);
        if (!getConvertForLoopProposal(context, coveringNode, resultingCollections))
          getConvertIterableLoopProposal(context, coveringNode, resultingCollections);
        getConvertEnhancedForLoopProposal(context, coveringNode, resultingCollections);
        getRemoveBlockProposals(context, coveringNode, resultingCollections);
        getMakeVariableDeclarationFinalProposals(context, resultingCollections);
        getConvertStringConcatenationProposals(context, resultingCollections);
        getMissingCaseStatementProposals(context, coveringNode, resultingCollections);
      }
      return resultingCollections.toArray(new IJavaCompletionProposal[resultingCollections.size()]);
    }
    return null;
  }

