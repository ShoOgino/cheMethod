  /**
   * Tells whether an explicit null annotation exists on the given compilation unit.
   *
   * @param compilationUnit the compilation unit
   * @param offset the offset
   * @return <code>true</code> if the compilation unit has an explicit null annotation
   */
  public static boolean hasExplicitNullAnnotation(ICompilationUnit compilationUnit, int offset) {
    // FIXME(SH): check for existing annotations disabled due to lack of precision:
    //		      should distinguish what is actually annotated (return? param? which?)
    //		try {
    //			IJavaElement problemElement = compilationUnit.getElementAt(offset);
    //			if (problemElement.getElementType() == IJavaElement.METHOD) {
    //				IMethod method = (IMethod) problemElement;
    //				String nullable = getNullableAnnotationName(compilationUnit, true);
    //				String nonnull = getNonNullAnnotationName(compilationUnit, true);
    //				for (IAnnotation annotation : method.getAnnotations()) {
    //					if (   annotation.getElementName().equals(nonnull)
    //						|| annotation.getElementName().equals(nullable))
    //						return true;
    //				}
    //			}
    //		} catch (JavaModelException jme) {
    //			/* nop */
    //		}
    return false;
  }

