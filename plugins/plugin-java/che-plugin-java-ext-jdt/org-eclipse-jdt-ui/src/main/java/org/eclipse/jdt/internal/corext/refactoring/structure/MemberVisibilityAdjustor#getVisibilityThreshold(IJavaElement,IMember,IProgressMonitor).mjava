	/**
	 * Computes the visibility threshold for the referenced element.
	 *
	 * @param referencing the referencing element
	 * @param referenced the referenced element
	 * @param monitor the progress monitor to use
	 * @return the visibility keyword corresponding to the threshold, or <code>null</code> for default visibility
	 * @throws JavaModelException if the java elements could not be accessed
	 */
	public ModifierKeyword getVisibilityThreshold(final IJavaElement referencing, final IMember referenced, final IProgressMonitor monitor)
			throws JavaModelException {
		Assert.isTrue(!(referencing instanceof IInitializer));
		Assert.isTrue(!(referenced instanceof IInitializer));
		ModifierKeyword keyword = ModifierKeyword.PUBLIC_KEYWORD;
		try {
			monitor.beginTask("", 1); //$NON-NLS-1$
			monitor.setTaskName(RefactoringCoreMessages.MemberVisibilityAdjustor_checking);
			final int referencingType = referencing.getElementType();
			final int referencedType = referenced.getElementType();
			switch (referencedType) {
				case IJavaElement.TYPE: {
					final IType typeReferenced = (IType)referenced;
					final ICompilationUnit referencedUnit = typeReferenced.getCompilationUnit();
					switch (referencingType) {
						case IJavaElement.TYPE: {
							keyword = thresholdTypeToType((IType)referencing, typeReferenced, monitor);
							break;
						}
						case IJavaElement.FIELD:
						case IJavaElement.METHOD: {
							final IMember member = (IMember)referencing;
							if (typeReferenced.equals(member.getDeclaringType()))
								keyword = ModifierKeyword.PRIVATE_KEYWORD;
							else if (referencedUnit != null && referencedUnit.equals(member.getCompilationUnit()))
								keyword = ModifierKeyword.PRIVATE_KEYWORD;
							else if (typeReferenced.getPackageFragment().equals(member.getDeclaringType().getPackageFragment()))
								keyword = null;
							break;
						}
						case IJavaElement.PACKAGE_FRAGMENT: {
							final IPackageFragment fragment = (IPackageFragment)referencing;
							if (typeReferenced.getPackageFragment().equals(fragment))
								keyword = null;
							break;
						}
						default:
							Assert.isTrue(false);
					}
					break;
				}
				case IJavaElement.FIELD: {
					final IField fieldReferenced = (IField)referenced;
					final ICompilationUnit referencedUnit = fieldReferenced.getCompilationUnit();
					switch (referencingType) {
						case IJavaElement.TYPE: {
							keyword = thresholdTypeToField((IType)referencing, fieldReferenced, monitor);
							break;
						}
						case IJavaElement.FIELD:
						case IJavaElement.METHOD: {
							final IMember member = (IMember)referencing;
							if (fieldReferenced.getDeclaringType().equals(member.getDeclaringType()))
								keyword = ModifierKeyword.PRIVATE_KEYWORD;
							else if (referencedUnit != null && referencedUnit.equals(member.getCompilationUnit()))
								keyword = ModifierKeyword.PRIVATE_KEYWORD;
							else if (fieldReferenced.getDeclaringType().getPackageFragment()
													.equals(member.getDeclaringType().getPackageFragment()))
								keyword = null;
							break;
						}
						case IJavaElement.PACKAGE_FRAGMENT: {
							final IPackageFragment fragment = (IPackageFragment)referencing;
							if (fieldReferenced.getDeclaringType().getPackageFragment().equals(fragment))
								keyword = null;
							break;
						}
						default:
							Assert.isTrue(false);
					}
					break;
				}
				case IJavaElement.METHOD: {
					final IMethod methodReferenced = (IMethod)referenced;
					final ICompilationUnit referencedUnit = methodReferenced.getCompilationUnit();
					switch (referencingType) {
						case IJavaElement.TYPE: {
							keyword = thresholdTypeToMethod((IType)referencing, methodReferenced, monitor);
							break;
						}
						case IJavaElement.FIELD:
						case IJavaElement.METHOD: {
							final IMember member = (IMember)referencing;
							if (methodReferenced.getDeclaringType().equals(member.getDeclaringType()))
								keyword = ModifierKeyword.PRIVATE_KEYWORD;
							else if (referencedUnit != null && referencedUnit.equals(member.getCompilationUnit()))
								keyword = ModifierKeyword.PRIVATE_KEYWORD;
							else if (methodReferenced.getDeclaringType().getPackageFragment()
													 .equals(member.getDeclaringType().getPackageFragment()))
								keyword = null;
							break;
						}
						case IJavaElement.PACKAGE_FRAGMENT: {
							final IPackageFragment fragment = (IPackageFragment)referencing;
							if (methodReferenced.getDeclaringType().getPackageFragment().equals(fragment))
								keyword = null;
							break;
						}
						default:
							Assert.isTrue(false);
					}
					break;
				}
				default:
					Assert.isTrue(false);
			}
		} finally {
			monitor.done();
		}
		return keyword;
	}

