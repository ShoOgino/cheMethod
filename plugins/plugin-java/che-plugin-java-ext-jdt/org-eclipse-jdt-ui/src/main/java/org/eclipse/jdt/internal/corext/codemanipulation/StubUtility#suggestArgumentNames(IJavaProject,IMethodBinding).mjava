  public static String[] suggestArgumentNames(IJavaProject project, IMethodBinding binding) {
    int nParams = binding.getParameterTypes().length;

    if (nParams > 0) {
      try {
        IMethod method = (IMethod) binding.getMethodDeclaration().getJavaElement();
        if (method != null) {
          String[] paramNames = method.getParameterNames();
          if (paramNames.length == nParams) {
            String[] namesArray = EMPTY;
            ArrayList<String> newNames = new ArrayList<String>(paramNames.length);
            // Ensure that the code generation preferences are respected
            for (int i = 0; i < paramNames.length; i++) {
              String curr = paramNames[i];
              String baseName =
                  NamingConventions.getBaseName(
                      NamingConventions.VK_PARAMETER, curr, method.getJavaProject());
              if (!curr.equals(baseName)) {
                // make the existing name the favorite
                newNames.add(curr);
              } else {
                newNames.add(suggestArgumentName(project, curr, namesArray));
              }
              namesArray = newNames.toArray(new String[newNames.size()]);
            }
            return namesArray;
          }
        }
      } catch (JavaModelException e) {
        // ignore
        e.printStackTrace();
      }
    }
    String[] names = new String[nParams];
    for (int i = 0; i < names.length; i++) {
      names[i] = "arg" + i; // $NON-NLS-1$
    }
    return names;
  }

