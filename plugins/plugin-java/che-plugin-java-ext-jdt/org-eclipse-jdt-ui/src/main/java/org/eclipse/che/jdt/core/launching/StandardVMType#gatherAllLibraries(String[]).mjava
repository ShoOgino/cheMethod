  /**
   * Returns a list of all zip's and jars contained in the given directories.
   *
   * @param dirPaths a list of absolute paths of directories to search
   * @return List of all zip's and jars
   */
  public static List<LibraryLocation> gatherAllLibraries(String[] dirPaths) {
    List<LibraryLocation> libraries = new ArrayList<LibraryLocation>();
    for (int i = 0; i < dirPaths.length; i++) {
      File extDir = new File(dirPaths[i]);
      if (extDir.isDirectory()) {
        String[] names = extDir.list(fgArchiveFilter);
        if (names != null) {
          for (int j = 0; j < names.length; j++) {
            File jar = new File(extDir, names[j]);
            if (jar.isFile()) {
              try {
                IPath libPath = new Path(jar.getCanonicalPath());
                IPath sourcePath = Path.EMPTY;
                IPath packageRoot = Path.EMPTY;
                URL javadocLocation = null;
                URL indexLocation = null;
                //								for( ILibraryLocationResolver resolver : getLibraryLocationResolvers() ) {
                //									try {
                //										sourcePath = resolver.getSourcePath(libPath);
                //										packageRoot = resolver.getPackageRoot(libPath);
                //										javadocLocation = resolver.getJavadocLocation(libPath);
                //										indexLocation = resolver.getIndexLocation(libPath);
                //										break;
                //									} catch(Exception e) {
                //										Launching.log(e);
                //									}
                //								}
                LibraryLocation library =
                    new LibraryLocation(
                        libPath, sourcePath, packageRoot, javadocLocation, indexLocation);
                libraries.add(library);
              } catch (IOException e) {
                Launching.log(e);
              }
            }
          }
        }
      }
    }
    return libraries;
  }

