  /**
   * Creates a new refactoring descriptor.
   *
   * @param id the ID of this descriptor
   * @param project the non-empty name of the project associated with this refactoring, or <code>
   *     null</code> for a workspace refactoring
   * @param description a non-empty human-readable description of the particular refactoring
   *     instance
   * @param comment the human-readable comment of the particular refactoring instance, or <code>null
   *     </code> for no comment
   * @param arguments a map of arguments that will be persisted and describes all settings for this
   *     refactoring
   * @param flags the flags of the refactoring descriptor
   * @throws IllegalArgumentException if the argument map contains invalid keys/values
   * @since 1.2
   */
  public RenameJavaElementDescriptor(
      String id, String project, String description, String comment, Map arguments, int flags) {
    super(id, project, description, comment, arguments, flags);
    Assert.isLegal(checkId(id), "Refactoring id is not a rename refactoring id"); // $NON-NLS-1$
    fName = JavaRefactoringDescriptorUtil.getString(fArguments, ATTRIBUTE_NAME);
    if (getID().equals(IJavaRefactorings.RENAME_TYPE_PARAMETER)) {
      fJavaElement =
          JavaRefactoringDescriptorUtil.getJavaElement(fArguments, ATTRIBUTE_INPUT, getProject());
      String parameterName =
          JavaRefactoringDescriptorUtil.getString(fArguments, ATTRIBUTE_PARAMETER);
      if (fJavaElement instanceof IType) {
        fJavaElement = ((IType) fJavaElement).getTypeParameter(parameterName);
      }
      if (fJavaElement instanceof IMethod) {
        fJavaElement = ((IMethod) fJavaElement).getTypeParameter(parameterName);
      }
    } else
      fJavaElement =
          JavaRefactoringDescriptorUtil.getJavaElement(fArguments, ATTRIBUTE_INPUT, getProject());
    final int type = fJavaElement.getElementType();
    if (type != IJavaElement.PACKAGE_FRAGMENT_ROOT)
      fReferences =
          JavaRefactoringDescriptorUtil.getBoolean(fArguments, ATTRIBUTE_REFERENCES, fReferences);
    if (type == IJavaElement.FIELD) {
      fRenameGetter =
          JavaRefactoringDescriptorUtil.getBoolean(
              fArguments, ATTRIBUTE_RENAME_GETTER, fRenameGetter);
      fRenameSetter =
          JavaRefactoringDescriptorUtil.getBoolean(
              fArguments, ATTRIBUTE_RENAME_SETTER, fRenameSetter);
    }
    switch (type) {
      case IJavaElement.PACKAGE_FRAGMENT:
      case IJavaElement.TYPE:
      case IJavaElement.FIELD:
        fTextual =
            JavaRefactoringDescriptorUtil.getBoolean(
                fArguments, ATTRIBUTE_TEXTUAL_MATCHES, fTextual);
        break;
      default:
        break;
    }
    switch (type) {
      case IJavaElement.METHOD:
      case IJavaElement.FIELD:
        fDeprecate =
            JavaRefactoringDescriptorUtil.getBoolean(fArguments, ATTRIBUTE_DEPRECATE, fDeprecate);
        fDelegate =
            JavaRefactoringDescriptorUtil.getBoolean(fArguments, ATTRIBUTE_DELEGATE, fDelegate);
        break;
      default:
        break;
    }
    switch (type) {
      case IJavaElement.PACKAGE_FRAGMENT:
      case IJavaElement.TYPE:
        fQualified =
            JavaRefactoringDescriptorUtil.getBoolean(fArguments, ATTRIBUTE_QUALIFIED, fQualified);
        fPatterns = JavaRefactoringDescriptorUtil.getString(fArguments, ATTRIBUTE_PATTERNS, true);
        break;
      default:
        break;
    }
    switch (type) {
      case IJavaElement.TYPE:
        fSimilarDeclarations =
            JavaRefactoringDescriptorUtil.getBoolean(
                fArguments, ATTRIBUTE_SIMILAR_DECLARATIONS, fSimilarDeclarations);
        fMatchStrategy =
            JavaRefactoringDescriptorUtil.getInt(
                fArguments, ATTRIBUTE_MATCH_STRATEGY, fMatchStrategy);
        break;
      default:
        break;
    }
    switch (type) {
      case IJavaElement.PACKAGE_FRAGMENT:
        fHierarchical =
            JavaRefactoringDescriptorUtil.getBoolean(
                fArguments, ATTRIBUTE_HIERARCHICAL, fHierarchical);
        break;
      default:
        break;
    }
  }

