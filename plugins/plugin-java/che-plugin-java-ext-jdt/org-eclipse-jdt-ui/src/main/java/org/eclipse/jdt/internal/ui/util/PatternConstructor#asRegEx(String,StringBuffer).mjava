  /**
   * Translates a StringMatcher pattern (using '*' and '?') to a regex pattern string
   *
   * @param stringMatcherPattern a pattern using '*' and '?'
   * @param out string buffer
   * @return string buffer
   */
  private static StringBuffer asRegEx(String stringMatcherPattern, StringBuffer out) {
    boolean escaped = false;
    boolean quoting = false;

    int i = 0;
    while (i < stringMatcherPattern.length()) {
      char ch = stringMatcherPattern.charAt(i++);

      if (ch == '*' && !escaped) {
        if (quoting) {
          out.append("\\E"); // $NON-NLS-1$
          quoting = false;
        }
        out.append(".*"); // $NON-NLS-1$
        escaped = false;
        continue;
      } else if (ch == '?' && !escaped) {
        if (quoting) {
          out.append("\\E"); // $NON-NLS-1$
          quoting = false;
        }
        out.append("."); // $NON-NLS-1$
        escaped = false;
        continue;
      } else if (ch == '\\' && !escaped) {
        escaped = true;
        continue;

      } else if (ch == '\\' && escaped) {
        escaped = false;
        if (quoting) {
          out.append("\\E"); // $NON-NLS-1$
          quoting = false;
        }
        out.append("\\\\"); // $NON-NLS-1$
        continue;
      }

      if (!quoting) {
        out.append("\\Q"); // $NON-NLS-1$
        quoting = true;
      }
      if (escaped && ch != '*' && ch != '?' && ch != '\\') out.append('\\');
      out.append(ch);
      escaped = ch == '\\';
    }
    if (quoting) out.append("\\E"); // $NON-NLS-1$

    return out;
  }

