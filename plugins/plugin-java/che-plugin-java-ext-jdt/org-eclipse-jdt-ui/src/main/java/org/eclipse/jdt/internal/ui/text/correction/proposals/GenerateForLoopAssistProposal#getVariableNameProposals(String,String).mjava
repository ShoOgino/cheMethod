	/**
	 * Retrieves name proposals for a fresh local variable.
	 * 
	 * @param basename the basename of the proposals
	 * @param excludedName a name that cannot be used for the variable; <code>null</code> if none
	 * @return an array of proposal strings
	 */
	private String[] getVariableNameProposals(String basename, String excludedName) {
		ASTNode surroundingBlock= fCurrentNode;
		while ((surroundingBlock= surroundingBlock.getParent()) != null) {
			if (surroundingBlock instanceof Block) {
				break;
			}
		}
		Collection<String> localUsedNames= new ScopeAnalyzer((CompilationUnit) fCurrentExpression.getRoot()).getUsedVariableNames(surroundingBlock.getStartPosition(), surroundingBlock.getLength());
		if (excludedName != null) {
			localUsedNames.add(excludedName);
		}
		String[] names= StubUtility.getLocalNameSuggestions(getCompilationUnit().getJavaProject(), basename, 0,
															localUsedNames.toArray(new String[localUsedNames.size()]));
		return names;
	}

