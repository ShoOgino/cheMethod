  @Override
  public Change createChange(IProgressMonitor monitor) throws CoreException {
    try {
      final TextChange[] changes = fChangeManager.getAllChanges();
      final List<TextChange> list = new ArrayList<TextChange>(changes.length);
      list.addAll(Arrays.asList(changes));
      String project = null;
      IJavaProject javaProject = fMethod.getJavaProject();
      if (javaProject != null) project = javaProject.getElementName();
      int flags =
          JavaRefactoringDescriptor.JAR_MIGRATION
              | JavaRefactoringDescriptor.JAR_REFACTORING
              | RefactoringDescriptor.STRUCTURAL_CHANGE;
      try {
        if (!Flags.isPrivate(fMethod.getFlags())) flags |= RefactoringDescriptor.MULTI_CHANGE;
      } catch (JavaModelException exception) {
        JavaPlugin.log(exception);
      }
      final IType declaring = fMethod.getDeclaringType();
      try {
        if (declaring.isAnonymous() || declaring.isLocal())
          flags |= JavaRefactoringDescriptor.JAR_SOURCE_ATTACHMENT;
      } catch (JavaModelException exception) {
        JavaPlugin.log(exception);
      }
      final String description =
          Messages.format(
              RefactoringCoreMessages.RenameMethodProcessor_descriptor_description_short,
              BasicElementLabels.getJavaElementName(fMethod.getElementName()));
      final String header =
          Messages.format(
              RefactoringCoreMessages.RenameMethodProcessor_descriptor_description,
              new String[] {
                JavaElementLabels.getTextLabel(fMethod, JavaElementLabels.ALL_FULLY_QUALIFIED),
                BasicElementLabels.getJavaElementName(getNewElementName())
              });
      final String comment = new JDTRefactoringDescriptorComment(project, this, header).asString();
      final RenameJavaElementDescriptor descriptor =
          RefactoringSignatureDescriptorFactory.createRenameJavaElementDescriptor(
              IJavaRefactorings.RENAME_METHOD);
      descriptor.setProject(project);
      descriptor.setDescription(description);
      descriptor.setComment(comment);
      descriptor.setFlags(flags);
      descriptor.setJavaElement(fMethod);
      descriptor.setNewName(getNewElementName());
      descriptor.setUpdateReferences(fUpdateReferences);
      descriptor.setKeepOriginal(fDelegateUpdating);
      descriptor.setDeprecateDelegate(fDelegateDeprecation);
      return new DynamicValidationRefactoringChange(
          descriptor,
          RefactoringCoreMessages.RenameMethodProcessor_change_name,
          list.toArray(new Change[list.size()]));
    } finally {
      monitor.done();
    }
  }

