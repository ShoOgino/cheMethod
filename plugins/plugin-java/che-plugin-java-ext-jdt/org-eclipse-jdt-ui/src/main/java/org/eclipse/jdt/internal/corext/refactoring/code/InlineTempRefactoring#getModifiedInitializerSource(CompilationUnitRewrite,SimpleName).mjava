  private Expression getModifiedInitializerSource(
      CompilationUnitRewrite rewrite, SimpleName reference) throws JavaModelException {
    VariableDeclaration varDecl = getVariableDeclaration();
    Expression initializer = varDecl.getInitializer();

    ASTNode referenceContext = reference.getParent();
    if (Invocations.isResolvedTypeInferredFromExpectedType(initializer)) {
      if (!(referenceContext instanceof VariableDeclarationFragment
          || referenceContext instanceof SingleVariableDeclaration
          || referenceContext instanceof Assignment)) {
        ITypeBinding[] typeArguments = Invocations.getInferredTypeArguments(initializer);
        if (typeArguments != null) {
          String newSource = createParameterizedInvocation(initializer, typeArguments, rewrite);
          return (Expression)
              rewrite.getASTRewrite().createStringPlaceholder(newSource, initializer.getNodeType());
        }
      }
    }

    Expression copy = (Expression) rewrite.getASTRewrite().createCopyTarget(initializer);
    AST ast = rewrite.getAST();
    if (NecessaryParenthesesChecker.needsParentheses(
        initializer, reference.getParent(), reference.getLocationInParent())) {
      ParenthesizedExpression parenthesized = ast.newParenthesizedExpression();
      parenthesized.setExpression(copy);
      copy = parenthesized;
    }

    ITypeBinding explicitCast = ASTNodes.getExplicitCast(initializer, reference);
    if (explicitCast != null) {
      CastExpression cast = ast.newCastExpression();
      if (NecessaryParenthesesChecker.needsParentheses(
          copy, cast, CastExpression.EXPRESSION_PROPERTY)) {
        ParenthesizedExpression parenthesized = ast.newParenthesizedExpression();
        parenthesized.setExpression(copy);
        copy = parenthesized;
      }
      cast.setExpression(copy);
      ImportRewriteContext context =
          new ContextSensitiveImportRewriteContext(reference, rewrite.getImportRewrite());
      cast.setType(rewrite.getImportRewrite().addImport(explicitCast, ast, context));
      copy = cast;

    } else if (initializer instanceof ArrayInitializer && ASTNodes.getDimensions(varDecl) > 0) {
      ArrayType newType = (ArrayType) ASTNodeFactory.newType(ast, varDecl);

      ArrayCreation newArrayCreation = ast.newArrayCreation();
      newArrayCreation.setType(newType);
      newArrayCreation.setInitializer((ArrayInitializer) copy);
      return newArrayCreation;
    }
    return copy;
  }

