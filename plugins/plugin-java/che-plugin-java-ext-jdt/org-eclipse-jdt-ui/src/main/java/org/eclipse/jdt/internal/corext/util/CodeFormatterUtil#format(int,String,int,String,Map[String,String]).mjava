  /**
   * Old API. Consider to use format2 (TextEdit)
   *
   * @param kind Use to specify the kind of the code snippet to format. It can be any of the kind
   *     constants defined in {@link org.eclipse.jdt.core.formatter.CodeFormatter}
   * @param source The source to format
   * @param indentationLevel The initial indentation level, used to shift left/right the entire
   *     source fragment. An initial indentation level of zero or below has no effect.
   * @param lineSeparator The line separator to use in formatted source, if set to <code>null</code>
   *     , then the platform default one will be used.
   * @param options The options map to use for formatting with the default code formatter.
   *     Recognized options are documented on {@link
   *     org.eclipse.jdt.core.JavaCore#getDefaultOptions()}. If set to <code>null</code>, then use
   *     the current settings from {@link org.eclipse.jdt.core.JavaCore#getOptions()}.
   * @return the formatted source string
   */
  public static String format(
      int kind,
      String source,
      int indentationLevel,
      String lineSeparator,
      Map<String, String> options) {
    TextEdit edit = format2(kind, source, indentationLevel, lineSeparator, options);
    if (edit == null) {
      return source;
    } else {
      Document document = new Document(source);
      try {
        edit.apply(document, TextEdit.NONE);
      } catch (BadLocationException e) {
        JavaPlugin.log(e); // bug in the formatter
        Assert.isTrue(
            false,
            "Formatter created edits with wrong positions: " + e.getMessage()); // $NON-NLS-1$
      }
      return document.get();
    }
  }

