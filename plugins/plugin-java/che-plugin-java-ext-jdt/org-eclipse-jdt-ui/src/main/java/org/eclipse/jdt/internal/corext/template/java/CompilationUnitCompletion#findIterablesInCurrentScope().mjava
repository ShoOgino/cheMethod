  /**
   * Returns all variables, visible in the current context's scope, implementing <code>
   * java.lang.Iterable</code> <em>and</em> all arrays, in the order that they appear. That is, the
   * returned variables can be used within the <code>foreach</code> language construct.
   *
   * @return all visible <code>Iterable</code>s and arrays
   */
  public Variable[] findIterablesInCurrentScope() {
    List<Variable> iterables = new ArrayList<Variable>();

    // local variables
    for (ListIterator<Variable> iterator = fLocalVariables.listIterator(fLocalVariables.size());
        iterator.hasPrevious();
        ) {
      Variable localVariable = iterator.previous();

      if (localVariable.isArray() || localVariable.isIterable()) iterables.add(localVariable);
    }

    // fields
    for (ListIterator<Variable> iterator = fFields.listIterator(fFields.size());
        iterator.hasPrevious();
        ) {
      Variable field = iterator.previous();

      if (field.isArray() || field.isIterable()) iterables.add(field);
    }

    return iterables.toArray(new Variable[iterables.size()]);
  }

