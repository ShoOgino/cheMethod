  /**
   * Returns the closest ancestor of <code>node</code> (including <code>node</code> itself) whose
   * type is <code>nodeType</code>, or <code>null</code> if none.
   *
   * <p><b>Warning:</b> This method does not stop at any boundaries like parentheses, statements,
   * body declarations, etc. The resulting node may be in a totally different scope than the given
   * node. Consider using one of the other {@link ASTResolving}<code>.find(..)</code> methods
   * instead.
   *
   * @param node the node
   * @param nodeType the node type constant from {@link ASTNode}
   * @return the closest ancestor of <code>node</code> (including <code>node</code> itself) whose
   *     type is <code>nodeType</code>, or <code>null</code> if none
   */
  public static ASTNode findAncestor(ASTNode node, int nodeType) {
    while ((node != null) && (node.getNodeType() != nodeType)) {
      node = node.getParent();
    }
    return node;
  }

