  private Expression evaluateArgumentExpressions(AST ast, ITypeBinding requiredType, String key) {
    CompilationUnit root = (CompilationUnit) fCallerNode.getRoot();

    int offset = fCallerNode.getStartPosition();
    Expression best = null;
    ITypeBinding bestType = null;

    ScopeAnalyzer analyzer = new ScopeAnalyzer(root);
    IBinding[] bindings = analyzer.getDeclarationsInScope(offset, ScopeAnalyzer.VARIABLES);
    for (int i = 0; i < bindings.length; i++) {
      IVariableBinding curr = (IVariableBinding) bindings[i];
      ITypeBinding type = curr.getType();
      if (type != null && canAssign(type, requiredType) && testModifier(curr)) {
        if (best == null || isMoreSpecific(bestType, type)) {
          best = ast.newSimpleName(curr.getName());
          bestType = type;
        }
        addLinkedPositionProposal(key, curr.getName(), null);
      }
    }
    Expression defaultExpression = ASTNodeFactory.newDefaultExpression(ast, requiredType);
    if (best == null) {
      best = defaultExpression;
    }
    addLinkedPositionProposal(key, ASTNodes.asString(defaultExpression), null);
    return best;
  }

