  private void updateImplicitReceivers(ASTRewrite rewriter, CallContext context) {
    if (context.receiver == null) return;
    List<Expression> implicitReceivers = fAnalyzer.getImplicitReceivers();
    for (Iterator<Expression> iter = implicitReceivers.iterator(); iter.hasNext(); ) {
      ASTNode node = iter.next();
      ImportRewriteContext importRewriteContext =
          new ContextSensitiveImportRewriteContext(node, context.importer);
      if (node instanceof MethodInvocation) {
        final MethodInvocation inv = (MethodInvocation) node;
        rewriter.set(
            inv,
            MethodInvocation.EXPRESSION_PROPERTY,
            createReceiver(
                rewriter,
                context,
                (IMethodBinding) inv.getName().resolveBinding(),
                importRewriteContext),
            null);
      } else if (node instanceof ClassInstanceCreation) {
        final ClassInstanceCreation inst = (ClassInstanceCreation) node;
        rewriter.set(
            inst,
            ClassInstanceCreation.EXPRESSION_PROPERTY,
            createReceiver(
                rewriter, context, inst.resolveConstructorBinding(), importRewriteContext),
            null);
      } else if (node instanceof ThisExpression) {
        rewriter.replace(
            node,
            rewriter.createStringPlaceholder(context.receiver, ASTNode.METHOD_INVOCATION),
            null);
      } else if (node instanceof FieldAccess) {
        final FieldAccess access = (FieldAccess) node;
        rewriter.set(
            access,
            FieldAccess.EXPRESSION_PROPERTY,
            createReceiver(rewriter, context, access.resolveFieldBinding(), importRewriteContext),
            null);
      } else if (node instanceof SimpleName
          && ((SimpleName) node).resolveBinding() instanceof IVariableBinding) {
        IVariableBinding vb = (IVariableBinding) ((SimpleName) node).resolveBinding();
        if (vb.isField()) {
          Expression receiver = createReceiver(rewriter, context, vb, importRewriteContext);
          if (receiver != null) {
            FieldAccess access = node.getAST().newFieldAccess();
            ASTNode target = rewriter.createMoveTarget(node);
            access.setName((SimpleName) target);
            access.setExpression(receiver);
            rewriter.replace(node, access, null);
          }
        }
      }
    }
  }

