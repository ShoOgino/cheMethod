  /* (non-Javadoc)
   * @see org.eclipse.jdt.internal.ui.text.correction.proposals.AbstractMethodCorrectionProposal#getNewMethodType(org.eclipse.jdt.core.dom.rewrite.ASTRewrite)
   */
  @Override
  protected Type getNewMethodType(ASTRewrite rewrite) throws CoreException {
    ASTNode node = getInvocationNode();
    AST ast = rewrite.getAST();

    Type newTypeNode = null;
    ITypeBinding[] otherProposals = null;

    ImportRewriteContext importRewriteContext =
        new ContextSensitiveImportRewriteContext(node, getImportRewrite());
    if (node.getParent() instanceof MethodInvocation) {
      MethodInvocation parent = (MethodInvocation) node.getParent();
      if (parent.getExpression() == node) {
        ITypeBinding[] bindings =
            ASTResolving.getQualifierGuess(
                node.getRoot(),
                parent.getName().getIdentifier(),
                parent.arguments(),
                getSenderBinding());
        if (bindings.length > 0) {
          newTypeNode = getImportRewrite().addImport(bindings[0], ast, importRewriteContext);
          otherProposals = bindings;
        }
      }
    }
    if (newTypeNode == null) {
      ITypeBinding binding = ASTResolving.guessBindingForReference(node);
      if (binding != null && binding.isWildcardType()) {
        binding = ASTResolving.normalizeWildcardType(binding, false, ast);
      }
      if (binding != null) {
        newTypeNode = getImportRewrite().addImport(binding, ast, importRewriteContext);
      } else {
        ASTNode parent = node.getParent();
        if (parent instanceof ExpressionStatement) {
          newTypeNode = ast.newPrimitiveType(PrimitiveType.VOID);
        } else {
          newTypeNode = ASTResolving.guessTypeForReference(ast, node);
          if (newTypeNode == null) {
            newTypeNode = ast.newSimpleType(ast.newSimpleName("Object")); //$NON-NLS-1$
          }
        }
      }
    }

    addLinkedPosition(rewrite.track(newTypeNode), false, KEY_TYPE);
    if (otherProposals != null) {
      for (int i = 0; i < otherProposals.length; i++) {
        addLinkedPositionProposal(KEY_TYPE, otherProposals[i]);
      }
    }

    return newTypeNode;
  }

