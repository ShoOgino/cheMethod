  private static boolean getExchangeOperandsProposals(
      IInvocationContext context, ASTNode node, Collection<ICommandAccess> resultingCollections) {
    // check that user invokes quick assist on infix expression
    if (!(node instanceof InfixExpression)) {
      return false;
    }
    InfixExpression infixExpression = (InfixExpression) node;
    Operator operator = infixExpression.getOperator();
    if (operator != InfixExpression.Operator.CONDITIONAL_AND
        && operator != InfixExpression.Operator.AND
        && operator != InfixExpression.Operator.CONDITIONAL_OR
        && operator != InfixExpression.Operator.OR
        && operator != InfixExpression.Operator.EQUALS
        && operator != InfixExpression.Operator.NOT_EQUALS
        && operator != InfixExpression.Operator.LESS
        && operator != InfixExpression.Operator.LESS_EQUALS
        && operator != InfixExpression.Operator.GREATER
        && operator != InfixExpression.Operator.GREATER_EQUALS
        && operator != InfixExpression.Operator.PLUS
        && operator != InfixExpression.Operator.TIMES
        && operator != InfixExpression.Operator.XOR) {
      return false;
    }

    int offset =
        isOperatorSelected(
            infixExpression, context.getSelectionOffset(), context.getSelectionLength());
    if (offset == -1) {
      return false;
    }

    //  we could produce quick assist
    if (resultingCollections == null) {
      return true;
    }
    AST ast = infixExpression.getAST();
    ASTRewrite rewrite = ASTRewrite.create(ast);
    // prepare left and right expressions
    Expression leftExpression = null;
    Expression rightExpression = null;
    InfixExpression currentExpression = infixExpression;
    leftExpression =
        combineOperands(rewrite, leftExpression, infixExpression.getLeftOperand(), false, operator);
    if (infixExpression.getRightOperand().getStartPosition() <= context.getSelectionOffset()) {
      leftExpression =
          combineOperands(
              rewrite, leftExpression, infixExpression.getRightOperand(), false, operator);
    } else {
      rightExpression =
          combineOperands(
              rewrite, rightExpression, infixExpression.getRightOperand(), false, operator);
    }
    for (Iterator<Expression> iter = currentExpression.extendedOperands().iterator();
        iter.hasNext(); ) {
      Expression extendedOperand = iter.next();
      if (extendedOperand.getStartPosition() <= context.getSelectionOffset()) {
        leftExpression = combineOperands(rewrite, leftExpression, extendedOperand, false, operator);
      } else {
        rightExpression =
            combineOperands(rewrite, rightExpression, extendedOperand, false, operator);
      }
    }

    if (NecessaryParenthesesChecker.needsParentheses(
        leftExpression, infixExpression, InfixExpression.RIGHT_OPERAND_PROPERTY)) {
      leftExpression = getParenthesizedExpression(ast, leftExpression);
    }
    if (NecessaryParenthesesChecker.needsParentheses(
        rightExpression, infixExpression, InfixExpression.LEFT_OPERAND_PROPERTY)) {
      rightExpression = getParenthesizedExpression(ast, rightExpression);
    }

    if (operator == InfixExpression.Operator.LESS) {
      operator = InfixExpression.Operator.GREATER;
    } else if (operator == InfixExpression.Operator.LESS_EQUALS) {
      operator = InfixExpression.Operator.GREATER_EQUALS;
    } else if (operator == InfixExpression.Operator.GREATER) {
      operator = InfixExpression.Operator.LESS;
    } else if (operator == InfixExpression.Operator.GREATER_EQUALS) {
      operator = InfixExpression.Operator.LESS_EQUALS;
    }

    // create new infix expression
    InfixExpression newInfix = ast.newInfixExpression();
    newInfix.setOperator(operator);
    newInfix.setLeftOperand(rightExpression);
    newInfix.setRightOperand(leftExpression);
    rewrite.replace(infixExpression, newInfix, null);
    // add correction proposal
    String label = CorrectionMessages.AdvancedQuickAssistProcessor_exchangeOperands_description;
    Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
    ASTRewriteCorrectionProposal proposal =
        new ASTRewriteCorrectionProposal(
            label,
            context.getCompilationUnit(),
            rewrite,
            IProposalRelevance.EXCHANGE_OPERANDS,
            image);
    resultingCollections.add(proposal);
    return true;
  }

