  public static IMethodBinding[] getOverridableMethods(
      AST ast, ITypeBinding typeBinding, boolean isSubType) {
    List<IMethodBinding> allMethods = new ArrayList<IMethodBinding>();
    IMethodBinding[] typeMethods = typeBinding.getDeclaredMethods();
    for (int index = 0; index < typeMethods.length; index++) {
      final int modifiers = typeMethods[index].getModifiers();
      if (!typeMethods[index].isConstructor()
          && !Modifier.isStatic(modifiers)
          && !Modifier.isPrivate(modifiers)) allMethods.add(typeMethods[index]);
    }
    ITypeBinding clazz = typeBinding.getSuperclass();
    while (clazz != null) {
      IMethodBinding[] methods = clazz.getDeclaredMethods();
      for (int offset = 0; offset < methods.length; offset++) {
        final int modifiers = methods[offset].getModifiers();
        if (!methods[offset].isConstructor()
            && !Modifier.isStatic(modifiers)
            && !Modifier.isPrivate(modifiers)) {
          if (findOverridingMethod(methods[offset], allMethods) == null)
            allMethods.add(methods[offset]);
        }
      }
      clazz = clazz.getSuperclass();
    }
    clazz = typeBinding;
    while (clazz != null) {
      ITypeBinding[] superInterfaces = clazz.getInterfaces();
      for (int index = 0; index < superInterfaces.length; index++) {
        getOverridableMethods(ast, superInterfaces[index], allMethods);
      }
      clazz = clazz.getSuperclass();
    }
    if (typeBinding.isInterface())
      getOverridableMethods(
          ast, ast.resolveWellKnownType("java.lang.Object"), allMethods); // $NON-NLS-1$
    if (!isSubType) allMethods.removeAll(Arrays.asList(typeMethods));
    int modifiers = 0;
    if (!typeBinding.isInterface()) {
      for (int index = allMethods.size() - 1; index >= 0; index--) {
        IMethodBinding method = allMethods.get(index);
        modifiers = method.getModifiers();
        if (Modifier.isFinal(modifiers)) allMethods.remove(index);
      }
    }
    return allMethods.toArray(new IMethodBinding[allMethods.size()]);
  }

