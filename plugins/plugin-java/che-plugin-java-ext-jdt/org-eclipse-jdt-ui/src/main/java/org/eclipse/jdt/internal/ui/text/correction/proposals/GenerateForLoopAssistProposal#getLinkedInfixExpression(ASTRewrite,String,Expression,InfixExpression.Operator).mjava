  /**
   * Creates an {@link InfixExpression} which is linked to the group of the variableToIncrement.
   *
   * @param rewrite the current {@link ASTRewrite} instance
   * @param variableToIncrement the name of the variable to generate the {@link InfixExpression} for
   * @param rightHandSide the right hand side expression which shall be included in the {@link
   *     InfixExpression}
   * @param operator the {@link org.eclipse.jdt.core.dom.InfixExpression.Operator} to use in the
   *     {@link InfixExpression} to create
   * @return a filled, new {@link InfixExpression} instance
   */
  private InfixExpression getLinkedInfixExpression(
      ASTRewrite rewrite,
      String variableToIncrement,
      Expression rightHandSide,
      InfixExpression.Operator operator) {
    AST ast = rewrite.getAST();
    InfixExpression loopExpression = ast.newInfixExpression();
    SimpleName name = ast.newSimpleName(variableToIncrement);
    addLinkedPosition(rewrite.track(name), LinkedPositionGroup.NO_STOP, name.getIdentifier());
    loopExpression.setLeftOperand(name);

    loopExpression.setOperator(operator);

    loopExpression.setRightOperand(rightHandSide);
    return loopExpression;
  }

