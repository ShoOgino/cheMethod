  /**
   * Overridden by subclasses.
   *
   * @return return the refactoring descriptor for this refactoring
   */
  protected RenameJavaElementDescriptor createRefactoringDescriptor() {
    String project = null;
    IJavaProject javaProject = fField.getJavaProject();
    if (javaProject != null) project = javaProject.getElementName();
    int flags =
        JavaRefactoringDescriptor.JAR_MIGRATION
            | JavaRefactoringDescriptor.JAR_REFACTORING
            | RefactoringDescriptor.STRUCTURAL_CHANGE;
    try {
      if (!Flags.isPrivate(fField.getFlags())) flags |= RefactoringDescriptor.MULTI_CHANGE;
    } catch (JavaModelException exception) {
      JavaPlugin.log(exception);
    }
    final IType declaring = fField.getDeclaringType();
    try {
      if (declaring.isAnonymous() || declaring.isLocal())
        flags |= JavaRefactoringDescriptor.JAR_SOURCE_ATTACHMENT;
    } catch (JavaModelException exception) {
      JavaPlugin.log(exception);
    }
    final String description =
        Messages.format(
            RefactoringCoreMessages.RenameFieldRefactoring_descriptor_description_short,
            BasicElementLabels.getJavaElementName(fField.getElementName()));
    final String header =
        Messages.format(
            RefactoringCoreMessages.RenameFieldProcessor_descriptor_description,
            new String[] {
              BasicElementLabels.getJavaElementName(fField.getElementName()),
              JavaElementLabels.getElementLabel(
                  fField.getParent(), JavaElementLabels.ALL_FULLY_QUALIFIED),
              getNewElementName()
            });
    final JDTRefactoringDescriptorComment comment =
        new JDTRefactoringDescriptorComment(project, this, header);
    if (fRenameGetter)
      comment.addSetting(RefactoringCoreMessages.RenameFieldRefactoring_setting_rename_getter);
    if (fRenameSetter)
      comment.addSetting(RefactoringCoreMessages.RenameFieldRefactoring_setting_rename_settter);
    final RenameJavaElementDescriptor descriptor =
        RefactoringSignatureDescriptorFactory.createRenameJavaElementDescriptor(
            IJavaRefactorings.RENAME_FIELD);
    descriptor.setProject(project);
    descriptor.setDescription(description);
    descriptor.setComment(comment.asString());
    descriptor.setFlags(flags);
    descriptor.setJavaElement(fField);
    descriptor.setNewName(getNewElementName());
    descriptor.setUpdateReferences(fUpdateReferences);
    descriptor.setUpdateTextualOccurrences(fUpdateTextualMatches);
    descriptor.setRenameGetters(fRenameGetter);
    descriptor.setRenameSetters(fRenameSetter);
    descriptor.setKeepOriginal(fDelegateUpdating);
    descriptor.setDeprecateDelegate(fDelegateDeprecation);
    return descriptor;
  }

