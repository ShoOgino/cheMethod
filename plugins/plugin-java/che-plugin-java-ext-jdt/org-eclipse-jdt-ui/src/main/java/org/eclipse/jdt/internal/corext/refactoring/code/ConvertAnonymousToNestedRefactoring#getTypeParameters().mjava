  private ITypeBinding[] getTypeParameters() {
    final List<ITypeBinding> parameters = new ArrayList<ITypeBinding>(4);
    final ClassInstanceCreation creation =
        (ClassInstanceCreation) fAnonymousInnerClassNode.getParent();
    if (fDeclareStatic) {
      final TypeVariableFinder finder = new TypeVariableFinder();
      creation.accept(finder);
      return finder.getResult();
    } else {
      final MethodDeclaration declaration = getEnclosingMethodDeclaration(creation);
      if (declaration != null) {
        ITypeBinding binding = null;
        TypeParameter parameter = null;
        for (final Iterator<TypeParameter> iterator = declaration.typeParameters().iterator();
            iterator.hasNext();
            ) {
          parameter = iterator.next();
          binding = parameter.resolveBinding();
          if (binding != null) parameters.add(binding);
        }
      }
    }
    final TypeVariableFinder finder = new TypeVariableFinder();
    creation.accept(finder);
    final ITypeBinding[] variables = finder.getResult();
    final List<ITypeBinding> remove = new ArrayList<ITypeBinding>(4);
    boolean match = false;
    ITypeBinding binding = null;
    ITypeBinding variable = null;
    for (final Iterator<ITypeBinding> iterator = parameters.iterator(); iterator.hasNext(); ) {
      match = false;
      binding = iterator.next();
      for (int index = 0; index < variables.length; index++) {
        variable = variables[index];
        if (variable.equals(binding)) match = true;
      }
      if (!match) remove.add(binding);
    }
    parameters.removeAll(remove);
    final ITypeBinding[] result = new ITypeBinding[parameters.size()];
    parameters.toArray(result);
    return result;
  }

