  private void createEdits() {
    TextEdit declarationEdit = createRenameEdit(fTempDeclarationNode.getName().getStartPosition());
    TextEdit[] allRenameEdits = getAllRenameEdits(declarationEdit);

    TextEdit[] allUnparentedRenameEdits = new TextEdit[allRenameEdits.length];
    TextEdit unparentedDeclarationEdit = null;

    fChange = new CompilationUnitChange(RefactoringCoreMessages.RenameTempRefactoring_rename, fCu);
    MultiTextEdit rootEdit = new MultiTextEdit();
    fChange.setEdit(rootEdit);
    fChange.setKeepPreviewEdits(true);

    for (int i = 0; i < allRenameEdits.length; i++) {
      if (fIsComposite) {
        // Add a copy of the text edit (text edit may only have one
        // parent) to keep problem reporting code clean
        TextChangeCompatibility.addTextEdit(
            fChangeManager.get(fCu),
            RefactoringCoreMessages.RenameTempRefactoring_changeName,
            allRenameEdits[i].copy(),
            fCategorySet);

        // Add a separate copy for problem reporting
        allUnparentedRenameEdits[i] = allRenameEdits[i].copy();
        if (allRenameEdits[i].equals(declarationEdit))
          unparentedDeclarationEdit = allUnparentedRenameEdits[i];
      }
      rootEdit.addChild(allRenameEdits[i]);
      fChange.addTextEditGroup(
          new TextEditGroup(
              RefactoringCoreMessages.RenameTempRefactoring_changeName, allRenameEdits[i]));
    }

    // store information for analysis
    if (fIsComposite) {
      fLocalAnalyzePackage =
          new RenameAnalyzeUtil.LocalAnalyzePackage(
              unparentedDeclarationEdit, allUnparentedRenameEdits);
    } else
      fLocalAnalyzePackage =
          new RenameAnalyzeUtil.LocalAnalyzePackage(declarationEdit, allRenameEdits);
  }

