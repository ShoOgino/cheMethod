  /* (non-Javadoc)
   * @see org.eclipse.jdt.internal.corext.refactoring.typeconstraints.typesets.TypeSet#iterator()
   */
  @Override
  public Iterator<TType> iterator() {
    return enumerate().iterator();
    //		return new Iterator() {
    //			// First type returned is fLowerBound, then each of the supertypes, in turn
    //			//
    //			// If the lower bound is an array type, return the set of array types
    //			// { Array(superType(elementTypeOf(fUpperBound))) }
    //			boolean isArray= (fLowerBound instanceof ArrayType);
    //			private Set/*<TType>*/ superTypes=
    // sTypeHierarchy.getAllSupertypes(getElementTypeOf(fLowerBound));
    //			private Iterator/*<TType>*/ superTypeIter= superTypes.iterator();
    //			private int nDims= getDimsOf(fLowerBound);
    //			private int idx= (isArray ? -2 : -1);
    //			public void remove() { /*do nothing*/ }
    //			public boolean hasNext() { return idx < superTypes.size(); }
    //			public Object next() {
    //				int i=idx++;
    //				if (i < -1) return sJavaLangObject;
    //				if (i < 0) return fLowerBound;
    //				return makePossiblyArrayTypeFor((TType) superTypeIter.next(), nDims);
    //			}
    //		};
  }

