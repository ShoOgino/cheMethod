  public static ITypeBinding resolveSuperClass(
      String superclass, IType typeHandle, StubTypeContext superClassContext) {
    StringBuffer cuString = new StringBuffer();
    cuString.append(superClassContext.getBeforeString());
    cuString.append(superclass);
    cuString.append(superClassContext.getAfterString());

    try {
      ICompilationUnit wc =
          typeHandle
              .getCompilationUnit()
              .getWorkingCopy(
                  new WorkingCopyOwner() {
                    /*subclass*/
                  },
                  new NullProgressMonitor());
      try {
        wc.getBuffer().setContents(cuString.toString());
        CompilationUnit compilationUnit =
            new RefactoringASTParser(ASTProvider.SHARED_AST_LEVEL).parse(wc, true);
        ASTNode type =
            NodeFinder.perform(
                compilationUnit, superClassContext.getBeforeString().length(), superclass.length());
        if (type instanceof Type) {
          return handleBug84585(((Type) type).resolveBinding());
        } else if (type instanceof Name) {
          ASTNode parent = type.getParent();
          if (parent instanceof Type) return handleBug84585(((Type) parent).resolveBinding());
        }
        throw new IllegalStateException();
      } finally {
        wc.discardWorkingCopy();
      }
    } catch (JavaModelException e) {
      return null;
    }
  }

