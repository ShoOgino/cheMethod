	public static void addIncompatibleReturnTypeProposals(IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals) throws
																																					  JavaModelException {
		CompilationUnit astRoot= context.getASTRoot();
		ASTNode selectedNode= problem.getCoveringNode(astRoot);
		if (selectedNode == null) {
			return;
		}
		MethodDeclaration decl= ASTResolving.findParentMethodDeclaration(selectedNode);
		if (decl == null) {
			return;
		}
		IMethodBinding methodDeclBinding= decl.resolveBinding();
		if (methodDeclBinding == null) {
			return;
		}

		ITypeBinding returnType= methodDeclBinding.getReturnType();
		IMethodBinding overridden= Bindings.findOverriddenMethod(methodDeclBinding, false);
		if (overridden == null || overridden.getReturnType() == returnType) {
			return;
		}


		ICompilationUnit cu= context.getCompilationUnit();
		IMethodBinding methodDecl= methodDeclBinding.getMethodDeclaration();
		ITypeBinding overriddenReturnType= overridden.getReturnType();
		if (! JavaModelUtil.is50OrHigher(context.getCompilationUnit().getJavaProject())) {
			overriddenReturnType= overriddenReturnType.getErasure();
		}
		proposals.add(new TypeChangeCorrectionProposal(cu, methodDecl, astRoot, overriddenReturnType, false, IProposalRelevance.CHANGE_RETURN_TYPE));

		ICompilationUnit targetCu= cu;

		IMethodBinding overriddenDecl= overridden.getMethodDeclaration();
		ITypeBinding overridenDeclType= overriddenDecl.getDeclaringClass();

		if (overridenDeclType.isFromSource()) {
			targetCu= ASTResolving.findCompilationUnitForBinding(cu, astRoot, overridenDeclType);
			if (targetCu != null && ASTResolving.isUseableTypeInContext(returnType, overriddenDecl, false)) {
				TypeChangeCorrectionProposal
						proposal= new TypeChangeCorrectionProposal(targetCu, overriddenDecl, astRoot, returnType, false,
																   IProposalRelevance.CHANGE_RETURN_TYPE_OF_OVERRIDDEN);
				if (overridenDeclType.isInterface()) {
					proposal.setDisplayName(
							Messages.format(CorrectionMessages.TypeMismatchSubProcessor_changereturnofimplemented_description,
											BasicElementLabels.getJavaElementName(overriddenDecl.getName())));
				} else {
					proposal.setDisplayName(
							Messages.format(CorrectionMessages.TypeMismatchSubProcessor_changereturnofoverridden_description,
											BasicElementLabels.getJavaElementName(overriddenDecl.getName())));
				}
				proposals.add(proposal);
			}
		}
	}

