  /**
   * Sets the type being instantiated in the given constructor call, including specifying any
   * necessary type arguments.
   *
   * @param newCtorCall the constructor call to modify
   * @param ctorTypeName the simple name of the type being instantiated
   * @param ctorOwnerTypeParameters the formal type parameters of the type being instantiated
   * @param ast utility object used to create AST nodes
   */
  private void setCtorTypeArguments(
      ClassInstanceCreation newCtorCall,
      String ctorTypeName,
      ITypeBinding[] ctorOwnerTypeParameters,
      AST ast) {
    if (ctorOwnerTypeParameters.length == 0) // easy, just a simple type
    newCtorCall.setType(ASTNodeFactory.newType(ast, ctorTypeName));
    else {
      Type baseType = ast.newSimpleType(ast.newSimpleName(ctorTypeName));
      ParameterizedType newInstantiatedType = ast.newParameterizedType(baseType);
      List<Type> newInstTypeArgs = newInstantiatedType.typeArguments();

      for (int i = 0; i < ctorOwnerTypeParameters.length; i++) {
        Type typeArg = ASTNodeFactory.newType(ast, ctorOwnerTypeParameters[i].getName());

        newInstTypeArgs.add(typeArg);
      }
      newCtorCall.setType(newInstantiatedType);
    }
  }

