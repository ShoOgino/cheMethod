  public static void addUninitializedLocalVariableProposal(
      IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals) {
    ICompilationUnit cu = context.getCompilationUnit();

    ASTNode selectedNode = problem.getCoveringNode(context.getASTRoot());
    if (!(selectedNode instanceof Name)) {
      return;
    }
    Name name = (Name) selectedNode;
    IBinding binding = name.resolveBinding();
    if (!(binding instanceof IVariableBinding)) {
      return;
    }
    IVariableBinding varBinding = (IVariableBinding) binding;

    CompilationUnit astRoot = context.getASTRoot();
    ASTNode node = astRoot.findDeclaringNode(binding);
    if (node instanceof VariableDeclarationFragment) {
      ASTRewrite rewrite = ASTRewrite.create(node.getAST());

      VariableDeclarationFragment fragment = (VariableDeclarationFragment) node;
      if (fragment.getInitializer() != null) {
        return;
      }
      Expression expression =
          ASTNodeFactory.newDefaultExpression(astRoot.getAST(), varBinding.getType());
      if (expression == null) {
        return;
      }
      rewrite.set(fragment, VariableDeclarationFragment.INITIALIZER_PROPERTY, expression, null);

      String label =
          CorrectionMessages.LocalCorrectionsSubProcessor_uninitializedvariable_description;
      Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);

      LinkedCorrectionProposal proposal =
          new LinkedCorrectionProposal(
              label, cu, rewrite, IProposalRelevance.INITIALIZE_VARIABLE, image);
      proposal.addLinkedPosition(rewrite.track(expression), false, "initializer"); //$NON-NLS-1$
      proposals.add(proposal);
    }
  }

