  @Override
  protected ASTRewrite getRewrite() throws CoreException {
    CompilationUnit astRoot = ASTResolving.findParentCompilationUnit(fNode);
    ASTNode boundNode = astRoot.findDeclaringNode(fBinding);
    ASTNode declNode = null;

    if (boundNode != null) {
      declNode = boundNode; // is same CU
    } else {
      //setSelectionDescription(selectionDescription);
      CompilationUnit newRoot = ASTResolving.createQuickFixAST(getCompilationUnit(), null);
      declNode = newRoot.findDeclaringNode(fBinding.getKey());
    }
    if (declNode != null) {
      AST ast = declNode.getAST();
      ASTRewrite rewrite = ASTRewrite.create(ast);

      if (declNode.getNodeType() == ASTNode.VARIABLE_DECLARATION_FRAGMENT) {
        VariableDeclarationFragment fragment = (VariableDeclarationFragment) declNode;
        ASTNode parent = declNode.getParent();
        if (parent instanceof FieldDeclaration) {
          FieldDeclaration fieldDecl = (FieldDeclaration) parent;
          if (fieldDecl.fragments().size() > 1
              && (fieldDecl.getParent() instanceof AbstractTypeDeclaration)) { // split
            VariableDeclarationRewrite.rewriteModifiers(
                fieldDecl,
                new VariableDeclarationFragment[] {fragment},
                fIncludedModifiers,
                fExcludedModifiers,
                rewrite,
                null);
            return rewrite;
          }
        } else if (parent instanceof VariableDeclarationStatement) {
          VariableDeclarationStatement varDecl = (VariableDeclarationStatement) parent;
          if (varDecl.fragments().size() > 1 && (varDecl.getParent() instanceof Block)) { // split
            VariableDeclarationRewrite.rewriteModifiers(
                varDecl,
                new VariableDeclarationFragment[] {fragment},
                fIncludedModifiers,
                fExcludedModifiers,
                rewrite,
                null);
            return rewrite;
          }
        } else if (parent instanceof VariableDeclarationExpression) {
          // can't separate
        }
        declNode = parent;
      } else if (declNode.getNodeType() == ASTNode.METHOD_DECLARATION) {
        MethodDeclaration methodDecl = (MethodDeclaration) declNode;
        if (!methodDecl.isConstructor()) {
          IMethodBinding methodBinding = methodDecl.resolveBinding();
          if (methodDecl.getBody() == null
              && methodBinding != null
              && Modifier.isAbstract(methodBinding.getModifiers())
              && Modifier.isStatic(fIncludedModifiers)) {
            // add body
            ICompilationUnit unit = getCompilationUnit();
            String delimiter = unit.findRecommendedLineSeparator();
            String bodyStatement = ""; //$NON-NLS-1$

            Block body = ast.newBlock();
            rewrite.set(methodDecl, MethodDeclaration.BODY_PROPERTY, body, null);
            Type returnType = methodDecl.getReturnType2();
            if (returnType != null) {
              Expression expression =
                  ASTNodeFactory.newDefaultExpression(
                      ast, returnType, methodDecl.getExtraDimensions());
              if (expression != null) {
                ReturnStatement returnStatement = ast.newReturnStatement();
                returnStatement.setExpression(expression);
                bodyStatement =
                    ASTNodes.asFormattedString(
                        returnStatement, 0, delimiter, unit.getJavaProject().getOptions(true));
              }
            }
            String placeHolder =
                CodeGeneration.getMethodBodyContent(
                    unit,
                    methodBinding.getDeclaringClass().getName(),
                    methodBinding.getName(),
                    false,
                    bodyStatement,
                    delimiter);
            if (placeHolder != null) {
              ReturnStatement todoNode =
                  (ReturnStatement)
                      rewrite.createStringPlaceholder(placeHolder, ASTNode.RETURN_STATEMENT);
              body.statements().add(todoNode);
            }
          }
        }
      }
      ModifierRewrite listRewrite = ModifierRewrite.create(rewrite, declNode);
      PositionInformation trackedDeclNode =
          listRewrite.setModifiers(fIncludedModifiers, fExcludedModifiers, null);

      LinkedProposalPositionGroup positionGroup =
          new LinkedProposalPositionGroup("group"); //$NON-NLS-1$
      positionGroup.addPosition(trackedDeclNode);
      getLinkedProposalModel().addPositionGroup(positionGroup);

      if (boundNode != null) {
        // only set end position if in same CU
        setEndPosition(rewrite.track(fNode));
      }
      return rewrite;
    }
    return null;
  }

