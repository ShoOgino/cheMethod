    private void copyMemberToDestination(
        IMember member,
        CompilationUnitRewrite targetRewriter,
        CompilationUnit sourceCuNode,
        CompilationUnit targetCuNode,
        BodyDeclaration newMember)
        throws JavaModelException {
      IJavaElement javaElementDestination = getJavaElementDestination();
      ASTNode nodeDestination = getDestinationNode(javaElementDestination, targetCuNode);
      ASTNode destinationContainer;
      if (getLocation() == IReorgDestination.LOCATION_ON
          && (javaElementDestination instanceof IType
              || javaElementDestination instanceof ICompilationUnit)) {
        destinationContainer = nodeDestination;
      } else {
        destinationContainer = nodeDestination.getParent();
      }

      ListRewrite listRewrite;
      if (destinationContainer instanceof AbstractTypeDeclaration) {
        if (newMember instanceof EnumConstantDeclaration
            && destinationContainer instanceof EnumDeclaration) {
          listRewrite =
              targetRewriter
                  .getASTRewrite()
                  .getListRewrite(destinationContainer, EnumDeclaration.ENUM_CONSTANTS_PROPERTY);
        } else {
          listRewrite =
              targetRewriter
                  .getASTRewrite()
                  .getListRewrite(
                      destinationContainer,
                      ((AbstractTypeDeclaration) destinationContainer)
                          .getBodyDeclarationsProperty());
        }
      } else if (destinationContainer instanceof CompilationUnit) {
        listRewrite =
            targetRewriter
                .getASTRewrite()
                .getListRewrite(destinationContainer, CompilationUnit.TYPES_PROPERTY);
      } else if (destinationContainer instanceof Block) {
        listRewrite =
            targetRewriter
                .getASTRewrite()
                .getListRewrite(destinationContainer, Block.STATEMENTS_PROPERTY);
      } else if (destinationContainer instanceof SwitchStatement) {
        listRewrite =
            targetRewriter
                .getASTRewrite()
                .getListRewrite(destinationContainer, SwitchStatement.STATEMENTS_PROPERTY);
      } else if (destinationContainer instanceof AnonymousClassDeclaration) {
        listRewrite =
            targetRewriter
                .getASTRewrite()
                .getListRewrite(
                    destinationContainer, AnonymousClassDeclaration.BODY_DECLARATIONS_PROPERTY);
      } else {
        listRewrite = null;
        Assert.isLegal(false);
      }

      if (getLocation() == IReorgDestination.LOCATION_ON) {
        listRewrite.insertAt(
            newMember, ASTNodes.getInsertionIndex(newMember, listRewrite.getRewrittenList()), null);
      } else {
        insertRelative(newMember, nodeDestination, listRewrite);
      }

      if (!(member instanceof IInitializer)) {
        BodyDeclaration decl = ASTNodeSearchUtil.getBodyDeclarationNode(member, sourceCuNode);
        if (decl != null) {
          ImportRewriteContext context =
              new ContextSensitiveImportRewriteContext(
                  destinationContainer, targetRewriter.getImportRewrite());
          ImportRewriteUtil.addImports(
              targetRewriter,
              context,
              decl,
              new HashMap<Name, String>(),
              new HashMap<Name, String>(),
              false);
        }
      }
    }

