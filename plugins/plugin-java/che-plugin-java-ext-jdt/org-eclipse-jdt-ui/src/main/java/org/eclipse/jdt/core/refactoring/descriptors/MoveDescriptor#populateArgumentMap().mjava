  /** {@inheritDoc} */
  protected void populateArgumentMap() {
    super.populateArgumentMap();
    JavaRefactoringDescriptorUtil.setString(fArguments, ATTRIBUTE_POLICY, fMovePolicy);
    final String project = getProject();
    if (fDestination instanceof IJavaElement)
      JavaRefactoringDescriptorUtil.setJavaElement(
          fArguments, ATTRIBUTE_DESTINATION, project, (IJavaElement) fDestination);
    else if (fDestination instanceof IPath)
      JavaRefactoringDescriptorUtil.setResourcePath(
          fArguments, ATTRIBUTE_TARGET, project, (IPath) fDestination);
    if (POLICY_MOVE_RESOURCES.equals(fMovePolicy)) {
      JavaRefactoringDescriptorUtil.setBoolean(fArguments, ATTRIBUTE_REFERENCES, fReferences);
      JavaRefactoringDescriptorUtil.setBoolean(fArguments, ATTRIBUTE_QUALIFIED, fQualified);
      JavaRefactoringDescriptorUtil.setString(fArguments, ATTRIBUTE_PATTERNS, fPatterns);
      int offset = 1;
      JavaRefactoringDescriptorUtil.setResourcePathArray(
          fArguments, ATTRIBUTE_FILES, ATTRIBUTE_ELEMENT, project, fFiles, offset);
      offset += fFiles.length;
      JavaRefactoringDescriptorUtil.setResourcePathArray(
          fArguments, ATTRIBUTE_FOLDERS, ATTRIBUTE_ELEMENT, project, fFolders, offset);
      offset += fFolders.length;
      JavaRefactoringDescriptorUtil.setJavaElementArray(
          fArguments, ATTRIBUTE_UNITS, ATTRIBUTE_ELEMENT, project, fUnits, offset);
    } else if (POLICY_MOVE_ROOTS.equals(fMovePolicy)) {
      JavaRefactoringDescriptorUtil.setJavaElementArray(
          fArguments, ATTRIBUTE_ROOTS, ATTRIBUTE_ELEMENT, project, fRoots, 1);
    } else if (POLICY_MOVE_PACKAGES.equals(fMovePolicy)) {
      JavaRefactoringDescriptorUtil.setJavaElementArray(
          fArguments, ATTRIBUTE_FRAGMENTS, ATTRIBUTE_ELEMENT, project, fFragments, 1);
    } else if (POLICY_MOVE_MEMBERS.equals(fMovePolicy)) {
      JavaRefactoringDescriptorUtil.setJavaElementArray(
          fArguments, ATTRIBUTE_MEMBERS, ATTRIBUTE_ELEMENT, project, fMembers, 1);
    }
  }

