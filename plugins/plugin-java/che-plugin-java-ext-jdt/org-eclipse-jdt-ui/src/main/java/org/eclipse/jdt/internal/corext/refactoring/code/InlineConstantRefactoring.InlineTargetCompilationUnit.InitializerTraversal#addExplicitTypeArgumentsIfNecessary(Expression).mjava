			private void addExplicitTypeArgumentsIfNecessary(Expression invocation) {
				if (Invocations.isResolvedTypeInferredFromExpectedType(invocation)) {
					ASTNode referenceContext = fNewLocation.getParent();
					if (!(referenceContext instanceof VariableDeclarationFragment
						  || referenceContext instanceof SingleVariableDeclaration
						  || referenceContext instanceof Assignment)) {
						ITypeBinding[] typeArguments = Invocations.getInferredTypeArguments(invocation);
						ListRewrite typeArgsRewrite = Invocations.getInferredTypeArgumentsRewrite(fInitializerRewrite, invocation);
						for (int i = 0; i < typeArguments.length; i++) {
							Type typeArgument = fNewLocationCuRewrite.getImportRewrite()
																	 .addImport(typeArguments[i], fNewLocationCuRewrite.getAST(),
																				fNewLocationContext);
							fNewLocationCuRewrite.getImportRemover().registerAddedImports(typeArgument);
							typeArgsRewrite.insertLast(typeArgument, null);
						}

						if (invocation instanceof MethodInvocation) {
							MethodInvocation methodInvocation = (MethodInvocation)invocation;
							Expression expression = methodInvocation.getExpression();
							if (expression == null) {
								IMethodBinding methodBinding = methodInvocation.resolveMethodBinding();
								if (methodBinding != null) {
									expression = fNewLocationCuRewrite.getAST().newName(fNewLocationCuRewrite.getImportRewrite().addImport(
											methodBinding.getDeclaringClass().getTypeDeclaration(), fNewLocationContext));
									fInitializerRewrite.set(invocation, MethodInvocation.EXPRESSION_PROPERTY, expression, null);
								}
							}
						}
					}
				}
			}

