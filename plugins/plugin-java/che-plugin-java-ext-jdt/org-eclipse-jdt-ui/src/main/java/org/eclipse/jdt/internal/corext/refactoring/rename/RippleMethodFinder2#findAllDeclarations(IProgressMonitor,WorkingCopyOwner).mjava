  private void findAllDeclarations(IProgressMonitor monitor, WorkingCopyOwner owner)
      throws CoreException {
    fDeclarations = new ArrayList<IMethod>();

    class MethodRequestor extends SearchRequestor {
      @Override
      public void acceptSearchMatch(SearchMatch match) throws CoreException {
        IMethod method = (IMethod) match.getElement();
        boolean isBinary = method.isBinary();
        if (fBinaryRefs != null || !(fExcludeBinaries && isBinary)) {
          fDeclarations.add(method);
        }
        if (isBinary && fBinaryRefs != null) {
          fDeclarationToMatch.put(method, match);
        }
      }
    }

    int limitTo =
        IJavaSearchConstants.DECLARATIONS
            | IJavaSearchConstants.IGNORE_DECLARING_TYPE
            | IJavaSearchConstants.IGNORE_RETURN_TYPE;
    int matchRule = SearchPattern.R_ERASURE_MATCH | SearchPattern.R_CASE_SENSITIVE;
    SearchPattern pattern = SearchPattern.createPattern(fMethod, limitTo, matchRule);
    SearchParticipant[] participants = SearchUtils.getDefaultSearchParticipants();
    IJavaSearchScope scope =
        RefactoringScopeFactory.createRelatedProjectsScope(
            fMethod.getJavaProject(),
            IJavaSearchScope.SOURCES
                | IJavaSearchScope.APPLICATION_LIBRARIES
                | IJavaSearchScope.SYSTEM_LIBRARIES);
    MethodRequestor requestor = new MethodRequestor();
    SearchEngine searchEngine = owner != null ? new SearchEngine(owner) : new SearchEngine();

    searchEngine.search(pattern, participants, scope, requestor, monitor);
  }

