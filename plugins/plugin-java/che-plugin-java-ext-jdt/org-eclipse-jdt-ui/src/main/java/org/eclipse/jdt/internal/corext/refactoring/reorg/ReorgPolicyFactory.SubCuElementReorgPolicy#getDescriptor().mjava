    public final ChangeDescriptor getDescriptor() {
      final Map<String, String> arguments = new HashMap<String, String>();
      final int length = fJavaElements.length;
      final String description = length == 1 ? getDescriptionSingular() : getDescriptionPlural();
      final IProject resource = getSingleProject();
      final String project = resource != null ? resource.getName() : null;
      final String header =
          length == 1
              ? Messages.format(
                  getHeaderPatternSingular(),
                  new String[] {
                    JavaElementLabels.getTextLabel(
                        fJavaElements[0].getElementName(), JavaElementLabels.ALL_FULLY_QUALIFIED),
                    getDestinationLabel()
                  })
              : Messages.format(
                  getHeaderPatternPlural(),
                  new String[] {String.valueOf(length), getDestinationLabel()});
      int flags =
          JavaRefactoringDescriptor.JAR_REFACTORING
              | JavaRefactoringDescriptor.JAR_MIGRATION
              | RefactoringDescriptor.STRUCTURAL_CHANGE
              | RefactoringDescriptor.MULTI_CHANGE;
      final JDTRefactoringDescriptorComment comment =
          new JDTRefactoringDescriptorComment(project, this, header);
      arguments.put(ATTRIBUTE_POLICY, getPolicyId());
      arguments.put(ATTRIBUTE_MEMBERS, new Integer(fJavaElements.length).toString());
      for (int offset = 0; offset < fJavaElements.length; offset++)
        arguments.put(
            JavaRefactoringDescriptorUtil.ATTRIBUTE_ELEMENT + (offset + 1),
            JavaRefactoringDescriptorUtil.elementToHandle(project, fJavaElements[offset]));
      arguments.putAll(getRefactoringArguments(project));
      final JavaRefactoringDescriptor descriptor =
          createRefactoringDescriptor(comment, arguments, description, project, flags);
      return new RefactoringChangeDescriptor(descriptor);
    }

