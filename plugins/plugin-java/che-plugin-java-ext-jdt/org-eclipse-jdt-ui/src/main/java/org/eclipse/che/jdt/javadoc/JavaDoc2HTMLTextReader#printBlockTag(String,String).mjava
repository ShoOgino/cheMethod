  private String printBlockTag(String tag, String tagContent) {

    if (TagElement.TAG_LINK.equals(tag) || TagElement.TAG_LINKPLAIN.equals(tag)) {

      char[] contentChars = tagContent.toCharArray();
      boolean inParentheses = false;
      int labelStart = 0;

      for (int i = 0; i < contentChars.length; i++) {
        char nextChar = contentChars[i];

        // tagContent always has a leading space
        if (i == 0 && Character.isWhitespace(nextChar)) {
          labelStart = 1;
          continue;
        }

        if (nextChar == '(') {
          inParentheses = true;
          continue;
        }

        if (nextChar == ')') {
          inParentheses = false;
          continue;
        }

        // Stop at first whitespace that is not in parentheses
        if (!inParentheses && Character.isWhitespace(nextChar)) {
          labelStart = i + 1;
          break;
        }
      }
      if (TagElement.TAG_LINK.equals(tag))
        return "<code>"
            + substituteQualification(tagContent.substring(labelStart))
            + "</code>"; // $NON-NLS-1$//$NON-NLS-2$
      else return substituteQualification(tagContent.substring(labelStart));

    } else if (TagElement.TAG_LITERAL.equals(tag)) {
      return printLiteral(tagContent);

    } else if (TagElement.TAG_CODE.equals(tag)) {
      return "<code>" + printLiteral(tagContent) + "</code>"; // $NON-NLS-1$//$NON-NLS-2$
    }

    // If something went wrong at least replace the {} with the content
    return substituteQualification(tagContent);
  }

