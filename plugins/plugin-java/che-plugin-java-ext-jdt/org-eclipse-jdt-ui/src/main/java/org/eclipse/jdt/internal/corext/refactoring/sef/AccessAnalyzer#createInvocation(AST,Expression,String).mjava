  private MethodInvocation createInvocation(AST ast, Expression operand, String operator) {
    Expression receiver = getReceiver(operand);
    MethodInvocation invocation = ast.newMethodInvocation();
    invocation.setName(ast.newSimpleName(fSetter));
    if (receiver != null)
      invocation.setExpression((Expression) fRewriter.createCopyTarget(receiver));
    InfixExpression argument = ast.newInfixExpression();
    invocation.arguments().add(argument);
    if ("++".equals(operator)) { //$NON-NLS-1$
      argument.setOperator(InfixExpression.Operator.PLUS);
    } else if ("--".equals(operator)) { //$NON-NLS-1$
      argument.setOperator(InfixExpression.Operator.MINUS);
    } else {
      Assert.isTrue(false, "Should not happen"); //$NON-NLS-1$
    }
    MethodInvocation getter = ast.newMethodInvocation();
    getter.setName(ast.newSimpleName(fGetter));
    if (receiver != null) getter.setExpression((Expression) fRewriter.createCopyTarget(receiver));
    argument.setLeftOperand(getter);
    argument.setRightOperand(ast.newNumberLiteral("1")); //$NON-NLS-1$

    fReferencingGetter = true;
    fReferencingSetter = true;

    return invocation;
  }

