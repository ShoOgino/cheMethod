  public static MethodDeclaration createImplementationStub(
      ICompilationUnit unit,
      ASTRewrite rewrite,
      ImportRewrite imports,
      ImportRewriteContext context,
      IMethodBinding binding,
      String[] parameterNames,
      String type,
      CodeGenerationSettings settings,
      boolean inInterface)
      throws CoreException {
    Assert.isNotNull(imports);
    Assert.isNotNull(rewrite);

    AST ast = rewrite.getAST();

    MethodDeclaration decl = ast.newMethodDeclaration();
    decl.modifiers()
        .addAll(getImplementationModifiers(ast, binding, inInterface, imports, context));

    decl.setName(ast.newSimpleName(binding.getName()));
    decl.setConstructor(false);

    ITypeBinding bindingReturnType = binding.getReturnType();
    if (bindingReturnType.isWildcardType()) {
      ITypeBinding bound = bindingReturnType.getBound();
      bindingReturnType = (bound != null) ? bound : bindingReturnType.getErasure();
    }

    IJavaProject javaProject = unit.getJavaProject();
    if (JavaModelUtil.is50OrHigher(javaProject)) {
      createTypeParameters(imports, context, ast, binding, decl);

    } else {
      bindingReturnType = bindingReturnType.getErasure();
    }

    decl.setReturnType2(imports.addImport(bindingReturnType, ast, context));

    List<SingleVariableDeclaration> parameters =
        createParameters(javaProject, imports, context, ast, binding, parameterNames, decl);

    createThrownExceptions(decl, binding, imports, context, ast);

    String delimiter = unit.findRecommendedLineSeparator();
    int modifiers = binding.getModifiers();
    if (!(inInterface && Modifier.isAbstract(modifiers))) {
      // generate a method body

      Map<String, String> options = javaProject.getOptions(true);

      Block body = ast.newBlock();
      decl.setBody(body);

      String bodyStatement = ""; // $NON-NLS-1$
      if (Modifier.isAbstract(modifiers)) {
        Expression expression =
            ASTNodeFactory.newDefaultExpression(
                ast, decl.getReturnType2(), decl.getExtraDimensions());
        if (expression != null) {
          ReturnStatement returnStatement = ast.newReturnStatement();
          returnStatement.setExpression(expression);
          bodyStatement = ASTNodes.asFormattedString(returnStatement, 0, delimiter, options);
        }
      } else {
        SuperMethodInvocation invocation = ast.newSuperMethodInvocation();
        ITypeBinding declaringType = binding.getDeclaringClass();
        if (declaringType.isInterface()) {
          String qualifier = imports.addImport(declaringType.getErasure(), context);
          Name name = ASTNodeFactory.newName(ast, qualifier);
          invocation.setQualifier(name);
        }
        invocation.setName(ast.newSimpleName(binding.getName()));
        SingleVariableDeclaration varDecl = null;
        for (Iterator<SingleVariableDeclaration> iterator = parameters.iterator();
            iterator.hasNext(); ) {
          varDecl = iterator.next();
          invocation.arguments().add(ast.newSimpleName(varDecl.getName().getIdentifier()));
        }
        Expression expression = invocation;
        Type returnType = decl.getReturnType2();
        if (returnType instanceof PrimitiveType
            && ((PrimitiveType) returnType).getPrimitiveTypeCode().equals(PrimitiveType.VOID)) {
          bodyStatement =
              ASTNodes.asFormattedString(
                  ast.newExpressionStatement(expression), 0, delimiter, options);
        } else {
          ReturnStatement returnStatement = ast.newReturnStatement();
          returnStatement.setExpression(expression);
          bodyStatement = ASTNodes.asFormattedString(returnStatement, 0, delimiter, options);
        }
      }

      String placeHolder =
          CodeGeneration.getMethodBodyContent(
              unit, type, binding.getName(), false, bodyStatement, delimiter);
      if (placeHolder != null) {
        ReturnStatement todoNode =
            (ReturnStatement)
                rewrite.createStringPlaceholder(placeHolder, ASTNode.RETURN_STATEMENT);
        body.statements().add(todoNode);
      }
    }

    if (settings != null && settings.createComments) {
      String string = CodeGeneration.getMethodComment(unit, type, decl, binding, delimiter);
      if (string != null) {
        Javadoc javadoc = (Javadoc) rewrite.createStringPlaceholder(string, ASTNode.JAVADOC);
        decl.setJavadoc(javadoc);
      }
    }
    if (settings != null
        && settings.overrideAnnotation
        && JavaModelUtil.is50OrHigher(javaProject)) {
      addOverrideAnnotation(javaProject, rewrite, decl, binding);
    }

    return decl;
  }

