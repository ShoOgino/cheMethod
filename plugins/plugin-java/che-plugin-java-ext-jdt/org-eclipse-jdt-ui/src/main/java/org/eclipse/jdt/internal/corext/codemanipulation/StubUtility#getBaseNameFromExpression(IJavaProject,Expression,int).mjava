  private static String getBaseNameFromExpression(
      IJavaProject project, Expression assignedExpression, int variableKind) {
    String name = null;
    if (assignedExpression instanceof CastExpression) {
      assignedExpression = ((CastExpression) assignedExpression).getExpression();
    }
    if (assignedExpression instanceof Name) {
      Name simpleNode = (Name) assignedExpression;
      IBinding binding = simpleNode.resolveBinding();
      if (binding instanceof IVariableBinding)
        return getBaseName((IVariableBinding) binding, project);

      return ASTNodes.getSimpleNameIdentifier(simpleNode);
    } else if (assignedExpression instanceof MethodInvocation) {
      name = ((MethodInvocation) assignedExpression).getName().getIdentifier();
    } else if (assignedExpression instanceof SuperMethodInvocation) {
      name = ((SuperMethodInvocation) assignedExpression).getName().getIdentifier();
    } else if (assignedExpression instanceof FieldAccess) {
      return ((FieldAccess) assignedExpression).getName().getIdentifier();
    } else if (variableKind == NamingConventions.VK_STATIC_FINAL_FIELD
        && (assignedExpression instanceof StringLiteral
            || assignedExpression instanceof NumberLiteral)) {
      String string =
          assignedExpression instanceof StringLiteral
              ? ((StringLiteral) assignedExpression).getLiteralValue()
              : ((NumberLiteral) assignedExpression).getToken();
      StringBuffer res = new StringBuffer();
      boolean needsUnderscore = false;
      for (int i = 0; i < string.length(); i++) {
        char ch = string.charAt(i);
        if (Character.isJavaIdentifierPart(ch)) {
          if (res.length() == 0 && !Character.isJavaIdentifierStart(ch) || needsUnderscore) {
            res.append('_');
          }
          res.append(ch);
          needsUnderscore = false;
        } else {
          needsUnderscore = res.length() > 0;
        }
      }
      if (res.length() > 0) {
        return res.toString();
      }
    }
    if (name != null) {
      for (int i = 0; i < KNOWN_METHOD_NAME_PREFIXES.length; i++) {
        String curr = KNOWN_METHOD_NAME_PREFIXES[i];
        if (name.startsWith(curr)) {
          if (name.equals(curr)) {
            return null; // don't suggest 'get' as variable name
          } else if (Character.isUpperCase(name.charAt(curr.length()))) {
            return name.substring(curr.length());
          }
        }
      }
    }
    return name;
  }

