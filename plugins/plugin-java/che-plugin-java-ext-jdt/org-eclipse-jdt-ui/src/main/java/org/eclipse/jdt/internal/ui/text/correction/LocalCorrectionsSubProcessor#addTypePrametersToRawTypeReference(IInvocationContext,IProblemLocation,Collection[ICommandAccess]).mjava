  public static void addTypePrametersToRawTypeReference(
      IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals) {
    IProposableFix fix = Java50Fix.createRawTypeReferenceFix(context.getASTRoot(), problem);
    if (fix != null) {
      for (Iterator<ICommandAccess> iter = proposals.iterator(); iter.hasNext(); ) {
        Object element = iter.next();
        if (element instanceof FixCorrectionProposal) {
          FixCorrectionProposal fixProp = (FixCorrectionProposal) element;
          if (RAW_TYPE_REFERENCE_ID.equals(fixProp.getCommandId())) {
            return;
          }
        }
      }
      Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
      Map<String, String> options = new Hashtable<String, String>();
      options.put(
          CleanUpConstants.VARIABLE_DECLARATION_USE_TYPE_ARGUMENTS_FOR_RAW_TYPE_REFERENCES,
          CleanUpOptions.TRUE);
      FixCorrectionProposal proposal =
          new FixCorrectionProposal(
              fix,
              new Java50CleanUp(options),
              IProposalRelevance.RAW_TYPE_REFERENCE,
              image,
              context);
      proposal.setCommandId(RAW_TYPE_REFERENCE_ID);
      proposals.add(proposal);
    }

    //Infer Generic Type Arguments... proposal
    boolean hasInferTypeArgumentsProposal = false;
    for (Iterator<ICommandAccess> iterator = proposals.iterator(); iterator.hasNext(); ) {
      Object completionProposal = iterator.next();
      if (completionProposal instanceof ChangeCorrectionProposal) {
        if (IJavaEditorActionDefinitionIds.INFER_TYPE_ARGUMENTS_ACTION.equals(
            ((ChangeCorrectionProposal) completionProposal).getCommandId())) {
          hasInferTypeArgumentsProposal = true;
          break;
        }
      }
    }
    if (!hasInferTypeArgumentsProposal) {
      final ICompilationUnit cu = context.getCompilationUnit();
      ChangeCorrectionProposal proposal =
          new ChangeCorrectionProposal(
              CorrectionMessages.LocalCorrectionsSubProcessor_InferGenericTypeArguments,
              null,
              IProposalRelevance.INFER_GENERIC_TYPE_ARGUMENTS,
              JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE)) {
            @Override
            public void apply(IDocument document) {
              //							IEditorInput input = new FileEditorInput((IFile)cu.getResource());
              //							IWorkbenchPage p = JavaPlugin.getActivePage();
              //							if (p == null)
              //								return;
              //
              //							IEditorPart part = p.findEditor(input);
              //							if (!(part instanceof JavaEditor))
              //								return;
              //
              //							IEditorSite site = ((JavaEditor)part).getEditorSite();
              //							InferTypeArgumentsAction action = new InferTypeArgumentsAction(site);
              //							action.run(new StructuredSelection(cu));
              throw new UnsupportedOperationException();
            }

            @Override
            public String getActionId() {
              return "javaInferTypeArguments";
            }

            /** {@inheritDoc} */
            @Override
            public Object getAdditionalProposalInfo(IProgressMonitor monitor) {
              return CorrectionMessages
                  .LocalCorrectionsSubProcessor_InferGenericTypeArguments_description;
            }
          };
      proposal.setCommandId(IJavaEditorActionDefinitionIds.INFER_TYPE_ARGUMENTS_ACTION);
      proposals.add(proposal);
    }

    addTypeArgumentsFromContext(context, problem, proposals);
  }

