    /**
     * Returns the source of the given node from the location where it was parsed.
     * @param node the node to get the source from
     * @param extendedRange if set, the extended ranges of the nodes should ne used
     * @param removeIndent if set, the indentation is removed.
     * @return return the source for the given node or null if accessing the source failed.
     */
    public static String getNodeSource(ASTNode node, boolean extendedRange, boolean removeIndent) {
        ASTNode root = node.getRoot();
        if (root instanceof CompilationUnit) {
            CompilationUnit astRoot = (CompilationUnit)root;
            ITypeRoot typeRoot = astRoot.getTypeRoot();
            try {
                if (typeRoot != null && typeRoot.getBuffer() != null) {
                    IBuffer buffer = typeRoot.getBuffer();
                    int offset = extendedRange ? astRoot.getExtendedStartPosition(node) : node.getStartPosition();
                    int length = extendedRange ? astRoot.getExtendedLength(node) : node.getLength();
                    String str = buffer.getText(offset, length);
                    if (removeIndent) {
                        IJavaProject project = typeRoot.getJavaProject();
                        int indent = StubUtility.getIndentUsed(buffer, node.getStartPosition(), project);
                        str = Strings.changeIndent(str, indent, project, new String(), typeRoot.findRecommendedLineSeparator());
                    }
                    return str;
                }
            } catch (JavaModelException e) {
                // ignore
            }
        }
        return null;
    }

