  /**
   * Returns the label of the given object. The object must be of type {@link IJavaElement} or adapt
   * to {@link IWorkbenchAdapter}. If the element type is not known, the empty string is returned.
   * The returned label is BiDi-processed with {@link TextProcessor#process(String, String)}.
   *
   * @param obj object to get the label for
   * @param flags the rendering flags
   * @return the label or the empty string if the object type is not supported
   */
  public static String getTextLabel(Object obj, long flags) {
    if (obj instanceof IJavaElement) {
      return getElementLabel((IJavaElement) obj, flags);

    } else if (obj instanceof IResource) {
      return BasicElementLabels.getResourceName((IResource) obj);
      //
      //		} else if (obj instanceof ClassPathContainer) {
      //			ClassPathContainer container = (ClassPathContainer)obj;
      //			IPath containerPath = container.getClasspathEntry().getPath();
      //			try {
      //				return getContainerEntryLabel(containerPath, container.getJavaProject());
      //			} catch (JavaModelException e) {
      //				return BasicElementLabels.getPathLabel(containerPath, false);
      //			}
      //
      //		} else if (obj instanceof IStorage) {
      //			return BasicElementLabels.getResourceName(((IStorage)obj).getName());
      //
      //		} else if (obj instanceof IAdaptable) {
      //			IWorkbenchAdapter wbadapter = (IWorkbenchAdapter)((IAdaptable)obj).getAdapter(IWorkbenchAdapter.class);
      //			if (wbadapter != null) {
      //				return Strings.markLTR(wbadapter.getLabel(obj));
      //			}
    }
    return ""; //$NON-NLS-1$
  }

