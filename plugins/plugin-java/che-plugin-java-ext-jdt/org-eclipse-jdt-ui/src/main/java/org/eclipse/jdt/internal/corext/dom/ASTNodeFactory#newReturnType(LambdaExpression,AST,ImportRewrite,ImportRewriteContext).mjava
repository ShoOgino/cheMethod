  /**
   * Returns the new type node representing the return type of <code>lambdaExpression</code>
   * including the extra dimensions.
   *
   * @param lambdaExpression the lambda expression
   * @param ast the AST to create the return type with
   * @param importRewrite the import rewrite to use, or <code>null</code>
   * @param context the import rewrite context, or <code>null</code>
   * @return a new type node created with the given AST representing the return type of <code>
   *     lambdaExpression</code>
   * @since 3.10
   */
  public static Type newReturnType(
      LambdaExpression lambdaExpression,
      AST ast,
      ImportRewrite importRewrite,
      ImportRewriteContext context) {
    IMethodBinding method = lambdaExpression.resolveMethodBinding();
    if (method != null) {
      ITypeBinding returnTypeBinding = method.getReturnType();
      if (importRewrite != null) {
        return importRewrite.addImport(returnTypeBinding, ast);
      } else {
        String qualifiedName = returnTypeBinding.getQualifiedName();
        if (qualifiedName.length() > 0) {
          return newType(ast, qualifiedName);
        }
      }
    }
    // fall-back
    return ast.newSimpleType(ast.newSimpleName("Object")); //$NON-NLS-1$
  }

