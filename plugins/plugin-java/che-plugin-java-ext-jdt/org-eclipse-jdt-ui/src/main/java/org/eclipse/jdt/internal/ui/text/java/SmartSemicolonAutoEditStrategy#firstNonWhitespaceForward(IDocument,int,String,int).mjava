  /**
   * Finds the smallest position in <code>document</code> such that the position is &gt;= <code>
   * position</code> and &lt; <code>bound</code> and <code>
   * Character.isWhitespace(document.getChar(pos))</code> evaluates to <code>false</code> and the
   * position is in the default partition.
   *
   * @param document the document being modified
   * @param position the first character position in <code>document</code> to be considered
   * @param partitioning the document partitioning
   * @param bound the first position in <code>document</code> to not consider any more, with <code>
   *     bound</code> &gt; <code>position</code>
   * @return the smallest position of one element in <code>chars</code> in [<code>position</code>,
   *     <code>scanTo</code>) that resides in a Java partition, or <code>-1</code> if none can be
   *     found
   */
  private static int firstNonWhitespaceForward(
      IDocument document, int position, String partitioning, int bound) {
    Assert.isTrue(position >= 0);
    Assert.isTrue(bound <= document.getLength());

    try {
      while (position < bound) {
        char ch = document.getChar(position);
        if (!Character.isWhitespace(ch) && isDefaultPartition(document, position, partitioning))
          return position;
        position++;
      }
    } catch (BadLocationException e) {
    }
    return -1;
  }

