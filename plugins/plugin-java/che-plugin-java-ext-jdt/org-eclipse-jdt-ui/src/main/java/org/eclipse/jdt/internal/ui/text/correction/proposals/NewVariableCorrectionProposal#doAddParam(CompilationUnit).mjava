	private ASTRewrite doAddParam(CompilationUnit cu) {
		AST ast = cu.getAST();
		SimpleName node = fOriginalNode;

		BodyDeclaration decl = ASTResolving.findParentBodyDeclaration(node);
		if (decl instanceof MethodDeclaration) {
			MethodDeclaration methodDeclaration = (MethodDeclaration)decl;

			ASTRewrite rewrite = ASTRewrite.create(ast);

			ImportRewrite imports = createImportRewrite((CompilationUnit)decl.getRoot());
			ImportRewriteContext importRewriteContext = new ContextSensitiveImportRewriteContext(decl, imports);

			SingleVariableDeclaration newDecl = ast.newSingleVariableDeclaration();
			newDecl.setType(evaluateVariableType(ast, imports, importRewriteContext, methodDeclaration.resolveBinding()));
			newDecl.setName(ast.newSimpleName(node.getIdentifier()));

			ListRewrite listRewriter = rewrite.getListRewrite(decl, MethodDeclaration.PARAMETERS_PROPERTY);
			listRewriter.insertLast(newDecl, null);

			addLinkedPosition(rewrite.track(node), true, KEY_NAME);

			// add javadoc tag
			Javadoc javadoc = methodDeclaration.getJavadoc();
			if (javadoc != null) {
				HashSet<String> leadingNames = new HashSet<String>();
				for (Iterator<SingleVariableDeclaration> iter = methodDeclaration.parameters().iterator(); iter.hasNext(); ) {
					SingleVariableDeclaration curr = iter.next();
					leadingNames.add(curr.getName().getIdentifier());
				}
				SimpleName newTagRef = ast.newSimpleName(node.getIdentifier());

				TagElement newTagElement = ast.newTagElement();
				newTagElement.setTagName(TagElement.TAG_PARAM);
				newTagElement.fragments().add(newTagRef);
				TextElement commentStart = ast.newTextElement();
				newTagElement.fragments().add(commentStart);

				addLinkedPosition(rewrite.track(newTagRef), false, KEY_NAME);
				addLinkedPosition(rewrite.track(commentStart), false, "comment_start"); //$NON-NLS-1$

				ListRewrite tagsRewriter = rewrite.getListRewrite(javadoc, Javadoc.TAGS_PROPERTY);
				JavadocTagsSubProcessor.insertTag(tagsRewriter, newTagElement, leadingNames);
			}

			addLinkedPosition(rewrite.track(newDecl.getType()), false, KEY_TYPE);
			addLinkedPosition(rewrite.track(newDecl.getName()), false, KEY_NAME);

			return rewrite;
		}
		return null;
	}

