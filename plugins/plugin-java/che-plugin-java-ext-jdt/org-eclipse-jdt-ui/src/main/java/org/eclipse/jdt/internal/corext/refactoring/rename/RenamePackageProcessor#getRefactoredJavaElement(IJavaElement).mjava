  public IJavaElement getRefactoredJavaElement(IJavaElement original) {
    return new GenericRefactoringHandleTransplanter() {
      @Override
      protected IPackageFragment transplantHandle(
          IPackageFragmentRoot parent, IPackageFragment element) {
        if (!fRenameSubpackages) {
          if (fPackage.equals(element)) return getNewPackage();
        } else {
          String packName = element.getElementName();
          String packageName = fPackage.getElementName();
          if (fPackage.getParent().equals(parent) && packName.startsWith(packageName + '.')) {
            String newPackName = getNewElementName() + packName.substring(packageName.length() - 1);
            return getPackageFragmentRoot().getPackageFragment(newPackName);
          }
        }
        return super.transplantHandle(parent, element);
      }

      @Override
      protected IMethod transplantHandle(IType parent, IMethod element) {
        String[] parameterTypes = resolveParameterTypes(element);
        return parent.getMethod(element.getElementName(), parameterTypes);
      }

      private String[] resolveParameterTypes(IMethod method) {
        final String[] oldParameterTypes = method.getParameterTypes();
        final String[] newparams = new String[oldParameterTypes.length];

        final String[] possibleOldSigs = new String[2];
        // using type signature, since there is no package signature
        possibleOldSigs[0] = Signature.createTypeSignature(fPackage.getElementName(), false);
        possibleOldSigs[1] = Signature.createTypeSignature(fPackage.getElementName(), true);

        final String[] possibleNewSigs = new String[2];
        possibleNewSigs[0] = Signature.createTypeSignature(getNewElementName(), false);
        possibleNewSigs[1] = Signature.createTypeSignature(getNewElementName(), true);

        // Textually replace all occurrences
        // This handles stuff like Map<SomeClass, some.package.SomeClass>
        for (int i = 0; i < oldParameterTypes.length; i++) {
          newparams[i] = oldParameterTypes[i];
          for (int j = 0; j < possibleOldSigs.length; j++) {
            newparams[i] = Util.replaceAll(newparams[i], possibleOldSigs[j], possibleNewSigs[j]);
          }
        }
        return newparams;
      }
    }.transplantHandle(original);
  }

