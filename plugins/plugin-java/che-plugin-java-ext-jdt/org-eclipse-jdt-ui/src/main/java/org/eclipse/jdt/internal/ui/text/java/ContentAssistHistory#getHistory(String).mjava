  /**
   * Returns the {@link RHSHistory history} of the types that have been selected most recently as
   * right hand sides for the given type.
   *
   * @param lhs the fully qualified type name of an expected type for which right hand sides are
   *     requested, or <code>null</code>
   * @return the right hand side history for the given type
   */
  public RHSHistory getHistory(String lhs) {
    MRUSet<String> rhsCache = fLHSCache.get(lhs);
    if (rhsCache != null) {
      int count = rhsCache.size();
      LinkedHashMap<String, Integer> history =
          new LinkedHashMap<String, Integer>((int) (count / 0.75));
      int rank = 1;
      for (Iterator<String> it = rhsCache.iterator(); it.hasNext(); rank++) {
        String type = it.next();
        history.put(type, new Integer(rank));
      }
      return new RHSHistory(history);
    }
    return EMPTY_HISTORY;
  }

