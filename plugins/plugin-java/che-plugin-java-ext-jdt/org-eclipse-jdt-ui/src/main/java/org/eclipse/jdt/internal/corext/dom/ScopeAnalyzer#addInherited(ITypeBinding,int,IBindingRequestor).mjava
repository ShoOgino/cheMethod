  /**
   * Collects all elements available in a type and its hierarchy
   *
   * @param binding The type binding
   * @param flags Flags defining the elements to report
   * @param requestor the requestor to which all results are reported
   * @return return <code>true</code> if the requestor has reported the binding as found and no
   *     further results are required
   */
  private boolean addInherited(ITypeBinding binding, int flags, IBindingRequestor requestor) {
    if (!fTypesVisited.add(binding)) {
      return false;
    }
    if (hasFlag(VARIABLES, flags)) {
      IVariableBinding[] variableBindings = binding.getDeclaredFields();
      for (int i = 0; i < variableBindings.length; i++) {
        if (requestor.acceptBinding(variableBindings[i])) return true;
      }
    }

    if (hasFlag(METHODS, flags)) {
      IMethodBinding[] methodBindings = binding.getDeclaredMethods();
      for (int i = 0; i < methodBindings.length; i++) {
        IMethodBinding curr = methodBindings[i];
        if (!curr.isSynthetic() && !curr.isConstructor()) {
          if (requestor.acceptBinding(curr)) return true;
        }
      }
    }

    if (hasFlag(TYPES, flags)) {
      ITypeBinding[] typeBindings = binding.getDeclaredTypes();
      for (int i = 0; i < typeBindings.length; i++) {
        ITypeBinding curr = typeBindings[i];
        if (requestor.acceptBinding(curr)) return true;
      }
    }

    ITypeBinding superClass = binding.getSuperclass();
    if (superClass != null) {
      if (addInherited(superClass, flags, requestor)) // recursive
      return true;
    } else if (binding.isArray()) {
      if (addInherited(
          fRoot.getAST().resolveWellKnownType("java.lang.Object"), flags, requestor)) // $NON-NLS-1$
      return true;
    }

    ITypeBinding[] interfaces =
        binding.getInterfaces(); // includes looking for methods: abstract, unimplemented methods
    for (int i = 0; i < interfaces.length; i++) {
      if (addInherited(interfaces[i], flags, requestor)) // recursive
      return true;
    }
    return false;
  }

