    /*
     * @see ASTVisitor#visit(TagElement)
     * @since 3.0
     */
    @Override
    public boolean visit(TagElement node) {
        if (node.isNested()) {
            // nested tags are always enclosed in braces
            this.fBuffer.append("{");//$NON-NLS-1$
        } else {
            // top-level tags always begin on a new line
            this.fBuffer.append("\n * ");//$NON-NLS-1$
        }
        boolean previousRequiresWhiteSpace = false;
        if (node.getTagName() != null) {
            this.fBuffer.append(node.getTagName());
            previousRequiresWhiteSpace = true;
        }
        boolean previousRequiresNewLine = false;
        for (Iterator<? extends ASTNode> it = node.fragments().iterator(); it.hasNext(); ) {
            ASTNode e = it.next();
            // assume text elements include necessary leading and trailing whitespace
            // but Name, MemberRef, MethodRef, and nested TagElement do not include white space
            boolean currentIncludesWhiteSpace = (e instanceof TextElement);
            if (previousRequiresNewLine && currentIncludesWhiteSpace) {
                this.fBuffer.append("\n * ");//$NON-NLS-1$
            }
            previousRequiresNewLine = currentIncludesWhiteSpace;
            // add space if required to separate
            if (previousRequiresWhiteSpace && !currentIncludesWhiteSpace) {
                this.fBuffer.append(" "); //$NON-NLS-1$
            }
            e.accept(this);
            previousRequiresWhiteSpace = !currentIncludesWhiteSpace && !(e instanceof TagElement);
        }
        if (node.isNested()) {
            this.fBuffer.append("}");//$NON-NLS-1$
        }
        return false;
    }

