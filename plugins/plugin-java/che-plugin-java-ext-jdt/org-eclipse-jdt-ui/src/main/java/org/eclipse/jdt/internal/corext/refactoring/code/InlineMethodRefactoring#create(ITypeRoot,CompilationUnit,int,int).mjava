  /**
   * Creates a new inline method refactoring
   *
   * @param unit the compilation unit or class file
   * @param node the compilation unit node
   * @param selectionStart start
   * @param selectionLength length
   * @return returns the refactoring
   */
  public static InlineMethodRefactoring create(
      ITypeRoot unit, CompilationUnit node, int selectionStart, int selectionLength) {
    ASTNode target =
        RefactoringAvailabilityTester.getInlineableMethodNode(
            unit, node, selectionStart, selectionLength);
    if (target == null) return null;
    if (target.getNodeType() == ASTNode.METHOD_DECLARATION) {

      return new InlineMethodRefactoring(
          unit, (MethodDeclaration) target, selectionStart, selectionLength);
    } else {
      ICompilationUnit cu = (ICompilationUnit) unit;
      if (target.getNodeType() == ASTNode.METHOD_INVOCATION) {
        return new InlineMethodRefactoring(
            cu, (MethodInvocation) target, selectionStart, selectionLength);
      } else if (target.getNodeType() == ASTNode.SUPER_METHOD_INVOCATION) {
        return new InlineMethodRefactoring(
            cu, (SuperMethodInvocation) target, selectionStart, selectionLength);
      } else if (target.getNodeType() == ASTNode.CONSTRUCTOR_INVOCATION) {
        return new InlineMethodRefactoring(
            cu, (ConstructorInvocation) target, selectionStart, selectionLength);
      }
    }
    return null;
  }

