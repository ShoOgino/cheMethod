	/**
	 * Returns a version of <code>descriptor</code> decorated according to
	 * the passed <code>modifier</code> flags.
	 *
	 * @param descriptor the image descriptor to decorate
	 * @param proposal the proposal
	 * @return an image descriptor for a method proposal
	 * @see org.eclipse.jdt.core.Flags
	 */
	private ImageDescriptor decorateImageDescriptor(ImageDescriptor descriptor, CompletionProposal proposal) {
		int adornments= 0;
		int flags= proposal.getFlags();
		int kind= proposal.getKind();

		boolean deprecated= Flags.isDeprecated(flags);
		if (!deprecated) {
			CompletionProposal[] requiredProposals= proposal.getRequiredProposals();
			if (requiredProposals != null) {
				for (int i= 0; i < requiredProposals.length; i++) {
					CompletionProposal requiredProposal= requiredProposals[i];
					if (requiredProposal.getKind() == CompletionProposal.TYPE_REF) {
						deprecated |= Flags.isDeprecated(requiredProposal.getFlags());
					}
				}
			}
		}
		if (deprecated)
			adornments |= JavaElementImageDescriptor.DEPRECATED;

		if (kind == CompletionProposal.FIELD_REF || kind == CompletionProposal.METHOD_DECLARATION || kind == CompletionProposal.METHOD_NAME_REFERENCE
				|| kind == CompletionProposal.METHOD_REF || kind == CompletionProposal.CONSTRUCTOR_INVOCATION)
			if (Flags.isStatic(flags))
				adornments |= JavaElementImageDescriptor.STATIC;

		if (kind == CompletionProposal.METHOD_DECLARATION || kind == CompletionProposal.METHOD_NAME_REFERENCE || kind == CompletionProposal.METHOD_REF
				|| kind == CompletionProposal.CONSTRUCTOR_INVOCATION)
			if (Flags.isSynchronized(flags))
				adornments |= JavaElementImageDescriptor.SYNCHRONIZED;
		if (kind == CompletionProposal.METHOD_DECLARATION || kind == CompletionProposal.METHOD_NAME_REFERENCE || kind == CompletionProposal.METHOD_REF)
			if (Flags.isDefaultMethod(flags))
				adornments|= JavaElementImageDescriptor.DEFAULT_METHOD;
		if (kind == CompletionProposal.ANNOTATION_ATTRIBUTE_REF)
			if (Flags.isAnnnotationDefault(flags))
				adornments|= JavaElementImageDescriptor.ANNOTATION_DEFAULT;

		if (kind == CompletionProposal.TYPE_REF && Flags.isAbstract(flags) && !Flags.isInterface(flags))
			adornments |= JavaElementImageDescriptor.ABSTRACT;

		if (kind == CompletionProposal.FIELD_REF) {
			if (Flags.isFinal(flags))
				adornments |= JavaElementImageDescriptor.FINAL;
			if (Flags.isTransient(flags))
				adornments |= JavaElementImageDescriptor.TRANSIENT;
			if (Flags.isVolatile(flags))
				adornments |= JavaElementImageDescriptor.VOLATILE;
		}

		return new JavaElementImageDescriptor(descriptor, adornments/*, JavaElementImageProvider.SMALL_SIZE*/);
	}

