  /**
   * Given a list of <code>ITypeConstraint2</code>s that all refer to a given <code>
   * ConstraintVariable2</code> (whose type bound has presumably just changed), process each <code>
   * ITypeConstraint</code>, propagating the type bound across the constraint as needed.
   *
   * @param usedIn the <code>List</code> of <code>ITypeConstraint2</code>s to process
   */
  private void processConstraints(List<ITypeConstraint2> usedIn) {
    Iterator<ITypeConstraint2> iter = usedIn.iterator();
    while (iter.hasNext()) {
      ITypeConstraint2 tc = iter.next();

      maintainSimpleConstraint(tc);
      //TODO: prune tcs which cannot cause further changes
      // Maybe these should be pruned after a special first loop over all ConstraintVariables,
      // Since this can only happen once for every CV in the work list.
      //				if (isConstantConstraint(stc))
      //					fTypeConstraintFactory.removeUsedIn(stc, changedCv);
    }
  }

