	/**
	 * Returns the affected java projects of the previous search queries.
	 * <p>
	 * In order to retrieve the java projects, grouping by resource must have been enabled before searching.
	 *
	 * @return the java projects of the previous queries (element type:
	 * <code>&lt;IJavaProject, Collection&lt;SearchResultGroup&gt;&gt;</code> if granularity is {@link #GRANULARITY_SEARCH_MATCH} or
	 * <code>&lt;IJavaProject, Collection&lt;ICompilationUnit&gt;&gt;</code> if it is {@link #GRANULARITY_COMPILATION_UNIT}).
	 */
	public final Map<IJavaProject, ? extends Set<?>> getAffectedProjects() {
		IJavaProject project = null;
		ICompilationUnit unit = null;
		if (fGranularity == GRANULARITY_COMPILATION_UNIT) {
			final Map<IJavaProject, Set<ICompilationUnit>> map = new HashMap<IJavaProject, Set<ICompilationUnit>>();
			final ICompilationUnit[] units = getAffectedCompilationUnits();
			for (int index = 0; index < units.length; index++) {
				unit = units[index];
				project = unit.getJavaProject();
				if (project != null) {
					Set<ICompilationUnit> set = map.get(project);
					if (set == null) {
						set = new HashSet<ICompilationUnit>();
						map.put(project, set);
					}
					set.add(unit);
				}
			}
			return map;
		} else {
			final Map<IJavaProject, Set<SearchResultGroup>> map = new HashMap<IJavaProject, Set<SearchResultGroup>>();
			final SearchResultGroup[] groups = getGroupedMatches();
			SearchResultGroup group = null;
			for (int index = 0; index < groups.length; index++) {
				group = groups[index];
				unit = group.getCompilationUnit();
				if (unit != null) {
					project = unit.getJavaProject();
					if (project != null) {
						Set<SearchResultGroup> set = map.get(project);
						if (set == null) {
							set = new HashSet<SearchResultGroup>();
							map.put(project, set);
						}
						set.add(group);
					}
				}
			}
			return map;
		}
	}

