  /**
   * Checks if the parameter names are valid.
   *
   * @return validation status
   */
  public RefactoringStatus checkParameterNames() {
    RefactoringStatus result = new RefactoringStatus();
    for (Iterator<ParameterInfo> iter = fParameterInfos.iterator(); iter.hasNext(); ) {
      ParameterInfo parameter = iter.next();
      result.merge(Checks.checkIdentifier(parameter.getNewName(), fCUnit));
      for (Iterator<ParameterInfo> others = fParameterInfos.iterator(); others.hasNext(); ) {
        ParameterInfo other = others.next();
        if (parameter != other && other.getNewName().equals(parameter.getNewName())) {
          result.addError(
              Messages.format(
                  RefactoringCoreMessages.ExtractMethodRefactoring_error_sameParameter,
                  BasicElementLabels.getJavaElementName(other.getNewName())));
          return result;
        }
      }
      if (parameter.isRenamed() && fUsedNames.contains(parameter.getNewName())) {
        result.addError(
            Messages.format(
                RefactoringCoreMessages.ExtractMethodRefactoring_error_nameInUse,
                BasicElementLabels.getJavaElementName(parameter.getNewName())));
        return result;
      }
    }
    return result;
  }

