  private List<IRegion> getExpressionRanges() {
    fMarkerMode = EXPRESSION_MODE;
    List<IRegion> result = new ArrayList<IRegion>(2);
    List<Statement> statements = fDeclaration.getBody().statements();
    ReturnStatement rs = null;
    int size = statements.size();
    ASTNode node;
    switch (size) {
      case 0:
        return result;
      case 1:
        node = statements.get(0);
        if (node.getNodeType() == ASTNode.RETURN_STATEMENT) {
          rs = (ReturnStatement) node;
        } else {
          result.add(createRange(node, node));
        }
        break;
      default:
        {
          node = statements.get(size - 1);
          if (node.getNodeType() == ASTNode.RETURN_STATEMENT) {
            result.add(createRange(statements, size - 2));
            rs = (ReturnStatement) node;
          } else {
            result.add(createRange(statements, size - 1));
          }
          break;
        }
    }
    if (rs != null) {
      Expression exp = rs.getExpression();
      result.add(createRange(exp, exp));
    }
    return result;
  }

