	/**
	 * Evaluates library locations for a IVMInstall. If no library locations are set on the install, a default
	 * location is evaluated and checked if it exists.
     * @param vm the {@link org.eclipse.che.jdt.core.launching.IVMInstallType} to compute locations for
     * @return library locations with paths that exist or are empty
     * @since 2.0
     */
    public static LibraryLocation[] getLibraryLocations(IVMInstallType vm)  {
        IPath[] libraryPaths;
        IPath[] sourcePaths;
        IPath[] sourceRootPaths;
        URL[] javadocLocations;
        LibraryLocation[] locations= null; //vm.getLibraryLocations();
        if (locations == null) {
            URL defJavaDocLocation = null; //vm.getJavadocLocation();
            File installLocation = vm.detectInstallLocation();
            if (installLocation == null) {
                return new LibraryLocation[0];
            }
            LibraryLocation[] dflts= vm.getDefaultLibraryLocations(installLocation);
            libraryPaths = new IPath[dflts.length];
            sourcePaths = new IPath[dflts.length];
            sourceRootPaths = new IPath[dflts.length];
            javadocLocations= new URL[dflts.length];
            for (int i = 0; i < dflts.length; i++) {
                libraryPaths[i]= dflts[i].getSystemLibraryPath();
                if (defJavaDocLocation == null) {
                    javadocLocations[i]= dflts[i].getJavadocLocation();
                } else {
                    javadocLocations[i]= defJavaDocLocation;
                }
                if (!libraryPaths[i].toFile().isFile()) {
                    libraryPaths[i]= Path.EMPTY;
                }

                sourcePaths[i]= dflts[i].getSystemLibrarySourcePath();
                if (sourcePaths[i].toFile().isFile()) {
                    sourceRootPaths[i]= dflts[i].getPackageRootPath();
                } else {
                    sourcePaths[i]= Path.EMPTY;
                    sourceRootPaths[i]= Path.EMPTY;
                }
            }
        } else {
            libraryPaths = new IPath[locations.length];
            sourcePaths = new IPath[locations.length];
            sourceRootPaths = new IPath[locations.length];
            javadocLocations= new URL[locations.length];
            for (int i = 0; i < locations.length; i++) {
                libraryPaths[i]= locations[i].getSystemLibraryPath();
                sourcePaths[i]= locations[i].getSystemLibrarySourcePath();
                sourceRootPaths[i]= locations[i].getPackageRootPath();
				javadocLocations[i] = locations[i].getJavadocLocation();
			}
		}
		locations = new LibraryLocation[sourcePaths.length];
        for (int i = 0; i < sourcePaths.length; i++) {
			locations[i] = new LibraryLocation(libraryPaths[i], sourcePaths[i], sourceRootPaths[i], javadocLocations[i]);
		}
        return locations;
    }

