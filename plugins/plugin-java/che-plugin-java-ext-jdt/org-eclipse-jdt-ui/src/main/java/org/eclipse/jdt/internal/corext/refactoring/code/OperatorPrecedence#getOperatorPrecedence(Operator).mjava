  /**
   * Returns the precedence of an infix operator. Operators with higher precedence are executed
   * before expressions with lower precedence. <br>
   * i.e. in: <br>
   * <code>3 + 4 - 5 * 6;</code><br>
   * the precedence order is
   *
   * <ul>
   *   <li>*
   *   <li>+
   *   <li>-
   * </ul>
   *
   * 1. 5,6 -(*)-> 30<br>
   * 2. 3,4 -(+)-> 7<br>
   * 3. 7,30 -(-)-> -23<br>
   *
   * @param operator the expression to determine the precedence for
   * @return the precedence the higher to stronger the binding to its operands
   */
  public static int getOperatorPrecedence(Operator operator) {
    if (operator == Operator.CONDITIONAL_OR) {
      return CONDITIONAL_OR;
    } else if (operator == Operator.CONDITIONAL_AND) {
      return CONDITIONAL_AND;
    } else if (operator == Operator.OR) {
      return BITWISE_INCLUSIVE_OR;
    } else if (operator == Operator.XOR) {
      return BITWISE_EXCLUSIVE_OR;
    } else if (operator == Operator.AND) {
      return BITWISE_AND;
    } else if (operator == Operator.EQUALS || operator == Operator.NOT_EQUALS) {
      return EQUALITY;
    } else if (operator == Operator.LESS
        || operator == Operator.LESS_EQUALS
        || operator == Operator.GREATER
        || operator == Operator.GREATER_EQUALS) {
      return RELATIONAL;
    } else if (operator == Operator.LEFT_SHIFT
        || operator == Operator.RIGHT_SHIFT_SIGNED
        || operator == Operator.RIGHT_SHIFT_UNSIGNED) {
      return SHIFT;
    } else if (operator == Operator.PLUS || operator == Operator.MINUS) {
      return ADDITIVE;
    } else if (operator == Operator.REMAINDER
        || operator == Operator.DIVIDE
        || operator == Operator.TIMES) {
      return MULTIPLICATIVE;
    }
    return Integer.MAX_VALUE;
  }

