//
//	/**
//	 * Appends a string and keeps its whitespace and newlines.
//	 * <p>
//	 * <b>Warning:</b> This starts a new paragraph when rendered in a browser, but
//	 * it doesn't starts a new paragraph when rendered with a {@link HTML2TextReader}
//	 * (e.g. in a {@link DefaultInformationControl} that renders simple HTML).
//	 *
//	 * @param buffer the output buffer
//	 * @param preFormatted the string that should be rendered with whitespace preserved
//	 *
//	 * @see #convertToHTMLContent(String)
//	 * @see #convertToHTMLContentWithWhitespace(String)
//	 * @since 3.7
//	 */
//	public static void addPreFormatted(StringBuffer buffer, String preFormatted) {
//		if (preFormatted != null) {
//			buffer.append("<pre>"); //$NON-NLS-1$
//			buffer.append(preFormatted);
//			buffer.append("</pre>"); //$NON-NLS-1$
//		}
//	}
//
	public static void addParagraph(StringBuffer buffer, Reader paragraphReader) {
		if (paragraphReader != null)
			addParagraph(buffer, read(paragraphReader));
	}
//
//	/**
//	 * Replaces the following style attributes of the font definition of the <code>html</code>
//	 * element:
//	 * <ul>
//	 * <li>font-size</li>
//	 * <li>font-weight</li>
//	 * <li>font-style</li>
//	 * <li>font-family</li>
//	 * </ul>
//	 * The font's name is used as font family, a <code>sans-serif</code> default font family is
//	 * appended for the case that the given font name is not available.
//	 * <p>
//	 * If the listed font attributes are not contained in the passed style list, nothing happens.
//	 * </p>
//	 *
//	 * @param styles CSS style definitions
//	 * @param fontData the font information to use
//	 * @return the modified style definitions
//	 * @since 3.3
//	 */
//	public static String convertTopLevelFont(String styles, FontData fontData) {
//		boolean bold= (fontData.getStyle() & SWT.BOLD) != 0;
//		boolean italic= (fontData.getStyle() & SWT.ITALIC) != 0;
//		String size= Integer.toString(fontData.getHeight()) + UNIT;
//		String family= "'" + fontData.getName() + "',sans-serif"; //$NON-NLS-1$ //$NON-NLS-2$
//
//		styles= styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-size:\\s*)\\d+pt(\\;?.*\\})", "$1" + size + "$2"); //$NON-NLS-1$
// $NON-NLS-2$ //$NON-NLS-3$
//		styles= styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-weight:\\s*)\\w+(\\;?.*\\})", "$1" + (bold ? "bold" : "normal") + "$2");
// $NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$
//		styles= styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-style:\\s*)\\w+(\\;?.*\\})", "$1" + (italic ? "italic" : "normal") + "$2"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$ //$NON-NLS-5$
//		styles= styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-family:\\s*).+?(;.*\\})", "$1" + family + "$2"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
//		return styles;
//	}

