  private static boolean getArrayInitializerToArrayCreation(
      IInvocationContext context, ASTNode node, Collection<ICommandAccess> resultingCollections) {
    if (!(node instanceof ArrayInitializer)) {
      return false;
    }
    ArrayInitializer initializer = (ArrayInitializer) node;

    ASTNode parent = initializer.getParent();
    while (parent instanceof ArrayInitializer) {
      initializer = (ArrayInitializer) parent;
      parent = parent.getParent();
    }
    ITypeBinding typeBinding = initializer.resolveTypeBinding();
    if (!(parent instanceof VariableDeclaration) || typeBinding == null || !typeBinding.isArray()) {
      return false;
    }
    if (resultingCollections == null) {
      return true;
    }

    AST ast = node.getAST();
    ASTRewrite rewrite = ASTRewrite.create(ast);

    String label = CorrectionMessages.QuickAssistProcessor_typetoarrayInitializer_description;
    Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);

    LinkedCorrectionProposal proposal =
        new LinkedCorrectionProposal(
            label,
            context.getCompilationUnit(),
            rewrite,
            IProposalRelevance.ADD_TYPE_TO_ARRAY_INITIALIZER,
            image);

    ImportRewrite imports = proposal.createImportRewrite(context.getASTRoot());
    ImportRewriteContext importRewriteContext =
        new ContextSensitiveImportRewriteContext(node, imports);
    String typeName = imports.addImport(typeBinding, importRewriteContext);

    ArrayCreation creation = ast.newArrayCreation();
    creation.setInitializer((ArrayInitializer) rewrite.createMoveTarget(initializer));
    creation.setType((ArrayType) ASTNodeFactory.newType(ast, typeName));

    rewrite.replace(initializer, creation, null);

    resultingCollections.add(proposal);
    return true;
  }

