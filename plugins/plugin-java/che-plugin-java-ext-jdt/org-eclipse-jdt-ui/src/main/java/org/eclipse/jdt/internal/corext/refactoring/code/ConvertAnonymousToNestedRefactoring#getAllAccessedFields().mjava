  private List<IBinding> getAllAccessedFields() {
    final List<IBinding> accessedFields = new ArrayList<IBinding>();

    ASTVisitor visitor =
        new ASTVisitor() {

          @Override
          public boolean visit(FieldAccess node) {
            final IVariableBinding binding = node.resolveFieldBinding();
            if (binding != null && !binding.isEnumConstant()) accessedFields.add(binding);
            return super.visit(node);
          }

          @Override
          public boolean visit(QualifiedName node) {
            final IBinding binding = node.resolveBinding();
            if (binding != null && binding instanceof IVariableBinding) {
              IVariableBinding variable = (IVariableBinding) binding;
              if (!variable.isEnumConstant() && variable.isField()) accessedFields.add(binding);
            }
            return super.visit(node);
          }

          @Override
          public boolean visit(SimpleName node) {
            final IBinding binding = node.resolveBinding();
            if (binding != null && binding instanceof IVariableBinding) {
              IVariableBinding variable = (IVariableBinding) binding;
              if (!variable.isEnumConstant() && variable.isField()) accessedFields.add(binding);
            }
            return super.visit(node);
          }

          @Override
          public boolean visit(SuperFieldAccess node) {
            final IVariableBinding binding = node.resolveFieldBinding();
            if (binding != null && !binding.isEnumConstant()) accessedFields.add(binding);
            return super.visit(node);
          }
        };
    fAnonymousInnerClassNode.accept(visitor);

    return accessedFields;
  }

