	/**
	 * Creates an instance of a {@link GenerateForLoopAssistProposal}.
	 *
	 * @param cu the current {@link ICompilationUnit}
	 * @param expressionType the {@link ITypeBinding} of the element to iterate over
	 * @param currentNode the {@link ASTNode} instance representing the statement on which the
	 *            assist was called
	 * @param currentExpression the {@link Expression} contained in the currentNode
	 * @param loopTypeToGenerate the type of the loop to generate, possible values are
	 *            {@link GenerateForLoopAssistProposal#GENERATE_FOREACH},
	 *            {@link GenerateForLoopAssistProposal#GENERATE_ITERATOR_FOR} or
	 *            {@link GenerateForLoopAssistProposal#GENERATE_ITERATE_ARRAY}
	 */
	public GenerateForLoopAssistProposal(ICompilationUnit cu, ITypeBinding expressionType, ASTNode currentNode,
										 Expression currentExpression, int loopTypeToGenerate) {
		super("", cu, null, IProposalRelevance.GENERATE_FOR_LOOP,
			  JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE)); //$NON-NLS-1$
		fCurrentNode = currentNode;
		fCurrentExpression = currentExpression;
		fLoopTypeToGenerate = loopTypeToGenerate;
		fExpressionType = expressionType;

		switch (loopTypeToGenerate) {
			case GenerateForLoopAssistProposal.GENERATE_FOREACH:
				setDisplayName(CorrectionMessages.QuickAssistProcessor_generate_enhanced_for_loop);
				setRelevance(IProposalRelevance.GENERATE_ENHANCED_FOR_LOOP);
				break;
			case GenerateForLoopAssistProposal.GENERATE_ITERATOR_FOR:
				setDisplayName(CorrectionMessages.QuickAssistProcessor_generate_iterator_for_loop);
				break;
			case GenerateForLoopAssistProposal.GENERATE_ITERATE_ARRAY:
				setDisplayName(CorrectionMessages.QuickAssistProcessor_generate_for_loop);
				break;
			case GenerateForLoopAssistProposal.GENERATE_ITERATE_LIST:
				setDisplayName(CorrectionMessages.QuickAssistProcessor_generate_index_for_loop);
				break;
			default:
				break;
		}
	}

