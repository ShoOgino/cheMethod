	/**
	 * Generates a {@link VariableDeclarationExpression}, which initializes the loop variable to
	 * iterate over an array.
	 * 
	 * @param ast the current {@link AST} instance
	 * @param loopVariableName the name of the variable which should be initialized
	 * @return a filled {@link VariableDeclarationExpression}, declaring a int variable, which is
	 *         initializes with 0
	 */
	private VariableDeclarationExpression getForInitializer(AST ast, SimpleName loopVariableName) {
		// initializing fragment
		VariableDeclarationFragment firstDeclarationFragment= ast.newVariableDeclarationFragment();
		firstDeclarationFragment.setName(loopVariableName);
		NumberLiteral startIndex= ast.newNumberLiteral();
		firstDeclarationFragment.setInitializer(startIndex);

		// declaration
		VariableDeclarationExpression variableDeclaration= ast.newVariableDeclarationExpression(firstDeclarationFragment);
		PrimitiveType variableType= ast.newPrimitiveType(PrimitiveType.INT);
		variableDeclaration.setType(variableType);

		return variableDeclaration;
	}

