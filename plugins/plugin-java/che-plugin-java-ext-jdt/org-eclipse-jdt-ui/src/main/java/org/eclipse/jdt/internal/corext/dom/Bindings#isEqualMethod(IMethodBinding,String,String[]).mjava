  /**
   * Checks whether a method with the given name and parameter types is a subsignature of the given
   * method binding.
   *
   * @param method a method
   * @param methodName method name to match
   * @param parameters the parameter types of the method to find. If <code>null</code> is passed,
   *     only the name is matched and parameters are ignored.
   * @return <code>true</code> iff the method m1 (with name <code>methodName</code> and method
   *     parameters <code>parameters</code>) is a subsignature of the method <code>m2</code>.
   *     Accessibility and return types are not taken into account.
   */
  public static boolean isEqualMethod(
      IMethodBinding method, String methodName, String[] parameters) {
    if (!method.getName().equals(methodName)) return false;

    ITypeBinding[] methodParameters = method.getParameterTypes();
    if (methodParameters.length != parameters.length) return false;
    String first, second;
    int index;
    for (int i = 0; i < parameters.length; i++) {
      first = parameters[i];
      index = first.indexOf('<');
      if (index > 0) {
        int lastIndex = first.lastIndexOf('>');
        StringBuffer buf = new StringBuffer();
        buf.append(first.substring(0, index));
        if (lastIndex < first.length() - 1)
          buf.append(first.substring(lastIndex + 1, first.length()));
        first = buf.toString();
      }
      second = methodParameters[i].getQualifiedName();
      if (!first.equals(second)) {
        second = methodParameters[i].getErasure().getQualifiedName();
        if (!first.equals(second)) return false;
      }
    }
    return true;
  }

