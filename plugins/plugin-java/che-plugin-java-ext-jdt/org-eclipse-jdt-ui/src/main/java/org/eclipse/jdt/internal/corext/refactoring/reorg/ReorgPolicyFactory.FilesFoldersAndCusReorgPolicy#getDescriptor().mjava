		public final ChangeDescriptor getDescriptor() {
			final Map<String, String> arguments = new HashMap<String, String>();
			final int length = fFiles.length + fFolders.length + fCus.length;
			final String description = length == 1 ? getDescriptionSingular() : getDescriptionPlural();
			final IProject resource = getSingleProject();
			final String project = resource != null ? resource.getName() : null;
			final String header =
					length == 1 ? Messages.format(getHeaderPatternSingular(), new String[]{getSingleElementName(), getDestinationLabel()})
								: Messages.format(
										getHeaderPatternPlural(),
										new String[]{String.valueOf(length), getDestinationLabel()});
			int flags = JavaRefactoringDescriptor.JAR_MIGRATION | JavaRefactoringDescriptor.JAR_REFACTORING |
						RefactoringDescriptor.STRUCTURAL_CHANGE | RefactoringDescriptor.MULTI_CHANGE;
			final JDTRefactoringDescriptorComment comment = new JDTRefactoringDescriptorComment(project, this, header);
			arguments.put(ATTRIBUTE_POLICY, getPolicyId());
			arguments.put(ATTRIBUTE_FILES, new Integer(fFiles.length).toString());
			for (int offset = 0; offset < fFiles.length; offset++)
				arguments.put(JavaRefactoringDescriptorUtil.ATTRIBUTE_ELEMENT + (offset + 1),
							  JavaRefactoringDescriptorUtil.resourceToHandle(project, fFiles[offset]));
			arguments.put(ATTRIBUTE_FOLDERS, new Integer(fFolders.length).toString());
			for (int offset = 0; offset < fFolders.length; offset++)
				arguments.put(JavaRefactoringDescriptorUtil.ATTRIBUTE_ELEMENT + (offset + fFiles.length + 1),
							  JavaRefactoringDescriptorUtil.resourceToHandle(project, fFolders[offset]));
			arguments.put(ATTRIBUTE_UNITS, new Integer(fCus.length).toString());
			for (int offset = 0; offset < fCus.length; offset++)
				arguments.put(JavaRefactoringDescriptorUtil.ATTRIBUTE_ELEMENT + (offset + fFolders.length + fFiles.length + 1),
							  JavaRefactoringDescriptorUtil.elementToHandle(project, fCus[offset]));
			arguments.putAll(getRefactoringArguments(project));
			final JavaRefactoringDescriptor descriptor = createRefactoringDescriptor(comment, arguments, description, project, flags);
			return new RefactoringChangeDescriptor(descriptor);
		}

