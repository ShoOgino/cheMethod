  /**
   * Parse a URL from a String. This method first tries to treat <code>url</code> as a valid,
   * encoded URL. If that didn't work, it tries to recover from bad URLs, e.g. the unencoded form we
   * used to use in persistent storage.
   *
   * @param url a URL
   * @return the parsed URL or <code>null</code> if the URL couldn't be parsed
   * @since 3.9
   */
  public static URL parseURL(String url) {
    try {
      try {
        return new URI(url).toURL();
      } catch (URISyntaxException e) {
        try {
          // don't log, since we used to store bad (unencoded) URLs
          if (url.startsWith("file:/")) { //$NON-NLS-1$
            // workaround for a bug in the 3-arg URI constructor for paths that contain '[' or ']':
            return new URI("file", null, url.substring(5), null).toURL(); //$NON-NLS-1$
          } else {
            return URIUtil.fromString(url).toURL();
          }
        } catch (URISyntaxException e1) {
          // last try, not expected to happen
          LOG.error(e.getMessage(), e);
          return new URL(url);
        }
      }
    } catch (MalformedURLException e) {
      LOG.error(e.getMessage(), e);
      return null;
    }
  }

