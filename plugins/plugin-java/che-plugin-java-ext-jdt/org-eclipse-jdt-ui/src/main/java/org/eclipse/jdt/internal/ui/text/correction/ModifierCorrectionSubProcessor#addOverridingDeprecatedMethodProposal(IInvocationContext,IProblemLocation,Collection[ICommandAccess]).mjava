  public static void addOverridingDeprecatedMethodProposal(
      IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals) {

    ICompilationUnit cu = context.getCompilationUnit();

    ASTNode selectedNode = problem.getCoveringNode(context.getASTRoot());
    if (!(selectedNode instanceof MethodDeclaration)) {
      return;
    }
    boolean is50OrHigher = JavaModelUtil.is50OrHigher(cu.getJavaProject());
    MethodDeclaration methodDecl = (MethodDeclaration) selectedNode;
    AST ast = methodDecl.getAST();
    ASTRewrite rewrite = ASTRewrite.create(ast);
    if (is50OrHigher) {
      Annotation annot = ast.newMarkerAnnotation();
      annot.setTypeName(ast.newName("Deprecated")); //$NON-NLS-1$
      rewrite
          .getListRewrite(methodDecl, methodDecl.getModifiersProperty())
          .insertFirst(annot, null);
    }
    Javadoc javadoc = methodDecl.getJavadoc();
    if (javadoc != null || !is50OrHigher) {
      if (!is50OrHigher) {
        javadoc = ast.newJavadoc();
        rewrite.set(methodDecl, MethodDeclaration.JAVADOC_PROPERTY, javadoc, null);
      }
      TagElement newTag = ast.newTagElement();
      newTag.setTagName(TagElement.TAG_DEPRECATED);
      JavadocTagsSubProcessor.insertTag(
          rewrite.getListRewrite(javadoc, Javadoc.TAGS_PROPERTY), newTag, null);
    }

    String label =
        CorrectionMessages.ModifierCorrectionSubProcessor_overrides_deprecated_description;
    Image image = JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_CHANGE);
    ASTRewriteCorrectionProposal proposal =
        new ASTRewriteCorrectionProposal(
            label, cu, rewrite, IProposalRelevance.OVERRIDES_DEPRECATED, image);
    proposals.add(proposal);
  }

