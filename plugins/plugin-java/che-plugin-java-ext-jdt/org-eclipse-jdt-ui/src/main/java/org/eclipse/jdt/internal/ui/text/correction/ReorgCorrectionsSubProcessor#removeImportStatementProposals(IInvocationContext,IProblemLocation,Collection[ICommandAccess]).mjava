	public static void removeImportStatementProposals(IInvocationContext context, IProblemLocation problem, Collection<ICommandAccess> proposals) {
		IProposableFix fix= UnusedCodeFix.createRemoveUnusedImportFix(context.getASTRoot(), problem);
		if (fix != null) {
			Image image= JavaPluginImages.get(JavaPluginImages.IMG_CORRECTION_DELETE_IMPORT);
			Map<String, String> options= new Hashtable<String, String>();
			options.put(CleanUpConstants.REMOVE_UNUSED_CODE_IMPORTS, CleanUpOptions.TRUE);
			FixCorrectionProposal
					proposal= new FixCorrectionProposal(fix, new UnusedCodeCleanUp(options), IProposalRelevance.REMOVE_UNUSED_IMPORT, image, context);
			proposals.add(proposal);
		}

		final ICompilationUnit cu= context.getCompilationUnit();
		String name= CorrectionMessages.ReorgCorrectionsSubProcessor_organizeimports_description;
		ChangeCorrectionProposal proposal= new ChangeCorrectionProposal(name, null, IProposalRelevance.ORGANIZE_IMPORTS, JavaPluginImages
				.get(JavaPluginImages.IMG_CORRECTION_CHANGE))  {
			@Override
			public void apply(IDocument document) {
//				IEditorInput input= new FileEditorInput((IFile) cu.getResource());
//				IWorkbenchPage p= JavaPlugin.getActivePage();
//				if (p == null) {
//					return;
//				}
//				IEditorPart part= p.findEditor(input);
//				if (part instanceof JavaEditor) {
//					OrganizeImportsAction action= new OrganizeImportsAction((JavaEditor) part);
//					action.run(cu);
//				}
				throw new UnsupportedOperationException("apply doesn't supported for action proposal");
			}

			@Override
			public String getActionId() {
				return "javaOrganizeImports";
			}
		};
		proposals.add(proposal);
	}

