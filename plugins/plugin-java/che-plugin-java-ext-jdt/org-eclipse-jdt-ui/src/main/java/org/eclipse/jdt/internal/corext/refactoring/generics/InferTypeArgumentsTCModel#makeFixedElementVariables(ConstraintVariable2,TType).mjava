  public void makeFixedElementVariables(ConstraintVariable2 expressionCv, TType type) {
    if (isAGenericType(type)) {
      GenericType genericType = (GenericType) type.getTypeDeclaration();
      TType[] typeParameters = genericType.getTypeParameters();
      TType[] typeArguments = null;
      if (type.isParameterizedType()) typeArguments = ((ParameterizedType) type).getTypeArguments();

      for (int i = 0; i < typeParameters.length; i++) {
        TypeVariable typeVariable = (TypeVariable) typeParameters[i];
        CollectionElementVariable2 elementCv = makeElementVariable(expressionCv, typeVariable, i);
        TType referenceTypeArgument;
        if (typeArguments == null) { // raw type
          continue; // do not consider
        } else {
          referenceTypeArgument = typeArguments[i];
        }
        createEqualsConstraint(elementCv, makeImmutableTypeVariable(referenceTypeArgument));
        //				if (typeVariable.getBounds().length != 0) {
        //					//TODO: create subtype constraints for bounds
        //				}
      }
    }
    makeFixedElementVariablesFromSupertypes(expressionCv, type.getTypeDeclaration());
  }

