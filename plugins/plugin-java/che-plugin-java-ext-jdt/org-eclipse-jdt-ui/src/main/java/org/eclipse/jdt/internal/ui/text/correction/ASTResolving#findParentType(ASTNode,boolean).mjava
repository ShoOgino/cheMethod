  /**
   * Finds the ancestor type of <code>node</code> (includes <code>node</code> in the search).
   *
   * @param node the node to start the search from, can be <code>null</code>
   * @param treatModifiersOutside if set, modifiers are not part of their type, but of the type's
   *     parent
   * @return returns the ancestor type of <code>node</code> (AbstractTypeDeclaration or
   *     AnonymousTypeDeclaration) if any (including <code>node</code>), <code>null</code> otherwise
   */
  public static ASTNode findParentType(ASTNode node, boolean treatModifiersOutside) {
    StructuralPropertyDescriptor lastLocation = null;

    while (node != null) {
      if (node instanceof AbstractTypeDeclaration) {
        AbstractTypeDeclaration decl = (AbstractTypeDeclaration) node;
        if (!treatModifiersOutside || lastLocation != decl.getModifiersProperty()) {
          return decl;
        }
      } else if (node instanceof AnonymousClassDeclaration) {
        return node;
      }
      lastLocation = node.getLocationInParent();
      node = node.getParent();
    }
    return null;
  }

