    /**
     * Runs the given search query. This method will execute the query in a
     * background thread and not block until the search is finished.
     * Running a query adds it to the set of known queries and notifies
     * any registered {@link IQueryListener}s about the addition.
     * <p>
     * The result will be shown in the given search result view which will be activated. A call to
     * to {@link #activateSearchResultView} is not required.
     * </p>
     *
     * @param query
     *            the query to execute. The query must be able to run in background, that means
     *            {@link ISearchQuery#canRunInBackground()} must be <code>true</code>
     * @param view
     *           the search result view to show the result in. If <code>null</code> is passed in, the default activation
     *           mechanism is used to open a new result view or to select the view to be reused.
     * @throws IllegalArgumentException Thrown when the passed query is not able to run in background
     * @since 3.2
     */
    public static void runQueryInBackground(ISearchQuery query, ISearchResultViewPart view) throws IllegalArgumentException {
        if (query == null) {
            throw new IllegalArgumentException("query must not be null"); //$NON-NLS-1$
        }
        if (query.canRunInBackground())
            InternalSearchUI.getInstance().runSearchInBackground(query, view);
        else
            throw new IllegalArgumentException("Query can not be run in background"); //$NON-NLS-1$
    }

