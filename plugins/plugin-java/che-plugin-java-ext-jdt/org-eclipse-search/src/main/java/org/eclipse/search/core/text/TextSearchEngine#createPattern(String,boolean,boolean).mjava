	/**
	 * Creates a pattern for the given search string and the given options.
	 * 
	 * @param pattern the search pattern. If <code>isRegex</code> is:
	 *            <ul>
	 *            <li><code>false</code>: a string including '*' and '?' wildcards and '\' for
	 *            escaping the literals '*', '?' and '\'</li>
	 *            <li><code>true</code>: a regex as specified by {@link Pattern} plus "\R" denoting
	 *            a line delimiter (platform independent)</li>
	 *            </ul>
	 * @param isRegex <code>true</code> if the given string follows the {@link Pattern} including
	 *            "\R"
	 * @param isCaseSensitive Set to <code>true</code> to create a case insensitive pattern
	 * @return the created pattern
	 * @throws PatternSyntaxException if "\R" is at an illegal position
	 * @see Pattern
	 * @since 3.8
	 */
	public static Pattern createPattern(String pattern, boolean isCaseSensitive, boolean isRegex) throws PatternSyntaxException {
		return PatternConstructor.createPattern(pattern, isRegex, true, isCaseSensitive, false);
	}

