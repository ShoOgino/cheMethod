  public static StringBuffer appendAsRegEx(
      boolean isStringMatcher, String pattern, StringBuffer buffer) {
    boolean isEscaped = false;
    for (int i = 0; i < pattern.length(); i++) {
      char c = pattern.charAt(i);
      switch (c) {
          // the backslash
        case '\\':
          // the backslash is escape char in string matcher
          if (isStringMatcher && !isEscaped) {
            isEscaped = true;
          } else {
            buffer.append("\\\\"); //$NON-NLS-1$
            isEscaped = false;
          }
          break;
          // characters that need to be escaped in the regex.
        case '(':
        case ')':
        case '{':
        case '}':
        case '.':
        case '[':
        case ']':
        case '$':
        case '^':
        case '+':
        case '|':
          if (isEscaped) {
            buffer.append("\\\\"); //$NON-NLS-1$
            isEscaped = false;
          }
          buffer.append('\\');
          buffer.append(c);
          break;
        case '?':
          if (isStringMatcher && !isEscaped) {
            buffer.append('.');
          } else {
            buffer.append('\\');
            buffer.append(c);
            isEscaped = false;
          }
          break;
        case '*':
          if (isStringMatcher && !isEscaped) {
            buffer.append(".*"); //$NON-NLS-1$
          } else {
            buffer.append('\\');
            buffer.append(c);
            isEscaped = false;
          }
          break;
        default:
          if (isEscaped) {
            buffer.append("\\\\"); //$NON-NLS-1$
            isEscaped = false;
          }
          buffer.append(c);
          break;
      }
    }
    if (isEscaped) {
      buffer.append("\\\\"); //$NON-NLS-1$
      isEscaped = false;
    }
    return buffer;
  }

