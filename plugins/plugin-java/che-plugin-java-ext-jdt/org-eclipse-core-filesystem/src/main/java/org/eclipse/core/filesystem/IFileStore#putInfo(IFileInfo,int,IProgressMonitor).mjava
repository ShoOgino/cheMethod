  /**
   * Writes information about this file to the underlying file system. Only certain parts of the
   * file information structure can be written using this method, as specified by the option flags.
   * Other changed information in the provided info will be ignored. This method has no effect when
   * no option flags are provided. The following example sets the last modified time for a file
   * store, leaving other values unchanged:
   *
   * <pre>
   *    IFileInfo info = EFS#createFileInfo();
   *    info.setLastModified(System.currentTimeMillis());
   *    store.putInfo(info, EFS.SET_LAST_MODIFIED, monitor);
   * </pre>
   *
   * <p>The {@link EFS#SET_ATTRIBUTES} update flag controls whether the file's attributes are
   * changed. When this flag is specified, the <code>EFS#ATTRIBUTE_*</code> values, with the
   * exception of <code>EFS#ATTRIBUTE_DIRECTORY</code>, <code>EFS#ATTRIBUTE_SYMLINK</code> and
   * <code>EFS#ATTRIBUTE_LINK_TARGET</code>, are set for this file. When this flag is not specified,
   * changed attributes on the provided file info are ignored.
   *
   * <p>Since Eclipse 3.6, implementations shall also make a best effort to consult UNIX umask in
   * order to set the same attributes for other access groups. This setting of attributes for others
   * may change the file system state even if an attribute appears to be set for the current user
   * already.
   *
   * <p>Clearing an attribute causes clearing it for all access groups. This means setting and
   * clearing an attribute might not restore previous file system state as these operations are not
   * symmetrical.
   *
   * <p>The {@link EFS#SET_LAST_MODIFIED} update flag controls whether the file's last modified time
   * is changed. When this flag is specified, the last modified time for the file in the underlying
   * file system is updated to the value in the provided info object. Due to the different
   * granularities of file systems, the time that is set might not exact match the provided time.
   *
   * @param info The file information instance containing the values to set.
   * @param options bit-wise or of option flag constants ( {@link EFS#SET_ATTRIBUTES} or {@link
   *     EFS#SET_LAST_MODIFIED}).
   * @param monitor a progress monitor, or <code>null</code> if progress reporting and cancellation
   *     are not desired
   * @exception CoreException if this method fails. Reasons include:
   *     <ul>
   *       <li>This store does not exist.
   *     </ul>
   *
   * @see EFS#createFileInfo()
   */
  public void putInfo(IFileInfo info, int options, IProgressMonitor monitor) throws CoreException;

