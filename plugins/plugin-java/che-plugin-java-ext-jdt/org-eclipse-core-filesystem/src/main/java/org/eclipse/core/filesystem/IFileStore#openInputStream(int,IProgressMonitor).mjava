	/**
	 * Returns an open input stream on the contents of this file. The number of
	 * concurrently open streams depends on the implementation and can be limited.
	 * The caller is responsible for closing the provided stream when it is no longer
	 * needed.
	 * <p>
	 * The returned stream is not guaranteed to be buffered efficiently.  When reading
	 * large blocks of data from the stream, a <code>BufferedInputStream</code>
	 * wrapper should be used, or some other form of content buffering.
	 * </p>
	 * <p>
	 * It depends on the implementation how the limit of concurrently opened streams 
	 * is handled. <code>CoreException</code> may be thrown, when the limit is exceeded.
	 * </p>
	 * 
	 * @param options bit-wise or of option flag constants (currently only {@link EFS#NONE}
	 * is applicable).
	 * @param monitor a progress monitor, or <code>null</code> if progress
	 *    reporting and cancellation are not desired
	 * @return An input stream on the contents of this file.
	 * @exception CoreException if this method fails. Reasons include:
	 * <ul>
	 * <li>This store does not exist.</li>
	 * <li>This store represents a directory.</li>
	 * <li>The limit of concurrently opened streams has been exceeded.</li>
	 * </ul>
	 */
	public InputStream openInputStream(int options, IProgressMonitor monitor) throws CoreException;

