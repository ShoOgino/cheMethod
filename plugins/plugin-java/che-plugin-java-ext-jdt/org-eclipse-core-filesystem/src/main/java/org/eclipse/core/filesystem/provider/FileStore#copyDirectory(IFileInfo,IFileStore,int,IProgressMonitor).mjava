  /**
   * Recursively copies a directory as specified by {@link IFileStore#copy(IFileStore, int,
   * IProgressMonitor)}.
   *
   * @param sourceInfo The current file information for the source of the move
   * @param destination The destination of the copy.
   * @param options bit-wise or of option flag constants ( {@link EFS#OVERWRITE} or {@link
   *     EFS#SHALLOW}).
   * @param monitor a progress monitor, or <code>null</code> if progress reporting and cancellation
   *     are not desired
   * @exception CoreException if this method fails. Reasons include:
   *     <ul>
   *       <li>This store does not exist.
   *       <li>A file of the same name already exists at the copy destination.
   *     </ul>
   */
  protected void copyDirectory(
      IFileInfo sourceInfo, IFileStore destination, int options, IProgressMonitor monitor)
      throws CoreException {
    try {
      IFileStore[] children = null;
      int opWork = 1;
      if ((options & EFS.SHALLOW) == 0) {
        children = childStores(EFS.NONE, null);
        opWork += children.length;
      }
      monitor.beginTask("", opWork); //$NON-NLS-1$
      monitor.subTask(NLS.bind(Messages.copying, toString()));
      // create directory
      destination.mkdir(EFS.NONE, Policy.subMonitorFor(monitor, 1));
      // copy attributes
      transferAttributes(sourceInfo, destination);

      if (children == null) return;
      // copy children
      for (int i = 0; i < children.length; i++)
        children[i].copy(
            destination.getChild(children[i].getName()), options, Policy.subMonitorFor(monitor, 1));
    } finally {
      monitor.done();
    }
  }

