  /**
   * Deletes the given file recursively, adding failure info to the provided status object. The
   * filePath is passed as a parameter to optimize java.io.File object creation.
   */
  private boolean internalDelete(
      File target, String pathToDelete, MultiStatus status, IProgressMonitor monitor) {
    //first try to delete - this should succeed for files and symbolic links to directories
    if (monitor.isCanceled()) {
      throw new OperationCanceledException();
    }
    if (target.delete() || !target.exists()) return true;
    if (target.isDirectory()) {
      monitor.subTask(NLS.bind(Messages.deleting, target));
      String[] list = target.list();
      if (list == null) list = EMPTY_STRING_ARRAY;
      int parentLength = pathToDelete.length();
      boolean failedRecursive = false;
      for (int i = 0, imax = list.length; i < imax; i++) {
        if (monitor.isCanceled()) {
          throw new OperationCanceledException();
        }
        //optimized creation of child path object
        StringBuffer childBuffer = new StringBuffer(parentLength + list[i].length() + 1);
        childBuffer.append(pathToDelete);
        childBuffer.append(File.separatorChar);
        childBuffer.append(list[i]);
        String childName = childBuffer.toString();
        // try best effort on all children so put logical OR at end
        failedRecursive =
            !internalDelete(new File(childName), childName, status, monitor) || failedRecursive;
        monitor.worked(1);
      }
      try {
        // don't try to delete the root if one of the children failed
        if (!failedRecursive && target.delete()) return true;
      } catch (Exception e) {
        // we caught a runtime exception so log it
        String message = NLS.bind(Messages.couldnotDelete, target.getAbsolutePath());
        status.add(new Status(IStatus.ERROR, Policy.PI_FILE_SYSTEM, EFS.ERROR_DELETE, message, e));
        return false;
      }
    }
    //if we got this far, we failed
    String message = null;
    if (fetchInfo().getAttribute(EFS.ATTRIBUTE_READ_ONLY))
      message = NLS.bind(Messages.couldnotDeleteReadOnly, target.getAbsolutePath());
    else message = NLS.bind(Messages.couldnotDelete, target.getAbsolutePath());
    status.add(new Status(IStatus.ERROR, Policy.PI_FILE_SYSTEM, EFS.ERROR_DELETE, message, null));
    return false;
  }

