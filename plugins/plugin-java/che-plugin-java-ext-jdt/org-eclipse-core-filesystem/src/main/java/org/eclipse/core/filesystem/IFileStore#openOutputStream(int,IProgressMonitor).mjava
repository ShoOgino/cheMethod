  /**
   * Returns an open output stream on the contents of this file. The number of concurrently open
   * streams depends on implementation and can be limited. The caller is responsible for closing the
   * provided stream when it is no longer needed. This file need not exist in the underlying file
   * system at the time this method is called.
   *
   * <p>The returned stream is not guaranteed to be buffered efficiently. When writing large blocks
   * of data to the stream, a <code>BufferedOutputStream</code> wrapper should be used, or some
   * other form of content buffering.
   *
   * <p>It depends on the implementation how the limit of concurrently opened streams is handled.
   * <code>CoreException</code> may be thrown, when the limit is exceeded.
   *
   * <p>The {@link EFS#APPEND} update flag controls where output is written to the file. If this
   * flag is specified, content written to the stream will be appended to the end of the file. If
   * this flag is not specified, the contents of the existing file, if any, is truncated to zero and
   * the new output will be written from the start of the file.
   *
   * @param options bit-wise or of option flag constants ( {@link EFS#APPEND}).
   * @param monitor a progress monitor, or <code>null</code> if progress reporting and cancellation
   *     are not desired
   * @return An output stream on the contents of this file.
   * @exception CoreException if this method fails. Reasons include:
   *     <ul>
   *       <li>This store represents a directory.
   *       <li>The parent of this store does not exist.
   *       <li>The limit of concurrently opened streams has been exceeded.
   *     </ul>
   */
  public OutputStream openOutputStream(int options, IProgressMonitor monitor) throws CoreException;

