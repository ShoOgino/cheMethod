  /**
   * Imports the specified file system object into the workspace. If the import fails, adds a status
   * object to the list to be returned by <code>getResult</code>.
   *
   * @param fileObject the file system object to be imported
   * @param policy determines how the file object is imported
   */
  void importFile(Object fileObject, int policy) {
    IContainer containerResource;
    try {
      containerResource = getDestinationContainerFor(fileObject);
    } catch (CoreException e) {
      IStatus coreStatus = e.getStatus();
      String newMessage =
          NLS.bind(
              "DataTransferMessages.ImportOperation_coreImportError",
              fileObject,
              coreStatus.getMessage());
      IStatus status =
          new Status(
              coreStatus.getSeverity(),
              coreStatus.getPlugin(),
              coreStatus.getCode(),
              newMessage,
              null);
      errorTable.add(status);
      return;
    }

    String fileObjectPath = provider.getFullPath(fileObject);
    monitor.subTask(fileObjectPath);
    IFile targetResource = containerResource.getFile(new Path(provider.getLabel(fileObject)));
    monitor.worked(1);

    if (rejectedFiles.contains(targetResource.getFullPath())) {
      return;
    }

    // ensure that the source and target are not the same
    IPath targetPath = targetResource.getLocation();
    // Use Files for comparison to avoid platform specific case issues
    if (targetPath != null && (targetPath.toFile().equals(new File(fileObjectPath)))) {
      errorTable.add(
          new Status(
              IStatus.ERROR,
              PlatformUI.PLUGIN_ID,
              0,
              NLS.bind(
                  "DataTransferMessages.ImportOperation_targetSameAsSourceError", fileObjectPath),
              null));
      return;
    }

    InputStream contentStream = provider.getContents(fileObject);
    if (contentStream == null) {
      errorTable.add(
          new Status(
              IStatus.ERROR,
              PlatformUI.PLUGIN_ID,
              0,
              NLS.bind("DataTransferMessages.ImportOperation_openStreamError", fileObjectPath),
              null));
      return;
    }

    try {
      if (createVirtualFolder || createLinks || createLinkFilesOnly) {
        if (targetResource.exists()) targetResource.delete(true, null);
        targetResource.createLink(
            createRelativePath(new Path(provider.getFullPath(fileObject)), targetResource),
            0,
            null);
      } else {
        if (targetResource.exists()) {
          if (targetResource.isLinked()) {
            targetResource.delete(true, null);
            targetResource.create(contentStream, false, null);
          } else targetResource.setContents(contentStream, IResource.KEEP_HISTORY, null);
        } else targetResource.create(contentStream, false, null);
      }
      setResourceAttributes(targetResource, fileObject);

      //            if (provider instanceof TarLeveledStructureProvider) {
      //            	try {
      //            		targetResource.setResourceAttributes(((TarLeveledStructureProvider)
      // provider).getResourceAttributes(fileObject));
      //            	} catch (CoreException e) {
      //            		errorTable.add(e.getStatus());
      //            	}
      //            }
    } catch (CoreException e) {
      errorTable.add(e.getStatus());
    } finally {
      try {
        contentStream.close();
      } catch (IOException e) {
        errorTable.add(
            new Status(
                IStatus.ERROR,
                PlatformUI.PLUGIN_ID,
                0,
                NLS.bind("DataTransferMessages.ImportOperation_closeStreamError", fileObjectPath),
                e));
      }
    }
  }

