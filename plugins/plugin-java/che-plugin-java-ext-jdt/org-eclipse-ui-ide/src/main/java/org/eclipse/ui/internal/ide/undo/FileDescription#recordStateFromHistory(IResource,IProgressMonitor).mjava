  /*
   * (non-Javadoc)
   *
   * @see org.eclipse.ui.internal.ide.undo.ResourceDescription#recordStateFromHistory(org.eclipse.core.resources.IResource,
   *      org.eclipse.core.runtime.IProgressMonitor)
   */
  public void recordStateFromHistory(IResource resource, IProgressMonitor monitor)
      throws CoreException {
    Assert.isLegal(resource.getType() == IResource.FILE);

    if (location != null) {
      // file is linked, no need to record any history
      return;
    }
    IFileState[] states = ((IFile) resource).getHistory(monitor);
    if (states.length > 0) {
      final IFileState state = getMatchingFileState(states);
      this.fileContentDescription =
          new IFileContentDescription() {
            /*
             * (non-Javadoc)
             *
             * @see org.eclipse.ui.internal.ide.undo.IFileContentDescription#exists()
             */
            public boolean exists() {
              return state.exists();
            }

            /*
             * (non-Javadoc)
             *
             * @see org.eclipse.ui.internal.ide.undo.IFileContentDescription#getContents()
             */
            public InputStream getContents() throws CoreException {
              return state.getContents();
            }

            /*
             * (non-Javadoc)
             *
             * @see org.eclipse.ui.internal.ide.undo.IFileContentDescription#getCharset()
             */
            public String getCharset() throws CoreException {
              return state.getCharset();
            }
          };
    }
  }

