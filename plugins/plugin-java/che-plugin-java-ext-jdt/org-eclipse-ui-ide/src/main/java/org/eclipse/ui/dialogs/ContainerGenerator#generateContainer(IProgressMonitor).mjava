  /**
   * Ensures that this generator's container resource exists. Creates any missing resource
   * containers along the path; does nothing if the container resource already exists.
   *
   * <p>Note: This method should be called within a workspace modify operation since it may create
   * resources.
   *
   * @param monitor a progress monitor
   * @return the container resource
   * @exception CoreException if the operation fails
   * @exception OperationCanceledException if the operation is canceled
   */
  public IContainer generateContainer(IProgressMonitor monitor) throws CoreException {
    ResourcesPlugin.getWorkspace()
        .run(
            new IWorkspaceRunnable() {
              public void run(IProgressMonitor monitor) throws CoreException {
                monitor.beginTask(
                    "IDEWorkbenchMessages.ContainerGenerator_progressMessage",
                    1000 * containerFullPath.segmentCount());
                if (container != null) {
                  return;
                }

                // Does the container exist already?
                IWorkspaceRoot root = getWorkspaceRoot();
                container = (IContainer) root.findMember(containerFullPath);
                if (container != null) {
                  return;
                }

                // Create the container for the given path
                container = root;
                for (int i = 0; i < containerFullPath.segmentCount(); i++) {
                  String currentSegment = containerFullPath.segment(i);
                  IResource resource = container.findMember(currentSegment);
                  if (resource != null) {
                    if (resource.getType() == IResource.FILE) {
                      String msg =
                          NLS.bind(
                              "IDEWorkbenchMessages.ContainerGenerator_pathOccupied",
                              resource.getFullPath().makeRelative());
                      throw new CoreException(
                          new Status(
                              IStatus.ERROR, "IDEWorkbenchPlugin.IDE_WORKBENCH", 1, msg, null));
                    }
                    container = (IContainer) resource;
                    monitor.worked(1000);
                  } else {
                    if (i == 0) {
                      IProject projectHandle = createProjectHandle(root, currentSegment);
                      container =
                          createProject(projectHandle, new SubProgressMonitor(monitor, 1000));
                    } else {
                      IFolder folderHandle = createFolderHandle(container, currentSegment);
                      container = createFolder(folderHandle, new SubProgressMonitor(monitor, 1000));
                    }
                  }
                }
              }
            },
            null,
            IResource.NONE,
            monitor);
    return container;
  }

