  /*
   * (non-Javadoc)
   *
   * @see org.eclipse.ui.internal.ide.undo.ResourceDescription#createExistentResourceFromHandle(org.eclipse.core.resources.IResource,
   *      org.eclipse.core.runtime.IProgressMonitor)
   */
  public void createExistentResourceFromHandle(IResource resource, IProgressMonitor monitor)
      throws CoreException {

    Assert.isLegal(resource instanceof IFile);
    if (resource.exists()) {
      return;
    }
    IFile fileHandle = (IFile) resource;
    monitor.beginTask("", 200); // $NON-NLS-1$
    monitor.setTaskName(UndoMessages.FileDescription_NewFileProgress);
    try {
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
      if (location != null) {
        fileHandle.createLink(
            location, IResource.ALLOW_MISSING_LOCAL, new SubProgressMonitor(monitor, 200));
      } else {
        InputStream contents =
            new ByteArrayInputStream(
                UndoMessages.FileDescription_ContentsCouldNotBeRestored.getBytes());
        // Retrieve the contents from the file content
        // description. Other file state attributes, such as timestamps,
        // have already been retrieved from the original IResource
        // object and are restored in #restoreResourceAttributes
        if (fileContentDescription != null && fileContentDescription.exists()) {
          contents = fileContentDescription.getContents();
        }
        fileHandle.create(contents, false, new SubProgressMonitor(monitor, 100));
        fileHandle.setCharset(charset, new SubProgressMonitor(monitor, 100));
      }
      if (monitor.isCanceled()) {
        throw new OperationCanceledException();
      }
    } catch (CoreException e) {
      if (e.getStatus().getCode() == IResourceStatus.PATH_OCCUPIED) {
        fileHandle.refreshLocal(IResource.DEPTH_ZERO, null);
      } else {
        throw e;
      }
    } finally {
      monitor.done();
    }
  }

