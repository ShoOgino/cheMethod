  /**
   * Creates a new operation that imports specific file system objects. In this usage context, the
   * specified source file system object is used by the operation solely to determine the
   * destination container structure of the file system objects being imported.
   *
   * <p>The <code>source</code> parameter represents the root file system object to import. Valid
   * types for this parameter are determined by the supplied <code>IImportStructureProvider</code>.
   * The contents of the source which are to be imported are specified in the <code>filesToImport
   * </code> parameter.
   *
   * <p>The <code>provider</code> parameter allows this operation to deal with the source object in
   * an abstract way. This operation calls methods on the provider and the provider in turn calls
   * specific methods on the source object.
   *
   * <p>The <code>filesToImport</code> parameter specifies what contents of the root file system
   * object are to be imported.
   *
   * <p>The default import behavior is to recreate the complete container structure for the file
   * system objects in their destination. If <code>setCreateContainerStructure</code> is set to
   * <code>false</code>, then the container structure created for each of the file system objects is
   * relative to the supplied root file system object.
   *
   * @param containerPath the full path of the destination container within the workspace
   * @param source the root file system object to import from
   * @param provider the file system structure provider to use
   * @param overwriteImplementor the overwrite strategy to use
   * @param filesToImport the list of file system objects to be imported (element type: <code>Object
   *     </code>)
   */
  public ImportOperation(
      IPath containerPath,
      Object source,
      IImportStructureProvider provider,
      IOverwriteQuery overwriteImplementor,
      List filesToImport) {
    this(containerPath, source, provider, overwriteImplementor);
    setFilesToImport(filesToImport);
  }

