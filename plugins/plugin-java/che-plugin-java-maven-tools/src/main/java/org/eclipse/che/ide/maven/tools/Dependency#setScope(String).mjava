    /**
     * Sets the scope of the dependency:
     * <ul>
     * <li>compile</li>
     * <li>runtime</li>
     * <li>test</li>
     * <li>system</li>
     * <li>provided</li>
     * </ul>
     * Used to calculate the various classpath used for compilation, testing, and so on.
     * It also assists in determining which artifacts to include in a distribution of this project.
     * For more information, see
     * <a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html">the dependency mechanism</a>.
     * <p/>
     * If {@code scope} is {@code null}  and this dependency instance is associated with
     * xml element then {@code scope} will be removed from model as well as from xml.
     *
     * @param scope
     *         new dependency scope
     * @return this dependency instance
     */
    public Dependency setScope(String scope) {
        this.scope = scope;
        if (!isNew()) {
            if (scope == null) {
                dependencyElement.removeChild("scope");
            } else if (dependencyElement.hasSingleChild("scope")) {
                dependencyElement.getSingleChild("scope").setText(scope);
            } else {
                dependencyElement.appendChild(createElement("scope", scope));
            }
        }
        return this;
    }

