    /**
     * Sets the type of dependency.
     * <p/>
     * This defaults to <code>jar</code>.
     * While it usually represents the extension on
     * the filename of the dependency,
     * that is not always the case. A type can be
     * mapped to a different
     * extension and a classifier.
     * The type often corresponds to the packaging
     * used, though this is also
     * not always the case.
     * Some examples are {@code jar, war, ejb-client}.
     * New types can be defined by plugins that set
     * {@code extensions} to {@code true}, so
     * this is not a complete list.
     * <p/>
     * If {@code type} is {@code null}  and this dependency instance is associated with
     * xml element then {@code type} will be removed from model as well as from xml.
     *
     * @param type
     *         new dependency type
     * @return this dependency instance
     */
    public Dependency setType(String type) {
        this.type = type;
        if (!isNew()) {
            if (type == null) {
                dependencyElement.removeChild("type");
            } else if (dependencyElement.hasSingleChild("type")) {
                dependencyElement.getSingleChild("type").setText(type);
            } else {
                dependencyElement.appendChild(createElement("type", type));
            }
        }
        return this;
    }

