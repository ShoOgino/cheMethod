    @Test
    public void onLoadRepoClickedWhenAuthorizeIsFailed() throws Exception {
        final Throwable exception = mock(UnauthorizedException.class);

        presenter.onLoadRepoClicked();

        verify(gitHubClientService).getAllRepositories(asyncRequestCallbackRepoListCaptor.capture());
        AsyncRequestCallback<Map<String, List<GitHubRepository>>> asyncRequestCallback = asyncRequestCallbackRepoListCaptor.getValue();
        GwtReflectionUtils.callOnFailure(asyncRequestCallback, exception);

        verify(gitHubAuthenticator).authorize(asyncCallbackCaptor.capture());
        AsyncCallback<OAuthStatus> asyncCallback= asyncCallbackCaptor.getValue();
        asyncCallback.onFailure(exception);

        verify(view, times(2)).setLoaderVisibility(eq(true));
        verify(view, times(2)).setInputsEnableState(eq(false));
        verify(view, times(2)).setInputsEnableState(eq(true));
        verify(gitHubClientService).getAllRepositories(Matchers.<AsyncRequestCallback<Map<String, List<GitHubRepository>>>>anyObject());
        verify(view, never()).setAccountNames((Set<String>)anyObject());
        verify(view, never()).showGithubPanel();
        verify(view, never()).setRepositories(Matchers.<List<ProjectData>>anyObject());
    }

