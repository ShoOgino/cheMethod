    @Test
    public void onLoadRepoClickedWhenAuthorizeIsSuccessful() throws Exception {
        final Throwable exception = mock(UnauthorizedException.class);
        String userId = "userId";
        CurrentUser user = mock(CurrentUser.class);
        ProfileDescriptor profile = mock(ProfileDescriptor.class);

        when(appContext.getCurrentUser()).thenReturn(user);
        when(user.getProfile()).thenReturn(profile);
        when(profile.getId()).thenReturn(userId);

        presenter.onLoadRepoClicked();

        verify(gitHubClientService).getAllRepositories(asyncRequestCallbackRepoListCaptor.capture());
        AsyncRequestCallback<Map<String, List<GitHubRepository>>> asyncRequestCallback = asyncRequestCallbackRepoListCaptor.getValue();
        GwtReflectionUtils.callOnFailure(asyncRequestCallback, exception);

        verify(gitHubAuthenticator).authorize(anyString(), asyncCallbackCaptor.capture());
        AsyncCallback<OAuthStatus> asyncCallback= asyncCallbackCaptor.getValue();
        asyncCallback.onSuccess(null);

        verify(view, times(3)).setLoaderVisibility(eq(true));
        verify(view, times(3)).setInputsEnableState(eq(false));
        verify(view, times(2)).setInputsEnableState(eq(true));
        verify(gitHubClientService, times(2)).getAllRepositories(Matchers.<AsyncRequestCallback<Map<String, List<GitHubRepository>>>>anyObject());
    }

