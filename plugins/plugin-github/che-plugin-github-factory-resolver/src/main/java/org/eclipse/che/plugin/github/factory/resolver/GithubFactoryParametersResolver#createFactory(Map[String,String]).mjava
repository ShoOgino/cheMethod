  /**
   * Create factory object based on provided parameters
   *
   * @param factoryParameters map containing factory data parameters provided through URL
   * @throws BadRequestException when data are invalid
   */
  @Override
  public FactoryDto createFactory(@NotNull final Map<String, String> factoryParameters)
      throws BadRequestException, ServerException {

    // no need to check null value of url parameter as accept() method has performed the check
    final GithubUrl githubUrl = githubUrlParser.parse(factoryParameters.get(URL_PARAMETER_NAME));

    // create factory from the following location if location exists, else create default factory
    FactoryDto factory =
        urlFactoryBuilder
            .createFactoryFromDevfile(
                githubUrl.devfileFileLocation(),
                fileName -> urlFetcher.fetch(githubUrl.rawFileLocation(fileName)))
            .orElseGet(
                () ->
                    urlFactoryBuilder
                        .createFactoryFromJson(githubUrl.factoryFileLocation())
                        .orElseGet(() -> newDto(FactoryDto.class).withV(CURRENT_VERSION)));
    // add workspace configuration if not defined
    if (factory.getWorkspace() == null) {
      factory.setWorkspace(
          urlFactoryBuilder.buildDefaultWorkspaceConfig(githubUrl.getRepository()));
    }

    // apply merging operation from existing and computed settings if needed
    return projectConfigDtoMerger.merge(
        factory,
        () -> {
          // Compute project configuration
          return newDto(ProjectConfigDto.class)
              .withSource(githubSourceStorageBuilder.build(githubUrl))
              .withName(githubUrl.getRepository())
              .withPath("/".concat(githubUrl.getRepository()));
        });
  }

