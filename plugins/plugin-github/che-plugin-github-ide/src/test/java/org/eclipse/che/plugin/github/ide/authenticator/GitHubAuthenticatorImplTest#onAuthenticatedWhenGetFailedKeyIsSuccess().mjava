    @Test
    public void onAuthenticatedWhenGetFailedKeyIsSuccess() throws Exception {
        String userId = "userId";
        SshPairDto pair = mock(SshPairDto.class);
        List<SshPairDto> pairs = new ArrayList<>();
        pairs.add(pair);
        OAuthStatus authStatus = mock(OAuthStatus.class);
        SshKeyUploader keyUploader = mock(SshKeyUploader.class);

        CurrentUser user = mock(CurrentUser.class);
        MessageDialog messageDialog = mock(MessageDialog.class);
        when(view.isGenerateKeysSelected()).thenReturn(true);
        when(registry.getUploader(GITHUB_HOST)).thenReturn(keyUploader);

        when(appContext.getCurrentUser()).thenReturn(user);
        when(user.getId()).thenReturn(userId);
        when(dialogFactory.createMessageDialog(anyString(), anyString(), Matchers.<ConfirmCallback>anyObject())).thenReturn(messageDialog);
        when(pair.getName()).thenReturn(GITHUB_HOST);
        when(pair.getService()).thenReturn(SshKeyManagerPresenter.VCS_SSH_SERVICE);

        gitHubAuthenticator.authenticate(null, getCallBack());
        gitHubAuthenticator.onAuthenticated(authStatus);

        verify(keyUploader).uploadKey(eq(userId), generateKeyCallbackCaptor.capture());
        AsyncCallback<Void> generateKeyCallback = generateKeyCallbackCaptor.getValue();
        generateKeyCallback.onFailure(new Exception(""));

        verify(sshPairDTOsPromise).then(operationSshPairDTOsCapture.capture());
        operationSshPairDTOsCapture.getValue().apply(pairs);

        verify(view).isGenerateKeysSelected();
        verify(registry).getUploader(eq(GITHUB_HOST));
        verify(appContext).getCurrentUser();
        verify(dialogFactory).createMessageDialog(anyString(), anyString(), Matchers.<ConfirmCallback>anyObject());
        verify(messageDialog).show();
        verify(sshServiceClient).getPairs(eq(SshKeyManagerPresenter.VCS_SSH_SERVICE));
        verify(sshServiceClient).deletePair(eq(SshKeyManagerPresenter.VCS_SSH_SERVICE), eq(GITHUB_HOST));
    }

