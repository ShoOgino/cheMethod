  @Test
  public void onLoadRepoClickedWhenAuthorizeIsFailed() throws Exception {
    String userId = "userId";
    CurrentUser user = mock(CurrentUser.class);

    when(appContext.getCurrentUser()).thenReturn(user);
    when(user.getId()).thenReturn(userId);

    final Throwable exception = mock(UnauthorizedException.class);
    doAnswer(
            new Answer() {
              @Override
              public Void answer(InvocationOnMock invocation) throws Throwable {
                presenter.onFailRequest(promiseError);
                return null;
              }
            })
        .when(presenter)
        .doRequest(nullable(Promise.class), nullable(Promise.class), nullable(Promise.class));
    doReturn(exception).when(promiseError).getCause();

    presenter.onLoadRepoClicked();

    verify(gitHubClientService).getRepositoriesList();
    verify(gitHubClientService).getUserInfo();
    verify(gitHubClientService).getOrganizations();

    verify(gitHubAuthenticator).authenticate(anyString(), asyncCallbackCaptor.capture());
    AsyncCallback<OAuthStatus> asyncCallback = asyncCallbackCaptor.getValue();
    asyncCallback.onFailure(exception);

    verify(view, times(2)).setLoaderVisibility(eq(true));
    verify(view, times(2)).setInputsEnableState(eq(false));
    verify(view, times(2)).setInputsEnableState(eq(true));
    verify(view, never()).setAccountNames((Set<String>) anyObject());
    verify(view, never()).showGithubPanel();
    verify(view, never())
        .setRepositories(org.mockito.ArgumentMatchers.<List<ProjectData>>anyObject());
  }

