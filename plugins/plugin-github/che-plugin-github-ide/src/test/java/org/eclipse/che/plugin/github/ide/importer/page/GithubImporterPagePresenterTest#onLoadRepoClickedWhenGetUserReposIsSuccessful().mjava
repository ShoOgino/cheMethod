  @Test
  public void onLoadRepoClickedWhenGetUserReposIsSuccessful() throws Exception {
    doAnswer(
            new Answer() {
              @Override
              public Void answer(InvocationOnMock invocation) throws Throwable {
                presenter.onSuccessRequest(jsArrayMixed);
                return null;
              }
            })
        .when(presenter)
        .doRequest(nullable(Promise.class), nullable(Promise.class), nullable(Promise.class));
    when(view.getAccountName()).thenReturn("AccountName");

    presenter.onLoadRepoClicked();

    verify(gitHubClientService).getRepositoriesList();
    verify(gitHubClientService).getUserInfo();
    verify(gitHubClientService).getOrganizations();

    verify(view).setLoaderVisibility(eq(true));
    verify(view).setInputsEnableState(eq(false));
    verify(view).setLoaderVisibility(eq(false));
    verify(view).setInputsEnableState(eq(true));
    verify(view).setAccountNames(Matchers.<Set>anyObject());
    verify(view, times(2)).showGithubPanel();
    verify(view).setRepositories(Matchers.<List<ProjectData>>anyObject());
    verify(view).reset();
  }

