    /**
     * Get all pull requests for given owner:repository
     *
     * @param owner
     *         the username of the owner.
     * @param repository
     *         the repository name.
     * @param callback
     *         callback called when operation is done.
     */
    private void getPullRequests(@NotNull final String owner,
                                 @NotNull final String repository,
                                 @NotNull final AsyncCallback<List<PullRequest>> callback) {

        gitHubClientService.getPullRequests(owner, repository, new AsyncRequestCallback<GitHubPullRequestList>(
                dtoUnmarshallerFactory.newUnmarshaller(GitHubPullRequestList.class)) {
            @Override
            protected void onSuccess(final GitHubPullRequestList result) {
                final List<PullRequest> pullRequests = new ArrayList<>();
                for (final GitHubPullRequest oneGitHubPullRequest : result.getPullRequests()) {
                    pullRequests.add(valueOf(oneGitHubPullRequest));
                }
                callback.onSuccess(pullRequests);
            }

            @Override
            protected void onFailure(final Throwable exception) {
                callback.onFailure(exception);
            }
        });
    }

