    @Override
    public Promise<Repository> getUserFork(final String user, final String owner, final String repository) {
        return getForks(owner, repository).thenPromise(new Function<List<Repository>, Promise<Repository>>() {
            @Override
            public Promise<Repository> apply(List<Repository> repositories) throws FunctionException {
                final Repository userFork = getUserFork(user, repositories);
                if (userFork != null) {
                    return Promises.resolve(userFork);
                } else {
                    return Promises.reject(JsPromiseError.create(new NoUserForkException(user)));
                }
            }
        });
    }

