    /**
     * Returns the forks of the given repository for the given owner.
     *
     * @param owner
     *         the repository owner.
     * @param repository
     *         the repository name.
     * @param callback
     *         callback called when operation is done.
     */
    private void getForks(@NotNull final String owner,
                          @NotNull final String repository,
                          @NotNull final AsyncCallback<List<Repository>> callback) {

        gitHubClientService.getForks(owner, repository, new AsyncRequestCallback<GitHubRepositoryList>(
                dtoUnmarshallerFactory.newUnmarshaller(GitHubRepositoryList.class)) {
            @Override
            protected void onSuccess(final GitHubRepositoryList gitHubRepositoryList) {
                final List<Repository> repositories = new ArrayList<>();
                for (final GitHubRepository oneGitHubRepository : gitHubRepositoryList.getRepositories()) {
                    repositories.add(valueOf(oneGitHubRepository));
                }
                callback.onSuccess(repositories);
            }

            @Override
            protected void onFailure(final Throwable exception) {
                callback.onFailure(exception);
            }
        });
    }

