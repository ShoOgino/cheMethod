  /**
   * A workaround to be able to inform a language server that a file is renamed when it is being
   * renamed through resource management component which does not related to language server client
   * component so under normal circumstances language server would not know that something is being
   * renamed.
   */
  private void addResourceRenameAction() {
    renameItemAction.addCustomAction(
        (oldResource, newResource) -> {
          if (!oldResource.isFile()) {
            return;
          }

          if (!lsRegistry.isLsRegistered(newResource)) {
            return;
          }

          newResource
              .asFile()
              .getContent()
              .then(
                  text -> {
                    DidCloseTextDocumentParams didCloseDto =
                        dtoFactory.createDto(DidCloseTextDocumentParams.class);
                    TextDocumentIdentifier didCloseTDDto =
                        dtoFactory.createDto(TextDocumentIdentifier.class);
                    didCloseTDDto.setUri(oldResource.getLocation().toString());
                    didCloseDto.setTextDocument(didCloseTDDto);
                    client.didClose(didCloseDto);

                    DidOpenTextDocumentParams didOpenDto =
                        dtoFactory.createDto(DidOpenTextDocumentParams.class);
                    TextDocumentItem didOpenTDDto = dtoFactory.createDto(TextDocumentItem.class);
                    didOpenTDDto.setUri(newResource.getLocation().toString());
                    didOpenTDDto.setLanguageId(
                        lsRegistry.getLanguageFilter(newResource.asFile()).getLanguageId());
                    didOpenTDDto.setText(text);
                    didOpenTDDto.setVersion(INITIAL_DOCUMENT_VERSION);
                    didOpenDto.setTextDocument(didOpenTDDto);
                    client.didOpen(didOpenDto);
                  });
        });
  }

