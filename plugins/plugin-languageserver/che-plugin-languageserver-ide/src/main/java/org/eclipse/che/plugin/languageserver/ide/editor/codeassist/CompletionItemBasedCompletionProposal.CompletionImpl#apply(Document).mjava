    @Override
    public void apply(Document document) {
      List<TextEdit> edits = new ArrayList<>();
      TextPosition cursorPosition = document.getCursorPosition();
      if (completionItem.getTextEdit() != null) {
        edits.add(adjustForOffset(completionItem.getTextEdit(), cursorPosition, offset));
      } else if (completionItem.getInsertText() == null) {
        edits.add(
            new TextEdit(
                newRange(
                    cursorPosition.getLine(),
                    cursorPosition.getCharacter() - currentWord.length(),
                    cursorPosition.getLine(),
                    cursorPosition.getCharacter()),
                completionItem.getLabel()));
      } else {
        edits.add(
            new TextEdit(
                newRange(
                    cursorPosition.getLine(),
                    cursorPosition.getCharacter() - currentWord.length(),
                    cursorPosition.getLine(),
                    cursorPosition.getCharacter()),
                completionItem.getInsertText()));
      }
      if (completionItem.getAdditionalTextEdits() != null) {
        completionItem
            .getAdditionalTextEdits()
            .forEach(e -> edits.add(adjustForOffset(e, cursorPosition, offset)));
      }
      TextEdit firstEdit = edits.get(0);
      if (completionItem.getInsertTextFormat() == InsertTextFormat.Snippet) {
        Position startPos = firstEdit.getRange().getStart();
        TextPosition startTextPosition = toTextPosition(startPos);
        int startOffset = document.getIndexFromPosition(startTextPosition);
        Pair<String, LinkedModel> resolved =
            new SnippetResolver(new DocumentVariableResolver(document, startTextPosition))
                .resolve(firstEdit.getNewText(), editor, startOffset);
        firstEdit.setNewText(resolved.first);
        if (resolved.second != null) {
          ApplyWorkspaceEditAction.applyTextEdits(document, edits);
          editor.getLinkedMode().enterLinkedMode(resolved.second);
          lastSelection = null;
        } else {
          lastSelection = computeLastSelection(document, firstEdit, edits);
          ApplyWorkspaceEditAction.applyTextEdits(document, edits);
        }
      } else {
        lastSelection = computeLastSelection(document, firstEdit, edits);
        ApplyWorkspaceEditAction.applyTextEdits(document, edits);
      }
    }

