    @Override
    public void syncTextDocument(DocumentChangeEvent event, int version) {
        Document document = event.getDocument().getDocument();
        TextPosition startPosition = document.getPositionFromIndex(event.getOffset());
        TextPosition endPosition;
        if (event.getRemoveCharCount() != 0) {
            endPosition = new TextPosition(startPosition.getLine(), startPosition.getCharacter() + event.getRemoveCharCount());
        } else {
            endPosition = new TextPosition(startPosition.getLine(), startPosition.getCharacter());
        }

        DidChangeTextDocumentParams changeDTO = dtoFactory.createDto(DidChangeTextDocumentParams.class);
        String uri = document.getFile().getLocation().toString();
        changeDTO.setUri(uri);
        VersionedTextDocumentIdentifier versionedDocId = dtoFactory.createDto(VersionedTextDocumentIdentifier.class);
        versionedDocId.setUri(uri);
        versionedDocId.setVersion(version);
        changeDTO.setTextDocument(versionedDocId);

        Range range = dtoFactory.createDto(Range.class);
        Position start = dtoFactory.createDto(Position.class);
        start.setLine(startPosition.getLine());
        start.setCharacter(startPosition.getCharacter());
        Position end = dtoFactory.createDto(Position.class);
        end.setLine(endPosition.getLine());
        end.setCharacter(endPosition.getCharacter());
        range.setStart(start);
        range.setEnd(end);

        TextDocumentContentChangeEvent actualChange = dtoFactory.createDto(TextDocumentContentChangeEvent.class);
        actualChange.setRange(range);
        actualChange.setText(event.getText());

        changeDTO.setContentChanges(Collections.singletonList(actualChange));
        textDocumentService.didChange(changeDTO);
    }

