    @Inject
    public LanguageServerEditorConfiguration(LanguageServerCodeassistProcessorFactory codeAssistProcessor,
                                             Provider<DocumentPositionMap> docPositionMapProvider,
                                             LanguageServerAnnotationModelFactory annotationModelFactory,
                                             LanguageServerReconcileStrategyFactory reconcileStrategyProviderFactory,
                                             LanguageServerFormatterFactory formatterFactory,
                                             LanguageServerSignatureHelpFactory signatureHelpFactory,
                                             @Assisted ServerCapabilities serverCapabilities) {
        codeAssistProcessorFactory = codeAssistProcessor;
        if ((serverCapabilities.isDocumentFormattingProvider() != null && serverCapabilities.isDocumentFormattingProvider()) ||
            (serverCapabilities.isDocumentRangeFormattingProvider() != null && serverCapabilities.isDocumentRangeFormattingProvider()) ||
            serverCapabilities.getDocumentOnTypeFormattingProvider() != null) {
            this.formatter = formatterFactory.create(serverCapabilities);
        }
        this.serverCapabilities = serverCapabilities;
        this.annotationModel = annotationModelFactory.get(docPositionMapProvider.get());

        this.reconciler = new ReconcilerWithAutoSave(DocumentPartitioner.DEFAULT_CONTENT_TYPE, getPartitioner());
        reconciler.addReconcilingStrategy(DocumentPartitioner.DEFAULT_CONTENT_TYPE, reconcileStrategyProviderFactory.build(serverCapabilities));
        if (serverCapabilities.getSignatureHelpProvider() != null) {
            signatureHelpProvider = signatureHelpFactory.create(serverCapabilities);
        } else {
            signatureHelpProvider = null;
        }
    }

