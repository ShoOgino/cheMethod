  private Promise<Void> applyResourceChanges(
      StatusNotification notification, CheWorkspaceEdit edit) {
    List<CheResourceChange> resourceChanges = edit.getCheResourceChanges();
    if (resourceChanges.isEmpty()) {
      return promises.resolve(null);
    }

    ArrayOf<Promise<?>> changesPromises = elemental.util.Collections.arrayOf();

    for (CheResourceChange change : resourceChanges) {
      if (change == null) {
        continue;
      }
      String newUri = change.getNewUri();
      String current = change.getCurrent();

      Path path = Path.valueOf(newUri).makeAbsolute();
      if (isNullOrEmpty(current)) {
        createResource(path, change.getResourceKind(), notification);
        continue;
      }
      Path oldPath = Path.valueOf(current).makeAbsolute();

      Container workspaceRoot = appContext.getWorkspaceRoot();
      changesPromises.push(
          workspaceRoot
              .getResource(oldPath)
              .then(
                  resourceOptional -> {
                    if (!resourceOptional.isPresent()) {
                      return;
                    }

                    Resource resource = resourceOptional.get();

                    editorAgent.saveAll(
                        new AsyncCallback<Void>() {
                          @Override
                          public void onFailure(Throwable throwable) {
                            notification.setContent("Can't save files.");
                          }

                          @Override
                          public void onSuccess(Void aVoid) {
                            final List<EditorPartPresenter> openedEditors =
                                editorAgent.getOpenedEditors();
                            for (EditorPartPresenter editor : openedEditors) {
                              if (resource
                                  .getLocation()
                                  .isPrefixOf(editor.getEditorInput().getFile().getLocation())) {
                                TextDocumentIdentifier documentId =
                                    dtoHelper.createTDI(editor.getEditorInput().getFile());
                                DidCloseTextDocumentParams closeEvent =
                                    dtoFactory.createDto(DidCloseTextDocumentParams.class);
                                closeEvent.setTextDocument(documentId);
                                textDocumentService.didClose(closeEvent);
                              }
                            }
                            moveResource(resource, path, notification);
                          }
                        });
                  }));
    }
    return promises.all2(changesPromises).thenPromise(ignored -> promises.resolve(null));
  }

