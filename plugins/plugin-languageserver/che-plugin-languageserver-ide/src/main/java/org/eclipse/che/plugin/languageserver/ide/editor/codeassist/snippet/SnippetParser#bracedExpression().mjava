  private Expression bracedExpression() {
    int start = pos;
    if (token == Token.DIGIT) {
      // tabstop
      // placeholder
      // choice
      StringBuilder b = new StringBuilder();
      // tabstop
      b.append(value);
      nextToken();
      while (token != Token.EOF && token == Token.DIGIT) {
        b.append(value);
        nextToken();
      }
      if (token == Token.COLON) {
        nextToken();
        Expression value = null;
        if (token == Token.PIPE) {
          value = parseChoice();
        } else {
          value = snippet(t -> t == Token.CLOSE_BRACE);
        }
        return new Placeholder(start, pos, Integer.valueOf(b.toString()), value);
      } else {
        return new Placeholder(start, pos, Integer.valueOf(b.toString()), null);
      }
    } else if (Character.isLetterOrDigit(value) || value == '_') {
      // var
      StringBuilder b = new StringBuilder();
      b.append(value);
      // var
      nextToken();
      while (token != Token.EOF && (Character.isLetterOrDigit(value) || value == '_')) {
        b.append(value);
        nextToken();
      }
      Expression value = null;
      if (token == Token.COLON) {
        nextToken();
        value = snippet(t -> t == Token.CLOSE_BRACE);
      }
      return new Variable(start, pos, b.toString(), value);
    } else {
      throw new RuntimeException("unexpected");
    }
  }

