  private void formatFullDocument(Document document) {
    DocumentFormattingParams params = dtoFactory.createDto(DocumentFormattingParams.class);

    TextDocumentIdentifier identifier = dtoFactory.createDto(TextDocumentIdentifier.class);
    identifier.setUri(document.getFile().getLocation().toString());

    params.setTextDocument(identifier);
    params.setOptions(getFormattingOptions());

    Promise<List<TextEdit>> promise =
        client
            .formatting(params)
            .thenPromise(
                arg -> {
                  for (TextEdit textEdit : arg) {
                    Range range = textEdit.getRange();
                    Position start = range.getStart();
                    Position end = range.getEnd();
                    int startCharacter = start.getCharacter();
                    int startLine = start.getLine();
                    int endCharacter = end.getCharacter();
                    int endLine = end.getLine();

                    if (startCharacter == 0
                        && startLine == 0
                        && endCharacter == 0
                        && endLine == document.getLineCount()) {
                      int newEndLine = document.getLineCount() - 1;
                      int newEndCharacter =
                          document.getTextRangeForLine(newEndLine).getTo().getCharacter();
                      range.setEnd(new Position(newEndLine, newEndCharacter));
                    }
                  }

                  return promiseProvider.resolve(arg);
                });

    handleFormatting(promise, document);
  }

