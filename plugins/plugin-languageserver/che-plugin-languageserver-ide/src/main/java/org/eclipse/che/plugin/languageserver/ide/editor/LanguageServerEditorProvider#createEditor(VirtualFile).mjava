    @Override
    public Promise<EditorPartPresenter> createEditor(VirtualFile file) {
        if (file instanceof File) {
            File resource = (File)file;

            Promise<ExtendedInitializeResult> promise =
                    registry.getOrInitializeServer(resource.getRelatedProject().get().getPath(), resource.getExtension(),
                                                   resource.getLocation().toString());
            return promise.thenPromise(new Function<ExtendedInitializeResult, Promise<EditorPartPresenter>>() {
                @Override
                public Promise<EditorPartPresenter> apply(ExtendedInitializeResult arg) throws FunctionException {
                    if (editorBuilder == null) {
                        Log.debug(AbstractTextEditorProvider.class, "No builder registered for default editor type - giving up.");
                        return Promises.<EditorPartPresenter>resolve(null);
                    }

                    final TextEditor editor = editorBuilder.buildEditor();
                    LanguageServerEditorConfiguration configuration = editorConfigurationFactory.build(editor, arg.getCapabilities());
                    editor.initialize(configuration);
                    return Promises.<EditorPartPresenter>resolve(editor);
                }
            });

        }
        return null;
    }

