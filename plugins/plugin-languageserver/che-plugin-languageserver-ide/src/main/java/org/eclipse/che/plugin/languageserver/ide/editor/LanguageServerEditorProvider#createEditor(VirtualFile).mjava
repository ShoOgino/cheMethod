  @Override
  public Promise<EditorPartPresenter> createEditor(VirtualFile file) {
    if (file instanceof File) {
      File resource = (File) file;

      Promise<ServerCapabilities> promise =
          registry.getOrInitializeServer(resource.getProject().getPath(), file);
      return promise.then(
          new Function<ServerCapabilities, EditorPartPresenter>() {
            @Override
            public EditorPartPresenter apply(ServerCapabilities capabilities)
                throws FunctionException {
              if (editorBuilder == null) {
                Log.debug(
                    AbstractTextEditorProvider.class,
                    "No builder registered for default editor type - giving up.");
                return null;
              }

              final TextEditor editor = editorBuilder.buildEditor();
              TextEditorConfiguration configuration =
                  capabilities == null
                      ? new DefaultTextEditorConfiguration()
                      : editorConfigurationFactory.build(editor, capabilities);
              editor.initialize(configuration);
              return editor;
            }
          });
    }
    return null;
  }

