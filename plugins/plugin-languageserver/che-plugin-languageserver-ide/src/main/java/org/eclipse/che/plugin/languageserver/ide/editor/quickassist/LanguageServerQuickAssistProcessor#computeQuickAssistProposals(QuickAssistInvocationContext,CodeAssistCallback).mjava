    @Override
    public void computeQuickAssistProposals(QuickAssistInvocationContext invocationContext, CodeAssistCallback callback) {
        LinearRange range = invocationContext.getTextEditor().getSelectedLinearRange();
        Document document = invocationContext.getTextEditor().getDocument();
        QueryAnnotationsEvent.QueryCallback annotationCallback = new QueryAnnotationsEvent.QueryCallback() {

            @Override
            public void respond(Map<Annotation, Position> annotations) {
                List<DiagnosticDTO> diagnostics = new ArrayList<>();
                // iteration with range never returns anything; need to filter ourselves.
                // https://github.com/eclipse/che/issues/4338
                annotations.entrySet().stream().filter((e) -> e.getValue().overlapsWith(range.getStartOffset(), range.getLength()))
                                .map(Entry::getKey).map(a -> (DiagnosticAnnotation) a).map(DiagnosticAnnotation::getDiagnostic)
                                .collect(Collectors.toList());

                CodeActionContextDTO context = CodeActionContextDTOImpl.make().withDiagnostics(diagnostics);
                CodeActionParamsDTO params = CodeActionParamsDTOImpl.make().withContext(context);
                params.setTextDocument(TextDocumentIdentifierDTOImpl.make().withUri(document.getFile().getLocation().toString()));

                TextPosition start = document.getPositionFromIndex(range.getStartOffset());
                TextPosition end = document.getPositionFromIndex(range.getStartOffset() + range.getLength());
                PositionDTO rangeStart = toPositionDto(start);
                PositionDTO rangeEnd = toPositionDto(end);
                RangeDTO rangeParam = RangeDTOImpl.make().withStart(rangeStart);
                rangeParam.setEnd(rangeEnd);
                params.setRange(rangeParam);

                Promise<List<CommandDTO>> codeAction = textDocumentService.codeAction(params);
                List<CompletionProposal> proposals = new ArrayList<>();
                codeAction.then((commands) -> {
                    for (CommandDTO command : commands) {
                        Action action = actionManager.getAction(command.getCommand());
                        if (action != null) {
                            proposals.add(new ActionCompletionProposal(command, action));
                        }
                    }
                    ;
                    callback.proposalComputed(proposals);
                });
            }

            private PositionDTO toPositionDto(TextPosition start) {
                PositionDTO rangeStart = PositionDTOImpl.make().withLine(start.getLine());
                rangeStart.setCharacter(start.getCharacter());
                return rangeStart;
            }
        };
        QueryAnnotationsEvent event = new QueryAnnotationsEvent.Builder().withFilter(a -> a instanceof DiagnosticAnnotation)
                        .withCallback(annotationCallback).build();
        document.getDocumentHandle().getDocEventBus().fireEvent(event);
    }

