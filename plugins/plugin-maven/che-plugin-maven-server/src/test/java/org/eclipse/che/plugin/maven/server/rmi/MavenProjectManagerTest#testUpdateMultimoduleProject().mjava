  @Test
  public void testUpdateMultimoduleProject() throws Exception {
    IProject testProject = mock(IProject.class);
    IFile testPom = mock(IFile.class);
    IProject subModuleProject = mock(IProject.class);
    IFile subPom = mock(IFile.class);
    IFile testFile = mock(IFile.class);

    when(project.getFile(MavenConstants.POM_FILE_NAME)).thenReturn(pom);
    when(pom.getLocation())
        .thenReturn(
            new Path(
                MavenProjectManagerTest.class
                    .getResource("/multimoduleProject/pom.xml")
                    .getFile()));
    when(pom.getFullPath()).thenReturn(new Path("/multimoduleProject/pom.xml"));
    when(project.getFullPath()).thenReturn(new Path("/multimoduleProject/"));

    when(testProject.getFile(MavenConstants.POM_FILE_NAME)).thenReturn(testPom);
    when(subModuleProject.getFile(MavenConstants.POM_FILE_NAME)).thenReturn(subPom);

    when(testProject.getFullPath()).thenReturn(new Path("/multimoduleProject/test"));
    when(subModuleProject.getFullPath()).thenReturn(new Path("/multimoduleProject/subModule"));

    when(testPom.getFullPath()).thenReturn(new Path("/multimoduleProject/test/pom.xml"));
    when(subPom.getFullPath()).thenReturn(new Path("/multimoduleProject/subModule/pom.xml"));

    when(testPom.getLocation())
        .thenReturn(
            new Path(
                MavenProjectManagerTest.class
                    .getResource("/multimoduleProject/test/pom.xml")
                    .getFile()));
    when(subPom.getLocation())
        .thenReturn(
            new Path(
                MavenProjectManagerTest.class
                    .getResource("/multimoduleProject/subModule/pom.xml")
                    .getFile()));
    when(workspaceRoot.getProject("/multimoduleProject/test")).thenReturn(testProject);
    when(workspaceRoot.getProject("/multimoduleProject/subModule")).thenReturn(subModuleProject);
    when(workspaceRoot.getFile(any())).thenReturn(testFile);
    when(testFile.exists()).thenReturn(false);

    projectManager.addListener(listener);
    MavenProject mavenProject = new MavenProject(project, workspace);
    mavenProject.read(project, manager);
    MavenKey mavenKey = mavenProject.getMavenKey();
    assertThat(mavenKey).isNotNull();

    projectManager.update(Collections.singletonList(project), true);
    verify(listener).projectUpdated(mapArgument.capture(), any());
  }

