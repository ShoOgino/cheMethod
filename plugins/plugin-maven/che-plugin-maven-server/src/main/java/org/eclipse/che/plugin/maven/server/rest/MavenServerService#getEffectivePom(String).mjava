  /**
   * Returns maven effective pom file.
   *
   * @param projectPath path to the opened pom file
   * @return content of the effective pom
   * @throws ServerException when getting mount point has a problem
   * @throws NotFoundException when current pom file isn't exist
   * @throws ForbiddenException when response code is 403
   */
  @GET
  @Path("effective/pom")
  @Produces(TEXT_XML)
  public String getEffectivePom(@QueryParam("projectpath") String projectPath)
      throws ServerException, NotFoundException, ForbiddenException {
    String projectWsPath = absolutize(projectPath);

    MavenServerWrapper mavenServer =
        wrapperManager.getMavenServer(MavenWrapperManager.ServerType.DOWNLOAD);

    try {
      mavenServer.customize(
          mavenProjectManager.copyWorkspaceCache(), terminal, notifier, false, false);
      String pomWsPath = resolve(projectWsPath, "pom.xml");
      if (!fsManager.existsAsFile(pomWsPath)) {
        throw new NotFoundException("pom.xml doesn't exist");
      }
      return mavenServer.getEffectivePom(fsManager.toIoFile(pomWsPath), emptyList(), emptyList());
    } finally {
      wrapperManager.release(mavenServer);
    }
  }

