    @GET
    @Path("pom/reconsile")
    @Produces("application/json")
    public List<Problem> reconsilePom(@QueryParam("pompath") String pomPath) {
        VirtualFileEntry entry = null;
        List<Problem> result = new ArrayList<>();
        try {
            entry = cheProjectManager.getProjectsRoot().getChild(pomPath);
            if (entry == null) {
                return result;
            }
            Model.readFrom(entry.getVirtualFile());
            org.eclipse.che.api.vfs.Path path = entry.getPath();
            String pomContent = entry.getVirtualFile().getContentAsString();
            MavenProject mavenProject =
                    mavenProjectManager.findMavenProject(ResourcesPlugin.getWorkspace().getRoot().getProject(path.getParent().toString()));
            if (mavenProject != null) {
                List<MavenProjectProblem> problems = mavenProject.getProblems();
                int start = pomContent.indexOf("<project ") + 1;
                int end = start + "<project ".length();
                List<Problem> problemList = problems.stream().map(mavenProjectProblem -> {
                    Problem problem = DtoFactory.newDto(Problem.class);
                    problem.setError(true);
                    problem.setSourceStart(start);
                    problem.setSourceEnd(end);
                    problem.setMessage(mavenProjectProblem.getDescription());
                    return problem;
                }).collect(Collectors.toList());

                List<Problem> missedArtifacts =
                        mavenProject.getDependencies().stream()
                                    .filter(mavenArtifact -> !mavenArtifact.isResolved())
                                    .map(artifact -> {
                                        Problem problem = DtoFactory.newDto(Problem.class);
                                        problem.setError(true);
                                        problem.setSourceStart(start);
                                        problem.setSourceEnd(end);
                                        problem.setMessage("Dependency " + artifact.getDisplayString() + " not found.");
                                        return problem;
                                    }).collect(Collectors.toList());

                result.addAll(missedArtifacts);
                result.addAll(problemList);
            }
        } catch (ServerException | ForbiddenException | IOException e) {
            LOG.error(e.getMessage(), e);
        } catch (XMLTreeException exception) {
            Throwable cause = exception.getCause();
            if (cause != null && cause instanceof SAXParseException) {
                result.add(createProblem(entry, (SAXParseException)cause));
            }
        }
        return result;

    }

