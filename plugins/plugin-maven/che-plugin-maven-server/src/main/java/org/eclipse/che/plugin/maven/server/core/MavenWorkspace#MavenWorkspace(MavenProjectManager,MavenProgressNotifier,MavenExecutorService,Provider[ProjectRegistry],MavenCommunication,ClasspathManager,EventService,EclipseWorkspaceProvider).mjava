    @Inject
    public MavenWorkspace(MavenProjectManager manager,
                          MavenProgressNotifier notifier,
                          MavenExecutorService executorService,
                          Provider<ProjectRegistry> projectRegistryProvider,
                          MavenCommunication communication,
                          ClasspathManager classpathManager,
                          EventService eventService,
                          EclipseWorkspaceProvider workspaceProvider) {
        this.projectRegistryProvider = projectRegistryProvider;
        this.communication = communication;
        this.classpathManager = classpathManager;
        this.manager = manager;
        resolveExecutor = new MavenTaskExecutor(executorService, notifier);
        eventService.subscribe(new EventSubscriber<ProjectDeletedEvent>() {
            @Override
            public void onEvent(ProjectDeletedEvent event) {
                IProject project = workspaceProvider.get().getRoot().getProject(event.getProjectPath());
                manager.delete(Collections.singletonList(project));
            }
        });
        manager.addListener(new MavenProjectListener() {
            @Override
            public void projectResolved(MavenProject project, MavenProjectModifications modifications) {
//                communication.sendUpdateMassage(Collections.emptySet(), Collections.emptyList());
            }

            @Override
            public void projectUpdated(Map<MavenProject, MavenProjectModifications> updated,
                                       List<MavenProject> removed) {
                removeProjects(removed);
                createNewProjects(updated.keySet());

                List<MavenProject> allChangedProjects = new ArrayList<>(updated.keySet().size() + removed.size());
                allChangedProjects.addAll(updated.keySet());
                allChangedProjects.addAll(removed);
                List<MavenProject> needResolve = manager.findDependentProjects(allChangedProjects);
                needResolve.addAll(updated.keySet());

                addResolveProjects(needResolve);

                communication.sendUpdateMassage(updated.keySet(), removed);
            }
        });
    }

