        @Override
        public List<String> getValues(String attributeName) throws ValueStorageException {
            try {
                String value = "";
                final Model model = readModel(projectFolder);
                if (attributeName.equals(ARTIFACT_ID)) {
                    value = model.getArtifactId();
                } else if (attributeName.equals(GROUP_ID)) {
                    value = model.getGroupId();
                } else if (attributeName.equals(PACKAGING)) {
                    final String packaging = model.getPackaging();
                    value = packaging == null ? "" : packaging;
                } else if (attributeName.equals(VERSION)) {
                    value = model.getVersion();
                } else if (attributeName.equals(PARENT_ARTIFACT_ID) && model.getParent() != null) {
                    value = model.getParent().getArtifactId();
                } else if (attributeName.equals(PARENT_GROUP_ID) && model.getParent() != null) {
                    value = model.getParent().getGroupId();
                } else if (attributeName.equals(PARENT_VERSION) && model.getParent() != null) {
                    value = model.getParent().getVersion();
                } else if (attributeName.equals(SOURCE_FOLDER)) {
                    Build build = model.getBuild();
                    if (build != null && build.getSourceDirectory() != null) {
                        value = build.getSourceDirectory();
                    } else {
                        value = DEFAULT_SOURCE_FOLDER;
                    }
                } else if (attributeName.equals(TEST_SOURCE_FOLDER)) {
                    Build build = model.getBuild();
                    if (build != null && build.getTestSourceDirectory() != null) {
                        value = build.getTestSourceDirectory();
                    } else {
                        value = DEFAULT_TEST_SOURCE_FOLDER;
                    }
                } else if (attributeName.equals(RESOURCE_FOLDER)) {
                    Build build = model.getBuild();
                    if (build != null && build.getResources() != null) {
                        return build.getResources().stream().map(Resource::getDirectory).collect(Collectors.toList());
                    } else {
                        return Arrays.asList(DEFAULT_RESOURCES_FOLDER, DEFAULT_TEST_RESOURCES_FOLDER);
                    }
                }

                return Collections.singletonList(value);
            } catch (ServerException | ForbiddenException | IOException e) {
                throwReadException(e);
            } catch (XMLTreeException e) {
                throw new ValueStorageException("Error parsing pom.xml : " + e.getMessage());
            }
            return null;
        }

