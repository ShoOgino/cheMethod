    @Override
    public void generateProject(final FolderEntry baseFolder, Map<String, AttributeValue> attributes, Map<String, String> options)
            throws ForbiddenException, ConflictException, ServerException {

        AttributeValue artifactId = attributes.get(ARTIFACT_ID);
        AttributeValue groupId = attributes.get(GROUP_ID);
        AttributeValue version = attributes.get(VERSION);
        if (groupId == null || artifactId == null || version == null) {
            throw new ServerException("Missed some required attribute (groupId, artifactId or version)");
        }

        String archetypeGroupId = null;
        String archetypeArtifactId = null;
        String archetypeVersion = null;
        String archetypeRepository = null;
        Map<String, String> archetypeProperties = new HashMap<>();
        options.remove("type"); //TODO: remove prop 'type' now it use only for detecting generation strategy
        for (Map.Entry<String, String> entry : options.entrySet()) {
            switch (entry.getKey()) {
                case "archetypeGroupId":
                    archetypeGroupId = entry.getValue();
                    break;
                case "archetypeArtifactId":
                    archetypeArtifactId = entry.getValue();
                    break;
                case "archetypeVersion":
                    archetypeVersion = entry.getValue();
                    break;
                case "archetypeRepository":
                    archetypeRepository = entry.getValue();
                    break;
                default:
                    archetypeProperties.put(entry.getKey(), entry.getValue());
            }
        }

        if (archetypeGroupId == null || archetypeGroupId.isEmpty() ||
            archetypeArtifactId == null || archetypeArtifactId.isEmpty() ||
            archetypeVersion == null || archetypeVersion.isEmpty()) {
            throw new ServerException("Missed some required option (archetypeGroupId, archetypeArtifactId or archetypeVersion)");
        }

        final MavenArchetype archetype = DtoFactory.getInstance().createDto(MavenArchetype.class)
                                                   .withGroupId(archetypeGroupId)
                                                   .withArtifactId(archetypeArtifactId)
                                                   .withVersion(archetypeVersion)
                                                   .withRepository(archetypeRepository)
                                                   .withProperties(archetypeProperties);

        archetypeGenerator.generateFromArchetype(archetype,
                                                 groupId.getList().get(0),
                                                 artifactId.getList().get(0),
                                                 version.getList().get(0));
    }

