    @Override
    protected void configure() {
        newSetBinder(binder(), ValueProviderFactory.class).addBinding().to(MavenValueProviderFactory.class);

        //bind maven project type only if maven installed on dev machine
        if(System.getenv("M2_HOME") != null) {
            newSetBinder(binder(), ProjectTypeDef.class).addBinding().to(MavenProjectType.class);
        }

        Multibinder<ProjectHandler> projectHandlerMultibinder = newSetBinder(binder(), ProjectHandler.class);
        projectHandlerMultibinder.addBinding().to(MavenProjectGenerator.class);
//        projectHandlerMultibinder.addBinding().to(AddMavenModuleHandler.class);
//        projectHandlerMultibinder.addBinding().to(RemoveMavenModuleHandler.class);
        projectHandlerMultibinder.addBinding().to(ProjectBecomeMavenHandler.class);
//        projectHandlerMultibinder.addBinding().to(ProjectHasBecomeMaven.class);
//        projectHandlerMultibinder.addBinding().to(MavenProjectCreatedHandler.class);

        newSetBinder(binder(), GeneratorStrategy.class).addBinding().to(ArchetypeGenerationStrategy.class);

//        Multibinder<VirtualFileFilter> multibinder = newSetBinder(binder(), VirtualFileFilter.class, Names.named("vfs.index_filter"));
//        multibinder.addBinding().to(MavenTargetFilter.class);
//        Multibinder<VirtualFileFilter> multibinder = newSetBinder(binder(), VirtualFileFilter.class, Names.named("vfs.index_filter"));
//        multibinder.addBinding().to(MavenTargetFilter.class);

        bind(MavenTerminal.class).to(MavenTerminalImpl.class).in(Singleton.class);
        bind(MavenProgressNotifier.class).to(MavenServerNotifier.class).in(Singleton.class);

        bind(MavenServerService.class);

        bind(PomChangeListener.class).asEagerSingleton();
    }

