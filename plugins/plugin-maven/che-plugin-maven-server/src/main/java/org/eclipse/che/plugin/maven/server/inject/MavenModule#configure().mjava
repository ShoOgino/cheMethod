  @Override
  protected void configure() {
    newSetBinder(binder(), ValueProviderFactory.class)
        .addBinding()
        .to(MavenValueProviderFactory.class);

    //bind maven project type only if maven installed on dev machine
    if (System.getenv("M2_HOME") != null) {
      newSetBinder(binder(), ProjectTypeDef.class).addBinding().to(MavenProjectType.class);
    }

    Multibinder<ProjectHandler> projectHandlerMultibinder =
        newSetBinder(binder(), ProjectHandler.class);
    projectHandlerMultibinder.addBinding().to(MavenProjectGenerator.class);
    projectHandlerMultibinder.addBinding().to(MavenProjectInitHandler.class);

    Multibinder<GeneratorStrategy> generatorStrategyMultibinder =
        newSetBinder(binder(), GeneratorStrategy.class);
    generatorStrategyMultibinder.addBinding().to(SimpleGeneratorStrategy.class);
    generatorStrategyMultibinder.addBinding().to(ArchetypeGenerationStrategy.class);

    bind(MavenTerminal.class).to(MavenTerminalImpl.class).in(Singleton.class);
    bind(MavenProgressNotifier.class).to(MavenServerNotifier.class).in(Singleton.class);

    bind(MavenServerService.class);
    bind(MavenJsonRpcCommunication.class);
    bind(MavenArchetypeJsonRpcMessenger.class);

    bind(PomChangeListener.class).asEagerSingleton();
    bind(PomModificationDetector.class).asEagerSingleton();
    Multibinder.newSetBinder(binder(), LanguageServerLauncher.class)
        .addBinding()
        .to(MavenLanguageServerLauncher.class)
        .asEagerSingleton();
    ;

    LanguageDescription description = new LanguageDescription();
    description.setLanguageId("pom");
    description.setMimeType("application/pom");
    description.setFileNames(Collections.singletonList("pom.xml"));
    Multibinder.newSetBinder(binder(), LanguageDescription.class)
        .addBinding()
        .toInstance(description);
  }

