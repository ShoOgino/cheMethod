    public void stopAll(boolean wait) {
        List<ProcessInfo> processList;
        synchronized (infoMap) {
            processList = (infoMap.values().stream().filter(info -> info.processHandler != null).collect(Collectors.toList()));
        }

        if (processList.isEmpty()) {
            return;
        }

        ExecutorService executorService = Executors.newSingleThreadExecutor();
        Future<?> future = executorService.submit(() -> {
            for (ProcessInfo processInfo : processList) {
                processInfo.processHandler.destroyProcess();
            }

            if (wait) {
                for (ProcessInfo processInfo : processList) {
                    processInfo.processHandler.waitFor();
                }
            }
        });

        if (wait) {
            try {
                future.get();
            } catch (InterruptedException ignore) {
            } catch (java.util.concurrent.ExecutionException e) {
                LOG.error(e.getMessage(), e);
            }
        }
        executorService.shutdown();
    }

