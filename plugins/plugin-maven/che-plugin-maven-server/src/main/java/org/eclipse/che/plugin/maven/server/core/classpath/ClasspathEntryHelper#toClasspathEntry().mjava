  // Copied from org.eclipse.m2e.jdt.internal.ClasspathEntryDescriptor
  public IClasspathEntry toClasspathEntry() {
    Map<String, String> attributes = new HashMap<String, String>(this.attributes);

    if (artifactKey != null) {
      attributes.put(ClasspathManager.GROUP_ID_ATTRIBUTE, artifactKey.getGroupId());
      attributes.put(ClasspathManager.ARTIFACT_ID_ATTRIBUTE, artifactKey.getArtifactId());
      attributes.put(ClasspathManager.VERSION_ATTRIBUTE, artifactKey.getVersion());
      attributes.put(ClasspathManager.PACKAGING_ATTRIBUTE, artifactKey.getPackaging());
      if (artifactKey.getClassifier() != null) {
        attributes.put(ClasspathManager.CLASSIFIER_ATTRIBUTE, artifactKey.getClassifier());
      }
    }

    IClasspathAttribute[] attributesArray = new IClasspathAttribute[attributes.size()];
    int attributeIndex = 0;
    for (Map.Entry<String, String> attribute : attributes.entrySet()) {
      attributesArray[attributeIndex++] =
          JavaCore.newClasspathAttribute(attribute.getKey(), attribute.getValue());
    }

    IAccessRule[] accessRulesArray = accessRules.toArray(new IAccessRule[accessRules.size()]);
    IClasspathEntry entry;
    switch (kind) {
      case IClasspathEntry.CPE_CONTAINER:
        entry =
            JavaCore.newContainerEntry(
                path, //
                accessRulesArray, //
                attributesArray, //
                exported);
        break;
      case IClasspathEntry.CPE_LIBRARY:
        entry =
            JavaCore.newLibraryEntry(
                path, //
                sourcePath, //
                sourceRootPath, //
                accessRulesArray, //
                attributesArray, //
                exported);
        break;
      case IClasspathEntry.CPE_SOURCE:
        entry =
            JavaCore.newSourceEntry(
                path, //
                getInclusionPatterns(), //
                getExclusionPatterns(), //
                outputLocation, //
                attributesArray);
        break;
      case IClasspathEntry.CPE_PROJECT:
        entry =
            JavaCore.newProjectEntry(
                path, //
                accessRulesArray, //
                combineAccessRules, //
                attributesArray, //
                exported);
        break;
      case IClasspathEntry.CPE_VARIABLE:
        entry =
            JavaCore.newVariableEntry(
                path, //
                sourcePath, //
                sourceRootPath, //
                accessRulesArray, //
                attributesArray, //
                exported);
        break;
      default:
        throw new IllegalArgumentException(
            "Unsupported IClasspathEntry kind=" + kind); // $NON-NLS-1$
    }
    return entry;
  }

