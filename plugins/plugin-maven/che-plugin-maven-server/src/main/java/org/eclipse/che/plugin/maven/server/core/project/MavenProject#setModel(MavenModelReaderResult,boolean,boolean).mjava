    private MavenProjectModifications setModel(MavenModelReaderResult readerResult, boolean clearArtifacts, boolean clearProfiles) {
        Info newInfo = info.clone();
        newInfo.problems = readerResult.getProblems();
        newInfo.activeProfiles = readerResult.getActiveProfiles();
        MavenModel model = readerResult.getMavenModel();
        newInfo.mavenKey = model.getMavenKey();
        if (model.getParent() != null) {
            newInfo.parentKey = model.getParent().getMavenKey();
        }

        newInfo.packaging = model.getPackaging();
        newInfo.name = model.getName();

        newInfo.sources = model.getBuild().getSources();
        newInfo.testSources = model.getBuild().getTestSources();
        newInfo.resources = model.getBuild().getResources();
        newInfo.testResources = model.getBuild().getTestResources();
        newInfo.properties = model.getProperties();
        newInfo.filters = model.getBuild().getFilters();


        Set<MavenRemoteRepository> remoteRepositories = new HashSet<>();
        Set<MavenArtifact> extensions = new HashSet<>();
        Set<MavenArtifact> dependencies = new HashSet<>();
        Set<MavenPlugin> plugins = new HashSet<>();
        Set<MavenKey> unresolvedArtifacts = new HashSet<>();

        if (!clearArtifacts) {
            if (info.remoteRepositories != null) {
                remoteRepositories.addAll(info.remoteRepositories);
            }
            if (info.extensions != null) {
                extensions.addAll(info.extensions);
            }
            if (info.dependencies != null) {
                dependencies.addAll(info.dependencies);
            }
            if (info.plugins != null) {
                plugins.addAll(info.plugins);
            }
            if (info.unresolvedArtifacts != null) {
                unresolvedArtifacts.addAll(info.unresolvedArtifacts);
            }
        }

        remoteRepositories.addAll(model.getRemoteRepositories());
        extensions.addAll(model.getExtensions());
        dependencies.addAll(model.getDependencies());
        plugins.addAll(model.getPlugins());
        unresolvedArtifacts.addAll(readerResult.getUnresolvedArtifacts());

        newInfo.remoteRepositories = new ArrayList<>(remoteRepositories);
        newInfo.extensions = new ArrayList<>(extensions);
        newInfo.dependencies = new ArrayList<>(dependencies);
        newInfo.plugins = new ArrayList<>(plugins);
        newInfo.unresolvedArtifacts = unresolvedArtifacts;

        newInfo.modulesNameToPath = collectModulesNameAndPath(model.getModules());

        Collection<String> newProfiles = collectProfilesIds(model.getProfiles());
        if (clearProfiles || newInfo.profilesIds == null) {
            newInfo.profilesIds = new ArrayList<>(newProfiles);
        }
        else {
            Set<String> mergedProfiles = new HashSet<>(newInfo.profilesIds);
            mergedProfiles.addAll(newProfiles);
            newInfo.profilesIds = new ArrayList<>(mergedProfiles);
        }

        return setInfo(newInfo);
    }

