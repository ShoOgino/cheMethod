  private List<String> getFromMavenProject(MavenProject mavenProject, String attributeName)
      throws ValueStorageException {
    switch (attributeName) {
      case ARTIFACT_ID:
        return singletonList(mavenProject.getMavenKey().getArtifactId());
      case GROUP_ID:
        return singletonList(mavenProject.getMavenKey().getGroupId());
      case PACKAGING:
        String packaging = mavenProject.getPackaging();
        return singletonList(packaging != null ? packaging : DEFAULT_PACKAGING);
      case VERSION:
        return singletonList(mavenProject.getMavenKey().getVersion());
      case PARENT_ARTIFACT_ID:
        return singletonList(
            mavenProject.getParentKey() == null ? "" : mavenProject.getParentKey().getArtifactId());
      case PARENT_GROUP_ID:
        return singletonList(
            mavenProject.getParentKey() == null ? "" : mavenProject.getParentKey().getGroupId());
      case PARENT_VERSION:
        return singletonList(
            mavenProject.getParentKey() == null ? "" : mavenProject.getParentKey().getVersion());
      case SOURCE_FOLDER:
        return (mavenProject.getSources() != null && !mavenProject.getSources().isEmpty())
            ? mavenProject.getSources()
            : singletonList(DEFAULT_SOURCE_FOLDER);
      case TEST_SOURCE_FOLDER:
        return (mavenProject.getTestSources() != null && !mavenProject.getTestSources().isEmpty())
            ? mavenProject.getTestSources()
            : singletonList(DEFAULT_TEST_SOURCE_FOLDER);
      case RESOURCE_FOLDER:
        if (mavenProject.getResources() != null && !mavenProject.getResources().isEmpty()) {
          return mavenProject
              .getResources()
              .stream()
              .map(MavenResource::getDirectory)
              .collect(Collectors.toList());
        } else {
          return Arrays.asList(DEFAULT_RESOURCES_FOLDER, DEFAULT_TEST_RESOURCES_FOLDER);
        }
      case OUTPUT_FOLDER:
        return (mavenProject.getOutputDirectory() != null
                && !mavenProject.getOutputDirectory().isEmpty())
            ? singletonList(mavenProject.getOutputDirectory())
            : singletonList(DEFAULT_OUTPUT_FOLDER);

      default:
        throw new ValueStorageException(String.format("Unknown attribute %s", attributeName));
    }
  }

