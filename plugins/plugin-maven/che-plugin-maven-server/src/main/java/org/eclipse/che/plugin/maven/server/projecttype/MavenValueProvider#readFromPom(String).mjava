    private List<String> readFromPom(String attributeName)
            throws ServerException, ForbiddenException, IOException, XMLTreeException, ValueStorageException {
        final Model model = readModel(projectFolder);
        switch (attributeName) {
            case ARTIFACT_ID:
                return singletonList(model.getArtifactId());
            case GROUP_ID:
                return singletonList(model.getGroupId());
            case PACKAGING:
                String packaging = model.getPackaging();
                return singletonList(packaging != null ? packaging : DEFAULT_PACKAGING);
            case VERSION:
                return singletonList(model.getVersion());
            case PARENT_ARTIFACT_ID:
                return singletonList(model.getParent() == null ? "" : model.getParent().getArtifactId());
            case PARENT_GROUP_ID:
                return singletonList(model.getParent() == null ? "" : model.getParent().getGroupId());
            case PARENT_VERSION:
                return singletonList(model.getParent() == null ? "" : model.getParent().getVersion());
            case SOURCE_FOLDER:
                if (model.getBuild() != null && model.getBuild().getSourceDirectory() != null) {
                    return singletonList(model.getBuild().getSourceDirectory());
                } else {
                    return singletonList(DEFAULT_SOURCE_FOLDER);
                }
            case TEST_SOURCE_FOLDER:
                if (model.getBuild() != null && model.getBuild().getTestSourceDirectory() != null) {
                    return singletonList(model.getBuild().getTestSourceDirectory());
                } else {
                    return singletonList(DEFAULT_TEST_SOURCE_FOLDER);
                }
            case RESOURCE_FOLDER:
                if (model.getBuild() != null && model.getBuild().getResources() != null) {
                    return model.getBuild().getResources().stream().map(Resource::getDirectory).collect(Collectors.toList());
                } else {
                    return Arrays.asList(DEFAULT_RESOURCES_FOLDER, DEFAULT_TEST_RESOURCES_FOLDER);
                }
            case OUTPUT_FOLDER:
                if (model.getBuild() != null && model.getBuild().getOutputDirectory() != null) {
                    return singletonList(model.getBuild().getOutputDirectory());
                } else {
                    return singletonList(DEFAULT_OUTPUT_FOLDER);
                }
            default:
                throw new ValueStorageException(String.format("Unknown attribute %s", attributeName));
        }
    }

