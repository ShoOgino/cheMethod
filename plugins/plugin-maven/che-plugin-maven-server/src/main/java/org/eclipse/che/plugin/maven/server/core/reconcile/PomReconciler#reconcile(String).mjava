    /**
     * Handles reconcile operations for pom.xml file by given path.
     *
     * @param pomPath
     *         path to the pom file to reconcile
     * @return result of reconcile operation as a list of {@link Problem}s
     * @throws NotFoundException
     *         if file is not found by given {@code pomPath}
     * @throws ForbiddenException
     *         if item is not a file
     * @throws ServerException
     *         if other error occurs
     */
    public List<Problem> reconcile(String pomPath) throws ServerException, ForbiddenException, NotFoundException {
        VirtualFileEntry entry = projectManagerProvider.get().getProjectsRoot().getChild(pomPath);
        if (entry == null) {
            throw new NotFoundException(format("File '%s' doesn't exist", pomPath));
        }

        EditorWorkingCopy workingCopy = editorWorkingCopyManager.getWorkingCopy(pomPath);
        String pomContent = workingCopy != null ? workingCopy.getContentAsString() : entry.getVirtualFile().getContentAsString();
        String projectPath = entry.getPath().getParent().toString();

        return reconcile(pomPath, projectPath, pomContent);
    }

