    public MavenModelReaderResult resolveMavenProject(File pom, MavenServerWrapper mavenServer, List<String> activeProfiles,
                                                      List<String> inactiveProfiles, MavenServerManager serverManager) {
        try {
            MavenServerResult resolveProject = mavenServer.resolveProject(pom, activeProfiles, inactiveProfiles);
            MavenProjectInfo projectInfo = resolveProject.getProjectInfo();
            if (projectInfo != null) {
                return new MavenModelReaderResult(projectInfo.getMavenModel(),
                                                  projectInfo.getActiveProfiles(),
                                                  Collections.emptyList(),
                                                  resolveProject.getProblems(),
                                                  resolveProject.getUnresolvedArtifacts());
            } else {
                MavenModelReaderResult readMavenProject = readMavenProject(pom, serverManager);
                readMavenProject.getProblems().addAll(resolveProject.getProblems());
                readMavenProject.getUnresolvedArtifacts().addAll(resolveProject.getUnresolvedArtifacts());
                return readMavenProject;
            }

        } catch (Throwable t) {
            String message = t.getMessage();
            LOG.info(message, t);
            MavenModelReaderResult readMavenProject = readMavenProject(pom, serverManager);
            if (message != null) {
                readMavenProject.getProblems().add(MavenProjectProblem.newStructureProblem(pom.getPath(), message));
            } else {
                readMavenProject.getProblems().add(MavenProjectProblem.newSyntaxProblem(pom.getPath(), MavenProblemType.SYNTAX));
            }
            return readMavenProject;
        }
    }

