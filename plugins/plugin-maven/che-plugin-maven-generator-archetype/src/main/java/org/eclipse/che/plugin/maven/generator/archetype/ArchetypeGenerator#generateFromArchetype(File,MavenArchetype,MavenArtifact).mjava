  /**
   * Generates a new project from the specified archetype by given maven artifact descriptor.
   *
   * @param workDir folder where command will execute in common use root dir of workspace
   * @param archetype archetype from which need to generate new project
   * @param mavenArtifact maven artifact descriptor
   * @throws ServerException if an error occurs while generating project
   */
  public void generateFromArchetype(
      @NotNull File workDir, @NotNull MavenArchetype archetype, MavenArtifact mavenArtifact)
      throws ServerException {
    Map<String, String> archetypeProperties = new HashMap<>();
    archetypeProperties.put(
        "-DinteractiveMode", "false"); // get rid of the interactivity of the archetype plugin
    archetypeProperties.put("-DarchetypeGroupId", archetype.getGroupId());
    archetypeProperties.put("-DarchetypeArtifactId", archetype.getArtifactId());
    archetypeProperties.put("-DarchetypeVersion", archetype.getVersion());
    archetypeProperties.put("-DgroupId", mavenArtifact.getGroupId());
    archetypeProperties.put("-DartifactId", mavenArtifact.getArtifactId());
    archetypeProperties.put("-Dversion", mavenArtifact.getVersion());
    if (archetype.getRepository() != null) {
      archetypeProperties.put("-DarchetypeRepository", archetype.getRepository());
    }
    if (archetype.getProperties() != null) {
      archetypeProperties.putAll(archetype.getProperties());
    }
    final CommandLine commandLine = createCommandLine(archetypeProperties);
    try {
      execute(commandLine.toShellCommand(), workDir);
    } catch (TimeoutException e) {
      LOG.error(e.getMessage());
    } catch (IOException e) {
      LOG.error(e.getMessage());
    } catch (InterruptedException e) {
      LOG.error(e.getMessage());
    }
  }

