  /**
   * Reads model from given file, or if given file is a directory reads model from the
   * <i>pom.xml</i> which is under the given directory
   *
   * <p>After reading from pom file model will be associated with it, so {@link #getPomFile()} and
   * will return pom file and {@link #getProjectDirectory()} will return pom file parent directory.
   *
   * @param file <i>pom.xml</i> to read model from or its parent directory
   * @return fetched model
   * @throws IOException if any i/o error occurs
   * @throws org.eclipse.che.commons.xml.XMLTreeException when input stream contains not valid xml
   *     content
   * @throws NullPointerException when given {@code file} is {@code null}
   */
  public static Model readFrom(File file) throws IOException {
    requireNonNull(file, "Required not null file");
    if (file.isDirectory()) {
      return readFrom(new File(file, "pom.xml"));
    }
    return fetchModel(XMLTree.from(file)).setPomFile(file);
  }

