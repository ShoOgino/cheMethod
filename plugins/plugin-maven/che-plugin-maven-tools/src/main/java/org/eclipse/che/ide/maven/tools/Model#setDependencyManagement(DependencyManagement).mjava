  /**
   * Sets default dependency information for projects that inherit from this one. If new dependency
   * management is {@code null} removes old dependency management from model and from xml as well
   *
   * <p>The dependencies in this section are not immediately resolved. Instead, when a POM derived
   * from this one declares a dependency described by a matching groupId and artifactId, the version
   * and other values from this section are used for that dependency if they were not already
   * specified. If {@code parent} is {@code null} then it will be removed from model and xml as
   * well.
   *
   * @param dependencyManagement new project dependency management
   * @return this model instance
   */
  public Model setDependencyManagement(DependencyManagement dependencyManagement) {
    this.dependencyManagement = dependencyManagement;
    if (dependencyManagement == null) {
      root.removeChild("dependencyManagement");
    } else if (root.hasSingleChild("dependencyManagement")) {
      dependencyManagement.dmElement =
          root.getSingleChild("dependencyManagement")
              .replaceWith(dependencyManagement.asXMLElement());
    } else {
      root.insertChild(
          this.dependencyManagement.asXMLElement(),
          beforeAnyOf("dependencies", "build").or(inTheEnd()));
      dependencyManagement.dmElement = root.getSingleChild("dependencyManagement");
    }
    return this;
  }

