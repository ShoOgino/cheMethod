  /**
   * Sets indicates the dependency is optional for use of this library.
   *
   * <p>If {@code optional} is {@code null} and this dependency instance is associated with xml
   * element then {@code optional} will be removed from model as well as from xml.
   *
   * @param optional new dependency optional parameter
   * @return this dependency instance
   * @see #setOptional(boolean)
   */
  public Dependency setOptional(String optional) {
    this.optional = optional;
    if (!isNew()) {
      if (optional == null) {
        dependencyElement.removeChild("optional");
      } else if (dependencyElement.hasSingleChild("optional")) {
        dependencyElement.getSingleChild("optional").setText(optional);
      } else {
        dependencyElement.insertChild(createElement("optional", optional), inTheBegin());
      }
    }
    return this;
  }

