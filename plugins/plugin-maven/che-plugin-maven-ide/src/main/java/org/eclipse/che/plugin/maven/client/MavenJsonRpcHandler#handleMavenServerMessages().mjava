    private void handleMavenServerMessages() {
        configurator.newConfiguration()
                    .methodName(MAVEN_OUTPUT_TEXT_METHOD)
                    .paramsAsDto(TextMessageDto.class)
                    .noResult()
                    .withConsumer(textNotification -> textConsumers.forEach(it -> it.accept(textNotification)));

        configurator.newConfiguration()
                    .methodName(MAVEN_OUTPUT_PERCENT_UNDEFINED_METHOD)
                    .paramsAsDto(PercentUndefinedMessageDto.class)
                    .noResult()
                    .withConsumer(percentUndefinedMessage -> percentUndefinedConsumers.forEach(it -> it.accept(percentUndefinedMessage)));

        configurator.newConfiguration()
                    .methodName(MAVEN_OUTPUT_PERCENT_METHOD)
                    .paramsAsDto(PercentMessageDto.class)
                    .noResult()
                    .withConsumer(percentMessage -> percentConsumers.forEach(it -> it.accept(percentMessage)));

        configurator.newConfiguration()
                    .methodName(MAVEN_OUTPUT_START_STOP_METHOD)
                    .paramsAsDto(StartStopNotification.class)
                    .noResult()
                    .withConsumer(startStopNotification -> startStopConsumers.forEach(it -> it.accept(startStopNotification)));

        configurator.newConfiguration()
                    .methodName(MAVEN_OUTPUT_UPDATE_METHOD)
                    .paramsAsDto(ProjectsUpdateMessage.class)
                    .noResult()
                    .withConsumer(projectsUpdateMessage -> projectsUpdateConsumers.forEach(it -> it.accept(projectsUpdateMessage)));

        configurator.newConfiguration()
                    .methodName(MAVEN_ARCHETYPE_CHANEL_OUTPUT)
                    .paramsAsDto(ArchetypeOutput.class)
                    .noResult()
                    .withConsumer(archetypeOutput -> archetypeOutputConsumers.forEach(it -> it.accept(archetypeOutput)));
    }

