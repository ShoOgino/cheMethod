  private void estimateAndSetAttributes() {
    appContext
        .getWorkspaceRoot()
        .getContainer(dataObject.getPath())
        .then(
            new Operation<Optional<Container>>() {
              @Override
              public void apply(Optional<Container> container) throws OperationException {
                if (!container.isPresent()) {
                  return;
                }

                container
                    .get()
                    .estimate(MAVEN_ID)
                    .then(
                        new Operation<SourceEstimation>() {
                          @Override
                          public void apply(SourceEstimation estimation) throws OperationException {
                            if (!estimation.isMatched()) {
                              final String resolution = estimation.getResolution();
                              final String errorMessage =
                                  resolution.isEmpty()
                                      ? localization.mavenPageEstimateErrorMessage()
                                      : resolution;
                              dialogFactory
                                  .createMessageDialog(
                                      localization.mavenPageErrorDialogTitle(), errorMessage, null)
                                  .show();
                              return;
                            }

                            Map<String, List<String>> estimatedAttributes =
                                estimation.getAttributes();
                            List<String> artifactIdValues = estimatedAttributes.get(ARTIFACT_ID);
                            if (artifactIdValues != null && !artifactIdValues.isEmpty()) {
                              setAttribute(ARTIFACT_ID, artifactIdValues.get(0));
                            }

                            List<String> groupIdValues = estimatedAttributes.get(GROUP_ID);
                            List<String> parentGroupIdValues =
                                estimatedAttributes.get(PARENT_GROUP_ID);
                            if (groupIdValues != null && !groupIdValues.isEmpty()) {
                              setAttribute(GROUP_ID, groupIdValues.get(0));
                            } else if (parentGroupIdValues != null
                                && !parentGroupIdValues.isEmpty()) {
                              setAttribute(GROUP_ID, parentGroupIdValues.get(0));
                            }

                            List<String> versionValues = estimatedAttributes.get(VERSION);
                            List<String> parentVersionValues =
                                estimatedAttributes.get(PARENT_VERSION);
                            if (versionValues != null && !versionValues.isEmpty()) {
                              setAttribute(VERSION, versionValues.get(0));
                            } else if (parentVersionValues != null
                                && !parentVersionValues.isEmpty()) {
                              setAttribute(VERSION, parentVersionValues.get(0));
                            }

                            List<String> packagingValues = estimatedAttributes.get(PACKAGING);
                            if (packagingValues != null && !packagingValues.isEmpty()) {
                              setAttribute(PACKAGING, packagingValues.get(0));
                            }

                            updateDelegate.updateControls();
                          }
                        })
                    .catchError(
                        new Operation<PromiseError>() {
                          @Override
                          public void apply(PromiseError arg) throws OperationException {
                            dialogFactory
                                .createMessageDialog(
                                    localization.mavenPageErrorDialogTitle(),
                                    arg.getMessage(),
                                    null)
                                .show();
                            Log.error(MavenPagePresenter.class, arg);
                          }
                        });
              }
            });
  }

