  private MavenServerResult createResult(File pom, MavenResult mavenResult) throws RemoteException {
    List<MavenProjectProblem> problems = new ArrayList<>();
    Set<MavenKey> unresolvedArtifacts = new HashSet<>();
    validate(pom, mavenResult.getExceptions(), problems);
    MavenProject project = mavenResult.getMavenProject();
    if (project == null) {
      return new MavenServerResult(null, problems, unresolvedArtifacts);
    }

    MavenModel model = null;
    try {
      DependencyResolutionResult resolutionResult = mavenResult.getDependencyResolutionResult();
      org.eclipse.aether.graph.DependencyNode dependencyNode = null;
      if (resolutionResult != null) {
        dependencyNode = resolutionResult.getDependencyGraph();
      }

      List<org.eclipse.aether.graph.DependencyNode> dependencyNodes = null;
      if (dependencyNode != null) {
        dependencyNodes = dependencyNode.getChildren();
      }

      model =
          MavenModelUtil.convertProjectToModel(
              project, dependencyNodes, new File(localRepo.getBasedir()));
    } catch (Exception e) {
      validate(project.getFile(), Collections.singletonList(e), problems);
    }

    List<String> activeProfiles = getActiveProfiles(project);
    MavenProjectInfo projectInfo = new MavenProjectInfo(model, null, activeProfiles);

    return new MavenServerResult(projectInfo, problems, unresolvedArtifacts);
  }

