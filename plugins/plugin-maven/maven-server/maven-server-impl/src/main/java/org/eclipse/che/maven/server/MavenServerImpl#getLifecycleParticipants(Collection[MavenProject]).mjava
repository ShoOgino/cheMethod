  /** method from org.apache.maven.DefaultMaven#getLifecycleParticipants */
  private Collection<AbstractMavenLifecycleParticipant> getLifecycleParticipants(
      Collection<MavenProject> projects) {
    Collection<AbstractMavenLifecycleParticipant> lifecycleListeners =
        new LinkedHashSet<AbstractMavenLifecycleParticipant>();

    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();
    try {
      try {
        lifecycleListeners.addAll(container.lookupList(AbstractMavenLifecycleParticipant.class));
      } catch (ComponentLookupException e) {
        // this is just silly, lookupList should return an empty list!
        logWarn("Failed to lookup lifecycle participants: " + e.getMessage());
      }

      Collection<ClassLoader> scannedRealms = new HashSet<ClassLoader>();

      for (MavenProject project : projects) {
        ClassLoader projectRealm = project.getClassRealm();

        if (projectRealm != null && scannedRealms.add(projectRealm)) {
          Thread.currentThread().setContextClassLoader(projectRealm);

          try {
            lifecycleListeners.addAll(
                container.lookupList(AbstractMavenLifecycleParticipant.class));
          } catch (ComponentLookupException e) {
            // this is just silly, lookupList should return an empty list!
            logWarn("Failed to lookup lifecycle participants: " + e.getMessage());
          }
        }
      }
    } finally {
      Thread.currentThread().setContextClassLoader(originalClassLoader);
    }

    return lifecycleListeners;
  }

