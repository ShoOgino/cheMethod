    @BeforeMethod
    public void setUp() throws Exception {
        MavenServerContext.setLoggerAndListener(new MavenServerLogger() {

            @Override
            public void warning(Throwable t) throws RemoteException {
                t.printStackTrace();
            }

            @Override
            public void info(Throwable t) throws RemoteException {
                t.printStackTrace();
            }

            @Override
            public void error(Throwable t) throws RemoteException {
                t.printStackTrace();
            }
        }, (file, relativePath) -> System.out.println(file.getAbsolutePath()));
        MavenSettings mavenSettings = new MavenSettings();
        mavenSettings.setLoggingLevel(MavenTerminal.LEVEL_INFO);
        mavenSettings.setMavenHome(new File(System.getenv("M2_HOME")));
        mavenSettings.setGlobalSettings(new File(System.getProperty("user.home"), ".m2/settings.xml"));
        File localRepository = new File("target/localrepo");
        localRepository.mkdirs();
        mavenSettings.setLocalRepository(localRepository);
        mavenServer = new MavenServerImpl(mavenSettings);
        mavenServer.setComponents(null, true, (level, message, throwable) -> {
            System.out.println(message);
        }, new MavenServerProgressNotifier() {
            @Override
            public void setText(String text) throws RemoteException {
            }

            @Override
            public void setPercent(double percent) throws RemoteException {
            }

            @Override
            public void setPercentUndefined(boolean undefined) throws RemoteException {
            }

            @Override
            public boolean isCanceled() throws RemoteException {
                return false;
            }
        }, true);

    }

