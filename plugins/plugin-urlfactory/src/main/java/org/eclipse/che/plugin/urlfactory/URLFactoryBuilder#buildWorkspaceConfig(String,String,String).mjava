  /**
   * Help to generate default workspace configuration
   *
   * @param environmentName the name of the environment to create
   * @param name the name of the workspace
   * @param dockerFileLocation the optional location for codenvy dockerfile to use
   * @return a workspace configuration
   */
  public WorkspaceConfigDto buildWorkspaceConfig(
      String environmentName, String name, String dockerFileLocation) {

    // if remote repository contains a codenvy docker file, use it
    // else use the default image.
    RecipeDto recipeDto;
    if (dockerFileLocation != null && urlChecker.exists(dockerFileLocation)) {
      recipeDto =
          newDto(RecipeDto.class)
              .withLocation(dockerFileLocation)
              .withType("dockerfile")
              .withContentType("text/x-dockerfile");
    } else {
      recipeDto =
          newDto(RecipeDto.class).withLocation(DEFAULT_DOCKER_IMAGE).withType("dockerimage");
    }
    MachineConfigDto machine =
        newDto(MachineConfigDto.class)
            .withInstallers(singletonList("org.eclipse.che.ws-agent"))
            .withAttributes(singletonMap(MEMORY_LIMIT_ATTRIBUTE, DEFAULT_MEMORY_LIMIT_BYTES));

    // setup environment
    EnvironmentDto environmentDto =
        newDto(EnvironmentDto.class)
            .withRecipe(recipeDto)
            .withMachines(singletonMap(MACHINE_NAME, machine));

    // workspace configuration using the environment
    return newDto(WorkspaceConfigDto.class)
        .withDefaultEnv(environmentName)
        .withEnvironments(singletonMap(environmentName, environmentDto))
        .withName(name);
  }

