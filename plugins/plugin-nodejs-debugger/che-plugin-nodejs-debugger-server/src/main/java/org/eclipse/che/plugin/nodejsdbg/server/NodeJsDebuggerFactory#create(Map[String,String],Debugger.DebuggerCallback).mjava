    @Override
    public Debugger create(Map<String, String> properties, Debugger.DebuggerCallback debuggerCallback) throws DebuggerException {
        Map<String, String> normalizedProps = properties.entrySet()
                                                        .stream()
                                                        .collect(toMap(e -> e.getKey().toLowerCase(), Map.Entry::getValue));


        Integer pid = null;
        URI uri = null;

        String pidStr = normalizedProps.get("pid");
        if (!isNullOrEmpty(pidStr)) {
            try {
                pid = Integer.valueOf(pidStr);
            } catch (NumberFormatException e) {
                throw new DebuggerException(String.format("Illegal 'pid' format %s. Debugger can't be started.", pidStr));
            }
        }

        String uriStr = normalizedProps.get("uri");
        if (!isNullOrEmpty(uriStr)) {
            try {
                uri = URI.create(uriStr);
            } catch (IllegalArgumentException e) {
                throw new DebuggerException(String.format("Illegal 'uri' format %s. Debugger can't be started.", uriStr));
            }
        }

        String script = normalizedProps.get("script");
        if (!isNullOrEmpty(script) && !Files.exists(Paths.get(script))) {
            throw new DebuggerException(String.format("Script '%s' to debug not found. Debugger can't be started.", script));
        }

        if (isNullOrEmpty(pidStr) && isNullOrEmpty(uriStr) && isNullOrEmpty(script)) {
            throw new DebuggerException("Unrecognized debug connection options. Allowed only: pid, uri or script.");
        }

        return NodeJsDebugger.newInstance(pid, uri, script, debuggerCallback);
    }

