    @Override
    public Breakpoints parse(NodeJsOutput nodeJsOutput) throws NodeJsDebuggerParseException {
        final List<Breakpoint> breakpoints = new ArrayList<>();

        JsonObject json = new JsonParser().parse(nodeJsOutput.getOutput()).getAsJsonObject();
        if (json.has("breakpoints")) {
            Iterator<JsonElement> iter = json.getAsJsonArray("breakpoints").iterator();
            while (iter.hasNext()) {
                JsonObject item = iter.next().getAsJsonObject();
                try {
                    final String condition = item.has("condition") && !item.get("condition").isJsonNull()
                                             ? item.get("condition").getAsString()
                                             : null;
                    final boolean isEnabled = item.has("active") && !item.get("active").isJsonNull() && item.get("active").getAsBoolean();
                    final int lineNumber = item.get("line").getAsInt();

                    final String target;
                    String targetType = item.get("type").getAsString();

                    switch (targetType) {
                        case "scriptId":
                            target = String.valueOf(item.get("script_id").getAsInt());
                            break;
                        case "scriptRegExp":
                            target = item.get("script_regexp").getAsString();
                            break;
                        default:
                            throw new IllegalArgumentException("Unsupported 'type' value: " + targetType);
                    }

                    Location location = new LocationImpl(targetType + ":" + target, lineNumber + 1);
                    Breakpoint breakpoint = new BreakpointImpl(location, isEnabled, condition);
                    breakpoints.add(breakpoint);
                } catch (Exception e) {
                    LOG.error("Failed to parse breakpoint: " + item.toString(), e);
                }
            }
        }

        return new Breakpoints(breakpoints);
    }

