    @Test
    public void testShouldRefreshKeysAfterSuccessfulDeleteKey() throws OperationException {
        when(sshPairDto.getService()).thenReturn(SshKeyManagerPresenter.GIT_SSH_SERVICE);
        when(sshPairDto.getName()).thenReturn(GITHUB_HOST);
        SafeHtml safeHtml = mock(SafeHtml.class);
        ConfirmDialog confirmDialog = mock(ConfirmDialog.class);
        List<SshPairDto> sshPairDtoArray = new ArrayList<>();
        when(constant.deleteSshKeyQuestion(anyString())).thenReturn(safeHtml);
        when(safeHtml.asString()).thenReturn("");
        when(dialogFactory.createConfirmDialog(anyString(), anyString(), (ConfirmCallback)anyObject(), (CancelCallback)anyObject()))
                .thenReturn(confirmDialog);

        presenter.onDeleteClicked(sshPairDto);

        verify(dialogFactory).createConfirmDialog(anyString(), anyString(), confirmCallbackCaptor.capture(), (CancelCallback)anyObject());
        ConfirmCallback confirmCallback = confirmCallbackCaptor.getValue();
        confirmCallback.accepted();

        verify(voidPromise).then(operationVoidCapture.capture());
        operationVoidCapture.getValue().apply(null);

        verify(sshPairDTOsPromise).then(operationSshPairDTOsCapture.capture());
        operationSshPairDTOsCapture.getValue().apply(sshPairDtoArray);

        verify(confirmDialog).show();
        verify(service).deletePair(Matchers.eq(SshKeyManagerPresenter.GIT_SSH_SERVICE), eq(GITHUB_HOST));
        verify(service).getPairs(Matchers.eq(SshKeyManagerPresenter.GIT_SSH_SERVICE));
        verify(view).setPairs(eq(sshPairDtoArray));
    }

