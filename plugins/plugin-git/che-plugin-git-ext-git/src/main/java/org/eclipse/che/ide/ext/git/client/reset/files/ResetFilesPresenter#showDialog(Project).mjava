  /** Show dialog. */
  public void showDialog(Project project) {
    this.project = project;

    List<String> selected =
        Arrays.stream(appContext.getResources())
            .map(path -> path.getLocation().removeFirstSegments(1).toString())
            .collect(Collectors.toList());

    service
        .getStatus(project.getLocation(), selected)
        .then(
            status -> {
              if (status.isClean()) {
                dialogFactory
                    .createMessageDialog(
                        constant.messagesWarningTitle(), constant.indexIsEmpty(), null)
                    .show();
                return;
              }

              indexedFiles = new IndexFile[0];

              for (String path : status.getAdded()) {
                indexedFiles = add(indexedFiles, wrap(path));
              }

              for (String path : status.getChanged()) {
                indexedFiles = add(indexedFiles, wrap(path));
              }

              for (String path : status.getRemoved()) {
                indexedFiles = add(indexedFiles, wrap(path));
              }

              if (indexedFiles.length == 0) {
                dialogFactory
                    .createMessageDialog(
                        constant.messagesWarningTitle(), constant.indexIsEmpty(), null)
                    .show();
                return;
              }

              // Mark selected items to reset from index
              Resource[] resources = appContext.getResources();
              if (resources != null) {
                for (Resource selectedItem : resources) {
                  String selectedItemPath =
                      selectedItem.getLocation().removeFirstSegments(1).toString();
                  for (IndexFile file : indexedFiles)
                    if (file.getPath().startsWith(selectedItemPath)) {
                      file.setIndexed(false);
                    }
                }
              }

              view.setIndexedFiles(indexedFiles);
              view.showDialog();
            })
        .catchError(
            error -> {
              String errorMassage =
                  error.getMessage() != null ? error.getMessage() : constant.statusFailed();
              GitOutputConsole console = gitOutputConsoleFactory.create(STATUS_COMMAND_NAME);
              console.printError(errorMassage);
              consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
              notificationManager.notify(errorMassage);
            });
  }

