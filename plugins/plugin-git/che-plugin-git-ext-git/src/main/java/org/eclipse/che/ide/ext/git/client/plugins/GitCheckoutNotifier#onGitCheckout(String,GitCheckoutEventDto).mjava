  @Override
  public void onGitCheckout(String endpointId, GitCheckoutEventDto gitCheckoutEventDto) {
    final Type type = gitCheckoutEventDto.getType();
    final String name = gitCheckoutEventDto.getName();

    switch (type) {
      case BRANCH:
        {
          Log.debug(getClass(), "Received git branch checkout event: " + name);

          final NotificationManager notificationManager = notificationManagerProvider.get();
          if (notificationManager != null) {
            notificationManager.notify(
                "Git operation", "Branch '" + name + "' is checked out", SUCCESS, EMERGE_MODE);
          }

          break;
        }
      case REVISION:
        {
          Log.debug(getClass(), "Received git revision checkout event: " + name);

          final NotificationManager notificationManager = notificationManagerProvider.get();
          if (notificationManager != null) {
            notificationManager.notify(
                "Git operation", "Revision '" + name + "' is checked out", SUCCESS, EMERGE_MODE);
          }

          break;
        }
    }

    // Update project attributes from server.

    Path path = Path.valueOf("/" + gitCheckoutEventDto.getProjectName());
    appContext.getWorkspaceRoot().synchronize(new ExternalResourceDelta(path, path, UPDATED));
  }

