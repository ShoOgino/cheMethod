    /**
     * Form the message to display for removing from index, telling the user what is gonna to be removed.
     *
     * @return {@link String} message to display
     */
    @NotNull
    private String formMessage(@NotNull String workDir) {
        Selection<ResourceBasedNode<?>> selection = (Selection<ResourceBasedNode<?>>)selectionAgent.getSelection();

        String path;
        if (selection == null || selection.getHeadElement() == null) {
            path = project.getRootProject().getPath();
        } else {
            path = ((HasStorablePath)selection.getHeadElement()).getStorablePath();
        }

        String pattern = path.replaceFirst(workDir, "");
        pattern = (pattern.startsWith("/")) ? pattern.replaceFirst("/", "") : pattern;

        // Root of the working tree:
        if (pattern.isEmpty() || "/".equals(pattern)) {
            return constant.removeFromIndexAll();
        }

        // Do not display path longer 40 characters
        if (pattern.length() > 40) {
            pattern = pattern.substring(0, 40) + "...";
        }

        if (selection != null && selection.getHeadElement() instanceof FolderReferenceNode) {
            return constant.removeFromIndexFolder(pattern).asString();
        } else {
            return constant.removeFromIndexFile(pattern).asString();
        }
    }

