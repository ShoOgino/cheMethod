  private void showCompareWithLatestForFile(
      final Path gitDirLocation, final Path relPath, final Status status) {
    if (status.equals(ADDED)) {
      showCompare("");
      return;
    }

    if (status.equals(DELETED)) {
      service
          .showFileContent(gitDirLocation, relPath, revision)
          .then(
              content -> {
                view.setTitleCaption(getTitleForFile(relPath.toString()));
                view.setColumnTitles(
                    locale.compareYourVersionTitle(), revision + locale.compareReadOnlyTitle());
                view.show(content.getContent(), "", relPath.toString(), true);
              })
          .catchError(
              error -> {
                notificationManager.notify(error.getMessage(), FAIL, NOT_EMERGE_MODE);
              });
    } else {
      service
          .showFileContent(gitDirLocation, relPath, revision)
          .then(
              content -> {
                showCompare(content.getContent());
              })
          .catchError(
              error -> {
                notificationManager.notify(error.getMessage(), FAIL, NOT_EMERGE_MODE);
              });
    }
  }

