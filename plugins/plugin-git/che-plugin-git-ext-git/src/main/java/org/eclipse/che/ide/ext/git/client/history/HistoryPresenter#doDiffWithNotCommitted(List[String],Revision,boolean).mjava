    /**
     * Perform diff between pointed revision and index or working tree.
     *
     * @param filePatterns
     *         patterns for which to show diff
     * @param revision
     *         revision to compare with
     * @param isCached
     *         if <code>true</code> compare with index, else - with working tree
     */
    private void doDiffWithNotCommitted(@NotNull List<String> filePatterns, @Nullable final Revision revision, final boolean isCached) {
        if (revision == null) {
            return;
        }

        service.diff(appContext.getDevMachine(), project.getLocation(), filePatterns, RAW, false, 0, revision.getId(), isCached)
               .then(new Operation<String>() {
                   @Override
                   public void apply(String diff) throws OperationException {
                       view.setDiffContext(diff);
                       String text = isCached ? constant.historyDiffIndexState() : constant.historyDiffTreeState();
                       displayCommitA(revision);
                       view.setCompareType(text);
                   }
               })
               .catchError(new Operation<PromiseError>() {
                   @Override
                   public void apply(PromiseError error) throws OperationException {
                       nothingToDisplay(revision);
                       String errorMessage = error.getMessage() != null ? error.getMessage() : constant.diffFailed();
                       GitOutputConsole console = gitOutputConsoleFactory.create(DIFF_COMMAND_NAME);
                       console.printError(errorMessage);
                       consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                       notificationManager.notify(constant.diffFailed(), FAIL, FLOAT_MODE);
                   }
               });
    }

