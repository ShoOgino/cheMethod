    private void commitOnlySelection(final String message, final boolean amend) {
        // first git-add the selection
        @SuppressWarnings("unchecked")
        final Selection<HasStorablePath> selection = (Selection<HasStorablePath>)this.projectExplorer.getSelection();
        if (selection != null && !selection.isEmpty() && (selection.getHeadElement() != null)) {
            final List<String> files = buildFileList(selection);
            service.commit(workspaceId, appContext.getCurrentProject().getRootProject(), message, files, amend,
                           new AsyncRequestCallback<Revision>(dtoUnmarshallerFactory.newUnmarshaller(Revision.class)) {
                               @Override
                               protected void onSuccess(final Revision result) {
                                   if (!result.isFake()) {
                                       onCommitSuccess(result);
                                   } else {
                                       GitOutputConsole console = gitOutputConsoleFactory.create(COMMIT_COMMAND_NAME);
                                       console.printError(result.getMessage());
                                       consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                                       notificationManager.notify(constant.commited(), result.getMessage(),
                                                                  appContext.getCurrentProject().getRootProject());
                                   }
                               }

                               @Override
                               protected void onFailure(final Throwable exception) {
                                   handleError(exception);
                               }
                           }
                          );
        } // else don't commit as it goes against user intent
        this.view.close();
    }

