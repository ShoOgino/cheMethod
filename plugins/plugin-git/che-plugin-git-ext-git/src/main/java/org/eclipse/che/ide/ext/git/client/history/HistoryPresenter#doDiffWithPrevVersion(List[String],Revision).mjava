    /**
     * Perform diff between selected commit and previous one.
     *
     * @param filePatterns
     *         patterns for which to show diff
     * @param revisionB
     *         selected commit
     */
    private void doDiffWithPrevVersion(@NotNull List<String> filePatterns, @Nullable final Revision revisionB) {
        if (revisionB == null) {
            return;
        }

        int index = revisions.indexOf(revisionB);
        if (index + 1 < revisions.size()) {
            final Revision revisionA = revisions.get(index + 1);
            service.diff(appContext.getDevMachine(), project.getLocation(), filePatterns, RAW, false, 0, revisionA.getId(), revisionB.getId())
                   .then(new Operation<String>() {
                       @Override
                       public void apply(String diff) throws OperationException {
                           view.setDiffContext(diff);
                           view.setCompareType("");
                           displayCommitA(revisionA);
                           displayCommitB(revisionB);
                       }
                   })
                   .catchError(new Operation<PromiseError>() {
                       @Override
                       public void apply(PromiseError error) throws OperationException {
                           nothingToDisplay(revisionB);
                           String errorMessage = error.getMessage() != null ? error.getMessage() : constant.diffFailed();
                           GitOutputConsole console = gitOutputConsoleFactory.create(DIFF_COMMAND_NAME);
                           console.printError(errorMessage);
                           consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                           notificationManager.notify(constant.diffFailed(), FAIL, FLOAT_MODE);
                       }
                   });
        } else {
            nothingToDisplay(revisionB);
        }
    }

