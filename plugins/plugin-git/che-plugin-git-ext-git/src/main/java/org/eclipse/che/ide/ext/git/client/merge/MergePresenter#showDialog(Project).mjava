  /** Show dialog. */
  public void showDialog(Project project) {
    this.project = project;
    final GitOutputConsole console = gitOutputConsoleFactory.create(MERGE_COMMAND_NAME);
    selectedReference = null;
    view.setEnableMergeButton(false);

    service
        .branchList(project.getLocation(), LIST_LOCAL)
        .then(
            branches -> {
              List<Reference> references = new ArrayList<>();
              for (Branch branch : branches) {
                if (!branch.isActive()) {
                  Reference reference =
                      new Reference(branch.getName(), branch.getDisplayName(), LOCAL_BRANCH);
                  references.add(reference);
                }
              }
              view.setLocalBranches(references);
            })
        .catchError(
            error -> {
              console.printError(error.getMessage());
              consolesPanelPresenter.addCommandOutput(console);
              notificationManager.notify(constant.branchesListFailed(), FAIL, FLOAT_MODE);
            });

    service
        .branchList(project.getLocation(), LIST_REMOTE)
        .then(
            branches -> {
              List<Reference> references = new ArrayList<>();
              for (Branch branch : branches) {
                if (!branch.isActive()) {
                  Reference reference =
                      new Reference(branch.getName(), branch.getDisplayName(), REMOTE_BRANCH);
                  references.add(reference);
                }
              }
              view.setRemoteBranches(references);
            })
        .catchError(
            error -> {
              console.printError(error.getMessage());
              consolesPanelPresenter.addCommandOutput(console);
              notificationManager.notify(constant.branchesListFailed(), FAIL, FLOAT_MODE);
            });

    view.showDialog();
  }

