    /**
     * Show compare window.
     *
     * @param file
     *         file name with its full path
     * @param state
     *         state of the file
     * @param revision
     *         hash of revision or branch
     */
    public void show(final String file, final String state, final String revision) {
        this.item = file;

        if (state.startsWith("A")) {
            showCompare(file, "", revision);
        } else if (state.startsWith("D")) {
            gitService.showFileContent(workspaceId, appContext.getCurrentProject().getRootProject(), file, revision,
                                       new AsyncRequestCallback<ShowFileContentResponse>(
                                               dtoUnmarshallerFactory.newUnmarshaller(ShowFileContentResponse.class)) {
                                           @Override
                                           protected void onSuccess(final ShowFileContentResponse response) {
                                               view.setTitle(file);
                                               view.show(response.getContent(), "", revision, file);
                                           }

                                           @Override
                                           protected void onFailure(Throwable exception) {
                                               notificationManager.notify(exception.getMessage(), FAIL, false);
                                           }
                                       });
        } else {
            gitService.showFileContent(workspaceId, appContext.getCurrentProject().getRootProject(), file, revision,
                                       new AsyncRequestCallback<ShowFileContentResponse>(
                                               dtoUnmarshallerFactory.newUnmarshaller(ShowFileContentResponse.class)) {
                                           @Override
                                           protected void onSuccess(final ShowFileContentResponse response) {
                                               showCompare(file, response.getContent(), revision);
                                           }

                                           @Override
                                           protected void onFailure(Throwable exception) {
                                               notificationManager.notify(exception.getMessage(), FAIL, false);
                                           }
                                       });
        }
    }

