  @Inject
  public GitExtension(
      GitResources resources,
      ActionManager actionManager,
      InitRepositoryAction initAction,
      DeleteRepositoryAction deleteAction,
      AddToIndexAction addToIndexAction,
      ResetToCommitAction resetToCommitAction,
      RemoveFromIndexAction removeFromIndexAction,
      CommitAction commitAction,
      CheckoutReferenceAction checkoutReferenceAction,
      ShowBranchesAction showBranchesAction,
      ShowMergeAction showMergeAction,
      ResetFilesAction resetFilesAction,
      ShowStatusAction showStatusAction,
      ShowRemoteAction showRemoteAction,
      PushAction pushAction,
      FetchAction fetchAction,
      PullAction pullAction,
      GitLocalizationConstant constant,
      HistoryAction historyAction,
      CompareWithLatestAction compareWithLatestAction,
      CompareWithBranchAction compareWithBranchAction,
      CompareWithRevisionAction compareWithRevisionAction,
      KeyBindingAgent keyBinding,
      AppContext appContext) {

    resources.gitCSS().ensureInjected();

    DefaultActionGroup mainMenu = (DefaultActionGroup) actionManager.getAction(GROUP_MAIN_MENU);

    DefaultActionGroup git = new DefaultActionGroup(GIT_GROUP_MAIN_MENU, true, actionManager);
    actionManager.registerAction("git", git);
    mainMenu.add(git, new Constraints(BEFORE, GROUP_PROFILE));

    DefaultActionGroup commandGroup =
        new DefaultActionGroup(COMMAND_GROUP_MAIN_MENU, false, actionManager);
    actionManager.registerAction("gitCommandGroup", commandGroup);
    git.add(commandGroup);
    git.addSeparator();

    DefaultActionGroup historyGroup =
        new DefaultActionGroup(HISTORY_GROUP_MAIN_MENU, false, actionManager);
    actionManager.registerAction("gitHistoryGroup", historyGroup);
    git.add(historyGroup);
    git.addSeparator();

    DefaultActionGroup repositoryGroup =
        new DefaultActionGroup(REPOSITORY_GROUP_MAIN_MENU, false, actionManager);
    actionManager.registerAction("gitRepositoryGroup", repositoryGroup);
    git.add(repositoryGroup);

    actionManager.registerAction("gitInitRepository", initAction);
    repositoryGroup.add(initAction);
    actionManager.registerAction("gitDeleteRepository", deleteAction);
    repositoryGroup.add(deleteAction);

    actionManager.registerAction("gitAddToIndex", addToIndexAction);
    commandGroup.add(addToIndexAction);
    DefaultActionGroup compareGroup = new DefaultActionGroup("Compare", true, actionManager);
    actionManager.registerAction("gitCompareGroup", compareGroup);
    commandGroup.add(compareGroup);
    actionManager.registerAction("gitResetToCommit", resetToCommitAction);
    commandGroup.add(resetToCommitAction);
    actionManager.registerAction("gitRemoveFromIndexCommit", removeFromIndexAction);
    commandGroup.add(removeFromIndexAction);
    actionManager.registerAction("gitCommit", commitAction);
    commandGroup.add(commitAction);
    actionManager.registerAction("gitBranches", showBranchesAction);
    commandGroup.add(showBranchesAction);
    actionManager.registerAction("gitCheckoutReference", checkoutReferenceAction);
    commandGroup.add(checkoutReferenceAction);
    actionManager.registerAction("gitMerge", showMergeAction);
    commandGroup.add(showMergeAction);
    DefaultActionGroup remoteGroup =
        new DefaultActionGroup(constant.remotesControlTitle(), true, actionManager);
    remoteGroup.getTemplatePresentation().setSVGResource(resources.remote());
    actionManager.registerAction("gitRemoteGroup", remoteGroup);
    commandGroup.add(remoteGroup);
    actionManager.registerAction("gitResetFiles", resetFilesAction);
    commandGroup.add(resetFilesAction);

    actionManager.registerAction("gitHistory", historyAction);
    historyGroup.add(historyAction);
    actionManager.registerAction("gitStatus", showStatusAction);
    historyGroup.add(showStatusAction);
    actionManager.registerAction("gitPush", pushAction);
    remoteGroup.add(pushAction);
    actionManager.registerAction("gitFetch", fetchAction);
    remoteGroup.add(fetchAction);
    actionManager.registerAction("gitPull", pullAction);
    remoteGroup.add(pullAction);
    actionManager.registerAction("gitRemote", showRemoteAction);
    remoteGroup.add(showRemoteAction);

    actionManager.registerAction("gitCompareWithLatest", compareWithLatestAction);
    compareGroup.add(compareWithLatestAction);
    actionManager.registerAction("gitCompareWithBranch", compareWithBranchAction);
    compareGroup.add(compareWithBranchAction);
    actionManager.registerAction("gitCompareWithRevision", compareWithRevisionAction);
    compareGroup.add(compareWithRevisionAction);

    DefaultActionGroup gitContextMenuGroup = new DefaultActionGroup("Git", true, actionManager);
    actionManager.registerAction("gitCompareContextMenu", gitContextMenuGroup);
    gitContextMenuGroup.add(addToIndexAction);
    gitContextMenuGroup.add(removeFromIndexAction);
    gitContextMenuGroup.add(resetFilesAction);
    gitContextMenuGroup.add(commitAction);
    gitContextMenuGroup.add(historyAction);
    gitContextMenuGroup.addSeparator();
    gitContextMenuGroup.add(compareWithLatestAction);
    gitContextMenuGroup.add(compareWithBranchAction);
    gitContextMenuGroup.add(compareWithRevisionAction);

    DefaultActionGroup projectExplorerContextMenuGroup =
        (DefaultActionGroup) actionManager.getAction("resourceOperation");
    projectExplorerContextMenuGroup.add(gitContextMenuGroup);

    DefaultActionGroup editorContextMenuGroup =
        (DefaultActionGroup) actionManager.getAction("editorContextMenu");
    editorContextMenuGroup.addSeparator();
    editorContextMenuGroup.add(gitContextMenuGroup);

    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().action().alt().charCode('d').build(), GIT_COMPARE_WITH_LATEST);
  }

