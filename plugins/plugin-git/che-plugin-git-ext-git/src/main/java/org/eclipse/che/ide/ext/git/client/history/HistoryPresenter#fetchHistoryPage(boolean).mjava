    /** Get the log of the commits. If successfully received, then display in revision grid, otherwise - show error in output panel. */
    private void fetchHistoryPage(final boolean append) {
        service.log(appContext.getDevMachine(),
                    project.getLocation(),
                    null,
                    skip,
                    Constants.DEFAULT_PAGE_SIZE,
                    false).then(new Operation<LogResponse>() {
            @Override
            public void apply(LogResponse log) throws OperationException {
                List<Revision> commits = log.getCommits();
                if (commits.isEmpty()) {
                    return;
                }

                skip += commits.size();
                if (append) {
                    revisions.addAll(commits);
                } else {
                    revisions = commits;
                }

                view.setRevisions(revisions);
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                if (getErrorCode(error.getCause()) == ErrorCodes.INIT_COMMIT_WAS_NOT_PERFORMED) {
                    dialogFactory.createMessageDialog(constant.historyTitle(), constant.initCommitWasNotPerformed(), null).show();
                } else {
                    nothingToDisplay(null);
                    String errorMessage = error.getMessage() != null ? error.getMessage() : constant.logFailed();
                    GitOutputConsole console = gitOutputConsoleFactory.create(LOG_COMMAND_NAME);
                    console.printError(errorMessage);
                    consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                    notificationManager.notify(constant.logFailed(), FAIL, FLOAT_MODE);
                }
                partStack.minimize();
                workspaceAgent.removePart(HistoryPresenter.this);
                isViewClosed = true;
            }
        });
    }

