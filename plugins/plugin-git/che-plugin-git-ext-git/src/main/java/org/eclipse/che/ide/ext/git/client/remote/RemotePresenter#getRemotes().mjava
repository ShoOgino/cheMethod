    /**
     * Get the list of remote repositories for local one. If remote repositories are found,
     * then get the list of branches (remote and local).
     */
    private void getRemotes() {
        service.remoteList(appContext.getDevMachine(), project.getLocation(), null, true).then(new Operation<List<Remote>>() {
            @Override
            public void apply(List<Remote> remotes) throws OperationException {
                view.setEnableDeleteButton(selectedRemote != null);
                view.setRemotes(remotes);
                if (!view.isShown()) {
                    view.showDialog();
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                String errorMessage = error.getMessage() != null ? error.getMessage() : constant.remoteListFailed();
                handleError(errorMessage);
            }
        });
    }

