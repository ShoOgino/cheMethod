    /** Get list of branches from selected project. */
    private void getBranches() {
        service.branchList(project.getLocation(), LIST_ALL).then(new Operation<List<Branch>>() {
            @Override
            public void apply(List<Branch> branches) throws OperationException {
                view.setBranches(branches);
                view.showDialog();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                final String errorMessage = (error.getMessage() != null) ? error.getMessage() : locale.branchesListFailed();
                GitOutputConsole console = gitOutputConsoleFactory.create(BRANCH_LIST_COMMAND_NAME);
                console.printError(errorMessage);
                consolesPanelPresenter.addCommandOutput(console);
                notificationManager.notify(locale.branchesListFailed(), FAIL, NOT_EMERGE_MODE);
            }
        });
    }

