  /**
   * Performs git operation. If this operations fails with authorization error the operation will be
   * recalled with requested credentials
   *
   * @param operation operation that might require auth
   */
  protected <Y> Promise<Y> performOperationWithTokenRequestIfNeeded(
      final RemoteGitOperation<Y> operation) {
    return operation
        .perform(null)
        .catchErrorPromise(
            new Function<PromiseError, Promise<Y>>() {
              @Override
              public Promise<Y> apply(PromiseError error) throws FunctionException {
                if (getErrorCode(error.getCause()) == ErrorCodes.UNAUTHORIZED_GIT_OPERATION) {
                  Map<String, String> attributes = getAttributes(error.getCause());
                  String providerName = attributes.get(PROVIDER_NAME);

                  return oAuthServiceClient
                      .getToken(providerName)
                      .thenPromise(
                          token ->
                              Promises.resolve(new Credentials(token.getToken(), token.getToken())))
                      .thenPromise(operation::perform);
                }
                return Promises.reject(error);
              }
            });
  }

