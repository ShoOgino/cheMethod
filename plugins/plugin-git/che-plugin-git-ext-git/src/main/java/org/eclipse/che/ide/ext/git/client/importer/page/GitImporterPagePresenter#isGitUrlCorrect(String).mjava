  /**
   * Validate url
   *
   * @param url url for validate
   * @return <code>true</code> if url is correct
   */
  private boolean isGitUrlCorrect(@NotNull String url) {
    if (WHITE_SPACE.test(url)) {
      view.markURLInvalid();
      view.setURLErrorMessage(locale.importProjectMessageStartWithWhiteSpace());
      return false;
    }

    if (SCP_LIKE_SYNTAX.test(url)) {
      view.markURLValid();
      view.setURLErrorMessage(null);
      return true;
    }

    if (!PROTOCOL.test(url)) {
      view.markURLInvalid();
      view.setURLErrorMessage(locale.importProjectMessageProtocolIncorrect());
      return false;
    }

    if (!(HOST1.test(url) || HOST2.test(url))) {
      view.markURLInvalid();
      view.setURLErrorMessage(locale.importProjectMessageHostIncorrect());
      return false;
    }

    if (!(REPO_NAME.test(url))) {
      view.markURLInvalid();
      view.setURLErrorMessage(locale.importProjectMessageNameRepoIncorrect());
      return false;
    }

    view.markURLValid();
    view.setURLErrorMessage(null);
    return true;
  }

