    /** {@inheritDoc} */
    @Override
    public void onMergeClicked() {
        view.close();

        final List<EditorPartPresenter> openedEditors = new ArrayList<>();
        for (EditorPartPresenter partPresenter : editorAgent.getOpenedEditors().values()) {
            openedEditors.add(partPresenter);
        }
        final GitOutputConsole console = gitOutputConsoleFactory.create(MERGE_COMMAND_NAME);
        service.merge(workspaceId, appContext.getCurrentProject().getRootProject(), selectedReference.getDisplayName(),
                      new AsyncRequestCallback<MergeResult>(dtoUnmarshallerFactory.newUnmarshaller(MergeResult.class)) {
                          @Override
                          protected void onSuccess(final MergeResult result) {
                              console.printInfo(formMergeMessage(result));
                              consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                              notificationManager.notify(formMergeMessage(result), appContext.getCurrentProject().getRootProject());
                              refreshProject(openedEditors);
                          }

                          @Override
                          protected void onFailure(Throwable exception) {
                              console.printError(exception.getMessage());
                              consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                              notificationManager
                                      .notify(constant.mergeFailed(), FAIL, true, appContext.getCurrentProject().getRootProject());
                          }
                      });
    }

