    /** {@inheritDoc} */
    @Override
    public void onMergeClicked() {
        view.close();

        final GitOutputConsole console = gitOutputConsoleFactory.create(MERGE_COMMAND_NAME);
        service.merge(appContext.getDevMachine(), appContext.getCurrentProject().getRootProject(), selectedReference.getDisplayName(),
                      new AsyncRequestCallback<MergeResult>(dtoUnmarshallerFactory.newUnmarshaller(MergeResult.class)) {
                          @Override
                          protected void onSuccess(final MergeResult result) {
                              console.print(formMergeMessage(result));
                              consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                              notificationManager.notify(formMergeMessage(result), appContext.getCurrentProject().getRootProject());
                              refreshProject(editorAgent.getOpenedEditors());
                          }

                          @Override
                          protected void onFailure(Throwable exception) {
                              if (exception instanceof ServerException &&
                                  ((ServerException)exception).getErrorCode() == ErrorCodes.NO_COMMITTER_NAME_OR_EMAIL_DEFINED) {
                                  dialogFactory.createMessageDialog(constant.mergeTitle(), constant.committerIdentityInfoEmpty(),
                                                                    new ConfirmCallback() {
                                                                        @Override
                                                                        public void accepted() {
                                                                            //do nothing
                                                                        }
                                                                    }).show();
                                  return;
                              }
                              console.printError(exception.getMessage());
                              consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                              notificationManager
                                      .notify(constant.mergeFailed(), FAIL, true, appContext.getCurrentProject().getRootProject());
                          }
                      });
    }

