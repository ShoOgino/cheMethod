    @Override
    public void setAmendCommitMessage() {
        final Unmarshallable<LogResponse> unmarshall = dtoUnmarshallerFactory.newUnmarshaller(LogResponse.class);
        this.service.log(workspaceId, appContext.getCurrentProject().getRootProject(), null, false,
                         new AsyncRequestCallback<LogResponse>(unmarshall) {
                             @Override
                             protected void onSuccess(final LogResponse result) {
                                 final List<Revision> commits = result.getCommits();
                                 String message = "";
                                 if (commits != null && (!commits.isEmpty())) {
                                     final Revision tip = commits.get(0);
                                     if (tip != null) {
                                         message = tip.getMessage();
                                     }
                                 }
                                 CommitPresenter.this.view.setMessage(message);
                                 CommitPresenter.this.view.setEnableCommitButton(!message.isEmpty());
                             }

                             @Override
                             protected void onFailure(final Throwable exception) {
                                 Log.warn(CommitPresenter.class, "Git log failed", exception);
                                 CommitPresenter.this.view.setMessage("");
                             }
                         });
    }

