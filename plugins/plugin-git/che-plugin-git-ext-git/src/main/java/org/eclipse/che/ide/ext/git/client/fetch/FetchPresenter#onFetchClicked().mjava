    /** {@inheritDoc} */
    @Override
    public void onFetchClicked() {
        final String remoteUrl = view.getRepositoryUrl();

        final StatusNotification notification = notificationManager.notify(constant.fetchProcess(), PROGRESS, FLOAT_MODE);
        final GitOutputConsole console = gitOutputConsoleFactory.create(FETCH_COMMAND_NAME);

        service.fetch(project.getLocation(), view.getRepositoryName(), getRefs(), view.isRemoveDeletedRefs())
                .then(new Operation<Void>() {
                    @Override
                    public void apply(Void ignored) throws OperationException {
                        console.print(constant.fetchSuccess(remoteUrl));
                        processesPanelPresenter.addCommandOutput(console);
                        notification.setStatus(SUCCESS);
                        notification.setTitle(constant.fetchSuccess(remoteUrl));
                    }
                })
                .catchError(new Operation<PromiseError>() {
                    @Override
                    public void apply(PromiseError error) throws OperationException {
                        handleError(error.getCause(), remoteUrl, notification, console);
                        processesPanelPresenter.addCommandOutput(console);
                    }
                });
        view.close();
    }

