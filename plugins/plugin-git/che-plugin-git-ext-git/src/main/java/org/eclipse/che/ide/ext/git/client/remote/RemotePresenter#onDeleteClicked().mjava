  /** {@inheritDoc} */
  @Override
  public void onDeleteClicked() {
    if (selectedRemote == null) {
      handleError(constant.selectRemoteRepositoryFail());
      return;
    }

    service
        .remoteDelete(project.getLocation(), selectedRemote.getName())
        .then(
            ignored -> {
              getRemotes();

              project.synchronize();
            })
        .catchError(
            error -> {
              String errorMessage =
                  error.getMessage() != null ? error.getMessage() : constant.remoteDeleteFailed();
              GitOutputConsole console = gitOutputConsoleFactory.create(REMOTE_REPO_COMMAND_NAME);
              console.printError(errorMessage);
              consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
              notificationManager.notify(constant.remoteDeleteFailed(), FAIL, FLOAT_MODE);
            });
  }

