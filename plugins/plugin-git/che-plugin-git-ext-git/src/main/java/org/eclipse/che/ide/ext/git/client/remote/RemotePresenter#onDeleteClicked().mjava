    /**
     * {@inheritDoc}
     */
    @Override
    public void onDeleteClicked() {
        if (selectedRemote == null) {
            handleError(constant.selectRemoteRepositoryFail());
            return;
        }

        service.remoteDelete(project.getLocation(), selectedRemote.getName()).then(new Operation<Void>() {
            @Override
            public void apply(Void ignored) throws OperationException {
                getRemotes();

                project.synchronize();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                String errorMessage = error.getMessage() != null ? error.getMessage() : constant.remoteDeleteFailed();
                GitOutputConsole console = gitOutputConsoleFactory.create(REMOTE_REPO_COMMAND_NAME);
                console.printError(errorMessage);
                consolesPanelPresenter.addCommandOutput(console);
                notificationManager.notify(constant.remoteDeleteFailed(), FAIL, FLOAT_MODE);
            }
        });
    }

