    /**
     * {@inheritDoc}
     */
    @Override
    public void onDeleteClicked() {
        if (selectedRemote == null) {
            handleError(constant.selectRemoteRepositoryFail());
            return;
        }

        final String name = selectedRemote.getName();
        service.remoteDelete(workspaceId, project, name, new AsyncRequestCallback<String>() {
            @Override
            protected void onSuccess(String result) {
                getRemotes();
                refreshProject();
            }

            @Override
            protected void onFailure(Throwable exception) {
                String errorMessage = exception.getMessage() != null ? exception.getMessage() : constant.remoteDeleteFailed();
                GitOutputConsole console = gitOutputConsoleFactory.create(REMOTE_REPO_COMMAND_NAME);
                console.printError(errorMessage);
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                notificationManager.notify(constant.remoteDeleteFailed(), FAIL, true, project);
            }
        });
    }

