    /**
     * Show dialog.
     */
    public void showDialog() {
        project = appContext.getCurrentProject();
        if (project == null) {
            return;
        }

        final GitOutputConsole console = gitOutputConsoleFactory.create(ADD_TO_INDEX_COMMAND_NAME);
        final Unmarshallable<Status> unmarshall = this.dtoUnmarshallerFactory.newUnmarshaller(Status.class);
        service.status(workspaceId, project.getRootProject(),
                       new AsyncRequestCallback<Status>(unmarshall) {
                           @Override
                           protected void onSuccess(final Status result) {
                               if (!result.isClean()) {
                                   addSelection();
                               } else {
                                   console.printInfo(constant.nothingAddToIndex());
                                   consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                                   notificationManager.notify(constant.nothingAddToIndex(), project.getRootProject());
                               }
                           }

                           @Override
                           protected void onFailure(Throwable exception) {
                               console.printError(exception.getMessage() != null ? exception.getMessage() : constant.statusFailed());
                               consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                               notificationManager.notify(constant.statusFailed(), FAIL, true, project.getRootProject());
                           }
                       });
    }

