    /**
     * Update the list of branches.
     *
     * @param remoteMode
     *         is a remote mode
     */
    private void updateBranches(@NotNull final String remoteMode) {
        service.branchList(appContext.getDevMachine(), project.getLocation(), remoteMode).then(new Operation<List<Branch>>() {
            @Override
            public void apply(List<Branch> branches) throws OperationException {
                if (LIST_REMOTE.equals(remoteMode)) {
                    view.setRemoteBranches(branchSearcher.getRemoteBranchesToDisplay(view.getRepositoryName(), branches));
                    updateBranches(LIST_LOCAL);
                } else {
                    view.setLocalBranches(branchSearcher.getLocalBranchesToDisplay(branches));
                    for (Branch branch : branches) {
                        if (branch.isActive()) {
                            view.selectRemoteBranch(branch.getDisplayName());
                            break;
                        }
                    }
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                final String errorMessage = error.getMessage() != null ? error.getMessage() : constant.branchesListFailed();
                GitOutputConsole console = gitOutputConsoleFactory.create(FETCH_COMMAND_NAME);
                console.printError(errorMessage);
                processesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                notificationManager.notify(constant.branchesListFailed(), FAIL, FLOAT_MODE);
                view.setEnableFetchButton(false);
            }
        });
    }

