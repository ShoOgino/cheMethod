    /** Show dialog. */
    public void showDialog() {
        final CurrentProject project = appContext.getCurrentProject();
        view.showDialog();
        service.remoteList(workspaceId, project.getRootProject(), null, true,
                           new AsyncRequestCallback<List<Remote>>(dtoUnmarshallerFactory.newListUnmarshaller(Remote.class)) {
                               @Override
                               protected void onSuccess(List<Remote> result) {
                                   view.setRemotes(result);
                               }

                               @Override
                               protected void onFailure(Throwable exception) {
                                   view.setRemotes(null);
                                   String errorMessage =
                                           exception.getMessage() != null ? exception.getMessage()
                                                                          : constant.remoteListFailed();
                                   GitOutputConsole console = gitOutputConsoleFactory.create(REMOTE_REPO_COMMAND_NAME);
                                   console.printError(errorMessage);
                                   consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                                   notificationManager.notify(constant.remoteListFailed(), FAIL, true, project.getRootProject());
                               }
                           }
                          );
        service.getGitReadOnlyUrl(workspaceId, project.getRootProject(),
                                  new AsyncRequestCallback<String>(new StringUnmarshaller()) {
                                      @Override
                                      protected void onSuccess(String result) {
                                          view.setLocaleUrl(result);
                                      }

                                      @Override
                                      protected void onFailure(Throwable exception) {
                                          String errorMessage = exception.getMessage() != null && !exception.getMessage().isEmpty()
                                                                ? exception.getMessage() : constant.initFailed();
                                          final GitOutputConsole console = gitOutputConsoleFactory.create(READ_ONLY_URL_COMMAND_NAME);
                                          console.printError(errorMessage);
                                          consolesPanelPresenter
                                                  .addCommandOutput(appContext.getDevMachineId(), console);
                                          notificationManager.notify(constant.initFailed(), FAIL, true, project.getRootProject());
                                      }
                                  });
    }

