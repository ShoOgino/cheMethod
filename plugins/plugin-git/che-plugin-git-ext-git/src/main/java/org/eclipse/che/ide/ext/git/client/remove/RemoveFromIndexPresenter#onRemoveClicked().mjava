    /** {@inheritDoc} */
    @Override
    public void onRemoveClicked() {
        openedEditors = new ArrayList<>();
        for (EditorPartPresenter partPresenter : editorAgent.getOpenedEditors().values()) {
            openedEditors.add(partPresenter);
        }
        final GitOutputConsole console = gitOutputConsoleFactory.create(REMOVE_FROM_INDEX_COMMAND_NAME);
        service.remove(appContext.getWorkspaceId(), project.getRootProject(), getFilePatterns(), view.isRemoved(),
                       new AsyncRequestCallback<String>() {
                           @Override
                           protected void onSuccess(String result) {
                               console.printInfo(constant.removeFilesSuccessfull());
                               consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                               notificationManager.notify(constant.removeFilesSuccessfull(), project.getRootProject());

                               if (!view.isRemoved()) {
                                   projectExplorer.reloadChildren(getResourceBasedNode());

                                   if (projectExplorer.getSelection().getHeadElement() instanceof FileReferenceNode) {
                                       FileReferenceNode selectFile = ((FileReferenceNode)projectExplorer.getSelection().getHeadElement());
                                       for (EditorPartPresenter partPresenter : openedEditors) {
                                           VirtualFile openFile = partPresenter.getEditorInput().getFile();
                                           //to close selected file if it open
                                           if (selectFile.getStorablePath().equals(openFile.getPath())) {
                                               eventBus.fireEvent(new FileEvent(openFile, FileEvent.FileOperation.CLOSE));
                                           }
                                       }
                                   }
                               }
                           }

                           @Override
                           protected void onFailure(Throwable exception) {
                               handleError(exception, console);
                               consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                           }
                       }
                      );
        view.close();
    }

