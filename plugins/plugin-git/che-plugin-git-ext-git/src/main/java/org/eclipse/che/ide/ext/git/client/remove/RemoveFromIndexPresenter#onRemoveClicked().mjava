    /** {@inheritDoc} */
    @Override
    public void onRemoveClicked() {
        final GitOutputConsole console = gitOutputConsoleFactory.create(REMOVE_FROM_INDEX_COMMAND_NAME);

        final Resource[] resources = appContext.getResources();

        checkState(!isNullOrEmpty(resources));

        service.remove(appContext.getDevMachine(), project.getLocation(), toRelativePaths(resources), view.isRemoved()).then(new Operation<Void>() {
            @Override
            public void apply(Void ignored) throws OperationException {
                console.print(constant.removeFilesSuccessfull());
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                notificationManager.notify(constant.removeFilesSuccessfull());

                project.synchronize();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                handleError(error.getCause(), console);
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
            }
        });

        view.close();
    }

