    /**
     * Get the list of remote repositories for local one.
     * If remote repositories are found, then get the list of branches (remote and local).
     */
    void updateRemotes() {
        service.remoteList(appContext.getDevMachine(), project.getRootProject(), null, true,
                           new AsyncRequestCallback<List<Remote>>(dtoUnmarshallerFactory.newListUnmarshaller(Remote.class)) {
                               @Override
                               protected void onSuccess(List<Remote> result) {
                                   updateLocalBranches();
                                   view.setRepositories(result);
                                   view.setEnablePushButton(!result.isEmpty());
                                   view.showDialog();
                               }

                               @Override
                               protected void onFailure(Throwable exception) {
                                   String errorMessage =
                                           exception.getMessage() != null ? exception.getMessage() : constant.remoteListFailed();
                                   GitOutputConsole console = gitOutputConsoleFactory.create(REMOTE_REPO_COMMAND_NAME);
                                   console.printError(errorMessage);
                                   consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                                   notificationManager.notify(constant.remoteListFailed(), FAIL, true, project.getRootProject());
                                   view.setEnablePushButton(false);
                               }
                           }
                          );
    }

