  /**
   * Get the list of remote repositories for local one. If remote repositories are found, then get
   * the list of branches (remote and local).
   */
  void updateRemotes() {
    service
        .remoteList(project.getLocation(), null, true)
        .then(
            remotes -> {
              updateLocalBranches();
              view.setRepositories(remotes);
              view.setEnablePushButton(!remotes.isEmpty());
              view.setSelectedForcePushCheckBox(false);
              view.showDialog();
            })
        .catchError(
            error -> {
              String errorMessage =
                  error.getMessage() != null ? error.getMessage() : constant.remoteListFailed();
              GitOutputConsole console = gitOutputConsoleFactory.create(REMOTE_REPO_COMMAND_NAME);
              console.printError(errorMessage);
              processesPanelPresenter.addCommandOutput(console);
              notificationManager.notify(constant.remoteListFailed(), FAIL, FLOAT_MODE);
              view.setEnablePushButton(false);
            });
  }

