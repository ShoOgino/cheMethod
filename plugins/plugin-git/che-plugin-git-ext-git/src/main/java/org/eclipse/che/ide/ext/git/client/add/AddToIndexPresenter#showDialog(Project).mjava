    public void showDialog(Project project) {
        this.project = project;

        checkArgument(project != null, "Null project occurred");

        final GitOutputConsole console = gitOutputConsoleFactory.create(ADD_TO_INDEX_COMMAND_NAME);

        service.getStatus(appContext.getDevMachine(), project.getLocation()).then(new Operation<Status>() {
            @Override
            public void apply(Status status) throws OperationException {
                if (!status.isClean()) {
                    final Resource[] resources = appContext.getResources();

                    checkState(resources != null && resources.length > 0);

                    view.setMessage(constant.addToIndexAllChanges(), null);
                    view.setUpdated(false);
                    view.showDialog();
                } else {
                    console.print(constant.nothingAddToIndex());
                    consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                    notificationManager.notify(constant.nothingAddToIndex());
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                console.printError(constant.statusFailed());
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                notificationManager.notify(constant.statusFailed(), FAIL, FLOAT_MODE);
            }
        });
    }

