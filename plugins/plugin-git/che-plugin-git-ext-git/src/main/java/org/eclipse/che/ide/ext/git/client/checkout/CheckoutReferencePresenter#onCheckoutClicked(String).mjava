    @Override
    public void onCheckoutClicked(final String reference) {

        service.checkout(appContext.getDevMachine(), project.getLocation(), dtoFactory.createDto(CheckoutRequest.class).withName(reference))
               .then(new Operation<Void>() {
                   @Override
                   public void apply(Void arg) throws OperationException {
                       project.synchronize().then(new Operation<Resource[]>() {
                           @Override
                           public void apply(Resource[] arg) throws OperationException {
                               view.close();
                           }
                       });
                   }
               })
               .catchError(new Operation<PromiseError>() {
                   @Override
                   public void apply(PromiseError error) throws OperationException {
                       final String errorMessage = (error.getMessage() != null)
                                                   ? error.getMessage()
                                                   : constant.checkoutFailed();
                       GitOutputConsole console = gitOutputConsoleFactory.create(CHECKOUT_COMMAND_NAME);
                       console.printError(errorMessage);
                       consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                       notificationManager.notify(constant.checkoutFailed(), FAIL, FLOAT_MODE);
                       view.close();
                   }
               });
    }

