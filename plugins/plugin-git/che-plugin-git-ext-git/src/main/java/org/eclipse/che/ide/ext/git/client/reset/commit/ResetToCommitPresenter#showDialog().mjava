    /**
     * Show dialog.
     */
    public void showDialog() {
        service.log(appContext.getDevMachine(), appContext.getCurrentProject().getRootProject(), null, false,
                    new AsyncRequestCallback<LogResponse>(dtoUnmarshallerFactory.newUnmarshaller(LogResponse.class)) {
                        @Override
                        protected void onSuccess(LogResponse result) {
                            view.setRevisions(result.getCommits());
                            view.setMixMode(true);
                            view.setEnableResetButton(selectedRevision != null);
                            view.showDialog();
                        }

                        @Override
                        protected void onFailure(Throwable exception) {
                            if (getErrorCode(exception) == ErrorCodes.INIT_COMMIT_WAS_NOT_PERFORMED) {
                                dialogFactory.createMessageDialog(constant.resetCommitViewTitle(),
                                                                  constant.initCommitWasNotPerformed(),
                                                                  null).show();
                                return;
                            }
                            String errorMessage = (exception.getMessage() != null) ? exception.getMessage() : constant.logFailed();
                            GitOutputConsole console = gitOutputConsoleFactory.create(LOG_COMMAND_NAME);
                            console.printError(errorMessage);
                            consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                            notificationManager.notify(constant.logFailed(), FAIL, FLOAT_MODE, appContext.getCurrentProject().getRootProject());
                        }
                    }
                   );
    }

