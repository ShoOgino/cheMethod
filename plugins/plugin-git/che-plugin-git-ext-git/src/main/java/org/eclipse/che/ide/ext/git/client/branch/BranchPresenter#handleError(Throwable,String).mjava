    /**
     * Handler some action whether some exception happened.
     *
     * @param exception
     *         exception what happened
     * @param commandName
     *         name of the executed command
     */
    void handleError(@NotNull Throwable exception, String commandName) {
        if (getErrorCode(exception) == ErrorCodes.UNABLE_GET_PRIVATE_SSH_KEY) {
            dialogFactory.createMessageDialog(commandName, constant.messagesUnableGetSshKey(), null).show();
            return;
        }

        String errorMessage = exception.getMessage();
        if (errorMessage == null) {
            switch (commandName) {
                case BRANCH_CREATE_COMMAND_NAME:
                    errorMessage = constant.branchCreateFailed();
                    break;
                case BRANCH_DELETE_COMMAND_NAME:
                    errorMessage = constant.branchDeleteFailed();
                    break;
                case BRANCH_LIST_COMMAND_NAME:
                    errorMessage = constant.branchesListFailed();
                    break;
                case BRANCH_RENAME_COMMAND_NAME:
                    errorMessage = constant.branchRenameFailed();
                    break;
                case BRANCH_CHECKOUT_COMMAND_NAME:
                    errorMessage = constant.branchCheckoutFailed();
                    break;
            }
        }

        GitOutputConsole console = gitOutputConsoleFactory.create(commandName);
        printGitMessage(errorMessage, console);
        consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
        notificationManager.notify(errorMessage, FAIL, true, project.getRootProject());
    }

