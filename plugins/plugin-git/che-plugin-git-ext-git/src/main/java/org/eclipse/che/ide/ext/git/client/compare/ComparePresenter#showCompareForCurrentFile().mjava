  /**
   * Shows comparison for selected file. Type of comparison to show depends on {@code
   * compareWithLatest} field.
   */
  private void showCompareForCurrentFile() {
    view.setEnableNextDiffButton(currentFileIndex != (alteredFiles.getFilesQuantity() - 1));
    view.setEnablePreviousDiffButton(currentFileIndex != 0);

    alteredFiles
        .getProject()
        .getFile(alteredFiles.getFileByIndex(currentFileIndex))
        .then(
            file -> {
              if (file.isPresent()) {
                this.comparedFile = file.get();
                view.setEnableSaveChangesButton(true);
              } else { // file is deleted
                this.comparedFile = null;
                view.setEnableSaveChangesButton(false);
              }

              // For now git repository supported only in project root folder
              final Path gitDirLocation = alteredFiles.getProject().getLocation();
              final Path relPath = Path.valueOf(alteredFiles.getFileByIndex(currentFileIndex));

              if (compareWithLatest) {
                showCompareWithLatestForFile(
                    gitDirLocation, relPath, alteredFiles.getStatusByIndex(currentFileIndex));
              } else {
                showCompareBetweenRevisionsForFile(
                    gitDirLocation, relPath, alteredFiles.getStatusByIndex(currentFileIndex));
              }
            })
        .catchError(
            error -> {
              notificationManager.notify(error.getMessage(), FAIL, NOT_EMERGE_MODE);
            });
  }

