  /** {@inheritDoc} */
  @Override
  public void actionPerformed(ActionEvent e) {

    final Project project = appContext.getRootProject();
    final Resource resource = appContext.getResource();

    checkState(project != null, "Null project occurred");
    checkState(
        project.getLocation().isPrefixOf(resource.getLocation()),
        "Given selected item is not descendant of given project");

    final String selectedItemPath =
        resource
            .getLocation()
            .removeFirstSegments(project.getLocation().segmentCount())
            .removeTrailingSeparator()
            .toString();

    service
        .diff(
            project.getLocation(),
            selectedItemPath.isEmpty() ? null : singletonList(selectedItemPath),
            NAME_STATUS,
            false,
            0,
            REVISION,
            false)
        .then(
            diff -> {
              if (diff.isEmpty()) {
                dialogFactory
                    .createMessageDialog(
                        locale.compareMessageIdenticalContentTitle(),
                        locale.compareMessageIdenticalContentText(),
                        null)
                    .show();
              } else {
                AlteredFiles alteredFiles = new AlteredFiles(project, diff);
                if (alteredFiles.getFilesQuantity() == 1) {

                  comparePresenter.showCompareWithLatest(alteredFiles, null, REVISION);
                } else {

                  changesListPresenter.show(alteredFiles, REVISION, null);
                }
              }
            })
        .catchError(
            arg -> {
              notificationManager.notify(locale.diffFailed(), FAIL, NOT_EMERGE_MODE);
            });
  }

