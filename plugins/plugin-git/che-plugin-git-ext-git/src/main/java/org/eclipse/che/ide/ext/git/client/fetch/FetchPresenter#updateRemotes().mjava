    /**
     * Update the list of remote repositories for local one. If remote repositories are found, then update the list of branches (remote and
     * local).
     */
    private void updateRemotes() {
        service.remoteList(appContext.getDevMachine(), project.getLocation(), null, true).then(new Operation<List<Remote>>() {
            @Override
            public void apply(List<Remote> remotes) throws OperationException {
                view.setRepositories(remotes);
                updateBranches(LIST_REMOTE);
                view.setEnableFetchButton(!remotes.isEmpty());
                view.showDialog();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                GitOutputConsole console = gitOutputConsoleFactory.create(FETCH_COMMAND_NAME);
                console.printError(constant.remoteListFailed());
                processesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                notificationManager.notify(constant.remoteListFailed(), FAIL, FLOAT_MODE);
                view.setEnableFetchButton(false);
            }
        });
    }

