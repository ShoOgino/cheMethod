    /**
     * Update the list of remote repositories for local one. If remote repositories are found, then update the list of branches (remote and
     * local).
     */
    private void updateRemotes() {
        service.remoteList(workspaceId, project.getRootProject(), null, true,
                           new AsyncRequestCallback<List<Remote>>(dtoUnmarshallerFactory.newListUnmarshaller(Remote.class)) {
                               @Override
                               protected void onSuccess(List<Remote> result) {
                                   view.setRepositories(result);
                                   updateBranches(LIST_REMOTE);
                                   view.setEnableFetchButton(!result.isEmpty());
                                   view.showDialog();
                               }

                               @Override
                               protected void onFailure(Throwable exception) {
                                   GitOutputConsole console = gitOutputConsoleFactory.create(FETCH_COMMAND_NAME);
                                   console.printError(constant.remoteListFailed());
                                   consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                                   notificationManager.notify(constant.remoteListFailed(), FAIL, true, project.getRootProject());
                                   view.setEnableFetchButton(false);
                               }
                           });
    }

