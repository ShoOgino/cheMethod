    public void showDialog(Project project) {
        this.project = project;

        view.setValueToAmendCheckBox(false);
        view.setValueToPushAfterCommitCheckBox(false);
        view.setEnableAmendCheckBox(true);
        view.setEnablePushAfterCommitCheckBox(true);
        view.setEnableRemoteBranchesDropDownLis(false);
        service.diff(appContext.getDevMachine(), project.getLocation(), null, NAME_STATUS, false, 0, "HEAD", false)
               .then(diff -> {
                   service.log(appContext.getDevMachine(), project.getLocation(), null, -1, 1, false)
                          .then(arg -> {
                              if (diff.isEmpty()) {
                                  showAskForAmendDialog();
                              } else {
                                  show(diff);
                              }
                          })
                          .catchError(error -> {
                              if (getErrorCode(error.getCause()) == ErrorCodes.INIT_COMMIT_WAS_NOT_PERFORMED) {
                                  service.getStatus(appContext.getDevMachine(), project.getLocation()).then(
                                          status -> {
                                              view.setEnableAmendCheckBox(false);
                                              view.setEnablePushAfterCommitCheckBox(false);
                                              List<String> newFiles = new ArrayList<>();
                                              newFiles.addAll(status.getAdded());
                                              newFiles.addAll(status.getUntracked());
                                              show(newFiles.stream().collect(joining("\nA ", "A ", "")));
                                          });
                              }
                          });
               })
               .catchError(arg -> {
                   notificationManager.notify(constant.diffFailed(), FAIL, FLOAT_MODE);
               });

        service.branchList(appContext.getDevMachine(), project.getLocation(), LIST_REMOTE)
               .then(view::setRemoteBranchesList)
               .catchError(error -> {
                   notificationManager.notify(constant.branchesListFailed(), FAIL, FLOAT_MODE);
               });
    }

