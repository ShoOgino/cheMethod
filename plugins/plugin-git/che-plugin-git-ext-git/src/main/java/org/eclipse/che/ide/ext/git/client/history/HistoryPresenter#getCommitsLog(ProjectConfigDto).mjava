    /** Get the log of the commits. If successfully received, then display in revision grid, otherwise - show error in output panel. */
    private void getCommitsLog(final ProjectConfigDto project) {
        service.log(appContext.getDevMachine(), project, null, false,
                    new AsyncRequestCallback<LogResponse>(dtoUnmarshallerFactory.newUnmarshaller(LogResponse.class)) {
                        @Override
                        protected void onSuccess(LogResponse result) {
                            revisions = result.getCommits();
                            view.setRevisions(revisions);
                        }

                        @Override
                        protected void onFailure(Throwable exception) {
                            if (getErrorCode(exception) == ErrorCodes.INIT_COMMIT_WAS_NOT_PERFORMED) {
                                dialogFactory.createMessageDialog(constant.historyTitle(),
                                                                  constant.initCommitWasNotPerformed(),
                                                                  null).show();
                            } else {
                                nothingToDisplay(null);
                                String errorMessage = exception.getMessage() != null ? exception.getMessage() : constant.logFailed();
                                GitOutputConsole console = gitOutputConsoleFactory.create(LOG_COMMAND_NAME);
                                console.printError(errorMessage);
                                consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                                notificationManager.notify(constant.logFailed(), FAIL, FLOAT_MODE, project);
                            }
                            partStack.hidePart(HistoryPresenter.this);
                            workspaceAgent.removePart(HistoryPresenter.this);
                            isViewClosed = true;
                        }
                    });
    }

