    /** {@inheritDoc} */
    @Override
    public void onResetClicked() {

        Path[] paths = new Path[0];
        for (IndexFile file : indexedFiles) {
            if (!file.isIndexed()) {
                paths = add(paths, Path.valueOf(file.getPath()));
            }
        }

        final GitOutputConsole console = gitOutputConsoleFactory.create(RESET_COMMAND_NAME);
        if (paths.length == 0) {
            view.close();
            console.print(constant.nothingToReset());
            consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
            notificationManager.notify(constant.nothingToReset());
            return;
        }
        view.close();

        service.reset(appContext.getDevMachine(), project.getLocation(), "HEAD", ResetType.MIXED, paths).then(new Operation<Void>() {
            @Override
            public void apply(Void ignored) throws OperationException {
                console.print(constant.resetFilesSuccessfully());
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                notificationManager.notify(constant.resetFilesSuccessfully());
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                String errorMassage = error.getMessage() != null ? error.getMessage() : constant.resetFilesFailed();
                console.printError(errorMassage);
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                notificationManager.notify(errorMassage);
            }
        });
    }

