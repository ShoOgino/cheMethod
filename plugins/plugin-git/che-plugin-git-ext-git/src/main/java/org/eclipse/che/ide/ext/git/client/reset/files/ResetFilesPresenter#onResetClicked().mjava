    /** {@inheritDoc} */
    @Override
    public void onResetClicked() {
        List<String> files = new ArrayList<>();
        for (IndexFile indexFile : indexedFiles) {
            if (!indexFile.isIndexed()) {
                files.add(indexFile.getPath());
            }
        }
        final GitOutputConsole console = gitOutputConsoleFactory.create(RESET_COMMAND_NAME);
        if (files.isEmpty()) {
            view.close();
            console.printInfo(constant.nothingToReset());
            consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
            notificationManager.notify(constant.nothingToReset(), project.getRootProject());
            return;
        }
        view.close();

        service.reset(workspaceId, project.getRootProject(), "HEAD", ResetType.MIXED, files, new AsyncRequestCallback<Void>() {
            @Override
            protected void onSuccess(Void result) {
                console.printInfo(constant.resetFilesSuccessfully());
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                notificationManager.notify(constant.resetFilesSuccessfully(), project.getRootProject());
            }

            @Override
            protected void onFailure(Throwable exception) {
                String errorMassage = exception.getMessage() != null ? exception.getMessage() : constant.resetFilesFailed();
                console.printError(errorMassage);
                consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                notificationManager.notify(errorMassage, project.getRootProject());
            }
        });
    }

