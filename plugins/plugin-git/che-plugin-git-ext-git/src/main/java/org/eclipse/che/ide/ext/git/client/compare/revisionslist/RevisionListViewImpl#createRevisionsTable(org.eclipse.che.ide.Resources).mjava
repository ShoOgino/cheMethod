    private void createRevisionsTable(org.eclipse.che.ide.Resources coreRes) {
        Column<Revision, String> idColumn = new Column<Revision, String>(new TextCell()) {
            @Override
            public String getValue(Revision revision) {
                return revision.getId().substring(0, 8) + "...";
            }
        };
        Column<Revision, String> timeColumn = new Column<Revision, String>(new TextCell()) {
            @Override
            public String getValue(Revision revision) {
                return dateTimeFormatter.getFormattedDate(revision.getCommitTime());
            }
        };
        Column<Revision, String> authorColumn = new Column<Revision, String>(new TextCell()) {
            @Override
            public String getValue(Revision revision) {
                return revision.getCommitter().getName();
            }
        };
        Column<Revision, String> titleColumn = new Column<Revision, String>(new TextCell()) {
            @Override
            public String getValue(Revision revision) {
                return revision.getMessage().substring(0, 50);
            }
        };

        revisions = new CellTable<>(15, coreRes);

        revisions.setWidth("100%");

        revisions.addColumn(idColumn, locale.viewCompareRevisionTableIdTitle());
        revisions.addColumn(timeColumn, locale.viewCompareRevisionTableTimeTitle());
        revisions.addColumn(authorColumn, locale.viewCompareRevisionTableAuthorTitle());
        revisions.addColumn(titleColumn, locale.viewCompareRevisionTableTitleTitle());

        selectionModel = new SingleSelectionModel<Revision>();
        selectionModel.addSelectionChangeHandler(new SelectionChangeEvent.Handler() {
            @Override
            public void onSelectionChange(SelectionChangeEvent event) {
                description.setText(selectionModel.getSelectedObject().getMessage());
                delegate.onRevisionSelected(selectionModel.getSelectedObject());
            }
        });
        revisions.setSelectionModel(selectionModel);

        revisions.addDomHandler(new DoubleClickHandler() {
            @Override
            public void onDoubleClick(DoubleClickEvent event) {
                delegate.onRevisionDoubleClicked();
            }
        }, DoubleClickEvent.getType());

        this.revisionsPanel.add(revisions);
    }

