    /** {@inheritDoc} */
    @Override
    public void onPushClicked() {
        final StatusNotification notification =
                notificationManager.notify(constant.pushProcess(), PROGRESS, FLOAT_MODE);

        final String repository = view.getRepository();
        final GitOutputConsole console = gitOutputConsoleFactory.create(PUSH_COMMAND_NAME);
        service.push(project.getLocation(), getRefs(), repository, false).then(new Operation<PushResponse>() {
            @Override
            public void apply(PushResponse response) throws OperationException {
                console.print(response.getCommandOutput());
                processesPanelPresenter.addCommandOutput(console);
                notification.setStatus(SUCCESS);
                if (response.getCommandOutput().contains("Everything up-to-date")) {
                    notification.setTitle(constant.pushUpToDate());
                } else {
                    notification.setTitle(constant.pushSuccess(repository));
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                handleError(error.getCause(), notification, console);
                processesPanelPresenter.addCommandOutput(console);
            }
        });
        view.close();
    }

