    /** {@inheritDoc} */
    @Override
    public void onPushClicked() {
        final StatusNotification notification =
                notificationManager.notify(constant.pushProcess(), PROGRESS, true, project.getRootProject());

        final String repository = view.getRepository();
        final GitOutputConsole console = gitOutputConsoleFactory.create(PUSH_COMMAND_NAME);
        service.push(appContext.getDevMachine(), project.getRootProject(), getRefs(), repository, false,
                     new AsyncRequestCallback<PushResponse>(dtoUnmarshallerFactory.newUnmarshaller(PushResponse.class)) {
                         @Override
                         protected void onSuccess(PushResponse result) {
                             console.print(result.getCommandOutput());
                             consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                             notification.setStatus(SUCCESS);
                             if (result.getCommandOutput().contains("Everything up-to-date")) {
                                 notification.setTitle(constant.pushUpToDate());
                             } else {
                                 notification.setTitle(constant.pushSuccess(repository));
                             }
                         }

                         @Override
                         protected void onFailure(Throwable exception) {
                             handleError(exception, notification, console);
                             consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), console);
                         }
                     });
        view.close();
    }

