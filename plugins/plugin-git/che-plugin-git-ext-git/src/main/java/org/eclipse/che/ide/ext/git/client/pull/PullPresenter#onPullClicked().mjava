    /** {@inheritDoc} */
    @Override
    public void onPullClicked() {
        String remoteName = view.getRepositoryName();
        final String remoteUrl = view.getRepositoryUrl();
        view.close();

        final List<EditorPartPresenter> openedEditors = new ArrayList<>();
        for (EditorPartPresenter partPresenter : editorAgent.getOpenedEditors().values()) {
            openedEditors.add(partPresenter);
        }

        final StatusNotification notification =
                notificationManager.notify(constant.pullProcess(), PROGRESS, true, project.getRootProject());
        final GitOutputConsole console = gitOutputConsoleFactory.create(PULL_COMMAND_NAME);

        gitServiceClient.pull(workspaceId, project.getRootProject(), getRefs(), remoteName,
                              new AsyncRequestCallback<PullResponse>(dtoUnmarshallerFactory.newUnmarshaller(PullResponse.class)) {
                                  @Override
                                  protected void onSuccess(PullResponse result) {
                                      console.printInfo(result.getCommandOutput());
                                      consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                                      notification.setStatus(SUCCESS);
                                      if (result.getCommandOutput().contains("Already up-to-date")) {
                                          notification.setTitle(constant.pullUpToDate());
                                      } else {
                                          refreshProject(openedEditors);
                                          notification.setTitle(constant.pullSuccess(remoteUrl));
                                      }
                                  }

                                  @Override
                                  protected void onFailure(Throwable throwable) {
                                      if (throwable.getMessage().contains("Merge conflict")) {
                                          refreshProject(openedEditors);
                                      }
                                      handleError(throwable, remoteUrl, notification, console);
                                      consolesPanelPresenter.addCommandOutput(appContext.getDevMachineId(), console);
                                  }
                              });
    }

