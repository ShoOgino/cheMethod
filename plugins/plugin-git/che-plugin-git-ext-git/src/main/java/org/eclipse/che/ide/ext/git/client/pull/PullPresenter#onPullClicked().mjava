  @Override
  public void onPullClicked() {
    view.close();

    final StatusNotification notification =
        notificationManager.notify(locale.pullProcess(), PROGRESS, FLOAT_MODE);
    GitOutputConsole console = gitOutputConsoleFactory.create(PULL_COMMAND_NAME);

    performOperationWithTokenRequestIfNeeded(
            new RemoteGitOperation<PullResponse>() {
              @Override
              public Promise<PullResponse> perform(Credentials credentials) {
                return service.pull(
                    project.getLocation(),
                    getRefs(),
                    view.getRepositoryName(),
                    view.getRebase(),
                    credentials);
              }
            })
        .then(
            response -> {
              console.print(response.getCommandOutput(), GREEN_COLOR);
              consolesPanelPresenter.addCommandOutput(console);
              notification.setStatus(SUCCESS);
              if (response.getCommandOutput().contains("Already up-to-date")) {
                notification.setTitle(locale.pullUpToDate());
              } else {
                project.synchronize();
                notification.setTitle(locale.pullSuccess(view.getRepositoryUrl()));
              }
            })
        .catchError(
            error -> {
              if (getErrorCode(error.getCause()) == MERGE_CONFLICT) {
                project.synchronize();
              }
              notification.setStatus(FAIL);
              handleError(error.getCause(), PULL_COMMAND_NAME, notification);
            });
  }

