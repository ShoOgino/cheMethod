    /**
     * Show compare window.
     *
     * @param file
     *         file name with its full path
     * @param status
     *         status of the file
     * @param revision
     *         hash of revision or branch
     */
    public void showCompareWithLatest(final File file, final Status status, final String revision) {
        this.comparedFile = file;
        this.revision = revision;
        this.compareWithLatest = true;

        if (status.equals(ADDED)) {
            showCompare("");
            return;
        }

        final Optional<Project> project = file.getRelatedProject();

        if (!project.isPresent()) {
            return;
        }

        final Path relPath = file.getLocation().removeFirstSegments(project.get().getLocation().segmentCount());

        if (status.equals(DELETED)) {
            service.showFileContent(project.get().getLocation(), relPath, revision)
                   .then(new Operation<ShowFileContentResponse>() {
                       @Override
                       public void apply(ShowFileContentResponse content) throws OperationException {
                           view.setTitle(file.getLocation().toString());
                           view.setColumnTitles(locale.compareYourVersionTitle(), revision + locale.compareReadOnlyTitle());
                           view.show(content.getContent(), "", file.getLocation().toString(), false);
                       }
                   })
                   .catchError(new Operation<PromiseError>() {
                       @Override
                       public void apply(PromiseError error) throws OperationException {
                           notificationManager.notify(error.getMessage(), FAIL, NOT_EMERGE_MODE);
                       }
                   });
        } else {
            service.showFileContent(project.get().getLocation(), relPath, revision)
                   .then(new Operation<ShowFileContentResponse>() {
                       @Override
                       public void apply(ShowFileContentResponse content) throws OperationException {
                           showCompare(content.getContent());
                       }
                   })
                   .catchError(new Operation<PromiseError>() {
                       @Override
                       public void apply(PromiseError error) throws OperationException {
                           notificationManager.notify(error.getMessage(), FAIL, NOT_EMERGE_MODE);
                       }
                   });
        }
    }

