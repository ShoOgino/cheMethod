    /**
     * Returns pattern of the files to be added.
     *
     * @return pattern of the files to be added
     */
    @NotNull
    private List<String> getMultipleFilePatterns() {

        final Selection<ResourceBasedNode<?>> selection = getExplorerSelection();

        if (selection == null || selection.isEmpty()) {
            return Collections.singletonList(ROOT_FOLDER);
        } else {
            final Set<String> paths = new HashSet<>();
            final Set<String> directories = new HashSet<>();

            for (final ResourceBasedNode<?> node : selection.getAllElements()) {
                final String normalized = normalizePath(((HasStorablePath)node).getStorablePath());
                if (ROOT_FOLDER.equals(normalized)) {
                    return Collections.singletonList(ROOT_FOLDER);
                }
                if (!node.isLeaf()) {
                    directories.add(normalized);
                } else {
                    paths.add(normalized);
                }
            }
            // filter out 'duplicates'
            final List<String> result = new ArrayList<>();
            for (final String path : paths) {
                boolean found = false;
                for (final String directory : directories) {
                    if (path.startsWith(directory)) {
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    result.add(path);
                }
            }
            // add directories to result
            result.addAll(directories);
            return result;
        }
    }

