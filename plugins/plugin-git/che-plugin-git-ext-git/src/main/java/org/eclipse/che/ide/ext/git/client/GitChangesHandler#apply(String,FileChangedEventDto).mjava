  public void apply(String endpointId, FileChangedEventDto dto) {
    Tree tree = projectExplorerPresenterProvider.get().getTree();
    tree.getNodeStorage()
        .getAll()
        .stream()
        .filter(
            node ->
                node instanceof FileNode
                    && ((ResourceNode) node)
                        .getData()
                        .getLocation()
                        .equals(Path.valueOf(dto.getPath())))
        .forEach(
            node -> {
              setVcsStatusToEditorsFile(
                  Path.valueOf(dto.getPath()), VcsStatus.from(dto.getStatus().toString()));

              ((ResourceNode) node)
                  .getData()
                  .asFile()
                  .setVcsStatus(VcsStatus.from(dto.getStatus().toString()));
              tree.refresh(node);
            });

    editorAgentProvider
        .get()
        .getOpenedEditors()
        .stream()
        .filter(
            editor ->
                editor.getEditorInput().getFile().getLocation().equals(Path.valueOf(dto.getPath()))
                    && editor instanceof HasVcsChangeMarkerRender)
        .forEach(
            editor -> {
              VcsStatus vcsStatus = VcsStatus.from(dto.getStatus().toString());
              EditorTab tab = multiPartStackProvider.get().getTabByPart(editor);
              if (vcsStatus != null) {
                tab.setTitleColor(vcsStatus.getColor());
              }
              VcsChangeMarkerRender render =
                  ((HasVcsChangeMarkerRender) editor).getVcsChangeMarkersRender();
              if (((File) editor.getEditorInput().getFile()).getVcsStatus() != MODIFIED) {
                render.clearAllChangeMarkers();
              } else {
                handleEditedRegions(dto.getEditedRegions(), render);
              }
            });
  }

