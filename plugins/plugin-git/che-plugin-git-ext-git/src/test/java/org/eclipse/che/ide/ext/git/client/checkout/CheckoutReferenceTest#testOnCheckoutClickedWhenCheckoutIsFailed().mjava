    @Test
    public void testOnCheckoutClickedWhenCheckoutIsFailed() throws Exception {
        when(dtoFactory.createDto(CheckoutRequest.class)).thenReturn(checkoutRequest);
        when(checkoutRequest.withName(anyString())).thenReturn(checkoutRequest);
        when(checkoutRequest.withCreateNew(anyBoolean())).thenReturn(checkoutRequest);

        reset(service);
        when(view.getReference()).thenReturn(CORRECT_REFERENCE);
        when(rootProjectConfig.getPath()).thenReturn(PROJECT_PATH);

        presenter.onEnterClicked();

        verify(service).checkout(anyString(), anyObject(), anyObject(), asyncCallbackCaptor.capture());
        AsyncRequestCallback<String> callback = asyncCallbackCaptor.getValue();
        GwtReflectionUtils.callOnFailure(callback, mock(Throwable.class));

        verify(checkoutRequest).withName(CORRECT_REFERENCE);
        verify(checkoutRequest).withCreateNew(false);
        verifyNoMoreInteractions(checkoutRequest);
        verify(view).close();
        verify(eventBus, never()).fireEvent(Matchers.<OpenProjectEvent>anyObject());
        verify(gitOutputConsoleFactory).create(CHECKOUT_COMMAND_NAME);
        verify(console).printError(anyString());
        verify(consolesPanelPresenter).addCommandOutput(anyString(), eq(console));
        verify(notificationManager).notify(anyString(), rootProjectConfig);
    }

