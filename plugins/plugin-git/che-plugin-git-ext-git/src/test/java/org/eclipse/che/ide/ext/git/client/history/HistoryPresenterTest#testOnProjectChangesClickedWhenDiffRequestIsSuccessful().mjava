    @Test
    public void testOnProjectChangesClickedWhenDiffRequestIsSuccessful() throws Exception {
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<String> callback = (AsyncRequestCallback<String>)arguments[7];
                Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
                onSuccess.invoke(callback, EMPTY_TEXT);
                return callback;
            }
        }).when(service)
          .diff(anyObject(), anyObject(), anyObject(), anyObject(), anyBoolean(), anyInt(), anyString(), anyBoolean(), anyObject());

        presenter.onDiffWithIndexClicked();
        presenter.onRevisionSelected(selectedRevision);
        reset(view);
        presenter.onProjectChangesClicked();

        verify(view).selectProjectChangesButton(eq(ENABLE_BUTTON));
        verify(view).selectResourceChangesButton(eq(DISABLE_BUTTON));
        verify(service, times(2))
                .diff(anyObject(), eq(rootProjectConfig), (List<String>)anyObject(), eq(RAW), eq(NO_RENAMES), eq(RENAME_LIMIT),
                      eq(REVISION_ID), anyBoolean(), (AsyncRequestCallback<String>)anyObject());
        verify(view).setDiffContext(eq(EMPTY_TEXT));
        verify(constant, times(2)).historyDiffIndexState();
        verify(view).setCommitADate(anyString());
        verify(view).setCommitARevision(anyString());
        verify(view).setCompareType(anyString());
        verify(service, times(3)).log(anyObject(), eq(rootProjectConfig), null, eq(false), (AsyncRequestCallback<LogResponse>)anyObject());
    }

