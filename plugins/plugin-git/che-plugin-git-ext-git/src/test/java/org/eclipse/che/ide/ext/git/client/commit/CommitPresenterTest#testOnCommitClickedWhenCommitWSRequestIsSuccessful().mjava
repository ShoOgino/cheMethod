    @Test
    public void testOnCommitClickedWhenCommitWSRequestIsSuccessful() throws Exception {
        when(view.getMessage()).thenReturn(COMMIT_TEXT);
        when(view.isAllFilesInclued()).thenReturn(ALL_FILE_INCLUDES);
        when(view.isAmend()).thenReturn(IS_OVERWRITTEN);
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<Revision> callback = (AsyncRequestCallback<Revision>)arguments[4];
                Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
                onSuccess.invoke(callback, revision);
                return callback;
            }
        }).when(service).commit(anyString(), anyObject(), anyString(), anyBoolean(), anyBoolean(),
                                (AsyncRequestCallback<Revision>)anyObject());

        presenter.showDialog();
        presenter.onCommitClicked();

        verify(view, times(2)).getMessage();
        verify(view).isAllFilesInclued();
        verify(view).isAmend();
        verify(view).close();
        verify(view).setMessage(eq(EMPTY_TEXT));

        verify(service).commit(anyString(), eq(rootProjectConfig), eq(COMMIT_TEXT), eq(ALL_FILE_INCLUDES), eq(IS_OVERWRITTEN),
                               (AsyncRequestCallback<Revision>)anyObject());
        verify(gitOutputConsoleFactory).create(COMMIT_COMMAND_NAME);
        verify(console).printInfo(anyString());
        verify(consolesPanelPresenter).addCommandOutput(anyString(), eq(console));
        verify(notificationManager).notify(anyString(), rootProjectConfig);
    }

