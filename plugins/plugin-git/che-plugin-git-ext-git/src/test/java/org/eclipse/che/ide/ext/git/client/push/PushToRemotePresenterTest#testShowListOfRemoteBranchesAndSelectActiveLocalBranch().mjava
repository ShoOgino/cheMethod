    @Test
    public void testShowListOfRemoteBranchesAndSelectActiveLocalBranch() throws Exception {
        final List<Branch> remoteBranches = new ArrayList<>();
        remoteBranches.add(remoteBranch);

        List<String> list = new ArrayList<>();
        list.add(remoteBranch.getDisplayName());
        when(branchSearcher.getRemoteBranchesToDisplay((BranchFilterByRemote)anyObject(), (List<Branch>)anyObject())).thenReturn(list);

        presenter.updateRemoteBranches();

        verify(service).branchList(eq(devMachine), anyObject(), eq("r"), asyncRequestCallbackArrayBranchCaptor.capture());
        AsyncRequestCallback<List<Branch>> value = asyncRequestCallbackArrayBranchCaptor.getValue();
        Method onSuccessRemotes = GwtReflectionUtils.getMethod(value.getClass(), "onSuccess");
        onSuccessRemotes.invoke(value, remoteBranches);

        verify(service).config(eq(devMachine), anyObject(), anyListOf(String.class), anyBoolean(),
                               asyncRequestCallbackMapCaptor.capture());
        AsyncRequestCallback<Map<String, String>> mapCallback = asyncRequestCallbackMapCaptor.getValue();
        Method onSuccessConfig = GwtReflectionUtils.getMethod(mapCallback.getClass(), "onSuccess");
        onSuccessConfig.invoke(mapCallback, new HashMap());

        verify(branchSearcher).getRemoteBranchesToDisplay((BranchFilterByRemote)anyObject(), eq(remoteBranches));
        verify(view).setRemoteBranches((List<String>)anyObject());
        verify(view).selectRemoteBranch(LOCAL_BRANCH);
    }

