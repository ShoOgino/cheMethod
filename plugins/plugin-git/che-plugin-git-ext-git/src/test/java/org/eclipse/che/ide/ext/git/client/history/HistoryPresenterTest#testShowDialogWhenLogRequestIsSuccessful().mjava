    @Test
    public void testShowDialogWhenLogRequestIsSuccessful() throws Exception {
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<String> callback = (AsyncRequestCallback<String>)arguments[2];
                Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
                onSuccess.invoke(callback, logResponse);
                return callback;
            }
        }).when(service).log(anyObject(), anyObject(), null, anyBoolean(), (AsyncRequestCallback<LogResponse>)anyObject());

        presenter.showDialog();

        verify(appContext).getCurrentProject();
        verify(service)
                .log(anyObject(), eq(rootProjectConfig), null, eq(TEXT_NOT_FORMATTED), (AsyncRequestCallback<LogResponse>)anyObject());
        verify(view).selectProjectChangesButton(eq(SELECTED_ITEM));
        verify(view).selectDiffWithPrevVersionButton(eq(SELECTED_ITEM));
        verify(view).setCommitADate(eq(EMPTY_TEXT));
        verify(view).setCommitARevision(eq(EMPTY_TEXT));
        verify(view).setCommitBDate(eq(EMPTY_TEXT));
        verify(view).setCommitBRevision(eq(EMPTY_TEXT));
        verify(view).setDiffContext(eq(EMPTY_TEXT));
        verify(view).setCompareType(anyString());
        verify(view).setRevisions((List<Revision>)anyObject());
        verify(workspaceAgent).openPart(eq(presenter), eq(PartStackType.TOOLING));
        verify(partStack).getActivePart();
        verify(partStack).setActivePart(eq(presenter));
    }

