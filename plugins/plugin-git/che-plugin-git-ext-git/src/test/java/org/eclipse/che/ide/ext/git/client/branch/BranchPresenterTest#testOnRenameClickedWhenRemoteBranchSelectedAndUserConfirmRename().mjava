  @Test
  public void testOnRenameClickedWhenRemoteBranchSelectedAndUserConfirmRename() throws Exception {
    reset(selectedBranch);

    when(service.branchRename(anyObject(), anyString(), anyString())).thenReturn(voidPromise);
    when(voidPromise.then(any(Operation.class))).thenReturn(voidPromise);
    when(voidPromise.catchError(any(Operation.class))).thenReturn(voidPromise);

    when(selectedBranch.getDisplayName()).thenReturn(REMOTE_BRANCH_NAME);
    when(selectedBranch.isRemote()).thenReturn(true);
    InputDialog inputDialog = mock(InputDialog.class);
    when(dialogFactory.createInputDialog(
            anyString(), anyString(), anyString(), anyInt(), anyInt(), anyObject(), anyObject()))
        .thenReturn(inputDialog);
    ConfirmDialog confirmDialog = mock(ConfirmDialog.class);
    when(dialogFactory.createConfirmDialog(anyString(), anyString(), anyObject(), anyObject()))
        .thenReturn(confirmDialog);

    selectBranch();
    presenter.onRenameClicked();

    verify(dialogFactory)
        .createConfirmDialog(
            anyString(), anyString(), confirmCallbackCaptor.capture(), anyObject());
    ConfirmCallback confirmCallback = confirmCallbackCaptor.getValue();
    confirmCallback.accepted();

    verify(dialogFactory)
        .createInputDialog(
            anyString(),
            anyString(),
            anyString(),
            anyInt(),
            anyInt(),
            inputCallbackCaptor.capture(),
            anyObject());
    InputCallback inputCallback = inputCallbackCaptor.getValue();
    inputCallback.accepted(RETURNED_MESSAGE);

    verify(voidPromise).then(voidPromiseCaptor.capture());
    voidPromiseCaptor.getValue().apply(null);

    verify(selectedBranch, times(2)).getDisplayName();
    verify(service, times(2)).branchList(anyObject(), eq(LIST_ALL));
    verify(console, never()).printError(anyString());
    verify(notificationManager, never()).notify(anyString());
    verify(constant, never()).branchRenameFailed();
  }

