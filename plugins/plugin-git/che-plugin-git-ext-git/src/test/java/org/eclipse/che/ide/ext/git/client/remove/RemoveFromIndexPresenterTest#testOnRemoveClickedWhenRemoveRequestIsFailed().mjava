    @Test
    public void testOnRemoveClickedWhenRemoveRequestIsFailed() throws Exception {
        when(view.isRemoved()).thenReturn(REMOVED);
        when(selectionAgent.getSelection()).thenReturn(null);
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<String> callback = (AsyncRequestCallback<String>)arguments[3];
                Method onFailure = GwtReflectionUtils.getMethod(callback.getClass(), "onFailure");
                onFailure.invoke(callback, mock(Throwable.class));
                return callback;
            }
        }).when(service).remove(devMachine, anyObject(), anyObject(), anyBoolean(), anyObject());

        presenter.showDialog();
        presenter.onRemoveClicked();

        verify(service).remove(eq(devMachine), eq(rootProjectConfig), anyObject(), eq(REMOVED), anyObject());
        verify(constant).removeFilesFailed();
        verify(gitOutputConsoleFactory).create(REMOVE_FROM_INDEX_COMMAND_NAME);
        verify(console).printError(anyString());
        verify(consolesPanelPresenter).addCommandOutput(anyString(), eq(console));
        verify(notificationManager).notify(anyString(), rootProjectConfig);
        verify(view).close();
    }

