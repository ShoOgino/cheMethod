    @Test
    public void testShowDialogWhenStatusRequestIsSuccessful() throws Exception {
        final Status status = mock(Status.class);
        List<String> changes = new ArrayList<String>();
        changes.add("Change");
        when(status.getAdded()).thenReturn(changes);
        when(status.getChanged()).thenReturn(changes);
        when(status.getRemoved()).thenReturn(changes);

        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<Status> callback = (AsyncRequestCallback<Status>)arguments[1];
                Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
                onSuccess.invoke(callback, status);
                return callback;
            }
        }).when(service).status(devMachine, anyObject(), (AsyncRequestCallback<Status>)anyObject());

        presenter.showDialog();

        verify(appContext).getCurrentProject();
        verify(service).status(eq(devMachine), eq(rootProjectConfig), (AsyncRequestCallback<Status>)anyObject());
        verify(view).setIndexedFiles((List<IndexFile>)anyObject());
        verify(view).showDialog();
    }

