    @Test
    public void testOnRenameClickedWhenBranchRenameRequestIsFailed() throws Exception {
        when(selectedBranch.getDisplayName()).thenReturn(BRANCH_NAME);
        when(selectedBranch.isRemote()).thenReturn(false);
        InputDialog inputDialog = mock(InputDialog.class);
        when(dialogFactory.createInputDialog(anyString(), anyString(), anyString(), anyInt(), anyInt(), anyObject(), anyObject()))
                .thenReturn(inputDialog);

        selectBranch();
        presenter.onRenameClicked();

        verify(dialogFactory).createInputDialog(anyString(), anyString(), anyString(), anyInt(), anyInt(), inputCallbackCaptor.capture(),
                                                anyObject());
        InputCallback inputCallback = inputCallbackCaptor.getValue();
        inputCallback.accepted(RETURNED_MESSAGE);

        verify(service)
                .branchRename(eq(devMachine), eq(rootProjectConfig), eq(BRANCH_NAME), eq(RETURNED_MESSAGE), asyncRequestCallbackCaptor.capture());
        AsyncRequestCallback<String> renameBranchCallback = asyncRequestCallbackCaptor.getValue();
        GwtReflectionUtils.callOnFailure(renameBranchCallback, mock(Throwable.class));

        verify(selectedBranch, times(2)).getDisplayName();
        verify(gitOutputConsoleFactory).create(BRANCH_RENAME_COMMAND_NAME);
        verify(console).printError(anyString());
        verify(consolesPanelPresenter).addCommandOutput(anyString(), eq(console));
        verify(notificationManager).notify(anyString(), anyObject(), eq(FLOAT_MODE), eq(rootProjectConfig));
        verify(constant, times(2)).branchRenameFailed();
    }

