  @Override
  public void disarm() {
    super.disarm();

    presenter =
        spy(
            new CommitPresenter(
                view,
                service,
                selectableChangesPanelPresenter,
                constant,
                notificationManager,
                dialogFactory,
                appContext,
                dateTimeFormatter,
                gitOutputConsoleFactory,
                processesPanelPresenter));

    when(view.getCommitMessage()).thenReturn(EMPTY_TEXT);

    Resource resource = mock(Resource.class);
    when(appContext.getResources()).thenReturn(new Resource[] {});
    when(appContext.getResource()).thenReturn(resource);
    when(resource.getLocation()).thenReturn(Path.valueOf("test/location"));
    when(appContext.getRootProject()).thenReturn(mock(Project.class));

    when(voidPromise.then(any(Operation.class))).thenReturn(voidPromise);
    when(voidPromise.catchError(any(Operation.class))).thenReturn(voidPromise);
    when(revisionPromise.then(any(Operation.class))).thenReturn(revisionPromise);
    when(revisionPromise.catchError(any(Operation.class))).thenReturn(revisionPromise);
    when(stringPromise.then(any(Operation.class))).thenReturn(stringPromise);
    when(stringPromise.catchError(any(Operation.class))).thenReturn(stringPromise);
    when(branchListPromise.then(any(Operation.class))).thenReturn(branchListPromise);
    when(branchListPromise.catchError(any(Operation.class))).thenReturn(branchListPromise);
    when(pushPromise.then(any(Operation.class))).thenReturn(pushPromise);
    when(logPromise.then(any(Operation.class))).thenReturn(logPromise);
    when(logPromise.catchError(any(Operation.class))).thenReturn(logPromise);
    when(statusPromise.then(any(Operation.class))).thenReturn(statusPromise);
    when(service.add(any(Path.class), anyBoolean(), any(Path[].class))).thenReturn(voidPromise);
    when(service.commit(any(Path.class), anyString(), anyBoolean(), any(Path[].class)))
        .thenReturn(revisionPromise);
    when(service.diff(
            any(Path.class),
            eq(null),
            any(DiffType.class),
            anyBoolean(),
            anyInt(),
            anyString(),
            anyBoolean()))
        .thenReturn(stringPromise);
    when(service.branchList(any(Path.class), any(BranchListMode.class)))
        .thenReturn(branchListPromise);
    when(service.push(any(Path.class), anyList(), anyString(), anyBoolean()))
        .thenReturn(pushPromise);
    when(service.log(any(Path.class), eq(null), anyInt(), anyInt(), anyBoolean()))
        .thenReturn(logPromise);
    when(service.getStatus(any(Path.class), eq(emptyList()))).thenReturn(statusPromise);
  }

