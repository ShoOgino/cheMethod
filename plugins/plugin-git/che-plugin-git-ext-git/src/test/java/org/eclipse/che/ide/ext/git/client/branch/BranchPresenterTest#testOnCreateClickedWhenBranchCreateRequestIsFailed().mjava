    @Test
    public void testOnCreateClickedWhenBranchCreateRequestIsFailed() throws Exception {
        Throwable exception = mock(Exception.class);
        InputDialog inputDialog = mock(InputDialog.class);
        when(dialogFactory.createInputDialog(anyString(), anyString(), anyObject(), anyObject())).thenReturn(inputDialog);

        presenter.showBranches();
        presenter.onCreateClicked();

        verify(dialogFactory).createInputDialog(anyString(), anyString(), inputCallbackCaptor.capture(), anyObject());
        InputCallback inputCallback = inputCallbackCaptor.getValue();
        inputCallback.accepted(BRANCH_NAME);

        verify(service).branchCreate(eq(devMachine), anyObject(), anyString(), anyString(), createBranchCallbackCaptor.capture());
        AsyncRequestCallback<Branch> createBranchCallback = createBranchCallbackCaptor.getValue();
        GwtReflectionUtils.callOnFailure(createBranchCallback, exception);

        verify(constant, times(2)).branchCreateFailed();
        verify(gitOutputConsoleFactory).create(BRANCH_CREATE_COMMAND_NAME);
        verify(console).printError(anyString());
        verify(consolesPanelPresenter).addCommandOutput(anyString(), eq(console));
        verify(notificationManager).notify(anyString(), anyObject(), eq(true), eq(rootProjectConfig));
    }

