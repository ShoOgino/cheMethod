    @Test
    public void testShowDialogWhenAllOperationsAreSuccessful() throws Exception {
        final List<Branch> branches = new ArrayList<>();
        branches.add(mock(Branch.class));

        doAnswer(invocation -> {
            Object[] arguments = invocation.getArguments();
            AsyncRequestCallback<List<Branch>> callback = (AsyncRequestCallback<List<Branch>>)arguments[2];
            Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
            onSuccess.invoke(callback, branches);
            return callback;
        }).when(service).branchList(devMachine, anyObject(), eq(LIST_LOCAL), (AsyncRequestCallback<List<Branch>>)anyObject());

        doAnswer(invocation -> {
            Object[] arguments = invocation.getArguments();
            AsyncRequestCallback<List<Branch>> callback = (AsyncRequestCallback<List<Branch>>)arguments[2];
            Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
            onSuccess.invoke(callback, branches);
            return callback;
        }).when(service).branchList(eq(devMachine), anyObject(), eq(LIST_REMOTE), (AsyncRequestCallback<List<Branch>>)anyObject());

        presenter.showDialog();

        verify(appContext).getCurrentProject();
        verify(view).setEnableMergeButton(eq(DISABLE_BUTTON));
        verify(view).showDialog();
        verify(service).branchList(eq(devMachine), eq(rootProjectConfig), eq(LIST_LOCAL), (AsyncRequestCallback<List<Branch>>)anyObject());
        verify(service).branchList(eq(devMachine), eq(rootProjectConfig), eq(LIST_REMOTE), (AsyncRequestCallback<List<Branch>>)anyObject());
        verify(view).setRemoteBranches((List<Reference>)anyObject());
        verify(view).setLocalBranches((List<Reference>)anyObject());
        verify(notificationManager, never()).notify(anyString(), rootProjectConfig);
        verify(console, never()).printError(anyString());
    }

