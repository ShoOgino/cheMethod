    @Test
    public void testDeleteRepositoryWhenDeleteRepositoryIsFailed() throws Exception {
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<Void> callback = (AsyncRequestCallback<Void>)arguments[1];
                Method onFailure = GwtReflectionUtils.getMethod(callback.getClass(), "onFailure");
                onFailure.invoke(callback, mock(Throwable.class));
                return callback;
            }
        }).when(service).deleteRepository(devMachine, anyObject(), (AsyncRequestCallback<Void>)anyObject());

        presenter.deleteRepository();

        verify(appContext).getCurrentProject();
        verify(service).deleteRepository(eq(devMachine), eq(rootProjectConfig), (AsyncRequestCallback<Void>)anyObject());
        verify(gitOutputConsoleFactory).create(DELETE_REPO_COMMAND_NAME);
        verify(console).printError(anyString());
        verify(consolesPanelPresenter).addCommandOutput(anyString(), eq(console));
        verify(notificationManager).notify(anyString(), rootProjectConfig);
    }

