    @Test
    public void testShowStatusWhenStatusTextRequestIsFailed() throws Exception {
        doAnswer(new Answer<AsyncRequestCallback<String>>() {
            @Override
            public AsyncRequestCallback<String> answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<String> callback = (AsyncRequestCallback<String>)arguments[2];
                Method onFailure = GwtReflectionUtils.getMethod(callback.getClass(), "onFailure");
                onFailure.invoke(callback, mock(Throwable.class));
                return callback;
            }
        }).when(service).statusText(anyString(),
                                    Matchers.<ProjectConfigDto>anyObject(),
                                    Matchers.<StatusFormat>anyObject(),
                                    Matchers.<AsyncRequestCallback<String>>anyObject());

        presenter.showStatus();

        verify(appContext).getCurrentProject();
        verify(service).statusText(anyString(), eq(rootProjectConfig), eq(IS_NOT_FORMATTED), Matchers.<AsyncRequestCallback<String>>anyObject());
        verify(notificationManager).notify(anyString(), rootProjectConfig);
        verify(constant).statusFailed();
    }

