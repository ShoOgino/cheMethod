    @Test
    public void testShowDialogTwoFileAreSelected() throws Exception {
        final Selection selection = mock(Selection.class);
        // first file
        final String filePath = PROJECT_PATH + PROJECT_NAME;
        final FileReferenceNode file1 = mock(FileReferenceNode.class);
        when(file1.getPath()).thenReturn(filePath);
        when(file1.getStorablePath()).thenReturn(filePath);

        //second file
        final String file2Path = PROJECT_PATH + "test2";
        final FileReferenceNode file2 = mock(FileReferenceNode.class);
        when(file2.getPath()).thenReturn(file2Path);
        when(file2.getStorablePath()).thenReturn(file2Path);

        final List<HasStorablePath> files = new ArrayList<HasStorablePath>() {{
            add(file1);
            add(file2);
        }};
        when(selection.getAllElements()).thenReturn(files);
        when(selection.getHeadElement()).thenReturn(file1);
        when(selection.isEmpty()).thenReturn(false);
        when(selection.isSingleSelection()).thenReturn(false);

        when(projectExplorer.getSelection()).thenReturn(selection);
        when(constant.addToIndexMultiple()).thenReturn(MESSAGE);
        when(this.statusResponse.isClean()).thenReturn(false);

        presenter.showDialog();

        verify(service).status(anyString(), eq(rootProjectConfig), asyncRequestCallbackStatusCaptor.capture());
        final AsyncRequestCallback<Status> callback = asyncRequestCallbackStatusCaptor.getValue();

        //noinspection NonJREEmulationClassesInClientCode
        final Method onSuccess = GwtReflectionUtils.getMethod(callback.getClass(), "onSuccess");
        onSuccess.invoke(callback, this.statusResponse);

        verify(appContext).getCurrentProject();
        verify(constant).addToIndexMultiple();
        verify(view).setMessage(eq(MESSAGE), Matchers.<List<String>>anyObject());
        verify(view).setUpdated(anyBoolean());
        verify(view).showDialog();
    }

