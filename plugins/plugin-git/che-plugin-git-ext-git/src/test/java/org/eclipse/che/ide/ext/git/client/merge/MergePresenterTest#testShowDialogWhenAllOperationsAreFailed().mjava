    @Test
    public void testShowDialogWhenAllOperationsAreFailed() throws Exception {
        doAnswer(invocation -> {
            Object[] arguments = invocation.getArguments();
            AsyncRequestCallback<List<Branch>> callback = (AsyncRequestCallback<List<Branch>>)arguments[2];
            Method onFailure = GwtReflectionUtils.getMethod(callback.getClass(), "onFailure");
            onFailure.invoke(callback, mock(Throwable.class));
            return callback;
        }).when(service).branchList(devMachine, anyObject(), eq(LIST_LOCAL), (AsyncRequestCallback<List<Branch>>)anyObject());

        doAnswer(invocation -> {
            Object[] arguments = invocation.getArguments();
            AsyncRequestCallback<List<Branch>> callback = (AsyncRequestCallback<List<Branch>>)arguments[2];
            Method onFailure = GwtReflectionUtils.getMethod(callback.getClass(), "onFailure");
            onFailure.invoke(callback, mock(Throwable.class));
            return callback;
        }).when(service).branchList(devMachine, anyObject(), eq(LIST_REMOTE), (AsyncRequestCallback<List<Branch>>)anyObject());

        presenter.showDialog();

        verify(service).branchList(eq(devMachine), eq(rootProjectConfig), eq(LIST_LOCAL), (AsyncRequestCallback<List<Branch>>)anyObject());
        verify(service).branchList(eq(devMachine), eq(rootProjectConfig), eq(LIST_REMOTE), (AsyncRequestCallback<List<Branch>>)anyObject());
        verify(gitOutputConsoleFactory).create(MERGE_COMMAND_NAME);
        verify(console, times(2)).printError(anyString());
        verify(consolesPanelPresenter).addCommandOutput(anyString(), eq(console));
        verify(notificationManager, times(2)).notify(anyString(), rootProjectConfig);
    }

