    @Test
    public void testShowDialogWhenStatusRequestIsFailed() throws Exception {
        doAnswer(new Answer() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                Object[] arguments = invocation.getArguments();
                AsyncRequestCallback<Status> callback = (AsyncRequestCallback<Status>)arguments[1];
                Method onFailure = GwtReflectionUtils.getMethod(callback.getClass(), "onFailure");
                onFailure.invoke(callback, mock(Throwable.class));
                return callback;
            }
        }).when(service).status(anyString(), anyObject(), (AsyncRequestCallback<Status>)anyObject());

        presenter.showDialog();

        verify(appContext).getCurrentProject();
        verify(service).status(anyString(), eq(rootProjectConfig), (AsyncRequestCallback<Status>)anyObject());
        verify(console).printError(anyString());
        verify(notificationManager).notify(anyString(), rootProjectConfig);
        verify(constant).statusFailed();
    }

