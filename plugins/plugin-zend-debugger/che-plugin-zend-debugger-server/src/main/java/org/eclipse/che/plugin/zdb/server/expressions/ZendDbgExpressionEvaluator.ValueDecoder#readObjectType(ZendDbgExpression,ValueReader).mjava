        private void readObjectType(ZendDbgExpression expression, ValueReader reader) {
            String className = reader.readString();
            int objectLength = reader.readInt();
            if (reader.isEnd()) {
                expression.setExpressionResult(new ZendDbgExpressionResult(className, PHP_OBJECT, objectLength));
                return;
            }
            List<IDbgExpression> childExpressions = new ArrayList<>();
            for (int i = 0; i < objectLength; i++) {
                char type = reader.readType();
                String name;
                if (type == 'i') {
                    name = Integer.toString(reader.readInt());
                } else if (type == 's') {
                    name = reader.readString();
                } else {
                    // Fall back when type is invalid
                    return;
                }
                ZendDbgExpression childExpression;
                Facet fieldFacet = MOD_PUBLIC;
                if (name.startsWith("*::")) {
                    fieldFacet = MOD_PROTECTED;
                } else if (name.contains("::")) {
                    fieldFacet = MOD_PRIVATE;
                }
                childExpression = expression.createChild(name, KIND_OBJECT_MEMBER, fieldFacet);
                childExpressions.add(childExpression);
                read(childExpression, reader);
            }
            expression.setExpressionResult(
                    new ZendDbgExpressionResult(className, PHP_OBJECT, objectLength, childExpressions));
        }

