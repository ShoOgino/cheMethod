    /**
     * Checks if remote content is equal to corresponding local one.
     *
     * @param sizeToCheck
     * @param checksumToCheck
     * @param content
     * @return <code>true</code> if is equal, <code>false</code> otherwise
     */
    public static final boolean isRemoteContentEqual(int sizeToCheck, int checksumToCheck, byte[] content) {
        int checksum;
        if (sizeToCheck == content.length) {
            checksum = getContentCheckSum(content);
            return (checksumToCheck == checksum);
        }
        // Checks if the difference is just in the line endings
        try {
            int linesCount = 0;
            byte r = 13;
            byte n = 10;
            for (byte element : content) {
                if (element == n) {
                    linesCount++;
                }
            }
            if (sizeToCheck == content.length + linesCount) {
                byte converted[] = new byte[content.length + linesCount];
                int i = 0;
                // Convert line endings UNIX -> Win
                for (byte element : content) {
                    if (element == n) {
                        converted[i] = r;
                        i++;
                    }
                    converted[i] = element;
                    i++;
                }
                checksum = getContentCheckSum(converted);
                if (checksumToCheck == checksum) {
                    return true;
                }
                // Convert line endings Win -> UNIX
                for (int j = 0; j < content.length; j++) {
                    if (content[j] == n) {
                        converted[j] = r;
                    } else if (content[j] == r) {
                        converted[j] = n;
                    }
                }
                checksum = getContentCheckSum(converted);
                return (checksumToCheck == checksum);
            }
        } catch (Exception e) {
            ZendDebugger.LOG.error(e.getMessage(), e);
        }
        return false;
    }

