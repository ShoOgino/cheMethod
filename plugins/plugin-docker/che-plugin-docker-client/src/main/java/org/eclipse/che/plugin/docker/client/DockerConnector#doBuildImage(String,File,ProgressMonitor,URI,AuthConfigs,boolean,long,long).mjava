    /**
     * Builds new docker image from specified tar archive that must contain Dockerfile.
     *
     * @param repository
     *         full repository name to be applied to newly created image
     * @param tar
     *         archived files that are needed for creation docker images (e.g. file of directories used in ADD instruction in Dockerfile).
     *         One of them must be Dockerfile.
     * @param progressMonitor
     *         ProgressMonitor for images creation process
     * @param dockerDaemonUri
     *         Uri for remote access to docker API
     * @param authConfigs
     *         Authentication configuration for private registries. Can be null.
     * @param memoryLimit
     *         Memory limit for build in bytes
     * @param memorySwapLimit
     *         Total memory in bytes (memory + swap), -1 to enable unlimited swap
     * @return image id
     * @throws IOException
     * @throws InterruptedException
     *         if build process was interrupted
     * @deprecated use {@link #buildImage(BuildImageParams, ProgressMonitor)} instead
     */
    @Deprecated
    protected String doBuildImage(String repository,
                                  File tar,
                                  final ProgressMonitor progressMonitor,
                                  URI dockerDaemonUri,
                                  AuthConfigs authConfigs,
                                  boolean doForcePull,
                                  long memoryLimit,
                                  long memorySwapLimit) throws IOException, InterruptedException {
        return buildImage(BuildImageParams.from(new File[]{new File(".")}) // used tar instead it
                                          .withRepository(repository)
                                          .withAuthConfigs(authConfigs)
                                          .withDoForcePull(doForcePull)
                                          .withMemoryLimit(memoryLimit)
                                          .withMemorySwapLimit(memorySwapLimit),
                          progressMonitor,
                          tar,
                          dockerDaemonUri);
    }

