        @Override
        public void run() {
            final String cf = containerCgroup + "cgroup.event_control";
            final String oomf = containerCgroup + "memory.oom_control";
            int efd = -1;
            int oomfd = -1;
            try {
                if ((efd = cLib.eventfd(0, 1)) == -1) {
                    LOG.error("Unable create a file descriptor for event notification");
                    return;
                }
                int cfd;
                if ((cfd = cLib.open(cf, CLibrary.O_WRONLY)) == -1) {
                    LOG.error("Unable open event control file '{}' for write", cf);
                    return;
                }
                if ((oomfd = cLib.open(oomf, CLibrary.O_RDONLY)) == -1) {
                    LOG.error("Unable open OOM event file '{}' for read", oomf);
                    return;
                }
                final byte[] data = String.format("%d %d", efd, oomfd).getBytes();
                if (cLib.write(cfd, data, data.length) != data.length) {
                    LOG.error("Unable write event control data to file '{}'", cf);
                    return;
                }
                if (cLib.close(cfd) == -1) {
                    LOG.error("Error closing of event control file '{}'", cf);
                    return;
                }
                final LongByReference eventHolder = new LongByReference();
                if (cLib.eventfd_read(efd, eventHolder) == 0) {
                    if (stopped) {
                        return;
                    }
                    LOG.warn("OOM event received for container '{}'", container);
                    if (readCgroupValue("memory.failcnt") > 0) {
                        try {
                            containerLogProcessor.process(new LogMessage(LogMessage.Type.DOCKER,
                                                                         "[ERROR] The processes in this machine need more RAM. This machine started with " +
                                                                         Size.toHumanSize(memory)));
                            containerLogProcessor.process(new LogMessage(LogMessage.Type.DOCKER,
                                                                         "[ERROR] Create a new machine configuration that allocates additional RAM or increase" +
                                                                         " the workspace RAM limit in the user dashboard."));
                        } catch (/*IOException*/ Exception e) {
                            LOG.warn(e.getMessage(), e);
                        }
                    }
                }
            } finally {
                if (!stopped) {
                    stopDetection(container);
                }
                close(oomfd);
                close(efd);
            }
        }

