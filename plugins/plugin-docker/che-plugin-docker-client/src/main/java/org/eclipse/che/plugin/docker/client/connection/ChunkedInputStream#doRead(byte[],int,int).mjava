  private int doRead(byte[] b, int off, int len) throws IOException {
    if (eof) {
      return -1;
    }
    if (chunkSize == 0) {
      chunkPos = 0;
      for (; ; ) {
        int i = input.read();
        if (i < 0) {
          throw new IOException("Can't read size of chunk");
        }
        if (i == '\n') {
          break;
        }
        chunkSizeBuf.append((char) i);
      }

      int l = chunkSizeBuf.length();
      int endSize = 0;
      while (endSize < l && Character.digit(chunkSizeBuf.charAt(endSize), 16) != -1) {
        endSize++;
      }
      try {
        chunkSize = Integer.parseInt(chunkSizeBuf.substring(0, endSize), 16);
      } catch (NumberFormatException e) {
        throw new IOException("Invalid chunk size");
      }
      chunkSizeBuf.setLength(0);
      if (chunkSize == 0) {
        eof = true;
      }
    }
    final int n = input.read(b, 0, Math.min(len - off, chunkSize - chunkPos));
    chunkPos += n;
    if (chunkPos == chunkSize) {
      if ('\r' != input.read()) { // skip '\r'
        throw new IOException("CR character is missing");
      }
      if ('\n' != input.read()) { // skip '\n'
        throw new IOException("LF character is missing");
      }
      chunkSize = 0;
      chunkPos = 0;
    }
    if (eof) {
      return -1;
    }
    return n;
  }

