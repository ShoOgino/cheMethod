  /**
   * Validates and parse docker image reference into object that holds reference components
   *
   * @param image image reference to parse
   * @throws DockerFileException if validation fails
   */
  public static DockerImageIdentifier parse(final String image) throws DockerFileException {
    if (image == null || image.isEmpty()) {
      throw new DockerFileException("Null and empty argument value is forbidden");
    }

    Matcher matcher = IMAGE_PATTERN.matcher(image);
    if (!matcher.matches()) {
      throw new DockerFileException("Provided image reference is invalid");
    }

    DockerImageIdentifier.DockerImageIdentifierBuilder identifierBuilder =
        DockerImageIdentifier.builder();
    String workingCopyOfImage = image;

    // extract digest
    int index = workingCopyOfImage.lastIndexOf('@');
    if (index != -1) {
      String digest = workingCopyOfImage.substring(index + 1);
      if (!digest.isEmpty()) {
        workingCopyOfImage = workingCopyOfImage.substring(0, index);
        identifierBuilder.setDigest(digest);
      }
    }

    // extract tag
    index = workingCopyOfImage.lastIndexOf(':');
    if (index != -1) {
      if (workingCopyOfImage.lastIndexOf('/') < index) {
        String tag = workingCopyOfImage.substring(index + 1);
        if (!tag.isEmpty()) {
          workingCopyOfImage = workingCopyOfImage.substring(0, index);
          identifierBuilder.setTag(tag);
        }
      }
    }

    // find first part of the name that can be registry or first repository part
    index = workingCopyOfImage.indexOf('/');
    String beforeSlash = index > -1 ? workingCopyOfImage.substring(0, index) : "";
    // consider first part of the name as registry if:
    // - there is dot symbol in it (consider it as dot in the hostname, e.g. eclipse.com)
    // - there is colon symbol in it (consider it as registry port mark)
    // - it is equal to 'localhost'
    if (!beforeSlash.isEmpty()
        && (beforeSlash.contains(".")
            || beforeSlash.contains(":")
            || "localhost".equals(beforeSlash))) {

      identifierBuilder
          .setRegistry(beforeSlash)
          .setRepository(workingCopyOfImage.substring(index + 1));
    } else {
      identifierBuilder.setRepository(workingCopyOfImage);
    }

    return identifierBuilder.build();
  }

