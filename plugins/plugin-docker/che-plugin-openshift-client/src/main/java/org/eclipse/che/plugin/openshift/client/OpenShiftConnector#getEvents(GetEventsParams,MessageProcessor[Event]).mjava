  @Override
  public void getEvents(final GetEventsParams params, MessageProcessor<Event> messageProcessor)
      throws OpenShiftException {
    CountDownLatch waitForClose = new CountDownLatch(1);
    Watcher<io.fabric8.kubernetes.api.model.Event> eventWatcher =
        new Watcher<io.fabric8.kubernetes.api.model.Event>() {
          @Override
          public void eventReceived(Action action, io.fabric8.kubernetes.api.model.Event event) {
            // Do nothing;
          }

          @Override
          public void onClose(KubernetesClientException e) {
            if (e == null) {
              LOG.error("Eventwatch Closed");
            } else {
              LOG.error("Eventwatch Closed" + e.getMessage());
            }
            waitForClose.countDown();
          }
        };
    try (DefaultKubernetesClient kubeClient =
        ocFactory.newKubeClient(
            openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftConfig())) {
      kubeClient
          .events()
          .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
          .watch(eventWatcher);
      try {
        waitForClose.await();
      } catch (InterruptedException e) {
        LOG.error("Thread interrupted while waiting for eventWatcher.");
        Thread.currentThread().interrupt();
      }
    }
  }

