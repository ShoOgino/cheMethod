  private PersistentVolumeClaim getClaimCheWorkspace() throws OpenShiftException {
    DefaultKubernetesClient kubeClient =
        ocFactory.newKubeClient(
            openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftConfig());
    PersistentVolumeClaimList pvcList =
        kubeClient
            .persistentVolumeClaims()
            .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
            .list();
    for (PersistentVolumeClaim pvc : pvcList.getItems()) {
      if (workspacesPersistentVolumeClaim.equals(pvc.getMetadata().getName())) {
        return pvc;
      }
    }
    Map<String, Quantity> requests = new HashMap<>();
    requests.put("storage", new Quantity(workspacesPvcQuantity));
    Map<String, String> annotations =
        Collections.singletonMap(
            OPENSHIFT_VOLUME_STORAGE_CLASS, OPENSHIFT_VOLUME_STORAGE_CLASS_NAME);
    PersistentVolumeClaim pvc =
        new PersistentVolumeClaimBuilder()
            .withNewMetadata()
            .withName(workspacesPersistentVolumeClaim)
            .withAnnotations(annotations)
            .endMetadata()
            .withNewSpec()
            .withAccessModes("ReadWriteOnce")
            .withNewResources()
            .withRequests(requests)
            .endResources()
            .endSpec()
            .build();
    pvc =
        kubeClient
            .persistentVolumeClaims()
            .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
            .create(pvc);
    LOG.info("Creating OpenShift PVC {}", pvc.getMetadata().getName());
    return pvc;
  }

