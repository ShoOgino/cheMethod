    /**
     * Creates an ImageStreamTag that tracks a given image.
     *
     * <p> Docker tags are used extensively in Che: all workspaces run on tagged images
     * tracking built stacks. For new workspaces, or when snapshots are not used, the
     * tracked image is e.g. {@code eclipse/ubuntu_jdk8}, whereas for snapshotted workspaces,
     * the tracked image is the snapshot (e.g. {@code machine_snapshot-<identifier>}.
     *
     * <p> Since OpenShift does not support the same tagging functionality as Docker,
     * tags are implemented as ImageStreamTags, where the {@code From} field is always
     * the original image, and the ImageStreamTag name is derived from both the source
     * image and the target image. This replicates functionality for Che in Docker,
     * while working differently under the hood. The ImageStream name is derived from
     * the image that is being tracked (e.g. {@code eclipse/ubuntu_jdk8}), while the tag
     * name is derived from the target image (e.g. {@code eclipse-che/che_workspace<identifier>}).
     *
     * @see DockerConnector#tag(TagParams)
     */
    @Override
    public void tag(final TagParams params) throws ImageNotFoundException, IOException {
        // E.g. `docker tag sourceImage targetImage`
        String paramsSourceImage = params.getImage();  // e.g. eclipse/ubuntu_jdk8
        String targetImage = params.getRepository();   // e.g. eclipse-che/<identifier>
        String paramsTag = params.getTag();

        String sourceImage = KubernetesStringUtils.stripTagFromPullSpec(paramsSourceImage);
        String tag         = KubernetesStringUtils.getTagNameFromPullSpec(paramsSourceImage);
        if (isNullOrEmpty(tag)) {
            tag = !isNullOrEmpty(paramsTag) ? paramsTag : "latest";
        }

        String sourceImageWithTag;
        // Check if sourceImage matches existing imageStreamTag (e.g. when tagging a snapshot)
        try {
            String sourceImageTagName = KubernetesStringUtils.convertPullSpecToTagName(sourceImage);
            ImageStreamTag existingTag = getImageStreamTagFromRepo(sourceImageTagName);
            sourceImageWithTag = existingTag.getTag().getFrom().getName();
        } catch (IOException e) {
            // Image not found.
            sourceImageWithTag = String.format("%s:%s", sourceImage, tag);
        }

        String imageStreamTagName = KubernetesStringUtils.createImageStreamTagName(sourceImageWithTag,
                                                                                   targetImage);

        createImageStreamTag(sourceImageWithTag, imageStreamTagName);
    }

