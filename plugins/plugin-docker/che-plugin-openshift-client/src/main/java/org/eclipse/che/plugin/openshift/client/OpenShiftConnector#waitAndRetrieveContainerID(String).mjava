  private String waitAndRetrieveContainerID(String deploymentName) throws IOException {
    DefaultKubernetesClient kubeClient =
        ocFactory.newKubeClient(
            openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftConfig());
    for (int i = 0; i < OPENSHIFT_WAIT_POD_TIMEOUT; i++) {
      try {
        Thread.sleep(OPENSHIFT_WAIT_POD_DELAY);
      } catch (InterruptedException ex) {
        Thread.currentThread().interrupt();
      }

      List<Pod> pods =
          kubeClient
              .pods()
              .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
              .withLabel(OPENSHIFT_DEPLOYMENT_LABEL, deploymentName)
              .list()
              .getItems();

      if (pods.size() < 1) {
        throw new OpenShiftException(
            String.format("Pod with deployment name %s not found", deploymentName));
      } else if (pods.size() > 1) {
        throw new OpenShiftException(
            String.format("Multiple pods with deployment name %s found", deploymentName));
      }

      Pod pod = pods.get(0);
      String status = pod.getStatus().getPhase();
      if (OPENSHIFT_POD_STATUS_RUNNING.equals(status)) {
        String containerID = pod.getStatus().getContainerStatuses().get(0).getContainerID();
        String normalizedID = KubernetesStringUtils.normalizeContainerID(containerID);
        kubeClient
            .pods()
            .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
            .withName(pod.getMetadata().getName())
            .edit()
            .editMetadata()
            .addToLabels(
                CHE_CONTAINER_IDENTIFIER_LABEL_KEY,
                KubernetesStringUtils.getLabelFromContainerID(normalizedID))
            .endMetadata()
            .done();
        return normalizedID;
      }
    }
    return null;
  }

