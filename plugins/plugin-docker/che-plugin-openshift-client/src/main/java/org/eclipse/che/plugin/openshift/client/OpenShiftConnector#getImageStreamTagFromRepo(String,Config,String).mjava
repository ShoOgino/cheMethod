  /**
   * Gets the ImageStreamTag corresponding to a given tag name (i.e. without the repository)
   *
   * @param imageStreamTagName the tag name to search for
   * @return
   * @throws IOException if either no matching tag is found, or there are multiple matches.
   */
  private ImageStreamTag getImageStreamTagFromRepo(
      String imageStreamTagName, Config openshiftConfig, String openshiftNamespace)
      throws IOException {

    // Note: ideally, ImageStreamTags could be identified with a label, but it seems like
    // ImageStreamTags do not support labels.
    List<ImageStreamTag> imageStreams;
    try (OpenShiftClient openShiftClient = new DefaultOpenShiftClient(openshiftConfig)) {
      imageStreams =
          openShiftClient.imageStreamTags().inNamespace(openshiftNamespace).list().getItems();
    }

    // We only get ImageStreamTag names here, since these ImageStreamTags do not include
    // Docker metadata, for some reason.
    List<String> imageStreamTags =
        imageStreams
            .stream()
            .filter(
                e -> {
                  String tagName =
                      KubernetesStringUtils.getTagNameFromPullSpec(e.getMetadata().getName());
                  return imageStreamTagName.length() >= tagName.length()
                      ? imageStreamTagName.contains(tagName)
                      : tagName.contains(imageStreamTagName);
                })
            .map(e -> e.getMetadata().getName())
            .collect(Collectors.toList());

    if (imageStreamTags.size() < 1) {
      throw new OpenShiftException(
          String.format("ImageStreamTag %s not found!", imageStreamTagName));
    } else if (imageStreamTags.size() > 1) {
      throw new OpenShiftException(
          String.format("Multiple ImageStreamTags found for name %s", imageStreamTagName));
    }

    String imageStreamTag = imageStreamTags.get(0);

    // Finally, get the ImageStreamTag, with Docker metadata.
    return getImageStreamTag(imageStreamTag, openshiftConfig, openshiftNamespace);
  }

