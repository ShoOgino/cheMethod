  @Inject
  public OpenShiftConnector(
      OpenshiftWorkspaceEnvironmentProvider openshiftUserAccountProvider,
      DockerConnectorConfiguration connectorConfiguration,
      DockerConnectionFactory connectionFactory,
      DockerRegistryAuthResolver authResolver,
      DockerApiVersionPathPrefixProvider dockerApiVersionPathPrefixProvider,
      OpenShiftPvcHelper openShiftPvcHelper,
      OpenShiftRouteCreator openShiftRouteCreator,
      OpenShiftDeploymentCleaner openShiftDeploymentCleaner,
      EventService eventService,
      @Nullable @Named("che.docker.ip.external") String cheServerExternalAddress,
      WorkspacesRoutingSuffixProvider cheWorkspacesRoutingSuffixProvider,
      @Named("che.openshift.project") String openShiftCheProjectName,
      @Named("che.openshift.liveness.probe.delay") int openShiftLivenessProbeDelay,
      @Named("che.openshift.liveness.probe.timeout") int openShiftLivenessProbeTimeout,
      @Named("che.openshift.workspaces.pvc.name") String workspacesPersistentVolumeClaim,
      @Named("che.openshift.workspaces.pvc.quantity") String workspacesPvcQuantity,
      @Named("che.workspace.storage") String cheWorkspaceStorage,
      @Named("che.workspace.projects.storage") String cheWorkspaceProjectsStorage,
      @Nullable @Named("che.openshift.workspace.memory.request") String cheWorkspaceMemoryRequest,
      @Nullable @Named("che.openshift.workspace.memory.override") String cheWorkspaceMemoryLimit,
      @Named("che.openshift.secure.routes") boolean secureRoutes,
      @Named("che.openshift.precreate.workspace.dirs") boolean createWorkspaceDirs) {

    super(
        connectorConfiguration,
        connectionFactory,
        authResolver,
        dockerApiVersionPathPrefixProvider);
    this.openshiftWorkspaceEnvironmentProvider = openshiftUserAccountProvider;
    this.cheServerExternalAddress = cheServerExternalAddress;
    this.cheWorkspacesRoutingSuffixProvider = cheWorkspacesRoutingSuffixProvider;
    this.openShiftCheProjectName = openShiftCheProjectName;
    this.openShiftLivenessProbeDelay = openShiftLivenessProbeDelay;
    this.openShiftLivenessProbeTimeout = openShiftLivenessProbeTimeout;
    this.workspacesPersistentVolumeClaim = workspacesPersistentVolumeClaim;
    this.workspacesPvcQuantity = workspacesPvcQuantity;
    this.cheWorkspaceStorage = cheWorkspaceStorage;
    this.cheWorkspaceProjectsStorage = cheWorkspaceProjectsStorage;
    this.cheWorkspaceMemoryRequest = cheWorkspaceMemoryRequest;
    this.cheWorkspaceMemoryLimit = cheWorkspaceMemoryLimit;
    this.secureRoutes = secureRoutes;
    this.createWorkspaceDirs = createWorkspaceDirs;
    this.openShiftPvcHelper = openShiftPvcHelper;
    this.openShiftRouteCreator = openShiftRouteCreator;
    this.openShiftDeploymentCleaner = openShiftDeploymentCleaner;
    eventService.subscribe(
        new EventSubscriber<ServerIdleEvent>() {

          @Override
          public void onEvent(ServerIdleEvent event) {
            idleCheServer(event);
          }
        });
    LOG.info("openshiftWorkspaceEnvironmentProvider = {}", openshiftUserAccountProvider.getClass());
  }

