    private void waitUntilWorkspacePodIsDeleted(final String deploymentName, final String namespace) throws OpenShiftException {
        try (OpenShiftClient client = new DefaultOpenShiftClient()) {
            FilterWatchListDeletable<Pod, PodList, Boolean, Watch, Watcher<Pod>> pods = client.pods()
                                                                                              .inNamespace(namespace)
                                                                                              .withLabel(OpenShiftConnector.OPENSHIFT_DEPLOYMENT_LABEL, deploymentName);

            int numberOfPodsToStop = pods.list().getItems().size();
            LOG.info("Number of workspace pods to stop {}", numberOfPodsToStop);
            if (numberOfPodsToStop > 0) {
                final CountDownLatch podCount = new CountDownLatch(numberOfPodsToStop);
                pods.watch(new Watcher<Pod>() {
                    @Override
                    public void eventReceived(Action action, Pod pod) {
                        try {
                            switch (action) {
                                case ADDED:
                                case MODIFIED:
                                case ERROR:
                                    break;
                                case DELETED:
                                    LOG.info("Pod {} deleted", pod.getMetadata().getName());
                                    podCount.countDown();
                                    break;
                            }
                        } catch (Exception e) {
                            LOG.error("Failed to process {} on Pod {}. Error: ", action, pod, e);
                        }
                    }

                    @Override
                    public void onClose(KubernetesClientException ex) {
                    }
                });

                try {
                    LOG.info("Waiting for all pods to be deleted for deployment '{}'", deploymentName);
                    podCount.await(OPENSHIFT_POD_DELETION_TIMEOUT, TimeUnit.SECONDS);
                } catch (InterruptedException e) {
                    LOG.error("Exception while waiting for pods to be deleted", e);
                    throw new OpenShiftException("Timeout while waiting for pods to terminate", e);
                }
            }
        }
    }

