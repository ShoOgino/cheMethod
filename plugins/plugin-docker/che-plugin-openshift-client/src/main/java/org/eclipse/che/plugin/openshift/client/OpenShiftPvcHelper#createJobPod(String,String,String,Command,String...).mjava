    /**
     * Creates a pod with {@code command} and reports whether it succeeded
     * @param workspacesPvcName
     *            name of the PVC to mount
     * @param projectNamespace
     *            OpenShift namespace
     * @param jobNamePrefix
     *            prefix used for pod metadata name. Name structure will normally
     *            be {@code <prefix><workspaceDirs>} if only one path is passed, or
     *            {@code <prefix>batch} if multiple paths are provided
     * @param command
     *            command to execute in PVC.
     * @param workspaceDirs
     *            list of arguments attached to command. A list of directories to
     *            create/delete.
     * @return true if Pod terminates with phase "Succeeded" or mkdir command issued
     *            for already created worksapce, false otherwise.
     *
     * @see Command
     */
    protected boolean createJobPod(String workspacesPvcName,
                                   String projectNamespace,
                                   String jobNamePrefix,
                                   Command command,
                                   String... workspaceDirs) {

        if (workspaceDirs.length == 0) {
            return true;
        }

        if (Command.MAKE.equals(command)) {
            String[] dirsToCreate = filterDirsToCreate(workspaceDirs);
            if (dirsToCreate.length == 0) {
                return true;
            }
            workspaceDirs = dirsToCreate;
        }

        VolumeMount vm = new VolumeMountBuilder()
                .withMountPath("/projects")
                .withName(workspacesPvcName)
                .build();

        PersistentVolumeClaimVolumeSource pvcs = new PersistentVolumeClaimVolumeSourceBuilder()
                .withClaimName(workspacesPvcName)
                .build();

        Volume volume = new VolumeBuilder()
                .withPersistentVolumeClaim(pvcs)
                .withName(workspacesPvcName)
                .build();

        String[] jobCommand = getCommand(command, "/projects/", workspaceDirs);
        LOG.info("Executing command {} in PVC {} for {} dirs", jobCommand[0], workspacesPvcName, workspaceDirs.length);

        Map<String, Quantity> limit = Collections.singletonMap("memory", new Quantity(jobMemoryLimit));

        String podName = workspaceDirs.length > 1 ? jobNamePrefix + "batch"
                                                  : jobNamePrefix + workspaceDirs[0];

        Container container = new ContainerBuilder().withName(podName)
                                                    .withImage(jobImage)
                                                    .withImagePullPolicy("IfNotPresent")
                                                    .withNewSecurityContext()
                                                        .withPrivileged(false)
                                                    .endSecurityContext()
                                                    .withCommand(jobCommand)
                                                    .withVolumeMounts(vm)
                                                    .withNewResources()
                                                        .withLimits(limit)
                                                    .endResources()
                                                    .build();

        Pod podSpec = new PodBuilder().withNewMetadata()
                                       .withName(podName)
                                   .endMetadata()
                                   .withNewSpec()
                                       .withContainers(container)
                                       .withVolumes(volume)
                                       .withRestartPolicy("Never")
                                   .endSpec()
                                   .build();


        try (OpenShiftClient openShiftClient = new DefaultOpenShiftClient()){
            openShiftClient.pods().inNamespace(projectNamespace).create(podSpec);
            boolean completed = false;
            while(!completed) {
                Pod pod = openShiftClient.pods().inNamespace(projectNamespace).withName(podName).get();
                String phase = pod.getStatus().getPhase();
                switch (phase) {
                    case POD_PHASE_FAILED:
                        LOG.info("Pod command {} failed", Arrays.toString(jobCommand));
                    case POD_PHASE_SUCCEEDED:
                        openShiftClient.resource(pod).delete();
                        updateCreatedDirs(command, phase, workspaceDirs);
                        return POD_PHASE_SUCCEEDED.equals(phase);
                    default:
                        Thread.sleep(1000);
                }
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        return false;
    }

