  @Override
  public ContainerInfo inspectContainer(String containerId) throws IOException {

    Pod pod = getChePodByContainerId(containerId);
    if (pod == null) {
      LOG.warn("No Pod found by container ID {}", containerId);
      return null;
    }

    String deploymentName = pod.getMetadata().getLabels().get(OPENSHIFT_DEPLOYMENT_LABEL);
    if (deploymentName == null) {
      LOG.warn(
          "No label {} found for Pod {}", OPENSHIFT_DEPLOYMENT_LABEL, pod.getMetadata().getName());
      return null;
    }

    Deployment deployment;
    try (OpenShiftClient client = new DefaultOpenShiftClient()) {
      deployment = client.extensions().deployments().withName(deploymentName).get();
      if (deployment == null) {
        LOG.warn(
            "No deployment matching label {}={} found", OPENSHIFT_DEPLOYMENT_LABEL, deploymentName);
        return null;
      }
    }

    List<Container> deploymentContainers =
        deployment.getSpec().getTemplate().getSpec().getContainers();
    if (deploymentContainers.size() > 1) {
      throw new OpenShiftException("Multiple Containers found in Pod.");
    } else if (deploymentContainers.size() < 1
        || isNullOrEmpty(deploymentContainers.get(0).getImage())) {
      throw new OpenShiftException(String.format("Container %s not found", containerId));
    }
    String podPullSpec = deploymentContainers.get(0).getImage();

    String tagName = KubernetesStringUtils.getTagNameFromPullSpec(podPullSpec);

    ImageStreamTag tag = getImageStreamTagFromRepo(tagName);
    ImageInfo imageInfo = getImageInfoFromTag(tag);

    Service svc = getCheServiceBySelector(OPENSHIFT_DEPLOYMENT_LABEL, deploymentName);
    if (svc == null) {
      LOG.warn("No Service found by selector {}={}", OPENSHIFT_DEPLOYMENT_LABEL, deploymentName);
      return null;
    }

    return createContainerInfo(svc, imageInfo, pod, containerId);
  }

