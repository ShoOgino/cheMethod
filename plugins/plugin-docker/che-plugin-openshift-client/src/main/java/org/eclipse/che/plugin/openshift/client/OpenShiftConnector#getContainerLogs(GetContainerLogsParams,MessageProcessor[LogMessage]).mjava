  @Override
  public void getContainerLogs(
      final GetContainerLogsParams params, MessageProcessor<LogMessage> containerLogsProcessor)
      throws IOException {
    String container = params.getContainer(); // container ID
    Pod pod = getChePodByContainerId(container);
    if (pod != null) {
      String podName = pod.getMetadata().getName();
      boolean[] ret = new boolean[1];
      ret[0] = false;
      OpenShiftClient openShiftClient =
          new DefaultOpenShiftClient(
              openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftConfig());
      try (LogWatch watchLog =
          openShiftClient
              .pods()
              .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
              .withName(podName)
              .watchLog()) {
        Watcher<Pod> watcher =
            new Watcher<Pod>() {

              @Override
              public void eventReceived(Action action, Pod resource) {
                if (action == Action.DELETED) {
                  ret[0] = true;
                }
              }

              @Override
              public void onClose(KubernetesClientException cause) {
                ret[0] = true;
              }
            };
        openShiftClient
            .pods()
            .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
            .withName(podName)
            .watch(watcher);
        Thread.sleep(5000);
        InputStream is = watchLog.getOutput();
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(is));
        while (!ret[0]) {
          String line = bufferedReader.readLine();
          containerLogsProcessor.process(new LogMessage(LogMessage.Type.DOCKER, line));
        }
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
      } catch (IOException e) {
        // The kubernetes client throws an exception (Pipe not connected) when pod doesn't contain
        // any logs.
        // We can ignore it.
      } finally {
        openShiftClient.close();
      }
    }
  }

