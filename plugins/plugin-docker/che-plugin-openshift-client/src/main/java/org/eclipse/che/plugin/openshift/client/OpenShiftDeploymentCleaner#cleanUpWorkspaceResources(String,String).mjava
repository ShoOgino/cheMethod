  private void cleanUpWorkspaceResources(final String deploymentName, final String namespace)
      throws IOException {
    Deployment deployment =
        KubernetesResourceUtil.getDeploymentByName(
            deploymentName, namespace, openshiftUserAccountProvider.getWorkspacesOpenshiftConfig());
    Service service =
        KubernetesResourceUtil.getServiceBySelector(
            OpenShiftConnector.OPENSHIFT_DEPLOYMENT_LABEL,
            deploymentName,
            namespace,
            openshiftUserAccountProvider.getWorkspacesOpenshiftConfig());
    List<Route> routes =
        KubernetesResourceUtil.getRoutesByLabel(
            OpenShiftConnector.OPENSHIFT_DEPLOYMENT_LABEL,
            deploymentName,
            namespace,
            openshiftUserAccountProvider.getWorkspacesOpenshiftConfig());
    List<ReplicaSet> replicaSets =
        KubernetesResourceUtil.getReplicaSetByLabel(
            OpenShiftConnector.OPENSHIFT_DEPLOYMENT_LABEL,
            deploymentName,
            namespace,
            openshiftUserAccountProvider.getWorkspacesOpenshiftConfig());

    try (OpenShiftClient openShiftClient =
        new DefaultOpenShiftClient(openshiftUserAccountProvider.getWorkspacesOpenshiftConfig())) {
      if (routes != null) {
        for (Route route : routes) {
          LOG.info("Removing OpenShift Route {}", route.getMetadata().getName());
          openShiftClient.resource(route).delete();
        }
      }

      if (service != null) {
        LOG.info("Removing OpenShift Service {}", service.getMetadata().getName());
        openShiftClient.resource(service).delete();
      }

      if (deployment != null) {
        LOG.info("Removing OpenShift Deployment {}", deployment.getMetadata().getName());
        openShiftClient.resource(deployment).delete();
      }

      if (replicaSets != null && replicaSets.size() > 0) {
        LOG.info("Removing OpenShift ReplicaSets for deployment {}", deploymentName);
        replicaSets.forEach(rs -> openShiftClient.resource(rs).delete());
      }
    }
  }

