  private String retrieveApiEndpoint() {
    OpenShiftClient oc = ocFactory.newOcClient();
    Service cheService =
        oc.services()
            .inNamespace(openShiftCheProjectName)
            .withName(OPENSHIFT_CHE_SERVER_SERVICE_NAME)
            .get();
    if (cheService != null) {
      if (openshiftWorkspaceEnvironmentProvider.areWorkspacesExternal()) {
        RouteList routes = oc.routes().inNamespace(openShiftCheProjectName).list();
        for (Route route : routes.getItems()) {
          RouteSpec spec = route.getSpec();
          RouteTargetReference target = spec.getTo();
          if (target != null
              && "Service".equalsIgnoreCase(target.getKind())
              && OPENSHIFT_CHE_SERVER_SERVICE_NAME.equals(target.getName())) {
            String host = spec.getHost();
            String protocol = spec.getTls() != null ? "https://" : "http://";
            return protocol + host + "/wsmaster/api";
          }
        }
      } else {
        ServiceSpec spec = cheService.getSpec();
        String host = spec.getClusterIP();
        String protocol = "http://";
        String port = "";
        List<ServicePort> ports = spec.getPorts();
        if (!ports.isEmpty()) {
          port = ":" + ports.get(0).getPort();
        }
        return protocol + host + port + "/wsmaster/api";
      }
    }
    return null;
  }

