  /**
   * Creates a new ImageStreamTag
   *
   * @param sourceImageWithTag the image that the ImageStreamTag will track
   * @param imageStreamTagName the name of the imageStream tag (e.g. {@code <ImageStream name>:<Tag
   *     name>})
   * @return the created ImageStreamTag
   * @throws IOException When {@code sourceImageWithTag} metadata cannot be found
   */
  private ImageStreamTag createImageStreamTag(String sourceImageWithTag, String imageStreamTagName)
      throws IOException {

    try {
      OpenShiftClient openShiftClient =
          ocFactory.newOcClient(
              openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftConfig());
      openShiftClient
          .imageStreamTags()
          .inNamespace(openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
          .createOrReplaceWithNew()
          .withNewMetadata()
          .withName(imageStreamTagName)
          .endMetadata()
          .withNewTag()
          .withNewFrom()
          .withKind("DockerImage")
          .withName(sourceImageWithTag)
          .endFrom()
          .endTag()
          .done();

      // Wait for image metadata to be pulled
      for (int waitCount = 0; waitCount < OPENSHIFT_IMAGESTREAM_MAX_WAIT_COUNT; waitCount++) {
        Thread.sleep(OPENSHIFT_IMAGESTREAM_WAIT_DELAY);
        ImageStreamTag createdTag =
            openShiftClient
                .imageStreamTags()
                .inNamespace(
                    openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace())
                .withName(imageStreamTagName)
                .get();
        if (createdTag != null) {
          LOG.info(
              String.format(
                  "Created ImageStreamTag %s in namespace %s",
                  createdTag.getMetadata().getName(),
                  openshiftWorkspaceEnvironmentProvider.getWorkspacesOpenshiftNamespace()));
          return createdTag;
        }
      }

      throw new ImageNotFoundException(String.format("Image %s not found.", sourceImageWithTag));

    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new IOException(e.getLocalizedMessage(), e);
    }
  }

