    @Test
    public void shouldReturnServicePortNameWhenKnownPortNumberIsProvided() {
        // Given
        Map<String, Map<String, String>> exposedPorts = new HashMap<>();
        exposedPorts.put("22/tcp",null);
        exposedPorts.put("4401/tcp",null);
        exposedPorts.put("4403/tcp",null);
        exposedPorts.put("4411/tcp",null);
        exposedPorts.put("4412/tcp",null);
        exposedPorts.put("8080/tcp",null);
        exposedPorts.put("8000/tcp",null);
        exposedPorts.put("9876/tcp",null);
        Map<String, String> portsToRefName = new HashMap<>();
        portsToRefName.put("22/tcp", "sshd");
        portsToRefName.put("4401/tcp", "wsagent");
        portsToRefName.put("4403/tcp", "wsagent-jpda");
        portsToRefName.put("4411/tcp", "terminal");
        portsToRefName.put("4412/tcp", "exec-agent");
        portsToRefName.put("8080/tcp", "tomcat");
        portsToRefName.put("8000/tcp", "tomcat-jpda");
        portsToRefName.put("9876/tcp", "codeserver");

        Set<String> expectedPortNames = new HashSet<>();
        expectedPortNames.add("sshd");
        expectedPortNames.add("wsagent");
        expectedPortNames.add("wsagent-jpda");
        expectedPortNames.add("terminal");
        expectedPortNames.add("exec-agent");
        expectedPortNames.add("tomcat");
        expectedPortNames.add("tomcat-jpda");
        expectedPortNames.add("codeserver");

        // When
        List<ServicePort> servicePorts = KubernetesService.getServicePortsFrom(exposedPorts.keySet(), portsToRefName);
        List<String> actualPortNames = servicePorts.stream().
                map(p -> p.getName()).collect(Collectors.toList());

        // Then
        assertTrue(actualPortNames.stream().allMatch(expectedPortNames::contains));
    }

