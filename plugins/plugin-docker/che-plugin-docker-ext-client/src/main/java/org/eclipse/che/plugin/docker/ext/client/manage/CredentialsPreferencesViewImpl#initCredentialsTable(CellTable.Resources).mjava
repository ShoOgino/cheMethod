    private void initCredentialsTable(CellTable.Resources res) {
        keys = new CellTable<>(15, res);
        Column<AuthConfig, String> serverAddressColumn = new Column<AuthConfig, String>(new TextCell()) {
            @Override
            public String getValue(AuthConfig object) {
                return object.getServeraddress();
            }

            @Override
            public void render(Cell.Context context, AuthConfig object, SafeHtmlBuilder sb) {
                sb.appendHtmlConstant("<div id=\"" + UIObject.DEBUG_ID_PREFIX + "preferences-docker-credentials-cellTable-serveraddress-"
                                      + context.getIndex() + "\">");
                super.render(context, object, sb);
            }
        };
        serverAddressColumn.setSortable(true);

        Column<AuthConfig, String> editColumn = new Column<AuthConfig, String>(new ButtonCell()) {
            @Override
            public String getValue(AuthConfig object) {
                return "Edit";
            }

            @Override
            public void render(Cell.Context context, AuthConfig object, SafeHtmlBuilder sb) {
                if (object != null) {
                    sb.appendHtmlConstant("<div id=\"" + UIObject.DEBUG_ID_PREFIX + "preferences-docker-credentials-cellTable-edit-"
                                          + context.getIndex() + "\">");
                    super.render(context, object, sb);
                }
            }
        };
        // Creates handler on button clicked
        editColumn.setFieldUpdater(new FieldUpdater<AuthConfig, String>() {
            @Override
            public void update(int index, AuthConfig object, String value) {
                delegate.onEditClicked(object);
            }
        });

        Column<AuthConfig, String> deleteColumn = new Column<AuthConfig, String>(new ButtonCell()) {
            @Override
            public String getValue(AuthConfig object) {
                return "Delete";
            }

            @Override
            public void render(Cell.Context context, AuthConfig object, SafeHtmlBuilder sb) {
                if (object != null) {
                    sb.appendHtmlConstant(
                            "<div id=\"" + UIObject.DEBUG_ID_PREFIX + "preferences-docker-credentials-cellTable-delete-"
                            + context.getIndex() + "\">");
                    super.render(context, object, sb);
                }
            }
        };
        // Creates handler on button clicked
        deleteColumn.setFieldUpdater(new FieldUpdater<AuthConfig, String>() {
            @Override
            public void update(int index, AuthConfig object, String value) {
                delegate.onDeleteClicked(object);
            }
        });

        keys.addColumn(serverAddressColumn, "Server Address");
        keys.addColumn(editColumn, "");//Do not show label for edit column
        keys.addColumn(deleteColumn, "");//Do not show label for delete column
        keys.setColumnWidth(serverAddressColumn, 70, Style.Unit.PCT);
        keys.setColumnWidth(editColumn, 20, Style.Unit.PX);
        keys.setColumnWidth(deleteColumn, 20, Style.Unit.PX);

        // don't show loading indicator
        keys.setLoadingIndicator(null);
    }

