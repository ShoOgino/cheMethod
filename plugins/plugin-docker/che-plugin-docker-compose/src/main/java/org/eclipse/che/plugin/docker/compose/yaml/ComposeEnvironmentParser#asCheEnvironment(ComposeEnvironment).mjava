  private CheServicesEnvironmentImpl asCheEnvironment(ComposeEnvironment composeEnvironment) {
    Map<String, CheServiceImpl> services =
        Maps.newHashMapWithExpectedSize(composeEnvironment.getServices().size());
    for (Map.Entry<String, ComposeServiceImpl> composeServiceEntry :
        composeEnvironment.getServices().entrySet()) {
      ComposeServiceImpl service = composeServiceEntry.getValue();

      CheServiceImpl cheService =
          new CheServiceImpl()
              .withCommand(service.getCommand())
              .withContainerName(service.getContainerName())
              .withDependsOn(service.getDependsOn())
              .withEntrypoint(service.getEntrypoint())
              .withEnvironment(service.getEnvironment())
              .withExpose(service.getExpose())
              .withImage(service.getImage())
              .withLabels(service.getLabels())
              .withLinks(service.getLinks())
              .withMemLimit(service.getMemLimit())
              .withNetworks(service.getNetworks())
              .withPorts(service.getPorts())
              .withVolumes(service.getVolumes())
              .withVolumesFrom(service.getVolumesFrom());

      if (service.getBuild() != null) {
        cheService.setBuild(
            new CheServiceBuildContextImpl()
                .withContext(service.getBuild().getContext())
                .withDockerfilePath(service.getBuild().getDockerfile())
                .withArgs(service.getBuild().getArgs()));
      }

      services.put(composeServiceEntry.getKey(), cheService);
    }
    return new CheServicesEnvironmentImpl(services);
  }

