    @BeforeMethod
    public void setUp() throws Exception {
        when(environmentEngine.getMachine(workspaceId1, machineId1)).thenReturn(instance);
        when(environmentEngine.getMachine(workspaceId2, machineId2)).thenThrow(new NotFoundException("test"));
        when(machineImpl1.getId()).thenReturn(machineId1);
        when(machineImpl1.getWorkspaceId()).thenReturn(workspaceId1);

        when(dockerConnector.listContainers()).thenReturn(asList(container1, container2, container3));

        when(container1.getNames()).thenReturn(new String[] {containerName1});
        when(container1.getStatus()).thenReturn(RUNNING_STATUS);
        when(container1.getId()).thenReturn(containerId1);

        when(container2.getNames()).thenReturn(new String[] {containerName2});
        when(container2.getStatus()).thenReturn(RUNNING_STATUS);
        when(container2.getId()).thenReturn(containerId2);

        when(container3.getNames()).thenReturn(new String[] {containerName3});
        when(container3.getStatus()).thenReturn(RUNNING_STATUS);
        when(container3.getId()).thenReturn(containerId3);

        when(nameGenerator.parse(containerName1)).thenReturn(of(containerNameInfo1));
        when(nameGenerator.parse(containerName2)).thenReturn(of(containerNameInfo2));
        when(nameGenerator.parse(containerName3)).thenReturn(of(containerNameInfo3));

        when(containerNameInfo1.getMachineId()).thenReturn(machineId1);
        when(containerNameInfo1.getWorkspaceId()).thenReturn(workspaceId1);

        when(containerNameInfo2.getMachineId()).thenReturn(machineId2);
        when(containerNameInfo2.getWorkspaceId()).thenReturn(workspaceId2);

        when(containerNameInfo3.getMachineId()).thenReturn(machineId2);
        when(containerNameInfo3.getWorkspaceId()).thenReturn(workspaceId2);
    }

