    @Test
    public void shouldAllowToUsePortFromDockerLabelsWithoutTransportProtocol() throws Exception {
        // given
        runtimeInfo = new DockerInstanceRuntimeInfo(containerInfo,
                                                    CONTAINER_HOST,
                                                    machineConfig,
                                                    Collections.emptySet(),
                                                    Collections.emptySet());
        Map<String, List<PortBinding>> ports = new HashMap<>();
        when(networkSettings.getPorts()).thenReturn(ports);
        Map<String, String> labels = new HashMap<>();
        when(containerConfig.getLabels()).thenReturn(labels);
        ports.put("8080/tcp", Collections.singletonList(new PortBinding().withHostIp(DEFAULT_ADDRESS)
                                                                         .withHostPort("32100")));
        ports.put("8080/udp", Collections.singletonList(new PortBinding().withHostIp(DEFAULT_ADDRESS)
                                                                         .withHostPort("32102")));
        ports.put("8000/tcp", Collections.singletonList(new PortBinding().withHostIp(DEFAULT_ADDRESS)
                                                                         .withHostPort("32103")));
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080" + SERVER_CONF_LABEL_REF_SUFFIX, "myserv1");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080" + SERVER_CONF_LABEL_PROTOCOL_SUFFIX, "http");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080/udp" + SERVER_CONF_LABEL_REF_SUFFIX, "myserv1-tftp");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080/udp" + SERVER_CONF_LABEL_PROTOCOL_SUFFIX, "tftp");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8000" + SERVER_CONF_LABEL_REF_SUFFIX, "myserv2");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8000/tcp" + SERVER_CONF_LABEL_PROTOCOL_SUFFIX, "tcp");
        final HashMap<String, ServerImpl> expectedServers = new HashMap<>();
        expectedServers.put("8080/tcp", new ServerImpl("myserv1",
                                                       "http",
                                                       CONTAINER_HOST + ":32100",
                                                       null,
                                                       "http://" + CONTAINER_HOST + ":32100"));
        expectedServers.put("8080/udp", new ServerImpl("myserv1-tftp",
                                                       "tftp",
                                                       CONTAINER_HOST + ":32102",
                                                       null,
                                                       "tftp://" + CONTAINER_HOST + ":32102"));
        expectedServers.put("8000/tcp", new ServerImpl("myserv2",
                                                       "tcp",
                                                       CONTAINER_HOST + ":32103",
                                                       null,
                                                       "tcp://" + CONTAINER_HOST + ":32103"));

        // when
        final Map<String, ServerImpl> servers = runtimeInfo.getServers();

        // then
        assertEquals(servers, expectedServers);
    }

