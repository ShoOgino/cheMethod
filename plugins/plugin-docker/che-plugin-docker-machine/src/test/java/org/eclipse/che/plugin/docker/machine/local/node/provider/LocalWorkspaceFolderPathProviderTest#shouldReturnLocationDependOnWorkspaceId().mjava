    @Test
    public void shouldReturnLocationDependOnWorkspaceId() throws IOException, ServerException, BadRequestException, NotFoundException {
        final String workspaceId = UUID.randomUUID().toString();
        final String workspaceId2 = UUID.randomUUID().toString();
        final String workspaceName = UUID.randomUUID().toString();
        final String workspaceName2 = UUID.randomUUID().toString();
        UsersWorkspaceImpl workspace = mock(UsersWorkspaceImpl.class);
        WorkspaceConfigImpl workspaceConfig = mock(WorkspaceConfigImpl.class);
        when(workspace.getConfig()).thenReturn(workspaceConfig);
        when(workspaceConfig.getName()).thenReturn(workspaceName);
        UsersWorkspaceImpl workspace2 = mock(UsersWorkspaceImpl.class);
        WorkspaceConfigImpl workspaceConfig2 = mock(WorkspaceConfigImpl.class);
        when(workspace2.getConfig()).thenReturn(workspaceConfig2);
        when(workspaceConfig2.getName()).thenReturn(workspaceName2);
        when(workspaceManagerProvider.get()).thenReturn(workspaceManager);
        when(workspaceManager.getWorkspace(workspaceId)).thenReturn(workspace);
        when(workspaceManager.getWorkspace(workspaceId2)).thenReturn(workspace2);
        final String workspacesPath = Files.createTempDirectory("my-workspaces").toString();
        final LocalWorkspaceFolderPathProvider provider = new LocalWorkspaceFolderPathProvider(workspacesPath, null,
                                                                                               workspaceManagerProvider);
        final String pathToWs = provider.getPath(workspaceId);
        final String pathToWs2 = provider.getPath(workspaceId2);
        assertNotEquals(pathToWs, pathToWs2);
        assertEquals(pathToWs, Paths.get(workspacesPath).resolve(workspaceName).toString());
        assertEquals(pathToWs2, Paths.get(workspacesPath).resolve(workspaceName2).toString());
    }

