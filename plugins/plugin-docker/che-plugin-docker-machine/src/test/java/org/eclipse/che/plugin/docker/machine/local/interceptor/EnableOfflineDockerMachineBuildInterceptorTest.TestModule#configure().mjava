        @Override
        protected void configure() {
            bind(DockerInstanceProvider.class);
            bind(DockerConnector.class).toInstance(dockerConnector);
            bind(UserSpecificDockerRegistryCredentialsProvider.class).toInstance(dockerCredentials);
            bind(WorkspaceFolderPathProvider.class).to(LocalWorkspaceFolderPathProvider.class);
            bind(DockerMachineFactory.class).toInstance(dockerMachineFactory);
            bind(WorkspaceManager.class).toInstance(workspaceManager);
            bind(RecipeRetriever.class).toInstance(recipeRetriever);
            bind(RecipeDownloader.class).toInstance(mock(RecipeDownloader.class));
            bind(SnapshotDao.class).toInstance(mock(SnapshotDao.class));
            Multibinder<InstanceProvider> machineImageProviderMultibinder =
                    Multibinder.newSetBinder(binder(),
                                             org.eclipse.che.api.machine.server.spi.InstanceProvider.class);
            machineImageProviderMultibinder.addBinding()
                                           .to(org.eclipse.che.plugin.docker.machine.DockerInstanceProvider.class);

            bindConstant().annotatedWith(Names.named("machine.docker.privilege_mode")).to(false);
            bindConstant().annotatedWith(Names.named("machine.docker.pull_image")).to(true);
            bindConstant().annotatedWith(Names.named("machine.docker.snapshot_use_registry")).to(doForcePullOnBuildFlagProvider.get());
            bindConstant().annotatedWith(Names.named("machine.docker.memory_swap_multiplier")).to(1.0);
            bindConstant().annotatedWith(Names.named("che.machine.projects.internal.storage")).to("/tmp");
            bindConstant().annotatedWith(Names.named("machine.docker.machine_extra_hosts")).to("");
            bindConstant().annotatedWith(Names.named("che.workspace.storage")).to("/tmp");
            bindConstant().annotatedWith(Names.named("machine.default_mem_size_mb")).to("1024");
            bindConstant().annotatedWith(Names.named("machine.logs.location")).to("/tmp");
            install(new DockerMachineModule());

            install(new AllowOfflineMachineCreationModule());
        }

