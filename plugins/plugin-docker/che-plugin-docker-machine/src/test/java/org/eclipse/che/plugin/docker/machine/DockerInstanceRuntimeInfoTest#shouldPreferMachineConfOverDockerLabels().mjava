    @Test
    public void shouldPreferMachineConfOverDockerLabels() throws Exception {
        // given
        Map<String, List<PortBinding>> ports = new HashMap<>();
        when(networkSettings.getPorts()).thenReturn(ports);
        Map<String, String> labels = new HashMap<>();
        when(containerConfig.getLabels()).thenReturn(labels);
        List<ServerConfImpl> serversConfigs = new ArrayList<>();
        doReturn(serversConfigs).when(machineConfig).getServers();
        ports.put("8080/tcp", Collections.singletonList(new PortBinding().withHostIp(DEFAULT_ADDRESS)
                                                                         .withHostPort("32100")));
        ports.put("100100/udp", Collections.singletonList(new PortBinding().withHostIp(DEFAULT_ADDRESS)
                                                                           .withHostPort("32101")));
        ports.put("8080/udp", Collections.singletonList(new PortBinding().withHostIp(DEFAULT_ADDRESS)
                                                                         .withHostPort("32102")));
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080/tcp" + SERVER_CONF_LABEL_REF_SUFFIX, "myserv1label");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080/tcp" + SERVER_CONF_LABEL_PROTOCOL_SUFFIX, "https");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080/udp" + SERVER_CONF_LABEL_REF_SUFFIX, "myserv1-tftp");
        labels.put(SERVER_CONF_LABEL_PREFIX + "8080/udp" + SERVER_CONF_LABEL_PROTOCOL_SUFFIX, "tftp");
        labels.put(SERVER_CONF_LABEL_PREFIX + "100100/udp" + SERVER_CONF_LABEL_REF_SUFFIX, "myserv2label");
        labels.put(SERVER_CONF_LABEL_PREFIX + "100100/udp" + SERVER_CONF_LABEL_PROTOCOL_SUFFIX, "dhcp");
        labels.put(SERVER_CONF_LABEL_PREFIX + "100100/udp" + SERVER_CONF_LABEL_PATH_SUFFIX, "/path");
        serversConfigs.add(new ServerConfImpl("myserv1conf", "8080/tcp", "http", null));
        serversConfigs.add(new ServerConfImpl(null, "8080/udp", null, "some/path"));
        runtimeInfo = new DockerInstanceRuntimeInfo(containerInfo,
                                                    null,
                                                    CONTAINER_HOST,
                                                    machineConfig,
                                                    Collections.emptySet(),
                                                    Collections.emptySet());
        final HashMap<String, ServerImpl> expectedServers = new HashMap<>();
        expectedServers.put("8080/tcp", new ServerImpl("myserv1conf",
                                                       "http",
                                                       CONTAINER_HOST + ":32100",
                                                       "http://" + CONTAINER_HOST + ":32100",
                                                       new ServerPropertiesImpl(null,
                                                               CONTAINER_HOST + ":32100",
                                                               "http://" + CONTAINER_HOST + ":32100")));
        expectedServers.put("100100/udp", new ServerImpl("myserv2label",
                                                         "dhcp",
                                                         CONTAINER_HOST + ":32101",
                                                         "dhcp://" + CONTAINER_HOST + ":32101/path",
                                                         new ServerPropertiesImpl("/path",
                                                                CONTAINER_HOST + ":32101",
                                                                "dhcp://" + CONTAINER_HOST + ":32101/path")));
        expectedServers.put("8080/udp", new ServerImpl("Server-8080-udp",
                                                       null,
                                                       CONTAINER_HOST + ":32102",
                                                       null,
                                                       new ServerPropertiesImpl("some/path", CONTAINER_HOST + ":32102", null)));

        // when
        final Map<String, ServerImpl> servers = runtimeInfo.getServers();

        // then
        assertEquals(servers, expectedServers);
    }

