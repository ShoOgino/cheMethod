  @Test
  public void shouldPassCommonAndDevServerConfigsOnGetServersForNonDevMachine() throws Exception {
    Set<ServerConf> commonSystemServersConfigs = new HashSet<>();
    commonSystemServersConfigs.add(
        new ServerConfImpl("sysServer1-tcp", "4301/tcp", "http", "/some/path1"));
    commonSystemServersConfigs.add(
        new ServerConfImpl("sysServer2-udp", "4302/udp", "dhcp", "some/path2"));
    Set<ServerConf> devSystemServersConfigs = new HashSet<>();
    devSystemServersConfigs.add(
        new ServerConfImpl("devSysServer1-tcp", "4305/tcp", "http", "/some/path3"));
    devSystemServersConfigs.add(
        new ServerConfImpl("devSysServer1-udp", "4305/udp", null, "some/path4"));
    List<ServerConf> serversConfFromMachineConf =
        singletonList(new ServerConfImpl("machineConfServer1-tcp", "4306/tcp", "http", null));
    when(machineConfig.getServers()).thenAnswer(invocation -> serversConfFromMachineConf);
    when(machineConfig.isDev()).thenReturn(true);
    runtimeInfo =
        new DockerInstanceRuntimeInfo(
            containerInfo,
            machineConfig,
            DEFAULT_HOSTNAME,
            provider,
            devSystemServersConfigs,
            commonSystemServersConfigs);

    Map<String, ServerImpl> servers = runtimeInfo.getServers();

    assertEquals(servers, serversMap);
    verify(serverEvaluationStrategy)
        .getServers(eq(containerInfo), eq(DEFAULT_HOSTNAME), serversCaptor.capture());
    assertEquals(
        serversCaptor.getValue(),
        serversToMap(
            commonSystemServersConfigs, devSystemServersConfigs, serversConfFromMachineConf));
  }

