    /**
     * Creates instance from scratch or by reusing a previously one by using specified {@link MachineSource}
     * data in {@link MachineConfig}.
     *
     * @param machine
     *         machine description
     * @param creationLogsOutput
     *         output for instance creation logs
     * @return newly created {@link Instance}
     * @throws UnsupportedRecipeException
     *         if specified {@code recipe} is not supported
     * @throws InvalidRecipeException
     *         if {@code recipe} is invalid
     * @throws NotFoundException
     *         if instance described by {@link MachineSource} doesn't exists
     * @throws MachineException
     *         if other error occurs
     */
    @Override
    public Instance createInstance(Machine machine,
                                   LineConsumer creationLogsOutput) throws UnsupportedRecipeException,
                                                                           InvalidRecipeException,
                                                                           SourceNotFoundException,
                                                                           NotFoundException,
                                                                           MachineException {
        MachineConfig config = machine.getConfig();
        String sourceType = config.getSource().getType();

        final String userName = EnvironmentContext.getCurrent().getSubject().getUserName();
        final String containerName = containerNameGenerator.generateContainerName(machine.getWorkspaceId(),
                                                                                  machine.getId(),
                                                                                  userName,
                                                                                  config.getName());
        final String imageName = "eclipse-che/" + containerName;
        final ProgressLineFormatterImpl progressLineFormatter = new ProgressLineFormatterImpl();
        ProgressMonitor progressMonitor = currentProgressStatus -> {
            try {
                creationLogsOutput.writeLine(progressLineFormatter.format(currentProgressStatus));
            } catch (IOException e) {
                LOG.error(e.getLocalizedMessage(), e);
            }
        };

        if (DOCKER_FILE_TYPE.equals(sourceType)) {
            buildImage(config, imageName, doForcePullOnBuild, progressMonitor);
        } else if (DOCKER_IMAGE_TYPE.equals(sourceType)) {
            pullImage(config, imageName, progressMonitor);
        } else {
            // not supported
            throw new UnsupportedRecipeException("The type '" + sourceType + "' is not supported");
        }

        return createInstance(containerName,
                              machine,
                              imageName,
                              creationLogsOutput);
    }

