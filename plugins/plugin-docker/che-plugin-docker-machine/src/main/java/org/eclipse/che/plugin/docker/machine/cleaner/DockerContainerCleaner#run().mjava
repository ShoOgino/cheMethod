    @ScheduleRate(periodParameterName = "machine.docker.unused_containers_cleanup_period_min",
                  initialDelayParameterName = "machine.docker.unused_containers_cleanup_period_min",
                  unit = TimeUnit.MINUTES)
    @Override
    public void run() {
        try {
            for (ContainerListEntry container : dockerConnector.listContainers()) {
                Optional<ContainerNameInfo> optional = nameGenerator.parse(container.getNames()[0]);
                if (optional.isPresent()) {
                    try {
                        // container is orphaned if not found exception is thrown
                        environmentEngine.getMachine(optional.get().getWorkspaceId(),
                                                     optional.get().getMachineId());

                    } catch (NotFoundException e) {
                        cleanUp(container);
                    } catch (Exception e) {
                        LOG.error("Failed to clean up inactive container. " + e.getLocalizedMessage(), e);
                    }
                }
            }
        } catch (IOException e) {
            LOG.error("Failed to get list docker containers", e);
        } catch (Exception e) {
            LOG.error("Failed to clean up inactive containers", e);
        }
    }

