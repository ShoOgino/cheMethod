    @Override
    protected void configure() {
        bind(MachineService.class);

        install(new FactoryModuleBuilder()
                        .implement(Instance.class, DockerInstance.class)
                        .implement(InstanceProcess.class, DockerProcess.class)
                        .implement(DockerNode.class, LocalDockerNode.class)
                        .implement(DockerInstanceRuntimeInfo.class,
                                   org.eclipse.che.plugin.docker.machine.local.LocalDockerInstanceRuntimeInfo.class)
                        .build(org.eclipse.che.plugin.docker.machine.DockerMachineFactory.class));


        bind(org.eclipse.che.plugin.docker.machine.node.WorkspaceFolderPathProvider.class)
                .to(org.eclipse.che.plugin.docker.machine.local.node.provider.LocalWorkspaceFolderPathProvider.class);

        bind(String.class).annotatedWith(Names.named("host.workspaces.root"))
                          .toProvider(CheHostVfsRootDirProvider.class);

        bind(org.eclipse.che.plugin.docker.client.DockerRegistryChecker.class).asEagerSingleton();

        Multibinder<String> debMachineEnvVars = Multibinder.newSetBinder(binder(),
                                                                         String.class,
                                                                         Names.named("machine.docker.dev_machine.machine_env"))
                                                           .permitDuplicates();

        Multibinder<String> allMachinesEnvVars = Multibinder.newSetBinder(binder(),
                                                                          String.class,
                                                                          Names.named("machine.docker.machine_env"));
        allMachinesEnvVars.addBinding()
                          .toProvider(org.eclipse.che.plugin.docker.machine.local.provider.HttpProxyEnvVariableProvider.class);
        allMachinesEnvVars.addBinding()
                          .toProvider(org.eclipse.che.plugin.docker.machine.local.provider.HttpsProxyEnvVariableProvider.class);

        debMachineEnvVars.addBinding()
                         .toProvider(org.eclipse.che.plugin.docker.machine.local.provider.DockerApiHostEnvVariableProvider.class);

        install(new org.eclipse.che.plugin.docker.machine.DockerMachineModule());

        org.eclipse.che.plugin.docker.machine.local.interceptor.EnableOfflineDockerMachineBuildInterceptor offlineMachineBuildInterceptor =
                new org.eclipse.che.plugin.docker.machine.local.interceptor.EnableOfflineDockerMachineBuildInterceptor();
        requestInjection(offlineMachineBuildInterceptor);
        bindInterceptor(Matchers.subclassesOf(DockerInstanceProvider.class), names("buildImage"), offlineMachineBuildInterceptor);
    }

