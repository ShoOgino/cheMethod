    /**
     * Gets the {@link ServerConfImpl} object associated with {@code portProtocol}.
     * The provided labels should have keys matching e.g.
     *
     * <p>{@code che:server:<portProtocol>:[ref|path|protocol]}
     *
     * @param portProtocol
     *         the port binding associated with the server
     * @param labels
     *         a map holding the relevant values for reference, protocol, and path
     *         for the given {@code portProtocol}
     * @param serverConfMap
     *         a map of {@link ServerConfImpl} with {@code portProtocol} as
     *         keys.
     * @return {@code ServerConfImpl}, obtained from {@code serverConfMap} if possible,
     * or from {@code labels} if there is no entry in {@code serverConfMap}.
     */
    private ServerConfImpl getServerConfImpl(String portProtocol,
                                             Map<String, String> labels,
                                             Map<String, ServerConfImpl> serverConfMap) {
        // Label can be specified without protocol -- e.g. 4401 refers to 4401/tcp
        String port = portProtocol.substring(0, portProtocol.length() - 4);

        ServerConfImpl serverConf;
        // provided serverConf map takes precedence
        if (serverConfMap.get(portProtocol) != null) {
            serverConf = serverConfMap.get(portProtocol);
        } else if (serverConfMap.get(port) != null) {
            serverConf = serverConfMap.get(port);
        } else {
            String ref, protocol, path;

            ref = labels.get(String.format(SERVER_CONF_LABEL_REF_KEY, portProtocol));
            if (ref == null) {
                ref = labels.get(String.format(SERVER_CONF_LABEL_REF_KEY, port));
            }

            protocol = labels.get(String.format(SERVER_CONF_LABEL_PROTOCOL_KEY, portProtocol));
            if (protocol == null) {
                protocol = labels.get(String.format(SERVER_CONF_LABEL_PROTOCOL_KEY, port));
            }

            path = labels.get(String.format(SERVER_CONF_LABEL_PATH_KEY, portProtocol));
            if (path == null) {
                path = labels.get(String.format(SERVER_CONF_LABEL_PATH_KEY, port));
            }

            serverConf = new ServerConfImpl(ref, portProtocol, protocol, path);
        }

        if (serverConf.getRef() == null) {
            // Add default reference to server if it was not set above
            serverConf.setRef("Server-" + portProtocol.replace('/', '-'));
        }
        return serverConf;
    }

