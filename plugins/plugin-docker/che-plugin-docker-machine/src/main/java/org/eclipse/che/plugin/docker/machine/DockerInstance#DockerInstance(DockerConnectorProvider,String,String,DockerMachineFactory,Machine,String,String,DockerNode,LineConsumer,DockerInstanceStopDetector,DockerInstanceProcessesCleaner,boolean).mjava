  @Inject
  public DockerInstance(
      DockerConnectorProvider dockerProvider,
      @Named("che.docker.registry") String registry,
      @Named("che.docker.namespace") @Nullable String registryNamespace,
      DockerMachineFactory dockerMachineFactory,
      @Assisted Machine machine,
      @Assisted("container") String container,
      @Assisted("image") String image,
      @Assisted DockerNode node,
      @Assisted LineConsumer outputConsumer,
      DockerInstanceStopDetector dockerInstanceStopDetector,
      DockerInstanceProcessesCleaner processesCleaner,
      @Named("che.docker.registry_for_snapshots") boolean snapshotUseRegistry)
      throws MachineException {
    super(machine);
    this.dockerMachineFactory = dockerMachineFactory;
    this.container = container;
    this.docker = dockerProvider.get();
    this.image = image;
    this.outputConsumer = outputConsumer;
    this.registry = registry;
    this.registryNamespace = registryNamespace;
    this.node = node;
    this.dockerInstanceStopDetector = dockerInstanceStopDetector;
    this.processesCleaner = processesCleaner;
    this.machineProcesses = new ConcurrentHashMap<>();
    processesCleaner.trackProcesses(this);
    this.snapshotUseRegistry = snapshotUseRegistry;
    this.machineRuntime = doGetRuntime();
  }

