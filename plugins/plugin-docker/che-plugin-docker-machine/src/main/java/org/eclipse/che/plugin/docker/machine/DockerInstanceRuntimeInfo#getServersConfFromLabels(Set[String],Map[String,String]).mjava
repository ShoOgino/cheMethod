    private Map<String, ServerConfImpl> getServersConfFromLabels(final Set<String> portProtocols, final Map<String, String> labels) {
        final HashMap<String, ServerConfImpl> serversConf = new LinkedHashMap<>();
        for (String portProtocol : portProtocols) {
            String ref = labels.get(SERVER_CONF_LABEL_PREFIX + portProtocol + SERVER_CONF_LABEL_REF_SUFFIX);
            String protocol = labels.get(SERVER_CONF_LABEL_PREFIX + portProtocol + SERVER_CONF_LABEL_PROTOCOL_SUFFIX);
            String path = labels.get(SERVER_CONF_LABEL_PREFIX + portProtocol + SERVER_CONF_LABEL_PATH_SUFFIX);
            // it is allowed to use label without part /tcp that describes tcp port, e.g. 8080 describes 8080/tcp
            if (ref == null && !portProtocol.endsWith("/udp")) {
                ref = labels.get(SERVER_CONF_LABEL_PREFIX +
                                 portProtocol.substring(0, portProtocol.length() - 4) +
                                 SERVER_CONF_LABEL_REF_SUFFIX);
            }
            if (protocol == null && !portProtocol.endsWith("/udp")) {
                protocol = labels.get(SERVER_CONF_LABEL_PREFIX +
                                      portProtocol.substring(0, portProtocol.length() - 4) +
                                      SERVER_CONF_LABEL_PROTOCOL_SUFFIX);
            }
            if (path == null && !portProtocol.endsWith("/udp")) {
                path = labels.get(SERVER_CONF_LABEL_PREFIX +
                                  portProtocol.substring(0, portProtocol.length() - 4) +
                                  SERVER_CONF_LABEL_PATH_SUFFIX);
            }
            serversConf.put(portProtocol, new ServerConfImpl(ref,
                                                             portProtocol,
                                                             protocol,
                                                             path));
        }

        return serversConf;
    }

