    @Override
    public void provision(Environment envConfig, CheServicesEnvironmentImpl internalEnv) throws EnvironmentException {
        String devMachineName = getDevMachineName(envConfig);
        if (devMachineName == null) {
            throw new EnvironmentException("ws-machine is not found on agents applying");
        }

        CheServiceImpl devMachine = internalEnv.getServices().get(devMachineName);
        List<String> devMachineVolumes = devMachine.getVolumes();

        // add bind-mount volume for projects in a workspace
        String projectFolderVolume;
        try {
            projectFolderVolume = format("%s:%s%s",
                                         workspaceFolderPathProvider.getPath(internalEnv.getWorkspaceId()),
                                         projectFolderPath, projectsVolumeOptions);
        } catch (IOException e) {
            throw new EnvironmentException("Error occurred on resolving path to files of workspace " +
                                           internalEnv.getWorkspaceId());
        }
        devMachineVolumes.add(SystemInfo.isWindows() ? pathEscaper.escapePath(projectFolderVolume)
                                                     : projectFolderVolume);
        // add volume with ws-agent archive
        devMachineVolumes.add(wsAgentVolumeProvider.get());
        // add volume and variable to setup ws-agent configuration
        String dockerExtConfVolume = dockerExtConfBindingProvider.get();
        if (dockerExtConfVolume != null) {
            devMachineVolumes.add(dockerExtConfVolume);
        }
        devMachine.getEnvironment().put(CheBootstrap.CHE_LOCAL_CONF_DIR,
                                        DockerExtConfBindingProvider.EXT_CHE_LOCAL_CONF_DIR);

        for (CheServiceImpl machine : internalEnv.getServices().values()) {
            machine.getVolumes().add(terminalVolumeProvider.get());
        }

        // apply basic infra (e.g. agents)
        super.provision(envConfig, internalEnv);
    }

