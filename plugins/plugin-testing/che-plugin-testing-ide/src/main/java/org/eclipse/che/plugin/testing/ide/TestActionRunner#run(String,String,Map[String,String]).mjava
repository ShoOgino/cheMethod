    public void run(String testFramework, String projectPath, Map<String, String> parameters) {
        presenter.clear();
        final StatusNotification notification = new StatusNotification("Running Tests...", PROGRESS, FLOAT_MODE);
        notificationManager.notify(notification);
        Promise<TestResultRootDto> testResultPromise = service.runTests(testFramework, projectPath, parameters);
        testResultPromise.then(new Operation<TestResultRootDto>() {
            @Override
            public void apply(TestResultRootDto result) throws OperationException {
                if (result.isEmpty()) {
                    notification.setStatus(FAIL);
                    notification.setTitle("No tests could be found");
                    return;
                }
                notification.setStatus(SUCCESS);
                switch (result.getStatus()) {
                case SUCCESS: {
                    notification.setTitle("Test runner executed successfully");
                    notification.setContent("All tests passed.");
                    break;
                }
                case FAILURE: {
                    notification.setTitle("Test runner executed successfully with test failures");
                    notification.setContent("Some test(s) failed.");
                    break;
                }
                case ERROR: {
                    notification.setTitle("Test runner executed successfully with test errors");
                    notification.setContent("Some test(s) failed with errors.");
                    break;
                }
                case WARNING: {
                    notification.setTitle("Test runner executed successfully with test warnings");
                    notification.setContent("Some test(s) passed with warnings.");
                    break;
                }
                case SKIPPED: {
                    notification.setTitle("Test runner executed successfully with some tests skipped");
                    notification.setContent("Some test(s) were skipped.");
                    break;
                }
                }
                presenter.handleResponse(result);
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError exception) throws OperationException {
                notification.setTitle("Failed to execute test runner");
                notification.setContent("Please see dev-machine log for more details.");
                notification.setStatus(FAIL);
            }
        });
    }

