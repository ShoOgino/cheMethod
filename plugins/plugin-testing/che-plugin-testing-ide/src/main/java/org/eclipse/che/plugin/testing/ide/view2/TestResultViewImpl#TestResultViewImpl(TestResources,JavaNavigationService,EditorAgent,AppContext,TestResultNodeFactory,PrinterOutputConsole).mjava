  @Inject
  public TestResultViewImpl(
      TestResources testResources,
      JavaNavigationService javaNavigationService,
      EditorAgent editorAgent,
      AppContext appContext,
      TestResultNodeFactory nodeFactory,
      PrinterOutputConsole outputConsole) {
    this.javaNavigationService = javaNavigationService;
    this.editorAgent = editorAgent;
    this.appContext = appContext;
    this.nodeFactory = nodeFactory;
    splitLayoutPanel = new SplitLayoutPanel(1);
    setContentWidget(UI_BINDER.createAndBindUi(this));
    splitLayoutPanel.add(outputConsole);

    NodeUniqueKeyProvider idProvider =
        new NodeUniqueKeyProvider() {
          @NotNull
          @Override
          public String getKey(@NotNull Node item) {
            return String.valueOf(item.hashCode());
          }
        };
    NodeStorage nodeStorage = new NodeStorage(idProvider);
    NodeLoader nodeLoader = new NodeLoader(Collections.emptySet());
    resultTree = new Tree(nodeStorage, nodeLoader);
    resultTree
        .getSelectionModel()
        .addSelectionHandler(
            event -> {
              Node methodNode = event.getSelectedItem();
              if (methodNode instanceof TestStateNode) {
                outputConsole.testSelected(((TestStateNode) methodNode).getTestState());
              }
            });

    resultTree.setAutoExpand(true);
    resultTree.getNodeLoader().setUseCaching(false);

    resultTree.getElement().getStyle().setWidth(100, Style.Unit.PCT);
    resultTree.getElement().getStyle().setHeight(100, Style.Unit.PCT);
    navigationPanel.add(resultTree);

    testRootState = new TestRootState();
  }

