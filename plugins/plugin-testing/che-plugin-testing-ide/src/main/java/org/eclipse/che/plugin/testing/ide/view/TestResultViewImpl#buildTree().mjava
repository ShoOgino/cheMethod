    private void buildTree() {
        resultTree.getNodeStorage().clear();
        outputResult.setText("");
        TestResultGroupNode root = nodeFactory.getTestResultGroupNode(lastTestResult, showFailuresOnly, new Runnable() {
            @Override
            public void run() {
                showFailuresOnly = !showFailuresOnly;
                buildTree();
            }
        });
        HashMap<String, List<Node>> classNodeHashMap = new LinkedHashMap<>();
        for (TestCase testCase : lastTestResult.getTestCases()) {
            if (!testCase.isFailed() && showFailuresOnly) {
                continue;
            }
            if (!classNodeHashMap.containsKey(testCase.getClassName())) {
                List<Node> methodNodes = new ArrayList<>();
                classNodeHashMap.put(testCase.getClassName(), methodNodes);
            }
            classNodeHashMap.get(testCase.getClassName())
                            .add(nodeFactory.getTestResultMethodNodeNode(!testCase.isFailed(), testCase.getMethod(), testCase.getTrace(),
                                                                         testCase.getMessage(), testCase.getFailingLine(), this));
        }
        List<Node> classNodes = new ArrayList<>();
        for (Map.Entry<String, List<Node>> entry : classNodeHashMap.entrySet()) {
            TestResultClassNode classNode = nodeFactory.getTestResultClassNodeNode(entry.getKey());
            classNode.setChildren(entry.getValue());
            classNodes.add(classNode);
        }
        root.setChildren(classNodes);
        resultTree.getNodeStorage().add(root);
        resultTree.expandAll();
    }

