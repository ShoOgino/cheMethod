    private void handleTestingOutput(final MessageBus messageBus) {
        final DefaultOutputConsole outputConsole = (DefaultOutputConsole)commandConsoleFactory.create("Tests");
        try {
            messageBus.subscribe(TESTING_OUTPUT_CHANNEL_NAME, new MessageHandler() {
                @Override
                public void onMessage(String message) {
                    Log.info(getClass(), message);
                    TestingOutput archetypeOutput = factory.createDtoFromJson(message, TestingOutput.class);
                    switch (archetypeOutput.getState()) {
                        case SESSION_START:
                            processesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(), outputConsole);
                            outputConsole.clearOutputsButtonClicked();
                        case DETAIL:
                            outputConsole.printText(archetypeOutput.getOutput());
                            break;
                        case SUCCESS:
                            outputConsole.printText(archetypeOutput.getOutput(), "green");
                            break;
                        case ERROR:
                            outputConsole.printText(archetypeOutput.getOutput(), "red");
                            break;
                        case FAILURE:
                            outputConsole.printText(archetypeOutput.getOutput(), "darkred");
                            break;
                        default:
                            break;
                    }
                }
            });
        } catch (WebSocketException e) {
            e.printStackTrace();
        }
    }

