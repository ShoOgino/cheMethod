    /**
     * Builds classpath for the java project.
     *
     * @param javaProject
     *         java project
     * @return set of resources which are included to the classpath
     */
    public Set<String> getProjectClassPath(IJavaProject javaProject) {
        try {
            IClasspathEntry[] resolvedClasspath = javaProject.getResolvedClasspath(false);
            Set<String> result = new HashSet<>();
            for (IClasspathEntry classpathEntry : resolvedClasspath) {
                switch (classpathEntry.getEntryKind()) {
                    case IClasspathEntry.CPE_LIBRARY:
                        IPath path = classpathEntry.getPath();
                        result.add(path.toOSString());
                        break;

                    case IClasspathEntry.CPE_SOURCE:
                        IPath outputLocation = classpathEntry.getOutputLocation();
                        if (outputLocation != null) {
                            result.add(workspacePath + outputLocation.toOSString());
                        }
                        break;

                    case IClasspathEntry.CPE_PROJECT:
                        IPath projectPath = classpathEntry.getPath();
                        JavaModel javaModel = JavaModelManager.getJavaModelManager().getJavaModel();
                        IJavaProject project = javaModel.getJavaProject(projectPath.toOSString());
                        result.addAll(getProjectClassPath(project));
                        break;

                }
            }
            return result;
        } catch (JavaModelException e) {
            LOG.debug(e.getMessage(), e);
        }

        return Collections.emptySet();
    }

