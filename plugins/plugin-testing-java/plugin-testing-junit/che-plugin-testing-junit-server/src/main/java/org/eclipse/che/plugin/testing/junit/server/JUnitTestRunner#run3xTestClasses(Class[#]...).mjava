    private TestResult run3xTestClasses(Class< ? >... classes) throws Exception {
        ClassLoader classLoader = projectClassLoader;
        Class< ? > clsTestSuite = Class.forName("junit.framework.TestSuite", true, classLoader);
        Class< ? > clsTestResult = Class.forName("junit.framework.TestResult", true, classLoader);
        Class< ? > clsThrowable = Class.forName("java.lang.Throwable", true, classLoader);
        Class< ? > clsStackTraceElement = Class.forName("java.lang.StackTraceElement", true, classLoader);
        Class< ? > clsFailure = Class.forName("junit.framework.TestFailure", true, classLoader);
        Object testSuite = clsTestSuite.getConstructor().newInstance();
        Object testResult = clsTestResult.getConstructor().newInstance();
        Class< ? > clsTestListener = Class.forName("junit.framework.TestListener", true, classLoader);

        try (OutputTestListener outputListener = new OutputTestListener(this.getClass().getName() + ".run3xTestClasses")) {
            Object testListener = create3xTestListener(classLoader, clsTestListener, outputListener);
            ClassLoader tccl = Thread.currentThread().getContextClassLoader();
            try {
                Thread.currentThread().setContextClassLoader(projectClassLoader);
                clsTestResult.getMethod("addListener", clsTestListener).invoke(
                                                                               testResult, testListener);
                for (Class< ? > testClass : classes) {
                    clsTestSuite.getMethod("addTestSuite", Class.class).invoke(testSuite, testClass);
                }
                clsTestSuite.getMethod("run", clsTestResult).invoke(testSuite, testResult);
            } finally {
                Thread.currentThread().setContextClassLoader(tccl);
                clsTestResult.getMethod("removeListener", clsTestListener).invoke(
                                                                                  testResult, testListener);
            }
        }
        TestResult dtoResult = DtoFactory.getInstance().createDto(TestResult.class);
        boolean isSuccess = (Boolean)clsTestResult.getMethod("wasSuccessful").invoke(testResult);
        Enumeration< ? > failures = (Enumeration< ? >)clsTestResult.getMethod("failures").invoke(testResult);
        List<Failure> jUnitFailures = new ArrayList<>();
        while (failures.hasMoreElements()) {
            Failure dtoFailure = DtoFactory.getInstance().createDto(Failure.class);
            Object failure = failures.nextElement();
            String message = (String)clsFailure.getMethod("exceptionMessage").invoke(failure);
            String trace = (String)clsFailure.getMethod("trace").invoke(failure);
            Object failClassObject = clsFailure.getMethod("failedTest").invoke(failure);
            String failClassName = failClassObject.getClass().getName();
            Object exception = clsFailure.getMethod("thrownException").invoke(failure);
            Object stackTrace = clsThrowable.getMethod("getStackTrace").invoke(exception);
            String failMethod = "";
            Integer failLine = null;
            if (stackTrace.getClass().isArray()) {
                int length = Array.getLength(stackTrace);
                for (int i = 0; i < length; i++) {
                    Object arrayElement = Array.get(stackTrace, i);
                    String failClass = (String)clsStackTraceElement.getMethod("getClassName").invoke(arrayElement);
                    if (failClass.equals(failClassName)) {
                        failMethod = (String)clsStackTraceElement.getMethod("getMethodName").invoke(arrayElement);
                        failLine = (Integer)clsStackTraceElement.getMethod("getLineNumber").invoke(arrayElement);
                        break;
                    }
                }
            }
            dtoFailure.setFailingClass(failClassName);
            dtoFailure.setFailingMethod(failMethod);
            dtoFailure.setFailingLine(failLine);
            dtoFailure.setMessage(message);
            dtoFailure.setTrace(trace);
            jUnitFailures.add(dtoFailure);
        }
        dtoResult.setTestFramework("JUnit3x");
        dtoResult.setSuccess(isSuccess);
        dtoResult.setFailureCount(jUnitFailures.size());
        dtoResult.setFailures(jUnitFailures);
        return dtoResult;
    }

