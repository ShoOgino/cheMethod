    /**
     * {@inheritDoc}
     */
    @Override
    public TestResult execute(Map<String, String> testParameters) throws Exception {
        String projectAbsolutePath = testParameters.get("absoluteProjectPath");
        boolean updateClasspath = Boolean.valueOf(testParameters.get("updateClasspath"));
        boolean runClass = Boolean.valueOf(testParameters.get("runClass"));
        String projectPath = testParameters.get("projectPath");
        String projectType = "";
        if (projectManager != null) {
            projectType = projectManager.getProject(projectPath).getType();
        }
        TestClasspathProvider classpathProvider = classpathRegistry.getTestClasspathProvider(projectType);
        projectClassLoader = classpathProvider.getClassLoader(projectAbsolutePath, updateClasspath);
        TestResult testResult;
        try {
            Class.forName(JUNIT4X_RUNNER_CLASS, true, projectClassLoader);
            if (runClass) {
                String fqn = testParameters.get("fqn");
                testResult = run4x(fqn);
            } else {
                testResult = runAll4x(projectAbsolutePath);
            }
            return testResult;
        } catch (Exception ignored) {
        }
        try {
            Class.forName(JUNIT3X_RUNNER_CLASS, true, projectClassLoader);
            if (runClass) {
                String fqn = testParameters.get("fqn");
                testResult = run3x(fqn);
            } else {
                testResult = runAll3x(projectAbsolutePath);
            }
            return testResult;
        } catch (Exception ignored) {
        }
        return null;
    }

