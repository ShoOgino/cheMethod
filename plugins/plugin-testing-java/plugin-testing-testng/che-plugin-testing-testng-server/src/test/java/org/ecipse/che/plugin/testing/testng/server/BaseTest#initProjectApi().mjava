  @BeforeMethod
  protected void initProjectApi() throws Exception {
    workspaceHolder = new TestWorkspaceHolder();

    if (root == null) root = new File(wsPath);

    if (root.exists()) {
      IoUtil.deleteRecursive(root);
    }
    root.mkdir();

    File indexDir = new File(INDEX_PATH);

    if (indexDir.exists()) {
      IoUtil.deleteRecursive(indexDir);
    }
    indexDir.mkdir();
    Set<PathMatcher> filters = new HashSet<>();
    filters.add(path -> true);
    FSLuceneSearcherProvider sProvider = new FSLuceneSearcherProvider(indexDir, filters);

    vfsProvider = new LocalVirtualFileSystemProvider(root, sProvider);

    projectTypeRegistry = new ProjectTypeRegistry(new HashSet<>());
    projectTypeRegistry.registerProjectType(new TestProjectType());

    projectHandlerRegistry = new ProjectHandlerRegistry(new HashSet<>());

    projectRegistry =
        new ProjectRegistry(
            workspaceHolder,
            vfsProvider,
            projectTypeRegistry,
            projectHandlerRegistry,
            eventService);
    projectRegistry.initProjects();

    importerRegistry = new ProjectImporterRegistry(new HashSet<>());

    fileWatcherNotificationHandler = new DefaultFileWatcherNotificationHandler(vfsProvider);

    pm =
        new ProjectManager(
            vfsProvider,
            projectTypeRegistry,
            mock(WorkspaceSyncCommunication.class),
            projectRegistry,
            projectHandlerRegistry,
            importerRegistry,
            fileWatcherNotificationHandler,
            new TestWorkspaceHolder(new ArrayList<>()),
            Mockito.mock(FileWatcherManager.class));

    plugin = new ResourcesPlugin("target/index", wsPath, () -> projectRegistry, () -> pm);

    plugin.start();
    javaPlugin.start();
  }

