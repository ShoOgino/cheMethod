    private TestResult runTest(String projectAbsolutePath, BiConsumer<Class< ? >, Object> configure) throws Exception {
        ClassLoader classLoader = projectClassLoader;
        Class< ? > clsTestNG = Class.forName("org.testng.TestNG", true, classLoader);
        Class< ? > clsTestListner = Class.forName("org.testng.TestListenerAdapter", true, classLoader);
        Class< ? > clsITestListner = Class.forName("org.testng.ITestListener", true, classLoader);
        Class< ? > clsResult = Class.forName("org.testng.ITestResult", true, classLoader);
        Class< ? > clsIClass = Class.forName("org.testng.IClass", true, classLoader);
        Class< ? > clsITestNGMethod = Class.forName("org.testng.ITestNGMethod", true, classLoader);
        Class< ? > clsThrowable = Class.forName("java.lang.Throwable", true, classLoader);
        Class< ? > clsStackTraceElement = Class.forName("java.lang.StackTraceElement", true, classLoader);
        Object testNG = clsTestNG.newInstance();

        Object testListner;
        try (OutputTestListener outputListener = new OutputTestListener(this.getClass().getName() + ".runTest")) {
            testListner = createTestListener(classLoader, clsTestListner, outputListener);
            ClassLoader tccl = Thread.currentThread().getContextClassLoader();
            try {
                Thread.currentThread().setContextClassLoader(projectClassLoader);

                clsTestNG.getMethod("addListener", clsITestListner).invoke(testNG, testListner);

                configure.accept(clsTestNG, testNG);

                clsTestNG.getMethod("setOutputDirectory", String.class).invoke(testNG,
                                                                               Paths.get(projectAbsolutePath, "target", "testng-out")
                                                                                    .toString());
                clsTestNG.getMethod("run").invoke(testNG);
            } finally {
                Thread.currentThread().setContextClassLoader(tccl);
            }
        }

        List<Object> allTests = new ArrayList<>();
        for (Object failure : (List< ? >)clsTestListner.getMethod("getFailedTests").invoke(testListner)) {
            allTests.add(failure);
        }
        int failureCount = allTests.size();

        for (Object success : (List< ? >)clsTestListner.getMethod("getPassedTests").invoke(testListner)) {
            allTests.add(success);
        }

        TestResult dtoResult = DtoFactory.getInstance().createDto(TestResult.class);
        boolean isSuccess = (failureCount == 0);
        List<TestCase> testCases = new ArrayList<>();
        for (Object test : allTests) {
            TestCase dtoFailure = DtoFactory.getInstance().createDto(TestCase.class);
            Object testClass = clsResult.getMethod("getTestClass").invoke(test);
            Object testMethod = clsResult.getMethod("getMethod").invoke(test);
            String testClassName = (String)clsIClass.getMethod("getName").invoke(testClass);
            String testMethodName = (String)clsITestNGMethod.getMethod("getMethodName").invoke(testMethod);

            dtoFailure.setClassName(testClassName);
            dtoFailure.setMethod(testMethodName);

            Object throwable = clsResult.getMethod("getThrowable").invoke(test);
            if (throwable != null) {
                String message = (String)clsThrowable.getMethod("getMessage").invoke(throwable);
                Object stackTrace = clsThrowable.getMethod("getStackTrace").invoke(throwable);
                Integer failLine = null;
                if (stackTrace.getClass().isArray()) {
                    int length = Array.getLength(stackTrace);
                    for (int i = 0; i < length; i++) {
                        Object arrayElement = Array.get(stackTrace, i);
                        String failClass = (String)clsStackTraceElement.getMethod("getClassName").invoke(arrayElement);
                        String failMethod = (String)clsStackTraceElement.getMethod("getMethodName").invoke(arrayElement);
                        if (failClass.equals(testClassName) && failMethod.equals(testMethodName)) {
                            failLine = (Integer)clsStackTraceElement.getMethod("getLineNumber").invoke(arrayElement);
                            break;
                        }
                    }
                }
                StringWriter sw = new StringWriter();
                PrintWriter pw = new PrintWriter(sw);
                clsThrowable.getMethod("printStackTrace", PrintWriter.class).invoke(throwable, pw);
                String trace = sw.toString();
                dtoFailure.setFailingLine(failLine == null ? -1 : failLine);
                dtoFailure.setMessage(message);
                dtoFailure.setTrace(trace);
                dtoFailure.setFailed(true);
            } else {
                dtoFailure.setFailingLine(-1);
                dtoFailure.setFailed(false);
            }
            testCases.add(dtoFailure);
        }

        dtoResult.setTestFramework("TestNG");
        dtoResult.setSuccess(isSuccess);
        dtoResult.setFailureCount(failureCount);
        dtoResult.setTestCaseCount(testCases.size());
        dtoResult.setTestCases(testCases);
        return dtoResult;
    }

