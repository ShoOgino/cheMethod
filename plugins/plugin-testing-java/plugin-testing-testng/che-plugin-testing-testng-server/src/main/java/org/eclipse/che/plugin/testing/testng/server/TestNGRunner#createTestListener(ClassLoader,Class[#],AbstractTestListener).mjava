    private Object createTestListener(ClassLoader loader, Class< ? > listenerClass, AbstractTestListener delegate) throws Exception {
        ProxyFactory f = new ProxyFactory();
        f.setSuperclass(listenerClass);
        f.setFilter(new MethodFilter() {
            @Override
            public boolean isHandled(Method m) {
                String methodName = m.getName();
                switch (methodName) {
                    case "onTestStart":
                    case "onTestSuccess":
                    case "testFailure":
                    case "onTestFailure":
                        return true;
                }
                return false;
            }
        });
        Class< ? > c = f.createClass();
        MethodHandler mi = new MethodHandler() {
            @Override
            public Object invoke(Object self, Method m, Method method, Object[] args) throws Throwable {
                String methodName = m.getName();
                Object testResult = null;
                Throwable throwable = null;

                switch (methodName) {
                    case "onTestStart":
                    case "onTestSuccess":
                        testResult = args[0];
                        throwable = null;
                        break;
                    case "onTestFailure":
                        testResult = args[0];
                        throwable = (Throwable)testResult.getClass().getMethod("getThrowable", new Class< ? >[0]).invoke(args[0]);
                        break;
                }

                Object testClass = testResult.getClass().getMethod("getTestClass").invoke(testResult);
                Object testMethod = testResult.getClass().getMethod("getMethod").invoke(testResult);
                String testClassName = (String)testClass.getClass().getMethod("getName").invoke(testClass);
                String testMethodName = (String)testMethod.getClass().getMethod("getMethodName").invoke(testMethod);

                String testKey = new StringBuilder().append(testMethodName)
                                                    .append('(').append(testClassName).append(')').toString();
                String testName = testKey;
                switch (methodName) {
                    case "onTestStart":
                        delegate.startTest(testKey, testName);
                        break;

                    case "onTestSuccess":
                        delegate.endTest(testKey, testName);
                        break;

                    case "onTestFailure":
                        delegate.addFailure(testKey, throwable);
                        delegate.endTest(testKey, testName);
                        break;

                    default:

                }
                return method.invoke(self, args);
            }
        };
        Object listener = c.getConstructor().newInstance();
        ((javassist.util.proxy.Proxy)listener).setHandler(mi);
        return listener;
    }

