  private String detectArchitecture(SshMachineInstance machine)
      throws ConflictException, MachineException {
    // uname -sm shows OS and CPU architecture
    // Examples of output:
    // Windows 10 amd64
    // MSYS_NT-6.3 x86_64
    // (empty line)
    // Ubuntu Linux 14.04 amd64
    // Linux x86_64
    // OS X amd64
    // Darwin x86_64
    // Samsung Artik arm7
    // Linux armv7l
    SshMachineProcess getUnameOutput =
        machine.createProcess(
            new CommandImpl("discover machine architecture", "uname -sm", null), null);
    ListLineConsumer lineConsumer = new ListLineConsumer();
    getUnameOutput.start(lineConsumer);
    String unameOutput = lineConsumer.getText();
    Matcher matcher = UNAME_OUTPUT.matcher(unameOutput);
    if (matcher.matches()) {
      String os = matcher.group("os").toLowerCase();
      String arch = matcher.group("architecture").toLowerCase();
      StringBuilder result = new StringBuilder();
      if (os.contains("linux")) {
        result.append("linux_");
      } else if (os.contains("darwin")) {
        result.append("darwin_");
      } else if (os.contains("msys")) {
        result.append("windows_");
      } else {
        LOG.error(
            format(
                "Architecture discovering fails. Machine %s. uname output:%s",
                machine.getId(), unameOutput));
        return DEFAULT_ARCHITECTURE;
      }
      if (arch.contains("x86_64")) {
        result.append("amd64");
      } else if (arch.contains("armv7l")) {
        result.append("arm7");
      } else if (arch.contains("armv6l")) {
        result.append("arm6");
      } else if (arch.contains("armv5l")) {
        result.append("arm5");
      } else {
        LOG.error(
            format(
                "Architecture discovering fails. Machine %s. uname output:%s",
                machine.getId(), unameOutput));
        return DEFAULT_ARCHITECTURE;
      }

      return result.toString();
    } else {
      LOG.error(
          format(
              "Architecture discovering fails. Machine %s. uname output:%s",
              machine.getId(), unameOutput));
      return DEFAULT_ARCHITECTURE;
    }
  }

