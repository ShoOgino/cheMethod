    /**
     * Creates instance from scratch or by reusing a previously one by using specified {@link MachineSource}
     * data in {@link MachineConfig}.
     *
     * @param machine
     *         machine description
     * @param lineConsumer
     *         output for instance creation logs
     * @return newly created {@link Instance}
     * @throws UnsupportedRecipeException
     *         if specified {@code recipe} is not supported
     * @throws InvalidRecipeException
     *         if {@code recipe} is invalid
     * @throws NotFoundException
     *         if instance described by {@link MachineSource} doesn't exists
     * @throws MachineException
     *         if other error occurs
     */
    @Override
    public Instance createInstance(Machine machine, LineConsumer lineConsumer)
            throws UnsupportedRecipeException, InvalidRecipeException, NotFoundException, MachineException {
        requireNonNull(machine, "Non null machine required");
        requireNonNull(lineConsumer, "Non null logs consumer required");
        requireNonNull(machine.getConfig().getSource().getLocation(), "Location in machine source is required");

        if (machine.getConfig().isDev()) {
            throw new MachineException("Dev machine is not supported for Ssh machine implementation");
        }

        Recipe recipe = recipeDownloader.getRecipe(machine.getConfig());
        SshMachineRecipe sshMachineRecipe = GSON.fromJson(recipe.getScript(), SshMachineRecipe.class);

        SshClient sshClient = sshMachineFactory.createSshClient(sshMachineRecipe,
                                                                machine.getConfig().getEnvVariables());
        sshClient.start();

        return sshMachineFactory.createInstance(machine,
                                                sshClient,
                                                lineConsumer);
    }

