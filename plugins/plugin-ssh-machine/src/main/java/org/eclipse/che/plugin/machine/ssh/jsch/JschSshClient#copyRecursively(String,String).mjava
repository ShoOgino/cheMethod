    private void copyRecursively(String sourceFolder, String targetFolder) throws MachineException {
        // create target dir
        try {
            int execCode = execAndGetCode("mkdir -p " + targetFolder);

            if (execCode != 0) {
                throw new MachineException(format("Creation of folder %s failed. Exit code is %s", targetFolder, execCode));
            }
        } catch (JSchException e) {
            throw new MachineException(format("Creation of folder %s failed. Error: %s", targetFolder, e.getLocalizedMessage()));
        }

        // not normalized paths don't work
        final String targetAbsolutePath = getAbsolutePath(targetFolder);

        // copy files
        ChannelSftp sftp = null;
        try {
            sftp = (ChannelSftp)session.openChannel("sftp");
            sftp.connect(connectionTimeout);

            final ChannelSftp finalSftp = sftp;
            Files.walkFileTree(Paths.get(sourceFolder), new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    try {
                        if (!attrs.isDirectory()) {
                            copyFile(file.toString(),
                                     Paths.get(targetAbsolutePath, file.getFileName().toString()).toString(), finalSftp);
                        } else {
                            finalSftp.mkdir(file.normalize().toString());
                        }
                    } catch (MachineException | SftpException e) {
                        throw new IOException(format("Sftp copying of file %s failed. Error: %s", file, e.getLocalizedMessage()));
                    }
                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (JSchException | IOException e) {
            throw new MachineException("Copying failed. Error: " + e.getLocalizedMessage());
        } finally {
            if (sftp != null) {
                sftp.disconnect();
            }
        }
    }

