    private void pushBranch(final WorkflowExecutor workflow, final Context context) {
        context.getVcsService()
               .pushBranch(context.getProject(),
                           context.getForkedRemoteName(),
                           context.getWorkBranchName())
               .then(new Operation<PushResponse>() {
                   @Override
                   public void apply(PushResponse result) throws OperationException {
                       workflow.done(delegate, context);
                   }
               })
               .catchError(new Operation<PromiseError>() {
                   @Override
                   public void apply(PromiseError err) throws OperationException {
                       try {
                           throw err.getCause();
                       } catch (BranchUpToDateException branchUpEx) {
                           workflow.fail(delegate,
                                         context,
                                         messages.stepPushBranchErrorBranchUpToDate());
                       } catch (Throwable throwable) {
                           if (throwable.getMessage().contains("Unable get private ssh key")) {
                               askGenerateSSH(workflow, context);
                           } else {
                               workflow.fail(delegate,
                                             context,
                                             messages.stepPushBranchErrorPushingBranch(throwable.getLocalizedMessage()));
                           }
                       }
                   }
               });
    }

