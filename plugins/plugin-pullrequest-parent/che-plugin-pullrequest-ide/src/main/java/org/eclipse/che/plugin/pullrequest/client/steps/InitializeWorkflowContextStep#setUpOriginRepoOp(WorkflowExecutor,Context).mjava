    private Operation<List<Remote>> setUpOriginRepoOp(final WorkflowExecutor executor, final Context context) {
        return new Operation<List<Remote>>() {
            @Override
            public void apply(final List<Remote> remotes) throws OperationException {
                final Optional<Remote> remoteOpt = FluentIterable.from(remotes)
                                                                 .filter(ORIGIN_REMOTE_FILTER)
                                                                 .first();
                if (remoteOpt.isPresent()) {
                    final Remote remote = remoteOpt.get();
                    final String originUrl = remote.getUrl();
                    final VcsHostingService vcsHostingService = context.getVcsHostingService();

                    context.setOriginRepositoryOwner(vcsHostingService.getRepositoryOwnerFromUrl(originUrl));
                    context.setOriginRepositoryName(vcsHostingService.getRepositoryNameFromUrl(originUrl));

                    setContributeToBranchName(context);

                    executor.done(InitializeWorkflowContextStep.this, context);
                } else {
                    notificationManager.notify(messages.stepInitWorkflowOriginRemoteNotFound(), FAIL, FLOAT_MODE);
                    executor.fail(InitializeWorkflowContextStep.this, context, messages.stepInitWorkflowOriginRemoteNotFound());
                }
            }
        };
    }

