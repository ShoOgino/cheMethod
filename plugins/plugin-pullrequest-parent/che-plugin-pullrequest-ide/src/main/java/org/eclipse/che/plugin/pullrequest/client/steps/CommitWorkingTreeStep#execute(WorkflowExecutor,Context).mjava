    @Override
    public void execute(final WorkflowExecutor executor, final Context context) {
        final Configuration configuration = context.getConfiguration();

        commitPresenter.setCommitActionHandler(new CommitPresenter.CommitActionHandler() {
            @Override
            public void onCommitAction(final CommitAction action) {
                if (action == CANCEL) {
                    executor.fail(CommitWorkingTreeStep.this, context, messages.stepCommitCanceled());
                } else {
                    executor.done(CommitWorkingTreeStep.this, context);
                }
            }
        });
        commitPresenter.hasUncommittedChanges(new AsyncCallback<Boolean>() {
            @Override
            public void onFailure(final Throwable exception) {
                notificationManager.notify(exception.getLocalizedMessage(), FAIL, FLOAT_MODE);
                executor.fail(CommitWorkingTreeStep.this, context, exception.getLocalizedMessage());
            }

            @Override
            public void onSuccess(final Boolean hasUncommittedChanges) {
                if (hasUncommittedChanges) {
                    commitPresenter
                            .showView(messages.contributorExtensionDefaultCommitDescription(configuration.getContributionBranchName(),
                                                                                            configuration.getContributionTitle()));
                } else {
                    executor.done(CommitWorkingTreeStep.this, context);
                }
            }
        });
    }

