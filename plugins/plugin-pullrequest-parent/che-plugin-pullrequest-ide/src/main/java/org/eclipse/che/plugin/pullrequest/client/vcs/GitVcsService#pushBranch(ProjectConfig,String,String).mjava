  @Override
  public Promise<PushResponse> pushBranch(
      final ProjectConfig project, final String remote, final String localBranchName) {
    return service
        .push(
            appContext.getRootProject().getLocation(),
            Collections.singletonList(localBranchName),
            remote,
            true,
            null)
        .catchErrorPromise(
            error -> {
              if (getErrorCode(error.getCause()) != UNAUTHORIZED_GIT_OPERATION) {
                return null;
              }
              Map<String, String> attributes = getAttributes(error.getCause());
              String providerName = attributes.get(PROVIDER_NAME);
              if (!StringUtils.isNullOrEmpty(providerName)) {
                return pushBranchAuthenticated(remote, localBranchName, providerName);
              } else if (BRANCH_UP_TO_DATE_ERROR_MESSAGE.equalsIgnoreCase(error.getMessage())) {
                return Promises.reject(
                    JsPromiseError.create(new BranchUpToDateException(localBranchName)));
              } else {
                return Promises.reject(error);
              }
            });
  }

