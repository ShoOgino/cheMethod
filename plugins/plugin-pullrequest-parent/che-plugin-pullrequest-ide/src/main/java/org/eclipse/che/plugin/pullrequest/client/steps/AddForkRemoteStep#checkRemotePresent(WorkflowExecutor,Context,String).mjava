  private void checkRemotePresent(
      final WorkflowExecutor executor, final Context context, final String remoteUrl) {
    vcsServiceProvider
        .getVcsService(context.getProject())
        .listRemotes(context.getProject())
        .then(
            new Operation<List<Remote>>() {
              @Override
              public void apply(List<Remote> result) throws OperationException {
                for (final Remote remote : result) {
                  if (FORK_REMOTE_NAME.equals(remote.getName())) {
                    context.setForkedRemoteName(FORK_REMOTE_NAME);
                    if (remoteUrl.equals(remote.getUrl())) {
                      // all is correct, continue
                      proceed(executor, context);

                    } else {
                      replaceRemote(executor, context, remoteUrl);
                    }
                    // leave the method, do not go to addRemote(...)
                    return;
                  }
                }
                addRemote(executor, context, remoteUrl);
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError arg) throws OperationException {
                executor.fail(delegate, context, messages.stepAddForkRemoteErrorCheckRemote());
              }
            });
  }

