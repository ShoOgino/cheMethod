    @Override
    public void execute(final WorkflowExecutor executor, final Context context) {
        final Configuration configuration = context.getConfiguration();
        context.getVcsHostingService()
               .createPullRequest(context.getUpstreamRepositoryOwner(),
                                  context.getUpstreamRepositoryName(),
                                  context.getHostUserLogin(),
                                  context.getWorkBranchName(),
                                  context.getContributeToBranchName(),
                                  configuration.getContributionTitle(),
                                  configuration.getContributionComment())
               .then(new Operation<PullRequest>() {
                   @Override
                   public void apply(PullRequest pullRequest) throws OperationException {
                       context.setPullRequestIssueNumber(pullRequest.getNumber());
                       context.setPullRequest(pullRequest);
                       executor.done(IssuePullRequestStep.this, context);
                   }
               })
               .catchError(new Operation<PromiseError>() {
                   @Override
                   public void apply(final PromiseError exception) throws OperationException {
                       try {
                           throw exception.getCause();
                       } catch (PullRequestAlreadyExistsException | NoHistoryInCommonException ex) {
                           executor.fail(IssuePullRequestStep.this,
                                         context,
                                         ex.getLocalizedMessage());
                       } catch (NoCommitsInPullRequestException noCommitsEx) {
                           executor.fail(IssuePullRequestStep.this,
                                         context,
                                         messages.stepIssuePullRequestErrorCreatePullRequestWithoutCommits());
                       } catch (Throwable thr) {
                           executor.fail(IssuePullRequestStep.this,
                                         context,
                                         messages.stepIssuePullRequestErrorCreatePullRequest());
                       }
                   }
               });
    }

