  @Override
  public void execute(final WorkflowExecutor executor, final Context context) {
    factoryService
        .getFactoryJson(appContext.getWorkspaceId(), null)
        .then(updateProjectAttributes(context))
        .then(
            new Operation<FactoryDto>() {
              @Override
              public void apply(FactoryDto factory) throws OperationException {
                factoryService
                    .saveFactory(factory)
                    .then(
                        new Operation<FactoryDto>() {
                          @Override
                          public void apply(FactoryDto factory) throws OperationException {
                            context.setReviewFactoryUrl(FactoryHelper.getAcceptFactoryUrl(factory));
                            executor.done(GenerateReviewFactoryStep.this, context);
                          }
                        })
                    .catchError(
                        new Operation<PromiseError>() {
                          @Override
                          public void apply(PromiseError arg) throws OperationException {
                            notificationManager.notify(
                                messages.stepGenerateReviewFactoryErrorCreateFactory(),
                                FAIL,
                                NOT_EMERGE_MODE);
                            executor.done(GenerateReviewFactoryStep.this, context);
                          }
                        });
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError arg) throws OperationException {
                notificationManager.notify(
                    messages.stepGenerateReviewFactoryErrorCreateFactory(), FAIL, NOT_EMERGE_MODE);
                executor.done(GenerateReviewFactoryStep.this, context);
              }
            });
  }

