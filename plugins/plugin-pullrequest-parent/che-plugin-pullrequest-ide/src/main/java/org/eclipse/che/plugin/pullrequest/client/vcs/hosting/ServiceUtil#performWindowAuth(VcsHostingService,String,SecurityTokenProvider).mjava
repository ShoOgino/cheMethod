  /**
   * Performs {@link JsOAuthWindow} authentication and tries to get current user.
   *
   * @param service hosting service, used to authorized user
   * @param authUrl url to perform authentication
   * @return the promise which resolves authorized user or rejects with an error
   */
  public static Promise<HostUser> performWindowAuth(
      final VcsHostingService service,
      final String authUrl,
      final SecurityTokenProvider securityTokenProvider) {
    final Executor.ExecutorBody<HostUser> exBody =
        new Executor.ExecutorBody<HostUser>() {
          @Override
          public void apply(final ResolveFunction<HostUser> resolve, final RejectFunction reject) {
            new JsOAuthWindow(
                    authUrl,
                    "error.url",
                    500,
                    980,
                    new OAuthCallback() {
                      @Override
                      public void onAuthenticated(final OAuthStatus authStatus) {
                        // maybe it's possible to avoid this request if authStatus contains the vcs
                        // host user.
                        service
                            .getUserInfo()
                            .then(
                                new Operation<HostUser>() {
                                  @Override
                                  public void apply(HostUser user) throws OperationException {
                                    resolve.apply(user);
                                  }
                                })
                            .catchError(
                                new Operation<PromiseError>() {
                                  @Override
                                  public void apply(PromiseError error) throws OperationException {
                                    reject.apply(error);
                                  }
                                });
                      }
                    },
                    securityTokenProvider)
                .loginWithOAuth();
          }
        };
    return Promises.create(Executor.create(exBody));
  }

