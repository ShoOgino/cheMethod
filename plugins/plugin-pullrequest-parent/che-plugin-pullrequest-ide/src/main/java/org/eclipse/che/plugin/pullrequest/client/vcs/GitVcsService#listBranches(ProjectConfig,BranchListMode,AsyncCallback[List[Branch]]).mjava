  /**
   * List branches of a given type.
   *
   * @param project the project descriptor.
   * @param listMode null -> list local branches; "r" -> list remote branches; "a" -> list all
   *     branches.
   * @param callback callback when the operation is done.
   */
  private void listBranches(
      final ProjectConfig project,
      final BranchListMode listMode,
      final AsyncCallback<List<Branch>> callback) {
    service
        .branchList(Path.valueOf(project.getPath()), listMode)
        .then(
            branches -> {
              final List<Branch> result =
                  branches.stream().map(this::fromGitBranch).collect(Collectors.toList());
              callback.onSuccess(result);
            })
        .catchError(
            error -> {
              callback.onFailure(error.getCause());
            });
  }

