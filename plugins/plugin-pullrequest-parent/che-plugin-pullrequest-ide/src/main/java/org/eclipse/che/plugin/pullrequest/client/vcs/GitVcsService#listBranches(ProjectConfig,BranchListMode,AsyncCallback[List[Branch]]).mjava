    /**
     * List branches of a given type.
     *
     * @param project
     *         the project descriptor.
     * @param listMode
     *         null -> list local branches; "r" -> list remote branches; "a" -> list all branches.
     * @param callback
     *         callback when the operation is done.
     */
    private void listBranches(final ProjectConfig project, final BranchListMode listMode, final AsyncCallback<List<Branch>> callback) {
        final Unmarshallable<List<Branch>> unMarshaller =
                dtoUnmarshallerFactory.newListUnmarshaller(Branch.class);
        service.branchList(appContext.getDevMachine(), project, listMode,
                           new AsyncRequestCallback<List<Branch>>(unMarshaller) {
                               @Override
                               protected void onSuccess(final List<Branch> branches) {
                                   final List<Branch> result = new ArrayList<>();
                                   for (final Branch branch : branches) {
                                       result.add(fromGitBranch(branch));
                                   }
                                   callback.onSuccess(result);
                               }

                               @Override
                               protected void onFailure(final Throwable exception) {
                                   callback.onFailure(exception);
                               }
                           });
    }

