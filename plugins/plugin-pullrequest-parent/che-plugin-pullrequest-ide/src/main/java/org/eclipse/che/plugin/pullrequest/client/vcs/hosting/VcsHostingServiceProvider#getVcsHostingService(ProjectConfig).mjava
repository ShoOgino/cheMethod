    /**
     * Returns the dedicated {@link VcsHostingService} implementation for the {@link #ORIGIN_REMOTE_NAME origin} remote.
     *
     * @param project
     *         project used to find origin remote and extract VCS hosting service
     */
    public Promise<VcsHostingService> getVcsHostingService(final ProjectConfig project) {
        if (project == null) {
            return Promises.reject(JsPromiseError.create(new NoVcsHostingServiceImplementationException()));
        }
        final VcsService vcsService = vcsServiceProvider.getVcsService(project);
        if (vcsService == null) {
            return Promises.reject(JsPromiseError.create(new NoVcsHostingServiceImplementationException()));
        }
        return vcsService.listRemotes(project)
                         .then(new Function<List<Remote>, VcsHostingService>() {
                             @Override
                             public VcsHostingService apply(List<Remote> remotes) throws FunctionException {
                                 for (Remote remote : remotes) {
                                     if (ORIGIN_REMOTE_NAME.equals(remote.getName())) {
                                         for (final VcsHostingService hostingService : vcsHostingServices) {
                                             if (hostingService.isHostRemoteUrl(remote.getUrl())) {
                                                 return hostingService.init(remote.getUrl());
                                             }
                                         }
                                     }
                                 }
                                 throw new FunctionException(new NoVcsHostingServiceImplementationException());
                             }
                         });
    }

