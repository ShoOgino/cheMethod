  /**
   * Initializes {@link ContributionWorkflow} provided by {@code vcsHistingService}. If context for
   * such project already initialized then it either invalidates context when vcs changes are
   * detected, or fires {@link CurrentContextChangedEvent} otherwise.
   *
   * @param vcsHostingService VCS hosting service based on project origin remote
   * @param project project for which initialization should be performed
   */
  public void init(final VcsHostingService vcsHostingService, final ProjectConfig project) {
    final Optional<Context> contextOpt = getContext(project.getName());
    if (!contextOpt.isPresent()) {
      doInit(vcsHostingService, project);
    } else {
      checkVcsState(contextOpt.get())
          .then(
              new Operation<Boolean>() {
                @Override
                public void apply(Boolean stateChanged) throws OperationException {
                  if (stateChanged) {
                    invalidateContext(contextOpt.get().getProject());
                    doInit(vcsHostingService, project);
                  } else {
                    eventBus.fireEvent(new CurrentContextChangedEvent(contextOpt.get()));
                  }
                }
              });
    }
  }

