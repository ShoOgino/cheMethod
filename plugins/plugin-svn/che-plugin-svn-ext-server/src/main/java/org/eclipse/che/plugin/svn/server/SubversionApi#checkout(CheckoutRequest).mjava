  /**
   * Perform an "svn checkout" based on the request.
   *
   * @param request the request
   * @return the response
   * @throws IOException if there is a problem executing the command
   * @throws SubversionException if there is a Subversion issue
   */
  public CLIOutputWithRevisionResponse checkout(final CheckoutRequest request)
      throws IOException, SubversionException, UnauthorizedException {
    final File projectPath = new File(request.getProjectPath());
    final List<String> cliArgs = defaultArgs();

    // Flags
    addFlag(cliArgs, "--ignore-externals", request.isIgnoreExternals());

    // Options
    addOption(cliArgs, "--depth", request.getDepth());
    addOption(cliArgs, "--revision", request.getRevision());

    // Command Name
    cliArgs.add("checkout");

    // Command Arguments
    cliArgs.add(request.getUrl());
    cliArgs.add(projectPath.getAbsolutePath());

    CommandLineResult result =
        runCommand(
            null,
            cliArgs,
            projectPath,
            request.getPaths(),
            request.getUsername(),
            request.getPassword(),
            request.getUrl());

    return DtoFactory.getInstance()
        .createDto(CLIOutputWithRevisionResponse.class)
        .withCommand(result.getCommandLine().toString())
        .withOutput(result.getStdout())
        .withErrOutput(result.getStderr())
        .withRevision(SubversionUtils.getCheckoutRevision(result.getStdout()));
  }

