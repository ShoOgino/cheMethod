  /**
   * Perform an "svn move" based on the request.
   *
   * @param request the request
   * @return the response
   * @throws IOException if there is a problem executing the command
   * @throws SubversionException if there is a Subversion issue
   */
  public CLIOutputResponse move(final MoveRequest request)
      throws IOException, SubversionException, UnauthorizedException {

    Predicate<String> sourcePredicate =
        new Predicate<String>() {
          @Override
          public boolean apply(String input) {
            return input.startsWith("file://");
          }
        };

    // for security reason we should forbid file protocol
    if (Iterables.any(request.getSource(), sourcePredicate)
        || request.getDestination().startsWith("file://")) {
      throw new SubversionException("Url is not acceptable");
    }

    final File projectPath = new File(request.getProjectPath());

    final List<String> cliArgs = defaultArgs();

    if (!isNullOrEmpty(request.getComment())) {
      addOption(cliArgs, "--message", "\"" + request.getComment() + "\"");
    }

    // Command Name
    cliArgs.add("move");

    final List<String> paths = new ArrayList<>();
    paths.addAll(request.getSource());
    paths.add(request.getDestination());

    final CommandLineResult result =
        runCommand(null, cliArgs, projectPath, paths, request.getUsername(), request.getPassword());

    return DtoFactory.getInstance()
        .createDto(CLIOutputResponse.class)
        .withCommand(result.getCommandLine().toString())
        .withOutput(result.getStdout())
        .withErrOutput(result.getStderr());
  }

