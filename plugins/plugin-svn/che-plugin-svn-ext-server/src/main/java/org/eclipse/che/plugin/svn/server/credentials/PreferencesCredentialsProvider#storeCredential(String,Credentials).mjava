    @Override
    public void storeCredential(final String repositoryUrl, final Credentials credentials) throws CredentialsException {
        LOG.debug("storeCredentials called for " + repositoryUrl);
        if (credentials == null) {
            return;
        }

        final DtoFactory dtoFactory = DtoFactory.getInstance();

        String oldSerializedCredentials;
        try {
            oldSerializedCredentials = this.preferencesAccess.getPreference(SVN_CREDENTIALS);
        } catch (final PreferencesAccessException e) {
            throw new CredentialsException(e);
        }

        // analyze the structure and build what's missing
        UserCredentialStore userCredentials;
        if (oldSerializedCredentials != null) {
            userCredentials = dtoFactory.createDtoFromJson(oldSerializedCredentials, UserCredentialStore.class);
        } else {
            userCredentials = dtoFactory.createDto(UserCredentialStore.class);
        }
        Map<String, RepositoryCredentials> repositoriesCredentials = userCredentials.getRepositoriesCredentials();
        if (repositoriesCredentials == null) {
            repositoriesCredentials = new HashMap<>();
            userCredentials.setRepositoriesCredentials(repositoriesCredentials);
        }
        RepositoryCredentials repositoryCreds = repositoriesCredentials.get(repositoryUrl);
        if (repositoryCreds == null) {
            repositoryCreds = dtoFactory.createDto(RepositoryCredentials.class);
            repositoriesCredentials.put(repositoryUrl, repositoryCreds);
        }

        // set the values
        repositoryCreds.setUsername(credentials.getUsername());

        final EncryptTextService encryptService = this.encryptTextServiceRegistry.getPreferredService();
        if (encryptService == null) {
            throw new CredentialsException("No encryption service matches the specified one");
        }
        EncryptResult encryptResult;
        try {
            encryptResult = encryptService.encryptText(credentials.getPassword());
        } catch (final EncryptException e) {
            throw new CredentialsException(e);
        }
        repositoryCreds.setEncryptedPassword(encryptResult.getCipherText());
        repositoryCreds.setInitVector(encryptResult.getInitVector());
        repositoryCreds.setEncryptionSchemeVersion(encryptService.getSchemeVersion());

        // store the new version in the preferences
        final String newSerializedCredentials = dtoFactory.toJson(userCredentials);

        try {
            this.preferencesAccess.updatePreference(SVN_CREDENTIALS, newSerializedCredentials);
            LOG.debug("storeCredentials done " + newSerializedCredentials);
        } catch (final PreferencesAccessException e) {
            throw new CredentialsException(e);
        }
    }

