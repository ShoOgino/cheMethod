    /**
     * Executes a command line executable based on the arguments specified.
     *
     * @param env the optional environment variables
     * @param cmd the command to run
     * @param args the optional command arguments
     * @param redactedArgs additional command arguments that will not be shown in result
     * @param timeout the optional timeout in milliseconds
     * @param workingDirectory the optional working directory
     * @param lineConsumerFactory the optional std output line consumer factory
     * 
     * @return the command line result
     * 
     * @throws IOException if something goes wrong
     */
    public static CommandLineResult executeCommandLine(@Nullable final Map<String, String> env,
                                                       final String cmd,
                                                       @Nullable final String[] args,
                                                       @Nullable final String[] redactedArgs,
                                                       final long timeout,
                                                       @Nullable final File workingDirectory,
                                                       @Nullable LineConsumerFactory lineConsumerFactory)
            throws IOException {
        CommandLine command = new CommandLine(cmd);

        if (args != null) {
            for (String arg: args) {
                command.add(arg);
            }
        }

        CommandLine redactedCommand = new CommandLine(command);
        if (redactedArgs != null) {
            for (String arg: redactedArgs) {
                redactedCommand.add(arg);
            }
        }

        LOG.debug("Running command: " + command.toString());
        final ProcessBuilder processBuilder = new ProcessBuilder(redactedCommand.toShellCommand());

        Map<String, String> environment = processBuilder.environment();
        if (env != null) {
            environment.putAll(env);
        }
        environment.put("LANG", "en_US.UTF-8");
        environment.put("GDM_LANG", "en_US.UTF-8");
        environment.put("LANGUAGE", "us");

        processBuilder.directory(workingDirectory);

        LineConsumer lineConsumer = LineConsumer.DEV_NULL;
        if (lineConsumerFactory != null) {
            lineConsumer = lineConsumerFactory.newLineConsumer();
        }

        final CommandLineOutputProcessor stdOutConsumer = new CommandLineOutputProcessor(new ArrayList<String>());
        final CommandLineOutputProcessor stdErrConsumer = new CommandLineOutputProcessor(new ArrayList<String>());

        final Process process = processBuilder.start();

        final Watchdog watcher;

        if (timeout > 0) {
            watcher = new Watchdog(timeout, TimeUnit.MILLISECONDS);

            watcher.start(new CancellableProcessWrapper(process));
        }

        try (LineConsumer consumer = new CompositeLineConsumer(lineConsumer, stdOutConsumer)) {
            ProcessUtil.process(process, consumer, stdErrConsumer);
            process.waitFor();
        } catch (InterruptedException e) {
            throw new IOException(e);
        }

        return new CommandLineResult(command, process.exitValue(), stdOutConsumer.getOutput(), stdErrConsumer.getOutput());
    }

