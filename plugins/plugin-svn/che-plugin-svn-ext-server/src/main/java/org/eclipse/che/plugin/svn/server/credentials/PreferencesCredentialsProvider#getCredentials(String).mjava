    @Override
    public Credentials getCredentials(final String repositoryUrl) throws CredentialsException {
        LOG.debug("getCredentials called for " + repositoryUrl);
        String serializedCredentials;
        try {
            serializedCredentials = this.preferencesAccess.getPreference(SVN_CREDENTIALS);
        } catch (final PreferencesAccessException e) {
            throw new CredentialsException(e);
        }
        LOG.debug("getCredentials - {} read: {}", SVN_CREDENTIALS, serializedCredentials);
        if (serializedCredentials == null) {
            return null;
        }
        final DtoFactory dtoFactory = DtoFactory.getInstance();
        final UserCredentialStore userCredentials = dtoFactory.createDtoFromJson(serializedCredentials, UserCredentialStore.class);
        if (userCredentials == null || userCredentials.getRepositoriesCredentials() == null) {
            return null;
        }
        LOG.debug("getCredentials - user credentials found with keys:{}",
                  Arrays.toString(userCredentials.getRepositoriesCredentials().keySet().toArray()));
        final RepositoryCredentials repositoryCreds = userCredentials.getRepositoriesCredentials().get(repositoryUrl);
        if (repositoryCreds == null) {
            LOG.debug("getCredentials - no credentials found for " + repositoryUrl);
            return null;
        }
        LOG.debug("getCredentials - repository credentials found for " + repositoryUrl);
        String username = "";
        if (repositoryCreds.getUsername() != null) {
            username = repositoryCreds.getUsername();
        }
        LOG.debug("getCredentials - got username:" + username);
        final int schemeVersion = repositoryCreds.getEncryptionSchemeVersion();
        final EncryptTextService encryptService = this.encryptTextServiceRegistry.getService(schemeVersion);
        if (encryptService == null) {
            throw new CredentialsException("No encryption service matches the specified one");
        }
        final String encryptedPassword = repositoryCreds.getEncryptedPassword();
        if (encryptedPassword == null || encryptedPassword.isEmpty()) {
            LOG.debug("getCredentials - got empty password");
            return new Credentials(username, encryptedPassword);
        }
        final EncryptResult toDecrypt = new EncryptResult(encryptedPassword, repositoryCreds.getInitVector());
        String password;
        try {
            password = encryptService.decryptText(toDecrypt);
        } catch (final EncryptException e) {
            LOG.warn("getCredentials - decrypt password failed");
            throw new CredentialsException(e);
        }
        LOG.debug("getCredentials: found {}, ####", username);
        return new Credentials(username, password);
    }

