    /**
     * Perform a "svn switch" based on the request.
     *
     * @param request
     *         the switch request
     * @return the response
     * @throws ApiException
     *         if there is a Subversion issue
     */
    public CLIOutputWithRevisionResponse doSwitch(final SwitchRequest request) throws ApiException {

        final File projectPath = new File(request.getProjectPath());
        final List<String> cliArgs = defaultArgs();

        // Flags
        addFlag(cliArgs, "--ignore-externals", request.isIgnoreExternals());
        addFlag(cliArgs, "--ignore-ancestry", request.isIgnoreAncestry());
        addFlag(cliArgs, "--relocate", request.isRelocate());
        addFlag(cliArgs, "--force", request.isForce());

        // Options
        addOption(cliArgs, "--depth", request.getDepth());
        addOption(cliArgs, "--set-depth", request.getSetDepth());
        addOption(cliArgs, "--revision", request.getRevision());
        addOption(cliArgs, "--accept", request.getAccept());

        // Command Name
        cliArgs.add("switch");

        CommandLineResult result = runCommand(null,
                                              cliArgs,
                                              projectPath,
                                              singletonList(request.getLocation()),
                                              request.getUsername(),
                                              request.getPassword());

        return newDto(CLIOutputWithRevisionResponse.class).withCommand(result.getCommandLine().toString())
                                                          .withOutput(result.getStdout())
                                                          .withErrOutput(result.getStderr())
                                                          .withRevision(SubversionUtils.getUpdateRevision(result.getStdout()));
    }

