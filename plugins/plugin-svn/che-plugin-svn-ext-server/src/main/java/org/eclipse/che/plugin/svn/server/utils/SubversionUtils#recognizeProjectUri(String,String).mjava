  /**
   * Combines {@code repoRoot} and {@code relativeProjectPath} and returns absolute project path.
   * {@code relativeProjectPath} can point to a branch, tag or any directory inside a project:
   * ^/project/trunk ^/project/dir1/dir2 ^/project/branches/1.0-SNAPSHOT ^/project/tags/2.0
   * ^/project The important thing that the first entry of the relative path is treated as a project
   * name. Otherwise the {@code repoRoot} will be returned as an absolute project path: ^/ ^/trunk
   *
   * @param repoRoot the repository uri
   * @param relativeProjectPath the relative project path
   * @return absolute project uri
   */
  @Nullable
  public static String recognizeProjectUri(
      @Nullable final String repoRoot, @Nullable final String relativeProjectPath) {

    if (isNullOrEmpty(repoRoot) || isNullOrEmpty(relativeProjectPath)) {
      return null;
    }

    checkState(
        isRelativePath(relativeProjectPath),
        "Illegal relative project path " + relativeProjectPath);

    String[] entries = relativeProjectPath.split("/");
    if (entries.length == 1) {
      return repoRoot;
    }

    String candidateToProjectName = entries[1];
    if (candidateToProjectName.equals("trunk")
        || candidateToProjectName.equals("branches")
        || candidateToProjectName.equals("tags")) {
      return repoRoot;
    }

    return repoRoot + "/" + candidateToProjectName;
  }

