    @Override
    public void importSources(FolderEntry baseFolder, SourceStorage sourceStorage, LineConsumerFactory lineConsumerFactory)
            throws ForbiddenException, ConflictException, UnauthorizedException, IOException, ServerException {
        if (!baseFolder.isFolder()) {
            throw new IOException("Project cannot be imported into \"" + baseFolder.getName() + "\".  "
                                  + "It is not a folder.");
        }

        final String location = sourceStorage.getLocation();
        final Map<String,String> parameters = sourceStorage.getParameters();

        // can't store the credentials yet, no workspaceId/projectId
        String[] credentials = null;
        String username = "";
        String password = "";
        if (parameters != null) {
            String paramUsername = parameters.get(ImportParameterKeys.PARAMETER_USERNAME);
            if (paramUsername != null) {
                username = paramUsername;
            }
            String paramPassword = parameters.get(ImportParameterKeys.PARAMETER_PASSWORD);
            if (paramPassword != null) {
                password = paramPassword;
            }
            credentials = new String[]{username, password};
            try {
                this.credentialsProvider.storeCredential(location, new CredentialsProvider.Credentials(username, password));
            } catch (final CredentialsException e) {
                LoggerFactory.getLogger(SubversionProjectImporter.class.getName())
                             .warn("Could not store credentials - try to continue anyway." + e.getMessage());
            }
        }

        this.subversionApi.setOutputLineConsumerFactory(lineConsumerFactory);

        // Perform checkout
        this.subversionApi.checkout(DtoFactory.getInstance()
                                              .createDto(CheckoutRequest.class)
                                              .withProjectPath(baseFolder.getVirtualFile().toIoFile().getAbsolutePath())
                                              .withUrl(location),
                                    credentials);
    }

