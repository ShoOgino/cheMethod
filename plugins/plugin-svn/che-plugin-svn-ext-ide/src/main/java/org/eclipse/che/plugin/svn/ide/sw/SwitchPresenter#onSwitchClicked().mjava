    @Override
    public void onSwitchClicked() {
        performOperationWithCredentialsRequestIfNeeded(new RemoteSubversionOperation<CLIOutputWithRevisionResponse>() {
            @Override
            public Promise<CLIOutputWithRevisionResponse> perform(Credentials credentials) {
                return service.doSwitch(switchView.getLocation(),
                                        appContext.getRootProject().getLocation(),
                                        switchView.isSwitchToHeadRevision() ? "HEAD" : switchView.getRevision(),
                                        switchView.getDepth(),
                                        switchView.getWorkingCopyDepth(),
                                        switchView.getAccept(),
                                        switchView.isIgnoreExternals(),
                                        switchView.isIgnoreAncestry(),
                                        false,
                                        switchView.isForce(),
                                        credentials);
            }
        }, null).then(new Operation<CLIOutputWithRevisionResponse>() {
            @Override
            public void apply(CLIOutputWithRevisionResponse response) throws OperationException {
                printResponse(response.getCommand(), response.getOutput(), response.getErrOutput(), constants.commandSwitch());
                SwitchPresenter.this.switchView.close();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                notificationManager.notify(constants.switchRequestError(switchView.getLocation()), error.getMessage(), FAIL, EMERGE_MODE);
            }
        });
    }

