  @Override
  public Promise<List<Node>> list(final String location) {
    return performOperationWithCredentialsRequestIfNeeded(
            new RemoteSubversionOperation<CLIOutputResponse>() {
              @Override
              public Promise<CLIOutputResponse> perform(Credentials credentials) {
                return service.list(
                    appContext.getRootProject().getLocation(), location, credentials);
              }
            },
            null)
        .then(
            new Function<CLIOutputResponse, List<Node>>() {
              @Override
              public List<Node> apply(CLIOutputResponse response) throws FunctionException {
                List<Node> nodes = new ArrayList<>();

                List<String> output = response.getOutput();
                for (String item : output) {
                  if (item.endsWith("/")) {
                    String nodeLocation = location + "/" + item.substring(0, item.length() - 1);
                    nodes.add(new SvnNode(nodeLocation, resources, SwitchPresenter.this));
                  }
                }

                return nodes;
              }
            })
        .catchError(
            new Function<PromiseError, List<Node>>() {
              @Override
              public List<Node> apply(PromiseError error) throws FunctionException {
                notificationManager.notify(
                    constants.listRequestError(location), error.getMessage(), FAIL, EMERGE_MODE);
                return Collections.emptyList();
              }
            });
  }

