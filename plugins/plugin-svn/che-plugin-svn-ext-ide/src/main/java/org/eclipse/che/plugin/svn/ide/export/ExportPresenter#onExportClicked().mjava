  /** {@inheritDoc} */
  @Override
  public void onExportClicked() {
    final Project project = appContext.getRootProject();

    checkState(project != null);

    final Resource[] resources = appContext.getResources();

    checkState(!Arrays.isNullOrEmpty(resources));
    checkState(resources.length == 1);

    final String givenRevision = view.isRevisionSpecified() ? view.getRevision() : null;

    final StatusNotification notification =
        new StatusNotification(
            constants.exportStarted(resources[0].getLocation().toString()), PROGRESS, FLOAT_MODE);
    notificationManager.notify(notification);

    view.onClose();

    if (!isNullOrEmpty(givenRevision)) {
      service
          .getRevisions(project.getLocation(), toRelative(project, resources[0]), "1:HEAD")
          .then(
              new Operation<GetRevisionsResponse>() {
                @Override
                public void apply(GetRevisionsResponse response) throws OperationException {
                  final List<String> pathRevisions = response.getRevisions();

                  if (pathRevisions.size() > 0) {
                    final String pathFirstRevision = pathRevisions.get(0);
                    final String pathLastRevision = pathRevisions.get(pathRevisions.size() - 1);

                    final int givenRevisionNb = Integer.valueOf(givenRevision);
                    final int pathFirstRevisionNb = Integer.valueOf(pathFirstRevision.substring(1));
                    final int pathLastRevisionNb = Integer.valueOf(pathLastRevision.substring(1));

                    final List<String> errOutput = response.getErrOutput();
                    if (errOutput != null && !errOutput.isEmpty()) {
                      printErrors(errOutput, constants.commandInfo());
                      notification.setTitle(constants.exportCommandExecutionError());
                      notification.setStatus(FAIL);

                    } else if (givenRevisionNb < pathFirstRevisionNb
                        || givenRevisionNb > pathLastRevisionNb) {
                      notification.setTitle(
                          constants.exportRevisionDoNotExistForPath(
                              givenRevision, toRelative(project, resources[0]).toString()));
                      notification.setStatus(FAIL);

                    } else {
                      openExportPopup(
                          project.getLocation(),
                          toRelative(project, resources[0]),
                          givenRevision,
                          notification);
                    }
                  } else {
                    notification.setTitle(
                        constants.exportNoRevisionForPath(
                            toRelative(project, resources[0]).toString()));
                    notification.setStatus(FAIL);
                  }
                }
              })
          .catchError(
              new Operation<PromiseError>() {
                @Override
                public void apply(PromiseError error) throws OperationException {
                  notification.setTitle(
                      constants.exportCommandExecutionError() + "\n" + error.getMessage());
                  notification.setStatus(FAIL);
                }
              });
    } else {
      openExportPopup(project.getLocation(), toRelative(project, resources[0]), null, notification);
    }
  }

