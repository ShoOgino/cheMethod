  /** Fetches the count of revisions and opens the popup. */
  public void showLog() {
    final Project project = appContext.getRootProject();

    checkState(project != null);

    final Resource[] resources = appContext.getResources();

    checkState(!Arrays.isNullOrEmpty(resources));
    checkState(resources.length == 1);

    performOperationWithCredentialsRequestIfNeeded(
            new RemoteSubversionOperation<InfoResponse>() {
              @Override
              public Promise<InfoResponse> perform(Credentials credentials) {
                return service.info(
                    project.getLocation(),
                    toRelative(project, resources[0]).toString(),
                    "HEAD",
                    false,
                    credentials);
              }
            },
            null)
        .then(
            new Operation<InfoResponse>() {
              @Override
              public void apply(InfoResponse response) throws OperationException {
                if (response.getErrorOutput() != null && !response.getErrorOutput().isEmpty()) {
                  printErrors(response.getErrorOutput(), constants.commandInfo());
                  notificationManager.notify(
                      "Unable to execute subversion command", FAIL, FLOAT_MODE);
                  return;
                }

                SubversionItem subversionItem = response.getItems().get(0);
                view.setRevisionCount(subversionItem.getRevision());
                view.rangeField().setValue("1:" + subversionItem.getRevision());
                view.show();
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError error) throws OperationException {
                notificationManager.notify(error.getMessage(), FAIL, FLOAT_MODE);
              }
            });
  }

