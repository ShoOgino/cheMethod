        @Override
        protected Promise<List<Node>> getChildrenImpl() {
            final Project project = appContext.getRootProject();
            checkState(project != null);

            return service.info(project.getLocation(), getData().getURL(), "HEAD", true)
                          .then(new Function<InfoResponse, List<Node>>() {
                              @Override
                              public List<Node> apply(InfoResponse response) throws FunctionException {
                                  if (response.getErrorOutput() != null && !response.getErrorOutput().isEmpty()) {
                                      printErrors(response.getErrorOutput(), constants.commandInfo());
                                      notificationManager.notify("Unable to execute subversion command", FAIL, FLOAT_MODE);
                                      return Collections.emptyList();
                                  }

                                  List<Node> children = new ArrayList<>();
                                  if (response.getItems().size() > 1) {
                                      for (int i = 1; i < response.getItems().size(); i++) {
                                          SubversionItem item = response.getItems().get(i);
                                          if (!"file".equals(item.getNodeKind())) {
                                              children.add(new SubversionItemNode(item));
                                          }
                                      }
                                  }

                                  return children;
                              }
                          }).catchError(new Operation<PromiseError>() {
                        @Override
                        public void apply(PromiseError error) throws OperationException {
                            notificationManager.notify(error.getMessage(), FAIL, FLOAT_MODE);
                        }
                    });
        }

