  protected void doUpdate(
      final String revision,
      final String depth,
      final boolean ignoreExternals,
      final UpdateToRevisionView view) {

    final Project project = appContext.getRootProject();

    checkState(project != null);

    final Resource[] resources = appContext.getResources();

    checkState(!Arrays.isNullOrEmpty(resources));

    final StatusNotification notification =
        new StatusNotification(constants.updateToRevisionStarted(revision), PROGRESS, FLOAT_MODE);
    notificationManager.notify(notification);

    performOperationWithCredentialsRequestIfNeeded(
            new RemoteSubversionOperation<CLIOutputWithRevisionResponse>() {
              @Override
              public Promise<CLIOutputWithRevisionResponse> perform(Credentials credentials) {

                notification.setStatus(PROGRESS);
                notification.setTitle(constants.updateToRevisionStarted(revision));

                return service.update(
                    project.getLocation(),
                    toRelative(project, resources),
                    revision,
                    depth,
                    ignoreExternals,
                    "postpone",
                    credentials);
              }
            },
            notification)
        .then(
            new Operation<CLIOutputWithRevisionResponse>() {
              @Override
              public void apply(CLIOutputWithRevisionResponse response) throws OperationException {
                printResponse(
                    response.getCommand(),
                    response.getOutput(),
                    response.getErrOutput(),
                    constants.commandUpdate());

                notification.setTitle(
                    constants.updateSuccessful(Long.toString(response.getRevision())));
                notification.setStatus(SUCCESS);

                if (view != null) {
                  view.close();
                }
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError error) throws OperationException {
                notification.setTitle(constants.updateFailed());
                notification.setStatus(FAIL);
              }
            });
  }

