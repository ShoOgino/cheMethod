  /**
   * Performs subversion operation. If this operations fails with authorization error the operation
   * will be recalled with requested credentials
   *
   * @param notification progress notification to set operation status
   */
  protected <Y> Promise<Y> performOperationWithCredentialsRequestIfNeeded(
      final RemoteSubversionOperation<Y> operation,
      @Nullable final StatusNotification notification) {
    return operation
        .perform(null)
        .catchErrorPromise(
            new Function<PromiseError, Promise<Y>>() {
              @Override
              public Promise<Y> apply(PromiseError error) throws FunctionException {
                if (getErrorCode(error.getCause()) == ErrorCodes.UNAUTHORIZED_SVN_OPERATION) {
                  if (notification != null) {
                    notification.setTitle(locale.waitingCredentials());
                    notification.setStatus(PROGRESS);
                  } else {
                    notificationManager.notify(error.getMessage(), FAIL, FLOAT_MODE);
                  }

                  return credentialsDialog
                      .askCredentials()
                      .thenPromise(
                          new Function<Credentials, Promise<Y>>() {
                            @Override
                            public Promise<Y> apply(Credentials credentials)
                                throws FunctionException {
                              return operation.perform(credentials);
                            }
                          });
                }
                return Promises.reject(error);
              }
            });
  }

