  /* Default constructor creating an instance of this MergeViewImpl */
  @Inject
  public MergeViewImpl(
      SubversionExtensionLocalizationConstants constants, SubversionExtensionResources resources) {
    this.constants = constants;
    this.resources = resources;

    ensureDebugId("plugin-svn merge-dialog");
    setWidget(uiBinder.createAndBindUi(this));
    setTitle(constants.mergeDialogTitle());

    mergeButton =
        createButton(
            constants.buttonMerge(),
            "plugin-svn-merge-dialog-merge-button",
            new ClickHandler() {
              @Override
              public void onClick(ClickEvent event) {
                delegate.mergeClicked();
              }
            });
    mergeButton.addStyleName(Window.resources.windowCss().button());
    addButtonToFooter(mergeButton);

    cancelButton =
        createButton(
            constants.buttonCancel(),
            "plugin-svn-merge-dialog-cancel-button",
            new ClickHandler() {
              @Override
              public void onClick(ClickEvent event) {
                delegate.cancelClicked();
              }
            });
    addButtonToFooter(cancelButton);

    alertMarker = resources.alert().getSvg();
    alertMarker.getStyle().setWidth(22, Style.Unit.PX);
    alertMarker.getStyle().setHeight(22, Style.Unit.PX);
    alertMarker.getStyle().setMargin(10, Style.Unit.PX);
    getFooter().getElement().appendChild(alertMarker.getElement());
    alertMarker.getStyle().setVisibility(Style.Visibility.HIDDEN);

    targetTextBox.setEnabled(false);

    tree = new Tree(new NodeStorage(), new NodeLoader());
    tree.getSelectionModel().setSelectionMode(SelectionModel.Mode.SINGLE);
    tree.getSelectionModel()
        .addSelectionChangedHandler(
            new SelectionChangedEvent.SelectionChangedHandler() {
              @Override
              public void onSelectionChanged(SelectionChangedEvent event) {
                final List<Node> selection = event.getSelection();

                if (selection == null || selection.isEmpty()) {
                  return;
                }

                delegate.onNodeSelected(selection.get(0));
              }
            });

    treeContainer.add(tree);
  }

