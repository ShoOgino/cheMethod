    @Inject
    public SubversionExtension(final ActionManager actionManager,
                               final AddAction addAction,
                               final ChangeCredentialsAction changeCredentialsAction,
                               final CleanupAction cleanupAction,
                               final CommitAction commitAction,
                               final DiffAction diffAction,
                               final ExportAction exportAction,
                               final LockAction lockAction,
                               final LogAction logAction,
                               final MergeAction mergeAction,
                               final PropertiesAction propertiesAction,
                               final RemoveAction removeAction,
                               final ResolveAction resolveAction,
                               final CopyAction copyAction,
                               final MoveAction moveAction,
                               final RevertAction revertAction,
                               final StatusAction statusAction,
                               final UnlockAction unlockAction,
                               final UpdateAction updateAction,
                               final UpdateToRevisionAction updateToRevisionAction,
                               final SubversionExtensionLocalizationConstants constants,
                               final SubversionExtensionResources resources) {
        SVN_GROUP_MAIN_MENU = constants.subversionLabel();

        final Constraints beforeWindow = new Constraints(Anchor.BEFORE, IdeActions.GROUP_HELP);
        final DefaultActionGroup addCommandGroup = new DefaultActionGroup(ADD_COMMAND_GROUP, false, actionManager);
        final DefaultActionGroup mainMenu = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_MAIN_MENU);
        final DefaultActionGroup fileCommandGroup = new DefaultActionGroup(FILE_COMMAND_GROUP, false, actionManager);
        final DefaultActionGroup miscellaneousCommandGroup = new DefaultActionGroup(MISCELLANEOUS_COMMAND_GROUP, false,
                                                                                    actionManager);
        final DefaultActionGroup remoteCommandGroup = new DefaultActionGroup(REMOTE_COMMAND_GROUP, false,
                                                                             actionManager);
        final DefaultActionGroup repositoryCommandGroup = new DefaultActionGroup(REPOSITORY_COMMAND_GROUP, false,
                                                                                 actionManager);
        final DefaultActionGroup credentialsCommandGroup = new DefaultActionGroup(CREDENTIALS_COMMAND_GROUP, false,
                                                                                  actionManager);
        final DefaultActionGroup svnMenu = new DefaultActionGroup(SVN_GROUP_MAIN_MENU, true, actionManager);

        resources.subversionCSS().ensureInjected();

        // Register action groups
        actionManager.registerAction(SVN_GROUP_MAIN_MENU, svnMenu);
        mainMenu.add(svnMenu, beforeWindow);

        actionManager.registerAction(REMOTE_COMMAND_GROUP, remoteCommandGroup);
        svnMenu.add(remoteCommandGroup);
        svnMenu.addSeparator();

        actionManager.registerAction(FILE_COMMAND_GROUP, fileCommandGroup);
        svnMenu.add(fileCommandGroup);
        svnMenu.addSeparator();

        actionManager.registerAction(REPOSITORY_COMMAND_GROUP, repositoryCommandGroup);
        svnMenu.add(repositoryCommandGroup);
        svnMenu.addSeparator();

        actionManager.registerAction(ADD_COMMAND_GROUP, addCommandGroup);
        svnMenu.add(addCommandGroup);
        svnMenu.addSeparator();

        actionManager.registerAction(MISCELLANEOUS_COMMAND_GROUP, miscellaneousCommandGroup);
        svnMenu.add(miscellaneousCommandGroup);
        svnMenu.addSeparator();

        actionManager.registerAction(CREDENTIALS_COMMAND_GROUP, credentialsCommandGroup);
        svnMenu.add(credentialsCommandGroup);

        // Register actions

        // Commands that provide status of project or files
        actionManager.registerAction("SvnStatus", statusAction);
        remoteCommandGroup.add(statusAction);
        actionManager.registerAction("SvnViewLog", logAction);
        remoteCommandGroup.add(logAction);
        actionManager.registerAction("SvnDiff", diffAction);
        remoteCommandGroup.add(diffAction);

        // Commands that manage pull and push of changes
        actionManager.registerAction("SvnUpdate", updateAction);
        fileCommandGroup.add(updateAction);
        actionManager.registerAction("SvnUpdateToRevision",
                                     updateToRevisionAction);
        fileCommandGroup.add(updateToRevisionAction);
        actionManager.registerAction("SvnCommit", commitAction);
        fileCommandGroup.add(commitAction);
        actionManager.registerAction("SvnResolve", resolveAction);
        fileCommandGroup.add(resolveAction);

        actionManager.registerAction("SvnCopy", copyAction);
        fileCommandGroup.add(copyAction);
        actionManager.registerAction("SvnMove", moveAction);
        fileCommandGroup.add(moveAction);

        // Commands that interact with the repository
        actionManager.registerAction("SvnMerge", mergeAction);
        repositoryCommandGroup.add(mergeAction);
        actionManager.registerAction("SvnExport", exportAction);
        repositoryCommandGroup.add(exportAction);

        // Commands for miscellany
        actionManager.registerAction("SvnProperties", propertiesAction);
        miscellaneousCommandGroup.add(propertiesAction);

        // Commands that manage working copy
        actionManager.registerAction("SvnAdd", addAction);
        addCommandGroup.add(addAction);
        actionManager.registerAction("SvnRemove", removeAction);
        addCommandGroup.add(removeAction);
        actionManager.registerAction("SvnRevert", revertAction);
        addCommandGroup.add(revertAction);
        actionManager.registerAction("SvnLock", lockAction);
        addCommandGroup.add(lockAction);
        actionManager.registerAction("SvnUnlock", unlockAction);
        addCommandGroup.add(unlockAction);
        actionManager.registerAction("SvnCleanup", cleanupAction);
        addCommandGroup.add(cleanupAction);

        actionManager.registerAction("SvnChangeCredentials", changeCredentialsAction);
        credentialsCommandGroup.add(changeCredentialsAction);

        //context menu
        DefaultActionGroup contextGroup = new DefaultActionGroup("Subversion", true, actionManager);
        contextGroup.getTemplatePresentation().setDescription("Subversion operation...");

        contextGroup.add(statusAction);
        contextGroup.add(logAction);
        contextGroup.add(diffAction);
        contextGroup.addSeparator();
        contextGroup.add(updateAction);
        contextGroup.add(commitAction);
        contextGroup.add(resolveAction);
        contextGroup.addSeparator();
        contextGroup.add(mergeAction);
        contextGroup.addSeparator();
        contextGroup.add(addAction);
        contextGroup.add(removeAction);
        contextGroup.add(cleanupAction);
        contextGroup.add(revertAction);

        contextGroup.getTemplatePresentation().setSVGResource(resources.svn());

        DefaultActionGroup mainContextMenuGroup = (DefaultActionGroup)actionManager.getAction("resourceOperation");
        mainContextMenuGroup.add(contextGroup);
    }

