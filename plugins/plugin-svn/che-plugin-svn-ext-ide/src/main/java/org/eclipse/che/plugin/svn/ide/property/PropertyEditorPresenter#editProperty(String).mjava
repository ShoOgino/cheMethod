    private void editProperty(String projectPath) {
        final String propertyName = view.getSelectedProperty();
        final Depth depth = view.getDepth();
        final String propertyValue = view.getPropertyValue();
        final boolean force = view.isForceSelected();

        String headPath = getSelectedPaths().get(0);

        final StatusNotification notification = new StatusNotification(constants.propertyModifyStart(), PROGRESS, true);
        notificationManager.notify(notification);

        Unmarshallable<CLIOutputResponse> unmarshaller = dtoUnmarshallerFactory.newUnmarshaller(CLIOutputResponse.class);
        service.propertySet(projectPath, propertyName, propertyValue, depth, force, headPath,
                            new AsyncRequestCallback<CLIOutputResponse>(unmarshaller) {
                                @Override
                                protected void onSuccess(CLIOutputResponse result) {
                                    printResponse(result.getCommand(), result.getOutput(), result.getErrOutput());

                                    notification.setTitle(constants.propertyModifyFinished());
                                    notification.setStatus(SUCCESS);
                                }

                                @Override
                                protected void onFailure(Throwable exception) {
                                    String errorMessage = exception.getMessage();

                                    notification.setTitle(constants.propertyModifyFailed() + errorMessage);
                                    notification.setStatus(FAIL);
                                }
                            });
    }

