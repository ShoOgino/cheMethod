    @Inject
    public PropertyEditorViewImpl(SubversionExtensionResources resources,
                                  SubversionExtensionLocalizationConstants constants,
                                  PropertyEditorViewImplUiBinder uiBinder) {
        this.resources = resources;
        this.constants = constants;


        this.ensureDebugId("svn-property-edit-window");
        this.setTitle("Properties");

        existingProperties = new ArrayList<String>();

        btnCancel = createButton(constants.buttonCancel(), "svn-property-edit-cancel", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onCancelClicked();
            }
        });
        btnCancel.setTabIndex(6);
        getFooter().add(btnCancel);

        btnOk = createButton("Ok", "svn-property-edit-ok", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onOkClicked();
            }
        });
        btnOk.setTabIndex(5);
        getFooter().add(btnOk);

        final String[] props = new String[] {
                "svn:ignore",
                "svn:keywords",
                "svn:mime-type",
                "svn:mergeinfo"
        };

        propertyList = new SuggestBox(new SuggestOracle() {
            @Override
            public void requestSuggestions(final Request request, Callback callback) {
                final List<Suggestion> suggestions = new ArrayList<>();
                for (final String prop : props) {
                    if (!prop.startsWith(request.getQuery())) {
                        continue;
                    }

                    suggestions.add(new SuggestOracle.Suggestion() {
                        /** {@inheritDoc} */
                        @Override
                        public String getDisplayString() {
                            return prop;
                        }

                        /** {@inheritDoc} */
                        @Override
                        public String getReplacementString() {
                            return prop;
                        }
                    });
                }

                callback.onSuggestionsReady(request, new Response(suggestions));
            }
        });

        propertyList.getValueBox().addKeyUpHandler(new KeyUpHandler() {
            /** {@inheritDoc} */
            @Override
            public void onKeyUp(KeyUpEvent event) {

                String propertyListValue = propertyList.getValue();

                int keyCode = event.getNativeKeyCode();
                if (keyCode >= KeyCodes.KEY_A && keyCode <= KeyCodes.KEY_Z
                    || keyCode >= KeyCodes.KEY_ZERO && keyCode <= KeyCodes.KEY_NINE
                    || keyCode >= KeyCodes.KEY_NUM_ZERO && keyCode <= KeyCodes.KEY_NUM_NINE
                    || keyCode == KeyCodes.KEY_ENTER
                    || keyCode == KeyCodes.KEY_BACKSPACE) {

                    setPropertyCurrentValue(Arrays.asList(""));

                    if (!Strings.isNullOrEmpty(propertyListValue) && existingProperties.contains(propertyListValue)) {

                        btnOk.setEnabled(editProperty.getValue() && !Strings.isNullOrEmpty(propertyValue.getText())
                                         || deleteProperty.getValue());
                        delegate.onPropertyNameChanged(propertyListValue);
                    }
                }
            }
        });

        this.setWidget(uiBinder.createAndBindUi(this));

        for (Depth depth : Depth.values()) {
            this.depth.addItem(depth.getDescription(), depth.getValue());
        }

        propertyCurrentValue.setReadOnly(true);
        propertyCurrentValue.getElement().setAttribute("placeHolder", "(current value of property)");
        propertyCurrentValue.getElement().setAttribute("resize", "none");
    }

