    private void showDialog(final boolean lock) {
        final String projectPath = getCurrentProjectPath();

        if (projectPath == null) {
            return;
        }

        final Collection<PathTypeFilter> filter = new ArrayList<>();
        filter.add(PathTypeFilter.FOLDER);
        filter.add(PathTypeFilter.PROJECT);
        final List<String> selectedFolders = getSelectedPaths(filter);
        if (!selectedFolders.isEmpty()) {
            this.dialogFactory.createMessageDialog(getLockDirectoryTitle(lock),
                                                   getLockDirectoryErrorMessage(lock), null).show();
            return;
        }

        final List<String> selectedPaths = getSelectedPaths(Collections.singletonList(PathTypeFilter.FILE));

        final String withoutForceLabel = getWithoutForceLabel(lock);
        final String withForceLabel = getWithForceLabel(lock);
        final String cancelLabel = getCancelLabel(lock);

        final ConfirmCallback withoutForceCallback = new ConfirmCallback() {
            @Override
            public void accepted() {
                doAction(lock, false, selectedPaths);
            }
        };
        final ConfirmCallback withForceCallback = new ConfirmCallback() {
            @Override
            public void accepted() {
                doAction(lock, true, selectedPaths);
            }
        };
        final ChoiceDialog dialog = this.choiceDialogFactory.createChoiceDialog(getTitle(lock), getContent(lock),
                                                                                withoutForceLabel, withForceLabel, cancelLabel,
                                                                                withoutForceCallback, withForceCallback,
                                                                                null);
        dialog.show();
    }

