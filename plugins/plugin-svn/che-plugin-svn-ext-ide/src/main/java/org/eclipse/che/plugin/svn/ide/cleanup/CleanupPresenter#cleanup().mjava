    public void cleanup() {

        final String projectPath = getCurrentProjectPath();
        if (projectPath == null) {
            return;
        }

        final List<PathTypeFilter> filters = new ArrayList<>();
        filters.add(PathTypeFilter.FOLDER);
        filters.add(PathTypeFilter.PROJECT);
        final List<String> selectedPaths = getSelectedPaths(filters);

        this.service.cleanup(projectPath, selectedPaths,
                             new AsyncRequestCallback<CLIOutputResponse>(dtoUnmarshallerFactory.newUnmarshaller(CLIOutputResponse.class)) {
                                 @Override
                                 protected void onSuccess(final CLIOutputResponse result) {

                                     printResponse(result.getCommand(), result.getOutput(), result.getErrOutput());

                                     notificationManager.notify(constants.cleanupSuccessful());
                                 }

                                 @Override
                                 protected void onFailure(final Throwable exception) {
                                     final String errorMessage = exception.getMessage();
                                     notificationManager.notify(constants.cleanupFailed() + ": " + errorMessage, FAIL, true);
                                 }
                             });
    }

