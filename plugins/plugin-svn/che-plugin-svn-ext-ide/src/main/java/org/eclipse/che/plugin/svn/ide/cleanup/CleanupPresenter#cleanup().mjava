  public void cleanup() {

    final Project project = appContext.getRootProject();

    checkState(project != null);

    final Resource[] resources = appContext.getResources();

    checkState(!Arrays.isNullOrEmpty(resources));

    service
        .cleanup(project.getLocation(), toRelative(project, resources))
        .then(
            new Operation<CLIOutputResponse>() {
              @Override
              public void apply(CLIOutputResponse result) throws OperationException {
                printResponse(
                    result.getCommand(),
                    result.getOutput(),
                    result.getErrOutput(),
                    constants.commandCleanup());

                notificationManager.notify(constants.cleanupSuccessful());
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError error) throws OperationException {
                notificationManager.notify(
                    constants.cleanupFailed() + ": " + error.getMessage(), FAIL, FLOAT_MODE);
              }
            });
  }

