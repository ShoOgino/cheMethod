    public void showStatus() {
        final List<String> selectedPaths = getSelectedPaths();
        final String projectPath = getCurrentProjectPath();

        if (projectPath == null) {
            return;
        }

        service.status(projectPath, selectedPaths, null, false, false, false, true, false, null,
                       new AsyncRequestCallback<CLIOutputResponse>(dtoUnmarshallerFactory.newUnmarshaller(CLIOutputResponse.class)) {
                           @Override
                           protected void onSuccess(final CLIOutputResponse response) {
                               printResponse(response.getCommand(), response.getOutput(), response.getErrOutput(),
                                             constants.commandStatus());
                           }

                           @Override
                           protected void onFailure(final Throwable exception) {
                               String errorMessage = exception.getMessage();
                               notificationManager.notify(constants.statusFailed() + " - " + errorMessage, FAIL, FLOAT_MODE);
                           }
                       });
    }

