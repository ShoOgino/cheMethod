  public void showDiff() {
    final Project project = appContext.getRootProject();

    checkState(project != null);

    final Resource[] resources = appContext.getResources();

    checkState(!Arrays.isNullOrEmpty(resources));

    performOperationWithCredentialsRequestIfNeeded(
            new RemoteSubversionOperation<CLIOutputResponse>() {
              @Override
              public Promise<CLIOutputResponse> perform(Credentials credentials) {
                return service.showDiff(
                    project.getLocation(), toRelative(project, resources), "HEAD", credentials);
              }
            },
            null)
        .then(
            new Operation<CLIOutputResponse>() {
              @Override
              public void apply(CLIOutputResponse response) throws OperationException {
                printResponse(
                    response.getCommand(),
                    response.getOutput(),
                    response.getErrOutput(),
                    constants.commandDiff());
                ;
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError error) throws OperationException {
                notificationManager.notify(error.getMessage(), FAIL, FLOAT_MODE);
              }
            });
  }

