    /** {@inheritDoc} */
    @Override
    public void onNodeExpanded(TreeNode<?> node) {
        List<TreeNode<?>> children = node.getChildren();
        for (TreeNode<?> childNode : children) {
            if (childNode.getChildren() == null && childNode instanceof SubversionTreeNode) {

                final SubversionTreeNode subversionTreeNode = (SubversionTreeNode)childNode;

                subversionClientService.info(getActiveProject().getRootProject().getPath(), subversionTreeNode.getData().getURL(), "HEAD", true,
                        new AsyncRequestCallback<InfoResponse>(dtoUnmarshallerFactory.newUnmarshaller(InfoResponse.class)) {
                            @Override
                            protected void onSuccess(final InfoResponse result) {
                                if (result.getErrorOutput() != null && !result.getErrorOutput().isEmpty()) {
                                    printErrors(result.getErrorOutput(), constants.commandInfo());
                                    notificationManager.notify("Unable to execute subversion command", FAIL, true);
                                    return;
                                }

                                List<TreeNode<?>> children = new ArrayList<>();
                                if (result.getItems().size() > 1) {
                                    for (int i = 1; i < result.getItems().size(); i++) {
                                        SubversionItem item = result.getItems().get(i);
                                        if (!"file".equals(item.getNodeKind())) {
                                            children.add(new SubversionTreeNode(item));
                                        }
                                    }
                                    Collections.sort(children, svnDirectoryComparator);
                                }

                                subversionTreeNode.setChildren(children);
                                view.render(subversionTreeNode);
                            }

                            @Override
                            protected void onFailure(Throwable exception) {
                                notificationManager.notify(exception.getMessage(), FAIL, true);
                            }
                        });
            }
        }
    }

