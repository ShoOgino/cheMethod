    @Override
    public void onResolveClicked() {
        CurrentProject currentProject = getActiveProject();
        if (currentProject == null) {
            return;
        }

        ProjectConfigDto project = currentProject.getRootProject();
        if (project == null) {
            return;
        }

        HashMap<String, String> filesConflictResolutionActions = new HashMap<String, String>();
        Iterator<String> iterConflicts = conflictsPaths.iterator();

        while (iterConflicts.hasNext()) {
            String path = iterConflicts.next();
            String resolutionActionText = view.getConflictResolutionAction(path);
            if (!resolutionActionText.equals(ConflictResolutionAction.POSTPONE.getText())) {
                filesConflictResolutionActions.put(path, resolutionActionText);
                iterConflicts.remove();
            }
        }

        if (filesConflictResolutionActions.size() > 0) {
            subversionClientService.resolve(project.getPath(), filesConflictResolutionActions, "infinity",
                                            new AsyncCallback<CLIOutputResponseList>() {
                                                @Override
                                                public void onSuccess(CLIOutputResponseList result) {
                                                    for (CLIOutputResponse outputResponse : result.getCLIOutputResponses()) {
                                                        printResponse(outputResponse.getCommand(), outputResponse.getOutput(), null,
                                                                      constants.commandResolve());
                                                    }
                                                }

                                                @Override
                                                public void onFailure(Throwable exception) {
                                                    notificationManager.notify(exception.getMessage(), FAIL, FLOAT_MODE);
                                                }
                                            });
        }
        view.close();
    }

