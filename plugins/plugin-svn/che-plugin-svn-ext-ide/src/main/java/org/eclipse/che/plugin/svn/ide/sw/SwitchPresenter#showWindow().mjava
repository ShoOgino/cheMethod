  public void showWindow() {
    final Project project = appContext.getRootProject();
    checkState(project != null);

    switchView.showWindow();
    switchView.setSwitchButtonEnabled(false);
    invalidateLoadedData();

    performOperationWithCredentialsRequestIfNeeded(
            new RemoteSubversionOperation<InfoResponse>() {
              @Override
              public Promise<InfoResponse> perform(Credentials credentials) {
                return service.info(
                    appContext.getRootProject().getLocation(), ".", "HEAD", false, credentials);
              }
            },
            null)
        .then(
            new Operation<InfoResponse>() {
              @Override
              public void apply(InfoResponse response) throws OperationException {
                if (!response.getItems().isEmpty()) {
                  SubversionItem subversionItem = response.getItems().get(0);
                  projectUri = subversionItem.getProjectUri();
                }

                defaultViewInitialization();
                handleSwitchButton();
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError error) throws OperationException {
                projectUri = "^";

                Path location = appContext.getRootProject().getLocation();
                notificationManager.notify(
                    constants.infoRequestError(location.toString()),
                    error.getMessage(),
                    FAIL,
                    EMERGE_MODE);

                defaultViewInitialization();
                handleSwitchButton();
              }
            });
  }

