    @Override
    public void onSwitchToTagChanged() {
        switchView.setLocationEnabled(false);
        switchView.setSwitchToLocationEnabled(true);
        switchView.setSelectOtherLocationButtonEnabled(false);

        if (tags != null) {
            switchView.setPredefinedLocations(tags);
            switchView.setLocation(composeSwitchLocation());
            handleSwitchButton();
            return;
        }

        performOperationWithCredentialsRequestIfNeeded(new RemoteSubversionOperation<CLIOutputResponse>() {
            @Override
            public Promise<CLIOutputResponse> perform(Credentials credentials) {
                return service.listTags(appContext.getRootProject().getLocation(), credentials);
            }
        }, null).then(new Operation<CLIOutputResponse>() {
            @Override
            public void apply(CLIOutputResponse response) throws OperationException {
                tags = response.getOutput();
                switchView.setPredefinedLocations(tags);
                switchView.setLocation(composeSwitchLocation());
                handleSwitchButton();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                tags = Collections.<String>emptyList();
                switchView.setPredefinedLocations(tags);
                switchView.setLocation(composeSwitchLocation());
                handleSwitchButton();

                notificationManager.notify(constants.listTagsRequestError(projectUri), error.getMessage(), FAIL, EMERGE_MODE);
            }
        });
    }

