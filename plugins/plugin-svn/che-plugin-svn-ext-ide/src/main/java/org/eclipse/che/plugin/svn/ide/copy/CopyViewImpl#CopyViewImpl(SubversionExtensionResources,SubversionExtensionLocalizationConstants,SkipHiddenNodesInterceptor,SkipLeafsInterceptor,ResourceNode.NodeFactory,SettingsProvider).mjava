    @Inject
    public CopyViewImpl(SubversionExtensionResources resources,
                        SubversionExtensionLocalizationConstants constants,
                        SkipHiddenNodesInterceptor skipHiddenNodesInterceptor,
                        SkipLeafsInterceptor skipLeafsInterceptor,
                        ResourceNode.NodeFactory nodeFactory,
                        SettingsProvider settingsProvider) {
        this.resources = resources;
        this.constants = constants;
        this.nodeFactory = nodeFactory;
        this.settingsProvider = settingsProvider;

        this.ensureDebugId("svn-copy-window");

        this.setWidget(uiBinder.createAndBindUi(this));

        btnCancel = createButton(constants.buttonCancel(), "svn-copy-cancel", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onCancelClicked();
            }
        });
        addButtonToFooter(btnCancel);

        btnCopy = createButton("Copy", "svn-copy-copy", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onCopyClicked();
            }
        });
        addButtonToFooter(btnCopy);

        alertMarker = resources.alert().getSvg();
        alertMarker.getStyle().setWidth(22, Style.Unit.PX);
        alertMarker.getStyle().setHeight(22, Style.Unit.PX);
        alertMarker.getStyle().setMargin(10, Style.Unit.PX);
        getFooter().getElement().appendChild(alertMarker.getElement());
        alertMarker.getStyle().setVisibility(Style.Visibility.HIDDEN);

        tree = new Tree(new NodeStorage(), new NodeLoader(Sets.newHashSet(skipHiddenNodesInterceptor, skipLeafsInterceptor)));

        tree.getSelectionModel().setSelectionMode(SelectionModel.Mode.SINGLE);

        tree.getSelectionModel().addSelectionChangedHandler(new SelectionChangedEvent.SelectionChangedHandler() {
            @Override
            public void onSelectionChanged(SelectionChangedEvent event) {
                final List<Node> selection = event.getSelection();

                if (selection == null || selection.isEmpty()) {
                    return;
                }

                final Node node = selection.get(0);

                if (node instanceof ResourceNode) {
                    delegate.onNodeSelected(((ResourceNode)node).getData());
                }

            }
        });

        treeContainer.add(tree);
    }

