    public void showRemove() {
        final String projectPath = getCurrentProjectPath();
        if (projectPath == null) {
            return;
        }

        final List<String> selectedPaths = getSelectedPaths();
        final StatusNotification notification = new StatusNotification(constants.removeStarted(selectedPaths.size()), PROGRESS, true);
        notificationManager.notify(notification);

        service.remove(projectPath, getSelectedPaths(), new AsyncRequestCallback<CLIOutputResponse>(dtoUnmarshallerFactory.newUnmarshaller(CLIOutputResponse.class)) {
            @Override
            protected void onSuccess(final CLIOutputResponse response) {
                printResponse(response.getCommand(), response.getOutput(), response.getErrOutput());

                notification.setTitle(constants.removeSuccessful());
                notification.setStatus(SUCCESS);
            }

            @Override
            protected void onFailure(final Throwable exception) {
                String errorMessage = exception.getMessage();

                notification.setTitle(constants.removeFailed() + ": " + errorMessage);
                notification.setStatus(FAIL);
            }
        });
    }

