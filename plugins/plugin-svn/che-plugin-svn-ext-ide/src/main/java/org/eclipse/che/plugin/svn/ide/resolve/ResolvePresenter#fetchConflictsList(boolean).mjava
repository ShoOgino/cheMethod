    public void fetchConflictsList(boolean forCurrentSelection) {
        CurrentProject currentProject = getActiveProject();
        if (currentProject == null) {
            return;
        }

        ProjectConfigDto projectConfig = currentProject.getRootProject();
        if (projectConfig == null) {
            return;
        }

        if (projectConfig.getPath() == null) {
            return;
        }

        if (!projectConfig.getProblems().isEmpty()) {
            return;
        }

        subversionClientService.showConflicts(projectConfig.getPath(),
                                              forCurrentSelection ? getSelectedPaths() : null,
                                              new AsyncCallback<List<String>>() {
                                                  @Override
                                                  public void onSuccess(List<String> conflictsList) {
                                                      conflictsPaths = conflictsList;
                                                  }

                                                  @Override
                                                  public void onFailure(Throwable exception) {
                                                      notificationManager.notify(exception.getMessage(), FAIL, FLOAT_MODE);
                                                  }
                                              });
    }

