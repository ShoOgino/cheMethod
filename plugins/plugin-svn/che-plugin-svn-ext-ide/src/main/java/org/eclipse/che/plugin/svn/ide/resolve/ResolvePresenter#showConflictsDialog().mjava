    public void showConflictsDialog() {
        final Project project = appContext.getRootProject();

        checkState(project != null);

        final Resource[] resources = appContext.getResources();

        checkState(!Arrays.isNullOrEmpty(resources));

        service.showConflicts(project.getLocation(), toRelative(project, resources)).then(new Operation<CLIOutputResponse>() {
            @Override
            public void apply(CLIOutputResponse response) throws OperationException {
                conflictsList = parseConflictsList(response.getOutput());

                if (conflictsList.isEmpty()) {
                    dialogFactory.createMessageDialog(constants.resolveNoConflictTitle(), constants.resolveNoConflictContent(), null)
                                 .show();

                    return;
                }

                for (String file : conflictsList) {
                    view.addConflictingFile(file);
                }
                view.showDialog();
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {

            }
        });
    }

