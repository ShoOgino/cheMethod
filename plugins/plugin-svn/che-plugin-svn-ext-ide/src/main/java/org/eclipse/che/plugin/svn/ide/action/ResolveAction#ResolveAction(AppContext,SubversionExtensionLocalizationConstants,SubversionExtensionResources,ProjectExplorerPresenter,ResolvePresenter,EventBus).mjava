    @Inject
    public ResolveAction(final AppContext appContext,
                         final SubversionExtensionLocalizationConstants constants,
                         final SubversionExtensionResources resources,
                         final ProjectExplorerPresenter projectExplorerPresenter,
                         final ResolvePresenter presenter,
                         final EventBus eventBus) {
        super(constants.resolvedTitle(), constants.resolvedDescription(), resources.resolved(),
              appContext, constants, resources, projectExplorerPresenter);
        this.presenter = presenter;

        eventBus.addHandler(SubversionProjectUpdatedEvent.TYPE, new SubversionProjectUpdatedHandler() {
            @Override
            public void onProjectUpdated(SubversionProjectUpdatedEvent event) {
                fetchConflicts();
            }
        });
        eventBus.addHandler(CurrentProjectChangedEvent.TYPE, new CurrentProjectChangedHandler() {
            @Override
            public void onCurrentProjectChanged(CurrentProjectChangedEvent event) {
                if (currentProjectPath == null || !currentProjectPath.equals(event.getProjectConfig().getPath())) {
                    currentProjectPath = event.getProjectConfig().getPath();
                    fetchConflicts();
                }
            }
        });
    }

