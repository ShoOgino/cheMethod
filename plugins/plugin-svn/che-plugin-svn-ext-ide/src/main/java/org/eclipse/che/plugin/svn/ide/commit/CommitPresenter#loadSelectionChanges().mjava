    private void loadSelectionChanges() {
        final Project project = appContext.getRootProject();

        checkState(project != null);

        final Resource[] resources = appContext.getResources();

        checkState(!Arrays.isNullOrEmpty(resources));

        service.status(project.getLocation(), toRelative(project, resources), null, false, false, false, true, false, null)
               .then(new Operation<CLIOutputResponse>() {
                   @Override
                   public void apply(CLIOutputResponse response) throws OperationException {
                       List<StatusItem> statusItems = parseChangesList(response);
                       view.setChangesList(statusItems);

                       cache.put(Changes.SELECTION, statusItems);
                   }
               })
               .catchError(new Operation<PromiseError>() {
                   @Override
                   public void apply(PromiseError error) throws OperationException {
                       Log.error(CommitPresenter.class, error.getMessage());
                   }
               });
    }

