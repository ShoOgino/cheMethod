    public void showAdd() {
        final String projectPath = getCurrentProjectPath();
        if (projectPath == null) {
            return;
        }

        final List<String> selectedPaths = getSelectedPaths();
        final StatusNotification notification = new StatusNotification(constants.addStarted(selectedPaths.size()), PROGRESS, FLOAT_MODE);
        notificationManager.notify(notification);

        service.add(projectPath, selectedPaths, null, false, true, false, false,
                    new AsyncRequestCallback<CLIOutputResponse>(dtoUnmarshallerFactory.newUnmarshaller(CLIOutputResponse.class)) {
                        @Override
                        protected void onSuccess(final CLIOutputResponse response) {

                            printResponse(response.getCommand(), response.getOutput(), response.getErrOutput(), constants.commandAdd());

                            if (response.getErrOutput() == null || response.getErrOutput().size() == 0) {
                                notification.setTitle(constants.addSuccessful());
                                notification.setStatus(SUCCESS);
                            } else {
                                notification.setTitle(constants.addWarning());
                                notification.setStatus(FAIL);
                            }
                        }

                        @Override
                        protected void onFailure(final Throwable exception) {
                            String errorMessage = exception.getMessage();

                            notification.setTitle(constants.addFailed() + ": " + errorMessage);
                            notification.setStatus(FAIL);
                        }
                    });
    }

