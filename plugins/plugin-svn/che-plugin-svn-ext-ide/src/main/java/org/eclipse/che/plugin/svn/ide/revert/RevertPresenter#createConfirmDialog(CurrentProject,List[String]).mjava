    private ConfirmDialog createConfirmDialog(final CurrentProject project, final List<String> paths) {
        final ConfirmCallback okCallback = new ConfirmCallback() {
            @Override
            public void accepted() {
                final StatusNotification notification = new StatusNotification(constants.revertStarted(), PROGRESS, true);
                notificationManager.notify(notification);

                subversionClientService.revert(project.getRootProject().getPath(),
                                               paths,
                                               "infinity",
                                               new AsyncRequestCallback<CLIOutputResponse>(
                                                       dtoUnmarshallerFactory.newUnmarshaller(CLIOutputResponse.class)) {

                                                   @Override
                                                   protected void onSuccess(CLIOutputResponse result) {

                                                       printCommand(result.getCommand());

                                                       print(result.getOutput());

                                                       List<String> errOutput = result.getErrOutput();
                                                       printAndSpace(errOutput);

                                                       if (errOutput == null || errOutput.size() == 0) {                                                           
                                                           notification.setTitle(constants.revertSuccessful());
                                                           notification.setStatus(SUCCESS);
                                                       } else {
                                                           notification.setTitle(constants.revertWarning());
                                                           notification.setStatus(SUCCESS);
                                                       }
                                                   }

                                                   @Override
                                                   protected void onFailure(Throwable exception) {
                                                       String errorMessage = exception.getMessage();
                                                       notification.setTitle(constants.revertFailed() + ": " + errorMessage);
                                                       notification.setStatus(FAIL);
                                                   }
                                               });
            }
        };

        final CancelCallback cancelCallback = new CancelCallback() {
            @Override
            public void cancelled() {

            }
        };

        String pathsString = null;
        for (String path : paths) {
            if (pathsString == null) {
                pathsString = path;
            }
            else {
                pathsString += ", " + path;
            }
        }

        String confirmText = paths.size() > 0 ? constants.revertConfirmText(" to " + pathsString) : constants.revertConfirmText("");
        return dialogFactory.createConfirmDialog(constants.revertTitle(), confirmText, okCallback, cancelCallback);
    }

