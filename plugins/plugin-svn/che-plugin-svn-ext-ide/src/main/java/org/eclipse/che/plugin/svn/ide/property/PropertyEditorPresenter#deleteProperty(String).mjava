    private void deleteProperty(String projectPath) {
        final String propertyName = view.getSelectedProperty();
        final Depth depth = view.getDepth();
        final boolean force = view.isForceSelected();

        String headPath = getSelectedPaths().get(0);

        final StatusNotification notification = new StatusNotification(constants.propertyRemoveStart(), PROGRESS, FLOAT_MODE);
        notificationManager.notify(notification);

        Unmarshallable<CLIOutputResponse> unmarshaller = dtoUnmarshallerFactory.newUnmarshaller(CLIOutputResponse.class);
        service.propertyDelete(projectPath, propertyName, depth, force, headPath,
                               new AsyncRequestCallback<CLIOutputResponse>(unmarshaller) {
                                   @Override
                                   protected void onSuccess(CLIOutputResponse result) {
                                       printResponse(result.getCommand(), result.getOutput(), result.getErrOutput(), constants.commandProperty());

                                       notification.setTitle(constants.propertyRemoveFinished());
                                       notification.setStatus(SUCCESS);
                                   }

                                   @Override
                                   protected void onFailure(Throwable exception) {
                                       String errorMessage = exception.getMessage();

                                       notification.setTitle(constants.propertyRemoveFailed() + errorMessage);
                                       notification.setStatus(FAIL);
                                   }
                               });
    }

