    @Inject

    public CopyViewImpl(SubversionExtensionResources resources,
                        SubversionExtensionLocalizationConstants constants,
                        ProjectTreeNodeRenderer projectTreeNodeRenderer,
                        org.eclipse.che.ide.Resources coreResources) {
        this.resources = resources;
        this.constants = constants;

        this.ensureDebugId("svn-copy-window");

        this.setWidget(uiBinder.createAndBindUi(this));

        btnCancel = createButton(constants.buttonCancel(), "svn-copy-cancel", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onCancelClicked();
            }
        });
        getFooter().add(btnCancel);

        btnCopy = createButton("Copy", "svn-copy-copy", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onCopyClicked();
            }
        });
        getFooter().add(btnCopy);

        alertMarker = resources.alert().getSvg();
        alertMarker.getStyle().setWidth(22, Style.Unit.PX);
        alertMarker.getStyle().setHeight(22, Style.Unit.PX);
        alertMarker.getStyle().setMargin(10, Style.Unit.PX);
        getFooter().getElement().appendChild(alertMarker.getElement());
        alertMarker.getStyle().setVisibility(Style.Visibility.HIDDEN);

        rootNode = new AbstractTreeNode<Void>(null, null, null, null) {
            /** {@inheritDoc} */
            @NotNull
            @Override
            public String getId() {
                return "ROOT";
            }

            /** {@inheritDoc} */
            @NotNull
            @Override
            public String getDisplayName() {
                return "ROOT";
            }

            /** {@inheritDoc} */
            @Override
            public boolean isLeaf() {
                return false;
            }

            /** {@inheritDoc} */
            @Override
            public void refreshChildren(AsyncCallback<TreeNode<?>> callback) {
            }
        };

        tree = Tree.create(coreResources, new ProjectTreeNodeDataAdapter(), projectTreeNodeRenderer);
        tree.setTreeEventHandler(new Tree.Listener<TreeNode<?>>() {
            /** {@inheritDoc} */
            @Override
            public void onNodeAction(TreeNodeElement<TreeNode<?>> treeNodeElement) {
            }

            /** {@inheritDoc} */
            @Override
            public void onNodeClosed(TreeNodeElement<TreeNode<?>> treeNodeElement) {
            }

            /** {@inheritDoc} */
            @Override
            public void onNodeContextMenu(int i, int i1, TreeNodeElement<TreeNode<?>> treeNodeElement) {
            }

            /** {@inheritDoc} */
            @Override
            public void onNodeDragStart(TreeNodeElement<TreeNode<?>> treeNodeElement, MouseEvent mouseEvent) {
            }

            /** {@inheritDoc} */
            @Override
            public void onNodeDragDrop(TreeNodeElement<TreeNode<?>> treeNodeElement, MouseEvent mouseEvent) {
            }

            /** {@inheritDoc} */
            @Override
            public void onNodeExpanded(TreeNodeElement<TreeNode<?>> treeNodeElement) {
                //delegate.onNodeExpanded(treeNodeElement.getData());
            }

            /** {@inheritDoc} */
            @Override
            public void onNodeSelected(TreeNodeElement<TreeNode<?>> treeNodeElement, SignalEvent signalEvent) {
               // delegate.onNodeSelected(treeNodeElement.getData());
            }

            /** {@inheritDoc} */
            @Override
            public void onRootContextMenu(int i, int i1) {
            }

            /** {@inheritDoc} */
            @Override
            public void onRootDragDrop(MouseEvent mouseEvent) {
            }

            /** {@inheritDoc} */
            @Override
            public void onKeyboard(KeyboardEvent keyboardEvent) {
            }
        });

        treeContainer.add(tree.asWidget());
    }

