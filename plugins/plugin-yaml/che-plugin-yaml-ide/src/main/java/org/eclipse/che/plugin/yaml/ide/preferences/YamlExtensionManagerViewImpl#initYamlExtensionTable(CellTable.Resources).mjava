  /**
   * Creates table which contains list of available preferences
   *
   * @param res Celltable resources
   */
  private void initYamlExtensionTable(final CellTable.Resources res) {

    YamlPreferenceCellTable = new CellTable<YamlPreference>(20, res);
    Column<YamlPreference, String> urlColumn =
        new Column<YamlPreference, String>(new EditTextCell()) {
          @Override
          public String getValue(YamlPreference object) {
            return object.getUrl();
          }

          @Override
          public void render(Context context, YamlPreference object, SafeHtmlBuilder sb) {
            sb.appendHtmlConstant(
                "<div id=\""
                    + UIObject.DEBUG_ID_PREFIX
                    + "-preferences-cellTable-url-"
                    + context.getIndex()
                    + "\">");
            super.render(context, object, sb);
          }
        };

    urlColumn.setFieldUpdater(
        new FieldUpdater<YamlPreference, String>() {
          @Override
          public void update(int index, YamlPreference object, String value) {
            object.setUrl(value);
            delegate.nowDirty();
          }
        });

    Column<YamlPreference, String> globColumn =
        new Column<YamlPreference, String>(new EditTextCell()) {
          @Override
          public String getValue(YamlPreference object) {
            return object.getGlob();
          }

          @Override
          public void render(Context context, YamlPreference object, SafeHtmlBuilder sb) {
            sb.appendHtmlConstant(
                "<div id=\""
                    + UIObject.DEBUG_ID_PREFIX
                    + "-preferences-cellTable-glob-"
                    + context.getIndex()
                    + "\">");
            if (object != null) {
              super.render(context, object, sb);
            }
          }
        };

    globColumn.setFieldUpdater(
        new FieldUpdater<YamlPreference, String>() {
          @Override
          public void update(int index, YamlPreference object, String value) {
            object.setGlob(value);
            delegate.nowDirty();
          }
        });

    Column<YamlPreference, String> deletePreferenceColumn =
        new Column<YamlPreference, String>(new ButtonCell()) {
          @Override
          public String getValue(YamlPreference object) {
            return "Delete";
          }

          @Override
          public void render(Context context, YamlPreference object, SafeHtmlBuilder sb) {
            sb.appendHtmlConstant(
                "<div id=\""
                    + UIObject.DEBUG_ID_PREFIX
                    + "-preferences-cellTable-delete-"
                    + context.getIndex()
                    + "\">");
            super.render(context, object, sb);
          }
        };

    // Creates handler on button clicked
    deletePreferenceColumn.setFieldUpdater(
        new FieldUpdater<YamlPreference, String>() {
          @Override
          public void update(int index, YamlPreference object, String value) {
            delegate.onDeleteClicked(object);
          }
        });

    YamlPreferenceCellTable.addColumn(urlColumn, local.urlColumnHeader());
    YamlPreferenceCellTable.addColumn(globColumn, local.globColumnHeader());
    YamlPreferenceCellTable.addColumn(deletePreferenceColumn, local.deleteColumnHeader());
    YamlPreferenceCellTable.setWidth("100%", true);
    YamlPreferenceCellTable.setColumnWidth(urlColumn, 45, Style.Unit.PCT);
    YamlPreferenceCellTable.setColumnWidth(globColumn, 30, Style.Unit.PCT);
    YamlPreferenceCellTable.setColumnWidth(deletePreferenceColumn, 25, Style.Unit.PCT);

    // don't show loading indicator
    YamlPreferenceCellTable.setLoadingIndicator(null);
  }

