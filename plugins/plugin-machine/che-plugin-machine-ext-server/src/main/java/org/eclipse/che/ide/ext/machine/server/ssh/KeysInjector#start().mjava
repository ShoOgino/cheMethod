    @PostConstruct
    public void start() {
        eventService.subscribe(new EventSubscriber<MachineStatusEvent>() {
            @Override
            public void onEvent(MachineStatusEvent event) {
                if (event.getEventType() == MachineStatusEvent.EventType.RUNNING) {
                    try {
                        final Instance machine = machineManager.getMachine(event.getMachineId());
                        List<SshPairImpl> sshPairs = sshManager.getPairs(machine.getOwner(), "machine");
                        final List<String> publicKeys = sshPairs.stream()
                                                             .filter(sshPair -> sshPair.getPublicKey() != null)
                                                             .map(SshPairImpl::getPublicKey)
                                                             .collect(Collectors.toList());

                        if (publicKeys.isEmpty()) {
                            return;
                        }

                        final String containerId = machine.getMetadata().getProperties().get("id");
                        StringBuilder command = new StringBuilder("mkdir ~/.ssh/ -p");
                        for (String publicKey : publicKeys) {
                            command.append("&& echo '")
                                   .append(publicKey)
                                   .append("' >> ~/.ssh/authorized_keys");
                        }

                        final Exec exec = docker.createExec(containerId, true, "/bin/bash", "-c", command.toString());
                        docker.startExec(exec.getId(), logMessage -> {
                            if (logMessage.getType() == LogMessage.Type.STDERR) {
                                try {
                                    machine.getLogger().writeLine("Error of injection public ssh keys. " + logMessage.getContent());
                                } catch (IOException ignore) {
                                }
                            }
                        });
                    } catch (IOException | ServerException | NotFoundException e) {
                        LOG.error(e.getLocalizedMessage(), e);
                    }
                }
            }
        });
    }

