  /**
   * When component is initialized, subscribe to workspace events in order to generate/delete ssh
   * keys.
   */
  @PostConstruct
  public void start() {
    eventService.subscribe(
        new EventSubscriber<WorkspaceCreatedEvent>() {
          @Override
          public void onEvent(WorkspaceCreatedEvent workspaceCreatedEvent) {
            final String userId;
            try {
              final User user =
                  userManager.getByName(workspaceCreatedEvent.getWorkspace().getNamespace());
              userId = user.getId();
            } catch (NotFoundException ignored) {
              // namespace can be different from username
              return;
            } catch (ServerException e) {
              LOG.warn(
                  "Unable to get owner of the workspace {} with namespace {}",
                  workspaceCreatedEvent.getWorkspace().getId(),
                  workspaceCreatedEvent.getWorkspace().getNamespace());
              return;
            }

            // Register default SSH keypair for this workspace.
            try {
              sshManager.generatePair(
                  userId, "workspace", workspaceCreatedEvent.getWorkspace().getId());
            } catch (ServerException | ConflictException e) {
              // Conflict shouldn't happen as workspace id is new each time.
              LOG.warn(
                  "Unable to generate a default ssh pair for the workspace with ID {}",
                  workspaceCreatedEvent.getWorkspace().getId(),
                  e);
            }
          }
        });

    eventService.subscribe(
        new EventSubscriber<WorkspaceRemovedEvent>() {
          @Override
          public void onEvent(WorkspaceRemovedEvent workspaceRemovedEvent) {

            final String userId;
            try {
              final User user =
                  userManager.getByName(workspaceRemovedEvent.getWorkspace().getNamespace());
              userId = user.getId();
            } catch (NotFoundException | ServerException e) {
              LOG.error(
                  "Unable to get owner of the workspace {} with namespace {}",
                  workspaceRemovedEvent.getWorkspace().getId(),
                  workspaceRemovedEvent.getWorkspace().getNamespace());
              return;
            }

            // Unregister default SSH keypair for this workspace (if any)
            try {
              sshManager.removePair(
                  userId, "workspace", workspaceRemovedEvent.getWorkspace().getId());
            } catch (NotFoundException e) {
              LOG.debug(
                  "Do not remove default keypair from workspace {} as it is not existing (workspace ID {})",
                  workspaceRemovedEvent.getWorkspace().getConfig().getName(),
                  workspaceRemovedEvent.getWorkspace().getId());
            } catch (ServerException e) {
              LOG.error(
                  "Error when trying to remove default ssh pair for the workspace {} (workspace ID {})",
                  workspaceRemovedEvent.getWorkspace().getConfig().getName(),
                  workspaceRemovedEvent.getWorkspace().getId());
            }
          }
        });
  }

