    /**
     * When component is initialized, subscribe to workspace events in order to generate/delete ssh keys.
     */
    @PostConstruct
    public void start() {
        eventService.subscribe(new EventSubscriber<WorkspaceCreatedEvent>() {
            @Override
            public void onEvent(WorkspaceCreatedEvent workspaceCreatedEvent) {
                // Register default SSH keypair for this workspace.
                try {
                    sshManager.generatePair(EnvironmentContext.getCurrent().getSubject().getUserId(), "workspace",
                                            workspaceCreatedEvent.getWorkspace().getId());
                } catch (ServerException | ConflictException e) {
                    // Conflict shouldn't happen as workspace id is new each time.
                    LOG.error("Unable to generate a default ssh pair for the workspace with ID {}",
                                            workspaceCreatedEvent.getWorkspace().getId(), e);
                }
            }
        });

        eventService.subscribe(new EventSubscriber<WorkspaceRemovedEvent>() {
            @Override
            public void onEvent(WorkspaceRemovedEvent workspaceRemovedEvent) {
                // Unregister default SSH keypair for this workspace (if any)
                try {
                    sshManager.removePair(EnvironmentContext.getCurrent().getSubject().getUserId(), "workspace",
                                          workspaceRemovedEvent.getWorkspace().getId());
                } catch (NotFoundException e) {
                    LOG.debug("Do not remove default keypair from workspace {} as it is not existing (workspace ID {})",
                                            workspaceRemovedEvent.getWorkspace().getConfig().getName(),
                                            workspaceRemovedEvent.getWorkspace().getId());
                } catch (ServerException e) {
                    LOG.error("Error when trying to remove default ssh pair for the workspace {} (workspace ID {})",
                            workspaceRemovedEvent.getWorkspace().getConfig().getName(), workspaceRemovedEvent.getWorkspace().getId());
                }
            }
        });

    }

