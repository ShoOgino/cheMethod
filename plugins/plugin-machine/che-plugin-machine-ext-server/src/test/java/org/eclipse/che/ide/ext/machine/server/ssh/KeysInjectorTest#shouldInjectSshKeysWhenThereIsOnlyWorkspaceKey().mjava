  /**
   * Validate the usecase: There is a workspace sshkeypair but no machine keypair (empty list)
   * Expect that the workspace public key is injected.
   */
  @Test
  public void shouldInjectSshKeysWhenThereIsOnlyWorkspaceKey() throws Exception {
    // no machine key pairs
    when(sshManager.getPairs(anyString(), eq("machine"))).thenReturn(Collections.emptyList());

    // workspace keypair
    when(sshManager.getPair(anyString(), eq("workspace"), anyString()))
        .thenReturn(new SshPairImpl(OWNER, "workspace", WORKSPACE_ID, "publicKeyWorkspace", null));

    subscriber.onEvent(
        newDto(MachineStatusEvent.class)
            .withEventType(MachineStatusEvent.EventType.RUNNING)
            .withMachineId(MACHINE_ID)
            .withWorkspaceId(WORKSPACE_ID));

    verify(environmentEngine).getMachine(eq(WORKSPACE_ID), eq(MACHINE_ID));
    // check calls for machine and workspace ssh pairs
    verify(sshManager).getPairs(eq(OWNER), eq("machine"));
    verify(sshManager).getPair(eq(OWNER), eq("workspace"), eq(WORKSPACE_ID));

    ArgumentCaptor<CreateExecParams> argumentCaptor =
        ArgumentCaptor.forClass(CreateExecParams.class);
    verify(docker).createExec(argumentCaptor.capture());
    assertEquals(
        argumentCaptor.getValue().getCmd(),
        new String[] {
          "/bin/bash",
          "-c",
          "mkdir ~/.ssh/ -p" + "&& echo 'publicKeyWorkspace' >> ~/.ssh/authorized_keys"
        });
    verify(docker).startExec(eq(StartExecParams.create(EXEC_ID)), anyObject());
    verifyZeroInteractions(docker, environmentEngine, sshManager);
  }

