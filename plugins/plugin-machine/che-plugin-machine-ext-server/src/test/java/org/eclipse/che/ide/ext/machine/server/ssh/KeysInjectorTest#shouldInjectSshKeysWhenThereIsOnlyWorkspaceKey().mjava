  /**
   * Validate the usecase: There is a workspace sshkeypair but no machine keypair (empty list)
   * Expect that the workspace public key is injected.
   */
  @Test
  public void shouldInjectSshKeysWhenThereIsOnlyWorkspaceKey() throws Exception {
    // no machine key pairs
    when(sshManager.getPairs(anyString(), eq("machine"))).thenReturn(Collections.emptyList());

    // workspace keypair
    when(sshManager.getPair(anyString(), eq("workspace"), anyString()))
        .thenReturn(new SshPairImpl(OWNER, "workspace", WORKSPACE_ID, "publicKeyWorkspace", null));

    keysInjector.injectPublicKeys(WORKSPACE_ID);
    // check calls for machine and workspace ssh pairs
    verify(sshManager).getPairs(eq(OWNER), eq("machine"));
    verify(sshManager).getPair(eq(OWNER), eq("workspace"), eq(WORKSPACE_ID));

    ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);
    verify(client, times(2))
        .startProcess(eq(WORKSPACE_ID), argumentCaptor.capture(), anyString(), anyString());
    assertEquals(
        "mkdir ~/.ssh/ -p" + " && echo 'publicKeyWorkspace' >> ~/.ssh/authorized_keys",
        argumentCaptor.getValue());
  }

