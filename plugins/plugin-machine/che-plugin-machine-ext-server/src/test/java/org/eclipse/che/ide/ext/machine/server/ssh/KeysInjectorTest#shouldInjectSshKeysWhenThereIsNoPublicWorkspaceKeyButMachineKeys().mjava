    /**
     * Validate the usecase: There is a workspace sshkeypair (without public key) but there is a machine keypair
     * Expect that only the machine keypair is injected (as workspace keypair has no public key).
     */
    @Test
    public void shouldInjectSshKeysWhenThereIsNoPublicWorkspaceKeyButMachineKeys() throws Exception {
        // no machine key pairs
        when(sshManager.getPairs(anyString(), eq("machine")))
                .thenReturn(Arrays.asList(new SshPairImpl(USER_ID, "machine", "myPair", "publicKey1", null)));

        // workspace keypair without public key
        when(sshManager.getPair(anyString(), eq("workspace"), anyString()))
                .thenReturn(new SshPairImpl(USER_ID, "workspace", WORKSPACE_ID, null, null));


        subscriber.onEvent(newDto(MachineStatusEvent.class).withEventType(MachineStatusEvent.EventType.RUNNING)
                                                           .withMachineId(MACHINE_ID)
                                                           .withWorkspaceId(WORKSPACE_ID));

        verify(environmentEngine).getMachine(eq(WORKSPACE_ID), eq(MACHINE_ID));
        // check calls for machine and workspace ssh pairs
        verify(sshManager).getPairs(eq(USER_ID), eq("machine"));
        verify(sshManager).getPair(eq(USER_ID), eq("workspace"), eq(WORKSPACE_ID));

        ArgumentCaptor<CreateExecParams> argumentCaptor = ArgumentCaptor.forClass(CreateExecParams.class);
        verify(docker).createExec(argumentCaptor.capture());
        assertEquals(argumentCaptor.getValue().getCmd(), new String[] {"/bin/bash", "-c", "mkdir ~/.ssh/ -p" +
                                                                                          "&& echo 'publicKey1' >> ~/.ssh/authorized_keys"});
        verify(docker).startExec(eq(StartExecParams.create(EXEC_ID)), anyObject());
        verifyZeroInteractions(docker, environmentEngine, sshManager);
    }

