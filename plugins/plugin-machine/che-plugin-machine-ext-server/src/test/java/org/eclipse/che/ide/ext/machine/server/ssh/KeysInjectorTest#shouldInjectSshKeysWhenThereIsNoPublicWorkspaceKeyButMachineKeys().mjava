  /**
   * Validate the usecase: There is a workspace sshkeypair (without public key) but there is a
   * machine keypair Expect that only the machine keypair is injected (as workspace keypair has no
   * public key).
   */
  @Test
  public void shouldInjectSshKeysWhenThereIsNoPublicWorkspaceKeyButMachineKeys() throws Exception {
    // no machine key pairs
    when(sshManager.getPairs(anyString(), eq("machine")))
        .thenReturn(
            Collections.singletonList(
                new SshPairImpl(OWNER, "machine", "myPair", "publicKey1", null)));

    // workspace keypair without public key
    when(sshManager.getPair(anyString(), eq("workspace"), anyString()))
        .thenReturn(new SshPairImpl(OWNER, "workspace", WORKSPACE_ID, null, null));

    keysInjector.injectPublicKeys(WORKSPACE_ID);
    // check calls for machine and workspace ssh pairs
    verify(sshManager).getPairs(eq(OWNER), eq("machine"));
    verify(sshManager).getPair(eq(OWNER), eq("workspace"), eq(WORKSPACE_ID));

    ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);
    verify(client, times(2))
        .startProcess(eq(WORKSPACE_ID), argumentCaptor.capture(), anyString(), anyString());
    assertEquals(
        "mkdir ~/.ssh/ -p" + " && echo 'publicKey1' >> ~/.ssh/authorized_keys",
        argumentCaptor.getValue());
  }

