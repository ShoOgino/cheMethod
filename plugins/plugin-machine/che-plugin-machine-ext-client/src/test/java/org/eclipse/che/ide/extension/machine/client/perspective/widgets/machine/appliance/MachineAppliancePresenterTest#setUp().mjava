    @Before
    public void setUp() {
        when(machine.getId()).thenReturn(SOME_TEXT);
        when(tabContainer.getView()).thenReturn(tabContainerView);
        when(tabContainerView.asWidget()).thenReturn(widget);
        when(recipesContainerPresenter.getView()).thenReturn(recipePartView);

        when(locale.tabTerminal()).thenReturn(SOME_TEXT);
        when(locale.tabInfo()).thenReturn(SOME_TEXT);
        when(locale.tabServer()).thenReturn(SOME_TEXT);
        when(locale.tabRecipe()).thenReturn(SOME_TEXT);

        when(widgetsFactory.createTabHeader(SOME_TEXT)).thenReturn(tabHeader);

        when(entityFactory.createTab(Matchers.<TabHeader>anyObject(),
                                     eq(terminalContainer),
                                     Matchers.<TabSelectHandler>anyObject())).thenReturn(terminalTab);

        when(entityFactory.createTab(Matchers.<TabHeader>anyObject(),
                                     eq(infoPresenter),
                                     Matchers.<TabSelectHandler>anyObject())).thenReturn(infoTab);

        when(entityFactory.createTab(Matchers.<TabHeader>anyObject(),
                                     eq(serverPresenter),
                                     Matchers.<TabSelectHandler>anyObject())).thenReturn(serverTab);

        when(entityFactory.createTab(Matchers.<TabHeader>anyObject(),
                                     eq(recipeTabPresenter),
                                     Matchers.<TabSelectHandler>anyObject())).thenReturn(recipeTab);

        presenter = new MachineAppliancePresenter(eventBus,
                                                  partMenu,
                                                  comparator,
                                                  partStackEventHandler,
                                                  view,
                                                  locale,
                                                  widgetsFactory,
                                                  entityFactory,
                                                  tabItemFactory,
                                                  infoPresenter,
                                                  recipesContainerPresenter,
                                                  serverPresenter,
                                                  recipeTabPresenter,
                                                  tabContainer);
    }

