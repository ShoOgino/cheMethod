    @Test
    public void shouldExecuteCommand() throws Exception {
        String devMachineId = "devMachineId";
        when(appContext.getDevMachine()).thenReturn(devMachine);
        when(devMachine.getId()).thenReturn(devMachineId);
        CommandOutputConsole outputConsole = mock(CommandOutputConsole.class);
        when(commandConsoleFactory.create(any(CommandConfiguration.class), anyString())).thenReturn(outputConsole);
        when(machineServiceClient.executeCommand(anyString(), anyObject(), anyString())).thenReturn(processPromise);

        String commandLine = "devMachineId";
        String commandName = "commandName";
        CommandConfiguration command = mock(CommandConfiguration.class);
        when(command.toCommandLine()).thenReturn(commandLine);
        when(command.getName()).thenReturn(commandName);
        CommandType commandType = mock(CommandType.class);
        when(command.getType()).thenReturn(commandType);

        MachineProcessDto process = mock(MachineProcessDto.class);
        int pid = 123;
        when(process.getPid()).thenReturn(pid);

        CommandDto commandDto = mock(CommandDto.class);
        when(dtoFactory.createDto(CommandDto.class)).thenReturn(commandDto);
        when(commandDto.withName(anyString())).thenReturn(commandDto);
        when(commandDto.withCommandLine(anyString())).thenReturn(commandDto);
        when(commandDto.withType(anyString())).thenReturn(commandDto);

        commandManager.execute(command);

        verify(appContext).getDevMachine();
        verify(commandConsoleFactory).create(eq(command), eq(devMachineId));
        verify(outputConsole).listenToOutput(anyString());
        verify(consolesPanelPresenter).addCommandOutput(eq(devMachineId), eq(outputConsole));
        verify(workspaceAgent).setActivePart(eq(consolesPanelPresenter));
        verify(command).toCommandLine();
        verify(machineServiceClient).executeCommand(eq(devMachineId), anyObject(), anyString());
        verify(processPromise).then(processCaptor.capture());
        processCaptor.getValue().apply(process);
        verify(outputConsole).attachToProcess(process);
    }

