    @Before
    public void setUp() {
        DevMachine devMachine = mock(DevMachine.class);
        when(devMachine.getId()).thenReturn(WORKSPACE_ID);
        when(appContext.getDevMachine()).thenReturn(devMachine);

        when(machineService.getMachines(anyString())).thenReturn(machinesPromise);
        when(machineService.getMachine(anyString(), anyString())).thenReturn(machinePromise);
        when(machinePromise.then(Matchers.<Operation<MachineDto>>anyObject())).thenReturn(machinePromise);

        when(machineService.getProcesses(anyString(), anyString())).thenReturn(processesPromise);
        when(processesPromise.then(Matchers.<Operation<List<MachineProcessDto>>>anyObject())).thenReturn(processesPromise);
        when(commandConsoleFactory.create(anyString())).thenReturn(mock(OutputConsole.class));

        when(appContext.getWorkspaceId()).thenReturn(WORKSPACE_ID);

        presenter =
                new ConsolesPanelPresenter(view, eventBus, dtoFactory, dialogFactory, entityFactory, terminalFactory, commandConsoleFactory,
                                           commandTypeRegistry, workspaceAgent, notificationManager, localizationConstant,
                                           machineService, resources, appContext, consoleTreeContextMenuFactory);
        PartPresenter parent = mock(PartPresenter.class);
        presenter.setParent(parent);
    }

