    @Test
    public void shouldReplaceCommandOutput() throws Exception {
        MachineEntity machine = mock(MachineEntity.class);
        when(machine.getId()).thenReturn(MACHINE_ID);
        MachineConfigDto machineConfigDto = mock(MachineConfigDto.class);
        when(machine.getConfig()).thenReturn(machineConfigDto);

        List<ProcessTreeNode> children = new ArrayList<>();
        ProcessTreeNode commandNode = new ProcessTreeNode(COMMAND_NODE, null, PROCESS_NAME, null, children);
        children.add(commandNode);
        ProcessTreeNode machineNode = new ProcessTreeNode(MACHINE_NODE, null, machine, null, children);
        children.add(machineNode);
        when(machineNode.getId()).thenReturn(MACHINE_ID);

        String commandId = commandNode.getId();
        presenter.rootNode = new ProcessTreeNode(ROOT_NODE, null, null, null, children);
        presenter.consoles.put(commandId, outputConsole);

        when(outputConsole.isFinished()).thenReturn(true);
        when(outputConsole.getTitle()).thenReturn(PROCESS_NAME);

        presenter.addCommandOutput(MACHINE_ID, outputConsole);

        verify(outputConsole).go(acceptsOneWidgetCaptor.capture());
        IsWidget widget = mock(IsWidget.class);
        acceptsOneWidgetCaptor.getValue().setWidget(widget);

        verify(view).hideProcessOutput(eq(commandId));
        verify(view).addWidget(anyString(), anyString(), anyObject(), eq(widget), anyBoolean());
        verify(view, times(2)).selectNode(anyObject());
        verify(view).getNodeById(anyString());
    }

