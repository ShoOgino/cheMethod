    @Test
    public void shouldAddTerminal() throws Exception {
        MachineDto machineDto = mock(MachineDto.class);
        MachineEntity machine = mock(MachineEntity.class);
        when(machine.getId()).thenReturn(MACHINE_ID);
        MachineConfigDto machineConfigDto = mock(MachineConfigDto.class);
        when(machine.getConfig()).thenReturn(machineConfigDto);
        when(machineConfigDto.isDev()).thenReturn(true);
        when(machine.getStatus()).thenReturn(MachineStatus.RUNNING);
        List<MachineDto> machines = new ArrayList<>(1);
        machines.add(machineDto);
        when(workspaceRuntime.getMachines()).thenReturn(machines);
        when(entityFactory.createMachine(machineDto)).thenReturn(machine);

        ProcessTreeNode machineNode = mock(ProcessTreeNode.class);
        when(machineNode.getId()).thenReturn(MACHINE_ID);
        List<ProcessTreeNode> children = new ArrayList<>();
        children.add(machineNode);
        presenter.rootNode = new ProcessTreeNode(ROOT_NODE, null, null, null, children);

        TerminalPresenter terminal = mock(TerminalPresenter.class);
        when(terminalFactory.create(machine)).thenReturn(terminal);
        IsWidget terminalWidget = mock(IsWidget.class);
        when(terminal.getView()).thenReturn(terminalWidget);

        presenter.onAddTerminal(MACHINE_ID);

        verify(terminalFactory).create(eq(machine));
        verify(terminal).getView();
        verify(view).setProcessesData(anyObject());
        verify(view).selectNode(anyObject());
        verify(view).addWidget(anyString(), anyString(), anyObject(), eq(terminalWidget), anyBoolean());
        verify(view).addProcessNode(anyObject());
        verify(terminal).setVisible(eq(true));
        verify(terminal).connect();
        verify(terminal).setListener(anyObject());
    }

