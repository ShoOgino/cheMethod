    /**
     * Check a valid source object is used on machine destroyed with restart flag
     *
     * @throws OperationException
     *         if restart fails
     */
    @Test
    public void checkUseValidSource() throws OperationException {
        final String ID = "id";
        final String DISPLAY_NAME = "my-display-name";
        final boolean IS_DEV = true;

        final String SOURCE_TYPE = "source-type";
        final String SOURCE_LOCATION = "source-location";
        final String SOURCE_CONTENT = "source-content";

        org.eclipse.che.api.core.model.machine.Machine machineState = mock(org.eclipse.che.api.core.model.machine.Machine.class);
        when(machineState.getId()).thenReturn(ID);
        Promise<Void> promise = mock(Promise.class);
        Promise<Void> promiseThen = mock(Promise.class);
        when(machineServiceClient.destroyMachine(eq(ID))).thenReturn(promise);
        when(promise.then(Matchers.<Operation<Void>>anyObject())).thenReturn(promiseThen);
        machineManager.restartMachine(machineState);

        verify(promiseThen).then(operationArgumentCaptor.capture());
        operationArgumentCaptor.getValue().apply(null);

        verify(eventBus).addHandler(eq(MachineStateEvent.TYPE), startWorkspaceHandlerCaptor.capture());
        MachineStateEvent.Handler handler = startWorkspaceHandlerCaptor.getValue();

        MachineSource machineSource = mock(MachineSource.class);
        MachineConfig machineConfig = mock(MachineConfig.class);
        when(machineState.getConfig()).thenReturn(machineConfig);
        when(machineConfig.getSource()).thenReturn(machineSource);
        when(machineConfig.getName()).thenReturn(DISPLAY_NAME);
        when(machineConfig.isDev()).thenReturn(IS_DEV);
        when(machineSource.getType()).thenReturn(SOURCE_TYPE);
        when(machineSource.getLocation()).thenReturn(SOURCE_LOCATION);
        when(machineSource.getContent()).thenReturn(SOURCE_CONTENT);


        MachineSourceDto machineSourceDto = mock(MachineSourceDto.class);
        when(machineSourceDto.withType(eq(SOURCE_TYPE))).thenReturn(machineSourceDto);
        when(machineSourceDto.withLocation(eq(SOURCE_LOCATION))).thenReturn(machineSourceDto);
        when(machineSourceDto.withContent(eq(SOURCE_CONTENT))).thenReturn(machineSourceDto);

        when(dtoFactory.createDto(MachineSourceDto.class)).thenReturn(machineSourceDto);


        LimitsDto limitsDto = mock(LimitsDto.class);
        when(dtoFactory.createDto(LimitsDto.class)).thenReturn(limitsDto);
        when(limitsDto.withRam(anyInt())).thenReturn(limitsDto);

        MachineConfigDto machineConfigDto = mock(MachineConfigDto.class);
        when(dtoFactory.createDto(MachineConfigDto.class)).thenReturn(machineConfigDto);
        when(machineConfigDto.withDev(anyBoolean())).thenReturn(machineConfigDto);
        when(machineConfigDto.withName(anyString())).thenReturn(machineConfigDto);
        when(machineConfigDto.withSource(machineSourceDto)).thenReturn(machineConfigDto);
        when(machineConfigDto.withLimits(limitsDto)).thenReturn(machineConfigDto);
        when(machineConfigDto.withType(anyString())).thenReturn(machineConfigDto);

        WorkspaceDto workspaceDto = mock(WorkspaceDto.class);
        when(appContext.getWorkspace()).thenReturn(workspaceDto);
        when(workspaceDto.getId()).thenReturn(ID);
        DevMachine devMachine = mock(DevMachine.class);
        when(appContext.getDevMachine()).thenReturn(devMachine);
        when(devMachine.getId()).thenReturn(ID);

        Promise<MachineDto> promiseEmpty = mock(Promise.class);
        when(workspaceServiceClient.createMachine(anyString(), any(MachineConfigDto.class))).thenReturn(promiseEmpty);

        handler.onMachineDestroyed(null);
        verify(workspaceServiceClient).createMachine(eq(ID), machineConfigDtoArgumentCaptor.capture());
        verify(machineSourceDto).withType(eq(SOURCE_TYPE));
        verify(machineSourceDto).withLocation(eq(SOURCE_LOCATION));
        verify(machineSourceDto).withContent(eq(SOURCE_CONTENT));
    }

