    @Test
    public void testOnDeleteTarget() throws Exception {
        final String deletingTargetName = "deletingTargetName";
        final String deleteProposal = "Are you sure you want to delete target " + deletingTargetName + " ?";
        final String deletingMachineId = "deletingMachineId";
        final String deleteSuccessMessage = "Successfully disconnected from machine " + deletingTargetName;
        final DockerMachineTarget target = Mockito.mock(DockerMachineTarget.class);
        final MachineDto machine = Mockito.mock(MachineDto.class);
        when(machineLocale.targetsViewDisconnectSuccess(deletingTargetName)).thenReturn(deleteSuccessMessage);
        when(target.getName()).thenReturn(deletingTargetName);
        when(targetsTreeManager.getMachineByName(deletingTargetName)).thenReturn(machine);
        when(machine.getId()).thenReturn(deletingMachineId);
        when(machine.getWorkspaceId()).thenReturn("WS_ID");
        when(machine.getStatus()).thenReturn(RUNNING);
        when(machineLocale.targetsViewDeleteConfirm(deletingTargetName)).thenReturn(deleteProposal);
        when(machineService.destroyMachine("WS_ID", deletingMachineId)).thenReturn(promise);


        arbitraryCategoryPresenter.onDeleteClicked(target);

        verify(dialogFactory).createConfirmDialog(anyString(), eq(deleteProposal), confirmCaptor.capture(),
                                                  Matchers.<CancelCallback>anyObject());

        confirmCaptor.getValue().accepted();

        verify(targetsTreeManager).getMachineByName(deletingTargetName);
        verify(machineService).destroyMachine("WS_ID", deletingMachineId);

        operationSuccessCapture.getValue().apply(null);

        verify(eventBus).fireEvent(Matchers.<MachineStateEvent>anyObject());
        verify(notificationManager).notify(eq(deleteSuccessMessage), eq(SUCCESS), eq(FLOAT_MODE));
        verify(targetsTreeManager).updateTargets(null);
    }

