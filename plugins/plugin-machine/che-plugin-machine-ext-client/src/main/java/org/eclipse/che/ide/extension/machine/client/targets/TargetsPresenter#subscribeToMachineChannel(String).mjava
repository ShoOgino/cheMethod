    /**
     * Subscribes to the websocket channel and starts listening machine status events.
     *
     * @param machineName
     *          mane of the machine to subscribe
     */
    private void subscribeToMachineChannel(final String machineName) {
        String channel = "machine:status:" + appContext.getWorkspace().getId() + ':' + machineName;

        if (subscriptions.containsKey(channel)) {
            return;
        }

        SubscriptionHandler<MachineStatusEvent> statusHandler = new SubscriptionHandler<MachineStatusEvent>(
                dtoUnmarshallerFactory.newWSUnmarshaller(MachineStatusEvent.class)) {
            @Override
            protected void onMessageReceived(MachineStatusEvent event) {
                if (MachineStatusEvent.EventType.RUNNING == event.getEventType()) {
                    onConnected(event.getMachineId());
                } else if (MachineStatusEvent.EventType.ERROR == event.getEventType()) {
                    unsubscribeFromMachineChannel(event.getMachineName());
                    onConnectingFailed(event.getError());
                }
            }

            @Override
            protected void onErrorReceived(Throwable exception) {
                Log.error(TargetsPresenter.class, exception.getMessage());
            }
        };

        try {
            messageBusProvider.getMessageBus().subscribe(channel, statusHandler);
            subscriptions.put(channel, statusHandler);
        } catch (Exception e) {
            Log.error(TargetsPresenter.class, e.getMessage());
        }
    }

