    /**
     * Adds new terminal to the processes panel
     *
     * @param machineId
     *         id of machine in which the terminal will be added
     */
    @Override
    public void onAddTerminal(final String machineId) {
        final MachineEntity machine = getMachine(machineId);
        final ProcessTreeNode machineTreeNode = findProcessTreeNodeById(machineId);
        if (machineTreeNode == null || machine == null) {
            notificationManager.notify(localizationConstant.failedToConnectTheTerminal(),
                                       localizationConstant.machineNotFound(machineId), FAIL, FLOAT_MODE);
            Log.error(getClass(), localizationConstant.machineNotFound(machineId));
            return;
        }

        final TerminalPresenter newTerminal = terminalFactory.create(machine);
        final IsWidget terminalWidget = newTerminal.getView();
        final String terminalName = getUniqueTerminalName(machineTreeNode);
        final ProcessTreeNode terminalNode = new ProcessTreeNode(TERMINAL_NODE,
                                                                 machineTreeNode,
                                                                 terminalName,
                                                                 resources.terminalTreeIcon(),
                                                                 null);
        addChildToMachineNode(terminalNode, machineTreeNode);

        final String terminalId = terminalNode.getId();
        terminals.put(terminalId, newTerminal);
        view.addProcessNode(terminalNode);
        view.addWidget(terminalId, terminalName, terminalNode.getTitleIcon(), terminalWidget, false);
        refreshStopButtonState(terminalId);

        newTerminal.setVisible(true);
        newTerminal.connect();
        newTerminal.setListener(new TerminalPresenter.TerminalStateListener() {
            @Override
            public void onExit() {
                onStopProcess(terminalNode);
                terminals.remove(terminalId);
            }
        });
    }

