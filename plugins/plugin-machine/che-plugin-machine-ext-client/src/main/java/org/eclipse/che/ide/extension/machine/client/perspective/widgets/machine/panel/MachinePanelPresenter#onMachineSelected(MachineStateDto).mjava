    /** {@inheritDoc} */
    @Override
    public void onMachineSelected(final MachineStateDto selectedMachineState) {
        this.selectedMachineState = selectedMachineState;

        isMachineRunning = true;

        if (cachedMachines.containsKey(selectedMachineState)) {
            appliance.showAppliance(cachedMachines.get(selectedMachineState));

            return;
        }

        service.getMachine(selectedMachineState.getId()).then(new Operation<MachineDto>() {
            @Override
            public void apply(MachineDto machineDto) throws OperationException {
                Machine machine = entityFactory.createMachine(machineDto);

                cachedMachines.put(selectedMachineState, machine);

                appliance.showAppliance(machine);
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                isMachineRunning = false;

                // we show the loader for dev machine so this message isn't necessary for dev machine
                if (!selectedMachineState.isDev()) {
                    appliance.showStub(locale.unavailableMachineStarting(selectedMachineState.getName()));
                }
            }
        });
    }

