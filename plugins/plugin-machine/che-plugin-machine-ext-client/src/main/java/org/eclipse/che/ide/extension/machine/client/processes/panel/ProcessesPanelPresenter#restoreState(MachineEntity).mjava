    private void restoreState(final MachineEntity machine) {
        machineServiceClient.getProcesses(machine.getWorkspaceId(), machine.getId()).then(new Operation<List<MachineProcessDto>>() {
            @Override
            public void apply(List<MachineProcessDto> arg) throws OperationException {
                for (MachineProcessDto machineProcessDto : arg) {
                    /**
                     * Do not show the process if the command line has prefix #hidden
                     */
                    if (!isNullOrEmpty(machineProcessDto.getCommandLine()) &&
                        machineProcessDto.getCommandLine().startsWith("#hidden")) {
                        continue;
                    }

                    // hide the processes which are launched by command of unknown type
                    if (isProcessLaunchedByCommandOfKnownType(machineProcessDto)) {
                        final CommandOutputConsole console = commandConsoleFactory.create(new CommandImpl(machineProcessDto), machine);
                        console.listenToOutput(machineProcessDto.getOutputChannel());
                        console.attachToProcess(machineProcessDto);

                        addCommandOutput(machine.getId(), console);
                    }
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                notificationManager.notify(localizationConstant.failedToGetProcesses(machine.getId()));
            }
        });
    }

