    /**
     * Start tracking machine state and notify about state changing.
     *
     * @param machine
     *         machine to track
     * @param runningListener
     *         listener that will be notified when machine is running
     */
    void trackMachine(final Machine machine, final RunningListener runningListener, final MachineOperationType operationType) {
        final String machineName = machine.getConfig().getName();
        final String workspaceId = appContext.getWorkspace().getId();
        final String wsChannel = MACHINE_STATUS_WS_CHANNEL + workspaceId + ":" + machineName;

        final StatusNotification notification = notificationManager.notify("", PROGRESS, false);

        final Unmarshallable<MachineStatusEvent> unmarshaller = dtoUnmarshallerFactory.newWSUnmarshaller(MachineStatusEvent.class);
        final MessageHandler messageHandler = new SubscriptionHandler<MachineStatusEvent>(unmarshaller) {
            @Override
            protected void onMessageReceived(MachineStatusEvent result) {
                switch (result.getEventType()) {
                    case RUNNING:
                        unsubscribe(wsChannel, this);

                        if (runningListener != null) {
                            runningListener.onRunning();
                        }

                        final String message = RESTART.equals(operationType) ? locale.machineRestarted(machineName)
                                                                             : locale.notificationMachineIsRunning(machineName);
                        notification.setTitle(message);
                        notification.setStatus(SUCCESS);
                        eventBus.fireEvent(new MachineStateEvent(machine, MachineStateEvent.MachineAction.RUNNING));
                        break;
                    case DESTROYED:
                        unsubscribe(wsChannel, this);
                        notification.setStatus(SUCCESS);
                        notification.setTitle(locale.notificationMachineDestroyed(machineName));
                        eventBus.fireEvent(new MachineStateEvent(machine, MachineStateEvent.MachineAction.DESTROYED));
                        break;
                    case ERROR:
                        unsubscribe(wsChannel, this);
                        notification.setStatus(FAIL);
                        notification.setTitle(result.getError());
                        break;
                }
            }

            @Override
            protected void onErrorReceived(Throwable exception) {
                unsubscribe(wsChannel, this);
                notification.setStatus(FAIL);
            }
        };

        switch (operationType) {
            case START:
                notification.setTitle(locale.notificationCreatingMachine(machineName));
                break;
            case RESTART:
                notification.setTitle(locale.notificationMachineRestarting(machineName));
                break;
            case DESTROY:
                notification.setTitle(locale.notificationDestroyingMachine(machineName));
                break;
        }

        notification.setStatus(PROGRESS);

        subscribe(wsChannel, messageHandler);
    }

