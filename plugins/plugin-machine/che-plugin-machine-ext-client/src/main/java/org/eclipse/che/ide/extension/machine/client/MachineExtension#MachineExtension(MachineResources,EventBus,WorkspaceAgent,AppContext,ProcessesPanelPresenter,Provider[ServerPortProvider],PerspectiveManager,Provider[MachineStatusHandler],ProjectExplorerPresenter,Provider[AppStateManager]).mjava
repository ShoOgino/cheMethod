    @Inject
    public MachineExtension(final MachineResources machineResources,
                            final EventBus eventBus,
                            final WorkspaceAgent workspaceAgent,
                            final AppContext appContext,
                            final ProcessesPanelPresenter processesPanelPresenter,
                            final Provider<ServerPortProvider> machinePortProvider,
                            final PerspectiveManager perspectiveManager,
                            final Provider<MachineStatusHandler> machineStatusHandlerProvider,
                            final ProjectExplorerPresenter projectExplorerPresenter,
                            final Provider<AppStateManager> appStateManagerProvider) {
        this.perspectiveManager = perspectiveManager;
        this.appStateManagerProvider = appStateManagerProvider;

        machineResources.getCss().ensureInjected();
        machineStatusHandlerProvider.get();

        eventBus.addHandler(WsAgentStateEvent.TYPE, new WsAgentStateHandler() {
            @Override
            public void onWsAgentStarted(WsAgentStateEvent event) {
                restoreTerminal();

                machinePortProvider.get();
                /* Do not show terminal on factories by default */
                if (appContext.getFactory() == null) {
                    Scheduler.get().scheduleDeferred(new Scheduler.ScheduledCommand() {
                        @Override
                        public void execute() {
                            processesPanelPresenter.selectDevMachine();
                            processesPanelPresenter.newTerminal();
                        }
                    });
                    workspaceAgent.openPart(processesPanelPresenter, PartStackType.INFORMATION);
                }
                if (!appStateManagerProvider.get().hasStateForWorkspace(appContext.getWorkspaceId())) {
                    workspaceAgent.setActivePart(projectExplorerPresenter);
                }
            }

            @Override
            public void onWsAgentStopped(WsAgentStateEvent event) {
            }
        });

        eventBus.addHandler(WorkspaceStartingEvent.TYPE, new WorkspaceStartingEvent.Handler() {
            @Override
            public void onWorkspaceStarting(WorkspaceStartingEvent event) {
                maximizeTerminal();
            }
        });

        Scheduler.get().scheduleDeferred(new Scheduler.ScheduledCommand() {
            @Override
            public void execute() {
                // Add Processes part to Project perspective
                perspectiveManager.setPerspectiveId(PROJECT_PERSPECTIVE_ID);
                workspaceAgent.openPart(processesPanelPresenter, PartStackType.INFORMATION);
                if (appContext.getFactory() == null) {
                    workspaceAgent.setActivePart(processesPanelPresenter);
                }
            }
        });
    }

