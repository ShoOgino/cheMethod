    @Override
    public boolean restoreTargetFields(SshMachineTarget target) {
        if (target == null) {
            return false;
        }

        final RecipeDescriptor targetRecipe = target.getRecipe();
        if (targetRecipe == null) {
            return false;
        }

        try {
            final JSONObject json = JSONParser.parseStrict(targetRecipe.getScript()).isObject();

            String name = targetRecipe.getName();
            target.setName(name);

            if (json.get("host") != null) {
                String host = json.get("host").isString().stringValue();
                target.setHost(host);
            }

            if (json.get("port") != null) {
                String port = json.get("port").isString().stringValue();
                target.setPort(port);
            }

            if (json.get("username") != null) {
                String username = json.get("username").isString().stringValue();
                target.setUserName(username);
            }

            if (json.get("password") != null) {
                String password = json.get("password").isString().stringValue();
                target.setPassword(password);
            }

            target.setDirty(false);
        } catch (Exception e) {
            Log.error(this.getClass(), "Unable to parse recipe JSON. " + e.getMessage());
            return false;
        }

        return true;
    }

