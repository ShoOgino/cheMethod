    @Override
    public void executeCommand(final CommandImpl command, final Machine machine) {
        final String outputChannel = "process:output:" + UUID.uuid();

        final CommandOutputConsole console = commandConsoleFactory.create(command, machine);
        console.listenToOutput(outputChannel);
        processesPanelPresenter.addCommandOutput(machine.getId(), console);

        macroProcessor.expandMacros(command.getCommandLine()).then(new Operation<String>() {
            @Override
            public void apply(String arg) throws OperationException {
                final CommandImpl toExecute = new CommandImpl(command);
                toExecute.setCommandLine(arg);

                // if command line has not specified the shell attribute, use bash to be backward compliant for user commands
                Map<String, String> attributes = toExecute.getAttributes();
                if (attributes == null) {
                    attributes = new HashMap<>(1);
                    attributes.put("shell", "/bin/bash");
                    toExecute.setAttributes(attributes);
                } else if (!attributes.containsKey("shell")){
                    attributes = new HashMap<>(attributes.size() + 1);
                    attributes.put("shell", "/bin/bash");
                    attributes.putAll(toExecute.getAttributes());
                    toExecute.setAttributes(attributes);
                }

                Log.info(CommandManagerImpl.class, "Using shell " + toExecute.getAttributes().get("shell") + " for invoking command '" + command.getName() + "'");

                Promise<MachineProcessDto> processPromise = machineServiceClient.executeCommand(machine.getWorkspaceId(),
                                                                                                machine.getId(),
                                                                                                toExecute,
                                                                                                outputChannel);
                processPromise.then(new Operation<MachineProcessDto>() {
                    @Override
                    public void apply(MachineProcessDto process) throws OperationException {
                        console.attachToProcess(process);
                    }
                });
            }
        });
    }

