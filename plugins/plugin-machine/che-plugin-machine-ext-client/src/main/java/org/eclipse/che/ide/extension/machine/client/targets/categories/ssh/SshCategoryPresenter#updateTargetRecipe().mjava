    /**
     * Updates as existent target recipe and save it.
     */
    private void updateTargetRecipe() {
        RecipeUpdate recipeUpdate = dtoFactory.createDto(RecipeUpdate.class)
                                              .withId(selectedTarget.getRecipe().getId())
                                              .withName(sshView.getTargetName())
                                              .withType(selectedTarget.getRecipe().getType())
                                              .withTags(selectedTarget.getRecipe().getTags())
                                              .withDescription(selectedTarget.getRecipe().getDescription())
                                              .withScript("{" +
                                                          "\"host\": \"" + selectedTarget.getHost() + "\", " +
                                                          "\"port\": \"" + selectedTarget.getPort() + "\", " +
                                                          "\"username\": \"" + selectedTarget.getUserName() + "\", " +
                                                          "\"password\": \"" + selectedTarget.getPassword() + "\"" +
                                                          "}");

        Promise<RecipeDescriptor> updateRecipe = recipeServiceClient.updateRecipe(recipeUpdate);
        updateRecipe.then(new Operation<RecipeDescriptor>() {
            @Override
            public void apply(RecipeDescriptor recipe) throws OperationException {
                onTargetSaved(recipe);
            }
        });

        updateRecipe.catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                dialogFactory.createMessageDialog("Error", machineLocale.targetsViewSaveError(), null).show();
            }
        });
    }

