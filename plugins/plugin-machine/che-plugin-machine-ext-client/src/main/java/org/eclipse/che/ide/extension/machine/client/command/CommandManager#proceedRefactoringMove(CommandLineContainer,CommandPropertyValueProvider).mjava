    private Function<String, Promise<String>> proceedRefactoringMove(final CommandLineContainer commandLineContainer,
                                                                     final CommandPropertyValueProvider provider) {
        return new Function<String, Promise<String>>() {
            @Override
            public Promise<String> apply(String arg) throws FunctionException {
                return provider.getValue().thenPromise(new Function<String, Promise<String>>() {
                    @Override
                    public Promise<String> apply(String arg) throws FunctionException {
                        commandLineContainer.setCommandLine(commandLineContainer.getCommandLine().replace(provider.getKey(), arg));
                        return Promises.resolve(commandLineContainer.getCommandLine());
                    }
                });
            }
        };
    }

