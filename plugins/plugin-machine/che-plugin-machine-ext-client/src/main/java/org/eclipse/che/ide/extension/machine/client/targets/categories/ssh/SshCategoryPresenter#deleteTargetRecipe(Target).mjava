    /**
     * Deletes specified  target.
     *
     * @param target
     *         target to delete
     */
    private void deleteTargetRecipe(final Target target) {
        Promise<Void> voidPromise = recipeServiceClient.removeRecipe(target.getRecipe().getId());
        voidPromise.then(new Operation<Void>() {
            @Override
            public void apply(Void arg) throws OperationException {
                notificationManager.notify(machineLocale.targetsRecipeDeleteSuccess(target.getName()), SUCCESS, FLOAT_MODE);
                if (target.isConnected()) {
                    updateTargets(null);
                    return;
                }
                final MachineDto machine = getMachineByName(target.getName());
                disconnect(machine);
            }
        });

        voidPromise.catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                dialogFactory.createMessageDialog("Error", machineLocale.targetsViewDeleteError(target.getName()), null).show();
            }
        });
    }

