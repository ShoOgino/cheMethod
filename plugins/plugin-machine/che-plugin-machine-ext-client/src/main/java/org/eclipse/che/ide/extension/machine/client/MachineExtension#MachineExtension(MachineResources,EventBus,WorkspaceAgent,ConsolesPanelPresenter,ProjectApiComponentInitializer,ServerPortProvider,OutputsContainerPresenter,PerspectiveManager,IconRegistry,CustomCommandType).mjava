    @Inject
    public MachineExtension(MachineResources machineResources,
                            final EventBus eventBus,
                            final WorkspaceAgent workspaceAgent,
                            final ConsolesPanelPresenter consolesPanelPresenter,
                            //projectApiComponentInitializer has handler which will work at the right time
                            final ProjectApiComponentInitializer projectApiComponentInitializer,
                            final ServerPortProvider machinePortProvider,
                            final OutputsContainerPresenter outputsContainerPresenter,
                            final PerspectiveManager perspectiveManager,
                            IconRegistry iconRegistry,
                            CustomCommandType arbitraryCommandType) {
        machineResources.getCss().ensureInjected();

        eventBus.addHandler(ExtServerStateEvent.TYPE, new ExtServerStateHandler() {
            @Override
            public void onExtServerStarted(ExtServerStateEvent event) {
                perspectiveManager.setPerspectiveId(PROJECT_PERSPECTIVE_ID);
                workspaceAgent.openPart(outputsContainerPresenter, PartStackType.INFORMATION);
                workspaceAgent.openPart(consolesPanelPresenter, PartStackType.INFORMATION);
            }

            @Override
            public void onExtServerStopped(ExtServerStateEvent event) {
            }
        });

        iconRegistry.registerIcon(new Icon(arbitraryCommandType.getId() + ".commands.category.icon", machineResources.customCommandType()));
    }

