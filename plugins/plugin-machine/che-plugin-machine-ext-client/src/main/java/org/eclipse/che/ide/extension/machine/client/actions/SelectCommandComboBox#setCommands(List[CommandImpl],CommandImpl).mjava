    /**
     * Sets commands to the widget.
     *
     * @param commands
     *         commands to set
     * @param commandToSelect
     *         command that should be selected or {@code null} if none
     */
    private void setCommands(List<CommandImpl> commands, @Nullable CommandImpl commandToSelect) {
        this.commands.clear();

        commandActions.removeAll();

        final DefaultActionGroup commandsList = (DefaultActionGroup)actionManager.getAction(GROUP_COMMANDS_LIST);
        if (commandsList != null) {
            commandActions.addAll(commandsList);
        }

        Collections.sort(commands, new Comparator<CommandImpl>() {
            @Override
            public int compare(CommandImpl o1, CommandImpl o2) {
                return o1.getType().compareTo(o2.getType());
            }
        });

        CommandImpl prevCommand = null;
        for (CommandImpl command : commands) {
            if (prevCommand == null || !command.getType().equals(prevCommand.getType())) {
                CommandType commandType = commandTypeRegistry.getCommandTypeById(command.getType());
                commandActions.addSeparator(commandType.getDisplayName());
            }

            commandActions.add(commandsListWidget.createAction(command.getName(), command.getName()));
            prevCommand = command;
        }

        this.commands.addAll(commands);

        if (commandToSelect != null) {
            setSelectedCommand(commandToSelect);
        } else {
            selectLastUsedCommand();
        }
    }

