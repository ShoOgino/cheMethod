    /**
     * Restore target properties from its recipe.
     *
     * @param target
     *          target to restore
     */
    private void restoreTarget(Target target) {
        if (target.getRecipe() == null || !target.getRecipe().getType().equalsIgnoreCase(SSH_CATEGORY)) {
            return;
        }

        try {
            JSONObject json = JSONParser.parseStrict(target.getRecipe().getScript()).isObject();

            if (json.get("architecture") != null) {
                String architecture = json.get("architecture").isString().stringValue();
                target.setArchitecture(architecture);
            }

            if (json.get("host") != null) {
                String host = json.get("host").isString().stringValue();
                target.setHost(host);
            }

            if (json.get("port") != null) {
                String port = json.get("port").isString().stringValue();
                target.setPort(port);
            }

            if (json.get("username") != null) {
                String username = json.get("username").isString().stringValue();
                target.setUserName(username);
            }

            if (json.get("password") != null) {
                String password = json.get("password").isString().stringValue();
                target.setPassword(password);
            }

        } catch (Exception e) {
            Log.error(TargetsPresenter.class, "Unable to parse recipe JSON. " + e.getMessage());
        }
    }

