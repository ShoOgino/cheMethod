    @Inject
    public CommandOutputConsolePresenter(final OutputConsoleView view,
                                         MachineResources resources,
                                         CommandManager commandManager,
                                         MacroProcessor macroProcessor,
                                         EventBus eventBus,
                                         ExecAgentCommandManager execAgentCommandManager,
                                         @Assisted CommandImpl command,
                                         @Assisted Machine machine) {
        this.view = view;
        this.resources = resources;
        this.execAgentCommandManager = execAgentCommandManager;
        this.command = command;
        this.machine = machine;
        this.eventBus = eventBus;
        this.commandManager = commandManager;

        view.setDelegate(this);

        final String previewUrl = command.getAttributes().get(PREVIEW_URL_ATTR);
        if (!isNullOrEmpty(previewUrl)) {
            macroProcessor.expandMacros(previewUrl).then(new Operation<String>() {
                @Override
                public void apply(String arg) throws OperationException {
                    view.showPreviewUrl(arg);
                }
            });
        } else {
            view.hidePreview();
        }

        view.showCommandLine(command.getCommandLine());
    }

