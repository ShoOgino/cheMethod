    private void restoreState(final org.eclipse.che.api.core.model.machine.Machine machine) {
        machineService.getProcesses(machine.getWorkspaceId(),
                                    machine.getId()).then(new Operation<List<MachineProcessDto>>() {
            @Override
            public void apply(List<MachineProcessDto> arg) throws OperationException {
                for (MachineProcessDto machineProcessDto : arg) {
                    /**
                     * Do not show the process if the command line has prefix #hidden
                     */
                    if (machineProcessDto.getCommandLine() != null && !machineProcessDto.getCommandLine().isEmpty()
                            && machineProcessDto.getCommandLine().startsWith("#hidden")) {
                        continue;
                    }

                    final CommandDto commandDto = dtoFactory.createDto(CommandDto.class)
                            .withName(machineProcessDto.getName())
                            .withAttributes(machineProcessDto.getAttributes())
                            .withCommandLine(machineProcessDto.getCommandLine())
                            .withType(machineProcessDto.getType());

                    final CommandType type = commandTypeRegistry.getCommandTypeById(commandDto.getType());
                    if (type != null) {
                        final CommandConfiguration configuration = type.getConfigurationFactory().createFromDto(commandDto);
                        final CommandOutputConsole console = commandConsoleFactory.create(configuration, machine);
                        console.listenToOutput(machineProcessDto.getOutputChannel());
                        console.attachToProcess(machineProcessDto);
                        addCommandOutput(machine.getId(), console);
                    }
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                notificationManager.notify(localizationConstant.failedToGetProcesses(machine.getId()));
            }
        });
    }

