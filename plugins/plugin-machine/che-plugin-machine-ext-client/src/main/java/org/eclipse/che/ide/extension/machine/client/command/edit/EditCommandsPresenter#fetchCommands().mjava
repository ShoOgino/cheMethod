    /**
     * Fetch commands from server and update view.
     */
    private void fetchCommands() {
        final String originName = editedCommandOriginName;

        reset();
        view.setCancelButtonState(false);
        view.setSaveButtonState(false);

        workspaceServiceClient.getCommands(workspaceId).then(new Function<List<CommandDto>, List<CommandConfiguration>>() {
            @Override
            public List<CommandConfiguration> apply(List<CommandDto> arg) throws FunctionException {
                final List<CommandConfiguration> configurationList = new ArrayList<>();

                for (CommandDto descriptor : arg) {
                    final CommandType type = commandTypeRegistry.getCommandTypeById(descriptor.getType());
                    // skip command if it's type isn't registered
                    if (type != null) {
                        try {
                            configurationList.add(type.getConfigurationFactory().createFromDto(descriptor));
                        } catch (IllegalArgumentException e) {
                            Log.warn(EditCommandsPresenter.class, e.getMessage());
                        }
                    }
                }

                return configurationList;
            }
        }).then(new Operation<List<CommandConfiguration>>() {
            @Override
            public void apply(List<CommandConfiguration> commandConfigurations) throws OperationException {
                commandNames.clear();

                final Map<CommandType, List<CommandConfiguration>> categories = new HashMap<>();

                for (CommandType type : commandTypeRegistry.getCommandTypes()) {
                    final List<CommandConfiguration> settingsCategory = new ArrayList<>();
                    for (CommandConfiguration configuration : commandConfigurations) {
                        if (type.getId().equals(configuration.getType().getId())) {
                            settingsCategory.add(configuration);
                            commandNames.add(configuration.getName());
                            if (configuration.getName().equals(originName)) {
                                view.setSelectedConfiguration(configuration);
                            }
                        }
                    }
                    Collections.sort(settingsCategory, new Comparator<CommandConfiguration>() {
                        @Override
                        public int compare(CommandConfiguration o1, CommandConfiguration o2) {
                            return o1.getName().compareTo(o2.getName());
                        }
                    });
                    categories.put(type, settingsCategory);
                }
                view.setData(categories);
                view.setFilterState(!commandConfigurations.isEmpty());
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                dialogFactory.createMessageDialog("Error", arg.toString(), null).show();
            }
        });
    }

