    @Override
    public void onPreviewSsh(String machineId) {
        ProcessTreeNode machineTreeNode = findProcessTreeNodeById(machineId);
        if (machineTreeNode == null) {
            return;
        }

        Machine machine = (Machine)machineTreeNode.getData();

        final OutputConsole defaultConsole = commandConsoleFactory.create("SSH");
        addCommandOutput(machineId, defaultConsole);

        final String machineName = machine.getConfig().getName();
        String sshServiceAddress = getSshServerAddress(machine);
        final String machineHost;
        final String sshPort;
        if (sshServiceAddress != null) {
            String[] parts = sshServiceAddress.split(":");
            machineHost = parts[0];
            sshPort = (parts.length == 2) ? parts[1] : SSH_PORT;
        } else {
            sshPort = SSH_PORT;
            machineHost = "";
        }

        // user
        final String userName;
        String user = machine.getRuntime().getProperties().get("config.user");
        if (isNullOrEmpty(user)) {
            userName = "root";
        } else {
            userName = user;
        }

        // ssh key
        final String workspaceName = appContext.getWorkspace().getConfig().getName();
        Promise<SshPairDto> sshPairDtoPromise = sshServiceClient.getPair("workspace", machine.getWorkspaceId());

        sshPairDtoPromise.then(new Operation<SshPairDto>() {
            @Override
            public void apply(SshPairDto sshPairDto) throws OperationException {
                if (defaultConsole instanceof DefaultOutputConsole) {
                    ((DefaultOutputConsole)defaultConsole).enableAutoScroll(false);
                    ((DefaultOutputConsole)defaultConsole).printText(localizationConstant.sshConnectInfo(machineName, machineHost, sshPort, workspaceName, userName, localizationConstant.sshConnectInfoPrivateKey(sshPairDto.getPrivateKey())));
                }

                }
            }
        ).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError arg) throws OperationException {
                if (defaultConsole instanceof DefaultOutputConsole) {
                    ((DefaultOutputConsole)defaultConsole).enableAutoScroll(false);
                    ((DefaultOutputConsole)defaultConsole).printText(localizationConstant.sshConnectInfo(machineName, machineHost, sshPort, workspaceName, userName, localizationConstant.sshConnectInfoNoPrivateKey()));
                }
            }
        });

    }

