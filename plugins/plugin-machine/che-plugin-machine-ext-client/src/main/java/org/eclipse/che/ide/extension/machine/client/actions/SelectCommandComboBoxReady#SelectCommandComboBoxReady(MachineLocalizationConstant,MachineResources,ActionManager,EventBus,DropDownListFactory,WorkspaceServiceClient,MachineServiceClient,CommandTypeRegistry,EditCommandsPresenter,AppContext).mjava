    @Inject
    public SelectCommandComboBoxReady(MachineLocalizationConstant locale,
                                      MachineResources resources,
                                      ActionManager actionManager,
                                      EventBus eventBus,
                                      DropDownListFactory dropDownListFactory,
                                      WorkspaceServiceClient workspaceServiceClient,
                                      MachineServiceClient machineServiceClient,
                                      CommandTypeRegistry commandTypeRegistry,
                                      EditCommandsPresenter editCommandsPresenter,
                                      AppContext appContext) {
        super(Collections.singletonList(PROJECT_PERSPECTIVE_ID),
              locale.selectCommandControlTitle(),
              locale.selectCommandControlDescription(),
              null, null);
        this.locale = locale;
        this.resources = resources;
        this.actionManager = actionManager;
        this.workspaceServiceClient = workspaceServiceClient;
        this.machineServiceClient = machineServiceClient;
        this.commandTypeRegistry = commandTypeRegistry;

        this.dropDownListFactory = dropDownListFactory;
        this.appContext = appContext;
        this.workspaceId = appContext.getWorkspace().getId();
        this.dropDownHeaderWidget = dropDownListFactory.createList(GROUP_COMMANDS_LIST);
        this.devMachineLabelWidget = new HTML(locale.selectCommandEmptyCurrentDevMachineText());

        commands = new LinkedList<>();

        eventBus.addHandler(ExtServerStateEvent.TYPE, this);
        editCommandsPresenter.addConfigurationsChangedListener(this);

        commandActions = new DefaultActionGroup(GROUP_COMMANDS, false, actionManager);
        actionManager.registerAction(GROUP_COMMANDS, commandActions);

        lastDevMachineId = null;

        dropDownHeaderWidget.setDelegate(this);
    }

