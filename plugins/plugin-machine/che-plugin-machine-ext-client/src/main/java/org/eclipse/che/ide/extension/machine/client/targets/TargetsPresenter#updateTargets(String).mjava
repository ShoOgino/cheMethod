    /**
     * Fetches all recipes from the server, makes a list of targets and selects specified target.
     */
    @Override
    public void updateTargets(final String preselectTargetName) {
        final Map<String, Target> targetByName = new HashMap<>();
        targets.clear();
        machines.clear();

        machineService.getMachines(appContext.getWorkspaceId()).then(new Operation<List<MachineDto>>() {
            @Override
            public void apply(List<MachineDto> machineList) throws OperationException {

                //create Target objects from all machines except machines with ssh type
                for (MachineDto machine : machineList) {
                    final MachineConfigDto machineConfig = machine.getConfig();
                    machines.put(machineConfig.getName(), machine);
                    final String targetCategory = machineConfig.isDev() ? machineLocale.devMachineCategory() : machineConfig.getType();
                    final Target target = createTarget(machineConfig.getName(), targetCategory);
                    target.setConnected(isMachineRunning(machine));
                    targetByName.put(target.getName(), target);
                }

                //create Target objects from recipe with ssh type
                recipeServiceClient.getAllRecipes().then(new Operation<List<RecipeDescriptor>>() {
                    @Override
                    public void apply(List<RecipeDescriptor> recipeList) throws OperationException {
                        for (RecipeDescriptor recipe : recipeList) {
                            //only for SSH recipes
                            if (!machineLocale.targetsViewCategorySsh().equalsIgnoreCase(recipe.getType())) {
                                continue;
                            }
                            Target target = targetByName.get(recipe.getName());
                            if (target == null) {
                                target = createTarget(recipe.getName(), recipe.getType());
                            }
                            target.setRecipe(recipe);
                            categoryPageRegistry.getCategoryPage(target.getCategory()).getTargetManager().restoreTarget(target);
                            targetByName.put(target.getName(), target);
                        }
                        targets.addAll(targetByName.values());
                        view.showTargets(targets);

                        selectTarget(preselectTargetName == null ? selectedTarget : targetByName.get(preselectTargetName));
                    }
                });

            }
        });
    }

