    /**
     * Sets command configurations to the list.
     *
     * @param commandConfigurations
     *         collection of command configurations to set
     * @param commandToSelect
     *         command that should be selected or {@code null} if none
     */
    private void setCommandConfigurations(@NotNull List<CommandConfiguration> commandConfigurations,
                                          @Nullable CommandConfiguration commandToSelect) {
        commands.clear();
        commandActions.removeAll();

        final DefaultActionGroup commandsList = (DefaultActionGroup)actionManager.getAction(GROUP_COMMANDS_LIST);
        if (commandsList != null) {
            commandActions.addAll(commandsList);
        }

        Collections.sort(commandConfigurations, new Comparator<CommandConfiguration>() {
            @Override
            public int compare(CommandConfiguration o1, CommandConfiguration o2) {
                return o1.getType().getId().compareTo(o2.getType().getId());
            }
        });
        CommandConfiguration prevCommand = null;
        for (CommandConfiguration configuration : commandConfigurations) {
            if (prevCommand == null || !configuration.getType().getId().equals(prevCommand.getType().getId())) {
                commandActions.addSeparator(configuration.getType().getDisplayName());
            }
            commandActions.add(commandsListWidget.createAction(configuration.getName(), configuration.getName()));
            prevCommand = configuration;
        }

        commands.addAll(commandConfigurations);

        if (commandToSelect != null) {
            setSelectedCommand(commandToSelect);
        } else {
            selectLastUsedCommand();
        }
    }

