    @Inject
    public TerminalPresenter(TerminalView view,
                             NotificationManager notificationManager,
                             MachineLocalizationConstant locale,
                             @Assisted MachineEntity machine) {
        this.view = view;
        view.setDelegate(this);
        this.notificationManager = notificationManager;
        this.locale = locale;
        this.machine = machine;

        connected = false;
        countRetry = 2;

        promise = AsyncPromiseHelper.createFromAsyncRequest(new AsyncPromiseHelper.RequestCall<Boolean>() {
            @Override
            public void makeCall(final AsyncCallback<Boolean> callback) {
                if (scriptInjected) {
                    callback.onSuccess(true);
                    return;
                }

                ScriptInjector.fromUrl(GWT.getModuleBaseURL() + "term/term.js")
                              .setWindow(ScriptInjector.TOP_WINDOW)
                              .setCallback(new Callback<Void, Exception>() {
                                  @Override
                                  public void onFailure(Exception reason) {
                                      callback.onFailure(reason);
                                  }

                                  @Override
                                  public void onSuccess(Void result) {
                                      scriptInjected = true;
                                      callback.onSuccess(true);
                                  }
                              }).inject();
            }
        });
    }

