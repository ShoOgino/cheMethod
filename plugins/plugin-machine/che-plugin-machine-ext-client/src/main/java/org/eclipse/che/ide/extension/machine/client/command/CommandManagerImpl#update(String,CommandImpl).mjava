    @Override
    public Promise<CommandImpl> update(final String commandName, final CommandImpl command) {
        final String name;
        if (commandName.equals(command.getName())) {
            name = commandName;
        } else {
            name = getUniqueCommandName(command.getType(), command.getName());
        }

        final CommandDto commandDto = dtoFactory.createDto(CommandDto.class)
                                                .withName(name)
                                                .withCommandLine(command.getCommandLine())
                                                .withType(command.getType())
                                                .withAttributes(command.getAttributes());

        return workspaceServiceClient.updateCommand(appContext.getWorkspaceId(), commandName, commandDto)
                                     .then(new Function<WorkspaceDto, CommandImpl>() {
                                         @Override
                                         public CommandImpl apply(WorkspaceDto arg) throws FunctionException {
                                             final CommandImpl updatedCommand = new CommandImpl(commandDto.getName(),
                                                                                                command.getCommandLine(),
                                                                                                command.getType(),
                                                                                                command.getAttributes());
                                             commands.remove(commandName);
                                             commands.put(updatedCommand.getName(), updatedCommand);

                                             fireCommandUpdated(updatedCommand);

                                             return updatedCommand;
                                         }
                                     });
    }

