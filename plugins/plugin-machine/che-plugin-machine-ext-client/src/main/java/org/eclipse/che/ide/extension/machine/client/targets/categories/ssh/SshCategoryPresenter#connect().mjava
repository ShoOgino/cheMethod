    /**
     * Opens a connection to the selected target.
     * Starts a machine based on the selected recipe.
     */
    private void connect() {
        subscribeToMachineChannel(selectedTarget.getName());

        sshView.setConnectButtonText(null);

        connectNotification =
                notificationManager.notify(machineLocale.targetsViewConnectProgress(selectedTarget.getName()), PROGRESS, FLOAT_MODE);

        String recipeURL = selectedTarget.getRecipe().getLink("get recipe script").getHref();

        LimitsDto limitsDto = dtoFactory.createDto(LimitsDto.class).withRam(1024);
        MachineSourceDto sourceDto = dtoFactory.createDto(MachineSourceDto.class).withType("ssh-config").withLocation(recipeURL);

        MachineConfigDto configDto = dtoFactory.createDto(MachineConfigDto.class)
                                               .withDev(false)
                                               .withName(selectedTarget.getName())
                                               .withSource(sourceDto)
                                               .withLimits(limitsDto)
                                               .withType(getCategory());

        Promise<MachineDto> machinePromise = workspaceServiceClient.createMachine(appContext.getWorkspaceId(), configDto);

        machinePromise.then(new Operation<MachineDto>() {
            @Override
            public void apply(final MachineDto machineDto) throws OperationException {
                eventBus.fireEvent(new MachineStateEvent(machineDto, MachineStateEvent.MachineAction.CREATING));
            }
        });

        machinePromise.catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError promiseError) throws OperationException {
                unsubscribeFromMachineChannel(selectedTarget.getName());
                onConnectingFailed(null);
            }
        });
    }

