    @Inject
    private void prepareActions(MachineLocalizationConstant localizationConstant,
                                ActionManager actionManager,
                                KeyBindingAgent keyBinding,
                                ExecuteSelectedCommandAction executeSelectedCommandAction,
                                SelectCommandComboBox selectCommandAction,
                                EditCommandsAction editCommandsAction,
                                CreateMachineAction createMachine,
                                RestartMachineAction restartMachine,
                                DestroyMachineAction destroyMachineAction,
                                StopWorkspaceAction stopWorkspaceAction,
                                StopMachineAction stopMachineAction,
                                SwitchPerspectiveAction switchPerspectiveAction,
                                CreateSnapshotAction createSnapshotAction,
                                RunCommandAction runCommandAction,
                                NewTerminalAction newTerminalAction,
                                EditTargetsAction editTargetsAction,
                                IconRegistry iconRegistry,
                                MachineResources machineResources) {
        final DefaultActionGroup mainMenu = (DefaultActionGroup)actionManager.getAction(GROUP_MAIN_MENU);

        final DefaultActionGroup workspaceMenu = (DefaultActionGroup)actionManager.getAction(GROUP_WORKSPACE);
        final DefaultActionGroup runMenu = (DefaultActionGroup)actionManager.getAction(GROUP_RUN);

        // register actions
        actionManager.registerAction("editCommands", editCommandsAction);
        actionManager.registerAction("selectCommandAction", selectCommandAction);
        actionManager.registerAction("executeSelectedCommand", executeSelectedCommandAction);

        actionManager.registerAction("editTargets", editTargetsAction);

        //add actions in machine menu
        final DefaultActionGroup machineMenu = new DefaultActionGroup(localizationConstant.mainMenuMachine(), true, actionManager);

        actionManager.registerAction("machine", machineMenu);
        actionManager.registerAction("createMachine", createMachine);
        actionManager.registerAction("destroyMachine", destroyMachineAction);
        actionManager.registerAction("restartMachine", restartMachine);
        actionManager.registerAction("stopWorkspace", stopWorkspaceAction);
        actionManager.registerAction("stopMachine", stopMachineAction);
        actionManager.registerAction("createSnapshot", createSnapshotAction);
        actionManager.registerAction("runCommand", runCommandAction);
        actionManager.registerAction("newTerminal", newTerminalAction);

        // add actions in main menu
        runMenu.add(newTerminalAction, FIRST);
        runMenu.addSeparator();
        runMenu.add(editCommandsAction);
        runMenu.add(editTargetsAction);

        workspaceMenu.add(stopWorkspaceAction);

        mainMenu.add(machineMenu, new Constraints(AFTER, IdeActions.GROUP_PROJECT));
        machineMenu.add(createMachine);
        machineMenu.add(restartMachine);
        machineMenu.add(destroyMachineAction);
        machineMenu.add(stopMachineAction);
        machineMenu.add(createSnapshotAction);

        // add actions on center part of toolbar
        final DefaultActionGroup centerToolbarGroup = (DefaultActionGroup)actionManager.getAction(GROUP_CENTER_TOOLBAR);
        final DefaultActionGroup machineToolbarGroup = new DefaultActionGroup(GROUP_MACHINE_TOOLBAR, false, actionManager);
        actionManager.registerAction(GROUP_MACHINE_TOOLBAR, machineToolbarGroup);
        centerToolbarGroup.add(machineToolbarGroup, FIRST);
        machineToolbarGroup.add(selectCommandAction);
        final DefaultActionGroup executeToolbarGroup = new DefaultActionGroup(actionManager);
        executeToolbarGroup.add(executeSelectedCommandAction);
        machineToolbarGroup.add(executeToolbarGroup);

        // add actions on right part of toolbar
        final DefaultActionGroup rightToolbarGroup = (DefaultActionGroup)actionManager.getAction(GROUP_RIGHT_TOOLBAR);
        rightToolbarGroup.add(switchPerspectiveAction);

        // add group for list of machines
        final DefaultActionGroup machinesList = new DefaultActionGroup(GROUP_MACHINES_DROPDOWN, true, actionManager);
        actionManager.registerAction(GROUP_MACHINES_LIST, machinesList);
        machinesList.add(editTargetsAction, FIRST);

        // add group for list of commands
        final DefaultActionGroup commandList = new DefaultActionGroup(GROUP_COMMANDS_DROPDOWN, true, actionManager);
        actionManager.registerAction(GROUP_COMMANDS_LIST, commandList);
        commandList.add(editCommandsAction, FIRST);

        final DefaultActionGroup runContextGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_RUN_CONTEXT_MENU);
        runContextGroup.add(machinesList);
        runContextGroup.add(commandList);
        runContextGroup.addSeparator();

        // Define hot-keys
        keyBinding.getGlobal().addKey(new KeyBuilder().alt().charCode(KeyCodeMap.F12).build(), "newTerminal");

        iconRegistry.registerIcon(new Icon("che.runtime.icon", machineResources.devMachine()));
    }

