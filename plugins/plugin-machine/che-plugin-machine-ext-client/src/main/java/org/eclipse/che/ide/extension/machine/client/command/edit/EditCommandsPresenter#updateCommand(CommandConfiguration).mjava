    private Promise<UsersWorkspaceDto> updateCommand(final CommandConfiguration selectedConfiguration) {
        final CommandDto commandDto = dtoFactory.createDto(CommandDto.class)
                                                .withName(selectedConfiguration.getName())
                                                .withCommandLine(selectedConfiguration.toCommandLine())
                                                .withType(selectedConfiguration.getType().getId())
                                                .withAttributes(selectedConfiguration.getAttributes());

        if (editedCommandOriginName.trim().equals(selectedConfiguration.getName())) {
            return workspaceServiceClient.updateCommand(workspaceId, commandDto);
        } else {
            onNameChanged();
            //generate a new unique name if input one already exists
            final String newName = getUniqueCommandName(selectedConfiguration.getType(), selectedConfiguration.getName());

            if (selectedConfiguration.equals(view.getSelectedConfiguration())) {
                //update selected configuration name
                view.getSelectedConfiguration().setName(newName);
            }

            return workspaceServiceClient.deleteCommand(workspaceId, editedCommandOriginName)
                                         .thenPromise(new Function<UsersWorkspaceDto, Promise<UsersWorkspaceDto>>() {
                                             @Override
                                             public Promise<UsersWorkspaceDto> apply(UsersWorkspaceDto arg) throws FunctionException {
                                                 commandDto.setName(newName);
                                                 return workspaceServiceClient.addCommand(workspaceId, commandDto);
                                             }
                                         });
        }
    }

