    private SpanElement renderCategoryHeader(final Category<Target> category) {
        SpanElement categoryHeaderElement = Document.get().createSpanElement();
        categoryHeaderElement.setClassName(commandResources.getCss().categoryHeader());

        SpanElement iconElement = Document.get().createSpanElement();
        iconElement.getStyle().setPaddingRight(4, Style.Unit.PX);
        iconElement.getStyle().setPaddingLeft(2, Style.Unit.PX);
        categoryHeaderElement.appendChild(iconElement);

        Icon icon = iconRegistry.getIconIfExist(category.getTitle() + ".runtime.icon");
        if (icon != null) {
            iconElement.appendChild(icon.getSVGImage().getElement());
        }

        SpanElement textElement = Document.get().createSpanElement();
        categoryHeaderElement.appendChild(textElement);
        textElement.setInnerText(category.getTitle());

        if (!"docker".equalsIgnoreCase(category.getTitle())) {
            // Add button to create a target
            SpanElement buttonElement = Document.get().createSpanElement();
            buttonElement.appendChild(commandResources.addCommandButton().getSvg().getElement());
            categoryHeaderElement.appendChild(buttonElement);

            Event.sinkEvents(buttonElement, Event.ONCLICK);
            Event.setEventListener(buttonElement, new EventListener() {
                @Override
                public void onBrowserEvent(Event event) {
                    event.stopPropagation();
                    event.preventDefault();
                    delegate.onAddTarget(category.getTitle());
                }
            });
        } else {
            // Add empty span for properly aligning items
            categoryHeaderElement.appendChild(Document.get().createSpanElement());
        }

        return categoryHeaderElement;
    }

