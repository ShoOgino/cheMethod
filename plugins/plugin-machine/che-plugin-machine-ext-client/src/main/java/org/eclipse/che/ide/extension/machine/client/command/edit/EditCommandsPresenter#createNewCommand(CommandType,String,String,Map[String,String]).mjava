    private void createNewCommand(final CommandType type, final String customCommand, final String customName, final Map<String, String> attributes) {
        if (!isViewModified()) {
            reset();
            createCommand(type, customCommand, customName, attributes);
            return;
        }

        final ConfirmCallback saveCallback = new ConfirmCallback() {
            @Override
            public void accepted() {
                updateCommand(editedCommand).then(new Operation<UsersWorkspaceDto>() {
                    @Override
                    public void apply(UsersWorkspaceDto arg) throws OperationException {
                        reset();
                        createCommand(type, customCommand, customName, attributes);
                    }
                });
            }
        };

        final ConfirmCallback discardCallback = new ConfirmCallback() {
            @Override
            public void accepted() {
                fetchCommands();
                reset();
                createCommand(type, customCommand, customName, attributes);
            }
        };

        final ChoiceDialog dialog = dialogFactory.createChoiceDialog(
                machineLocale.editCommandsSaveChangesTitle(),
                machineLocale.editCommandsSaveChangesConfirmation(editedCommand.getName()),
                coreLocale.save(),
                machineLocale.editCommandsSaveChangesDiscard(),
                saveCallback,
                discardCallback);
        dialog.show();
    }

