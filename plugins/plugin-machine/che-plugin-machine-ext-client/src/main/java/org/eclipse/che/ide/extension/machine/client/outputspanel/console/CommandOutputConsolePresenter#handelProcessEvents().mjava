    private void handelProcessEvents() {
        final Unmarshallable<MachineProcessEvent> unmarshaller = dtoUnmarshallerFactory.newWSUnmarshaller(MachineProcessEvent.class);
        final String processStateChannel = "machine:process:" + machine.getId();
        final MessageHandler handler = new SubscriptionHandler<MachineProcessEvent>(unmarshaller) {
            @Override
            protected void onMessageReceived(MachineProcessEvent result) {
                final int processId = result.getProcessId();
                if (pid != processId) {
                    return;
                }
                switch (result.getEventType()) {
                    case STOPPED:
                        finished = true;
                        view.enableStopButton(false);
                        eventBus.fireEvent(new ProcessFinishedEvent(processId));
                        break;
                    case ERROR:
                        finished = true;
                        view.enableStopButton(false);
                        eventBus.fireEvent(new ProcessFinishedEvent(processId));
                        wsUnsubscribe(processStateChannel, this);
                        wsUnsubscribe(outputChannel, outputHandler);
                        String error = result.getError();
                        if (error == null) {
                            return;
                        }
                        view.print(error, false);
                        break;
                }
            }

            @Override
            protected void onErrorReceived(Throwable exception) {
                finished = true;
                view.enableStopButton(false);
                wsUnsubscribe(processStateChannel, this);
                wsUnsubscribe(outputChannel, outputHandler);
            }
        };
        wsSubscribe(processStateChannel, handler);
    }

