    public void executeCommand(@NotNull final CommandConfiguration configuration, @NotNull final Machine machine) {
        if (machine == null) {
            notificationManager.notify(localizationConstant.failedToExecuteCommand(),
                                       localizationConstant.noDevMachine(),
                                       FAIL,
                                       FLOAT_MODE);
            return;
        }

        final String outputChannel = "process:output:" + UUID.uuid();

        final CommandOutputConsole console = commandConsoleFactory.create(configuration, machine);
        console.listenToOutput(outputChannel);
        consolesPanelPresenter.addCommandOutput(machine.getId(), console);
        workspaceAgent.setActivePart(consolesPanelPresenter);

        substituteProperties(configuration.toCommandLine()).then(new Operation<String>() {
            @Override
            public void apply(String arg) throws OperationException {
                final CommandDto command = dtoFactory.createDto(CommandDto.class)
                                                     .withName(configuration.getName())
                                                     .withCommandLine(arg)
                                                     .withType(configuration.getType().getId());

                final Promise<MachineProcessDto> processPromise = machineServiceClient.executeCommand(machine.getId(), command, outputChannel);
                processPromise.then(new Operation<MachineProcessDto>() {
                    @Override
                    public void apply(MachineProcessDto process) throws OperationException {
                        console.attachToProcess(process);
                    }
                });
            }
        });
    }

