    @Inject
    public ProcessesPanelPresenter(ProcessesPanelView view,
                                   MachineLocalizationConstant localizationConstant,
                                   MachineResources resources,
                                   EventBus eventBus,
                                   MachineServiceClient machineServiceClient,
                                   WorkspaceAgent workspaceAgent,
                                   AppContext appContext,
                                   NotificationManager notificationManager,
                                   EntityFactory entityFactory,
                                   TerminalFactory terminalFactory,
                                   CommandConsoleFactory commandConsoleFactory,
                                   DialogFactory dialogFactory,
                                   ConsoleTreeContextMenuFactory consoleTreeContextMenuFactory,
                                   CommandTypeRegistry commandTypeRegistry,
                                   SshServiceClient sshServiceClient,
                                   ExecAgentCommandManager execAgentCommandManager) {
        this.view = view;
        this.localizationConstant = localizationConstant;
        this.resources = resources;
        this.machineServiceClient = machineServiceClient;
        this.workspaceAgent = workspaceAgent;
        this.sshServiceClient = sshServiceClient;
        this.appContext = appContext;
        this.notificationManager = notificationManager;
        this.entityFactory = entityFactory;
        this.terminalFactory = terminalFactory;
        this.commandConsoleFactory = commandConsoleFactory;
        this.dialogFactory = dialogFactory;
        this.consoleTreeContextMenuFactory = consoleTreeContextMenuFactory;
        this.eventBus = eventBus;
        this.commandTypeRegistry = commandTypeRegistry;
        this.execAgentCommandManager = execAgentCommandManager;

        machineNodes = new HashMap<>();
        machines = new HashMap<>();
        rootNode = new ProcessTreeNode(ROOT_NODE, null, null, null, new ArrayList<ProcessTreeNode>());
        terminals = new HashMap<>();
        consoles = new HashMap<>();
        consoleCommands = new HashMap<>();

        view.setDelegate(this);

        eventBus.addHandler(ProcessFinishedEvent.TYPE, this);
        eventBus.addHandler(WorkspaceStartedEvent.TYPE, this);
        eventBus.addHandler(WorkspaceStoppedEvent.TYPE, this);
        eventBus.addHandler(WsAgentStateEvent.TYPE, this);
        eventBus.addHandler(MachineStateEvent.TYPE, this);
        eventBus.addHandler(EnvironmentOutputEvent.TYPE, this);
        eventBus.addHandler(DownloadWorkspaceOutputEvent.TYPE, this);
        eventBus.addHandler(PartStackStateChangedEvent.TYPE, this);

        updateMachineList();

        final PartStack partStack = checkNotNull(workspaceAgent.getPartStack(PartStackType.INFORMATION),
                                                 "Information part stack should not be a null");
        partStack.addPart(this);

        if (appContext.getFactory() == null) {
            partStack.setActivePart(this);
        }
    }

