    /**
     * Render the commands list.
     * It also takes into account the name filter and restores the selected command.
     */
    private void renderCategoriesList(Map<CommandType, List<CommandImpl>> categories) {
        final List<Category<?>> categoriesToRender = new ArrayList<>();

        for (CommandType type : categories.keySet()) {
            List<CommandImpl> commands = new ArrayList<>();
            if (filterTextValue.isEmpty()) {
                commands = categories.get(type);
            } else {  // filtering List
                for (final CommandImpl command : categories.get(type)) {
                    if (command.getName().contains(filterTextValue)) {
                        commands.add(command);
                    }
                }
            }

            Category<CommandImpl> category = new Category<>(type.getId(), commandRenderer, commands, commandEventDelegate);
            categoriesToRender.add(category);
        }

        categoriesList.clear();
        categoriesList.render(categoriesToRender, true);

        if (selectedCommand != null) {
            categoriesList.selectElement(selectedCommand);
            if (filterTextValue.isEmpty()) {
                selectText(commandName.getElement());
            }
        } else {
            resetView();
        }
    }

