    @Inject
    public ProcessesPanelPresenter(ProcessesPanelView view,
                                   MachineLocalizationConstant localizationConstant,
                                   MachineResources resources,
                                   EventBus eventBus,
                                   MachineServiceClient machineServiceClient,
                                   WorkspaceAgent workspaceAgent,
                                   AppContext appContext,
                                   NotificationManager notificationManager,
                                   EntityFactory entityFactory,
                                   TerminalFactory terminalFactory,
                                   CommandConsoleFactory commandConsoleFactory,
                                   DialogFactory dialogFactory,
                                   DtoFactory dtoFactory,
                                   CommandTypeRegistry commandTypeRegistry) {
        this.view = view;
        this.localizationConstant = localizationConstant;
        this.resources = resources;
        this.machineServiceClient = machineServiceClient;
        this.workspaceAgent = workspaceAgent;
        this.appContext = appContext;
        this.notificationManager = notificationManager;
        this.entityFactory = entityFactory;
        this.terminalFactory = terminalFactory;
        this.commandConsoleFactory = commandConsoleFactory;
        this.dialogFactory = dialogFactory;
        this.dtoFactory = dtoFactory;
        this.commandTypeRegistry = commandTypeRegistry;

        machineNodes = new HashMap<>();
        rootNodes = new ArrayList<>();
        rootNode = new ProcessTreeNode(ROOT_NODE, null, null, null, rootNodes);
        terminals = new HashMap<>();
        consoles = new HashMap<>();
        consoleCommands = new HashMap<>();

        view.setDelegate(this);

        eventBus.addHandler(ProcessFinishedEvent.TYPE, this);
        eventBus.addHandler(WorkspaceStoppedEvent.TYPE, this);
        eventBus.addHandler(WsAgentStateEvent.TYPE, this);
        eventBus.addHandler(MachineStateEvent.TYPE, this);
        eventBus.addHandler(EnvironmentOutputEvent.TYPE, this);

        fetchMachines();
    }

