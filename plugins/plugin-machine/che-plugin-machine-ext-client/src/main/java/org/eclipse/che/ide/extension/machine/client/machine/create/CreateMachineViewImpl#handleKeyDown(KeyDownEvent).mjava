    @UiHandler("tags")
    void handleKeyDown(KeyDownEvent event) {
        switch (event.getNativeKeyCode()) {
            case KEY_UP:
                if (popupPanel.isShowing()) {
                    event.preventDefault();

                    if (list.getSelectionModel().getSelectedIndex() == 0) {
                        list.getSelectionModel().setSelectedItem(list.getSelectionModel().size() - 1);
                    } else {
                        list.getSelectionModel().selectPrevious();
                    }
                }
                break;
            case KEY_DOWN:
                if (popupPanel.isShowing()) {
                    event.preventDefault();

                    if (list.getSelectionModel().getSelectedIndex() == list.getSelectionModel().size() - 1) {
                        list.getSelectionModel().setSelectedItem(0);
                    } else {
                        list.getSelectionModel().selectNext();
                    }
                }
                break;
            case KEY_ENTER:
                if (popupPanel.isShowing()) {
                    delegate.onRecipeSelected(list.getSelectionModel().getSelectedItem());
                    popupPanel.hide();
                }
                break;
            case KEY_ESCAPE:
                if (popupPanel.isShowing()) {
                    popupPanel.hide();
                }
                break;
            case KEY_LEFT:
            case KEY_RIGHT:
                break;
            default:
                Scheduler.get().scheduleDeferred(new Command() {
                    @Override
                    public void execute() {
                        delegate.onTagsChanged();
                    }
                });
                break;
        }
    }

