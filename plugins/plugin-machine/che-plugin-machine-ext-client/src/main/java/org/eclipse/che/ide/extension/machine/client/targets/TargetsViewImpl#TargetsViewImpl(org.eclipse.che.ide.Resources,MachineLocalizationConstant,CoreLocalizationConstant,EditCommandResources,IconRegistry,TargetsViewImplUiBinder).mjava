    @Inject
    public TargetsViewImpl(org.eclipse.che.ide.Resources resources,
                           MachineLocalizationConstant machineLocale,
                           CoreLocalizationConstant coreLocale,
                           EditCommandResources commandResources,
                           IconRegistry iconRegistry,
                           TargetsViewImplUiBinder uiBinder) {
        this.machineLocale = machineLocale;
        this.commandResources = commandResources;
        this.iconRegistry = iconRegistry;

        setWidget(uiBinder.createAndBindUi(this));
        getWidget().getElement().getStyle().setPadding(0, Style.Unit.PX);
        setTitle(machineLocale.targetsViewTitle());

        filterTargets.getElement().setAttribute("placeholder", machineLocale.editCommandsViewPlaceholder());
        filterTargets.getElement().addClassName(commandResources.getCss().filterPlaceholder());

        list = new CategoriesList(resources);
        list.addDomHandler(new KeyDownHandler() {
            @Override
            public void onKeyDown(KeyDownEvent event) {
                switch (event.getNativeKeyCode()) {
                    case KeyboardEvent.KeyCode.INSERT:
                        break;
                    case KeyboardEvent.KeyCode.DELETE:
                        break;
                }
            }
        }, KeyDownEvent.getType());
        targetsPanel.add(list);

        architectureListBox.addItem("linux_amd64");
        architectureListBox.addItem("linux_arm7");
        architectureListBox.setSelectedIndex(0);

        architectureListBox.addChangeHandler(new ChangeHandler() {
            @Override
            public void onChange(ChangeEvent changeEvent) {
                delegate.onArchitectureChanged(architectureListBox.getValue());
            }
        });

        closeButton = createButton(coreLocale.close(), "targets.button.close",
                new ClickHandler() {
                    @Override
                    public void onClick(ClickEvent event) {
                        delegate.onCloseClicked();
                    }
                });
        addButtonToFooter(closeButton);

        saveButton = createButton(coreLocale.save(), "targets.button.save", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onSaveClicked();
            }
        });
        saveButton.addStyleName(this.resources.windowCss().primaryButton());
        footer.add(saveButton);

        cancelButton = createButton(coreLocale.cancel(), "targets.button.cancel", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onCancelClicked();
            }
        });
        footer.add(cancelButton);

        connectButton = createButton("Connect", "targets.button.connect", new ClickHandler() {
            @Override
            public void onClick(ClickEvent event) {
                delegate.onConnectClicked();
            }
        });
        connectButton.addStyleName(this.resources.windowCss().primaryButton());
        connectButton.addStyleName(resources.Css().buttonLoader());

        operationPanel.add(connectButton);
        operationPanel.getElement().insertFirst(connectButton.getElement());

        targetName.addKeyUpHandler(new KeyUpHandler() {
            @Override
            public void onKeyUp(KeyUpEvent keyUpEvent) {
                delegate.onTargetNameChanged(targetName.getValue());
            }
        });

        host.addKeyUpHandler(new KeyUpHandler() {
            @Override
            public void onKeyUp(KeyUpEvent keyUpEvent) {
                delegate.onHostChanged(host.getValue());
            }
        });

        port.addKeyUpHandler(new KeyUpHandler() {
            @Override
            public void onKeyUp(KeyUpEvent keyUpEvent) {
                delegate.onPortChanged(port.getValue());
            }
        });

        userName.addKeyUpHandler(new KeyUpHandler() {
            @Override
            public void onKeyUp(KeyUpEvent keyUpEvent) {
                delegate.onUserNameChanged(userName.getValue());
            }
        });

        password.addKeyUpHandler(new KeyUpHandler() {
            @Override
            public void onKeyUp(KeyUpEvent keyUpEvent) {
                delegate.onPasswordChanged(password.getValue());
            }
        });

    }

