    /** {@inheritDoc} */
    @Override
    protected void configure() {
        GinMapBinder<String, Perspective> perspectiveBinder = GinMapBinder.newMapBinder(binder(), String.class, Perspective.class);
        perspectiveBinder.addBinding(OPERATIONS_PERSPECTIVE_ID).to(OperationsPerspective.class);

        bind(ToolbarPresenter.class).annotatedWith(MachineConsoleToolbar.class).to(ToolbarPresenter.class).in(Singleton.class);
        bind(MachineConsoleView.class).to(MachineConsoleViewImpl.class).in(Singleton.class);

        bind(CreateMachineView.class).to(CreateMachineViewImpl.class);
        bind(OutputConsoleView.class).to(OutputConsoleViewImpl.class);
        install(new GinFactoryModuleBuilder()
                        .implement(CommandOutputConsole.class, Names.named("command"), CommandOutputConsolePresenter.class)
                        .implement(OutputConsole.class, Names.named("default"), DefaultOutputConsole.class)
                        .build(CommandConsoleFactory.class));

        bind(OutputsContainerView.class).to(OutputsContainerViewImpl.class).in(Singleton.class);
        bind(ConsolesPanelView.class).to(ConsolesPanelViewImpl.class).in(Singleton.class);

        bind(EditCommandsView.class).to(EditCommandsViewImpl.class).in(Singleton.class);

        bind(TargetsView.class).to(TargetsViewImpl.class).in(Singleton.class);

        GinMultibinder.newSetBinder(binder(), CommandType.class).addBinding().to(CustomCommandType.class);

        bind(CommandPropertyValueProviderRegistry.class).to(CommandPropertyValueProviderRegistryImpl.class).in(Singleton.class);

        final GinMultibinder<CommandPropertyValueProvider> valueProviderBinder =
                GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class);
        valueProviderBinder.addBinding().to(DevMachineHostNameProvider.class);
        valueProviderBinder.addBinding().to(CurrentProjectPathProvider.class);
        valueProviderBinder.addBinding().to(CurrentProjectRelativePathProvider.class);

        install(new GinFactoryModuleBuilder().implement(TabHeader.class, TabHeaderImpl.class)
                                             .implement(EditorButtonWidget.class, EditorButtonWidgetImpl.class)
                                             .build(WidgetsFactory.class));
        install(new GinFactoryModuleBuilder().implement(Tab.class, TabImpl.class).build(EntityFactory.class));
        install(new GinFactoryModuleBuilder().build(TerminalFactory.class));

        bind(MachineManager.class).to(MachineManagerImpl.class).in(Singleton.class);

        bindConstant().annotatedWith(Names.named("machine.extension.api_port")).to(Constants.WS_AGENT_PORT);

        bind(SshView.class).to(SshViewImpl.class);
        bind(DockerView.class).to(DockerViewImpl.class);
        bind(DevelopmentView.class).to(DevelopmentViewImpl.class);

        bind(Target.class).to(BaseTarget.class);

        final GinMultibinder<CategoryPage> categoryPageBinder = GinMultibinder.newSetBinder(binder(), CategoryPage.class);
        categoryPageBinder.addBinding().to(SshCategoryPresenter.class);
        categoryPageBinder.addBinding().to(DockerCategoryPresenter.class);
        categoryPageBinder.addBinding().to(DevelopmentCategoryPresenter.class);
    }

