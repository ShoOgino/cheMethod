    /** {@inheritDoc} */
    @Override
    protected void configure() {
        GinMapBinder<String, Component> componentBinder = GinMapBinder.newMapBinder(binder(), String.class, Component.class);
        componentBinder.addBinding("Start Machine").to(MachineComponent.class);

        GinMapBinder<String, Perspective> perspectiveBinder = GinMapBinder.newMapBinder(binder(), String.class, Perspective.class);
        perspectiveBinder.addBinding(MACHINE_PERSPECTIVE_ID).to(MachinePerspective.class);

        bind(ToolbarPresenter.class).annotatedWith(MachineConsoleToolbar.class).to(ToolbarPresenter.class).in(Singleton.class);
        bind(MachineConsoleView.class).to(MachineConsoleViewImpl.class).in(Singleton.class);

        bind(CreateMachineView.class).to(CreateMachineViewImpl.class);
        bind(OutputConsoleView.class).to(OutputConsoleViewImpl.class);
        install(new GinFactoryModuleBuilder().implement(CommandOutputConsole.class, Names.named("command"), CommandOutputConsolePresenter.class)
                                             .implement(OutputConsole.class, Names.named("default"), DefaultOutputConsole.class)
                                             .build(CommandConsoleFactory.class));

        bind(OutputsContainerView.class).to(OutputsContainerViewImpl.class).in(Singleton.class);
        bind(ConsolesPanelView.class).to(ConsolesPanelViewImpl.class).in(Singleton.class);

        bind(EditCommandsView.class).to(EditCommandsViewImpl.class).in(Singleton.class);

        GinMultibinder.newSetBinder(binder(), CommandType.class).addBinding().to(CustomCommandType.class);

        bind(CommandPropertyValueProviderRegistry.class).to(CommandPropertyValueProviderRegistryImpl.class).in(Singleton.class);

        final GinMultibinder<CommandPropertyValueProvider> valueProviderBinder = GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class);
        valueProviderBinder.addBinding().to(DevMachineHostNameProvider.class);
        valueProviderBinder.addBinding().to(CurrentProjectPathProvider.class);
        valueProviderBinder.addBinding().to(CurrentProjectRelativePathProvider.class);

        install(new GinFactoryModuleBuilder().implement(TabHeader.class, TabHeaderImpl.class)
                                             .implement(EditorButtonWidget.class, EditorButtonWidgetImpl.class)
                                             .build(WidgetsFactory.class));
        install(new GinFactoryModuleBuilder().implement(Tab.class, TabImpl.class).build(EntityFactory.class));
        install(new GinFactoryModuleBuilder().build(TerminalFactory.class));

        bind(MachineManager.class).to(MachineManagerImpl.class).in(Singleton.class);
    }

