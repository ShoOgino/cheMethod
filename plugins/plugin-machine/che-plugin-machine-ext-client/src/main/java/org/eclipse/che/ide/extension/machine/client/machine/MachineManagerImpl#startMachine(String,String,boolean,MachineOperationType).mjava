    private void startMachine(final String recipeURL,
                              final String displayName,
                              final boolean isDev,
                              final MachineOperationType operationType) {

        LimitsDto limitsDto = dtoFactory.createDto(LimitsDto.class).withRam(1024);
        if (isDev) {
            limitsDto.withRam(3072);
        }
        MachineSourceDto sourceDto = dtoFactory.createDto(MachineSourceDto.class).withType("Recipe").withLocation(recipeURL);

        MachineConfigDto configDto = dtoFactory.createDto(MachineConfigDto.class)
                                               .withDev(isDev)
                                               .withName(displayName)
                                               .withSource(sourceDto)
                                               .withLimits(limitsDto)
                                               .withType("docker");

        Promise<MachineStateDto> machineStatePromise = workspaceServiceClient.createMachine(appContext.getWorkspace().getId(), configDto);

        machineStatePromise.then(new Operation<MachineStateDto>() {
            @Override
            public void apply(final MachineStateDto machineStateDto) throws OperationException {
                eventBus.fireEvent(new MachineStartingEvent(machineStateDto));

                subscribeToOutput(machineStateDto.getChannels().getOutput());

                RunningListener runningListener = null;

                if (isDev) {
                    runningListener = new RunningListener() {
                        @Override
                        public void onRunning() {
                            onMachineRunning(machineStateDto.getId());
                        }
                    };
                }

                machineStatusNotifier.trackMachine(machineStateDto, runningListener, operationType);
            }
        });
    }

