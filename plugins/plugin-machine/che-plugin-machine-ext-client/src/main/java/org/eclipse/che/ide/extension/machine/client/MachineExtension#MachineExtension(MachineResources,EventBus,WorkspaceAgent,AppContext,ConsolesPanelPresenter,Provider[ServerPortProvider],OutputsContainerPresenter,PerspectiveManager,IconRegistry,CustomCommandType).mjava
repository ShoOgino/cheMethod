    @Inject
    public MachineExtension(MachineResources machineResources,
                            final EventBus eventBus,
                            final WorkspaceAgent workspaceAgent,
                            final AppContext   appContext,
                            final ConsolesPanelPresenter consolesPanelPresenter,
                            final Provider<ServerPortProvider> machinePortProvider,
                            final OutputsContainerPresenter outputsContainerPresenter,
                            final PerspectiveManager perspectiveManager,
                            IconRegistry iconRegistry,
                            CustomCommandType arbitraryCommandType) {
        machineResources.getCss().ensureInjected();

        eventBus.addHandler(WsAgentStateEvent.TYPE, new WsAgentStateHandler() {
            @Override
            public void onWsAgentStarted(WsAgentStateEvent event) {
                machinePortProvider.get();

                /**
                 * There is a bug in perspective management and it's unable to add Consoles part in
                 * OperationsPerspective and ProjectPerspective directly. Following code resolves the issue.
                 */

                /* Add Outputs and Consoles to Operation perspective */
                perspectiveManager.setPerspectiveId(OperationsPerspective.OPERATIONS_PERSPECTIVE_ID);
                workspaceAgent.openPart(outputsContainerPresenter, PartStackType.INFORMATION);
                workspaceAgent.openPart(consolesPanelPresenter, PartStackType.INFORMATION);

                /* Add Outputs and Consoles to Project perspective */
                perspectiveManager.setPerspectiveId(PROJECT_PERSPECTIVE_ID);
                workspaceAgent.openPart(outputsContainerPresenter, PartStackType.INFORMATION);
                workspaceAgent.openPart(consolesPanelPresenter, PartStackType.INFORMATION);

                if (appContext.getFactory() == null) {
                    consolesPanelPresenter.newTerminal();
                }
            }

            @Override
            public void onWsAgentStopped(WsAgentStateEvent event) {
            }
        });

        iconRegistry.registerIcon(new Icon(arbitraryCommandType.getId() + ".commands.category.icon", machineResources.customCommandType()));
    }

