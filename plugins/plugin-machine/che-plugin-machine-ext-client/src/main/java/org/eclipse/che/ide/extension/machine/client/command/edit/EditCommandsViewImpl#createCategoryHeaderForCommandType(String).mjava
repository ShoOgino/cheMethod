    private SpanElement createCategoryHeaderForCommandType(final String commandTypeId) {
        final SpanElement categoryHeaderElement = Document.get().createSpanElement();
        categoryHeaderElement.setClassName(commandResources.getCss().categoryHeader());

        final SpanElement iconElement = Document.get().createSpanElement();
        categoryHeaderElement.appendChild(iconElement);

        final SpanElement nameElement = Document.get().createSpanElement();
        categoryHeaderElement.appendChild(nameElement);
        final CommandType currentCommandType = getTypeById(commandTypeId);
        nameElement.setInnerText(currentCommandType != null ? currentCommandType.getDisplayName() : commandTypeId);

        final SpanElement buttonElement = Document.get().createSpanElement();
        buttonElement.appendChild(commandResources.addCommandButton().getSvg().getElement());
        categoryHeaderElement.appendChild(buttonElement);

        Event.sinkEvents(buttonElement, Event.ONCLICK);
        Event.setEventListener(buttonElement, new EventListener() {
            @Override
            public void onBrowserEvent(Event event) {
                if (Event.ONCLICK == event.getTypeInt()) {
                    event.stopPropagation();
                    namePanel.setVisible(true);
                    previewUrlPanel.setVisible(true);
                    selectedType = commandTypeId;
                    delegate.onAddClicked();
                    resetFilter();
                }
            }
        });

        final Icon icon = iconRegistry.getIconIfExist(commandTypeId + ".commands.category.icon");
        if (icon != null) {
            final SVGImage iconSVG = icon.getSVGImage();
            if (iconSVG != null) {
                iconElement.appendChild(iconSVG.getElement());
                return categoryHeaderElement;
            }
        }

        return categoryHeaderElement;
    }

