    /** {@inheritDoc} */
    @Override
    public void onMachineSelected(final MachineDto selectedMachine) {
        this.selectedMachine = selectedMachine;

        if (cachedMachines.containsKey(selectedMachine.getId())) {
            appliance.showAppliance(cachedMachines.get(selectedMachine.getId()));

            return;
        }

        service.getMachine(selectedMachine.getWorkspaceId(),
                           selectedMachine.getId()).then(new Operation<MachineDto>() {
            @Override
            public void apply(MachineDto machineDto) throws OperationException {
                if (machineDto.getStatus() == MachineStatus.RUNNING) {
                    isMachineRunning = true;

                    Machine machine = entityFactory.createMachine(machineDto);

                    cachedMachines.put(selectedMachine.getId(), machine);

                    appliance.showAppliance(machine);
                } else {
                    isMachineRunning = false;
                    // we show the loader for dev machine so this message isn't necessary for dev machine
                    if (!selectedMachine.getConfig().isDev()) {
                        appliance.showStub(locale.unavailableMachineStarting(selectedMachine.getConfig().getName()));
                    }
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                isMachineRunning = false;

                appliance.showStub(locale.machineNotFound(selectedMachine.getId()));
            }
        });
    }

