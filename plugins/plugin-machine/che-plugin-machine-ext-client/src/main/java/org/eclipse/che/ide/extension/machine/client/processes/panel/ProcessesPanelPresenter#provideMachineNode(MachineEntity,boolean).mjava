    /**
     * Provides machine node:
     * <li>creates new machine node when this one not exist or {@code replace} is {@code true}</li>
     * <li>returns old machine node when this one exist and {@code replace} is {@code false}</li>
     *
     * @param machine
     *         machine to creating node
     * @param replace
     *         existed node will be replaced when {@code replace} is {@code true}
     * @return machine node
     */
    private ProcessTreeNode provideMachineNode(@NotNull MachineEntity machine, boolean replace) {
        final String machineId = machine.getId();
        if (!replace && machineNodes.containsKey(machineId)) {
            return machineNodes.get(machineId);
        }

        final ProcessTreeNode existedMachineNode = machineNodes.remove(machineId);
        final ProcessTreeNode newMachineNode = new ProcessTreeNode(MACHINE_NODE, rootNode, machine, null, new ArrayList<ProcessTreeNode>());
        newMachineNode.setRunning(true);
        machineNodes.put(machineId, newMachineNode);

        if (rootNodes.contains(existedMachineNode)) {
            rootNodes.remove(existedMachineNode);
        }

        rootNodes.add(newMachineNode);

        view.setProcessesData(rootNode);

        if (existedMachineNode == null) {
            final OutputConsole outputConsole = commandConsoleFactory.create(machine.getConfig().getName());
            addOutputConsole(machineId, newMachineNode, outputConsole, true);
        }
        return newMachineNode;
    }

