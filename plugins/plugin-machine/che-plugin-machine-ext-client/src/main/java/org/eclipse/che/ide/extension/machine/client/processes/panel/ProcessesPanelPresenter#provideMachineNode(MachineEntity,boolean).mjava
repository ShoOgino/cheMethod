    /**
     * Provides machine node:
     * <li>creates new machine node when this one not exist or {@code replace} is {@code true}</li>
     * <li>returns old machine node when this one exist and {@code replace} is {@code false}</li>
     *
     * @param machine
     *         machine to creating node
     * @param replace
     *         existed node will be replaced when {@code replace} is {@code true}
     * @return machine node
     */
    private ProcessTreeNode provideMachineNode(@NotNull MachineEntity machine, boolean replace) {
        final String machineId = machine.getId();
        final ProcessTreeNode existedMachineNode = findTreeNodeById(machineId);
        if (!replace && existedMachineNode != null) {
            return existedMachineNode;
        }

        Collection<ProcessTreeNode> removedNodeChildrens = null;

        // remove existed node
        for (ProcessTreeNode node : rootNode.getChildren()) {
            if (machine.getConfig().getName().equals(node.getName())) {
                rootNode.getChildren().remove(node);
                removedNodeChildrens = node.getChildren();
                break;
            }
        }

        //we need to keep old machine node children
        ArrayList<ProcessTreeNode> children = new ArrayList<>();

        // create new node
        final ProcessTreeNode newMachineNode = new ProcessTreeNode(MACHINE_NODE, rootNode, machine, null, children);
        newMachineNode.setRunning(true);
        newMachineNode.setHasTerminalAgent(hasAgent(machine.getDisplayName(), TERMINAL_AGENT) || hasTerminal(machineId));
        newMachineNode.setHasSSHAgent(hasAgent(machine.getDisplayName(), SSH_AGENT));
        if (removedNodeChildrens != null) {
            for (ProcessTreeNode nodeChildren : removedNodeChildrens) {
                nodeChildren.setParent(newMachineNode);
                children.add(nodeChildren);
            }
        }

        machineNodes.put(machineId, newMachineNode);

        // add to children
        rootNode.getChildren().add(newMachineNode);

        // update the view
        view.setProcessesData(rootNode);

        // add output for the machine if it is not exist
        if (!consoles.containsKey(machine.getConfig().getName())) {
            OutputConsole outputConsole = commandConsoleFactory.create(machine.getConfig().getName());
            addOutputConsole(machine.getConfig().getName(), newMachineNode, outputConsole, true);
        }

        return newMachineNode;
    }

