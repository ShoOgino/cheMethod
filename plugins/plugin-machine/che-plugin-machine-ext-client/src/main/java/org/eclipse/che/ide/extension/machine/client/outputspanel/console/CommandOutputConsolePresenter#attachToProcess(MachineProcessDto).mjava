    @Override
    public void attachToProcess(final MachineProcessDto process) {
        this.pid = process.getPid();

        view.printCommandLine(process.getCommandLine());

        final Unmarshallable<MachineProcessEvent> unmarshaller = dtoUnmarshallerFactory.newWSUnmarshaller(MachineProcessEvent.class);
        final String processStateChannel = "machine:process:" + machineId;
        final MessageHandler handler = new SubscriptionHandler<MachineProcessEvent>(unmarshaller) {
            @Override
            protected void onMessageReceived(MachineProcessEvent result) {
                final int processId = result.getProcessId();

                if (pid != processId) {
                    return;
                }

                switch (result.getEventType()) {
                    case STOPPED:
                        finished = true;
                        eventBus.fireEvent(new ProcessFinishedEvent(null));
                        break;

                    case ERROR:
                        finished = true;

                        eventBus.fireEvent(new ProcessFinishedEvent(null));

                        wsUnsubscribe(processStateChannel, this);
                        wsUnsubscribe(outputChannel, outputHandler);

                        String error = result.getError();
                        if (error == null) {
                            return;
                        }
                        view.print(error, false);
                        break;
                }
            }

            @Override
            protected void onErrorReceived(Throwable exception) {
                finished = true;
                wsUnsubscribe(processStateChannel, this);
                wsUnsubscribe(outputChannel, outputHandler);
            }
        };

        wsSubscribe(processStateChannel, handler);
    }

