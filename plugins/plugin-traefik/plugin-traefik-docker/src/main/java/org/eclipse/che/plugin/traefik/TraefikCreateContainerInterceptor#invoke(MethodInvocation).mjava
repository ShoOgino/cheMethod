    /**
     * Grab labels of the config and from image to get all exposed ports and the labels defined if any
     *
     * @param methodInvocation
     *         intercepting data of createContainer method on {@link DockerConnector}
     * @return the result of the intercepted method
     * @throws Throwable
     *         if there is an exception
     */
    @Override
    public Object invoke(MethodInvocation methodInvocation) throws Throwable {
        ServerEvaluationStrategy serverEvaluationStrategy = serverEvaluationStrategyProvider.get();
        // Abort if custom server evaluation strategy is not enabled.
        if (!(CustomServerEvaluationStrategy.class.isInstance(serverEvaluationStrategy))) {
            return methodInvocation.proceed();
        }
        final CustomServerEvaluationStrategy customServerEvaluationStrategy = (CustomServerEvaluationStrategy)serverEvaluationStrategy;

        // Get the connector
        DockerConnector dockerConnector = (DockerConnector)methodInvocation.getThis();

        // only one parameter which is CreateContainerParams
        CreateContainerParams createContainerParams = (CreateContainerParams)methodInvocation.getArguments()[0];

        // Grab container configuration
        ContainerConfig containerConfig = createContainerParams.getContainerConfig();
        String image = containerConfig.getImage();

        // first, get labels defined in the container configuration
        Map<String, String> containerLabels = containerConfig.getLabels();

        // Also, get labels from the image itself
        final ImageInfo imageInfo = dockerConnector.inspectImage(InspectImageParams.create(image));
        Map<String, String> imageLabels = imageInfo.getConfig().getLabels();

        // Now merge all labels
        final Map<String, String> allLabels = new HashMap<>(containerLabels);
        allLabels.putAll(imageLabels);

        // Get all ports exposed by the container and by the image
        // it is under the form "22/tcp"
        final Set<String> allExposedPorts = ImmutableSet.<String>builder().addAll(containerConfig.getExposedPorts().keySet())
                                                                          .addAll(imageInfo.getConfig().getExposedPorts().keySet())
                                                                          .build();
        final String[] allEnv = Stream.concat(Arrays.stream(containerConfig.getEnv()), Arrays.stream(imageInfo.getConfig().getEnv()))
                                      .toArray(String[]::new);


        CustomServerEvaluationStrategy.RenderingEvaluation renderingEvaluation =
                customServerEvaluationStrategy.getOfflineRenderingEvaluation(allLabels, allExposedPorts, allEnv);

        // portValue is under format <port-number>/<tcp>
        allExposedPorts.forEach((portValue) -> {

            final String serviceName = renderingEvaluation.render("service-<serverName>", portValue);
            final String port = portValue.split("/")[0];

            String hostnameAndPort = renderingEvaluation.render(this.template, portValue);

            // extract only host from host:port
            String[] elements = hostnameAndPort.split(":");
            String hostName = elements[0];
            final String host = format("Host:%s", hostName);
            containerLabels.put(format("traefik.%s.port", serviceName), port);
            containerLabels.put(format("traefik.%s.frontend.entryPoints", serviceName), "http");
            containerLabels.put(format("traefik.%s.frontend.rule", serviceName), host);
            containerLabels.put("traefik.frontend.rule", createContainerParams.getContainerName());
        });

        return methodInvocation.proceed();
    }

