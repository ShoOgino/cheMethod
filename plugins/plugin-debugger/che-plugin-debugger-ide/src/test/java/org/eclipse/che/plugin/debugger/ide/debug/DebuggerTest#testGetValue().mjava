  @Test
  public void testGetValue() throws Exception {
    final VariableDto variableDto = mock(VariableDto.class);
    final Variable variable = mock(Variable.class);
    final Promise<SimpleValueDto> promiseValue = mock(Promise.class);

    SimpleValueDto simpleValueDto = mock(SimpleValueDto.class);
    doReturn(simpleValueDto).when(dtoFactory).createDto(SimpleValueDto.class);
    doReturn(simpleValueDto).when(simpleValueDto).withString(anyString());

    SimpleValue simpleValue = mock(SimpleValue.class);
    doReturn(simpleValue).when(variable).getValue();

    doReturn(simpleValue).when(variable).getValue();
    doReturn(variableDto).when(dtoFactory).createDto(VariableDto.class);
    doReturn(mock(VariablePathDto.class)).when(dtoFactory).createDto(VariablePathDto.class);
    doReturn(mock(VariablePathDto.class)).when(variable).getVariablePath();

    doReturn(promiseValue).when(service).getValue(SESSION_ID, variableDto, THREAD_ID, FRAME_INDEX);
    doReturn(promiseValue).when(promiseValue).then((Function<SimpleValueDto, Object>) any());
    doReturn(promiseValue).when(promiseValue).catchError((Operation<PromiseError>) any());

    Promise<? extends SimpleValue> result = debugger.getValue(variable, THREAD_ID, FRAME_INDEX);
    assertEquals(promiseValue, result);
  }

