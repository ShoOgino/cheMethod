  @Test
  public void testChangeVariableValue() throws Exception {
    final List<String> path = mock(List.class);
    final String newValue = "new-value";

    VariablePath variablePath = mock(VariablePathDto.class);
    doReturn(path).when(variablePath).getPath();

    VariableDto variableDto = mock(VariableDto.class);
    doReturn(variableDto).when(dtoFactory).createDto(VariableDto.class);

    SimpleValueDto simpleValueDto = mock(SimpleValueDto.class);
    doReturn(simpleValueDto).when(dtoFactory).createDto(SimpleValueDto.class);
    doReturn(simpleValueDto).when(simpleValueDto).withString(anyString());
    Variable variable = mock(Variable.class);
    doReturn(mock(VariablePathDto.class)).when(dtoFactory).createDto(VariablePathDto.class);
    doReturn(variablePath).when(variable).getVariablePath();
    SimpleValue simpleValue = mock(SimpleValue.class);
    doReturn(newValue).when(simpleValue).getString();
    doReturn(simpleValue).when(variable).getValue();

    doReturn(promiseVoid).when(service).setValue(SESSION_ID, variableDto, THREAD_ID, FRAME_INDEX);
    doReturn(promiseVoid).when(promiseVoid).then((Operation<Void>) any());

    debugger.setValue(variable, THREAD_ID, FRAME_INDEX);

    verify(promiseVoid).then(operationVoidCaptor.capture());
    operationVoidCaptor.getValue().apply(null);
    verify(observer).onValueChanged(variable, THREAD_ID, FRAME_INDEX);

    verify(promiseVoid).catchError(operationPromiseErrorCaptor.capture());
    operationPromiseErrorCaptor.getValue().apply(promiseError);
    verify(promiseError).getMessage();
  }

