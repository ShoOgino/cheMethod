    @Test
    public void testAttachDebugger() throws Exception {
        debugger.setDebuggerInfo(null);

        final String debuggerInfoJson = "debuggerInfo";
        doReturn(debuggerInfoJson).when(dtoFactory).toJson(debuggerInfo);

        Map<String, String> connectionProperties = mock(Map.class);
        Promise<DebuggerInfo> promiseDebuggerInfo = mock(Promise.class);

        doReturn(promiseDebuggerInfo).when(service).connect(connectionProperties);
        doReturn(promiseVoid).when(promiseDebuggerInfo).then((Function<DebuggerInfo, Void>)any());
        doReturn(promiseVoid).when(promiseVoid).catchError((Operation<PromiseError>)any());

        Promise<Void> result = debugger.attachDebugger(connectionProperties);
        assertEquals(promiseVoid, result);

        verify(promiseDebuggerInfo).then(argumentCaptorFunctionJavaDebuggerInfoVoid.capture());
        argumentCaptorFunctionJavaDebuggerInfoVoid.getValue().apply(debuggerInfo);

        verify(promiseVoid).catchError(operationPromiseErrorCaptor.capture());
        try {
            operationPromiseErrorCaptor.getValue().apply(promiseError);
            fail("Operation Exception expected");
        } catch (OperationException e) {
            verify(promiseError).getMessage();
            verify(promiseError).getCause();
        }

        verify(observer).onDebuggerAttached(debuggerDescriptor, promiseVoid);

        assertTrue(debugger.isConnected());
        verify(localStorage).setItem(eq(AbstractDebugger.LOCAL_STORAGE_DEBUGGER_KEY), eq(debuggerInfoJson));
        verify(messageBus).subscribe(eq("channel" + DEBUGGER_ID), any(SubscriptionHandler.class));
    }

