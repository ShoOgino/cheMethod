  @Before
  public void setUp() {
    MockitoAnnotations.initMocks(this);

    super.setUp();

    debuggerDescriptor = new DebuggerDescriptor(NAME + " " + VERSION, HOST + ":" + PORT);

    doReturn(STOPPED).when(workspace).getStatus();
    doReturn(workspace).when(appContext).getWorkspace();

    doReturn(locationDto).when(dtoFactory).createDto(LocationDto.class);
    doReturn(breakpointDto).when(dtoFactory).createDto(BreakpointDto.class);
    doReturn(locationDto).when(breakpointDto).getLocation();

    doReturn(localStorage).when(localStorageProvider).get();
    doReturn(DEBUG_INFO)
        .when(localStorage)
        .getItem(AbstractDebugger.LOCAL_STORAGE_DEBUGGER_SESSION_KEY);
    doReturn(debugSessionDto)
        .when(dtoFactory)
        .createDtoFromJson(anyString(), eq(DebugSessionDto.class));

    doReturn(Path.valueOf(PATH)).when(file).getLocation();

    debugger =
        new TestDebugger(
            service,
            transmitter,
            configurator,
            dtoFactory,
            localStorageProvider,
            eventBus,
            activeFileHandler,
            debuggerManager,
            notificationManager,
            "id");
    doReturn(promiseInfo).when(service).getSessionInfo(SESSION_ID);
    doReturn(promiseInfo).when(promiseInfo).then(any(Operation.class));

    verify(eventBus)
        .addHandler(eq(WorkspaceRunningEvent.TYPE), workspaceRunningHandlerCaptor.capture());
    workspaceRunningHandlerCaptor.getValue().onWorkspaceRunning(new WorkspaceRunningEvent());

    debugger.addObserver(observer);

    FileType fileType = mock(FileType.class);
    doReturn("java").when(fileType).getExtension();
  }

