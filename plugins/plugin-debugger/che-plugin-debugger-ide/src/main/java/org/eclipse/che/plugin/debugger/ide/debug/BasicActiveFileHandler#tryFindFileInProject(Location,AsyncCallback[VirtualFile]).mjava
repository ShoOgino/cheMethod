    protected void tryFindFileInProject(final Location location,
                                        final AsyncCallback<VirtualFile> callback) {
        Resource resource = appContext.getResource();
        if (resource == null) {
            callback.onFailure(new IllegalStateException("Resource is undefined"));
            return;
        }

        Optional<Project> project = resource.getRelatedProject();
        if (!project.isPresent()) {
            callback.onFailure(new IllegalStateException("Project is undefined"));
            return;
        }

        project.get().getFile(location.getTarget()).then(new Operation<Optional<File>>() {
            @Override
            public void apply(Optional<File> file) throws OperationException {
                if (file.isPresent()) {
                    openFileAndScrollToLine(file.get(), location.getLineNumber(), callback);
                } else {
                    callback.onFailure(new IllegalArgumentException(location.getTarget() + " not found."));
                }
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                callback.onFailure(new IllegalArgumentException(location.getTarget() + " not found."));
            }
        });
    }

