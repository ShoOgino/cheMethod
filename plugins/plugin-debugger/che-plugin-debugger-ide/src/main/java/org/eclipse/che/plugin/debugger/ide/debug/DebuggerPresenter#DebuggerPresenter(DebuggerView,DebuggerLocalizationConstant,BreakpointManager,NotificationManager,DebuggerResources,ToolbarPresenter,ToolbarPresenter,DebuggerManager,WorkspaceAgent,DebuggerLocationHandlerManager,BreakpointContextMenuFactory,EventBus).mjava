  @Inject
  public DebuggerPresenter(
      final DebuggerView view,
      final DebuggerLocalizationConstant constant,
      final BreakpointManager breakpointManager,
      final NotificationManager notificationManager,
      final DebuggerResources debuggerResources,
      final @DebuggerToolbar ToolbarPresenter debuggerToolbar,
      final @DebuggerWatchToolBar ToolbarPresenter watchToolbar,
      final DebuggerManager debuggerManager,
      final WorkspaceAgent workspaceAgent,
      final DebuggerLocationHandlerManager resourceHandlerManager,
      final BreakpointContextMenuFactory breakpointContextMenuFactory,
      final EventBus eventBus) {
    this.view = view;
    this.debuggerResources = debuggerResources;
    this.debuggerToolbar = debuggerToolbar;
    this.watchToolbar = watchToolbar;
    this.debuggerManager = debuggerManager;
    this.workspaceAgent = workspaceAgent;
    this.resourceHandlerManager = resourceHandlerManager;
    this.view.setDelegate(this);
    this.view.setTitle(TITLE);
    this.constant = constant;
    this.breakpointManager = breakpointManager;
    this.breakpointContextMenuFactory = breakpointContextMenuFactory;

    this.notificationManager = notificationManager;
    this.addRule(ProjectPerspective.PROJECT_PERSPECTIVE_ID);

    this.debuggerManager.addObserver(this);
    this.breakpointManager.addObserver(this);

    this.watchExpressions = new ArrayList<>();
    this.threadDump = new HashMap<>();

    eventBus.addHandler(WorkspaceStoppedEvent.TYPE, this);

    clearView();
    refreshBreakpoints();
    addDebuggerPanel();
  }

