  @Inject
  protected EditDebugConfigurationsViewImpl(
      org.eclipse.che.ide.Resources resources,
      final EditConfigurationsResources editConfigurationsResources,
      DebuggerLocalizationConstant locale,
      CoreLocalizationConstant coreLocale,
      IconRegistry iconRegistry) {
    this.editConfigurationsResources = editConfigurationsResources;
    this.locale = locale;
    this.coreLocale = coreLocale;
    this.iconRegistry = iconRegistry;

    categories = new HashMap<>();

    editConfigurationsResources.getCss().ensureInjected();
    Widget widget = UI_BINDER.createAndBindUi(this);
    widget.getElement().setId("editDebugConfigurationsView");
    widget.getElement().getStyle().setPadding(0, Style.Unit.PX);
    setWidget(widget);
    setTitle(locale.editConfigurationsViewTitle());

    hintLabel = new Label(locale.editConfigurationsViewHint());
    hintLabel.addStyleName(editConfigurationsResources.getCss().hintLabel());

    filterInputField
        .getElement()
        .setAttribute("placeholder", locale.editConfigurationsViewPlaceholder());
    filterInputField
        .getElement()
        .addClassName(editConfigurationsResources.getCss().filterPlaceholder());

    list = new CategoriesList(resources);
    list.addDomHandler(
        event -> {
          switch (event.getNativeKeyCode()) {
            case KeyboardEvent.KeyCode.INSERT:
              delegate.onAddClicked();
              resetFilter();
              break;
            case KeyboardEvent.KeyCode.DELETE:
              delegate.onRemoveClicked(selectedConfiguration);
              break;
          }
        },
        KeyDownEvent.getType());
    categoriesPanel.add(list);

    categoryEventDelegate =
        (listItemBase, itemData) -> {
          selectedType = itemData.getType();
          setSelectedConfiguration(itemData);
        };

    categoryRenderer =
        new CategoryRenderer<DebugConfiguration>() {
          @Override
          public void renderElement(Element element, DebugConfiguration data) {
            UIObject.ensureDebugId(element, "debug-configuration-type-" + data.getType().getId());
            element.addClassName(editConfigurationsResources.getCss().categorySubElementHeader());
            element.setInnerText(data.getName().trim().isEmpty() ? "<none>" : data.getName());
            element.appendChild(renderSubElementButtons());
          }

          @Override
          public SpanElement renderCategory(Category<DebugConfiguration> category) {
            return renderCategoryHeader(category.getTitle());
          }
        };

    namePanel.setVisible(false);
    contentPanel.clear();

    createButtons();
    resetFilter();
  }

