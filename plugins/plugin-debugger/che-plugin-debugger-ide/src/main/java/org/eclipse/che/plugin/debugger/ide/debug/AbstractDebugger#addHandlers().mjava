    private void addHandlers() {
        eventBus.addHandler(WsAgentStateEvent.TYPE, new WsAgentStateHandler() {
            @Override
            public void onWsAgentStarted(WsAgentStateEvent event) {
                transmitter.transmitNoneToNone(WS_AGENT_ENDPOINT, EVENT_DEBUGGER_SUBSCRIBE);

                if (!isConnected()) {
                    return;
                }
                Promise<DebugSessionDto> promise = service.getSessionInfo(debugSessionDto.getId());
                promise.then(debugSessionDto -> {
                    debuggerManager.setActiveDebugger(AbstractDebugger.this);
                    setDebugSession(debugSessionDto);

                    DebuggerInfo debuggerInfo = debugSessionDto.getDebuggerInfo();
                    String info = debuggerInfo.getName() + " " + debuggerInfo.getVersion();
                    String address = debuggerInfo.getHost() + ":" + debuggerInfo.getPort();
                    DebuggerDescriptor debuggerDescriptor = new DebuggerDescriptor(info, address);
                    JsPromise<Void> promise1 = Promises.resolve(null);

                    for (DebuggerObserver observer : observers) {
                        observer.onDebuggerAttached(debuggerDescriptor, promise1);
                    }

                    startCheckingEvents();
                }).catchError(error -> {
                    if (!isConnected()) {
                        invalidateDebugSession();
                    }
                });
            }

            @Override
            public void onWsAgentStopped(WsAgentStateEvent event) {
            }
        });
    }

