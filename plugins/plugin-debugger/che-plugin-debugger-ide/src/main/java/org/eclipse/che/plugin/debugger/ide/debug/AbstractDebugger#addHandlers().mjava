  private void addHandlers() {
    eventBus.addHandler(
        WsAgentStateEvent.TYPE,
        new WsAgentStateHandler() {
          @Override
          public void onWsAgentStarted(WsAgentStateEvent event) {
            subscribeToDebuggerEvents();

            if (!isConnected()) {
              return;
            }
            Promise<DebugSessionDto> promise = service.getSessionInfo(debugSessionDto.getId());
            promise
                .then(
                    debugSessionDto -> {
                      debuggerManager.setActiveDebugger(AbstractDebugger.this);
                      setDebugSession(debugSessionDto);

                      DebuggerInfo debuggerInfo = debugSessionDto.getDebuggerInfo();
                      String info = debuggerInfo.getName() + " " + debuggerInfo.getVersion();
                      String address = debuggerInfo.getHost() + ":" + debuggerInfo.getPort();
                      DebuggerDescriptor debuggerDescriptor = new DebuggerDescriptor(info, address);

                      for (DebuggerObserver observer : observers) {
                        observer.onDebuggerAttached(debuggerDescriptor, Promises.resolve(null));
                      }

                      for (BreakpointDto breakpoint : debugSessionDto.getBreakpoints()) {
                        onBreakpointActivated(breakpoint.getLocation());
                      }

                      if (currentLocation != null) {
                        debuggerLocationHandlerManager
                            .getOrDefault(currentLocation)
                            .find(
                                currentLocation,
                                new AsyncCallback<VirtualFile>() {
                                  @Override
                                  public void onFailure(Throwable caught) {
                                    for (DebuggerObserver observer : observers) {
                                      observer.onBreakpointStopped(
                                          currentLocation.getTarget(), currentLocation);
                                    }
                                  }

                                  @Override
                                  public void onSuccess(VirtualFile result) {
                                    for (DebuggerObserver observer : observers) {
                                      observer.onBreakpointStopped(
                                          result.getLocation().toString(), currentLocation);
                                    }
                                  }
                                });
                      }

                      startCheckingEvents();
                    })
                .catchError(
                    error -> {
                      disconnect();
                    });
          }

          @Override
          public void onWsAgentStopped(WsAgentStateEvent event) {}
        });
  }

