    @Inject
    public DebuggerPresenter(final DebuggerView view,
                             final DebuggerLocalizationConstant constant,
                             final BreakpointManager breakpointManager,
                             final NotificationManager notificationManager,
                             final DebuggerResources debuggerResources,
                             final @DebuggerToolbar ToolbarPresenter debuggerToolbar,
                             final DtoFactory dtoFactory, DebuggerManager debuggerManager,
                             final WorkspaceAgent workspaceAgent) {
        this.view = view;
        this.debuggerResources = debuggerResources;
        this.debuggerToolbar = debuggerToolbar;
        this.dtoFactory = dtoFactory;
        this.debuggerManager = debuggerManager;
        this.workspaceAgent = workspaceAgent;
        this.view.setDelegate(this);
        this.view.setTitle(TITLE);
        this.constant = constant;
        this.breakpointManager = breakpointManager;
        this.variables = new ArrayList<>();
        this.notificationManager = notificationManager;
        this.addRule(ProjectPerspective.PROJECT_PERSPECTIVE_ID);

        this.debuggerManager.addObserver(this);
        this.breakpointManager.addObserver(this);

        if (!breakpointManager.getBreakpointList().isEmpty()) {
            updateBreakpoints();
        }
    }

