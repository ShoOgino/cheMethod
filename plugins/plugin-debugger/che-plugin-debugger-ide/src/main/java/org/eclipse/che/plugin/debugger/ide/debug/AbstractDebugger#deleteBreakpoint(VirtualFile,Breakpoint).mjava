  @Override
  public void deleteBreakpoint(final VirtualFile file, final Breakpoint breakpoint) {
    if (!isConnected()) {
      return;
    }
    Location location = breakpoint.getLocation();

    LocationDto locationDto = dtoFactory.createDto(LocationDto.class);
    locationDto.setLineNumber(location.getLineNumber());
    locationDto.setTarget(location.getTarget());
    locationDto.setResourceProjectPath(location.getResourceProjectPath());

    Promise<Void> promise = service.deleteBreakpoint(debugSessionDto.getId(), locationDto);
    promise
        .then(
            it -> {
              for (DebuggerObserver observer : observers) {
                observer.onBreakpointDeleted(breakpoint);
              }
            })
        .catchError(
            error -> {
              Log.error(AbstractDebugger.class, error.getMessage());
            });
  }

