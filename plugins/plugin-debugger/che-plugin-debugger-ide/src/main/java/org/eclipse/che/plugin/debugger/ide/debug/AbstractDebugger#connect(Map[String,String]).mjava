    @Override
    public Promise<Void> connect(Map<String, String> connectionProperties) {
        if (isConnected()) {
            return Promises.reject(JsPromiseError.create("Debugger already connected"));
        }

        Promise<DebugSessionDto> connect = service.connect(debuggerType, connectionProperties);
        final DebuggerDescriptor debuggerDescriptor = toDescriptor(connectionProperties);

        Promise<Void> promise = connect.then((Function<DebugSessionDto, Void>)debugSession -> {
            DebuggerInfo debuggerInfo = debugSession.getDebuggerInfo();
            debuggerDescriptor.setInfo(debuggerInfo.getName() + " " + debuggerInfo.getVersion());

            setDebugSession(debugSession);
            preserveDebuggerState();
            startCheckingEvents();
            startDebugger(debugSession);

            return null;
        }).catchError((Operation<PromiseError>)error -> {
            Log.error(AbstractDebugger.class, error.getMessage());
            throw new OperationException(error.getCause());
        });

        for (DebuggerObserver observer : observers) {
            observer.onDebuggerAttached(debuggerDescriptor, promise);
        }

        return promise;
    }

