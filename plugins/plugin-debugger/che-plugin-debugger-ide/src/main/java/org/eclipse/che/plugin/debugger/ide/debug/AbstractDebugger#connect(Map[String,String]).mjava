  @Override
  public Promise<Void> connect(Map<String, String> connectionProperties) {
    if (isConnected()) {
      return Promises.reject(JsPromiseError.create("Debugger already connected"));
    }

    Promise<DebugSessionDto> connect = service.connect(debuggerType, connectionProperties);
    final DebuggerDescriptor debuggerDescriptor = toDescriptor(connectionProperties);

    final StatusNotification notification =
        notificationManager.notify(
            constant.debuggerConnectingTitle(debuggerDescriptor.getAddress()),
            PROGRESS,
            FLOAT_MODE);

    return connect
        .then(
            (Function<DebugSessionDto, Void>)
                debugSession -> {
                  DebuggerInfo debuggerInfo = debugSession.getDebuggerInfo();
                  debuggerDescriptor.setInfo(
                      debuggerInfo.getName() + " " + debuggerInfo.getVersion());

                  setDebugSession(debugSession);
                  preserveDebuggerState();

                  subscribeToDebuggerEvents();
                  startCheckingEvents();

                  for (DebuggerObserver observer : observers) {
                    observer.onDebuggerAttached(debuggerDescriptor);
                  }

                  startDebugger(debugSession);
                  notification.setTitle(constant.debuggerConnectedTitle());
                  notification.setContent(
                      constant.debuggerConnectedDescription(debuggerDescriptor.getAddress()));
                  notification.setStatus(SUCCESS);
                  return null;
                })
        .catchError(
            error -> {
              notification.setTitle(
                  constant.failedToConnectToRemoteDebuggerDescription(
                      debuggerDescriptor.getAddress(), error.getMessage()));
              notification.setStatus(FAIL);
              notification.setDisplayMode(FLOAT_MODE);
            });
  }

