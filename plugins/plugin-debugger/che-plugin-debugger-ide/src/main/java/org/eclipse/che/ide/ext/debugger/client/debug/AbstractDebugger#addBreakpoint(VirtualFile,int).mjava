    @Override
    public void addBreakpoint(final VirtualFile file, final int lineNumber) {
        if (isConnected()) {
            Location location = dtoFactory.createDto(Location.class);
            location.setLineNumber(lineNumber + 1);

            String mediaType = fileTypeRegistry.getFileTypeByFile(file).getMimeTypes().get(0);
            final FqnResolver resolver = fqnResolverFactory.getResolver(mediaType);
            if (resolver != null) {
                location.setClassName(resolver.resolveFqn(file));
            } else {
                return;
            }

            org.eclipse.che.ide.ext.debugger.shared.Breakpoint breakpoint =
                    dtoFactory.createDto(org.eclipse.che.ide.ext.debugger.shared.Breakpoint.class);
            breakpoint.setLocation(location);
            breakpoint.setEnabled(true);

            Promise<Void> promise = service.addBreakpoint(debuggerInfo.getId(), breakpoint);
            promise.then(new Operation<Void>() {
                @Override
                public void apply(Void arg) throws OperationException {
                    Breakpoint breakpoint = new Breakpoint(Breakpoint.Type.BREAKPOINT, lineNumber, file.getPath(), file, true);
                    for (DebuggerObserver observer : observers) {
                        observer.onBreakpointAdded(breakpoint);
                    }
                }
            }).catchError(new Operation<PromiseError>() {
                @Override
                public void apply(PromiseError arg) throws OperationException {
                    Log.error(AbstractDebugger.class, arg.getMessage());
                }
            });
        } else {
            Breakpoint breakpoint = new Breakpoint(Breakpoint.Type.BREAKPOINT, lineNumber, file.getPath(), file, false);
            for (DebuggerObserver observer : observers) {
                observer.onBreakpointAdded(breakpoint);
            }
        }
    }

