  @Inject
  protected DebuggerViewImpl(
      PartStackUIResources partStackUIResources,
      DebuggerResources resources,
      DebuggerLocalizationConstant locale,
      Resources coreRes,
      VariableTreeNodeRenderer.Resources rendererResources,
      DebuggerViewImplUiBinder uiBinder) {
    super(partStackUIResources);

    this.locale = locale;
    this.res = resources;
    this.coreRes = coreRes;

    setContentWidget(uiBinder.createAndBindUi(this));

    TableElement breakPointsElement = Elements.createTableElement();
    breakPointsElement.setAttribute("style", "width: 100%");
    SimpleList.ListEventDelegate<Breakpoint> breakpointListEventDelegate =
        new SimpleList.ListEventDelegate<Breakpoint>() {
          public void onListItemClicked(Element itemElement, Breakpoint itemData) {
            breakpoints.getSelectionModel().setSelectedItem(itemData);
          }

          public void onListItemDoubleClicked(Element listItemBase, Breakpoint itemData) {
            // TODO: implement 'go to breakpoint source' feature
          }
        };

    SimpleList.ListItemRenderer<Breakpoint> breakpointListItemRenderer =
        new SimpleList.ListItemRenderer<Breakpoint>() {
          @Override
          public void render(Element itemElement, Breakpoint itemData) {
            TableCellElement label = Elements.createTDElement();

            SafeHtmlBuilder sb = new SafeHtmlBuilder();
            // Add icon
            sb.appendHtmlConstant("<table><tr><td>");
            SVGResource icon = res.breakpoint();
            if (icon != null) {
              sb.appendHtmlConstant("<img src=\"" + icon.getSafeUri().asString() + "\">");
            }
            sb.appendHtmlConstant("</td>");

            // Add title
            sb.appendHtmlConstant("<td>");

            String path = itemData.getPath();
            sb.appendEscaped(
                path.substring(path.lastIndexOf("/") + 1)
                    + " - [line: "
                    + String.valueOf(itemData.getLineNumber() + 1)
                    + "]");
            sb.appendHtmlConstant("</td></tr></table>");

            label.setInnerHTML(sb.toSafeHtml().asString());

            itemElement.appendChild(label);
          }

          @Override
          public Element createElement() {
            return Elements.createTRElement();
          }
        };

    breakpoints =
        SimpleList.create(
            (SimpleList.View) breakPointsElement,
            coreRes.defaultSimpleListCss(),
            breakpointListItemRenderer,
            breakpointListEventDelegate);
    this.breakpointsPanel.add(breakpoints);
    this.variables =
        Tree.create(
            rendererResources,
            new VariableNodeDataAdapter(),
            new VariableTreeNodeRenderer(rendererResources));
    this.variables.setTreeEventHandler(
        new Tree.Listener<MutableVariable>() {
          @Override
          public void onNodeAction(@NotNull TreeNodeElement<MutableVariable> node) {}

          @Override
          public void onNodeClosed(@NotNull TreeNodeElement<MutableVariable> node) {
            selectedVariable = null;
          }

          @Override
          public void onNodeContextMenu(
              int mouseX, int mouseY, @NotNull TreeNodeElement<MutableVariable> node) {}

          @Override
          public void onNodeDragStart(
              @NotNull TreeNodeElement<MutableVariable> node, @NotNull MouseEvent event) {}

          @Override
          public void onNodeDragDrop(
              @NotNull TreeNodeElement<MutableVariable> node, @NotNull MouseEvent event) {}

          @Override
          public void onNodeExpanded(@NotNull final TreeNodeElement<MutableVariable> node) {
            selectedVariable = node;
            delegate.onSelectedVariableElement(selectedVariable.getData());
            delegate.onExpandVariablesTree();
          }

          @Override
          public void onNodeSelected(
              @NotNull TreeNodeElement<MutableVariable> node, @NotNull SignalEvent event) {
            selectedVariable = node;
            delegate.onSelectedVariableElement(selectedVariable.getData());
          }

          @Override
          public void onRootContextMenu(int mouseX, int mouseY) {}

          @Override
          public void onRootDragDrop(@NotNull MouseEvent event) {}

          @Override
          public void onKeyboard(@NotNull KeyboardEvent event) {}
        });

    this.variablesPanel.add(variables);
    minimizeButton.ensureDebugId("debugger-minimizeBut");
  }

