  @Inject
  public DebuggerExtension(
      DebuggerResources debuggerResources,
      DebuggerLocalizationConstant localizationConstants,
      ActionManager actionManager,
      DebugAction debugAction,
      DisconnectDebuggerAction disconnectDebuggerAction,
      StepIntoAction stepIntoAction,
      StepOverAction stepOverAction,
      StepOutAction stepOutAction,
      ResumeExecutionAction resumeExecutionAction,
      SuspendAction suspendAction,
      EvaluateExpressionAction evaluateExpressionAction,
      DeleteAllBreakpointsAction deleteAllBreakpointsAction,
      ChangeVariableValueAction changeVariableValueAction,
      ShowHideDebuggerPanelAction showHideDebuggerPanelAction,
      EditConfigurationsAction editConfigurationsAction,
      BreakpointConfigurationAction breakpointConfigurationAction,
      DebugConfigurationsGroup configurationsGroup,
      DebuggerPresenter debuggerPresenter,
      KeyBindingAgent keyBinding,
      BreakpointActionGroup breakpointActionGroup) {
    debuggerResources.getCss().ensureInjected();

    final DefaultActionGroup runMenu = (DefaultActionGroup) actionManager.getAction(GROUP_RUN);

    // register actions
    actionManager.registerAction(EDIT_DEBUG_CONF_ID, editConfigurationsAction);
    actionManager.registerAction(DEBUG_ID, debugAction);
    actionManager.registerAction(DISCONNECT_DEBUG_ID, disconnectDebuggerAction);
    actionManager.registerAction(STEP_INTO_ID, stepIntoAction);
    actionManager.registerAction(STEP_OVER_ID, stepOverAction);
    actionManager.registerAction(STEP_OUT_ID, stepOutAction);
    actionManager.registerAction(RESUME_EXECUTION_ID, resumeExecutionAction);
    actionManager.registerAction(SUSPEND_EXECUTION_ID, suspendAction);
    actionManager.registerAction(EVALUATE_EXPRESSION_ID, evaluateExpressionAction);
    actionManager.registerAction(CHANGE_VARIABLE_VALUE_ID, changeVariableValueAction);
    actionManager.registerAction(SHOW_HIDE_DEBUGGER_PANEL_ID, showHideDebuggerPanelAction);
    actionManager.registerAction(BREAKPOINT_CONFIGURATION_ID, breakpointConfigurationAction);

    // create group for selecting (changing) debug configurations
    final DefaultActionGroup debugActionGroup =
        new DefaultActionGroup(localizationConstants.debugActionTitle(), true, actionManager);
    debugActionGroup.add(debugAction);
    debugActionGroup.addSeparator();
    debugActionGroup.add(configurationsGroup);

    // breakpoint context menu
    breakpointActionGroup.add(breakpointConfigurationAction);
    actionManager.registerAction(BREAKPOINT_CONTEXT_MENU, breakpointActionGroup);

    // add actions in main menu
    runMenu.addSeparator();
    runMenu.add(debugActionGroup, LAST);
    runMenu.add(editConfigurationsAction, LAST);
    runMenu.add(disconnectDebuggerAction, LAST);
    runMenu.addSeparator();
    runMenu.add(stepIntoAction, LAST);
    runMenu.add(stepOverAction, LAST);
    runMenu.add(stepOutAction, LAST);
    runMenu.add(resumeExecutionAction, LAST);
    runMenu.add(suspendAction, new Constraints(Anchor.BEFORE, RESUME_EXECUTION_ID));
    runMenu.addSeparator();
    runMenu.add(evaluateExpressionAction, LAST);

    // create debugger toolbar action group
    DefaultActionGroup debuggerToolbarActionGroup = new DefaultActionGroup(actionManager);
    debuggerToolbarActionGroup.add(resumeExecutionAction);
    debuggerToolbarActionGroup.add(suspendAction);
    debuggerToolbarActionGroup.add(stepIntoAction);
    debuggerToolbarActionGroup.add(stepOverAction);
    debuggerToolbarActionGroup.add(stepOutAction);
    debuggerToolbarActionGroup.add(disconnectDebuggerAction);
    debuggerToolbarActionGroup.add(deleteAllBreakpointsAction);
    debuggerToolbarActionGroup.add(changeVariableValueAction);
    debuggerToolbarActionGroup.add(evaluateExpressionAction);
    debuggerPresenter.getDebuggerToolbar().bindMainGroup(debuggerToolbarActionGroup);

    // add actions in 'Debug' context menu
    final DefaultActionGroup debugContextMenuGroup =
        (DefaultActionGroup) actionManager.getAction(GROUP_DEBUG_CONTEXT_MENU);
    debugContextMenuGroup.add(debugAction);
    debugContextMenuGroup.addSeparator();

    // keys binding
    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().alt().shift().charCode(KeyCodeMap.F9).build(), EDIT_DEBUG_CONF_ID);
    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().shift().charCode(KeyCodeMap.F9).build(), DEBUG_ID);
    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().action().charCode(KeyCodeMap.F2).build(), DISCONNECT_DEBUG_ID);
    keyBinding.getGlobal().addKey(new KeyBuilder().charCode(KeyCodeMap.F7).build(), STEP_INTO_ID);
    keyBinding.getGlobal().addKey(new KeyBuilder().charCode(KeyCodeMap.F8).build(), STEP_OVER_ID);
    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().shift().charCode(KeyCodeMap.F8).build(), STEP_OUT_ID);
    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().charCode(KeyCodeMap.F9).build(), RESUME_EXECUTION_ID);
    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().alt().charCode(KeyCodeMap.F8).build(), EVALUATE_EXPRESSION_ID);
    keyBinding
        .getGlobal()
        .addKey(new KeyBuilder().charCode(KeyCodeMap.F2).build(), CHANGE_VARIABLE_VALUE_ID);

    if (UserAgent.isMac()) {
      keyBinding
          .getGlobal()
          .addKey(new KeyBuilder().action().charCode('5').build(), SHOW_HIDE_DEBUGGER_PANEL_ID);
    } else {
      keyBinding
          .getGlobal()
          .addKey(new KeyBuilder().alt().charCode('5').build(), SHOW_HIDE_DEBUGGER_PANEL_ID);
    }
  }

