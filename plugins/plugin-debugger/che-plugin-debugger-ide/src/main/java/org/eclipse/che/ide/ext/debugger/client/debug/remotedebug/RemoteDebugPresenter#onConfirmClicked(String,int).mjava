    @Override
    public void onConfirmClicked(@NotNull String host, @Min(1) int port) {
        if (debuggerManager.getActiveDebugger() != null) {
            dialogFactory.createMessageDialog(localizationConstant.connectToRemote(),
                                              localizationConstant.debuggerAlreadyConnected(),
                                              new ConfirmCallback() {
                                                  @Override
                                                  public void accepted() {
                                                  }
                                              }).show();
            return;
        }

        final Debugger javaDebugger = debuggerManager.getDebugger("java");
        if (javaDebugger != null) {
            debuggerManager.setActiveDebugger(javaDebugger);

            Map<String, String> connectionProperties = new HashMap<>(2);
            connectionProperties.put("HOST", host);
            connectionProperties.put("PORT", String.valueOf(port));

            Promise<Void> promise = javaDebugger.attachDebugger(connectionProperties);
            promise.catchError(new Operation<PromiseError>() {
                @Override
                public void apply(PromiseError arg) throws OperationException {
                    debuggerManager.setActiveDebugger(null);
                }
            });
        }
    }

