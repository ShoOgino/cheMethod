  public AbstractDebugger(
      DebuggerServiceClient service,
      RequestTransmitter transmitter,
      RequestHandlerConfigurator configurator,
      DtoFactory dtoFactory,
      LocalStorageProvider localStorageProvider,
      EventBus eventBus,
      ActiveFileHandler activeFileHandler,
      DebuggerManager debuggerManager,
      NotificationManager notificationManager,
      BreakpointManager breakpointManager,
      AppContext appContext,
      String type,
      RequestHandlerManager requestHandlerManager) {
    this.service = service;
    this.transmitter = transmitter;
    this.configurator = configurator;
    this.dtoFactory = dtoFactory;
    this.localStorageProvider = localStorageProvider;
    this.eventBus = eventBus;
    this.activeFileHandler = activeFileHandler;
    this.debuggerManager = debuggerManager;
    this.notificationManager = notificationManager;
    this.breakpointManager = breakpointManager;
    this.observers = new ArrayList<>();
    this.debuggerType = type;
    this.requestHandlerManager = requestHandlerManager;

    restoreDebuggerState();

    eventBus.addHandler(WorkspaceRunningEvent.TYPE, e -> initialize());

    if (appContext.getWorkspace().getStatus() == RUNNING) {
      initialize();
    }
  }

