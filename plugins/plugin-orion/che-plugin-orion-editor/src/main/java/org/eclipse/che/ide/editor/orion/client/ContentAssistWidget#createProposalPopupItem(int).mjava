    /**
     * Creates a new proposal item.
     *
     * @param proposal
     */
    private Element createProposalPopupItem(int index) {
        final CompletionProposal proposal = proposals.get(index);
        final Element element = Elements.createLiElement(popupResources.popupStyle().item());
        element.setId(Integer.toString(index));

        final Element icon = Elements.createDivElement(popupResources.popupStyle().icon());
        if (proposal.getIcon() != null && proposal.getIcon().getSVGImage() != null) {
            icon.appendChild((Node)proposal.getIcon().getSVGImage().getElement());
        } else if (proposal.getIcon() != null && proposal.getIcon().getImage() != null) {
            icon.appendChild((Node)proposal.getIcon().getImage().getElement());
        }
        element.appendChild(icon);

        final SpanElement label = Elements.createSpanElement(popupResources.popupStyle().label());
        label.setInnerHTML(proposal.getDisplayString());
        element.appendChild(label);

        element.setTabIndex(1);

        final EventListener validateListener = new EventListener() {
            @Override
            public void handleEvent(final Event evt) {
                applyProposal(proposal);
            }
        };

        element.addEventListener(Event.DBLCLICK, validateListener, false);
        element.addEventListener(CUSTOM_EVT_TYPE_VALIDATE, validateListener, false);
        element.addEventListener(Event.CLICK, new EventListener() {
            @Override
            public void handleEvent(Event event) {
                select(element);
            }
        }, false);
        element.addEventListener(Event.FOCUS, this, false);

        element.addEventListener(DOCUMENTATION, new EventListener() {
            @Override
            public void handleEvent(Event event) {
                proposal.getAdditionalProposalInfo(new AsyncCallback<Widget>() {
                    @Override
                    public void onSuccess(Widget info) {
                        if (info != null) {
                            docPopup.clear();
                            docPopup.add(info);

                            if (docPopup.isAttached()) {
                                return;
                            }

                            docPopup.getElement().getStyle()
                                    .setLeft(popupElement.getOffsetLeft() + popupElement.getOffsetWidth() + 3, Style.Unit.PX);
                            docPopup.getElement().getStyle().setTop(popupElement.getOffsetTop(), Style.Unit.PX);
                            RootPanel.get().add(docPopup);
                            docPopup.getElement().getStyle().setOpacity(1);
                        } else {
                            docPopup.getElement().getStyle().setOpacity(0);
                        }
                    }
                    
                    @Override
                    public void onFailure(Throwable e) {
                        Log.error(getClass(), e);
                        docPopup.getElement().getStyle().setOpacity(0);
                    }
                });
            }
        }, false);

        return element;
    }

