    /**
     * Appends new proposal item to the popup
     *
     * @param proposal
     */
    private void addProposalPopupItem(final CompletionProposal proposal) {
        final Element element = Elements.createLiElement(popupResources.popupStyle().item());

        final Element icon = Elements.createDivElement(popupResources.popupStyle().icon());
        if (proposal.getIcon() != null && proposal.getIcon().getSVGImage() != null) {
            icon.appendChild((Node)proposal.getIcon().getSVGImage().getElement());
        } else if (proposal.getIcon() != null && proposal.getIcon().getImage() != null) {
            icon.appendChild((Node)proposal.getIcon().getImage().getElement());
        }
        element.appendChild(icon);

        final SpanElement label = Elements.createSpanElement(popupResources.popupStyle().label());
        label.setInnerHTML(proposal.getDisplayString());
        element.appendChild(label);

        element.setTabIndex(1);

        // add item to the popup
        listElement.appendChild(element);

        final EventListener validateListener = new EventListener() {
            @Override
            public void handleEvent(final Event evt) {
                CompletionProposal.CompletionCallback callback = new CompletionProposal.CompletionCallback() {
                    @Override
                    public void onCompletion(final Completion completion) {
                        HandlesUndoRedo undoRedo = null;
                        UndoableEditor undoableEditor = ContentAssistWidget.this.textEditor;
                        undoRedo = undoableEditor.getUndoRedo();

                        try {
                            if (undoRedo != null) {
                                undoRedo.beginCompoundChange();
                            }
                            completion.apply(textEditor.getDocument());
                            final LinearRange selection = completion.getSelection(textEditor.getDocument());
                            if (selection != null) {
                                textEditor.getDocument().setSelectedRange(selection, true);
                            }
                        } catch (final Exception e) {
                            Log.error(getClass(), e);
                        } finally {
                            if (undoRedo != null) {
                                undoRedo.endCompoundChange();
                            }
                        }
                    }
                };

                if (proposal instanceof CompletionProposalExtension) {
                    ((CompletionProposalExtension)proposal).getCompletion(insert, callback);
                } else {
                    proposal.getCompletion(callback);
                }

                hide();
            }
        };

        element.addEventListener(Event.DBLCLICK, validateListener, false);
        element.addEventListener(CUSTOM_EVT_TYPE_VALIDATE, validateListener, false);
        element.addEventListener(Event.CLICK, new EventListener() {
            @Override
            public void handleEvent(Event event) {
                selectElement(element);
            }
        }, false);

        element.addEventListener(DOCUMENTATION, new EventListener() {
            @Override
            public void handleEvent(Event event) {
                Widget info = proposal.getAdditionalProposalInfo();

                if (info != null) {
                    docPopup.clear();
                    docPopup.add(info);

                    if (docPopup.isAttached()) {
                        return;
                    }

                    docPopup.getElement().getStyle().setLeft(popupElement.getOffsetLeft() + popupElement.getOffsetWidth() + 3, Style.Unit.PX);
                    docPopup.getElement().getStyle().setTop(popupElement.getOffsetTop(), Style.Unit.PX);
                    RootPanel.get().add(docPopup);
                    docPopup.getElement().getStyle().setOpacity(1);
                }
            }
        }, false);
    }

