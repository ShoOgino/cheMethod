    @AssistedInject
    public OrionEditorWidget(final ModuleHolder moduleHolder,
                             final KeyModeInstances keyModeInstances,
                             final EventBus eventBus,
                             final EditorPropertiesManager editorPropertiesManager,
                             final Provider<OrionCodeEditWidgetOverlay> orionCodeEditWidgetProvider,
                             final ContentAssistWidgetFactory contentAssistWidgetFactory,
                             final DialogFactory dialogFactory,
                             final PreferencesManager preferencesManager,
                             @Assisted final List<String> editorModes,
                             @Assisted final WidgetInitializedCallback widgetInitializedCallback,
                             final Provider<OrionEditorOptionsOverlay> editorOptionsProvider,
                             final StatusMessageReporter statusMessageReporter,
                             final IncrementalFindReportStatusObserver incrementalFindObserver) {
        this.contentAssistWidgetFactory = contentAssistWidgetFactory;
        this.moduleHolder = moduleHolder;
        this.keyModeInstances = keyModeInstances;
        this.eventBus = eventBus;
        this.dialogFactory = dialogFactory;
        this.preferencesManager = preferencesManager;
        initWidget(UIBINDER.createAndBindUi(this));

        this.editorPropertiesManager = editorPropertiesManager;

        this.uiUtilsOverlay = moduleHolder.getModule("UiUtils");

        // just first choice for the moment
        if (editorModes != null && !editorModes.isEmpty()) {
            setMode(editorModes.get(0));
        }

        panel.getElement().setId("orion-parent-" + Document.get().createUniqueId());
        panel.getElement().addClassName(this.editorElementStyle.editorParent());

        OrionEditorOptionsOverlay editorOptions = initEditorOptions(editorOptionsProvider.get(), statusMessageReporter);

        orionCodeEditWidgetProvider.get().createEditorView(panel.getElement(), editorOptions)
                                         .then(new EditorViewCreatedOperation(widgetInitializedCallback));

        incrementalFindObserver.setEditorWidget(this);
        statusMessageReporter.registerObserver(incrementalFindObserver);

        registerPromptFunction();
        eventBus.addHandler(EditorSettingsChangedEvent.TYPE, new EditorSettingsChangedHandler() {
            @Override
            public void onEditorSettingsChanged(EditorSettingsChangedEvent event) {
                final JSONObject properties = editorPropertiesManager.getJsonEditorProperties();
                editorViewOverlay.updateSettings(properties.getJavaScriptObject());
            }
        });
    }

