    @Test
    public void shouldBeReturnedStackList() throws ServerException {
        when(stackDao.getByCreator(anyString(), anyInt(), anyInt())).thenReturn(singletonList(stackImpl));

        Response response = given().auth()
                                   .basic(ADMIN_USER_NAME, ADMIN_USER_PASSWORD)
                                   .when()
                                   .get(SECURE_PATH + "/stack/");

        verify(stackDao).getByCreator(anyString(), anyInt(), anyInt());
        assertEquals(response.getStatusCode(), 200);
        List<StackDto> result = unwrapListDto(response, StackDto.class);
        assertEquals(result.get(0).getId(), stackImpl.getId());
        assertEquals(result.get(0).getName(), stackImpl.getName());
        assertEquals(result.get(0).getDescription(), stackImpl.getDescription());
        assertEquals(result.get(0).getScope(), stackImpl.getScope());
        assertEquals(result.get(0).getTags().get(0), stackImpl.getTags().get(0));
        assertEquals(result.get(0).getTags().get(1), stackImpl.getTags().get(1));
        assertEquals(result.get(0).getComponents().get(0).getName(), stackImpl.getComponents().get(0).getName());
        assertEquals(result.get(0).getComponents().get(0).getVersion(), stackImpl.getComponents().get(0).getVersion());
        assertEquals(result.get(0).getSource().getType(), stackImpl.getSource().getType());
        assertEquals(result.get(0).getSource().getOrigin(), stackImpl.getSource().getOrigin());
        assertEquals(result.get(0).getCreator(), stackImpl.getCreator());

        verify(stackDao).getByCreator(anyString(), anyInt(), anyInt());
    }

