    /**
     * Asynchronously starts certain workspace with specified environment and account.
     *
     * @param workspaceName
     *         name of workspace which should be started
     * @param envName
     *         name of environment or null, when default environment should be used
     * @param owner
     *         owner of the workspace which should be started
     * @param accountId
     *         account which should be used for this runtime workspace or null when
     *         it should be automatically detected
     * @return starting workspace
     * @throws BadRequestException
     *         when given {@code workspaceName} or {@code owner} is null
     * @throws NotFoundException
     *         when workspace with given {@code workspaceName & owner} doesn't exist, or
     *         {@link WorkspaceHooks#beforeStart(UsersWorkspace, String, String)} throws this exception
     * @throws ForbiddenException
     *         when user doesn't have access to start workspace in certain account
     * @throws ServerException
     *         when any other error occurs during workspace start
     * @see WorkspaceHooks#beforeStart(UsersWorkspace, String, String)
     * @see RuntimeWorkspaceRegistry#start(UsersWorkspace, String)
     */
    public UsersWorkspaceImpl startWorkspaceByName(String workspaceName,
                                                   String owner,
                                                   @Nullable String envName,
                                                   @Nullable String accountId) throws NotFoundException,
                                                                                      ServerException,
                                                                                      BadRequestException,
                                                                                      ForbiddenException,
                                                                                      ConflictException {
        requiredNotNull(workspaceName, "Required non-null workspace name");
        requiredNotNull(owner, "Required non-null workspace owner");
        return performAsyncStart(workspaceDao.get(workspaceName, owner), envName, false, accountId);
    }

