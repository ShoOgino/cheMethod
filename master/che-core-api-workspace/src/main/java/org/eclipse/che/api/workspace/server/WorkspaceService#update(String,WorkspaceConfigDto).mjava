    @PUT
    @Path("/{id}")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Update the workspace by replacing all the existing data with update",
                  notes = "This operation can be performed only by the workspace owner")
    @ApiResponses({@ApiResponse(code = 200, message = "The workspace successfully updated"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have access to update the workspace"),
                   @ApiResponse(code = 409, message = "Conflict error occurred during workspace update" +
                                                      "(e.g. Workspace with such name already exists)"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public UsersWorkspaceDto update(@ApiParam("The workspace id")
                                    @PathParam("id")
                                    String id,
                                    @ApiParam(value = "The workspace update", required = true)
                                    WorkspaceConfigDto update) throws BadRequestException,
                                                                      ServerException,
                                                                      ForbiddenException,
                                                                      NotFoundException,
                                                                      ConflictException {
        requiredNotNull(update, "Workspace configuration");
        ensureUserIsWorkspaceOwner(id);
        return injectLinks(asDto(workspaceManager.updateWorkspace(id, update)));
    }

