    /**
     * Updates the existing workspace with the new configuration.
     *
     * <p>Replace strategy is used for workspace update, it means
     * that existing workspace data will be replaced with given {@code update}.
     *
     * @param workspaceId
     *         the id of the workspace which should be updated
     * @param updateConfig
     *         the workspace update
     * @return updated instance of the workspace
     * @throws BadRequestException
     *         when {@code update} is not valid
     * @throws BadRequestException
     *         when either {@code workspaceId} or {@code update} is null
     * @throws NotFoundException
     *         when workspace with given id doesn't exist
     * @throws ConflictException
     *         when any conflict occurs (e.g Workspace with such name already exists for {@code owner})
     * @throws ServerException
     *         when any other error occurs
     */
    public UsersWorkspaceImpl updateWorkspace(String workspaceId, WorkspaceConfig updateConfig) throws ConflictException,
                                                                                                       ServerException,
                                                                                                       BadRequestException,
                                                                                                       NotFoundException {
        configValidator.validate(updateConfig);
        final UsersWorkspaceImpl updated = workspaceDao.update(new UsersWorkspaceImpl(updateConfig, workspaceId, getCurrentUserId()));
        // TODO move 'analytics' logs to the appropriate interceptors
        LOG.info("EVENT#workspace-updated# WS#{}# WS-ID#{}#", updated.getConfig().getName(), updated.getId());
        return normalizeState(updated);
    }

