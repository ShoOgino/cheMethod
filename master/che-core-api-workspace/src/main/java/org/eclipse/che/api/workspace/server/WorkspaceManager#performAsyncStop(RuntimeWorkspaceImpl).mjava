    /**
     * Asynchronously stops the workspace, publishes {@link EventType#STOPPING} event before stop
     * and {@link EventType#STOPPED} after workspace successfully stopped and {@link EventType#ERROR}
     * when error occurs during the workspace stopping.
     */
    @VisibleForTesting
    void performAsyncStop(RuntimeWorkspaceImpl runtime) {
        eventService.publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
                                       .withEventType(STOPPING)
                                       .withWorkspaceId(runtime.getId()));
        executor.execute(() -> {
            try {
                workspaceRegistry.stop(runtime.getId());
                if (runtime.isTemporary()) {
                    hooks.afterRemove(runtime.getId());
                }
            } catch (ConflictException | NotFoundException | ServerException ex) {
                eventService.publish(newDto(WorkspaceStatusEvent.class).withEventType(ERROR)
                                                                       .withWorkspaceId(runtime.getId())
                                                                       .withError(ex.getLocalizedMessage()));
                LOG.error(ex.getLocalizedMessage(), ex);
            }
            eventService.publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
                                           .withEventType(EventType.STOPPED)
                                           .withWorkspaceId(runtime.getId()));
        });
    }

