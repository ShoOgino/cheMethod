    @POST
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @GenerateLink(rel = LINK_REL_CREATE_RECIPE)
    @RolesAllowed({"user", "system/admin", "system/manager"})
    public Response createRecipe(NewRecipe newRecipe) throws ApiException {
        if (newRecipe == null) {
            throw new BadRequestException("Recipe required");
        }
        if (isNullOrEmpty(newRecipe.getType())) {
            throw new BadRequestException("Recipe type required");
        }
        if (isNullOrEmpty(newRecipe.getScript())) {
            throw new BadRequestException("Recipe script required");
        }
        if (isNullOrEmpty(newRecipe.getName())) {
            throw new BadRequestException("Recipe name required");
        }
        String userId = EnvironmentContext.getCurrent().getUser().getId();
        Permissions permissions = null;
        if (newRecipe.getPermissions() != null) {
            if (!isSystemUser() && permissionsChecker.hasPublicSearchPermission(newRecipe.getPermissions())) {
                throw new ForbiddenException(format("User %s doesn't have access to use 'public: search' permission", userId));
            }
            permissions = PermissionsImpl.fromDescriptor(newRecipe.getPermissions());
        }

        final ManagedRecipe recipe = new RecipeImpl().withId(NameGenerator.generate("recipe", 16))
                                                     .withName(newRecipe.getName())
                                                     .withCreator(userId)
                                                     .withType(newRecipe.getType())
                                                     .withScript(newRecipe.getScript())
                                                     .withTags(newRecipe.getTags())
                                                     .withPermissions(permissions);
        recipeDao.create(recipe);

        return Response.status(CREATED)
                       .entity(asRecipeDescriptor(recipe))
                       .build();
    }

