    /**
     * Reads file content by specified file path.
     *
     * @param path
     *         path to file on machine instance
     * @param startFrom
     *         line number to start reading from
     * @param limit
     *         limitation on line if not specified will used 2000 lines
     * @return file content.
     * @throws MachineException
     *         if any error occurs with file reading
     */
    @GET
    @Path("/{machineId}/filepath/{path:.*}")
    @Produces(MediaType.TEXT_PLAIN)
    @RolesAllowed("user")
    @ApiOperation(value = "Get content of file in machine")
    @ApiResponses({@ApiResponse(code = 200, message = "The response contains file content"),
                   @ApiResponse(code = 404, message = "Machine with specified ID does not exist"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public String getFileContent(@ApiParam(value = "Machine ID")
                                 @PathParam("machineId")
                                 String machineId,
                                 @ApiParam(value = "Path of file")
                                 @PathParam("path")
                                 String path,
                                 @ApiParam(value = "From line")
                                 @QueryParam("startFrom")
                                 @DefaultValue("1")
                                 Integer startFrom,
                                 @ApiParam(value = "Number of lines")
                                 @QueryParam("limit")
                                 @DefaultValue("2000")
                                 Integer limit)
            throws NotFoundException,
                   ForbiddenException,
                   ServerException {

        final Instance machine = machineManager.getInstance(machineId);

        checkCurrentUserPermissions(machine);

        return machine.readFileContent(path, startFrom, limit);
    }

