    private SnapshotImpl doSaveMachine(SnapshotImpl snapshot, Instance machine) throws SnapshotException, MachineException {
        final SnapshotImpl snapshotWithKey;
        try {
            LOG.info("Creating snapshot of machine [ws = {}: env = {}: machine = {}]",
                     snapshot.getWorkspaceId(),
                     snapshot.getEnvName(),
                     snapshot.getMachineName());

            snapshotWithKey = new SnapshotImpl(snapshot);
            snapshotWithKey.setInstanceKey(machine.saveToSnapshot(machine.getOwner()));

            try {
                SnapshotImpl oldSnapshot = snapshotDao.getSnapshot(snapshot.getWorkspaceId(),
                                                                   snapshot.getEnvName(),
                                                                   snapshot.getMachineName());
                snapshotDao.removeSnapshot(oldSnapshot.getId());
                machineInstanceProviders.getProvider(oldSnapshot.getType()).removeInstanceSnapshot(oldSnapshot.getInstanceKey());
            } catch (NotFoundException ignored) {
               //DO nothing if we has no snapshots or when provider not found
            } catch (SnapshotException se) {
                LOG.error("Failed to delete snapshot: {}, because {}",
                          snapshot,
                          se.getLocalizedMessage());
            }
            snapshotDao.saveSnapshot(snapshotWithKey);

            LOG.info("Snapshot of machine [ws = {}: env = {}: machine = {}] was successfully created, its id is '{}'",
                     snapshot.getWorkspaceId(),
                     snapshot.getEnvName(),
                     snapshot.getMachineName(),
                     snapshot.getId());
        } catch (MachineException | SnapshotException ex) {
            try {
                machine.getLogger().writeLine("Snapshot storing failed. " + ex.getLocalizedMessage());
            } catch (IOException ignore) {
            }
            LOG.error("Failed to create snapshot of machine [ws = {}: env = {}: machine = {}], because {}",
                      snapshot.getWorkspaceId(),
                      snapshot.getEnvName(),
                      snapshot.getMachineName(),
                      ex.getLocalizedMessage());
            throw ex;
        }
        return snapshotWithKey;
    }

