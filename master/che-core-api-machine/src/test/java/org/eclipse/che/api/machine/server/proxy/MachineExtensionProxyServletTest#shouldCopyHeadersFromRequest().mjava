    @Test
    public void shouldCopyHeadersFromRequest() throws Exception {
        final Map<String, List<String>> headers = new HashMap<>();
        headers.put("Content-Encoding", Collections.singletonList("gzip"));
        headers.put("Content-Language", Collections.singletonList("mi, en"));
        headers.put("Content-Type", Collections.singletonList("text/html; charset=ISO-8859-4"));
        headers.put("Date", Collections.singletonList("Tue, 15 Nov 1994 08:12:31 GMT"));
        headers.put("From", Collections.singletonList("webmaster@w3.org"));
        headers.put("Accept", Collections.singletonList("*/*"));
        headers.put("Accept-Charset", Collections.singletonList("iso-8859-5, unicode-1-1;q=0.8"));
        headers.put("Accept-Encoding", Collections.singletonList("compress, gzip"));
        headers.put("Accept-Language", Collections.singletonList("da, en-gb;q=0.8, en;q=0.7"));
        headers.put("Referer", Collections.singletonList("http://www.w3.org/hypertext/DataSources/Overview.html"));
        headers.put("Max-Forwards", Collections.singletonList("5"));
        headers.put("If-Modified-Since", Collections.singletonList("Sat, 29 Oct 2016 19:43:31 GMT"));
        headers.put("If-Match", Collections.singletonList("xyzzy"));
        headers.put("Host", Collections.singletonList("www.w3.org"));
        headers.put("User-Agent", Collections
                .singletonList("curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3"));
        headers.put("Connection", Collections.singletonList("close"));
        headers.put("Content-Length", Collections.singletonList("0"));
        headers.put("X-Requested-With", Collections.singletonList("XMLHttpRequest"));
        headers.put("Cookie", Collections.singletonList("JSESSIONID=D06F9296FE0D3A48519836666E668893; logged_in=true"));

        MockHttpServletRequest mockRequest =
                new MockHttpServletRequest(DEFAULT_URL,
                                           new ByteArrayInputStream(new byte[0]),
                                           0,
                                           "POST",
                                           headers);

        final MockHttpServletResponse mockResponse = new MockHttpServletResponse();

        proxyServlet.service(mockRequest, mockResponse);

        assertEquals(mockResponse.getStatus(), 200);

        // should not be copied to headers of request to extension API
        headers.remove("Connection");
        // proxy will set it separately
        extensionApiRequest.headers.remove("Connection");

        // fixme jetty return 127.0.0.1:jettyPort
        // I suppose we need add X-Forwarded-* header support to jetty conf to fix it
        headers.remove("Host");
        extensionApiRequest.headers.remove("Host");

        extensionApiRequest.headers.remove("X-Forwarded-Host");

        assertEqualsHeaders(extensionApiRequest.headers, headers);
    }

