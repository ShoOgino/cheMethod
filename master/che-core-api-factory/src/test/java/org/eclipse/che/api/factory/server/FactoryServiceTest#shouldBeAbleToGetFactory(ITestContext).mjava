    @Test
    public void shouldBeAbleToGetFactory(ITestContext context) throws Exception {
        // given
        String factoryName = "factoryName";
        Factory factory = dto.createDto(Factory.class);
        factory.setId(CORRECT_FACTORY_ID);
        factory.setName(factoryName);
        factory.setCreator(dto.createDto(Author.class).withUserId(userId));
        URL resource = Thread.currentThread().getContextClassLoader().getResource("100x100_image.jpeg");
        assertNotNull(resource);
        Path path = Paths.get(resource.toURI());
        byte[] data = Files.readAllBytes(path);
        FactoryImage image1 = new FactoryImage(data, "image/jpeg", "image123456789");
        FactoryImage image2 = new FactoryImage(data, "image/png", "image987654321");
        Set<FactoryImage> images = new HashSet<>();
        images.add(image1);
        images.add(image2);
        Link expectedCreateProject = dto.createDto(Link.class);
        expectedCreateProject.setProduces("text/html");
        expectedCreateProject.setHref(getServerUrl(context) + "/f?id=" + CORRECT_FACTORY_ID);
        expectedCreateProject.setRel("accept");

        when(factoryStore.getFactory(CORRECT_FACTORY_ID)).thenReturn(factory);
        when(factoryStore.getFactoryImages(CORRECT_FACTORY_ID, null)).thenReturn(images);

        // when
        Response response = given().when().get(SERVICE_PATH + "/" + CORRECT_FACTORY_ID);

        // then
        assertEquals(response.getStatusCode(), 200);
        Factory responseFactory = JsonHelper.fromJson(response.getBody().asString(),
                                                      Factory.class, null);

        List<Link> expectedLinks = new ArrayList<>(10);
        expectedLinks.add(expectedCreateProject);

        Link expectedCreateProjectByName = dto.createDto(Link.class);
        expectedCreateProjectByName.setProduces("text/html");
        expectedCreateProjectByName.setHref(getServerUrl(context) + "/f?name=" + factoryName + "&user=" + JettyHttpServer.ADMIN_USER_NAME);
        expectedCreateProjectByName.setRel("accept-named");
        expectedLinks.add(expectedCreateProjectByName);

        Link self = dto.createDto(Link.class);
        self.setProduces(MediaType.APPLICATION_JSON);
        self.setHref(getServerUrl(context) + "/rest/factory/" + CORRECT_FACTORY_ID);
        self.setRel("self");
        expectedLinks.add(self);

        Link imageJpeg = dto.createDto(Link.class);
        imageJpeg.setProduces("image/jpeg");
        imageJpeg.setHref(getServerUrl(context) + "/rest/factory/" + CORRECT_FACTORY_ID +
                          "/image?imgId=image123456789");
        imageJpeg.setRel("image");
        expectedLinks.add(imageJpeg);

        Link imagePng = dto.createDto(Link.class);
        imagePng.setProduces("image/png");
        imagePng.setHref(getServerUrl(context) + "/rest/factory/" + CORRECT_FACTORY_ID + "/image?imgId=image987654321");
        imagePng.setRel("image");
        expectedLinks.add(imagePng);

        Link accepted = dto.createDto(Link.class);
        accepted.setProduces(MediaType.TEXT_PLAIN);
        accepted.setHref(getServerUrl(context) + "/rest/analytics/public-metric/factory_used?factory=" +
                         encode(expectedCreateProject.getHref(), "UTF-8"));
        accepted.setRel("accepted");
        expectedLinks.add(accepted);

        Link snippetUrl = dto.createDto(Link.class);
        snippetUrl.setProduces(MediaType.TEXT_PLAIN);
        snippetUrl.setHref(getServerUrl(context) + "/rest/factory/" + CORRECT_FACTORY_ID + "/snippet?type=url");
        snippetUrl.setRel("snippet/url");
        expectedLinks.add(snippetUrl);

        Link snippetHtml = dto.createDto(Link.class);
        snippetHtml.setProduces(MediaType.TEXT_PLAIN);
        snippetHtml.setHref(getServerUrl(context) + "/rest/factory/" + CORRECT_FACTORY_ID + "/snippet?type=html");
        snippetHtml.setRel("snippet/html");
        expectedLinks.add(snippetHtml);

        Link snippetMarkdown = dto.createDto(Link.class);
        snippetMarkdown.setProduces(MediaType.TEXT_PLAIN);
        snippetMarkdown.setHref(getServerUrl(context) + "/rest/factory/" + CORRECT_FACTORY_ID +
                                "/snippet?type=markdown");
        snippetMarkdown.setRel("snippet/markdown");
        expectedLinks.add(snippetMarkdown);

        Link snippetiFrame = dto.createDto(Link.class);
        snippetiFrame.setProduces(MediaType.TEXT_PLAIN);
        snippetiFrame.setHref(getServerUrl(context) + "/rest/factory/" + CORRECT_FACTORY_ID +
                              "/snippet?type=iframe");
        snippetiFrame.setRel("snippet/iframe");
        expectedLinks.add(snippetiFrame);

        for (Link link : responseFactory.getLinks()) {
            Link testLink = dto.createDto(Link.class);
            testLink.setProduces(link.getProduces());
            testLink.setHref(link.getHref());
            testLink.setRel(link.getRel());
            //This transposition need because proxy objects doesn't contains equals method.
            assertTrue(expectedLinks.contains(testLink));
        }
    }

