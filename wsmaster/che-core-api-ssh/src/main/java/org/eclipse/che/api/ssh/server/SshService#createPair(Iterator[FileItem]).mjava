    @POST
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.TEXT_HTML)
    @RolesAllowed("user")
    @GenerateLink(rel = Constants.LINK_REL_CREATE_PAIR)
    public Response createPair(Iterator<FileItem> formData) throws BadRequestException, ServerException, ConflictException {
        String service = null;
        String name = null;
        String privateKey = null;
        String publicKey = null;

        while (formData.hasNext()) {
            FileItem item = formData.next();
            String fieldName = item.getFieldName();
            switch (fieldName) {
                case "service":
                    service = item.getString();
                    break;
                case "name":
                    name = item.getString();
                    break;
                case "privateKey":
                    privateKey = item.getString();
                    break;
                case "publicKey":
                    publicKey = item.getString();
                    break;
                default:
                    //do nothing
            }
        }

        requiredNotNull(service, "Service name required");
        requiredNotNull(name, "Name required");
        if (privateKey == null && publicKey == null) {
            throw new BadRequestException("Key content was not provided.");
        }

        sshManager.createPair(getCurrentUserId(), new SshPairImpl(service, name, publicKey, privateKey));

        // We should send 200 response code and body with empty line
        // through specific of html form that doesn't invoke complete submit handler
        return Response.ok("", MediaType.TEXT_HTML).build();
    }

