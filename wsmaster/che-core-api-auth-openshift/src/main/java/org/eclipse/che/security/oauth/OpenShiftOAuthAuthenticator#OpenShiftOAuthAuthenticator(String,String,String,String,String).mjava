  @Inject
  public OpenShiftOAuthAuthenticator(
      @Nullable @Named("che.oauth.openshift.clientid") String clientId,
      @Nullable @Named("che.oauth.openshift.clientsecret") String clientSecret,
      @Nullable @Named("che.oauth.openshift.oauth_endpoint") String oauthEndpoint,
      @Nullable @Named("che.oauth.openshift.verify_token_url") String verifyTokenUrl,
      @Named("che.api") String apiEndpoint)
      throws IOException {
    this.verifyTokenUrl = verifyTokenUrl;
    String[] redirectUrl = {apiEndpoint + "/oauth/callback"};
    if (!isNullOrEmpty(clientId) && !isNullOrEmpty(clientSecret) && !isNullOrEmpty(oauthEndpoint)) {
      oauthEndpoint = oauthEndpoint.endsWith("/") ? oauthEndpoint : oauthEndpoint + "/";
      configure(
          clientId,
          clientSecret,
          redirectUrl,
          oauthEndpoint + "oauth/authorize",
          oauthEndpoint + "oauth/token",
          new MemoryDataStoreFactory());
    }
  }

