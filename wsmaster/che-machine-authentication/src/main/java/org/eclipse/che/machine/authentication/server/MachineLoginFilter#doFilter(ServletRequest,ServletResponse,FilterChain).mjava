    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)
            throws IOException, ServletException {
        final HttpServletRequest httpRequest = (HttpServletRequest)servletRequest;
        if (httpRequest.getRequestURI().endsWith("/ws") || httpRequest.getRequestURI().endsWith("/eventbus")
            || httpRequest.getScheme().equals("ws") || httpRequest.getScheme().equals("wss") || httpRequest.getRequestURI().contains("/websocket/") ||
            tokenExtractor.getToken(httpRequest) == null || !tokenExtractor.getToken(httpRequest).startsWith("machine")) {
            filterChain.doFilter(servletRequest, servletResponse);
            return;
        } else {
            String tokenString;
            User user;
            try {
                tokenString =  tokenExtractor.getToken(httpRequest);
                String userId = machineTokenRegistry.getUserId(tokenString);
                user = userManager.getById(userId);
            } catch (NotFoundException | ServerException e) {
                throw new ServletException("Cannot find user by machine token.");
            }

            final Subject subject =
                    new SubjectImpl(user.getName(), user.getId(), tokenString, false);

            try {
                EnvironmentContext.getCurrent().setSubject(subject);
                filterChain.doFilter(addUserInRequest(httpRequest, subject), servletResponse);
            } finally {
                EnvironmentContext.reset();
            }
        }
    }

