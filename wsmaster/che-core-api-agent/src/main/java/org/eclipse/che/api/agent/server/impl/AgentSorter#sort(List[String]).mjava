    /**
     * Sort agents respecting dependencies between them.
     * Handles circular dependencies.
     *
     * @see AgentKey
     * @see Agent#getDependencies()
     * @see AgentRegistry#getAgent(AgentKey)
     *
     * @param agentKeys list of agents to sort
     * @return list of created agents in proper order
     *
     * @throws AgentException
     *      if circular dependency found or agent creation failed or other unexpected error
     */
    public List<AgentKey> sort(List<String> agentKeys) throws AgentException {
        List<AgentKey> sorted = new ArrayList<>();
        Set<String> pending = new HashSet<>();

        if (agentKeys != null) {
            for (String agentKey : agentKeys) {
                doSort(agentKeys, AgentKeyImpl.parse(agentKey), sorted, pending);
            }
        }

        return sorted;
    }

