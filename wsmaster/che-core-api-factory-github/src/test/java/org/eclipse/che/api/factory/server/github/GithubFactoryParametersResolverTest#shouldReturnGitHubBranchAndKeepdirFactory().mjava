  /** Check that we have a sparse checkout "keepDir" if url contains branch and subtree. */
  @Test
  public void shouldReturnGitHubBranchAndKeepdirFactory() throws Exception {

    String githubUrl = "https://github.com/eclipse/che/tree/4.2.x/dashboard";
    String githubCloneUrl = "https://github.com/eclipse/che";
    String githubBranch = "4.2.x";
    String githubKeepdir = "dashboard";

    FactoryDto computedFactory = newDto(FactoryDto.class).withV(CURRENT_VERSION);
    when(urlFactoryBuilder.createFactoryFromJson(any(RemoteFactoryUrl.class)))
        .thenReturn(Optional.of(computedFactory));

    githubFactoryParametersResolver.createFactory(singletonMap(URL_PARAMETER_NAME, githubUrl));

    // check we called the builder with the following factory json file
    verify(urlFactoryBuilder).createFactoryFromJson(factoryUrlArgumentCaptor.capture());
    assertEquals(
        factoryUrlArgumentCaptor.getValue().factoryFileLocation(),
        "https://raw.githubusercontent.com/eclipse/che/4.2.x/.factory.json");

    assertEquals(factoryUrlArgumentCaptor.getValue().getFactoryFilename(), ".factory.json");

    // check we provide dockerfile and correct env
    verify(urlFactoryBuilder).buildDefaultWorkspaceConfig(eq("che"));

    // check project config built
    verify(projectConfigDtoMerger)
        .merge(any(FactoryDto.class), projectConfigDtoArgumentCaptor.capture());

    ProjectConfigDto projectConfigDto = projectConfigDtoArgumentCaptor.getValue().get();
    SourceStorageDto sourceStorageDto = projectConfigDto.getSource();
    assertNotNull(sourceStorageDto);
    assertEquals(sourceStorageDto.getType(), "github");
    assertEquals(sourceStorageDto.getLocation(), githubCloneUrl);
    Map<String, String> sourceParameters = sourceStorageDto.getParameters();
    assertEquals(sourceParameters.size(), 2);
    assertEquals(sourceParameters.get("branch"), githubBranch);
    assertEquals(sourceParameters.get("keepDir"), githubKeepdir);
  }

