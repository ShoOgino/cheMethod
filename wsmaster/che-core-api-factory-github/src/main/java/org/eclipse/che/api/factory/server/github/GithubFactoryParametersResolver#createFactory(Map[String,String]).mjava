  /**
   * Create factory object based on provided parameters
   *
   * @param factoryParameters map containing factory data parameters provided through URL
   * @throws BadRequestException when data are invalid
   */
  @Override
  public FactoryDto createFactory(@NotNull final Map<String, String> factoryParameters)
      throws BadRequestException, ServerException {

    // no need to check null value of url parameter as accept() method has performed the check
    final GithubUrl githubUrl = githubUrlParser.parse(factoryParameters.get(URL_PARAMETER_NAME));

    // create factory from the following location if location exists, else create default factory
    FactoryDto factory =
        urlFactoryBuilder
            .createFactoryFromDevfile(
                githubUrl,
                fileName -> urlFetcher.fetch(githubUrl.rawFileLocation(fileName)),
                extractOverrideParams(factoryParameters))
            .orElseGet(
                () ->
                    urlFactoryBuilder
                        .createFactoryFromJson(githubUrl)
                        .orElseGet(
                            () ->
                                newDto(FactoryDto.class)
                                    .withV(CURRENT_VERSION)
                                    .withSource("repo")));

    if (factory.getWorkspace() != null) {
      return projectConfigDtoMerger.merge(
          factory,
          () -> {
            // Compute project configuration
            return newDto(ProjectConfigDto.class)
                .withSource(githubSourceStorageBuilder.buildWorkspaceConfigSource(githubUrl))
                .withName(githubUrl.getRepository())
                .withPath("/".concat(githubUrl.getRepository()));
          });
    } else if (factory.getDevfile() == null) {
      // initialize default devfile and github project
      factory.setDevfile(urlFactoryBuilder.buildDefaultDevfile(githubUrl.getRepository()));
      factory
          .getDevfile()
          .setProjects(
              Collections.singletonList(
                  newDto(ProjectDto.class)
                      .withSource(githubSourceStorageBuilder.buildDevfileSource(githubUrl))
                      .withName(githubUrl.getRepository())));
    }
    return factory;
  }

