    @Override
    protected void configure() {
        final String dbUrl = System.getProperty("jdbc.url");
        final String dbUser = System.getProperty("jdbc.user");
        final String dbPassword = System.getProperty("jdbc.password");

        waitConnectionIsEstablished(dbUrl, dbUser, dbPassword);

        // jpa
        final Map<String, String> properties = new HashMap<>();
        properties.put(TRANSACTION_TYPE, PersistenceUnitTransactionType.RESOURCE_LOCAL.name());
        properties.put(JDBC_URL, dbUrl);
        properties.put(JDBC_USER, dbUser);
        properties.put(JDBC_PASSWORD, dbPassword);
        properties.put(JDBC_DRIVER, System.getProperty("jdbc.driver"));
        final JpaPersistModule persistenceModule = new JpaPersistModule("test");
        persistenceModule.properties(properties);
        install(persistenceModule);
        bind(TckResourcesCleaner.class).to(JpaCleaner.class);

        // db initialization
        bind(DBInitializer.class).asEagerSingleton();
        final PGSimpleDataSource dataSource = new PGSimpleDataSource();
        dataSource.setUser(dbUser);
        dataSource.setPassword(dbPassword);
        dataSource.setUrl(dbUrl);
        bind(SchemaInitializer.class).toInstance(new FlywaySchemaInitializer(dataSource, "che-schema"));

        // account
        bind(AccountDao.class).to(JpaAccountDao.class);
        bind(new TypeLiteral<TckRepository<AccountImpl>>() {}).toInstance(new JpaTckRepository<>(AccountImpl.class));

        // user
        bind(UserDao.class).to(JpaUserDao.class);
        bind(ProfileDao.class).to(JpaProfileDao.class);
        bind(PreferenceDao.class).to(JpaPreferenceDao.class);
        bind(new TypeLiteral<TckRepository<UserImpl>>() {}).to(UserRepo.class);
        bind(new TypeLiteral<TckRepository<Pair<String, Map<String, String>>>>() {}).to(PreferencesRepo.class);
        bind(new TypeLiteral<TckRepository<ProfileImpl>>() {}).toInstance(new JpaTckRepository<>(ProfileImpl.class));
        bind(PasswordEncryptor.class).to(SHA512PasswordEncryptor.class);

        // machine
        bind(RecipeDao.class).to(JpaRecipeDao.class);
        bind(SnapshotDao.class).to(JpaSnapshotDao.class);
        bind(new TypeLiteral<TckRepository<RecipeImpl>>() {}).toInstance(new JpaTckRepository<>(RecipeImpl.class));
        bind(new TypeLiteral<TckRepository<SnapshotImpl>>() {}).toInstance(new JpaTckRepository<>(SnapshotImpl.class));
        bind(new TypeLiteral<TckRepository<Workspace>>() {}).toInstance(new WorkspaceRepoForSnapshots());

        // ssh
        bind(SshDao.class).to(JpaSshDao.class);
        bind(new TypeLiteral<TckRepository<SshPairImpl>>() {}).toInstance(new JpaTckRepository<>(SshPairImpl.class));

        // workspace
        bind(WorkspaceDao.class).to(JpaWorkspaceDao.class);
        bind(StackDao.class).to(JpaStackDao.class);
        bind(new TypeLiteral<TckRepository<WorkspaceImpl>>() {}).toInstance(new JpaTckRepository<>(WorkspaceImpl.class));
        bind(new TypeLiteral<TckRepository<StackImpl>>() {}).toInstance(new JpaTckRepository<>(StackImpl.class));
    }

