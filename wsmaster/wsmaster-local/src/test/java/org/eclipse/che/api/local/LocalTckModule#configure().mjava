    @Override
    public void configure() {
        // configuring local storage to deal with mocks
        final LocalStorage storage = mock(LocalStorage.class);
        when(storage.loadMap(any())).thenReturn(Collections.emptyMap());
        final LocalStorageFactory factory = mock(LocalStorageFactory.class);
        try {
            when(factory.create(any())).thenReturn(storage);
        } catch (IOException x) {
            throw new RuntimeException(x.getMessage(), x);
        }
        bind(LocalStorageFactory.class).toInstance(factory);

        // Configure stack local storage to deal with mocks
        final StackLocalStorage stackStorage = mock(StackLocalStorage.class);
        when(stackStorage.loadMap()).thenReturn(Collections.emptyMap());
        bind(StackLocalStorage.class).toInstance(stackStorage);

        bind(new TypeLiteral<Set<UserImpl>>() {}).annotatedWith(Names.named("codenvy.local.infrastructure.users")).toInstance(emptySet());

        bind(new TypeLiteral<TckRepository<UserImpl>>() {}).to(LocalUserTckRepository.class);
        bind(new TypeLiteral<TckRepository<ProfileImpl>>() {}).to(LocalProfileTckRepository.class);
        bind(new TypeLiteral<TckRepository<RecipeImpl>>() {}).to(LocalRecipeTckRepository.class);
        bind(new TypeLiteral<TckRepository<WorkspaceImpl>>() {}).to(LocalWorkspaceTckRepository.class);
        bind(new TypeLiteral<TckRepository<Pair<String, Map<String, String>>>>() {}).to(LocalPreferenceTckRepository.class);
        bind(new TypeLiteral<TckRepository<StackImpl>>() {}).to(LocalStackTckRepository.class);
        bind(new TypeLiteral<TckRepository<SnapshotImpl>>() {}).to(SnapshotTckRepository.class);
        bind(new TypeLiteral<TckRepository<SshPairImpl>>() {}).to(LocalSshTckRepository.class);
        bind(new TypeLiteral<TckRepository<AccountImpl>>() {}).to(LocalAccountTckRepository.class);

        bind(UserDao.class).to(LocalUserDaoImpl.class);
        bind(ProfileDao.class).to(LocalProfileDaoImpl.class);
        bind(RecipeDao.class).to(LocalRecipeDaoImpl.class);
        bind(WorkspaceDao.class).to(LocalWorkspaceDaoImpl.class);
        bind(PreferenceDao.class).to(LocalPreferenceDaoImpl.class);
        bind(StackDao.class).to(LocalStackDaoImpl.class);
        bind(SnapshotDao.class).to(LocalSnapshotDaoImpl.class);
        bind(SshDao.class).to(LocalSshDaoImpl.class);
    }

