    private static WorkspaceImpl createWorkspace() {
        // environments
        Map<String, EnvironmentImpl> environments = new HashMap<>();

        Map<String, ExtendedMachineImpl> machines;
        Map<String, ServerConf2Impl> servers;
        Map<String, String> properties;
        EnvironmentImpl env;

        servers = new HashMap<>();
        properties = new HashMap<>();
        properties.put("prop1", "value1");
        properties.put("prop2", "value2");
        servers.put("ref1", new ServerConf2Impl("port1", "proto1", properties));
        properties = new HashMap<>();
        properties.put("prop3", "value3");
        properties.put("prop4", "value4");
        servers.put("ref2", new ServerConf2Impl("port2", "proto2", properties));
        machines = new HashMap<>();
        machines.put("machine1", new ExtendedMachineImpl(asList("org.eclipse.che.ws-agent", "someAgent"),
                                                         servers,
                                                         new HashMap<>(singletonMap("memoryLimitBytes", "10000"))));
        servers = new HashMap<>();
        properties = new HashMap<>();
        properties.put("prop5", "value5");
        properties.put("prop6", "value6");
        servers.put("ref3", new ServerConf2Impl("port3", "proto3", properties));
        properties = new HashMap<>();
        properties.put("prop7", "value7");
        properties.put("prop8", "value8");
        servers.put("ref4", new ServerConf2Impl("port4", "proto4", properties));
        machines = new HashMap<>();
        machines.put("machine2", new ExtendedMachineImpl(asList("ws-agent2", "someAgent2"),
                                                         servers,
                                                         new HashMap<>(singletonMap("memoryLimitBytes", "10000"))));
        env = new EnvironmentImpl();
        env.setRecipe(new EnvironmentRecipeImpl("type", "contentType", "content", null));
        env.setMachines(machines);

        environments.put("my-environment", env);

        env = new EnvironmentImpl();
        servers = new HashMap<>();
        properties = new HashMap<>();
        servers.put("ref11", new ServerConf2Impl("port11", "proto11", properties));
        servers.put("ref12", new ServerConf2Impl("port12", "proto12", null));
        machines = new HashMap<>();
        machines.put("machine11", new ExtendedMachineImpl(emptyList(),
                                                          servers,
                                                          new HashMap<>(singletonMap("memoryLimitBytes", "10000"))));
        servers.put("ref13", new ServerConf2Impl("port13", "proto13", singletonMap("prop11", "value11")));
        servers.put("ref14", new ServerConf2Impl("port4", null, null));
        servers.put("ref15", new ServerConf2Impl(null, null, null));
        machines.put("machine12", new ExtendedMachineImpl(null,
                                                          servers,
                                                          new HashMap<>(singletonMap("memoryLimitBytes", "10000"))));
        machines.put("machine13", new ExtendedMachineImpl(null,
                                                          null,
                                                          new HashMap<>(singletonMap("memoryLimitBytes", "10000"))));
        env.setRecipe(new EnvironmentRecipeImpl("type", "contentType", "content", null));
        env.setMachines(machines);

        environments.put("my-environment-2", env);

        env = new EnvironmentImpl();
        env.setRecipe(new EnvironmentRecipeImpl(null, null, null, null));
        env.setMachines(null);

        environments.put("my-environment-3", env);

        // projects
        final ProjectConfigImpl project1 = new ProjectConfigImpl();
        project1.setName("test-project-name");
        project1.setDescription("This is test project");
        project1.setPath("/path/to/project");
        project1.setType("maven");
        project1.setMixins(singletonList("git"));

        final Map<String, List<String>> projectAttrs = new HashMap<>(4);
        projectAttrs.put("project.attribute1", singletonList("value1"));
        projectAttrs.put("project.attribute2", asList("value2", "value3"));
        project1.setAttributes(projectAttrs);

        final Map<String, String> sourceParameters = new HashMap<>(4);
        sourceParameters.put("source-parameter-1", "value1");
        sourceParameters.put("source-parameter-2", "value2");
        project1.setSource(new SourceStorageImpl("sources-type", "sources-location", sourceParameters));

        final List<ProjectConfigImpl> projects = singletonList(project1);

        // commands
        final List<CommandImpl> commands = new ArrayList<>(3);
        commands.add(new CommandImpl("MCI", "mvn clean install", "maven"));
        commands.add(new CommandImpl("bower install", "bower install", "bower"));
        commands.add(new CommandImpl("build without tests", "mvn clean install -Dmaven.test.skip", "maven"));

        // attributes
        final Map<String, String> attributes = new HashMap<>(8);
        attributes.put("test.attribute1", "test-value1");
        attributes.put("test.attribute2", "test-value2");
        attributes.put("test.attribute3", "test-value3");

        return WorkspaceImpl.builder()
                            .setId(generate("workspace", 16))
                            .setConfig(new WorkspaceConfigImpl("test-workspace-name",
                                                               "This is test workspace",
                                                               null,
                                                               commands,
                                                               projects,
                                                               environments))
                            .setAccount(new AccountImpl("accountId", "user123", "test"))
                            .build();
    }

