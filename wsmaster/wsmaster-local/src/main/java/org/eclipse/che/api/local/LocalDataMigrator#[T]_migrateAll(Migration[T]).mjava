    /**
     * Migrates entities and skips those which are already migrated.
     *
     * @param migration
     *         the migration
     * @param <T>
     *         the type of the migration
     * @return the count of migrated entities
     * @throws Exception
     *         when any error occurs
     */
    private static <T> int migrateAll(Migration<T> migration) throws Exception {
        int migrated = 0;
        for (T entity : migration.getAllEntities()) {
            // Skip those entities which are already migrated.
            // e.g. this check allows migration to fail and then continue from failed point
            try {
                if (migration.isMigrated(entity)) continue;
            } catch (Exception x) {
                LOG.error("Couldn't check if the entity '{}' is migrated due to occurred error", entity);
                throw x;
            }

            // The entity is not migrated, so migrate it
            try {
                migration.migrate(entity);
            } catch (Exception x) {
                LOG.error("Error migrating the entity '{}", entity);
                throw x;
            }
            migrated++;
        }
        return migrated;
    }

