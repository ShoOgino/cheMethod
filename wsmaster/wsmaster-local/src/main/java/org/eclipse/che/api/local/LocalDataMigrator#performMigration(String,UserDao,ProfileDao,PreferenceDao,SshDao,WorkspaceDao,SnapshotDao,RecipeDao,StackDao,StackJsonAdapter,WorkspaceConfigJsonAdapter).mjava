    @Inject
    @PostConstruct
    public void performMigration(@Named("che.database") String baseDir,
                                 UserDao userDao,
                                 ProfileDao profileDao,
                                 PreferenceDao preferenceDao,
                                 SshDao sshDao,
                                 WorkspaceDao workspaceDao,
                                 SnapshotDao snapshotDao,
                                 RecipeDao recipeDao,
                                 StackDao stackDao,
                                 StackJsonAdapter stackJsonAdapter,
                                 WorkspaceConfigJsonAdapter cfgAdapter) throws Exception {
        final LocalStorageFactory factory = new LocalStorageFactory(baseDir);

        // Create all the objects needed for migration, the order is important
        final List<Migration<?>> migrations = new ArrayList<>();
        final Map<Class<?>, Object> adapters = ImmutableMap.of(WorkspaceImpl.class, new WorkspaceDeserializer(),
                                                               Recipe.class, new RecipeTypeAdapter(),
                                                               ProjectConfig.class, new ProjectConfigAdapter(),
                                                               WorkspaceConfigImpl.class, new WorkspaceConfigDeserializer(cfgAdapter));
        migrations.add(new UserMigration(factory.create(LocalUserDaoImpl.FILENAME), userDao));
        migrations.add(new ProfileMigration(factory.create(LocalProfileDaoImpl.FILENAME), profileDao));
        migrations.add(new PreferencesMigration(factory.create(LocalPreferenceDaoImpl.FILENAME), preferenceDao));
        migrations.add(new SshKeyMigration(factory.create(LocalSshDaoImpl.FILENAME), sshDao));
        migrations.add(new WorkspaceMigration(factory.create(LocalWorkspaceDaoImpl.FILENAME, adapters), workspaceDao, userDao));
        migrations.add(new SnapshotMigration(factory.create(LocalSnapshotDaoImpl.FILENAME), snapshotDao));
        migrations.add(new RecipeMigration(factory.create(LocalRecipeDaoImpl.FILENAME), recipeDao));
        migrations.add(new StackMigration(factory.create(StackLocalStorage.STACK_STORAGE_FILE,
                                                         singletonMap(StackImpl.class,
                                                                      new StackDeserializer(stackJsonAdapter))), stackDao));

        long globalMigrationStart = -1;

        for (Migration<?> migration : migrations) {
            // If there is no file, then migration for this entity type is already done, skip it
            if (!Files.exists(migration.getPath())) continue;

            // Inform about the general migration start, if not informed
            if (globalMigrationStart == -1) {
                globalMigrationStart = currentTimeMillis();
                LOG.info("Components migration started", LocalDateTime.now());
            }

            // Migrate entities
            LOG.info("Starting migration of '{}' entities", migration.getEntityName());
            final long migrationStart = currentTimeMillis();
            final int migrated = migrateAll(migration);
            LOG.info("Migration of '{}' entities successfully finished. Migration time: {}ms, Migrated count: {}, Skipped count: {}",
                     migration.getEntityName(),
                     currentTimeMillis() - migrationStart,
                     migrated,
                     migration.getAllEntities().size() - migrated);

            // Backup the file, and remove the original one to avoid future migrations
            // e.g. /storage/users.json becomes /storage/users.json.backup
            final Path dataFile = migration.getPath();
            try {
                Files.move(dataFile, dataFile.resolveSibling(dataFile.getFileName().toString() + ".backup"));
            } catch (IOException x) {
                LOG.error("Couldn't move {} to {}.backup due to an error. Error: {}",
                          dataFile.toString(),
                          dataFile.toString(),
                          x.getLocalizedMessage());
                throw x;
            }
        }

        if (globalMigrationStart != -1) {
            LOG.info("Components migration successfully finished. Total migration time: {}ms", currentTimeMillis() - globalMigrationStart);
        }
    }

