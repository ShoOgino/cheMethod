    private void checkConflicts(UserImpl user, String operation) throws ConflictException {
        for (UserImpl existingUser : users.values()) {
            if (!existingUser.getId().equals(user.getId())) {
                if (existingUser.getName().equals(user.getName()))
                    throw new ConflictException(
                            format("Unable to %s a new user with name '%s' the name is already in use.",
                                   operation,
                                   user.getName()));
                if (existingUser.getEmail().equals(user.getEmail())) {
                    throw new ConflictException(
                            format("Unable to %s a new user with email '%s' the email is already in use.",
                                   operation,
                                   user.getEmail()));
                }
                if (!Collections.disjoint(existingUser.getAliases(), user.getAliases())) {
                    final HashSet<String> aliases = new HashSet<>(existingUser.getAliases());
                    aliases.retainAll(user.getAliases());
                    throw new ConflictException(
                            format("Unable to %s a new user with aliases '%s', the aliases are already in use",
                                   operation,
                                   aliases));
                }
            }
        }
    }

