    /**
     * Searches for recipes which have read permissions for specified user and type is equal to specified {@code type}
     * and tags contain all of specified {@code tags}.
     * <p/>
     * Not specified {@code tags} or {@code type} will not take a part of search,
     * i.e. when {@code type} is {@code null} then only recipes which tags
     * contain all of specified {@code tags} will be returned,
     * when {@code tags} are {@code null} then only recipes which type
     * is equal to specified {@code type} will be returned,
     * when both {@code type} and {@code tags} are {@code null} then all available
     * recipes will be returned.
     *
     * @param user
     *         user id for permission checking
     * @param tags
     *         recipe tags to search recipes, may be {@code null}
     * @param type
     *         recipe type to search recipes, may be {@code null}
     * @param skipCount
     *         count of items which should be skipped,
     *         if found items contain fewer than {@code skipCount} items
     *         then empty list will be returned
     * @param maxItems
     *         max count of items to fetch
     * @return recipes which type is equal to specified {@code type}
     * and tags contain all of specified {@code tags}
     * @throws ServerException
     *         when any error occurs
     */
    List<RecipeImpl> search(String user, List<String> tags, String type, int skipCount, int maxItems) throws ServerException;

