    /**
     * Synchronously creates and starts machine from scratch using recipe.
     *
     * @param machineConfig
     *         configuration that contains all information needed for machine creation
     * @param workspaceId
     *         id of the workspace the created machine will belong to
     * @param environmentName
     *         environment name the created machine will belongs to
     * @return new machine
     * @throws UnsupportedRecipeException
     *         if recipe isn't supported
     * @throws InvalidRecipeException
     *         if recipe is not valid
     * @throws NotFoundException
     *         if machine type from recipe is unsupported
     * @throws NotFoundException
     *         if snapshot not found
     * @throws NotFoundException
     *         if no instance provider implementation found for provided machine type
     * @throws SnapshotException
     *         if error occurs on retrieving snapshot information
     * @throws ConflictException
     *         if machine with given name already exists
     * @throws BadRequestException
     *         if machine display name is invalid
     * @throws MachineException
     *         if any other exception occurs during starting
     */
    public MachineImpl createMachineSync(MachineConfig machineConfig,
                                         final String workspaceId,
                                         final String environmentName)
            throws NotFoundException,
                   SnapshotException,
                   ConflictException,
                   MachineException,
                   BadRequestException {
        LOG.info("Creating machine [ws = {}: env = {}: machine = {}]", workspaceId, environmentName, machineConfig.getName());
        final MachineImpl machine = createMachine(machineConfig, workspaceId, environmentName, this::createInstance, null);
        LOG.info("Machine [ws = {}: env = {}: machine = {}] was successfully created, its id is '{}'",
                 workspaceId,
                 environmentName,
                 machineConfig.getName(),
                 machine.getId());

        return machineRegistry.getMachine(machine.getId());
    }

