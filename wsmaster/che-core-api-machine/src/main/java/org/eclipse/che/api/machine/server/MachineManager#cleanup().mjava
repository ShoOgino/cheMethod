    @PreDestroy
    private void cleanup() {
        eventService.unsubscribe(machineCleaner);

        executor.shutdown();

        try {
            for (MachineImpl machine : machineRegistry.getMachines()) {
                try {
                    destroy(machine.getId(), false);
                } catch (NotFoundException ignore) {
                    // it is ok, machine has been already destroyed
                } catch (Exception e) {
                    LOG.warn(e.getMessage());
                }
            }
        } catch (MachineException e) {
            LOG.error(e.getLocalizedMessage(), e);
        }

        boolean interrupted = false;
        try {
            if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                executor.shutdownNow();
                if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                    LOG.warn("Unable terminate main pool");
                }
            }
        } catch (InterruptedException e) {
            interrupted = true;
            executor.shutdownNow();
        }

        final java.io.File[] files = machineLogsDir.listFiles();
        if (files != null && files.length > 0) {
            for (java.io.File f : files) {
                if (!IoUtil.deleteRecursive(f)) {
                    LOG.warn("Failed delete {}", f);
                }
            }
        }
        if (interrupted) {
            Thread.currentThread().interrupt();
        }
    }

