    /**
     * Asynchronously saves machine to snapshot.
     *
     * @param machineId
     *         id of machine for saving
     * @param owner
     *         owner for new snapshot
     * @param description
     *         optional description that should help to understand purpose of new snapshot in future
     * @return {@link SnapshotImpl} that will be stored in background
     * @throws NotFoundException
     *         if machine with specified id doesn't exist
     * @throws MachineException
     *         if other error occur
     */
    public SnapshotImpl save(String machineId, String owner, String description)
            throws NotFoundException, MachineException {
        final Instance machine = getInstance(machineId);
        final SnapshotImpl snapshot = SnapshotImpl.builder()
                                                  .generateId()
                                                  .setType(machine.getConfig().getType())
                                                  .setOwner(owner)
                                                  .setWorkspaceId(machine.getWorkspaceId())
                                                  .setDescription(description)
                                                  .setDev(machine.getConfig().isDev())
                                                  .setEnvName(machine.getEnvName())
                                                  .setMachineName(machine.getConfig().getName())
                                                  .useCurrentCreationDate()
                                                  .build();
        executor.submit(ThreadLocalPropagateContext.wrap(() -> {
            try {
                doSaveMachine(snapshot, machine);
            } catch (Exception ignored) {
                // exception is already logged in #doSaveMachine
            }
        }));
        return snapshot;
    }

