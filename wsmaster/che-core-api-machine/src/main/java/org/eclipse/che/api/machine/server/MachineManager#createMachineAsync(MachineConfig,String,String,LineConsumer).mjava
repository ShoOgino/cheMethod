    /**
     * Asynchronously creates and starts machine from scratch.
     *
     * @param machineConfig
     *         configuration that contains all information needed for machine creation
     * @param workspaceId
     *         id of the workspace the created machine will belong to
     * @param environmentName
     *         environment name the created machine will belongs to
     * @param outputConsumer
     *         output consumer of machine
     * @return new machine
     * @throws NotFoundException
     *         if machine type from recipe is unsupported
     * @throws NotFoundException
     *         if snapshot not found
     * @throws NotFoundException
     *         if no instance provider implementation found for provided machine type
     * @throws SnapshotException
     *         if error occurs on retrieving snapshot information
     * @throws ConflictException
     *         if machine with given name already exists
     * @throws BadRequestException
     *         if machine display name is invalid
     * @throws MachineException
     *         if any other exception occurs during starting
     */
    public MachineImpl createMachineAsync(MachineConfig machineConfig,
                                          final String workspaceId,
                                          final String environmentName,
                                          LineConsumer outputConsumer)
            throws NotFoundException,
                   SnapshotException,
                   ConflictException,
                   MachineException,
                   BadRequestException {
        return createMachine(normalizeMachineConfig(machineConfig),
                             workspaceId,
                             environmentName,
                             (instanceProvider, machine, machineLogger) ->
                                     executor.execute(ThreadLocalPropagateContext.wrap(() -> {
                                         try {
                                             createInstance(instanceProvider,
                                                            machine,
                                                            machineLogger);
                                         } catch (MachineException e) {
                                             if (!(e.getCause() instanceof InvalidRecipeException)) {
                                                 LOG.error(e.getLocalizedMessage(), e);
                                             }
                                             // todo what should we do in that case?
                                         }
                                     })),
                             null,
                             outputConsumer);
    }

