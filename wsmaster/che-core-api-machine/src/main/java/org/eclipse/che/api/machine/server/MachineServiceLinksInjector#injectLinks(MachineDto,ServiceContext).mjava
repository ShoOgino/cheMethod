    public MachineDto injectLinks(MachineDto machine, ServiceContext serviceContext) {
        final UriBuilder uriBuilder = serviceContext.getServiceUriBuilder();
        final List<Link> links = new ArrayList<>();

        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(MachineService.class, "getMachineById")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             "self link"));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(MachineService.class, "getMachines")
                                       .build()
                                       .toString(),
                             null,
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_MACHINES,
                             newDto(LinkParameter.class).withName("workspace")
                                                        .withRequired(true)
                                                        .withDefaultValue(machine.getWorkspaceId())));
        links.add(createLink(HttpMethod.DELETE,
                             uriBuilder.clone()
                                       .path(MachineService.class, "destroyMachine")
                                       .build(machine.getId())
                                       .toString(),
                             Constants.LINK_REL_DESTROY_MACHINE));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(MachineService.class, "getSnapshots")
                                       .build()
                                       .toString(),
                             null,
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_SNAPSHOTS,
                             newDto(LinkParameter.class).withName("workspace")
                                                        .withRequired(true)
                                                        .withDefaultValue(machine.getWorkspaceId())));
        links.add(createLink(HttpMethod.POST,
                             uriBuilder.clone()
                                       .path(MachineService.class, "saveSnapshot")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             APPLICATION_JSON,
                             Constants.LINK_REL_SAVE_SNAPSHOT));
        links.add(createLink(HttpMethod.POST,
                             uriBuilder.clone()
                                       .path(MachineService.class, "executeCommandInMachine")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             APPLICATION_JSON,
                             Constants.LINK_REL_EXECUTE_COMMAND,
                             newDto(LinkParameter.class).withName("outputChannel")
                                                        .withRequired(false)));
        links.add(createLink(HttpMethod.GET,
                             uriBuilder.clone()
                                       .path(MachineService.class, "getProcesses")
                                       .build(machine.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             Constants.LINK_REL_GET_PROCESSES));
        final URI getLogsUri = uriBuilder.clone()
                                         .path(MachineService.class, "getMachineLogs")
                                         .build(machine.getId());
        links.add(createLink(HttpMethod.GET, getLogsUri.toString(), TEXT_PLAIN, Constants.LINK_REL_GET_MACHINE_LOGS));

        injectTerminalLink(machine, serviceContext, links);

        // add links to websocket channels
        final Link machineChannelLink = createLink("GET",
                                                   serviceContext.getBaseUriBuilder()
                                                                 .path("ws")
                                                                 .path(machine.getWorkspaceId())
                                                                 .scheme("https".equals(getLogsUri.getScheme()) ? "wss" : "ws")
                                                                 .build()
                                                                 .toString(),
                                                   null);
        final LinkParameter channelParameter = newDto(LinkParameter.class).withName("channel")
                                                                          .withRequired(true);

        injectMachineChannelsLinks(machine.getConfig(),
                                   machine.getWorkspaceId(),
                                   machine.getEnvName(),
                                   machineChannelLink,
                                   channelParameter);

        return machine.withLinks(links);
    }

