    @BeforeMethod
    public void setUp() throws Exception {
        final SnapshotDao snapshotDao = mock(SnapshotDao.class);
        final EventService eventService = mock(EventService.class);
        final String machineLogsDir = targetDir().resolve("logs-dir").toString();
        IoUtil.deleteRecursive(new File(machineLogsDir));
        manager = spy(new MachineManager(snapshotDao,
                                         machineRegistry,
                                         machineInstanceProviders,
                                         machineLogsDir,
                                         eventService,
                                         DEFAULT_MACHINE_MEMORY_SIZE_MB,
                                         wsAgentLauncher));

        EnvironmentContext envCont = new EnvironmentContext();
        envCont.setSubject(new SubjectImpl(null, USER_ID, null, null, false));
        EnvironmentContext.setCurrent(envCont);

        RecipeImpl recipe = new RecipeImpl().withScript("script").withType("Dockerfile");
//        doNothing().when(manager).createMachineLogsDir(anyString());
        doReturn(MACHINE_ID).when(manager).generateMachineId();
        doReturn(processLogger).when(manager).getProcessLogger(MACHINE_ID, 111, "outputChannel");
        when(machineInstanceProviders.getProvider(anyString())).thenReturn(instanceProvider);
        HashSet<String> recipeTypes = new HashSet<>();
        recipeTypes.add("test type 1");
        recipeTypes.add("dockerfile");
        when(instanceProvider.getRecipeTypes()).thenReturn(recipeTypes);
        when(instanceProvider.createInstance(any(Machine.class), any(LineConsumer.class))).thenReturn(instance);
        when(machineRegistry.getInstance(anyString())).thenReturn(instance);
        when(command.getCommandLine()).thenReturn("CommandLine");
        when(command.getName()).thenReturn("CommandName");
        when(command.getType()).thenReturn("CommandType");
        when(machineRegistry.getInstance(MACHINE_ID)).thenReturn(instance);
        when(instance.createProcess(command, "outputChannel")).thenReturn(instanceProcess);
        when(instanceProcess.getPid()).thenReturn(111);
    }

