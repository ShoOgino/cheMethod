    @Override
    public Promise<Void> send() {
        requestBuilder.setIncludeCredentials(true);
        final Executor.ExecutorBody<Void> body = new Executor.ExecutorBody<Void>() {
            @Override
            public void apply(final ResolveFunction<Void> resolve, final RejectFunction reject) {
                tokenPromise.then(new Operation<String>() {
                    @Override
                    public void apply(String machine) throws OperationException {
                        MachineAsyncRequest.this.header(AUTHORIZATION, machine);
                        MachineAsyncRequest.super.send().then(new Operation<Void>() {
                            @Override
                            public void apply(Void arg) throws OperationException {
                                resolve.apply(null);
                            }
                        }).catchError(new Operation<PromiseError>() {
                            @Override
                            public void apply(PromiseError arg) throws OperationException {
                                reject.apply(arg);
                            }
                        });
                    }
                }).catchError(new Operation<PromiseError>() {
                    @Override
                    public void apply(PromiseError promiseError) throws OperationException {
                        reject.apply(promiseError);
                    }
                });
            }
        };
        final Executor<Void> executor = Executor.create(body);
        return Promises.create(executor);
    }

