  @Test
  public void shouldProvisionPluginWorkspaceAttributeWithReferenceDuringChePluginComponentApplying()
      throws Exception {

    String superPluginId = "eclipse/super-plugin/0.0.1";
    String reference = "https://myregistry.com/infolder/meta.yaml";
    String meta =
        "apiVersion: v2\n"
            + "publisher: eclipse\n"
            + "name: super-plugin\n"
            + "version: 0.0.1\n"
            + "type: Che Plugin";
    // given
    ComponentImpl superPluginComponent = new ComponentImpl();
    superPluginComponent.setAlias("super-plugin");
    superPluginComponent.setId(superPluginId);
    superPluginComponent.setType(PLUGIN_COMPONENT_TYPE);
    superPluginComponent.setMemoryLimit("1234M");

    when(fileContentProvider.fetchContent(anyString())).thenReturn(meta);

    ComponentImpl customPluginComponent = new ComponentImpl();
    customPluginComponent.setAlias("custom");
    customPluginComponent.setType(PLUGIN_COMPONENT_TYPE);
    customPluginComponent.setReference(reference);

    WorkspaceConfigImpl workspaceConfig = new WorkspaceConfigImpl();

    // when
    pluginComponentApplier.apply(workspaceConfig, superPluginComponent, fileContentProvider);
    pluginComponentApplier.apply(workspaceConfig, customPluginComponent, fileContentProvider);

    // then
    String workspaceTooling =
        workspaceConfig.getAttributes().get(WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE);
    assertTrue(workspaceTooling.matches("(.+/.+/.+),(https://.+/.+/.+)"));
    assertTrue(workspaceTooling.contains(superPluginId));
    assertTrue(workspaceTooling.contains(reference));
    assertEquals(
        workspaceConfig
            .getAttributes()
            .get(format(SIDECAR_MEMORY_LIMIT_ATTR_TEMPLATE, "eclipse/super-plugin")),
        "1234M");
  }

