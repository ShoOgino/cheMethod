    @Test
    public void releasesClientsWhoWaitForStartTaskResultAndTaskIsCompleted() throws Exception {
        ExecutorService pool = Executors.newCachedThreadPool();
        CountDownLatch releasedLatch = new CountDownLatch(5);
        // this thread + 5 awaiting threads
        CyclicBarrier callTaskBarrier = new CyclicBarrier(6);

        WorkspaceImpl workspace = newWorkspace("workspace", "env-name");
        allowEnvironmentStart(workspace, "env-name");

        // the action
        runtimes.startAsync(workspace, "env-name", false);

        // register waiters
        for (int i = 0; i < 5; i++) {
            WorkspaceRuntimes.StartTask startTask = runtimeStates.get(workspace.getId()).startTask;
            pool.submit(() -> {
                // wait all the task to meet this barrier
                callTaskBarrier.await();

                // wait for start task to finish
                startTask.await();

                // good, release a part
                releasedLatch.countDown();
                return null;
            });
        }

        callTaskBarrier.await();
        captureAsyncTaskAndExecuteSynchronously();
        try {
            assertTrue(releasedLatch.await(2, TimeUnit.SECONDS), "start task wait clients are not released");
        } finally {
            shutdownAndWaitPool(pool);
        }
    }

