//
//    @Test
//    public void shouldBeAbleToStartMachine() throws Exception {
//        // when
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace,
//                       workspace.getConfig().getDefaultEnv(),
//                       false);
//        OldMachineConfigImpl config = createConfig(false);
//        Instance instance = mock(Instance.class);
//        when(envEngine.startMachine(anyString(), any(OldMachineConfig.class), any())).thenReturn(instance);
//        when(instance.getConfig()).thenReturn(config);
//
//        // when
//        Instance actual = runtimes.startMachine(workspace.getId(), config);
//
//        // then
//        assertEquals(actual, instance);
//        verify(envEngine).startMachine(eq(workspace.getId()), eq(config), any());
//    }
//
////    @Test
////    public void shouldAddTerminalAgentOnMachineStart() throws Exception {
////        // when
////        WorkspaceImpl workspace = createWorkspace();
////        runtimes.start(workspace,
////                       workspace.getConfig().getDefaultEnv(),
////                       false);
////        OldMachineConfigImpl config = createConfig(false);
////        Runtime instance = mock(Runtime.class);
////        when(envEngine.startMachine(anyString(), any(OldMachineConfig.class), any())).thenReturn(instance);
////        when(instance.getConfig()).thenReturn(config);
////
////        // when
////        Runtime actual = runtimes.startMachine(workspace.getId(), config);
////
////        // then
////        assertEquals(actual, instance);
////        verify(envEngine).startMachine(eq(workspace.getId()),
////                                       eq(config),
////                                       eq(singletonList("org.eclipse.che.terminal")));
////        verify(runtimes).launchAgents(instance, singletonList("org.eclipse.che.terminal"));
////    }
//
//    @Test(expectedExceptions = NotFoundException.class,
//          expectedExceptionsMessageRegExp = "Workspace with id '.*' is not running")
//    public void shouldNotStartMachineIfEnvironmentIsNotRunning() throws Exception {
//        // when
//        OldMachineConfigImpl config = createConfig(false);
//
//        // when
//        runtimes.startMachine("someWsID", config);
//
//        // then
//        verify(envEngine, never()).startMachine(anyString(), any(OldMachineConfig.class), any());
//    }
//
//    @Test
//    public void shouldBeAbleToStopMachine() throws Exception {
//        // when
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace,
//                       workspace.getConfig().getDefaultEnv(),
//                       false);
//
//        // when
//        runtimes.stopMachine(workspace.getId(), "testMachineId");
//
//        // then
//        verify(envEngine).stopMachine(workspace.getId(), "testMachineId");
//    }
//
//    @Test(expectedExceptions = NotFoundException.class,
//          expectedExceptionsMessageRegExp = "Workspace with id 'someWsID' is not running")
//    public void shouldNotStopMachineIfEnvironmentIsNotRunning() throws Exception {
//        // when
//        runtimes.stopMachine("someWsID", "someMachineId");
//
//        // then
//        verify(envEngine, never()).stopMachine(anyString(), anyString());
//    }
//
//    @Test
//    public void shouldBeAbleToGetMachine() throws Exception {
//        // given
//        Instance expected = createMachine(false);
//        when(envEngine.getMachine(WORKSPACE_ID, expected.getId())).thenReturn(expected);
//
//        // when
//        OldMachine actualMachine = runtimes.getMachine(WORKSPACE_ID, expected.getId());
//
//        // then
//        assertEquals(actualMachine, expected);
//        verify(envEngine).getMachine(WORKSPACE_ID, expected.getId());
//    }
//
//    @Test
//    public void shouldBeAbleToGetStatusOfRunningWorkspace() throws Exception {
//        // given
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace,
//                       workspace.getConfig().getDefaultEnv(),
//                       false);
//
//        // when
//        WorkspaceStatus status = runtimes.getStatus(workspace.getId());
//
//        // then
//        assertEquals(status, RUNNING);
//    }
//
//
//    @Test
//    public void shouldBeAbleToGetStatusOfStoppedWorkspace() throws Exception {
//        // given
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace,
//                       workspace.getConfig().getDefaultEnv(),
//                       false);
//        runtimes.stop(workspace.getId());
//
//        // when
//        WorkspaceStatus status = runtimes.getStatus(workspace.getId());
//
//        // then
//        assertEquals(status, STOPPED);
//    }
//
//    @Test(expectedExceptions = NotFoundException.class,
//          expectedExceptionsMessageRegExp = "test exception")
//    public void shouldThrowExceptionIfGetMachineFromEnvEngineThrowsException() throws Exception {
//        // given
//        Instance expected = createMachine(false);
//        when(envEngine.getMachine(WORKSPACE_ID, expected.getId()))
//                .thenThrow(new NotFoundException("test exception"));
//
//        // when
//        runtimes.getMachine(WORKSPACE_ID, expected.getId());
//
//        // then
//        verify(envEngine).getMachine(WORKSPACE_ID, expected.getId());
//    }
//
//    @Test
//    public void shouldBeAbleToGetAllWorkspacesWithExistingRuntime() throws Exception {
//        // then
//        Map<String, WorkspaceRuntimes.WorkspaceState> expectedWorkspaces = new HashMap<>();
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace,
//                       workspace.getConfig().getDefaultEnv(),
//                       false);
//        expectedWorkspaces.put(workspace.getId(),
//                               new WorkspaceRuntimes.WorkspaceState(RUNNING,
//                                                                    workspace.getConfig().getDefaultEnv()));
//        WorkspaceImpl workspace2 = spy(createWorkspace());
//        when(workspace2.getId()).thenReturn("testWsId");
//        when(envEngine.getMachines(workspace2.getId()))
//                .thenReturn(Collections.singletonList(createMachine(true)));
//        runtimes.start(workspace2,
//                       workspace2.getConfig().getDefaultEnv(),
//                       false);
//        expectedWorkspaces.put(workspace2.getId(),
//                               new WorkspaceRuntimes.WorkspaceState(RUNNING,
//                                                                    workspace2.getConfig().getDefaultEnv()));
//
//        // when
//        Map<String, WorkspaceRuntimes.WorkspaceState> actualWorkspaces = runtimes.getWorkspaces();
//
//        // then
//        assertEquals(actualWorkspaces, expectedWorkspaces);
//    }
//
//    @Test
//    public void changesStatusFromRunningToSnapshotting() throws Exception {
//        final WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace, workspace.getConfig().getDefaultEnv(), false);
//
//        runtimes.snapshotAsync(workspace.getId());
//
//        assertEquals(runtimes.get(workspace.getId()).getRuntimeStatus(), WorkspaceStatus.SNAPSHOTTING);
//    }
//
//    @Test
//    public void changesStatusFromSnapshottingToRunning() throws Exception {
//        final WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace, workspace.getConfig().getDefaultEnv(), false);
//
//        runtimes.snapshotAsync(workspace.getId());
//
//        captureAsyncTaskAndExecuteSynchronously();
//        assertEquals(runtimes.get(workspace.getId()).getRuntimeStatus(), WorkspaceStatus.RUNNING);
//    }
//
//    @Test(expectedExceptions = NotFoundException.class,
//          expectedExceptionsMessageRegExp = "Workspace with id 'non-existing' is not running")
//    public void throwsNotFoundExceptionWhenBeginningSnapshottingForNonExistingWorkspace() throws Exception {
//        runtimes.snapshot("non-existing");
//    }
//
//    @Test(expectedExceptions = ConflictException.class,
//          expectedExceptionsMessageRegExp = "Workspace with id '.*' is not 'RUNNING', it's status is 'SNAPSHOTTING'")
//    public void throwsConflictExceptionWhenBeginningSnapshottingForNotRunningWorkspace() throws Exception {
//        final WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace, workspace.getConfig().getDefaultEnv(), false);
//
//        runtimes.snapshotAsync(workspace.getId());
//        runtimes.snapshotAsync(workspace.getId());
//    }
//
//    @Test(expectedExceptions = ServerException.class, expectedExceptionsMessageRegExp = "can't save")
//    public void failsToCreateSnapshotWhenDevMachineSnapshottingFailed() throws Exception {
//        final WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace, workspace.getConfig().getDefaultEnv(), false);
//        when(envEngine.saveSnapshot(any(), any())).thenThrow(new ServerException("can't save"));
//
//        try {
//            runtimes.snapshot(workspace.getId());
//        } catch (Exception x) {
//            verify(eventService).publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
//                                                   .withWorkspaceId(workspace.getId())
//                                                   .withStatus(WorkspaceStatus.SNAPSHOTTING)
//                                                   .withPrevStatus(WorkspaceStatus.RUNNING)
//                                                   .withEventType(EventType.SNAPSHOT_CREATING));
//            verify(eventService).publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
//                                                   .withWorkspaceId(workspace.getId())
//                                                   .withError("can't save")
//                                                   .withStatus(WorkspaceStatus.RUNNING)
//                                                   .withPrevStatus(WorkspaceStatus.SNAPSHOTTING)
//                                                   .withEventType(EventType.SNAPSHOT_CREATION_ERROR));
//            throw x;
//        }
//    }
//
//    @Test(expectedExceptions = ServerException.class, expectedExceptionsMessageRegExp = "test")
//    public void removesNewlyCreatedSnapshotsWhenFailedToSaveTheirsMetadata() throws Exception {
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace, workspace.getConfig().getDefaultEnv(), false);
//        doThrow(new SnapshotException("test")).when(snapshotDao)
//                                              .replaceSnapshots(any(), any(), any());
//        SnapshotImpl snapshot = mock(SnapshotImpl.class);
//        when(envEngine.saveSnapshot(any(), any())).thenReturn(snapshot);
//
//        try {
//            runtimes.snapshot(workspace.getId());
//        } catch (Exception x) {
//            verify(eventService).publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
//                                                   .withStatus(WorkspaceStatus.SNAPSHOTTING)
//                                                   .withEventType(EventType.SNAPSHOT_CREATING)
//                                                   .withPrevStatus(WorkspaceStatus.RUNNING)
//                                                   .withWorkspaceId(workspace.getId()));
//            verify(eventService).publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
//                                                   .withStatus(WorkspaceStatus.RUNNING)
//                                                   .withEventType(EventType.SNAPSHOT_CREATION_ERROR)
//                                                   .withWorkspaceId(workspace.getId())
//                                                   .withPrevStatus(WorkspaceStatus.SNAPSHOTTING)
//                                                   .withError("test"));
//            verify(snapshotDao).replaceSnapshots(any(),
//                                                 any(),
//                                                 snapshotsCaptor.capture());
//            verify(envEngine, times(snapshotsCaptor.getValue().size())).removeSnapshot(snapshot);
//            throw x;
//        }
//    }
//
//    @Test
//    public void removesOldSnapshotsWhenNewSnapshotsMetadataSuccessfullySaved() throws Exception {
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.start(workspace, workspace.getConfig().getDefaultEnv(), false);
//        SnapshotImpl oldSnapshot = mock(SnapshotImpl.class);
//        doReturn((singletonList(oldSnapshot))).when(snapshotDao)
//                                              .replaceSnapshots(any(), any(), any());
//
//        runtimes.snapshot(workspace.getId());
//
//        verify(eventService).publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
//                                               .withStatus(WorkspaceStatus.SNAPSHOTTING)
//                                               .withEventType(EventType.SNAPSHOT_CREATING)
//                                               .withPrevStatus(WorkspaceStatus.RUNNING)
//                                               .withWorkspaceId(workspace.getId()));
//        verify(eventService).publish(DtoFactory.newDto(WorkspaceStatusEvent.class)
//                                               .withStatus(WorkspaceStatus.RUNNING)
//                                               .withEventType(EventType.SNAPSHOT_CREATED)
//                                               .withPrevStatus(WorkspaceStatus.SNAPSHOTTING)
//                                               .withWorkspaceId(workspace.getId()));
//        verify(envEngine).removeSnapshot(oldSnapshot);
//    }
//
//    private static Instance createMachine(boolean isDev) {
//        return createMachine(createConfig(isDev));
//    }
//
//    private static Instance createMachine(OldMachineConfig cfg) {
//        return new TestMachineInstance(OldMachineImpl.builder()
//                                                  .setId(NameGenerator.generate("machine", 10))
//                                                  .setWorkspaceId(WORKSPACE_ID)
//                                                  .setEnvName(ENV_NAME)
//                                                  .setConfig(new OldMachineConfigImpl(cfg))
//                                                  .build());
//    }
//
//    private static OldMachineConfigImpl createConfig(boolean isDev) {
//        return OldMachineConfigImpl.builder()
//                                .setDev(isDev)
//                                .setType("docker")
//                                .setLimits(new MachineLimitsImpl(1024))
//                                .setSource(new MachineSourceImpl("git").setLocation("location"))
//                                .setName(UUID.randomUUID().toString())
//                                .build();
//    }
//
    private static WorkspaceImpl createWorkspace() {
        EnvironmentImpl environment = new EnvironmentImpl(new RecipeImpl("test", "text/text", "", ""), null);
        WorkspaceConfigImpl wsConfig = WorkspaceConfigImpl.builder()
                                                          .setName("test workspace")
                                                          .setEnvironments(singletonMap(ENV_NAME, environment))
                                                          .setDefaultEnv(ENV_NAME)
                                                          .build();
        return new WorkspaceImpl(WORKSPACE_ID, new AccountImpl("accountId", "user123", "test"), wsConfig);
    }

