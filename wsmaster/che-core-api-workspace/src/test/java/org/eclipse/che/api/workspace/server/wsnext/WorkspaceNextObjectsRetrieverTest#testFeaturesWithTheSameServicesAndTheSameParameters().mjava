  @Test
  public void testFeaturesWithTheSameServicesAndTheSameParameters() throws Exception {
    Map<String, String> featuresAttributes =
        featuresAttribute(
            TEST_FEATURE_NAME, TEST_FEATURE_VERSION, TEST_FEATURE_2_NAME, TEST_FEATURE_2_VERSION);
    CheFeature feature1 =
        testFeature(
            TEST_SERVICE, TEST_SERVICE_VERSION, TEST_SERVICE_PARAM_NAME, TEST_SERVICE_PARAM_VALUE);
    CheFeature feature2 =
        testFeature(
            TEST_SERVICE,
            TEST_SERVICE_VERSION,
            TEST_SERVICE_PARAM_NAME,
            TEST_SERVICE_PARAM_VALUE_2);
    CheService service =
        testServiceWithEnv(TEST_SERVICE_ENV_NAME_2, TEST_SERVICE_PARAM_PLACEHOLDER);
    doReturn(feature1)
        .when(retriever)
        .getBody(eq(getFeatureURI(TEST_FEATURE_NAME, TEST_FEATURE_VERSION)), eq(CheFeature.class));
    doReturn(feature2)
        .when(retriever)
        .getBody(
            eq(getFeatureURI(TEST_FEATURE_2_NAME, TEST_FEATURE_2_VERSION)), eq(CheFeature.class));
    doReturn(service).when(retriever).getBody(any(URI.class), eq(CheService.class));

    Collection<CheService> services = retriever.get(featuresAttributes);

    // we don't know the order of values in env var from feature, so we have to match it separately
    // - can't assert whole object
    assertEquals(services.size(), 1);
    CheService actualService = services.iterator().next();
    assertEquals(actualService.getSpec().getContainers().size(), 1);
    List<EnvVar> envVars = actualService.getSpec().getContainers().iterator().next().getEnv();
    envVars
        .stream()
        .filter(envVar -> envVar.getName().equals(TEST_SERVICE_ENV_NAME_2))
        .forEach(
            envVar -> {
              assertEqualsNoOrder(
                  envVar.getValue().split(","),
                  new String[] {TEST_SERVICE_PARAM_VALUE_2, TEST_SERVICE_PARAM_VALUE});
            });
  }

