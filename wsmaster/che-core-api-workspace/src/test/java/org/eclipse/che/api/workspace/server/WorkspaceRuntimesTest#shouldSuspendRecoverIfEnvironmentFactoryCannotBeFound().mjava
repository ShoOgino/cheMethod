  @Test
  public void shouldSuspendRecoverIfEnvironmentFactoryCannotBeFound() throws Exception {
    RuntimeIdentity identity =
        new RuntimeIdentityImpl("workspace123", "default", "myId", "infraNamespace");

    // WorkspaceImpl workspaceMock = mockWorkspaceWithDevfile(identity);

    WorkspaceConfigImpl config = mock(WorkspaceConfigImpl.class);
    // EnvironmentImpl environment = mockEnvironment();
    EnvironmentImpl environment = mock(EnvironmentImpl.class);
    when(environment.getRecipe())
        .thenReturn(new RecipeImpl("UNKNOWN", "contentType1", "content1", null));

    doReturn(ImmutableMap.of(identity.getEnvName(), environment)).when(config).getEnvironments();

    WorkspaceImpl workspace = mock(WorkspaceImpl.class);
    when(workspace.getConfig()).thenReturn(config);
    when(workspace.getId()).thenReturn(identity.getWorkspaceId());
    when(workspace.getAttributes()).thenReturn(new HashMap<>());

    lenient().when(workspaceDao.get(identity.getWorkspaceId())).thenReturn(workspace);

    RuntimeContext context = mockContext(identity);
    when(context.getRuntime())
        .thenReturn(new TestInternalRuntime(context, emptyMap(), WorkspaceStatus.STARTING));
    doReturn(context).when(infrastructure).prepare(eq(identity), any());
    doReturn(null).when(testEnvFactory).create(any());
    when(statuses.get(anyString())).thenReturn(WorkspaceStatus.STARTING);

    // try recover
    try {
      runtimes.recoverOne(infrastructure, identity);
      fail("Not expected");
    } catch (ServerException e) {

    }
    ;
    verify(statuses).remove("workspace123");
    ArgumentCaptor<WorkspaceStatusEvent> captor =
        ArgumentCaptor.forClass(WorkspaceStatusEvent.class);
    verify(eventService).publish(captor.capture());
    WorkspaceStatusEvent event = captor.getValue();
    assertEquals("workspace123", event.getWorkspaceId());
    assertEquals(WorkspaceStatus.STOPPING, event.getPrevStatus());
    assertEquals(WorkspaceStatus.STOPPED, event.getStatus());
    assertEquals(
        "Workspace is stopped. Reason: InternalEnvironmentFactory is not configured for recipe type: 'UNKNOWN'",
        event.getError());
    assertFalse(runtimesMap.containsKey("workspace123"));
  }

