//    @Test(expectedExceptions = ServerException.class,
//          expectedExceptionsMessageRegExp = "Dev machine is not found in active environment of workspace 'workspace123'")
//    public void shouldThrowExceptionOnGetRuntimesIfDevMachineIsMissingInTheEnvironment() throws Exception {
//        // given
//        WorkspaceImpl workspace = createWorkspace();
//
//        runtimes.start(workspace,
//                       workspace.getConfig().getDefaultEnv(),
//                       false);
//        when(envEngine.getMachines(workspace.getId()))
//                .thenReturn(asList(createMachine(false), createMachine(false)));
//
//        // when
//        runtimes.get(workspace.getId());
//    }
//
//    @Test
//    public void shouldFetchMachinesFromEnvEngineOnGetRuntime() throws Exception {
//        // given
//        WorkspaceImpl workspace = createWorkspace();
//        Instance devMachine = createMachine(true);
//        List<Instance> machines = asList(devMachine, createMachine(false));
//        when(envEngine.start(anyString(),
//                             anyString(),
//                             any(Environment.class),
//                             anyBoolean(),
//                             any()))
//                .thenReturn(machines);
//        when(envEngine.getMachines(WORKSPACE_ID)).thenReturn(machines);
//
//        runtimes.start(workspace,
//                       workspace.getConfig().getDefaultEnv(),
//                       false);
//
//        // when
//        RuntimeDescriptor runtimeDescriptor = runtimes.get(workspace.getId());
//
//        // then
//        RuntimeDescriptor expected = new RuntimeDescriptor(WorkspaceStatus.RUNNING,
//                                                           new RuntimeImpl(workspace.getConfig()
//                                                                                             .getDefaultEnv(),
//                                                                                    devMachine.getRuntime()
//                                                                                              .projectsRoot(),
//                                                                                    machines,
//                                                                                    devMachine));
//        verify(envEngine, times(2)).getMachines(workspace.getId());
//        assertEquals(runtimeDescriptor, expected);
//    }
//
//    @Test(expectedExceptions = ServerException.class,
//          expectedExceptionsMessageRegExp = "Could not perform operation because application server is stopping")
//    public void shouldNotStartTheWorkspaceIfPostConstructWasIsInvoked() throws Exception {
//        // given
//        WorkspaceImpl workspace = createWorkspace();
//        runtimes.cleanup();
//
//        // when
//        runtimes.start(createWorkspace(), workspace.getConfig().getDefaultEnv(), false);
//    }
//
//    @Test
//    public void workspaceShouldNotHaveRuntimeIfEnvStartFails() throws Exception {
//        // given
//        WorkspaceImpl ws1 = createWorkspace();
//
//        assertFalse(runtimes.hasRuntime(ws1.getId()));
//
//        when(runtimes.start(ws1,
//                            ws1.getConfig().getDefaultEnv(),
//                            null))
//                .thenThrow(new ServerException("Test env start error"));
//
////        runtimes.start(ws1, ws1.getConfig().getDefaultEnv(), null);
//
////        WorkspaceImpl workspaceMock = createWorkspace();
//
//        try {
//            // when
//            runtimes.start(ws1, ws1.getConfig().getDefaultEnv(), null);
////            runtimes.start(workspaceMock,
////                           workspaceMock.getConfig().getDefaultEnv(),
////                           null);
//        } catch (Exception ex) {
//
//            //LOG.info(">>>>> "+runtimes.get(ws1.getId()) + ws1);
//            // then
//            //assertFalse(runtimes.hasRuntime(ws1.getId()));
//        }
//    }
//
//    @Test
//    public void workspaceShouldContainAllMachinesAndBeInRunningStatusAfterSuccessfulStart() throws Exception {
//        // given
//        WorkspaceImpl workspace = createWorkspace();
//
//        // when
//        RuntimeDescriptor runningWorkspace = runtimes.start(workspace,
//                                                            workspace.getConfig().getDefaultEnv(),
//                                                            false);
//
//        // then
//        assertEquals(runningWorkspace.getRuntimeStatus(), RUNNING);
//        assertNotNull(runningWorkspace.getRuntime().getDevMachine());
//        assertEquals(runningWorkspace.getRuntime().getMachines().size(), 2);
//    }
//
    @Test(expectedExceptions = ConflictException.class,
          expectedExceptionsMessageRegExp = "Could not start workspace '.*' because its status is 'RUNNING'")
    public void shouldNotStartWorkspaceIfItIsAlreadyRunning() throws Exception {
        // given
        WorkspaceImpl workspace = createWorkspace();

        runtimes.start(workspace,
                       workspace.getConfig().getDefaultEnv(),
                       null);
        // when
        runtimes.start(workspace,
                       workspace.getConfig().getDefaultEnv(),
                       null);
    }

