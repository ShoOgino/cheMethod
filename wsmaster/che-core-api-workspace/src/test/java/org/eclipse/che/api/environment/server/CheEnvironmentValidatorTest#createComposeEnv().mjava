    private static ComposeEnvironmentImpl createComposeEnv() {
        ComposeEnvironmentImpl composeEnvironment = new ComposeEnvironmentImpl();
        composeEnvironment.setVersion("2");
        Map<String, ComposeServiceImpl> services = new HashMap<>();
        composeEnvironment.setServices(services);

        ComposeServiceImpl service = new ComposeServiceImpl();
        service.setMemLimit(1024L * 1024L * 1024L);
        service.setImage("codenvy/ubuntu_jdk8");
        service.setEnvironment(new HashMap<>(singletonMap("env1", "val1")));
        service.setCommand(new ArrayList<>(asList("this", "is", "command")));
        service.setContainerName("containerName");
        service.setDependsOn(new ArrayList<>(singletonList("machine2")));
        service.setEntrypoint(new ArrayList<>(asList("this", "is", "entrypoint")));
        service.setExpose(new ArrayList<>(asList("8080", "9090/tcp", "7070/udp")));
        service.setLabels(new HashMap<>(singletonMap("label1", "value1")));
        service.setLinks(new ArrayList<>(singletonList("machine2")));
//        service.setPorts(new ArrayList<>(singletonList("8080:8080"))); Forbidden
//        service.setVolumes(new ArrayList<>(singletonList("volume"))); Forbidden
        service.setVolumesFrom(new ArrayList<>(singletonList("machine2")));

        services.put("dev-machine", service);

        service = new ComposeServiceImpl();
        service.setMemLimit(100L);
        service.setBuild(new BuildContextImpl("context", "file"));
        service.setEnvironment(new HashMap<>(singletonMap("env1", "val1")));
        service.setCommand(new ArrayList<>(asList("this", "is", "command")));
        service.setContainerName("containerName2");
        service.setDependsOn(null);
        service.setEntrypoint(new ArrayList<>(asList("this", "is", "entrypoint")));
        service.setExpose(new ArrayList<>(asList("8080", "9090/tcp", "7070/udp")));
        service.setLabels(new HashMap<>(singletonMap("label1", "value1")));
        service.setLinks(new ArrayList<>(emptyList()));
//        service.setPorts(new ArrayList<>(singletonList("8080:8080"))); Forbidden
//        service.setVolumes(new ArrayList<>(singletonList("volume"))); Forbidden
        service.setVolumesFrom(null);
        services.put("machine2", service);

        return composeEnvironment;
    }

