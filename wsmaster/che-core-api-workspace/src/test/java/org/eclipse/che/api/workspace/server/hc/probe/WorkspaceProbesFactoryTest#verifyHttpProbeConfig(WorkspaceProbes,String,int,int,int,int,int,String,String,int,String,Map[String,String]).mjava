  public void verifyHttpProbeConfig(
      WorkspaceProbes wsProbes,
      String serverName,
      int failureThreshold,
      int successThreshold,
      int initialDelay,
      int period,
      int timeout,
      String path,
      String host,
      int port,
      String protocol,
      Map<String, String> headers)
      throws Exception {

    assertEquals(wsProbes.getWorkspaceId(), WORKSPACE_ID);
    List<ProbeFactory> probes = wsProbes.getProbes();
    assertEquals(probes.size(), 1);
    ProbeFactory probeFactory = probes.get(0);
    assertTrue(probeFactory instanceof HttpProbeFactory);
    HttpProbeFactory httpProbeFactory = (HttpProbeFactory) probeFactory;
    assertEquals(httpProbeFactory.getMachineName(), MACHINE_NAME);
    assertEquals(httpProbeFactory.getServerName(), serverName);
    assertEquals(httpProbeFactory.getWorkspaceId(), WORKSPACE_ID);
    HttpProbeConfig probeConfig = httpProbeFactory.getProbeConfig();
    assertEquals(probeConfig.getFailureThreshold(), failureThreshold);
    assertEquals(probeConfig.getSuccessThreshold(), successThreshold);
    assertEquals(probeConfig.getInitialDelaySeconds(), initialDelay);
    assertEquals(probeConfig.getPeriodSeconds(), period);
    assertEquals(probeConfig.getTimeoutSeconds(), timeout);
    assertEquals(probeConfig.getPath(), path);
    assertEquals(probeConfig.getHost(), host);
    assertEquals(probeConfig.getPort(), port);
    assertEquals(probeConfig.getScheme(), protocol);
    assertEquals(probeConfig.getHeaders(), headers);
  }

