  @Test
  public void shouldRecoverEachRuntimeOnlyOnce() throws Exception {
    // Given
    Set<RuntimeIdentity> identities = generateRuntimeIdentitySet(200);
    doReturn(identities).when(infrastructure).getIdentities();
    for (RuntimeIdentity identity : identities) {
      mockWorkspaceWithDevfile(identity);
      RuntimeContext context = mockContext(identity);
      when(context.getRuntime())
          .thenReturn(new TestInternalRuntime(context, emptyMap(), WorkspaceStatus.STARTING));
      doReturn(context).when(infrastructure).prepare(eq(identity), any());
    }
    when(statuses.get(anyString())).thenReturn(WorkspaceStatus.STARTING);
    InternalEnvironment internalEnvironment = mock(InternalEnvironment.class);
    doReturn(internalEnvironment).when(testEnvFactory).create(any(Environment.class));

    CountDownLatch finishLatch = new CountDownLatch(1);
    WorkspaceRuntimes runtimesSpy = spy(runtimes);

    // When
    WorkspaceRuntimes.RecoverRuntimesTask recoverRuntimesTask =
        runtimesSpy.new RecoverRuntimesTask(identities);
    new Thread(
            () -> {
              recoverRuntimesTask.run();
              finishLatch.countDown();
            })
        .start();

    // simulate all WorkspaceManager methods that uses WorkspaceManager.normalizeState
    new Thread(
            () -> {
              List<RuntimeIdentity> runtimeIdentities = new ArrayList<>(identities);
              Collections.shuffle(runtimeIdentities);
              for (RuntimeIdentity runtimeIdentity : runtimeIdentities) {
                if (finishLatch.getCount() > 0) {
                  try {
                    runtimesSpy.injectRuntime(
                        WorkspaceImpl.builder().setId(runtimeIdentity.getWorkspaceId()).build());
                  } catch (ServerException e) {
                    fail(e.getMessage());
                  }
                } else {
                  break;
                }
              }
            })
        .start();

    finishLatch.await();
    // Then
    verify(runtimesSpy, Mockito.times(identities.size()))
        .recoverOne(any(RuntimeInfrastructure.class), any(RuntimeIdentity.class));
  }

