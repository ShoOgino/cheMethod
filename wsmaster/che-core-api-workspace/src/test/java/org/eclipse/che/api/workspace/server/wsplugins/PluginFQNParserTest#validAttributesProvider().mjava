  @DataProvider(name = "validAttributesProvider")
  public static Object[][] validAttributesProvider() {
    PluginFQN basicEditor =
        new PluginFQN(URI.create("http://registry:8080"), "publisher/editor/ver");
    PluginFQN withRegistry =
        new PluginFQN(URI.create("http://registry:8080"), "publisher/plugin/1.0");
    PluginFQN noRegistry = new PluginFQN(null, "publisher/pluginnoregistry/2.0");
    PluginFQN pathRegistry =
        new PluginFQN(
            URI.create("http://registry/multiple/path"), "publisher/pluginpathregistry/3.0");
    PluginFQN reference = new PluginFQN("http://mysite:8080/multiple/path/meta.yaml");
    return new AttributeParsingTestCase[][] {
      {
        new AttributeParsingTestCase(
            "Test plugin with registry",
            ImmutableList.of(basicEditor, withRegistry),
            createAttributes(formatPlugin(basicEditor), formatPlugins(withRegistry)))
      },
      {
        new AttributeParsingTestCase(
            "Test plugin with https registry",
            ImmutableList.of(
                new PluginFQN(URI.create("https://registry:8080"), "publisher/editor/ver")),
            createAttributes(
                null,
                formatPlugin(
                    new PluginFQN(URI.create("https://registry:8080"), "publisher/editor/ver"))))
      },
      {
        new AttributeParsingTestCase(
            "Test plugin with registry containing path",
            ImmutableList.of(
                new PluginFQN(
                    URI.create("https://registry:8080/some/path/v3"), "publisher/editor/ver")),
            createAttributes(
                null,
                formatPlugin(
                    new PluginFQN(
                        URI.create("https://registry:8080/some/path/v3/"),
                        "publisher/editor/ver"))))
      },
      {
        new AttributeParsingTestCase(
            "Test plugin without registry",
            ImmutableList.of(basicEditor, noRegistry),
            createAttributes(formatPlugin(basicEditor), formatPlugins(noRegistry)))
      },
      {
        new AttributeParsingTestCase(
            "Test plugin with multi-level path in registry",
            ImmutableList.of(basicEditor, pathRegistry),
            createAttributes(formatPlugin(basicEditor), formatPlugins(pathRegistry)))
      },
      {
        new AttributeParsingTestCase(
            "Test plugin described by reference",
            ImmutableList.of(basicEditor, reference),
            createAttributes(
                formatPlugin(basicEditor), "http://mysite:8080/multiple/path/meta.yaml"))
      },
      {
        new AttributeParsingTestCase(
            "Test attributes with no editor field",
            ImmutableList.of(withRegistry),
            createAttributes(null, formatPlugins(withRegistry)))
      },
      {
        new AttributeParsingTestCase(
            "Test attributes with empty editor field",
            ImmutableList.of(withRegistry),
            createAttributes("", formatPlugins(withRegistry)))
      },
      {
        new AttributeParsingTestCase(
            "Test attributes with no plugin field",
            ImmutableList.of(basicEditor),
            createAttributes(formatPlugin(basicEditor), (String[]) null))
      },
      {
        new AttributeParsingTestCase(
            "Test attributes with empty plugin field",
            ImmutableList.of(basicEditor),
            createAttributes(formatPlugin(basicEditor), ""))
      },
      {
        new AttributeParsingTestCase(
            "Test attributes with no plugin or editor field",
            Collections.emptyList(),
            createAttributes(null, (String[]) null))
      },
      {
        new AttributeParsingTestCase(
            "Test attributes with empty plugin and editor field",
            Collections.emptyList(),
            createAttributes("", ""))
      },
      {
        new AttributeParsingTestCase(
            "Test multiple plugins and an editor",
            ImmutableList.of(basicEditor, withRegistry, noRegistry, pathRegistry),
            createAttributes(
                formatPlugin(basicEditor), formatPlugins(withRegistry, noRegistry, pathRegistry)))
      },
    };
  }

