    @Test
    public void shouldBeAbleToStartNonDockerMachine() throws Exception {
        // given
        List<Instance> instances = startEnv();
        String workspaceId = instances.get(0).getWorkspaceId();

        when(engine.generateMachineId()).thenReturn("newMachineId");
        Instance newMachine = mock(Instance.class);
        when(newMachine.getId()).thenReturn("newMachineId");
        when(newMachine.getWorkspaceId()).thenReturn(workspaceId);
        when(machineInstanceProviders.getProvider("anotherType")).thenReturn(instanceProvider);
        doReturn(newMachine).when(instanceProvider).createInstance(any(Machine.class), any(LineConsumer.class));

        MachineConfigImpl config = MachineConfigImpl.builder()
                                                    .fromConfig(createConfig(false))
                                                    .setType("anotherType")
                                                    .build();


        // when
        Instance actualInstance = engine.startMachine(workspaceId, config, emptyList());

        // then
        assertEquals(actualInstance, newMachine);
        ArgumentCaptor<Machine> argumentCaptor = ArgumentCaptor.forClass(Machine.class);
        verify(instanceProvider).createInstance(argumentCaptor.capture(), any(LineConsumer.class));
        assertEquals(argumentCaptor.getValue().getConfig(), config);
    }

