  @Test
  public void testFeaturesWithTheSamePluginsAndTheSameParameters() throws Exception {
    Map<String, String> featuresAttributes =
        featuresAttribute(
            TEST_FEATURE_NAME, TEST_FEATURE_VERSION, TEST_FEATURE_2_NAME, TEST_FEATURE_2_VERSION);
    CheFeature feature1 =
        testFeature(
            TEST_PLUGIN, TEST_PLUGIN_VERSION, TEST_PLUGIN_PARAM_NAME, TEST_PLUGIN_PARAM_VALUE);
    CheFeature feature2 =
        testFeature(
            TEST_PLUGIN, TEST_PLUGIN_VERSION, TEST_PLUGIN_PARAM_NAME, TEST_PLUGIN_PARAM_VALUE_2);
    ChePlugin plugin = testPluginWithEnv(TEST_PLUGIN_ENV_NAME_2, TEST_PLUGIN_PARAM_PLACEHOLDER);
    doReturn(feature1)
        .when(retriever)
        .getBody(eq(getFeatureURI(TEST_FEATURE_NAME, TEST_FEATURE_VERSION)), eq(CheFeature.class));
    doReturn(feature2)
        .when(retriever)
        .getBody(
            eq(getFeatureURI(TEST_FEATURE_2_NAME, TEST_FEATURE_2_VERSION)), eq(CheFeature.class));
    doReturn(plugin).when(retriever).getBody(any(URI.class), eq(ChePlugin.class));

    Collection<ChePlugin> plugins = retriever.get(featuresAttributes);

    // we don't know the order of values in env var from feature, so we have to match it separately
    // - can't assert whole object
    assertEquals(plugins.size(), 1);
    ChePlugin actualPlugin = plugins.iterator().next();
    assertEquals(actualPlugin.getContainers().size(), 1);
    List<EnvVar> envVars = actualPlugin.getContainers().iterator().next().getEnv();
    envVars
        .stream()
        .filter(envVar -> envVar.getName().equals(TEST_PLUGIN_ENV_NAME_2))
        .forEach(
            envVar ->
                assertEqualsNoOrder(
                    envVar.getValue().split(","),
                    new String[] {TEST_PLUGIN_PARAM_VALUE_2, TEST_PLUGIN_PARAM_VALUE}));
  }

