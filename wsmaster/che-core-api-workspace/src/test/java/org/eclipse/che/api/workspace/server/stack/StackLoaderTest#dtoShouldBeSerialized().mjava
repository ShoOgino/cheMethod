  @Test
  public void dtoShouldBeSerialized() throws Exception {
    StackDto stackDtoDescriptor = newDto(StackDto.class).withName("nameWorkspaceConfig");
    StackComponentDto stackComponentDto =
        newDto(StackComponentDto.class).withName("java").withVersion("1.8");
    stackDtoDescriptor.setComponents(Collections.singletonList(stackComponentDto));
    stackDtoDescriptor.setTags(Arrays.asList("some teg1", "some teg2"));
    stackDtoDescriptor.setDescription("description");
    stackDtoDescriptor.setId("someId");
    stackDtoDescriptor.setScope("scope");
    stackDtoDescriptor.setCreator("Created in Codenvy");

    Map<String, String> attributes = new HashMap<>();
    attributes.put("attribute1", "valute attribute1");
    Link link =
        newDto(Link.class)
            .withHref("some url")
            .withMethod("get")
            .withRel("someRel")
            .withConsumes("consumes")
            .withProduces("produces");

    HashMap<String, List<String>> projectMap = new HashMap<>();
    projectMap.put("test", Arrays.asList("test", "test2"));

    ProjectProblemDto projectProblem =
        newDto(ProjectProblemDto.class).withCode(100).withMessage("message");
    SourceStorageDto sourceStorageDto =
        newDto(SourceStorageDto.class)
            .withType("some type")
            .withParameters(attributes)
            .withLocation("location");

    ProjectConfigDto projectConfigDto =
        newDto(ProjectConfigDto.class)
            .withName("project")
            .withPath("somePath")
            .withAttributes(projectMap)
            .withType("maven type")
            .withDescription("some project description")
            .withLinks(Collections.singletonList(link))
            .withMixins(Collections.singletonList("mixin time"))
            .withProblems(Collections.singletonList(projectProblem))
            .withSource(sourceStorageDto);

    RecipeDto environmentRecipe =
        newDto(RecipeDto.class)
            .withContent("some content")
            .withContentType("some content type")
            .withType("someType");

    Map<String, ServerConfigDto> servers = new HashMap<>();
    servers.put(
        "server1Ref", newDto(ServerConfigDto.class).withPort("8080/tcp").withProtocol("http"));
    Map<String, MachineConfigDto> machines = new HashMap<>();
    machines.put(
        "someMachineName",
        newDto(MachineConfigDto.class)
            .withInstallers(Arrays.asList("agent1", "agent2"))
            .withServers(servers)
            .withAttributes(singletonMap("memoryLimitBytes", "" + 512L * 1024L * 1024L)));

    EnvironmentDto environmentDto =
        newDto(EnvironmentDto.class).withRecipe(environmentRecipe).withMachines(machines);

    CommandDto commandDto =
        newDto(CommandDto.class)
            .withType("command type")
            .withName("command name")
            .withCommandLine("command line");

    WorkspaceConfigDto workspaceConfigDto =
        newDto(WorkspaceConfigDto.class)
            .withName("SomeWorkspaceConfig")
            .withDescription("some workspace")
            .withLinks(Collections.singletonList(link))
            .withDefaultEnv("some Default Env name")
            .withProjects(Collections.singletonList(projectConfigDto))
            .withEnvironments(singletonMap("name", environmentDto))
            .withCommands(Collections.singletonList(commandDto));

    stackDtoDescriptor.setWorkspaceConfig(workspaceConfigDto);
    Gson GSON = new GsonBuilder().create();

    GSON.fromJson(stackDtoDescriptor.toString(), StackImpl.class);
  }

