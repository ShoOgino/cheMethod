  @Test
  public void machineStopShouldFireEvents() throws Exception {
    // given
    List<Instance> instances = startEnv();
    Optional<Instance> instanceOpt =
        instances.stream().filter(machine -> !machine.getConfig().isDev()).findAny();
    assertTrue(instanceOpt.isPresent(), "Required for test non-dev machine is not found");
    Instance instance = instanceOpt.get();

    // when
    engine.stopMachine(instance.getWorkspaceId(), instance.getId());

    // then
    verify(eventService)
        .publish(
            newDto(MachineStatusEvent.class)
                .withEventType(MachineStatusEvent.EventType.CREATING)
                .withDev(instance.getConfig().isDev())
                .withMachineName(instance.getConfig().getName())
                .withMachineId(instance.getId())
                .withWorkspaceId(instance.getWorkspaceId()));
    verify(eventService)
        .publish(
            newDto(MachineStatusEvent.class)
                .withEventType(MachineStatusEvent.EventType.RUNNING)
                .withDev(instance.getConfig().isDev())
                .withMachineName(instance.getConfig().getName())
                .withMachineId(instance.getId())
                .withWorkspaceId(instance.getWorkspaceId()));
  }

