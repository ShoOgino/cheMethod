    @Test
    public void testWorkspaceLinks() throws Exception {
        // given
        final WorkspaceImpl workspace = createWorkspace(createConfigDto());
        Optional<EnvironmentImpl> environmentOpt = workspace.getConfig().getEnvironment(workspace.getConfig().getDefaultEnv());
        assertTrue(environmentOpt.isPresent());
        EnvironmentImpl environment = environmentOpt.get();

        final WorkspaceRuntimeImpl runtime = new WorkspaceRuntimeImpl(environment.getName());
        final MachineConfigImpl devCfg = environment.getMachineConfigs()
                                                    .iterator()
                                                    .next();
        runtime.setDevMachine(new MachineImpl(devCfg,
                                              "machine123",
                                              workspace.getId(),
                                              environment.getName(),
                                              USER_ID,
                                              MachineStatus.RUNNING,
                                              new MachineRuntimeInfoImpl(emptyMap(),
                                                                         emptyMap(),
                                                                         singletonMap("8080/https", new ServerImpl("wsagent",
                                                                                                                   "8080",
                                                                                                                   "https",
                                                                                                                   "path1",
                                                                                                                   "url")))));
        runtime.getMachines().add(runtime.getDevMachine());
        workspace.setStatus(RUNNING);
        workspace.setRuntime(runtime);
        when(wsManager.getWorkspace(workspace.getId())).thenReturn(workspace);

        // when
        final Response response = given().auth()
                                         .basic(ADMIN_USER_NAME, ADMIN_USER_PASSWORD)
                                         .when()
                                         .get(SECURE_PATH + "/workspace/" + workspace.getId());

        // then
        assertEquals(response.getStatusCode(), 200);
        final WorkspaceDto workspaceDto = unwrapDto(response, WorkspaceDto.class);
        final Set<String> actualRels = workspaceDto.getLinks()
                                                   .stream()
                                                   .map(Link::getRel)
                                                   .collect(toSet());
        final Set<String> expectedRels = new HashSet<>(asList(LINK_REL_START_WORKSPACE,
                                                              LINK_REL_REMOVE_WORKSPACE,
                                                              GET_ALL_USER_WORKSPACES,
                                                              LINK_REL_GET_SNAPSHOT,
                                                              LINK_REL_GET_WORKSPACE_EVENTS_CHANNEL,
                                                              LINK_REL_IDE_URL,
                                                              LINK_REL_SELF,
                                                              LINK_REL_ENVIRONMENT_OUTPUT_CHANNEL,
                                                              LINK_REL_ENVIRONMENT_STATUS_CHANNEL));
        assertTrue(actualRels.equals(expectedRels), format("Links difference: '%s'. \n" +
                                                           "Returned links: '%s', \n" +
                                                           "Expected links: '%s'.",
                                                           Sets.symmetricDifference(actualRels, expectedRels),
                                                           actualRels.toString(),
                                                           expectedRels.toString()));
        assertNotNull(workspaceDto.getRuntime().getLink(LINK_REL_STOP_WORKSPACE), "Runtime doesn't contain stop link");
        assertNotNull(workspaceDto.getRuntime().getLink(WSAGENT_REFERENCE), "Runtime doesn't contain wsagent link");
        assertNotNull(workspaceDto.getRuntime().getLink(WSAGENT_WEBSOCKET_REFERENCE), "Runtime doesn't contain wsagent.websocket link");
    }

