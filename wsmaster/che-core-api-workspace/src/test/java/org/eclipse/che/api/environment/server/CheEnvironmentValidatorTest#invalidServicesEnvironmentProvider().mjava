    @DataProvider
    public static Object[][] invalidServicesEnvironmentProvider() {
        // Format of result array:
        // [ [InvalidCheServicesEnvironmentObject, ExceptionMessage], ... ]
        CheServicesEnvironmentImpl env;
        Map.Entry<String, CheServiceImpl> serviceEntry;
        CheServiceImpl service;
        List<List<Object>> data = new ArrayList<>();

        env = createServicesEnv();
        env.setServices(null);
        data.add(asList(env, "Environment 'env' should contain at least 1 machine"));

        env = createServicesEnv();
        env.setServices(emptyMap());
        data.add(asList(env, "Environment 'env' should contain at least 1 machine"));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        env.getServices().put("invalid service name", serviceEntry.getValue());
        data.add(asList(env, "Name of machine 'invalid service name' in environment 'env' is invalid"));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage(null);
        service.setBuild(null);
        data.add(asList(env, format("Field 'image' or 'build.context' is required in machine '%s' in environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage("");
        service.setBuild(null);
        data.add(asList(env, format("Field 'image' or 'build.context' is required in machine '%s' in environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage(null);
        service.setBuild(new CheServiceBuildContextImpl());
        data.add(asList(env, format("Field 'image' or 'build.context' is required in machine '%s' in environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage("");
        service.setBuild(new CheServiceBuildContextImpl());
        data.add(asList(env, format("Field 'image' or 'build.context' is required in machine '%s' in environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setPorts(new ArrayList<>(singletonList("8080:8080")));
        data.add(asList(env, format("Ports binding is forbidden but found in machine '%s' of environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setVolumes(new ArrayList<>(singletonList("volume")));
        data.add(asList(env, format("Volumes binding is forbidden but found in machine '%s' of environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setNetworks(new ArrayList<>(singletonList("network1")));
        data.add(asList(env, format("Networks configuration is forbidden but found in machine '%s' of environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage(null);
        service.setBuild(new CheServiceBuildContextImpl(null, "dockerfile", null, null));
        data.add(asList(env, format("Field 'image' or 'build.context' is required in machine '%s' in environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage("");
        service.setBuild(new CheServiceBuildContextImpl("", "dockerfile", null, null));
        data.add(asList(env, format("Field 'image' or 'build.context' is required in machine '%s' in environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage("");
        service.setBuild(new CheServiceBuildContextImpl(null, null, null, null));
        data.add(asList(env, format("Field 'image' or 'build.context' is required in machine '%s' in environment 'env'", serviceEntry.getKey())));

        env = createServicesEnv();
        serviceEntry = getAnyService(env);
        service = serviceEntry.getValue();
        service.setImage("");
        service.setBuild(new CheServiceBuildContextImpl("some url",
                                                        null,
                                                        "some content",
                                                        new HashMap<String, String>() {{put("argkey","argvalue");}}));
        data.add(asList(env, format("OldMachine '%s' in environment 'env' contains mutually exclusive dockerfile content and build context.",
                                    serviceEntry.getKey())));

        return data.stream()
                   .map(list -> list.toArray(new Object[list.size()]))
                   .toArray(value -> new Object[data.size()][]);
    }

