    private EnvironmentDto createConfig() {
        final List<ServerConfDto> serversConf =
                new ArrayList<>(Arrays.asList(newDto(ServerConfDto.class).withRef("ref1")
                                                                         .withPort("8080/tcp")
                                                                         .withProtocol("https")
                                                                         .withPath("some/path"),
                                              newDto(ServerConfDto.class).withRef("ref2")
                                                                         .withPort("9090/udp")
                                                                         .withProtocol("protocol")
                                                                         .withPath("/some/path")));
        MachineConfigDto devMachine = newDto(MachineConfigDto.class).withDev(true)
                                                                    .withName("dev-machine")
                                                                    .withType("docker")
                                                                    .withSource(newDto(MachineSourceDto.class)
                                                                                        .withLocation("http://location")
                                                                                        .withType("dockerfile"))
                                                                    .withServers(serversConf)
                                                                    .withEnvVariables(new HashMap<>(
                                                                            singletonMap("key1", "value1")));

        return newDto(EnvironmentDto.class).withName("dev-env")
                                           .withMachineConfigs(
                                                   new ArrayList<>(singletonList(devMachine)))
                                           .withRecipe(null);
    }

