    @Test
    public void creatorShouldNotBeUpdated() throws ServerException, NotFoundException {
        StackDto updatedStackDto = DtoFactory.getInstance().createDto(StackDto.class)
                                             .withId(STACK_ID)
                                             .withName(NAME)
                                             .withDescription(DESCRIPTION)
                                             .withScope(SCOPE)
                                             .withCreator("creator changed")
                                             .withTags(tags)
                                             .withSource(stackSourceDto)
                                             .withComponents(componentsDto);

        when(stackDao.getById(anyString())).thenReturn(foreignStack);
        when(stackDao.update(any())).thenReturn(foreignStack);

        Response response = given().auth()
                                   .basic(ADMIN_USER_NAME, ADMIN_USER_PASSWORD)
                                   .contentType(APPLICATION_JSON)
                                   .content(updatedStackDto)
                                   .when()
                                   .put(SECURE_PATH + "/stack/" + STACK_ID);

        assertEquals(response.getStatusCode(), 200);
        StackDto result = unwrapDto(response, StackDto.class);

        assertEquals(result.getId(), updatedStackDto.getId());
        assertEquals(result.getName(), updatedStackDto.getName());
        assertEquals(result.getDescription(), updatedStackDto.getDescription());
        assertEquals(result.getScope(), updatedStackDto.getScope());
        assertEquals(result.getTags().get(0), updatedStackDto.getTags().get(0));
        assertEquals(result.getTags().get(1), updatedStackDto.getTags().get(1));
        assertEquals(result.getComponents().get(0).getName(), updatedStackDto.getComponents().get(0).getName());
        assertEquals(result.getComponents().get(0).getVersion(), updatedStackDto.getComponents().get(0).getVersion());
        assertEquals(result.getSource().getType(), updatedStackDto.getSource().getType());
        assertEquals(result.getSource().getOrigin(), updatedStackDto.getSource().getOrigin());
        assertEquals(result.getCreator(), FOREIGN_CREATOR);

        verify(stackDao).update(any());
        verify(stackDao).getById(STACK_ID);
    }

