  @VisibleForTesting
  InternalRuntime<?> recoverOne(RuntimeInfrastructure infra, RuntimeIdentity identity)
      throws ServerException, ConflictException {
    if (isStartRefused.get()) {
      throw new ConflictException(
          format(
              "Recovery of the workspace '%s' is rejected by the system, "
                  + "no more workspaces are allowed to start",
              identity.getWorkspaceId()));
    }
    Workspace workspace;
    try {
      workspace = workspaceDao.get(identity.getWorkspaceId());
    } catch (NotFoundException x) {
      throw new ServerException(
          format(
              "Workspace configuration is missing for the runtime '%s:%s'. Runtime won't be recovered",
              identity.getWorkspaceId(), identity.getEnvName()));
    }

    Environment environment = workspace.getConfig().getEnvironments().get(identity.getEnvName());
    if (environment == null) {
      throw new ServerException(
          format(
              "Environment configuration is missing for the runtime '%s:%s'. Runtime won't be recovered",
              identity.getWorkspaceId(), identity.getEnvName()));
    }

    InternalRuntime runtime;
    try {
      InternalEnvironment internalEnv =
          createInternalEnvironment(environment, workspace.getConfig().getAttributes());
      runtime = infra.prepare(identity, internalEnv).getRuntime();

      try (Unlocker ignored = lockService.writeLock(workspace.getId())) {
        statuses.putIfAbsent(identity.getWorkspaceId(), runtime.getStatus());
        runtimes.put(identity.getWorkspaceId(), runtime);
      }
      LOG.info(
          "Successfully recovered workspace runtime '{}'",
          identity.getWorkspaceId(),
          identity.getEnvName());
      return runtime;
    } catch (InfrastructureException | ValidationException | NotFoundException x) {
      throw new ServerException(
          format(
              "Couldn't recover runtime '%s:%s'. Error: %s",
              identity.getWorkspaceId(), identity.getEnvName(), x.getMessage()));
    }
  }

