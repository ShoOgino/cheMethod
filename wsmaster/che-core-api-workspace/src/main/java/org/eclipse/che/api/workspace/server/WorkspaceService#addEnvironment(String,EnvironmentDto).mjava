    @POST
    @Path("/{id}/environment")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Add a new environment to the workspace",
                  notes = "This operation can be performed only by the workspace owner")
    @ApiResponses({@ApiResponse(code = 200, message = "The workspace successfully updated"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have access to add the environment"),
                   @ApiResponse(code = 404, message = "The workspace not found"),
                   @ApiResponse(code = 409, message = "Environment with such name already exists"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public WorkspaceDto addEnvironment(@ApiParam("The workspace id")
                                       @PathParam("id")
                                       String id,
                                       @ApiParam(value = "The new environment", required = true)
                                       EnvironmentDto newEnvironment) throws ServerException,
                                                                             BadRequestException,
                                                                             NotFoundException,
                                                                             ConflictException,
                                                                             ForbiddenException {
        requiredNotNull(newEnvironment, "New environment");
        final WorkspaceImpl workspace = workspaceManager.getWorkspace(id);
        workspace.getConfig().getEnvironments().add(new EnvironmentImpl(newEnvironment));
        validator.validateConfig(workspace.getConfig());
        return injectLinks(asDto(workspaceManager.updateWorkspace(id, workspace)));
    }

