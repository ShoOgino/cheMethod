  @GET
  @Produces(APPLICATION_JSON)
  @GenerateLink(rel = LINK_REL_SEARCH_STACKS)
  @ApiOperation(
      value = "Get the list stacks with required tags",
      notes = "This operation can be performed only by authorized user",
      response = StackDto.class,
      responseContainer = "List")
  @ApiResponses({
    @ApiResponse(
        code = 200,
        message = "The response contains requested list stack entity with required tags"),
    @ApiResponse(
        code = 403,
        message = "The user does not have access to get stack entity list with required tags"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public List<StackDto> searchStacks(
      @ApiParam("List tags for search") @QueryParam("tags") final List<String> tags,
      @ApiParam(value = "The number of the items to skip")
          @DefaultValue("0")
          @QueryParam("skipCount")
          final Integer skipCount,
      @ApiParam("The limit of the items in the response, default is 30")
          @DefaultValue("30")
          @QueryParam("maxItems")
          final Integer maxItems)
      throws ServerException {
    final String currentUser = EnvironmentContext.getCurrent().getSubject().getUserId();
    return stackDao
        .searchStacks(currentUser, tags, skipCount, maxItems)
        .stream()
        .map(this::asStackDto)
        .collect(Collectors.toList());
  }

