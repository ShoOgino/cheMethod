  /**
   * Gets Che tooling plugins list from provided workspace config attributes, fetches corresponding
   * meta objects from Che plugin registry and returns list of {@link PluginMeta} with meta
   * information about plugins in a workspace.
   *
   * <p>This API is in <b>Beta</b> and is subject to changes or removal.
   *
   * @param attributes workspace config attributes
   * @throws InfrastructureException when attributes contain invalid Che plugins entries or Che
   *     plugin meta files retrieval from Che plugin registry fails or returns invalid data
   */
  @Beta
  public Collection<PluginMeta> get(Map<String, String> attributes) throws InfrastructureException {
    // Have to check for empty value instead of plain null as it's possible to have empty
    // plugins attribute
    String pluginsAttribute =
        attributes.getOrDefault(Constants.WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE, null);
    String editorAttribute =
        attributes.getOrDefault(Constants.WORKSPACE_TOOLING_EDITOR_ATTRIBUTE, null);

    // Check if workspace requests ws.next features with no registry configured
    if (pluginRegistry == null
        && (!Strings.isNullOrEmpty(pluginsAttribute) || !Strings.isNullOrEmpty(editorAttribute))) {
      throw new InfrastructureException(CHE_REGISTRY_MISSING_ERROR);
    }

    // Check if any plugins/editor is in workspace
    if (Strings.isNullOrEmpty(editorAttribute) && Strings.isNullOrEmpty(pluginsAttribute)) {
      return emptyList();
    }

    ArrayList<Pair<String, String>> metasIdsVersions = new ArrayList<>();
    if (!isNullOrEmpty(pluginsAttribute)) {
      String[] plugins = pluginsAttribute.split(" *, *");
      if (plugins.length != 0) {
        Collection<Pair<String, String>> pluginsIdsVersions = parseIdsVersions(plugins);
        metasIdsVersions.addAll(pluginsIdsVersions);
      }
    }
    if (!isNullOrEmpty(editorAttribute)) {
      Collection<Pair<String, String>> editorIdVersionCollection =
          parseIdsVersions(editorAttribute);
      if (editorIdVersionCollection.size() > 1) {
        throw new InfrastructureException(
            "Multiple editors found in workspace config attributes. "
                + "It is not supported. Please, use one editor only.");
      }
      metasIdsVersions.addAll(editorIdVersionCollection);
    }

    return getMetas(metasIdsVersions);
  }

