  /**
   * Updates an existing workspace with a new configuration.
   *
   * <p>
   *
   * <p>Replace strategy is used for workspace update, it means that existing workspace data will be
   * replaced with given {@code update}.
   *
   * @param update workspace update
   * @return updated instance of the workspace
   * @throws NullPointerException when either {@code workspaceId} or {@code update} is null
   * @throws NotFoundException when workspace with given id doesn't exist
   * @throws ConflictException when any conflict occurs (e.g Workspace with such name already exists
   *     in {@code namespace})
   * @throws ServerException when any other error occurs
   */
  public WorkspaceImpl updateWorkspace(String id, Workspace update)
      throws ConflictException, ServerException, NotFoundException, ValidationException {
    requireNonNull(id, "Required non-null workspace id");
    requireNonNull(update, "Required non-null workspace update");
    checkArgument(
        update.getConfig() != null ^ update.getDevfile() != null,
        "Required non-null workspace configuration or devfile update but not both");
    if (update.getConfig() != null) {
      validator.validateConfig(update.getConfig());
    }
    WorkspaceImpl workspace = workspaceDao.get(id);

    validator.validateUpdateAttributes(workspace.getAttributes(), update.getAttributes());

    if (workspace.getConfig() != null) {
      workspace.setConfig(new WorkspaceConfigImpl(update.getConfig()));
    }
    if (workspace.getDevfile() != null) {
      workspace.setDevfile(new DevfileImpl(update.getDevfile()));
    }

    workspace.setAttributes(update.getAttributes());

    workspace.getAttributes().put(UPDATED_ATTRIBUTE_NAME, Long.toString(currentTimeMillis()));
    workspace.setTemporary(update.isTemporary());

    return normalizeState(workspaceDao.update(workspace), true);
  }

