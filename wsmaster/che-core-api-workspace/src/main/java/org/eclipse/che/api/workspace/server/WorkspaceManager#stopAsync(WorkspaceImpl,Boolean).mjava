    private void stopAsync(WorkspaceImpl workspace, @Nullable Boolean createSnapshot) throws ConflictException {
        if (workspace.getStatus() != WorkspaceStatus.RUNNING && workspace.getStatus() != WorkspaceStatus.STARTING) {
            throw new ConflictException(format("Could not stop the workspace '%s:%s' because its status is '%s'. " +
                                               "Workspace must be either 'STARTING' or 'RUNNING'",
                                               workspace.getNamespace(),
                                               workspace.getConfig().getName(),
                                               workspace.getStatus()));
        }

        sharedPool.execute(() -> {
            final String stoppedBy = sessionUserNameOr(workspace.getAttributes().get(WORKSPACE_STOPPED_BY));
            LOG.info("Workspace '{}:{}' with id '{}' is being stopped by user '{}'",
                     workspace.getNamespace(),
                     workspace.getConfig().getName(),
                     workspace.getId(),
                     firstNonNull(stoppedBy, "undefined"));

            final boolean snapshotBeforeStop;
            if (workspace.isTemporary() || workspace.getStatus() == WorkspaceStatus.STARTING) {
                snapshotBeforeStop = false;
            } else if (createSnapshot != null) {
                snapshotBeforeStop = createSnapshot;
            } else if (workspace.getAttributes().containsKey(AUTO_CREATE_SNAPSHOT)) {
                snapshotBeforeStop = parseBoolean(workspace.getAttributes().get(AUTO_CREATE_SNAPSHOT));
            } else {
                snapshotBeforeStop = defaultAutoSnapshot;
            }

            if (snapshotBeforeStop) {
                try {
                    runtimes.snapshot(workspace.getId());
                } catch (ConflictException | NotFoundException | ServerException x) {
                    LOG.warn("Could not create a snapshot of the workspace '{}:{}' " +
                             "with workspace id '{}'. The workspace will be stopped",
                             workspace.getNamespace(),
                             workspace.getConfig().getName(),
                             workspace.getId());
                }
            }

            try {
                runtimes.stop(workspace.getId());
                if (!workspace.isTemporary()) {
                    workspace.getAttributes().put(UPDATED_ATTRIBUTE_NAME, Long.toString(currentTimeMillis()));
                    workspaceDao.update(workspace);
                }
                LOG.info("Workspace '{}:{}' with id '{}' stopped by user '{}'",
                         workspace.getNamespace(),
                         workspace.getConfig().getName(),
                         workspace.getId(),
                         firstNonNull(stoppedBy, "undefined"));
            } catch (Exception ex) {
                LOG.error(ex.getLocalizedMessage(), ex);
            } finally {
                if (workspace.isTemporary()) {
                    removeWorkspaceQuietly(workspace);
                }
            }
        });
    }

