    @SuppressWarnings("unchecked")
    private <T extends UsersWorkspace & Hyperlinks> T injectLinks(T workspace) {
        final UriBuilder uriBuilder = getServiceContext().getServiceUriBuilder();
        final List<Link> links = new ArrayList<>();
        // add common workspace links
        links.add(createLink("POST",
                             uriBuilder.clone()
                                       .path(getClass(), "startById")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             LINK_REL_START_WORKSPACE));
        links.add(createLink("DELETE",
                             uriBuilder.clone()
                                       .path(getClass(), "delete")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             LINK_REL_REMOVE_WORKSPACE));
        links.add(createLink("GET",
                             uriBuilder.clone()
                                       .path(getClass(), "getWorkspaces")
                                       .build()
                                       .toString(),
                             APPLICATION_JSON,
                             GET_ALL_USER_WORKSPACES));
        links.add(createLink("GET",
                             uriBuilder.clone()
                                       .path(getClass(), "getSnapshot")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             "get workspace's snapshot"));

        //TODO here we add url to IDE with workspace name not good solution do it here but critical for this task  https://jira.codenvycorp.com/browse/IDEX-3619
        final URI ideUri = uriBuilder.clone()
                                     .replacePath(ideContext)
                                     .path(workspace.getConfig().getName())
                                     .build();
        links.add(createLink("GET", ideUri.toString(), TEXT_HTML, "ide url"));

        // add workspace channel link
        final Link workspaceChannelLink = createLink("GET",
                                                     getServiceContext().getBaseUriBuilder()
                                                                        .path("ws")
                                                                        .path(workspace.getId())
                                                                        .scheme("https".equals(ideUri.getScheme()) ? "wss" : "ws")
                                                                        .build()
                                                                        .toString(),
                                                     null);
        final LinkParameter channelParameter = newDto(LinkParameter.class).withName("channel")
                                                                          .withRequired(true);

        links.add(cloneDto(workspaceChannelLink).withRel(LINK_REL_GET_WORKSPACE_EVENTS_CHANNEL)
                                                .withParameters(singletonList(cloneDto(channelParameter).withDefaultValue("workspace:" + workspace.getId()))));

        // add machine channels links to machines configs
        final WorkspaceConfigDto workspaceConfigDto = (WorkspaceConfigDto)workspace.getConfig();
        workspaceConfigDto.getEnvironments()
                          .stream()
                          .forEach(environmentDto -> injectMachineChannelsLinks(environmentDto,
                                                                                workspace.getId(),
                                                                                workspaceChannelLink,
                                                                                channelParameter));

        // add links for runtime workspace
        if (RuntimeWorkspaceDto.class.isAssignableFrom(workspace.getClass())) {
            links.add(createLink("GET",
                                 uriBuilder.clone()
                                           .path(getClass(), "getRuntimeWorkspaceById")
                                           .build(workspace.getId())
                                           .toString(),
                                 APPLICATION_JSON,
                                 "self link"));
            RuntimeWorkspaceDto runtimeWorkspace = (RuntimeWorkspaceDto)workspace;
            runtimeWorkspace.getMachines()
                            .forEach(machineDto -> machineDto.withLinks(
                                    singletonList(createLink("GET",
                                                             getServiceContext().getBaseUriBuilder()
                                                                                .path("/machine/{id}")
                                                                                .build(machineDto.getId())
                                                                                .toString(),
                                                             APPLICATION_JSON,
                                                             "get machine"))));
        } else {
            links.add(createLink("GET",
                                 uriBuilder.clone()
                                           .path(getClass(), "getById")
                                           .build(workspace.getId())
                                           .toString(),
                                 APPLICATION_JSON,
                                 "self link"));
        }
        // add links for running workspace
        if (workspace.getStatus() == RUNNING) {
            links.add(createLink("GET",
                                 uriBuilder.clone()
                                           .path(getClass(), "getRuntimeWorkspaceById")
                                           .build(workspace.getId())
                                           .toString(),
                                 APPLICATION_JSON,
                                 LINK_REL_GET_RUNTIME_WORKSPACE));
            links.add(createLink("DELETE",
                                 uriBuilder.clone()
                                           .path(getClass(), "stop")
                                           .build(workspace.getId())
                                           .toString(),
                                 STOP_WORKSPACE));

            if (RuntimeWorkspaceDto.class.isAssignableFrom(workspace.getClass())) {
                RuntimeWorkspaceDto runtimeWorkspace = (RuntimeWorkspaceDto)workspace;
                runtimeWorkspace.getDevMachine()
                                .getRuntime()
                                .getServers()
                                .values()
                                .stream()
                                .filter(server ->  WSAGENT_REFERENCE.equals(server.getRef()))
                                .findAny()
                                .ifPresent(wsAgent -> links.add(createLink("GET",
                                                                           UriBuilder.fromUri(wsAgent.getUrl())
                                                                                     .scheme("https".equals(ideUri.getScheme()) ? "wss" : "ws")
                                                                                     .build()
                                                                                     .toString(),
                                                                           WSAGENT_REFERENCE)));
            }
        }
        return (T)workspace.withLinks(links);
    }

