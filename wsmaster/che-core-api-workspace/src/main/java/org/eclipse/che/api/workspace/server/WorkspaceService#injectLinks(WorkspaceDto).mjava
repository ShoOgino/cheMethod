    private WorkspaceDto injectLinks(WorkspaceDto workspace) {
        final UriBuilder uriBuilder = getServiceContext().getServiceUriBuilder();
        final List<Link> links = new ArrayList<>();
        // add common workspace links
        links.add(createLink("GET",
                             uriBuilder.clone()
                                       .path(getClass(), "getByKey")
                                       .build(workspace.getId())
                                       .toString(),
                             LINK_REL_SELF));
        links.add(createLink("POST",
                             uriBuilder.clone()
                                       .path(getClass(), "startById")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             LINK_REL_START_WORKSPACE));
        links.add(createLink("DELETE",
                             uriBuilder.clone()
                                       .path(getClass(), "delete")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             LINK_REL_REMOVE_WORKSPACE));
        links.add(createLink("GET",
                             uriBuilder.clone()
                                       .path(getClass(), "getWorkspaces")
                                       .build()
                                       .toString(),
                             APPLICATION_JSON,
                             GET_ALL_USER_WORKSPACES));
        links.add(createLink("GET",
                             uriBuilder.clone()
                                       .path(getClass(), "getSnapshot")
                                       .build(workspace.getId())
                                       .toString(),
                             APPLICATION_JSON,
                             LINK_REL_GET_SNAPSHOT));

        //TODO here we add url to IDE with workspace name not good solution do it here but critical for this task  https://jira.codenvycorp.com/browse/IDEX-3619
        final URI ideUri = uriBuilder.clone()
                                     .replacePath(ideContext)
                                     .path(workspace.getConfig().getName())
                                     .build();
        links.add(createLink("GET", ideUri.toString(), TEXT_HTML, LINK_REL_IDE_URL));

        // add workspace channel link
        final Link workspaceChannelLink = createLink("GET",
                                                     getServiceContext().getBaseUriBuilder()
                                                                        .path("ws")
                                                                        .path(workspace.getId())
                                                                        .scheme("https".equals(ideUri.getScheme()) ? "wss" : "ws")
                                                                        .build()
                                                                        .toString(),
                                                     null);
        final LinkParameter channelParameter = newDto(LinkParameter.class).withName("channel")
                                                                          .withRequired(true);

        links.add(cloneDto(workspaceChannelLink).withRel(LINK_REL_GET_WORKSPACE_EVENTS_CHANNEL)
                                                .withParameters(singletonList(
                                                        cloneDto(channelParameter).withDefaultValue("workspace:" + workspace.getId()))));

        // add machine channels links to machines configs
        workspace.getConfig()
                 .getEnvironments()
                 .stream()
                 .forEach(environmentDto -> injectMachineChannelsLinks(environmentDto,
                                                                       workspace.getId(),
                                                                       workspaceChannelLink,
                                                                       channelParameter));
        // add links for running workspace
        if (workspace.getStatus() == RUNNING) {
            workspace.getRuntime()
                     .getLinks()
                     .add(createLink("DELETE",
                                     uriBuilder.clone()
                                               .path(getClass(), "stop")
                                               .build(workspace.getId())
                                               .toString(),
                                     LINK_REL_STOP_WORKSPACE));

            if (workspace.getRuntime() != null && workspace.getRuntime().getDevMachine() != null) {
                workspace.getRuntime()
                         .getDevMachine()
                         .getRuntime()
                         .getServers()
                         .values()
                         .stream()
                         .filter(server -> WSAGENT_REFERENCE.equals(server.getRef()))
                         .findAny()
                         .ifPresent(wsAgent -> {
                             workspace.getRuntime()
                                      .getLinks()
                                      .add(createLink("GET",
                                                      wsAgent.getUrl(),
                                                      WSAGENT_REFERENCE));
                             workspace.getRuntime()
                                      .getLinks()
                                      .add(createLink("GET",
                                                      UriBuilder.fromUri(wsAgent.getUrl())
                                                                .path("ws")
                                                                .scheme("https".equals(ideUri.getScheme()) ? "wss" : "ws")
                                                                .build()
                                                                .toString(),
                                                      WSAGENT_WEBSOCKET_REFERENCE));
                         });
            }
        }
        return workspace.withLinks(links);
    }

