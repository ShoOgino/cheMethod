    /** Asynchronously starts given workspace. */
    @VisibleForTesting
    void performAsyncStart(WorkspaceImpl workspace,
                           String envName,
                           boolean recover) throws ConflictException, NotFoundException, ServerException {
        if (envName != null && !workspace.getConfig().getEnvironments().containsKey(envName)) {
            throw new NotFoundException(format("Workspace '%s:%s' doesn't contain environment '%s'",
                                               workspace.getNamespace(),
                                               workspace.getConfig().getName(),
                                               envName));
        }
        workspace.getAttributes().put(UPDATED_ATTRIBUTE_NAME, Long.toString(currentTimeMillis()));
        workspaceDao.update(workspace);
        final String env = firstNonNull(envName, workspace.getConfig().getDefaultEnv());
        final Future<RuntimeDescriptor> descriptor = runtimes.startAsync(workspace, env, recover);
        executor.execute(ThreadLocalPropagateContext.wrap(() -> {
            try {
                descriptor.get();
                LOG.info("Workspace '{}:{}' with id '{}' started by user '{}'",
                         workspace.getNamespace(),
                         workspace.getConfig().getName(),
                         workspace.getId(),
                         sessionUserNameOr("undefined"));
            } catch (Exception ex) {
                if (workspace.isTemporary()) {
                    try {
                        removeWorkspace(workspace.getId());
                    } catch (ConflictException | ServerException rmEx) {
                        LOG.error("Couldn't remove temporary workspace {}, because : {}",
                                  workspace.getId(),
                                  rmEx.getLocalizedMessage());
                    }
                }
                for (Throwable cause : getCausalChain(ex)) {
                    if (cause instanceof SourceNotFoundException) {
                        return;
                    }
                }
                LOG.error(ex.getLocalizedMessage(), ex);
            }
        }));
    }

