  protected void injectRuntimeLinks(
      WorkspaceDto workspace, URI ideUri, UriBuilder uriBuilder, ServiceContext serviceContext) {
    final WorkspaceRuntimeDto runtime = workspace.getRuntime();
    // add links for running workspace
    if (workspace.getStatus() == RUNNING && runtime != null) {
      runtime
          .getLinks()
          .add(
              createLink(
                  "DELETE",
                  uriBuilder
                      .clone()
                      .path(WorkspaceService.class, "stop")
                      .build(workspace.getId())
                      .toString(),
                  LINK_REL_STOP_WORKSPACE));

      runtime.getMachines().forEach(machine -> injectMachineLinks(machine, serviceContext));

      final MachineDto devMachine = runtime.getDevMachine();
      if (devMachine != null) {
        injectMachineLinks(devMachine, serviceContext);

        final Collection<ServerDto> servers = devMachine.getRuntime().getServers().values();
        servers
            .stream()
            .filter(server -> WSAGENT_REFERENCE.equals(server.getRef()))
            .findAny()
            .ifPresent(
                wsAgent -> {
                  runtime.getLinks().add(createLink("GET", wsAgent.getUrl(), WSAGENT_REFERENCE));
                  Link wsAgentWebsocketLink =
                      createLink(
                          "GET",
                          UriBuilder.fromUri(wsAgent.getUrl())
                              .scheme("https".equals(ideUri.getScheme()) ? "wss" : "ws")
                              .path("/ws")
                              .build()
                              .toString(),
                          WSAGENT_WEBSOCKET_REFERENCE);

                  runtime.getLinks().add(wsAgentWebsocketLink);
                  devMachine.getLinks().add(wsAgentWebsocketLink);
                });
      }
    }
  }

