    /**
     * Asynchronously stops the workspace,
     * creates a snapshot of it if {@code createSnapshot} is set to true.
     *
     * @param workspaceId
     *         the id of the workspace to stop
     * @param createSnapshot
     *         true if create snapshot, false if don't,
     *         null if default behaviour should be used
     * @throws ServerException
     *         when any server error occurs
     * @throws NullPointerException
     *         when {@code workspaceId} is null
     * @throws NotFoundException
     *         when workspace {@code workspaceId} doesn't have runtime
     */
    public void stopWorkspace(String workspaceId, @Nullable Boolean createSnapshot) throws ConflictException,
                                                                                           NotFoundException,
                                                                                           ServerException {
        requireNonNull(workspaceId, "Required non-null workspace id");
        final WorkspaceImpl workspace = workspaceDao.get(workspaceId);
        workspace.setStatus(runtimes.getStatus(workspaceId));
        if (workspace.getStatus() != WorkspaceStatus.RUNNING && workspace.getStatus() != WorkspaceStatus.STARTING) {
            throw new ConflictException(format("Could not stop the workspace '%s:%s' because its status is '%s'. " +
                                               "Workspace must be either 'STARTING' or 'RUNNING'",
                                               workspace.getNamespace(),
                                               workspace.getConfig().getName(),
                                               workspace.getStatus()));
        }
        stopAsync(workspace, createSnapshot);
    }

