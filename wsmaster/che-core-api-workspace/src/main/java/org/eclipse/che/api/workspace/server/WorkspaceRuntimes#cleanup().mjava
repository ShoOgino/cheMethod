    /**
     * Removes all workspaces from the in-memory storage, while
     * {@link CheEnvironmentEngine} is responsible for environment destroying.
     */
    @PreDestroy
    @VisibleForTesting
    void cleanup() {
        isPreDestroyInvoked = true;

        try (StripedLocks.WriteAllLock lock = stripedLocks.acquireWriteAllLock()) {
            for (Map.Entry<String, WorkspaceState> workspace : workspaces.entrySet()) {
                if (workspace.getValue().status.equals(RUNNING) ||
                    workspace.getValue().status.equals(WorkspaceStatus.STARTING)) {
                    executor.execute(() -> {
                        try {
                            environmentEngine.stop(workspace.getKey());
                        } catch (ServerException | NotFoundException e) {
                            LOG.error(e.getLocalizedMessage(), e);
                        }
                    });
                }
            }

            workspaces.clear();

            executor.shutdown();
        }
        try {
            if (!executor.awaitTermination(50, TimeUnit.SECONDS)) {
                executor.shutdownNow();
                if (!executor.awaitTermination(10, TimeUnit.SECONDS)) {
                    LOG.warn("Unable terminate destroy machines pool");
                }
            }
        } catch (InterruptedException e) {
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }

