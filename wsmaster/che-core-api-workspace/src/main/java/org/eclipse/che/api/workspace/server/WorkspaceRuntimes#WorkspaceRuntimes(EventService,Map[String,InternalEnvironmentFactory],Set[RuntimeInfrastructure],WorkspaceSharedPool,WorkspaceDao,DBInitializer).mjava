  @Inject
  public WorkspaceRuntimes(
      EventService eventService,
      Map<String, InternalEnvironmentFactory> environmentFactories,
      Set<RuntimeInfrastructure> infrastructures,
      WorkspaceSharedPool sharedPool,
      WorkspaceDao workspaceDao,
      @SuppressWarnings("unused") DBInitializer ignored) {
    this.runtimes = new ConcurrentHashMap<>();
    this.eventService = eventService;
    this.sharedPool = sharedPool;
    this.workspaceDao = workspaceDao;
    this.isStartRefused = new AtomicBoolean(false);

    // TODO: consider extracting to a strategy interface(1. pick the last, 2. fail with conflict)
    Map<String, RuntimeInfrastructure> tmp = new HashMap<>();
    for (RuntimeInfrastructure infra : infrastructures) {
      for (String type : infra.getRecipeTypes()) {
        LOG.info("Register infrastructure '{}' recipe type '{}'", infra.getName(), type);
        RuntimeInfrastructure existingInfra = tmp.put(type, infra);
        if (existingInfra != null) {
          LOG.warn(
              "Both '{}' and '{}' infrastructures support recipe of type '{}', infrastructure '{}' will be used",
              infra.getName(),
              existingInfra.getName(),
              type,
              infra.getName());
        }
      }
    }
    infraByRecipe = ImmutableMap.copyOf(tmp);
    this.environmentFactories = ImmutableMap.copyOf(environmentFactories);
  }

