  @POST
  @Path("/runtime")
  @Consumes(APPLICATION_JSON)
  @Produces(APPLICATION_JSON)
  @ApiOperation(
      value = "Start the temporary workspace from the given configuration",
      notes =
          "This operation can be performed only by the authorized user or temp user."
              + "The workspace starts synchronously")
  @ApiResponses({
    @ApiResponse(code = 200, message = "The workspace is starting"),
    @ApiResponse(code = 400, message = "The update config is not valid"),
    @ApiResponse(code = 404, message = "The workspace with specified id doesn't exist"),
    @ApiResponse(
        code = 403,
        message = "The user is not workspace owner" + "The operation is not allowed for the user"),
    @ApiResponse(
        code = 409,
        message =
            "Any conflict occurs during the workspace start"
                + "(e.g. workspace with such name already exists"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public WorkspaceDto startFromConfig(
      @ApiParam(value = "The configuration to start the workspace from", required = true)
          WorkspaceConfigDto config,
      @ApiParam("Weather this workspace is temporary or not")
          @QueryParam("temporary")
          @DefaultValue("false")
          Boolean isTemporary,
      @ApiParam("Namespace where workspace should be created") @QueryParam("namespace")
          String namespace)
      throws BadRequestException, ForbiddenException, NotFoundException, ServerException,
          ConflictException {
    requiredNotNull(config, "Workspace configuration");
    relativizeRecipeLinks(config);
    if (namespace == null) {
      namespace = EnvironmentContext.getCurrent().getSubject().getUserName();
    }

    try {
      Workspace workspace =
          workspaceManager.startWorkspace(config, namespace, isTemporary, new HashMap<>());
      return asDtoWithLinksAndToken(workspace);
    } catch (ValidationException x) {
      throw new BadRequestException(x.getMessage());
    }
  }

