  @POST
  @Path("/{id}/environment")
  @Consumes(APPLICATION_JSON)
  @Produces(APPLICATION_JSON)
  @ApiOperation(
      value = "Add a new environment to the workspace",
      notes = "This operation can be performed only by the workspace owner")
  @ApiResponses({
    @ApiResponse(code = 200, message = "The workspace successfully updated"),
    @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
    @ApiResponse(code = 403, message = "The user does not have access to add the environment"),
    @ApiResponse(code = 404, message = "The workspace not found"),
    @ApiResponse(code = 409, message = "Environment with such name already exists"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public WorkspaceDto addEnvironment(
      @ApiParam("The workspace id") @PathParam("id") String id,
      @ApiParam(value = "The new environment", required = true) EnvironmentDto newEnvironment,
      @ApiParam(value = "The name of the environment", required = true) @QueryParam("name")
          String envName)
      throws ServerException, BadRequestException, NotFoundException, ConflictException,
          ForbiddenException {
    requiredNotNull(newEnvironment, "New environment");
    requiredNotNull(envName, "New environment name");
    relativizeRecipeLinks(newEnvironment);
    WorkspaceImpl workspace = workspaceManager.getWorkspace(id);
    if (workspace.getConfig() == null) {
      throw new ConflictException(
          "This method can not be invoked for workspace created from Devfile. Use update workspace method instead.");
    }
    workspace.getConfig().getEnvironments().put(envName, new EnvironmentImpl(newEnvironment));
    return asDtoWithLinksAndToken(doUpdate(id, workspace));
  }

