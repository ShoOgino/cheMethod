    private Instance startMachineInstance(MachineConfig originMachineConfig,
                                          String workspaceId,
                                          String machineId,
                                          String environmentName,
                                          String creator,
                                          boolean recover,
                                          MessageConsumer<MachineLogMessage> environmentLogger)
            throws ServerException {

        final MachineImpl machine = new MachineImpl(originMachineConfig,
                                                    machineId,
                                                    workspaceId,
                                                    environmentName,
                                                    creator,
                                                    MachineStatus.CREATING,
                                                    null);
        if ("recipe".equalsIgnoreCase(machine.getConfig().getSource().getType())) {
            machine.getConfig().getSource().setType("dockerfile");
        }
        if (originMachineConfig.getLimits().getRam() == 0) {
            machine.getConfig().setLimits(new LimitsImpl(defaultMachineMemorySizeMB));
        }
        final MachineSourceImpl sourceCopy = machine.getConfig().getSource();

        LineConsumer machineLogger = null;
        try {
            machineLogger = getMachineLogger(environmentLogger, machineId, originMachineConfig.getName());
            if (recover) {
                final SnapshotImpl snapshot = snapshotDao.getSnapshot(workspaceId,
                                                                      environmentName,
                                                                      machine.getConfig().getName());
                machine.getConfig().setSource(snapshot.getMachineSource());
            }

            final InstanceProvider instanceProvider =
                    machineInstanceProviders.getProvider(machine.getConfig().getType());

            if (!instanceProvider.getRecipeTypes().contains(machine.getConfig()
                                                                   .getSource()
                                                                   .getType()
                                                                   .toLowerCase())) {
                throw new ServerException(format("Recipe type %s of %s machine is unsupported",
                                                 machine.getConfig().getSource().getType(),
                                                 machine.getConfig().getName()));
            }

            try {
                Instance instance;
                try {
                    instance = instanceProvider.createInstance(machine, machineLogger);
                } catch (SourceNotFoundException e) {
                    if (recover) {
                        LOG.error("Image of snapshot for machine " + machine.getConfig().getName() + " not found. " +
                                  "Machine will be created from origin source");
                        machine.getConfig().setSource(sourceCopy);
                        instance = instanceProvider.createInstance(machine, machineLogger);
                    } else {
                        throw e;
                    }
                }
                instance.setStatus(MachineStatus.RUNNING);
                return instance;
            } catch (ApiException creationEx) {
                try {
                    machineLogger.writeLine("[ERROR] " + creationEx.getLocalizedMessage());
                } catch (IOException ioEx) {
                    LOG.error(ioEx.getLocalizedMessage());
                }

                throw new MachineException(creationEx.getLocalizedMessage(), creationEx);
            }
        } catch (ApiException apiEx) {
            if (machineLogger != null) {
                try {
                    machineLogger.close();
                } catch (IOException ioEx) {
                    LOG.error(ioEx.getLocalizedMessage(), ioEx);
                }
            }

            throw new MachineException(apiEx.getLocalizedMessage(), apiEx);
        }
    }

