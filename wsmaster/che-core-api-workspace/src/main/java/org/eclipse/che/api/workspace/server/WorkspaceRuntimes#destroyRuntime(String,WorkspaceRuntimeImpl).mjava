    /**
     * Stops workspace by destroying all its machines and removing it from the in memory storage.
     */
    private void destroyRuntime(String workspaceId,
                                WorkspaceRuntimeImpl workspace) throws NotFoundException, ServerException {
        publishEvent(EventType.STOPPING, workspaceId, null);

        // Preparing the list of machines to be destroyed, dev machine goes last
        final List<MachineImpl> machines = workspace.getMachines();
        final MachineImpl devMachine = removeFirstMatching(machines, m -> m.getConfig().isDev());

        // Synchronously destroying all non-dev machines
        for (MachineImpl machine : machines) {
            try {
                machineManager.destroy(machine.getId(), false);
            } catch (NotFoundException ignore) {
                // This may happen, if machine is stopped by direct call to the Machine API
                // MachineManager cleanups all the machines due to application server shutdown
                // As non-dev machines don't affect runtime status, this exception is ignored
            } catch (RuntimeException | MachineException ex) {
                LOG.error(format("Could not destroy machine '%s' of workspace '%s'",
                                 machine.getId(),
                                 machine.getWorkspaceId()),
                          ex);
            }
        }

        // Synchronously destroying dev-machine
        try {
            machineManager.destroy(devMachine.getId(), false);
            publishEvent(EventType.STOPPED, workspaceId, null);
        } catch (NotFoundException ignore) {
            // This may happen, if machine is stopped by direct call to the Machine API
            // MachineManager cleanups all the machines due to application server shutdown
            // In this case workspace is considered as successfully stopped
            publishEvent(EventType.STOPPED, workspaceId, null);
        } catch (RuntimeException | ServerException ex) {
            publishEvent(EventType.ERROR, workspaceId, ex.getLocalizedMessage());
            throw ex;
        } finally {
            removeRuntime(workspaceId);
        }
    }

