  /**
   * Gets Workspace.Next features list from provided workspace attributes, fetches corresponding
   * objects from Feature API and returns list of {@link ChePlugin} needed to provide features
   * functionality in a workspace.
   *
   * <p>This method resolves feature dependencies and parameters, so returned list of {@code
   * ChePlugins} is ready to be applied to a workspace runtime.
   *
   * @param attributes workspace attributes
   * @throws InfrastructureException when features list contains invalid entries or Workspace.Next
   *     objects retrieval from Feature API fails
   */
  public Collection<ChePlugin> get(Map<String, String> attributes) throws InfrastructureException {
    if (featureApi == null || attributes == null || attributes.isEmpty()) {
      return emptyList();
    }
    String featuresAttribute = attributes.get(Constants.WORKSPACE_NEXT_FEATURES);
    if (isNullOrEmpty(featuresAttribute)) {
      return emptyList();
    }
    String[] features = featuresAttribute.split(" *, *");
    if (features.length == 0) {
      return emptyList();
    }

    Collection<Pair<String, String>> featuresNameVersion = parseFeatures(features);

    return toPlugins(getFeatures(featuresNameVersion));
  }

