  /**
   * Returns map where key is concatenation of service name, version and parameter name separated by
   * slash symbol. < serviceName/serviceVersion/${parameter} > to < parameterValue >
   */
  private Map<String, List<String>> getServicesParameters(Collection<CheFeature> features) {
    Map<String, List<String>> parameters = new HashMap<>();
    for (CheFeature feature : features) {
      for (CheServiceReference serviceReference : feature.getSpec().getServices()) {
        if (serviceReference.getParameters().isEmpty()) {
          continue;
        }

        String serviceName = serviceReference.getName();
        String serviceVersion = serviceReference.getVersion();

        for (CheServiceParameter cheServiceParameter : serviceReference.getParameters()) {
          // add dollar sign and curly brackets because parameter is easier to find with these signs
          // in the map keys
          String parameterKey =
              serviceName + "/" + serviceVersion + "/${" + cheServiceParameter.getName() + "}";
          List<String> cheServiceParameters =
              parameters.computeIfAbsent(parameterKey, key -> new ArrayList<>());
          cheServiceParameters.add(cheServiceParameter.getValue());
        }
      }
    }
    return parameters;
  }

