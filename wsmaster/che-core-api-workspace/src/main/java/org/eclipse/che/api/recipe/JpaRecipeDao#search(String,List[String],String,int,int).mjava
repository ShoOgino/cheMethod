  @Override
  @Transactional
  public List<OldRecipeImpl> search(
      String user, List<String> tags, String type, int skipCount, int maxItems)
      throws ServerException {
    try {
      final EntityManager manager = managerProvider.get();
      final CriteriaBuilder cb = manager.getCriteriaBuilder();
      final CriteriaQuery<OldRecipeImpl> query = cb.createQuery(OldRecipeImpl.class);
      final Root<OldRecipeImpl> fromRecipe = query.from(OldRecipeImpl.class);
      final ParameterExpression<String> typeParam = cb.parameter(String.class, "recipeType");
      final Predicate checkType =
          cb.or(cb.isNull(typeParam), cb.equal(fromRecipe.get("type"), typeParam));
      final TypedQuery<OldRecipeImpl> typedQuery;
      if (tags != null && !tags.isEmpty()) {
        final Join<OldRecipeImpl, String> tag = fromRecipe.join("tags");
        query
            .select(cb.construct(OldRecipeImpl.class, tag.getParent()))
            .where(cb.and(checkType, tag.in(tags)))
            .groupBy(fromRecipe.get("id"))
            .having(cb.equal(cb.count(tag), tags.size()));
        typedQuery = manager.createQuery(query).setParameter("tags", tags);
      } else {
        typedQuery = manager.createQuery(query.where(checkType));
      }
      return typedQuery
          .setParameter("recipeType", type)
          .setFirstResult(skipCount)
          .setMaxResults(maxItems)
          .getResultList();
    } catch (RuntimeException ex) {
      throw new ServerException(ex.getLocalizedMessage(), ex);
    }
  }

