  /**
   * Creates a valid instance of InternalEnvironment.
   *
   * <p>To construct a valid instance it performs the following actions:
   *
   * <ul>
   *   <li>download recipe content if it is needed;
   *   <li>retrieve the configured installers from installers registry;
   *   <li>normalize servers port by adding default protocol in port if it is absent;
   *   <li>validate the environment machines;
   *   <li>invoke implementation specific method that should validate and parse recipe;
   *   <li>ensure there are environment variables pointing to machine names;
   * </ul>
   *
   * @param sourceEnv the environment
   * @return InternalEnvironment a valid InternalEnvironment instance
   * @throws InfrastructureException if exception occurs on recipe downloading
   * @throws InfrastructureException if infrastructure specific error occurs
   * @throws ValidationException if validation fails
   */
  public T create(@Nullable final Environment sourceEnv)
      throws InfrastructureException, ValidationException {

    Map<String, InternalMachineConfig> machines = new HashMap<>();
    List<Warning> warnings = new ArrayList<>();
    InternalRecipe recipe = null;

    if (sourceEnv != null) {
      recipe = recipeRetriever.getRecipe(sourceEnv.getRecipe());

      for (Map.Entry<String, ? extends MachineConfig> machineEntry :
          sourceEnv.getMachines().entrySet()) {
        MachineConfig machineConfig = machineEntry.getValue();

        List<Installer> installers;
        try {
          installers = installerRegistry.getOrderedInstallers(machineConfig.getInstallers());
        } catch (InstallerException e) {
          throw new InfrastructureException(e);
        }

        machines.put(
            machineEntry.getKey(),
            new InternalMachineConfig(
                installers,
                normalizeServers(machineConfig.getServers()),
                machineConfig.getEnv(),
                machineConfig.getAttributes(),
                machineConfig.getVolumes()));
      }

      machinesValidator.validate(machines);
    }

    T internalEnv = doCreate(recipe, machines, warnings);

    internalEnv
        .getMachines()
        .values()
        .forEach(m -> m.getAttributes().put(CONTAINER_SOURCE_ATTRIBUTE, RECIPE_CONTAINER_SOURCE));

    return internalEnv;
  }

