  /**
   * Finds machine in provided environment which contains wsagent server.
   *
   * @param environment environment to find a machine with the wsagent server
   * @return {@link Optional} with name of the machine which contains wsagent server or empty if
   *     such machine is not present in provided environment
   * @throws IllegalArgumentException if more than 1 machine with the wsagent server are found
   */
  public static Optional<String> getWsAgentServerMachine(InternalEnvironment environment) {

    List<String> machinesWithWsAgentServer =
        environment
            .getMachines()
            .entrySet()
            .stream()
            .filter(entry -> containsWsAgentServer(entry.getValue()))
            .map(Map.Entry::getKey)
            .collect(Collectors.toList());

    if (machinesWithWsAgentServer.isEmpty()) {
      return Optional.empty();
    }
    if (machinesWithWsAgentServer.size() == 1) {
      return Optional.of(machinesWithWsAgentServer.get(0));
    }
    throw new IllegalArgumentException(
        format(
            "Environment contains '%s' machines with wsagent server. Machines names: '%s'",
            machinesWithWsAgentServer.size(), machinesWithWsAgentServer));
  }

