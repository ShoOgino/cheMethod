    /**
     * Returns those stacks which match the following statements:
     * <ul>
     * <li>If neither {@code user} no {@code tags} are specified(null values passed to the method)
     * then all the stacks which contain 'search' action in
     * {@link StackImpl#getPublicActions() public actions} are returned</li>
     * <li>If {@code user} is specified then all the stacks which contain 'search'
     * action in stack public actions(like defined by previous list item)
     * or those which specify 'search' action in access control entry
     * for given {@code user} are returned</li>
     * <li>Finally, if {@code tags} are specified then the stacks which match 2 rules above,
     * will be filtered by the {@code tags}, stack should contain all of the {@code tags} to be
     * in a result list.</li>
     * </ul>
     *
     * @param user
     *         user id for permission checking
     * @param tags
     *         stack tags to search stacks, may be {@code null}
     * @param skipCount
     *         count of items which should be skipped,
     *         if found items contain fewer than {@code skipCount} items
     *         then return empty list items
     * @param maxItems
     *         max count of items to fetch
     * @return list stacks which contains all of specified {@code tags}
     * @throws ServerException
     *         when any error occurs
     * @throws IllegalArgumentException
     *         when {@code skipCount} or {@code maxItems} is negative
     */
    List<StackImpl> searchStacks(@Nullable String user, @Nullable List<String> tags, int skipCount, int maxItems) throws ServerException;

