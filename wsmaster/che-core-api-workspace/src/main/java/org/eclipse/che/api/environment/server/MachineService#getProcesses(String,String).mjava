    @GET
    @Path("/{machineId}/process")
    @Produces(MediaType.APPLICATION_JSON)
    @ApiOperation(value = "Get processes of machine",
                  response = MachineProcessDto.class,
                  responseContainer = "List")
    @ApiResponses({@ApiResponse(code = 200, message = "The response contains machine process entities"),
                   @ApiResponse(code = 404, message = "Machine with specified ID does not exist"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    @Deprecated
    public List<MachineProcessDto> getProcesses(@ApiParam(value = "Workspace ID")
                                                @PathParam("workspaceId")
                                                String workspaceId,
                                                @ApiParam(value = "Machine ID")
                                                @PathParam("machineId")
                                                String machineId)
            throws NotFoundException,
                   ServerException,
                   ForbiddenException {

        return machineProcessManager.getProcesses(workspaceId, machineId)
                                    .stream()
                                    .map(DtoConverter::asDto)
                                    .map(machineProcess -> linksInjector.injectLinks(machineProcess,
                                                                                     workspaceId,
                                                                                     machineId,
                                                                                     getServiceContext()))
                                    .collect(Collectors.toList());
    }

