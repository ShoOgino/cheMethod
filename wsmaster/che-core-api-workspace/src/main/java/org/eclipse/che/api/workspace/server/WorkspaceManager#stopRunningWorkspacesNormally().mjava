    /**
     * Stops all the running and starting workspaces - snapshotting them before if needed.
     * Workspace stop operations executed asynchronously while the method waits
     * for async task to finish.
     */
    private void stopRunningWorkspacesNormally() throws InterruptedException {
        if (runtimes.isAnyRunning()) {

            // getting all the running or starting workspaces
            ArrayList<WorkspaceImpl> runningOrStarting = new ArrayList<>();
            for (String workspaceId : runtimes.getRuntimesIds()) {
                try {
                    WorkspaceImpl workspace = workspaceDao.get(workspaceId);
                    workspace.setStatus(runtimes.getStatus(workspaceId));
                    if (workspace.getStatus() == WorkspaceStatus.RUNNING || workspace.getStatus() == WorkspaceStatus.STARTING) {
                        runningOrStarting.add(workspace);
                    }
                } catch (NotFoundException | ServerException x) {
                    if (runtimes.hasRuntime(workspaceId)) {
                        LOG.error("Couldn't get the workspace '{}' while it's running, the occurred error: '{}'",
                                  workspaceId,
                                  x.getMessage());
                    }
                }
            }

            // stopping them asynchronously
            CountDownLatch stopLatch = new CountDownLatch(runningOrStarting.size());
            for (WorkspaceImpl workspace : runningOrStarting) {
                try {
                    stopAsync(workspace, null).whenComplete((res, ex) -> stopLatch.countDown());
                } catch (Exception x) {
                    stopLatch.countDown();
                    if (runtimes.hasRuntime(workspace.getId())) {
                        LOG.warn("Couldn't stop the workspace '{}' normally, due to error: {}", workspace.getId(), x.getMessage());
                    }
                }
            }

            // wait for stopping workspaces to complete
            stopLatch.await();
        }
    }

