  private Collection<PluginFQN> parsePluginFQNs(String... plugins) throws InfrastructureException {
    List<PluginFQN> collectedFQNs = new ArrayList<>();
    for (String plugin : plugins) {
      URI repo = null;
      String idVersionString;
      final int idVersionTagDelimiter = plugin.lastIndexOf("/");
      idVersionString = plugin.substring(idVersionTagDelimiter + 1);
      if (idVersionTagDelimiter > -1) {
        try {
          repo = new URI(plugin.substring(0, idVersionTagDelimiter));
        } catch (URISyntaxException e) {
          throw new InfrastructureException(
              "Plugin registry URL is incorrect. Problematic plugin entry:" + plugin);
        }
      }
      String[] idVersion = idVersionString.split(":");
      if (idVersion.length != 2 || idVersion[0].isEmpty() || idVersion[1].isEmpty()) {
        throw new InfrastructureException(
            "Plugin format is illegal. Problematic plugin entry:" + plugin);
      }
      if (collectedFQNs
          .stream()
          .anyMatch(p -> p.getId().equals(idVersion[0]) && p.getVersion().equals(idVersion[1]))) {
        throw new InfrastructureException(
            format(
                "Invalid Che tooling plugins configuration: plugin %s is duplicated",
                idVersion[0] + ":" + idVersion[1])); // even if different repos
      }
      collectedFQNs.add(new PluginFQN(repo, idVersion[0], idVersion[1]));
    }
    return collectedFQNs;
  }

