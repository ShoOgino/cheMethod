  /**
   * Fill the provided map with servers that are provided by installers.
   *
   * @param workspaceId workspace id
   * @param servers map to fill
   * @param installers installers to retrieve servers
   * @throws InfrastructureException if any installer has server that conflicts with already
   *     configured one
   */
  private void fillServers(String  workspaceId, Map<String, ServerConfig> servers,
      List<InstallerImpl> installers)
      throws InfrastructureException {
    for (InstallerImpl installer : installers) {
      for (Map.Entry<String, ? extends ServerConfig> serverEntry :
          installer.getServers().entrySet()) {
        LOG.debug("Provisioning installer config for workspace '{}' and installer '{}'", workspaceId,
            installer.getId());
        if (servers.putIfAbsent(serverEntry.getKey(), serverEntry.getValue()) != null
            && !servers.get(serverEntry.getKey()).equals(serverEntry.getValue())) {
          throw new InfrastructureException(
              format(
                  "Installer '%s' contains server '%s' conflicting with machine configuration",
                  installer.getId(), serverEntry.getKey()));
        }
      }
    }
  }

