    @POST
    @Path("/{id}/runtime")
    @Produces(APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Start the workspace by the id",
                  notes = "This operation can be performed only by the workspace owner." +
                          "The workspace starts asynchronously")
    @ApiResponses({@ApiResponse(code = 200, message = "The workspace is starting"),
                   @ApiResponse(code = 404, message = "The workspace with specified id doesn't exist"),
                   @ApiResponse(code = 403, message = "The user is not workspace owner." +
                                                      "The operation is not allowed for the user"),
                   @ApiResponse(code = 409, message = "Any conflict occurs during the workspace start"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public WorkspaceDto startById(@ApiParam("The workspace id")
                                  @PathParam("id")
                                  String workspaceId,
                                  @ApiParam("The name of the workspace environment that should be used for start")
                                  @QueryParam("environment")
                                  String envName,
                                  @ApiParam("Whether the workspace should be recovered " +
                                            "from the snapshot if the snapshot exists")
                                  @QueryParam("auto-restore")
                                  @DefaultValue("false")
                                  Boolean autoRestore,
                                  @ApiParam("The account id related to this operation")
                                  @QueryParam("accountId")
                                  String accountId) throws ServerException,
                                                           BadRequestException,
                                                           NotFoundException,
                                                           ForbiddenException,
                                                           ConflictException {
        ensureUserIsWorkspaceOwner(workspaceId);

        final Map<String, String> params = Maps.newHashMapWithExpectedSize(2);
        params.put("accountId", accountId);
        params.put("workspaceId", workspaceId);
        permissionManager.checkPermission(START_WORKSPACE, getCurrentUserId(), params);

        final WorkspaceImpl workspace;
        if (autoRestore && snapshotExists(workspaceId)) {
            workspace = workspaceManager.recoverWorkspace(workspaceId, envName, accountId);
        } else {
            workspace = workspaceManager.startWorkspace(workspaceId, envName, accountId);
        }
        return injectLinks(asDto(workspace));
    }

