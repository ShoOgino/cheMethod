    /**
     * Stops running workspace runtime.
     *
     * <p>Stops environment in an implementation specific way.
     * During the stop of the workspace its runtime is accessible with {@link WorkspaceStatus#STOPPING stopping} status.
     * Workspace may be stopped only if its status is {@link WorkspaceStatus#RUNNING}.
     *
     * @param workspaceId
     *         identifier of workspace which should be stopped
     * @throws NotFoundException
     *         when workspace with specified identifier is not running
     * @throws ServerException
     *         when any error occurs during workspace stopping
     * @throws ConflictException
     *         when running workspace status is different from {@link WorkspaceStatus#RUNNING}
     * @see CheEnvironmentEngine#stop(String)
     * @see WorkspaceStatus#STOPPING
     */
    public void stop(String workspaceId) throws NotFoundException, ServerException, ConflictException {
        // This check allows to exit with an appropriate exception before blocking on lock.
        // The double check is required as it is still possible to get unlucky timing
        // between locking and stopping workspace.
        ensurePreDestroyIsNotExecuted();
        try (StripedLocks.WriteLock lock = stripedLocks.acquireWriteLock(workspaceId)) {
            ensurePreDestroyIsNotExecuted();
            WorkspaceState workspaceState = workspaces.get(workspaceId);
            if (workspaceState == null) {
                throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
            }
            if (workspaceState.status != WorkspaceStatus.RUNNING) {
                throw new ConflictException(
                        format("Couldn't stop '%s' workspace because its status is '%s'. Workspace can be stopped only if it is 'RUNNING'",
                               workspaceId,
                               workspaceState.status));
            }

            workspaceState.status = WorkspaceStatus.STOPPING;
        }

        publishWorkspaceEvent(EventType.STOPPING, workspaceId, null);
        String error = null;
        try {
            environmentEngine.stop(workspaceId);
        } catch (ServerException | RuntimeException e) {
            error = e.getLocalizedMessage();
        } finally {
            try (StripedLocks.WriteLock lock = stripedLocks.acquireWriteLock(workspaceId)) {
                workspaces.remove(workspaceId);
            }
        }
        if (error == null) {
            publishWorkspaceEvent(EventType.STOPPED, workspaceId, null);
        } else {
            publishWorkspaceEvent(EventType.ERROR, workspaceId, error);
        }
    }

