  public void validate(JsonNode contentNode) throws DevfileFormatException {
    try {
      List<Problem> validationErrors = new ArrayList<>();
      ProblemHandler handler = ProblemHandler.collectingTo(validationErrors);
      if (!contentNode.hasNonNull("apiVersion")) {
        throw new DevfileFormatException(
            "Devfile schema validation failed. Error: The object must have a property whose name is \"apiVersion\".");
      }
      String apiVersion = contentNode.get("apiVersion").asText();

      if (!schemasByVersion.containsKey(apiVersion)) {
        throw new DevfileFormatException(
            String.format(
                "Version '%s' of the devfile is not supported. Supported versions are '%s'.",
                apiVersion, SUPPORTED_VERSIONS));
      }
      JsonSchema schema = schemasByVersion.get(apiVersion);
      try (JsonReader reader =
          service.createReader(
              new StringReader(jsonMapper.writeValueAsString(contentNode)), schema, handler)) {
        reader.read();
      }
      if (!validationErrors.isEmpty()) {
        String error = errorMessageComposer.extractMessages(validationErrors, new StringBuilder());
        throw new DevfileFormatException(
            format("Devfile schema validation failed. Error: %s", error));
      }
    } catch (IOException e) {
      throw new DevfileFormatException("Unable to validate Devfile. Error: " + e.getMessage());
    }
  }

