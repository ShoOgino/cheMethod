  /** Asynchronously starts given workspace. */
  private void startAsync(WorkspaceImpl workspace, String envName, boolean recover)
      throws ConflictException, NotFoundException, ServerException {
    if (envName != null && !workspace.getConfig().getEnvironments().containsKey(envName)) {
      throw new NotFoundException(
          format(
              "Workspace '%s/%s' doesn't contain environment '%s'",
              workspace.getNamespace(), workspace.getConfig().getName(), envName));
    }
    workspace.getAttributes().put(UPDATED_ATTRIBUTE_NAME, Long.toString(currentTimeMillis()));
    workspaceDao.update(workspace);
    final String env = firstNonNull(envName, workspace.getConfig().getDefaultEnv());

    runtimes
        .startAsync(workspace, env, recover)
        .whenComplete(
            (runtime, ex) -> {
              if (ex == null) {
                LOG.info(
                    "Workspace '{}/{}' with id '{}' started by user '{}'",
                    workspace.getNamespace(),
                    workspace.getConfig().getName(),
                    workspace.getId(),
                    sessionUserNameOr("undefined"));
              } else {
                if (workspace.isTemporary()) {
                  removeWorkspaceQuietly(workspace);
                }
                for (Throwable cause : getCausalChain(ex)) {
                  if (cause instanceof SourceNotFoundException) {
                    return;
                  }
                }
                try {
                  throw ex;
                } catch (EnvironmentException | AgentException e) {
                  // it's okay, e.g. recipe is invalid | start interrupted | agent start failed
                  LOG.info(
                      "Workspace '{}/{}' can't be started because: {}",
                      workspace.getNamespace(),
                      workspace.getConfig().getName(),
                      e.getMessage());
                } catch (Throwable thr) {
                  LOG.error(thr.getMessage(), thr);
                }
              }
            });
  }

