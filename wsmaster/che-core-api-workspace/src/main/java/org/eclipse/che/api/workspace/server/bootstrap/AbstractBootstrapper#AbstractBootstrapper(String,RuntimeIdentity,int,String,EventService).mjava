  public AbstractBootstrapper(
      String machineName,
      RuntimeIdentity runtimeIdentity,
      int bootstrappingTimeoutMinutes,
      String websocketBaseEndpoint,
      EventService eventService) {
    this.machineName = machineName;
    this.bootstrappingTimeoutMinutes = bootstrappingTimeoutMinutes;
    this.eventService = eventService;
    this.installerEndpoint =
        websocketBaseEndpoint + InstallerEndpoint.INSTALLER_WEBSOCKET_ENDPOINT_BASE;
    this.outputEndpoint = websocketBaseEndpoint + OutputEndpoint.OUTPUT_WEBSOCKET_ENDPOINT_BASE;
    this.bootstrapperStatusListener =
        event -> {
          BootstrapperStatus status = event.getStatus();
          //skip starting status event
          if (status.equals(BootstrapperStatus.DONE) || status.equals(BootstrapperStatus.FAILED)) {
            //check boostrapper belongs to current runtime and machine
            RuntimeIdentityDto runtimeId = event.getRuntimeId();
            if (event.getMachineName().equals(machineName)
                && runtimeIdentity.getEnvName().equals(runtimeId.getEnvName())
                && runtimeIdentity.getOwner().equals(runtimeId.getOwner())
                && runtimeIdentity.getWorkspaceId().equals(runtimeId.getWorkspaceId())) {

              finishEventFuture.complete(event);
            }
          }
        };
  }

