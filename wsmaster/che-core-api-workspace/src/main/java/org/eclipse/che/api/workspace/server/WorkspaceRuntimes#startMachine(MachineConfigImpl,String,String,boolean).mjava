    /**
     * Starts the machine from the configuration, returns null if machine start failed.
     */
    private MachineImpl startMachine(MachineConfigImpl config,
                                     String workspaceId,
                                     String envName,
                                     boolean recover) throws ServerException,
                                                             NotFoundException,
                                                             ConflictException {
        MachineImpl machine;
        try {
            if (recover) {
                machine = machineManager.recoverMachine(config, workspaceId, envName);
            } else {
                machine = machineManager.createMachineSync(config, workspaceId, envName);
            }
        } catch (ConflictException x) {
            // The conflict is because of the already running machine
            // which may be running by several reasons:
            // 1. It has been running before the workspace started
            // 2. It was started immediately after the workspace
            // Consider the next example:
            // If workspace starts machines from configurations [m1, m2, m3]
            // and currently starting machine is 'm2' then it is still possible
            // to use direct Machine API call to start the machine 'm3'
            // which will result as a conflict for the workspace API during 'm3' start.
            // This is not usual/normal behaviour but it should be handled.
            // The handling logic gets the running machine instance by the 'm3' config
            // and considers that the machine is started correctly, if it is impossible
            // to find the corresponding machine then the fail will be reported
            // and workspace runtime state will be changed according to the machine config context.
            final Optional<MachineImpl> machineOpt = machineManager.getMachines()
                                                                   .stream()
                                                                   .filter(m -> m.getWorkspaceId().equals(workspaceId)
                                                                                && m.getEnvName().equals(envName)
                                                                                && m.getConfig().equals(config))
                                                                   .findAny();
            if (machineOpt.isPresent() && machineOpt.get().getStatus() == MachineStatus.RUNNING) {
                machine = machineOpt.get();
            } else {
                throw x;
            }
        } catch (BadRequestException x) {
            // TODO don't throw bad request exception from machine manager
            throw new IllegalArgumentException(x.getLocalizedMessage(), x);
        }
        return machine;
    }

