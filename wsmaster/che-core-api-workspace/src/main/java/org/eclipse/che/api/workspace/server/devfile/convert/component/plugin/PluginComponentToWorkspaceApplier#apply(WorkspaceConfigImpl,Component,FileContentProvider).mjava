  /**
   * Applies changes on workspace config according to the specified plugin component.
   *
   * @param workspaceConfig workspace config on which changes should be applied
   * @param pluginComponent plugin component that should be applied
   * @param contentProvider optional content provider that may be used for external component
   *     resource fetching
   * @throws IllegalArgumentException if specified workspace config or plugin component is null
   * @throws IllegalArgumentException if specified component has type different from chePlugin
   */
  @Override
  public void apply(
      WorkspaceConfigImpl workspaceConfig,
      Component pluginComponent,
      @Nullable FileContentProvider contentProvider)
      throws DevfileException {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(pluginComponent != null, "Component must not be null");
    checkArgument(
        PLUGIN_COMPONENT_TYPE.equals(pluginComponent.getType()),
        format("Plugin must have `%s` type", PLUGIN_COMPONENT_TYPE));

    String workspacePluginsAttribute =
        workspaceConfig.getAttributes().get(WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE);

    final String pluginId = pluginComponent.getId();
    final String registryUrl = pluginComponent.getRegistryUrl();

    final ExtendedPluginFQN fqn = componentFQNParser.evaluateFQN(pluginComponent, contentProvider);
    if (!isNullOrEmpty(fqn.getReference())) {
      workspaceConfig
          .getAttributes()
          .put(
              WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE,
              append(workspacePluginsAttribute, fqn.getReference()));
    } else {
      workspaceConfig
          .getAttributes()
          .put(
              WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE,
              append(
                  workspacePluginsAttribute,
                  componentFQNParser.getCompositeId(registryUrl, pluginId)));
    }
    String memoryLimit = pluginComponent.getMemoryLimit();
    if (memoryLimit != null) {
      workspaceConfig
          .getAttributes()
          .put(format(SIDECAR_MEMORY_LIMIT_ATTR_TEMPLATE, fqn.getPublisherAndName()), memoryLimit);
    }

    for (CommandImpl command : workspaceConfig.getCommands()) {
      String commandComponent = command.getAttributes().get(COMPONENT_ALIAS_COMMAND_ATTRIBUTE);

      if (commandComponent == null) {
        // command does not have component information
        continue;
      }

      if (!commandComponent.equals(pluginComponent.getAlias())) {
        continue;
      }

      command.getAttributes().put(PLUGIN_ATTRIBUTE, fqn.getId());
    }

    String pluginsAliases =
        workspaceConfig.getAttributes().get(PLUGINS_COMPONENTS_ALIASES_WORKSPACE_ATTRIBUTE);
    if (pluginComponent.getAlias() != null) {
      workspaceConfig
          .getAttributes()
          .put(
              PLUGINS_COMPONENTS_ALIASES_WORKSPACE_ATTRIBUTE,
              append(
                  pluginsAliases,
                  componentFQNParser.getCompositeId(
                          fqn.getRegistry() != null ? fqn.getRegistry().toString() : null,
                          fqn.getId())
                      + "="
                      + pluginComponent.getAlias()));
    }
  }

