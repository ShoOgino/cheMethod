    @PUT
    @Path("/{id}/environment/{name}")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Update the workspace environment by replacing it with a new one",
                  notes = "This operation can be performed only by the workspace owner")
    @ApiResponses({@ApiResponse(code = 200, message = "The environment successfully updated"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have access to update the environment"),
                   @ApiResponse(code = 404, message = "The workspace or the environment not found"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public WorkspaceDto updateEnvironment(@ApiParam("The workspace id")
                                          @PathParam("id")
                                          String id,
                                          @ApiParam("The name of the environment")
                                          @PathParam("name")
                                          String envName,
                                          @ApiParam(value = "The environment update", required = true)
                                          EnvironmentDto update) throws ServerException,
                                                                        BadRequestException,
                                                                        NotFoundException,
                                                                        ConflictException,
                                                                        ForbiddenException {
        requiredNotNull(update, "Environment description");
        final WorkspaceImpl workspace = workspaceManager.getWorkspace(id);
        final List<EnvironmentImpl> environments = workspace.getConfig().getEnvironments();
        if (!environments.stream().anyMatch(env -> env.getName().equals(envName))) {
            throw new NotFoundException(format("Workspace '%s' doesn't contain environment '%s'", id, envName));
        }
        workspace.getConfig().getEnvironments().add(new EnvironmentImpl(update));
        validator.validateConfig(workspace.getConfig());
        return injectLinks(asDto(workspaceManager.updateWorkspace(id, workspace)));
    }

