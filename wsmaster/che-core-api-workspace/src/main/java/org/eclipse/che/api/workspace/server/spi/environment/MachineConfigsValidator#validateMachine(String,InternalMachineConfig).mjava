  private void validateMachine(String machineName, InternalMachineConfig machineConfig)
      throws ValidationException {

    checkArgument(
        MACHINE_NAME_PATTERN.matcher(machineName).matches(),
        "Name of machine '%s' in environment is invalid",
        machineName);

    if (machineConfig.getServers() != null) {
      for (Map.Entry<String, ? extends ServerConfig> serverEntry :
          machineConfig.getServers().entrySet()) {
        String serverName = serverEntry.getKey();
        ServerConfig server = serverEntry.getValue();

        checkArgument(
            server.getPort() != null && SERVER_PORT_PATTERN.matcher(server.getPort()).matches(),
            "Machine '%s' in environment contains server conf '%s' with invalid port '%s'",
            machineName,
            serverName,
            server.getPort());
        checkArgument(
            server.getProtocol() == null
                || SERVER_PROTOCOL_PATTERN.matcher(server.getProtocol()).matches(),
            "Machine '%s' in environment contains server conf '%s' with invalid protocol '%s'",
            machineName,
            serverName,
            server.getProtocol());
      }
    }

    if (machineConfig.getAttributes() != null) {
      String memoryLimit = machineConfig.getAttributes().get(MEMORY_LIMIT_ATTRIBUTE);
      String memoryRequest = machineConfig.getAttributes().get(MEMORY_REQUEST_ATTRIBUTE);
      if (memoryLimit != null && memoryRequest != null) {
        checkArgument(
            Long.parseLong(memoryLimit) >= Long.parseLong(memoryRequest),
            "Machine '%s' in environment contains inconsistent memory attributes: Memory limit: '%s', Memory request: '%s'",
            machineName,
            Long.parseLong(memoryLimit),
            Long.parseLong(memoryRequest));
      }
    }
  }

