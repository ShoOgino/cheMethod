    /**
     * Stops machine in running environment.
     *
     * @param workspaceId
     *         ID of workspace of environment that owns machine
     * @param machineId
     *         ID of machine that should be stopped
     * @throws NotFoundException
     *         if machine in not found in environment
     * @throws EnvironmentNotRunningException
     *         if environment is not running
     * @throws ConflictException
     *         if stop of dev machine is requested
     * @throws ServerException
     *         if other error occurs
     */
    public void stopMachine(String workspaceId, String machineId) throws NotFoundException,
                                                                         ServerException,
                                                                         ConflictException {
        Instance targetMachine = null;
        try (@SuppressWarnings("unused") CloseableLock lock = stripedLocks.acquireWriteLock(workspaceId)) {
            EnvironmentHolder environmentHolder = environments.get(workspaceId);
            if (environmentHolder == null || environmentHolder.status != EnvStatus.RUNNING) {
                throw new EnvironmentNotRunningException(format("Environment '%s' is not running", workspaceId));
            }
            for (Instance machine : environmentHolder.machines) {
                if (machine.getId().equals(machineId)) {
                    if (machine.getConfig().isDev()) {
                        throw new ConflictException(
                                "Stop of dev machine is not allowed. Please, stop whole environment");
                    }
                    targetMachine = machine;
                    break;
                }
            }
            environmentHolder.machines.remove(targetMachine);
        }
        if (targetMachine == null) {
            throw new NotFoundException(format("Machine with ID '%s' is not found in environment of workspace '%s'",
                                               machineId, workspaceId));
        }

        // out of lock to prevent blocking by potentially long-running method
        destroyMachine(targetMachine);
    }

