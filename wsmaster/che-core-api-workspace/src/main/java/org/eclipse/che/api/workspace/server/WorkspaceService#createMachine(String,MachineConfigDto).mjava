    @POST
    @Path("/{id}/machine")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    @RolesAllowed("user")
    @ApiOperation(value = "Create a new machine based on the configuration",
                  notes = "This operation can be performed only by authorized user")
    @ApiResponses({@ApiResponse(code = 201, message = "The machine successfully created"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have access to create the new machine"),
                   @ApiResponse(code = 409, message = "Conflict error occurred during the machine creation" +
                                                      "(e.g. The machine with such name already exists)"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public Response createMachine(@ApiParam("The workspace id")
                                  @PathParam("id")
                                  String workspaceId,
                                  @ApiParam(value = "The new machine configuration", required = true)
                                  MachineConfigDto machineConfig) throws ForbiddenException,
                                                                         NotFoundException,
                                                                         ServerException,
                                                                         ConflictException,
                                                                         BadRequestException {
        requiredNotNull(machineConfig, "Machine configuration");
        requiredNotNull(machineConfig.getType(), "Machine type");
        requiredNotNull(machineConfig.getSource(), "Machine source");
        requiredNotNull(machineConfig.getSource().getType(), "Machine source type");
        requiredNotNull(machineConfig.getSource().getLocation(), "Machine source location");

        final WorkspaceImpl workspace = workspaceManager.getWorkspace(workspaceId);
        if (workspace.getRuntime() == null) {
            throw new NotFoundException(format("Workspace '%s' is not running, new machine can't be started", workspaceId));
        }

        final MachineImpl machine = machineManager.createMachineAsync(machineConfig,
                                                                      workspaceId,
                                                                      workspace.getRuntime().getActiveEnv());

        return Response.status(201)
                       .entity(MachineService.injectLinks(org.eclipse.che.api.machine.server.DtoConverter.asDto(machine),
                                                          getServiceContext()))
                       .build();
    }

