  public WorkspaceDto injectLinks(WorkspaceDto workspace, ServiceContext serviceContext) {
    final UriBuilder uriBuilder = serviceContext.getServiceUriBuilder();
    final List<Link> links = new ArrayList<>();
    // add common workspace links
    links.add(
        createLink(
            "GET",
            uriBuilder
                .clone()
                .path(WorkspaceService.class, "getByKey")
                .build(workspace.getId())
                .toString(),
            LINK_REL_SELF));
    links.add(
        createLink(
            "POST",
            uriBuilder
                .clone()
                .path(WorkspaceService.class, "startById")
                .build(workspace.getId())
                .toString(),
            APPLICATION_JSON,
            LINK_REL_START_WORKSPACE));
    links.add(
        createLink(
            "DELETE",
            uriBuilder
                .clone()
                .path(WorkspaceService.class, "delete")
                .build(workspace.getId())
                .toString(),
            APPLICATION_JSON,
            LINK_REL_REMOVE_WORKSPACE));
    links.add(
        createLink(
            "GET",
            uriBuilder.clone().path(WorkspaceService.class, "getWorkspaces").build().toString(),
            APPLICATION_JSON,
            GET_ALL_USER_WORKSPACES));
    links.add(
        createLink(
            "GET",
            uriBuilder
                .clone()
                .path(WorkspaceService.class, "getSnapshot")
                .build(workspace.getId())
                .toString(),
            APPLICATION_JSON,
            LINK_REL_GET_SNAPSHOT));

    // TODO here we add url to IDE with workspace name not good solution do it here but critical for
    // this task  https://jira.codenvycorp.com/browse/IDEX-3619
    final URI ideUri =
        uriBuilder
            .clone()
            .replacePath("")
            .path(workspace.getNamespace())
            .path(workspace.getConfig().getName())
            .build();
    links.add(createLink("GET", ideUri.toString(), TEXT_HTML, LINK_REL_IDE_URL));

    // add workspace channel links
    final Link workspaceChannelLink =
        createLink(
            "GET",
            serviceContext
                .getBaseUriBuilder()
                .path("ws")
                .scheme("https".equals(ideUri.getScheme()) ? "wss" : "ws")
                .build()
                .toString(),
            null);
    final LinkParameter channelParameter =
        newDto(LinkParameter.class).withName("channel").withRequired(true);

    links.add(
        cloneDto(workspaceChannelLink)
            .withRel(LINK_REL_GET_WORKSPACE_EVENTS_CHANNEL)
            .withParameters(
                singletonList(
                    cloneDto(channelParameter)
                        .withDefaultValue("workspace:" + workspace.getId()))));

    links.add(
        cloneDto(workspaceChannelLink)
            .withRel(LINK_REL_ENVIRONMENT_OUTPUT_CHANNEL)
            .withParameters(
                singletonList(
                    cloneDto(channelParameter)
                        .withDefaultValue(
                            format(ENVIRONMENT_OUTPUT_CHANNEL_TEMPLATE, workspace.getId())))));

    links.add(
        cloneDto(workspaceChannelLink)
            .withRel(LINK_REL_ENVIRONMENT_STATUS_CHANNEL)
            .withParameters(
                singletonList(
                    cloneDto(channelParameter)
                        .withDefaultValue(
                            format(ENVIRONMENT_STATUS_CHANNEL_TEMPLATE, workspace.getId())))));

    // add links for running workspace
    injectRuntimeLinks(workspace, ideUri, uriBuilder, serviceContext);
    return workspace.withLinks(links);
  }

