  /**
   * Tries to add default plugins to the Devfile components. Each plugin is initially parsed by
   * plugin ref. If the plugin does not have a reference, it is added to the component list, and its
   * plugin ID will be used to resolve it. If it has a reference, the Plugin is evaluated, so that
   * its meta.yaml can be retrieved. From the meta.yaml, the new Component's ID and reference are
   * properly set, and the Component is added to the list.
   *
   * @param devfileComponents - The list of Devfile components
   * @param contentProvider - The content provider to retrieve YAML
   * @param missingPluginsIdToRef - The list of default plugins that are not currently in the list
   *     of devfile components
   * @throws InfrastructureException if the parser is unable to evaluate the FQN of the plugin.
   */
  private void addMissingPlugins(
      List<ComponentImpl> devfileComponents,
      FileContentProvider contentProvider,
      Map<String, String> missingPluginsIdToRef)
      throws InfrastructureException {
    for (String pluginRef : missingPluginsIdToRef.values()) {
      ComponentImpl component;
      ExtendedPluginFQN fqn = pluginFQNParser.parsePluginFQN(pluginRef);
      if (!isNullOrEmpty(fqn.getId())) {
        component = new ComponentImpl(PLUGIN_COMPONENT_TYPE, pluginRef);
      } else {
        component = createReferencePluginComponent(pluginRef, contentProvider);
      }
      devfileComponents.add(component);
    }
  }

