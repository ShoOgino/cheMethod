  private static JsonObject asEnvironment(JsonObject env, String envName) {
    final JsonObject devMachine = findDevMachine(env);

    // check environment is a valid old format environment
    if (devMachine == null) {
      throw new IllegalArgumentException(
          "Bad format, expected dev-machine to be present in environment " + envName);
    }
    if (!devMachine.has("name") || devMachine.get("name").isJsonNull()) {
      throw new IllegalArgumentException("Bad format, expected dev-machine to provide a name");
    }
    if (!devMachine.has("source") || !devMachine.get("source").isJsonObject()) {
      throw new IllegalArgumentException("Bad format, expected dev-machine to provide a source");
    }
    final JsonObject source = devMachine.getAsJsonObject("source");
    if (!source.has("type") || source.get("type").isJsonObject()) {
      throw new IllegalArgumentException(
          "Bad format, expected dev-machine to provide a source with a type");
    }

    // convert dev-machine to a new format
    final JsonObject newMachine = new JsonObject();

    // dev-machine agents
    final JsonArray agents = new JsonArray();
    agents.add(new JsonPrimitive("org.eclipse.che.exec"));
    agents.add(new JsonPrimitive("org.eclipse.che.terminal"));
    agents.add(new JsonPrimitive("org.eclipse.che.ws-agent"));
    agents.add(new JsonPrimitive("org.eclipse.che.ssh"));
    newMachine.add("agents", agents);

    // dev-machine ram
    if (devMachine.has("limits")) {
      if (!devMachine.get("limits").isJsonObject()) {
        throw new IllegalArgumentException(
            format("Bad limits format in the dev-machine of '%s' environment", envName));
      }
      final JsonObject limits = devMachine.getAsJsonObject("limits");
      if (limits.has("ram")) {
        final Integer ram = tryParse(limits.get("ram").getAsString());
        if (ram == null || ram < 0) {
          throw new IllegalArgumentException(
              format(
                  "Bad format, ram of dev-machine in environment '%s' "
                      + "must an unsigned integer value",
                  envName));
        }
        final JsonObject attributes = new JsonObject();
        attributes.addProperty("memoryLimitBytes", Long.toString(1024L * 1024L * ram));
        newMachine.add("attributes", attributes);
      }
    }

    // dev-machine servers
    if (devMachine.has("servers")) {
      if (!devMachine.get("servers").isJsonArray()) {
        throw new IllegalArgumentException(
            "Bad format of servers in dev-machine, servers must be json array");
      }
      final JsonObject newServersObj = new JsonObject();
      for (JsonElement serversEl : devMachine.get("servers").getAsJsonArray()) {
        final JsonObject oldServerObj = serversEl.getAsJsonObject();
        if (!oldServerObj.has("ref")) {
          throw new IllegalArgumentException(
              "Bad format of server in dev-machine, server must contain ref");
        }
        final String ref = oldServerObj.get("ref").getAsString();
        oldServerObj.remove("ref");
        if (oldServerObj.has("path")) {
          final JsonObject props = new JsonObject();
          props.add("path", oldServerObj.get("path"));
          oldServerObj.add("properties", props);
          oldServerObj.remove("path");
        }
        newServersObj.add(ref, oldServerObj);
      }
      newMachine.add("servers", newServersObj);
    }

    // create an environment recipe
    final JsonObject envRecipe = new JsonObject();
    final String type = source.get("type").getAsString();
    switch (type) {
      case "recipe":
      case "dockerfile":
        envRecipe.addProperty("type", "dockerfile");
        envRecipe.addProperty("contentType", "text/x-dockerfile");
        if (source.has("content") && !source.get("content").isJsonNull()) {
          envRecipe.addProperty("content", source.get("content").getAsString());
        } else if (source.has("location") && !source.get("location").isJsonNull()) {
          envRecipe.addProperty("location", source.get("location").getAsString());
        } else {
          throw new IllegalArgumentException(
              "Bad format, expected dev-machine source with type 'dockerfile' "
                  + "to provide either 'content' or 'location'");
        }
        break;
      case "image":
        if (!source.has("location") || source.get("location").isJsonNull()) {
          throw new IllegalArgumentException(
              "Bad format, expected dev-machine source with type 'image' "
                  + "to provide image 'location'");
        }
        envRecipe.addProperty("type", "dockerimage");
        envRecipe.addProperty("location", source.get("location").getAsString());
        break;
      default:
        throw new IllegalArgumentException(
            format("Bad format, dev-machine source type '%s' is not supported", type));
    }

    // create a new environment
    final JsonObject newEnv = new JsonObject();
    newEnv.add("recipe", envRecipe);
    final JsonObject machines = new JsonObject();
    machines.add(devMachine.get("name").getAsString(), newMachine);
    newEnv.add("machines", machines);
    return newEnv;
  }

