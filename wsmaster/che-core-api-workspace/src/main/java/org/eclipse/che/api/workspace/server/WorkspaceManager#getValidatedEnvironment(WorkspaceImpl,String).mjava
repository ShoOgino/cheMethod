  private Optional<Pair<String, Environment>> getValidatedEnvironment(
      WorkspaceImpl workspace, @Nullable String envName) throws NotFoundException, ServerException {
    WorkspaceConfig config = workspace.getConfig();

    if (workspace.getDevfile() != null) {
      config = devfileConverter.convert(workspace.getDevfile());
    }

    if (envName != null && !config.getEnvironments().containsKey(envName)) {
      throw new NotFoundException(
          format(
              "Workspace '%s:%s' doesn't contain environment '%s'",
              workspace.getNamespace(), config.getName(), envName));
    }

    envName = firstNonNull(envName, config.getDefaultEnv());

    if (envName == null
        && SidecarToolingWorkspaceUtil.isSidecarBasedWorkspace(config.getAttributes())) {
      // Sidecar-based workspaces are allowed not to have any environments
      return Optional.empty();
    }

    // validate environment in advance
    if (envName == null) {
      throw new NotFoundException(
          format(
              "Workspace %s:%s can't use null environment",
              workspace.getNamespace(), config.getName()));
    }

    Environment environment = config.getEnvironments().get(envName);
    try {
      runtimes.validate(environment);
    } catch (InfrastructureException | ValidationException e) {
      throw new ServerException(e);
    }

    return Optional.of(Pair.of(envName, new EnvironmentImpl(environment)));
  }

