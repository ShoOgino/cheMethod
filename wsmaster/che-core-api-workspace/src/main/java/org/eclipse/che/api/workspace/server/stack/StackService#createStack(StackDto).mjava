    @POST
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @GenerateLink(rel = LINK_REL_CREATE_STACK)
    @RolesAllowed("user")
    @ApiOperation(value = "Create a new stack",
                  notes = "This operation can be performed only by authorized user",
                  response = StackDto.class)
    @ApiResponses({@ApiResponse(code = 201, message = "The stack successfully created"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have access to create a new stack"),
                   @ApiResponse(code = 409, message = "Conflict error occurred during the stack creation" +
                                                      "(e.g. The stack with such name already exists)"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public Response createStack(@ApiParam("The new stack") final StackDto stackDto) throws ApiException {
        requireNonNull(stackDto, "Stack required");
        requireNonNullAndNonEmpty(stackDto.getName(), "Stack name required");
        if (stackDto.getSource() == null && stackDto.getWorkspaceConfig() == null) {
            throw new BadRequestException("Stack source required. You must specify stack source: 'workspaceConfig' or 'stackSource'");
        }

        String userId = EnvironmentContext.getCurrent().getSubject().getUserId();

        StackImpl newStack = StackImpl.builder()
                                      .generateId()
                                      .setName(stackDto.getName())
                                      .setDescription(stackDto.getDescription())
                                      .setScope(stackDto.getScope())
                                      .setCreator(userId)
                                      .setTags(stackDto.getTags())
                                      .setWorkspaceConfig(stackDto.getWorkspaceConfig())
                                      .setSource(stackDto.getSource())
                                      .setComponents(stackDto.getComponents())
                                      .build();

        stackDao.create(newStack);

        return Response.status(CREATED)
                       .entity(asStackDto(newStack))
                       .build();
    }

