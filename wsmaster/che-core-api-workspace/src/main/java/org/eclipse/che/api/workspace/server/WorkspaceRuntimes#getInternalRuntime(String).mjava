  /**
   * Returns {@link InternalRuntime} implementation for workspace with the specified id.
   *
   * <p>If memory-storage does not contain internal runtime, then runtime will be recovered if it is
   * active. Otherwise, an exception will be thrown.
   *
   * @param workspaceId identifier of workspace to fetch runtime
   * @return {@link InternalRuntime} implementation for workspace with the specified id.
   * @throws InfrastructureException if any infrastructure exception occurs
   * @throws ServerException if there is no active runtime for the specified workspace
   * @throws ServerException if any other exception occurs
   */
  public InternalRuntime<?> getInternalRuntime(String workspaceId)
      throws InfrastructureException, ServerException {
    try (Unlocker ignored = lockService.writeLock(workspaceId)) {
      InternalRuntime<?> runtime = runtimes.get(workspaceId);
      if (runtime == null) {
        try {
          final Optional<RuntimeIdentity> runtimeIdentity =
              infrastructure
                  .getIdentities()
                  .stream()
                  .filter(id -> id.getWorkspaceId().equals(workspaceId))
                  .findAny();

          if (runtimeIdentity.isPresent()) {
            LOG.info(
                "Runtime for workspace '{}' is requested but there is no cached one. Recovering it.",
                workspaceId);
            runtime = recoverOne(infrastructure, runtimeIdentity.get());
          } else {
            // runtime is not considered by Infrastructure as active
            throw new ServerException("No active runtime is found");
          }
        } catch (ServerException e) {
          statuses.remove(workspaceId);
          throw e;
        } catch (UnsupportedOperationException | ConflictException e) {
          statuses.remove(workspaceId);
          throw new ServerException(e.getMessage(), e);
        }
      }
      return runtime;
    }
  }

