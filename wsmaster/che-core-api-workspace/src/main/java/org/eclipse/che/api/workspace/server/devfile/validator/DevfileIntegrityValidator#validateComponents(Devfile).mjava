  private Set<String> validateComponents(Devfile devfile) throws DevfileFormatException {
    Set<String> definedAliases = new HashSet<>();
    Component editorComponent = null;

    Map<String, Set<String>> idsPerComponentType = new HashMap<>();

    for (Component component : devfile.getComponents()) {
      if (component.getAlias() != null && !definedAliases.add(component.getAlias())) {
        throw new DevfileFormatException(
            format("Duplicate component alias found:'%s'", component.getAlias()));
      }
      Optional<Map.Entry<String, Long>> duplicatedEndpoint =
          component
              .getEndpoints()
              .stream()
              .map(Endpoint::getName)
              .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))
              .entrySet()
              .stream()
              .filter(e -> e.getValue() > 1L)
              .findFirst();
      if (duplicatedEndpoint.isPresent()) {
        throw new DevfileFormatException(
            format(
                "Duplicated endpoint name '%s' found in '%s' component",
                duplicatedEndpoint.get().getKey(), getIdentifiableComponentName(component)));
      }

      Set<String> tempSet = new HashSet<>();
      for (Env env : component.getEnv()) {
        if (!tempSet.add(env.getName())) {
          throw new DevfileFormatException(
              format(
                  "Duplicate environment variable '%s' found in component '%s'",
                  env.getName(), getIdentifiableComponentName(component)));
        }
      }

      if (!idsPerComponentType
          .computeIfAbsent(component.getType(), __ -> new HashSet<>())
          .add(getIdentifiableComponentName(component))) {

        throw new DevfileFormatException(
            format(
                "There are multiple components '%s' of type '%s' that cannot be uniquely"
                    + " identified. Please add aliases that would distinguish the components.",
                getIdentifiableComponentName(component), component.getType()));
      }

      if (component.getAutomountWorkspaceSecrets() != null && component.getAlias() == null) {
        throw new DevfileFormatException(
            format(
                "The 'automountWorkspaceSecrets' property cannot be used in component which doesn't have alias. "
                    + "Please add alias to component '%s' that would allow to distinguish its containers.",
                getIdentifiableComponentName(component)));
      }

      switch (component.getType()) {
        case EDITOR_COMPONENT_TYPE:
          if (editorComponent != null) {
            throw new DevfileFormatException(
                format(
                    "Multiple editor components found: '%s', '%s'",
                    getIdentifiableComponentName(editorComponent),
                    getIdentifiableComponentName(component)));
          }
          editorComponent = component;
          break;

        case PLUGIN_COMPONENT_TYPE:
        case KUBERNETES_COMPONENT_TYPE:
        case OPENSHIFT_COMPONENT_TYPE:
        case DOCKERIMAGE_COMPONENT_TYPE:
          // do nothing
          break;

        default:
          throw new DevfileFormatException(
              format(
                  "One of the components has unsupported component type: '%s'",
                  component.getType()));
      }
    }
    return definedAliases;
  }

