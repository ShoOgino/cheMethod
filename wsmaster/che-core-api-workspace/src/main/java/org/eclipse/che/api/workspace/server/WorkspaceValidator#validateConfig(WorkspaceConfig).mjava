  /**
   * Checks whether given workspace configuration object is in application valid state, so it
   * provides enough data to be processed by internal components, and the data it provides is valid
   * so consistency is not violated.
   *
   * @param config configuration to validate
   * @throws ValidationException if any of validation constraints is violated
   * @throws NotFoundException when configuration contains a recipe with a type which is not
   *     supported by currently available workspace infrastructures
   * @throws ServerException when any other error occurs during environment validation
   */
  public void validateConfig(WorkspaceConfig config)
      throws ValidationException, NotFoundException, ServerException {
    // configuration object properties
    checkNotNull(config.getName(), "Workspace name required");
    check(
        WS_NAME.matcher(config.getName()).matches(),
        "Incorrect workspace name, it must be between 3 and 20 characters and may contain digits, "
            + "latin letters, underscores, dots, dashes and must start and end only with digits, "
            + "latin letters or underscores");

    // environments
    check(!isNullOrEmpty(config.getDefaultEnv()), "Workspace default environment name required");
    checkNotNull(config.getEnvironments(), "Workspace must contain at least one environment");
    check(
        config.getEnvironments().containsKey(config.getDefaultEnv()),
        "Workspace default environment configuration required");

    for (Environment environment : config.getEnvironments().values()) {
      checkNotNull(environment, "Environment must not be null");
      Recipe recipe = environment.getRecipe();
      checkNotNull(recipe, "Environment recipe must not be null");
      checkNotNull(recipe.getType(), "Environment recipe type must not be null");

      // TODO: spi: deal with exceptions
      try {
        runtimes.validate(environment);
      } catch (InfrastructureException e) {
        throw new ServerException(e);
      }
    }

    // commands
    for (Command command : config.getCommands()) {
      check(
          !isNullOrEmpty(command.getName()),
          "Workspace %s contains command with null or empty name",
          config.getName());
      check(
          !isNullOrEmpty(command.getCommandLine()),
          "Command line required for command '%s' in workspace '%s'",
          command.getName(),
          config.getName());
    }

    // projects
    // TODO
  }

