    /**
     * Stops Runtime.
     * Presumably can take some time so considered to launch in separate thread.
     *
     * <p>Runtime will be stopped only if its state {@link WorkspaceStatus#RUNNING} or {@link WorkspaceStatus#STARTING}.
     *
     * @param stopOptions
     *         options of workspace that may used in environment stop
     * @throws StateException
     *         when the context can't be stopped because otherwise it would be in inconsistent status
     *         (e.g. stop(interrupt) might not be allowed during start)
     * @throws InfrastructureException
     *         when any other error occurs
     */
    public final void stop(Map<String, String> stopOptions) throws InfrastructureException {
        if (status != WorkspaceStatus.RUNNING && status != WorkspaceStatus.STARTING) {
            throw new StateException("The environment must be running or starting");
        }
        status = WorkspaceStatus.STOPPING;

        try {
            internalStop(stopOptions);
        } catch (InternalInfrastructureException e) {
            LOG.error("Error occurs on stop of workspace {}. Error: {}",
                      context.getIdentity().getWorkspaceId(),
                      e.getMessage());
        } catch (InfrastructureException e) {
            LOG.debug(e.getMessage(), e);
        }
        status = WorkspaceStatus.STOPPED;
    }

