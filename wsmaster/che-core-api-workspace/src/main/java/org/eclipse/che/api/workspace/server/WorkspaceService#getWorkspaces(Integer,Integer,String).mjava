  @GET
  @Produces(APPLICATION_JSON)
  @ApiOperation(
    value = "Get workspaces which user can read",
    notes = "This operation can be performed only by authorized user",
    response = WorkspaceDto.class,
    responseContainer = "List"
  )
  @ApiResponses({
    @ApiResponse(code = 200, message = "The workspaces successfully fetched"),
    @ApiResponse(code = 500, message = "Internal server error occurred during workspaces fetching")
  })
  public List<WorkspaceDto> getWorkspaces(
      @ApiParam("The number of the items to skip") @DefaultValue("0") @QueryParam("skipCount")
          Integer skipCount,
      @ApiParam("The limit of the items in the response, default is 30")
          @DefaultValue("30")
          @QueryParam("maxItems")
          Integer maxItems,
      @ApiParam("Workspace status") @QueryParam("status") String status)
      throws ServerException, BadRequestException {
    // TODO add maxItems & skipCount to manager
    return withLinks(
        workspaceManager
            .getWorkspaces(EnvironmentContext.getCurrent().getSubject().getUserId(), false)
            .stream()
            .filter(ws -> status == null || status.equalsIgnoreCase(ws.getStatus().toString()))
            .map(DtoConverter::asDto)
            .collect(toList()));
  }

