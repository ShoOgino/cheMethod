  @PUT
  @Path("/{id}")
  @Produces(APPLICATION_JSON)
  @Consumes(APPLICATION_JSON)
  @GenerateLink(rel = LINK_REL_UPDATE_STACK)
  @ApiOperation(
    value =
        "Update the stack by replacing all the existing data (exclude field \"creator\") with update"
  )
  @ApiResponses({
    @ApiResponse(code = 200, message = "The stack successfully updated"),
    @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
    @ApiResponse(code = 403, message = "The user does not have access to update the stack"),
    @ApiResponse(
      code = 409,
      message =
          "Conflict error occurred during stack update"
              + "(e.g. Stack with such name already exists)"
    ),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public StackDto updateStack(
      @ApiParam(value = "The stack update", required = true) final StackDto updateDto,
      @ApiParam(value = "The stack id", required = true) @PathParam("id") final String id)
      throws ApiException {
    stackValidator.check(updateDto);
    final StackImpl stack = stackDao.getById(id);

    StackImpl stackForUpdate =
        StackImpl.builder()
            .setId(id)
            .setName(updateDto.getName())
            .setDescription(updateDto.getDescription())
            .setScope(updateDto.getScope())
            // user can't edit creator
            .setCreator(stack.getCreator())
            .setTags(updateDto.getTags())
            .setWorkspaceConfig(updateDto.getWorkspaceConfig())
            .setSource(updateDto.getSource())
            .setComponents(updateDto.getComponents())
            .build();

    return asStackDto(stackDao.update(stackForUpdate));
  }

