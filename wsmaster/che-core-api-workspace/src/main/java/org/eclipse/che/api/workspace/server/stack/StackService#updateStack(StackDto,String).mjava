    @PUT
    @Path("/{id}")
    @Produces(APPLICATION_JSON)
    @Consumes(APPLICATION_JSON)
    @GenerateLink(rel = LINK_REL_UPDATE_STACK)
    @RolesAllowed({"user", "system/admin", "system/manager"})
    @ApiOperation(value = "Update the stack by replacing all the existing data (exclude field \"creator\") with update", notes = "This operation can be performed only by stack owner. But user with roles \"system/admin\" or \"system/manager\" " +
                          "can update predefined stack.")
    @ApiResponses({@ApiResponse(code = 200, message = "The stack successfully updated"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have access to update the stack"),
                   @ApiResponse(code = 409, message = "Conflict error occurred during stack update" +
                                                      "(e.g. Stack with such name already exists)"),
                   @ApiResponse(code = 500, message = "Internal server error occurred")})
    public StackDto updateStack(@ApiParam(value = "The stack update", required = true)
                                final StackDto updateDto,
                                @ApiParam(value = "The stack id", required = true)
                                @PathParam("id")
                                final String id) throws ApiException {
        requireNonNull(updateDto, "Stack required");
        if (updateDto.getSource() == null && updateDto.getWorkspaceConfig() == null) {
            throw new BadRequestException("Stack source required. You must specify stack source: 'workspaceConfig' or 'stackSource'");
        }

        final StackImpl stack = stackDao.getById(id);

        final User user = EnvironmentContext.getCurrent().getUser();
        final String userId = user.getId();
        if (!userId.equals(stack.getCreator()) &&
            !user.isMemberOf("system/admin") &&
            !permissionChecker.hasAccess(stack, userId, "write")) {
            throw new ForbiddenException(format("User '%s' doesn't has access to update stack '%s'", userId, id));
        }
        if (updateDto.getPermissions() != null) {
            //ensure that user has access to update stack permissions
            if (!userId.equals(stack.getCreator()) &&
                !user.isMemberOf("system/admin") &&
                !permissionChecker.hasAccess(stack, userId, "update_acl")) {
                throw new ForbiddenException(format("User '%s' doesn't has access to update stack '%s' permissions", userId, id));
            }
            if (!isSystemUser() && permissionChecker.hasPublicSearchPermission(updateDto.getPermissions())) {
                throw new ForbiddenException(format("User '%s' doesn't has access to use 'public: search' permission", userId));
            }
        }

        StackImpl stackForUpdate = StackImpl.builder()
                                            .setId(id)
                                            .setName(updateDto.getName())
                                            .setDescription(updateDto.getDescription())
                                            .setScope(updateDto.getScope())
                                            //user can't edit creator
                                            .setCreator(stack.getCreator())
                                            .setTags(updateDto.getTags())
                                            .setWorkspaceConfig(updateDto.getWorkspaceConfig())
                                            .setSource(updateDto.getSource())
                                            .setComponents(updateDto.getComponents())
                                            .setPermissions(updateDto.getPermissions())
                                            .build();

        stackDao.update(stackForUpdate);
        return asStackDto(stackForUpdate);
    }

