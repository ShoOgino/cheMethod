  @PUT
  @Path("/{id}/command/{name}")
  @Consumes(APPLICATION_JSON)
  @Produces(APPLICATION_JSON)
  @ApiOperation(
    value = "Update the workspace command by replacing the command with a new one",
    notes = "This operation can be performed only by the workspace owner"
  )
  @ApiResponses({
    @ApiResponse(code = 200, message = "The command successfully updated"),
    @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
    @ApiResponse(code = 403, message = "The user does not have access to update the workspace"),
    @ApiResponse(code = 404, message = "The workspace or the command not found"),
    @ApiResponse(code = 409, message = "The Command with such name already exists"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public WorkspaceDto updateCommand(
      @ApiParam("The workspace id") @PathParam("id") String id,
      @ApiParam("The name of the command") @PathParam("name") String cmdName,
      @ApiParam(value = "The command update", required = true) CommandDto update)
      throws ServerException, BadRequestException, NotFoundException, ConflictException,
          ForbiddenException {
    requiredNotNull(update, "Command update");
    final WorkspaceImpl workspace = workspaceManager.getWorkspace(id);
    final List<CommandImpl> commands = workspace.getConfig().getCommands();
    if (!commands.removeIf(cmd -> cmd.getName().equals(cmdName))) {
      throw new NotFoundException(
          format("Workspace '%s' doesn't contain command '%s'", id, cmdName));
    }
    commands.add(new CommandImpl(update));
    validator.validateConfig(workspace.getConfig());
    return linksInjector.injectLinks(
        asDto(workspaceManager.updateWorkspace(workspace.getId(), workspace)), getServiceContext());
  }

