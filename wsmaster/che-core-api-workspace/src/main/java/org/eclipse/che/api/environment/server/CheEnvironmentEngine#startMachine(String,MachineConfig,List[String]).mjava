    /**
     * Starts machine in running environment.
     *
     * @param workspaceId
     *         ID of workspace that owns environment in which machine should be started
     * @param machineConfig
     *         configuration of machine that should be started
     * @return running machine
     * @throws EnvironmentNotRunningException
     *         if environment is not running
     * @throws NotFoundException
     *         if provider of machine implementation is not found
     * @throws ConflictException
     *         if machine with the same name already exists in the environment
     * @throws ServerException
     *         if any other error occurs
     */
    public Instance startMachine(String workspaceId,
                                 MachineConfig machineConfig,
                                 List<String> agents) throws ServerException,
                                                             NotFoundException,
                                                             ConflictException,
                                                             EnvironmentException {

        MachineConfig machineConfigCopy = new MachineConfigImpl(machineConfig);
        EnvironmentHolder environmentHolder;
        try (StripedLocks.ReadLock lock = stripedLocks.acquireReadLock(workspaceId)) {
            environmentHolder = environments.get(workspaceId);
            if (environmentHolder == null || environmentHolder.status != EnvStatus.RUNNING) {
                throw new EnvironmentNotRunningException(format("Environment '%s' is not running", workspaceId));
            }
            for (Instance machine : environmentHolder.machines) {
                if (machine.getConfig().getName().equals(machineConfigCopy.getName())) {
                    throw new ConflictException(
                            format("Machine with name '%s' already exists in environment of workspace '%s'",
                                   machineConfigCopy.getName(), workspaceId));
                }
            }
        }
        final String creator = EnvironmentContext.getCurrent().getSubject().getUserId();
        final String namespace = EnvironmentContext.getCurrent().getSubject().getUserName();

        MachineImpl machine = MachineImpl.builder()
                                         .setConfig(machineConfig)
                                         .setWorkspaceId(workspaceId)
                                         .setStatus(MachineStatus.CREATING)
                                         .setEnvName(environmentHolder.name)
                                         .setOwner(creator)
                                         .build();

        MachineStarter machineStarter;
        if ("docker".equals(machineConfig.getType())) {
            // needed to reuse startInstance method and
            // create machine instances by different implementation-specific providers
            CheServiceImpl service = machineConfigToService(machineConfig);
            normalize(namespace,
                      workspaceId,
                      machineConfig.getName(),
                      service);
            machine.setId(service.getId());

            machineStarter = (machineLogger, machineSource) -> {
                CheServiceImpl serviceWithNormalizedSource = normalizeServiceSource(service, machineSource);

                normalize(namespace,
                          workspaceId,
                          machineConfig.getName(),
                          serviceWithNormalizedSource);

                infrastructureProvisioner.provision(new ExtendedMachineImpl().withAgents(agents),
                                                    serviceWithNormalizedSource);

                return machineProvider.startService(namespace,
                                                    workspaceId,
                                                    environmentHolder.name,
                                                    machineConfig.getName(),
                                                    machineConfig.isDev(),
                                                    environmentHolder.networkId,
                                                    serviceWithNormalizedSource,
                                                    machineLogger);
            };
        } else {
            try {
                InstanceProvider provider = machineInstanceProviders.getProvider(machineConfig.getType());
                machine.setId(generateMachineId());
                addAgentsProvidedServers(machine, agents);

                machineStarter = (machineLogger, machineSource) -> {
                    Machine machineWithNormalizedSource = normalizeMachineSource(machine, machineSource);
                    return provider.createInstance(machineWithNormalizedSource, machineLogger);
                };
            } catch (NotFoundException e) {
                throw new NotFoundException(format("Provider of machine type '%s' not found", machineConfig.getType()));
            }
        }
        return startInstance(false,
                             environmentHolder.logger,
                             machine,
                             machineStarter);
    }

