    /**
     * Creates snapshot of runtime workspace.
     *
     * <p>Basically creates {@link SnapshotImpl snapshot} instance for each machine from
     * runtime workspace's active environment.
     *
     * <p> If snapshot of workspace's dev machine was created successfully
     * publishes {@link EventType#SNAPSHOT_CREATED} event, otherwise publishes {@link EventType#SNAPSHOT_CREATION_ERROR}
     * with appropriate error message.
     *
     * <p> Note that:
     * <br>Snapshots are created asynchronously
     * <br>If snapshot creation for one machine failed, it wouldn't affect another snapshot creations
     *
     * @param workspaceId
     *         runtime workspace id
     * @throws NullPointerException
     *         when {@code workspaceId} is null
     * @throws NotFoundException
     *         when runtime workspace with given id does not exist
     * @throws ServerException
     *         when any other error occurs
     */
    public void createSnapshot(String workspaceId) throws NotFoundException, ServerException {
        requireNonNull(workspaceId, "Required non-null workspace id");

        final WorkspaceImpl workspace = workspaceDao.get(workspaceId);
        final WorkspaceRuntimeImpl runtime = runtimes.get(workspaceId).getRuntime();
        executor.execute(ThreadLocalPropagateContext.wrap(() -> {
            String devMachineSnapshotFailMessage = null;
            for (MachineImpl machine : runtime.getMachines()) {
                try {
                    machineManager.saveSync(machine.getId(),
                                            workspace.getNamespace(),
                                            runtime.getActiveEnv());
                } catch (ApiException apiEx) {
                    if (machine.getConfig().isDev()) {
                        devMachineSnapshotFailMessage = apiEx.getLocalizedMessage();
                    }
                    LOG.error(apiEx.getLocalizedMessage(), apiEx);
                }
            }
            if (devMachineSnapshotFailMessage != null) {
                eventService.publish(newDto(WorkspaceStatusEvent.class)
                                             .withEventType(SNAPSHOT_CREATION_ERROR)
                                             .withWorkspaceId(workspaceId)
                                             .withError(devMachineSnapshotFailMessage));
            } else {
                eventService.publish(newDto(WorkspaceStatusEvent.class)
                                             .withEventType(SNAPSHOT_CREATED)
                                             .withWorkspaceId(workspaceId));
            }
        }));
    }

