  public ExtendedPluginFQN parsePluginFQN(String plugin) throws InfrastructureException {
    String registry;
    String id;
    String publisher;
    String name;
    String version;
    URI registryURI = null;
    Matcher matcher = PLUGIN_PATTERN.matcher(plugin);
    if (matcher.matches()) {
      registry = matcher.group("registry");
      id = matcher.group("id");
      publisher = matcher.group("publisher");
      name = matcher.group("name");
      version = matcher.group("version");
    } else {
      throw new InfrastructureException(format(INCORRECT_PLUGIN_FORMAT_TEMPLATE, plugin));
    }
    if (!isNullOrEmpty(registry)) {
      try {
        registryURI = new URI(registry);
      } catch (URISyntaxException e) {
        throw new InfrastructureException(
            format(
                "Plugin registry URL '%s' is invalid. Problematic plugin entry: '%s'",
                registry, plugin));
      }
    }

    return new ExtendedPluginFQN(registryURI, id, publisher, name, version);
  }

