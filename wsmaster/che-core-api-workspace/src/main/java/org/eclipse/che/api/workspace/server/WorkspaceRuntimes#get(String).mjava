    /**
     * Returns the runtime descriptor describing currently starting/running/stopping
     * workspace runtime.
     *
     * <p>Note that the {@link RuntimeDescriptor#getRuntime()} method
     * returns {@link Optional} which describes just a snapshot copy of
     * a real {@code WorkspaceRuntime} object, which means that any
     * runtime copy modifications won't affect the real object and also
     * it means that copy won't be affected with modifications applied
     * to the real runtime workspace object state.
     *
     * @param workspaceId
     *         the id of the workspace to get its runtime
     * @return descriptor which describes current state of the workspace runtime
     * @throws NotFoundException
     *         when workspace with given {@code workspaceId} doesn't have runtime
     */
    public RuntimeDescriptor get(String workspaceId) throws NotFoundException {
        rwLock.readLock().lock();
        try {
            final RuntimeDescriptor descriptor = descriptors.get(workspaceId);
            if (descriptor == null) {
                throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
            }
            return new RuntimeDescriptor(descriptor);
        } finally {
            rwLock.readLock().unlock();
        }
    }

