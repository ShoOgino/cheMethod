    /**
     * Returns the runtime descriptor describing currently starting/running/stopping
     * workspace runtime.
     *
     * <p>Note that the {@link RuntimeDescriptor#getRuntime()} method
     * returns a copy of a real {@code WorkspaceRuntime} object,
     * which means that any runtime copy modifications won't affect the
     * real object and also it means that copy won't be affected with modifications applied
     * to the real runtime workspace object state.
     *
     * @param workspaceId
     *         the id of the workspace to get its runtime
     * @return descriptor which describes current state of the workspace runtime
     * @throws NotFoundException
     *         when workspace with given {@code workspaceId} is not found
     * @throws ServerException
     *         if environment is in illegal state
     */
    public RuntimeDescriptor get(String workspaceId) throws NotFoundException,
                                                            ServerException {
        WorkspaceState workspaceState;
        try (CloseableLock lock = stripedLocks.acquireReadLock(workspaceId)) {
            workspaceState = workspaces.get(workspaceId);
        }
        if (workspaceState == null) {
            throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
        }

        RuntimeDescriptor runtimeDescriptor = new RuntimeDescriptor(workspaceState.status,
                                                                    new WorkspaceRuntimeImpl(workspaceState.activeEnv,
                                                                                             null,
                                                                                             Collections.emptyList(),
                                                                                             null));
        List<Instance> machines = environmentEngine.getMachines(workspaceId);
        Optional<Instance> devMachineOptional = machines.stream()
                                                        .filter(machine -> machine.getConfig().isDev())
                                                        .findAny();
        if (devMachineOptional.isPresent()) {
            String projectsRoot = devMachineOptional.get().getStatus() == MachineStatus.RUNNING ?
                                  devMachineOptional.get().getRuntime().projectsRoot() :
                                  null;
            runtimeDescriptor.setRuntime(new WorkspaceRuntimeImpl(workspaceState.activeEnv,
                                                                  projectsRoot,
                                                                  machines,
                                                                  devMachineOptional.get()));
        } else if (workspaceState.status == WorkspaceStatus.RUNNING) {
            // invalid state of environment is detected
            String error = format("Dev machine is not found in active environment of workspace '%s'",
                                  workspaceId);
            throw new ServerException(error);
        }

        return runtimeDescriptor;
    }

