    /** Converts {@link Runtime} to {@link RuntimeDto}. */
    public static RuntimeDto asDto(Runtime runtime) {
        if (runtime == null) {
            return null;
        }
        final RuntimeDto runtimeDto = newDto(RuntimeDto.class).withActiveEnv(runtime.getActiveEnv());
//                                                                                .withRootFolder(runtime.getRootFolder());


        Map <String, ? extends Machine> machines = runtime.getMachines();
        Map <String, MachineDto> machineDtos = new HashMap<>();
        for(Map.Entry <String, ? extends Machine> m : machines.entrySet()) {

            Map <String, ServerDto>serverDtos = new HashMap<>();
            for(Map.Entry <String, ? extends Server> s : m.getValue().getServers().entrySet()) {
                ServerDto sDto = newDto(ServerDto.class).withUrl(s.getValue().getUrl());
                        //.withAddress(s.getValue().getAddress())
                        //                                .withProtocol(s.getValue().getProtocol())
                        //                                .withRef(s.getValue().getRef())
                        //                                .withUrl(s.getValue().getUrl());
                // TODO properties?
                                                        //.withProperties(s.getValue().getProperties());
                serverDtos.put(s.getKey(), sDto);
            }

            MachineDto mDto = newDto(MachineDto.class).withProperties(m.getValue().getProperties())
                                                      .withServers(serverDtos);
            machineDtos.put(m.getKey(), mDto);
        }

        runtimeDto.setMachines(machineDtos);

//        runtimeDto.withMachines(runtime.getMachines()
//                                       .stream()
//                                       .map(org.eclipse.che.api.machine.server.DtoConverter::asDto)
//                                       .collect(toList()));
//        if (runtime.getDevMachine() != null) {
//            runtimeDto.withDevMachine(org.eclipse.che.api.machine.server.DtoConverter.asDto(runtime.getDevMachine()));
//        }
        return runtimeDto;
    }

