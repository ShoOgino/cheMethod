    @Test
    public void shouldNotRemoveUserWhenSubscriberThrowsExceptionOnRemoveExistedUser() throws Exception {
        final UserImpl user = new UserImpl("identifier", "test@email.com", "testName", "password", Collections.singletonList("alias"));
        when(userDao.getById(user.getId())).thenReturn(user);
        doThrow(new ServerException("error")).when(beforeUserRemovedEvent).propagateException();

        try {
            manager.remove(user.getId());
            fail("ServerException expected.");
        } catch (ServerException ignored) {
        }

        ArgumentCaptor<Object> firedEvents = ArgumentCaptor.forClass(Object.class);
        verify(eventService, times(1)).publish(firedEvents.capture());

        assertTrue(firedEvents.getValue() instanceof BeforeUserRemovedEvent, "Not a BeforeUserRemovedEvent");
    }

