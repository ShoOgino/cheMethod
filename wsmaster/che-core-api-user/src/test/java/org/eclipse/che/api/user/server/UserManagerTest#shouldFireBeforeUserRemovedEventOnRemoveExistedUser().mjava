    @Test
    public void shouldFireBeforeUserRemovedEventOnRemoveExistedUser() throws Exception {
        final UserImpl user = new UserImpl("identifier", "test@email.com", "testName", "password", Collections.singletonList("alias"));
        when(userDao.getById(user.getId())).thenReturn(user);

        manager.remove(user.getId());

        ArgumentCaptor<Object> firedEvents = ArgumentCaptor.forClass(Object.class);
        verify(eventService, times(2)).publish(firedEvents.capture());

        // the first event - BeforeUserRemovedEvent
        // the second event - UserRemovedEvent
        Object event = firedEvents.getAllValues().get(0);
        assertTrue(event instanceof BeforeUserRemovedEvent, "Not a BeforeUserRemovedEvent");
        assertEquals(((BeforeUserRemovedEvent)event).getUser(), user);
    }

