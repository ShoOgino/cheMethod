    /**
     * Updates current user password.
     *
     * @param password
     *         new user password
     * @throws NotFoundException
     *         when current user not found
     * @throws BadRequestException
     *         when given password is invalid
     * @throws ServerException
     *         when some error occurred while updating profile
     * @see UserDescriptor
     */
    @POST
    @Path("/password")
    @GenerateLink(rel = LINK_REL_UPDATE_PASSWORD)
    @RolesAllowed("user")
    @Consumes(APPLICATION_FORM_URLENCODED)
    @ApiOperation(value = "Update password",
                  notes = "Update current password")
    @ApiResponses({@ApiResponse(code = 204, message = "OK"),
                   @ApiResponse(code = 400, message = "Invalid password"),
                   @ApiResponse(code = 404, message = "Not Found"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    public void updatePassword(@ApiParam(value = "New password", required = true)
                               @FormParam("password")
                               String password) throws NotFoundException,
                                                       BadRequestException,
                                                       ServerException,
                                                       ConflictException {

        checkPassword(password);

        final User user = userManager.getById(currentUserId());
        user.setPassword(password);
        userManager.update(user);
    }

