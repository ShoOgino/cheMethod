  /**
   * Removes the preferences with the given {@code names}.
   *
   * @param userId the id of the user to remove preferences
   * @param names the names to remove
   * @throws NullPointerException when either {@code userId} or {@code names} is null
   * @throws ServerException when any error occurs
   */
  public void remove(String userId, List<String> names) throws ServerException {
    requireNonNull(userId, "Required non-null user id");
    requireNonNull(names, "Required non-null preference names");
    // Holding reference to prevent garbage collection
    // this reentrantLock helps to avoid race-conditions when parallel updates are applied
    final Lock reentrantLock = UPDATE_REENTRANT_LOCKS.get(userId);
    reentrantLock.lock();
    try {
      final Map<String, String> preferences = preferenceDao.getPreferences(userId);
      names.forEach(preferences::remove);
      preferenceDao.setPreferences(userId, preferences);
    } finally {
      reentrantLock.unlock();
    }
  }

