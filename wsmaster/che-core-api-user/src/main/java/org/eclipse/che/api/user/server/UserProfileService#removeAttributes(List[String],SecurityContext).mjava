    /**
     * Removes attributes with given names from current user profile.
     * If names are {@code null} - all attributes will be removed
     *
     * @param attrNames
     *         attributes names to remove
     * @throws ConflictException
     *         when given list of attributes names is {@code null}
     * @throws ServerException
     *         when some error occurred while retrieving/updating profile
     */
    @ApiOperation(value = "Remove attributes of a current user",
                  notes = "Remove attributes of a current user",
                  position = 6)
    @ApiResponses(value = {
            @ApiResponse(code = 204, message = "OK"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 409, message = "Attributes names required"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @DELETE
    @Path("/attributes")
    @GenerateLink(rel = LINK_REL_REMOVE_ATTRIBUTES)
    @RolesAllowed({"user", "temp_user"})
    @Consumes(APPLICATION_JSON)
    public void removeAttributes(@ApiParam(value = "Attributes", required = true)
                                 @Required
                                 @Description("Attributes names to remove")
                                 List<String> attrNames,
                                 @Context SecurityContext context) throws NotFoundException, ServerException, ConflictException {
        final Profile currentProfile = profileDao.getById(currentUser().getId());
        if (attrNames == null) {
            currentProfile.getAttributes().clear();
        } else {
            for (String attributeName : attrNames) {
                currentProfile.getAttributes().remove(attributeName);
            }
        }
        profileDao.update(currentProfile);
    }

