  @Override
  @Transactional
  public Map<String, String> getPreferences(String userId, String filter) throws ServerException {
    requireNonNull(userId);
    requireNonNull(filter);
    try {
      final EntityManager manager = managerProvider.get();
      final PreferenceEntity prefs = manager.find(PreferenceEntity.class, userId);
      if (prefs == null) {
        return new HashMap<>();
      }
      final Map<String, String> preferences = prefs.getPreferences();
      if (!filter.isEmpty()) {
        final Pattern pattern = Pattern.compile(filter);
        return preferences
            .entrySet()
            .stream()
            .filter(preference -> pattern.matcher(preference.getKey()).matches())
            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      } else {
        return preferences;
      }
    } catch (RuntimeException ex) {
      throw new ServerException(ex.getLocalizedMessage(), ex);
    }
  }

