    @GET
    @Path("/find")
    @Produces(APPLICATION_JSON)
    @GenerateLink(rel = LINK_REL_USER)
    @ApiOperation("Get user by email or name")
    @ApiResponses({@ApiResponse(code = 200, message = "The response contains requested user entity"),
                   @ApiResponse(code = 404, message = "User with requested email/name not found"),
                   @ApiResponse(code = 500, message = "Impossible to get user due to internal server error")})
    public UserDto find(@ApiParam("User email, if it is set then name shouldn't be")
                        @QueryParam("email")
                        String email,
                        @ApiParam("User name, if is is set then email shouldn't be")
                        @QueryParam("name")
                        String name) throws NotFoundException,
                                            ServerException,
                                            BadRequestException {
        if (email == null && name == null) {
            throw new BadRequestException("Missed user's email or name");
        }
        if (email != null && name != null) {
            throw new BadRequestException("Expected either user's email or name, while both values received");
        }
        final User user = name == null ? userManager.getByEmail(email) : userManager.getByName(name);
        return linksInjector.injectLinks(asDto(user), getServiceContext());
    }

