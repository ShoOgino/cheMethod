    /**
     * Returns status <b>200</b> and {@link UserDescriptor} built from user with given {@code alias}
     * or status <b>404</b> when user with given {@code alias} was not found.
     *
     * @param alias
     *         alias to search user
     * @return entity of found user
     * @throws NotFoundException
     *         when user with given alias doesn't exist
     * @throws ServerException
     *         when some error occurred while retrieving user
     * @throws BadRequestException
     *         when alias parameter is missing
     * @see UserDescriptor
     * @see #getById(String)
     * @see #remove(String)
     */
    @GET
    @Path("/find")
    @GenerateLink(rel = LINK_REL_GET_USER_BY_EMAIL)
    @RolesAllowed({"user", "system/admin", "system/manager"})
    @Produces(APPLICATION_JSON)
    @ApiOperation(value = "Get user by alias",
                  notes = "Get user by alias. Roles allowed: system/admin, system/manager.",
                  response = UserDescriptor.class)
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 400, message = "Missed alias parameter"),
                   @ApiResponse(code = 404, message = "Not Found"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    public UserDescriptor getByAlias(@ApiParam(value = "User alias", required = true)
                                     @QueryParam("alias")
                                     @Required String alias) throws NotFoundException,
                                                                    ServerException,
                                                                    BadRequestException {
        if (alias == null) {
            throw new BadRequestException("Missed parameter alias");
        }
        final User user = userManager.getByAlias(alias);
        return injectLinks(toDescriptor(user), getServiceContext());
    }

