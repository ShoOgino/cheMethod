    /**
     * Creates new user and his profile.
     *
     * @param newUser
     *         created user
     * @throws NullPointerException
     *         when {@code newUser} is null
     * @throws ConflictException
     *         when user with such name/email/alias already exists
     * @throws ServerException
     *         when any other error occurs
     */
    public User create(User newUser, boolean isTemporary) throws ConflictException, ServerException {
        requireNonNull(newUser, "Required non-null user");
        if (reservedNames.contains(newUser.getName().toLowerCase())) {
            throw new ConflictException(String.format("Username '%s' is reserved", newUser.getName()));
        }
        final String userId = newUser.getId() != null ? newUser.getId() : generate("user", ID_LENGTH);
        final UserImpl user = new UserImpl(userId,
                                           newUser.getEmail(),
                                           newUser.getName(),
                                           firstNonNull(newUser.getPassword(), generate("", PASSWORD_LENGTH)),
                                           newUser.getAliases());
        doCreate(user, isTemporary);
        eventService.publish(new UserCreatedEvent(user));
        return user;
    }

