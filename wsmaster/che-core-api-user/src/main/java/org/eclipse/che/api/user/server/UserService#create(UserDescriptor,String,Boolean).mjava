    /**
     * Creates new user and profile.
     *
     * <p>User will be created from {@code token} parameter or from {@code userDescriptor}
     * when {@code token} is null
     *
     * @param token
     *         authentication token
     * @param isTemporary
     *         if it is {@code true} creates temporary user
     * @return entity of created user
     * @throws ForbiddenException
     *         when the user is not the system admin, or self creation is disabled
     * @throws BadRequestException
     *         when {@code userDescriptor} is invalid
     * @throws UnauthorizedException
     *         when token is null
     * @throws ConflictException
     *         when token is not valid
     * @throws ServerException
     *         when some error occurred while persisting user or user profile
     * @see UserDescriptor
     * @see #getCurrent()
     * @see #updatePassword(String)
     * @see #getById(String)
     * @see #getByAlias(String)
     * @see #remove(String)
     */
    @POST
    @Path("/create")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @GenerateLink(rel = LINK_REL_CREATE_USER)
    @ApiOperation(value = "Create a new user",
                  notes = "Create a new user in the system. There are two ways to create a user: " +
                          "through a regular registration workflow when auth token is sent to user's mailbox" +
                          "and directly with predefined name and password. ",
                  response = UserDescriptor.class)
    @ApiResponses({@ApiResponse(code = 201, message = "Created"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 401, message = "Missed token parameter"),
                   @ApiResponse(code = 403, message = "Invalid or missing request parameters"),
                   @ApiResponse(code = 409, message = "Invalid token"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    public Response create(@ApiParam(value = "New user")
                           UserDescriptor userDescriptor,
                           @ApiParam(value = "Authentication token")
                           @QueryParam("token")
                           String token,
                           @ApiParam(value = "User type")
                           @QueryParam("temporary")
                           @DefaultValue("false")
                           Boolean isTemporary) throws ForbiddenException,
                                                       BadRequestException,
                                                       UnauthorizedException,
                                                       ConflictException,
                                                       ServerException,
                                                       NotFoundException {
        final User user = isNullOrEmpty(token) ? fromEntity(userDescriptor) : fromToken(token);
        if (!isValidUserName(user.getName())) {
            throw new BadRequestException("Username must contain only letters and digits");
        }
        userManager.create(user, isTemporary);
        return status(CREATED).entity(injectLinks(toDescriptor(user), getServiceContext())).build();
    }

