    @PUT
    @Path("/{id}/attributes")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @ApiOperation(value = "Update the profile attributes of the user with requested identifier",
                  notes = "The replace strategy is used for the update, so all the existing profile " +
                          "attributes will be override by the profile update")
    @ApiResponses({@ApiResponse(code = 200, message = "The profile successfully updated and the response contains " +
                                                      "newly updated profile entity"),
                   @ApiResponse(code = 404, message = "When profile for the user with requested identifier doesn't exist"),
                   @ApiResponse(code = 500, message = "Couldn't retrieve profile due to internal server error")})
    public ProfileDto updateAttributesById(@ApiParam("Id of the user")
                                           @PathParam("id")
                                           String userId,
                                           @ApiParam("New profile attributes")
                                           Map<String, String> updates) throws NotFoundException,
                                                                               ServerException,
                                                                               BadRequestException {
        if (updates == null) {
            throw new BadRequestException("Update attributes required");
        }
        final ProfileImpl profile = new ProfileImpl(profileManager.getById(userId));
        profile.setAttributes(updates);
        profileManager.update(profile);
        return linksInjector.injectLinks(asDto(profile, userManager.getById(userId)), getServiceContext());
    }

