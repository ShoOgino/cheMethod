  @PUT
  @Consumes(APPLICATION_JSON)
  @Produces(APPLICATION_JSON)
  @GenerateLink(rel = LINK_REL_PREFERENCES)
  @ApiOperation(
    value = "Updates preferences of logged in user",
    notes =
        "The merge strategy is used for update, which means that "
            + "existing preferences with keys equal to update preference keys will "
            + "be replaces with new values, and new preferences will be added"
  )
  @ApiResponses({
    @ApiResponse(
      code = 200,
      message = "Preferences successfully updated, response contains " + "all the user preferences"
    ),
    @ApiResponse(code = 400, message = "Request doesn't contain preferences update"),
    @ApiResponse(code = 500, message = "Couldn't update preferences due to internal server error")
  })
  public Map<String, String> update(Map<String, String> preferences)
      throws ServerException, BadRequestException {
    if (preferences == null) {
      throw new BadRequestException("Required non-null preferences update");
    }
    return preferenceManager.update(userId(), preferences);
  }

