  /**
   * Rectifies the absence of expiry - this should only happen shortly after the workspace has
   * started if the schedule of this method managed to read the activity before the expiry time has
   * been persisted in the event handler. Otherwise it is a problem.
   *
   * @param activity the activity record of the running workspace with a rectified last running time
   * @param now the current time we're working with
   * @param noLastRunningTime true if there has been no prior record of the last running time
   * @param latestActivityTime the time of the last known activity detected before the last running
   */
  private void rectifyExpirationTime(
      WorkspaceActivity activity,
      long now,
      boolean noLastRunningTime,
      Long latestActivityTime,
      long idleTimeout) {

    // we don't need any rectifications if there already is an expiration time set or if expiration
    // is not configured
    if (activity.getExpiration() != null || idleTimeout == 0) {
      return;
    }

    String wsId = activity.getWorkspaceId();

    // define the error message upfront to make it easier to follow the actual logic
    final String noActivityFoundWhileHandlingExpiration =
        "Found no expiration time on workspace '{}'. No prior activity was found on the workspace."
            + " To restore the normal function, the expiration time has been set to {}.";
    final String noExpirationWithoutLastRunning =
        "Found no expiration time on workspace '{}' and no record of the last time it started. The"
            + " expiration has been set to {}";
    final String noExpirationAfterThresholdTime =
        "Found no expiration time on workspace '{}'. This was detected {}ms after the workspace"
            + " has been recorded running which is suspicious. Please consider filing a bug"
            + " report. To restore the normal function, the expiration time has been set to {}.";
    final String noExpirationBeforeThresholdTime =
        "Found no expiration time on workspace '{}'. This was detected {}ms after the workspace"
            + " has been recorded running which is most probably caused by the schedule coinciding"
            + " with the workspace actually entering the running state. Not rectifying the"
            + " expiration at the moment and leaving that for the next iteration.";

    // first figure out the expiration time. The last running time has been initialized
    // on the activity before this method is called, so we can safely assume it is non-null here.
    long lastTime = activity.getLastRunning();

    if (latestActivityTime == null) {
      // here, we have no prior record of any activity. Even though there were attempts to fix that
      // prior to calling this method, we don't want to report on the half-way fixed state.
      // Let's just fix the expiration-related part of the problem and report that we fixed it from
      // the original "condition" of the activity record.
      workspaceActivityManager.update(wsId, lastTime);
      LOG.warn(noActivityFoundWhileHandlingExpiration, wsId, lastTime);
    } else if (noLastRunningTime) {
      // the DB contained no record of the last time the workspace was running, but we found
      // it running anyway. The last_running time was already set to "now" in the last running
      // rectification method (which we consider a prerequisite here) but we want to report about
      // the expiration being set regardless of that fact.
      workspaceActivityManager.update(wsId, lastTime);
      LOG.warn(noExpirationWithoutLastRunning, wsId, lastTime);
    } else {
      // we have a record of the workspace entering the running state in the DB but we don't
      // have any expiration timestamp yet. This looks like a coincidence between the schedule
      // of this method and the workspace actually starting. Let's just give the DB a second
      // leeway before we log a warning and fix the issue. Note that that means that we only fix
      // the issue, if it still exists, on the next scheduled execution of this method.
      long timeAfterRunning = now - lastTime;

      if (timeAfterRunning > 1000) {
        workspaceActivityManager.update(wsId, lastTime);
        LOG.warn(noExpirationAfterThresholdTime, wsId, timeAfterRunning, lastTime);
      } else {
        LOG.debug(noExpirationBeforeThresholdTime, wsId, timeAfterRunning, lastTime);
      }
    }
  }

