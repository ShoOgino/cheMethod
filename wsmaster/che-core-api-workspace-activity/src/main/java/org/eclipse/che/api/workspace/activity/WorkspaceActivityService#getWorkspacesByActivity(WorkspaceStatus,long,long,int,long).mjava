  @Beta
  @GET
  @ApiOperation("Retrieves the IDs of workspaces that have been in given state.")
  @ApiResponses(
      @ApiResponse(
          code = 200,
          message = "Array of workspace IDs produced.",
          response = String[].class))
  @Produces(MediaType.APPLICATION_JSON)
  public Response getWorkspacesByActivity(
      @QueryParam("status") @Required @ApiParam("The requested status of the workspaces")
          WorkspaceStatus status,
      @QueryParam("threshold")
          @DefaultValue("-1")
          @ApiParam(
              "Optionally, limit the results only to workspaces that have been in the provided"
                  + " status since before this time (in epoch millis). If both threshold and minDuration"
                  + " are specified, minDuration is NOT taken into account.")
          long threshold,
      @QueryParam("minDuration")
          @DefaultValue("-1")
          @ApiParam(
              "Instead of a threshold, one can also use this parameter to specify the minimum"
                  + " duration that the workspaces need to have been in the given state. The duration is"
                  + " specified in milliseconds. If both threshold and minDuration are specified,"
                  + " minDuration is NOT taken into account.")
          long minDuration,
      @QueryParam("maxItems")
          @DefaultValue("" + Pages.DEFAULT_PAGE_SIZE)
          @ApiParam("Maximum number of items on a page of results.")
          int maxItems,
      @QueryParam("skipCount") @DefaultValue("0") @ApiParam("How many items to skip.")
          long skipCount)
      throws ServerException, BadRequestException {

    if (status == null) {
      throw new BadRequestException("The status query parameter is query.");
    }

    long limit = threshold;

    if (limit == -1) {
      limit = System.currentTimeMillis();
      if (minDuration != -1) {
        limit -= minDuration;
      }
    }

    Page<String> data =
        workspaceActivityManager.findWorkspacesInStatus(status, limit, maxItems, skipCount);

    return Response.ok(data.getItems()).header("Link", createLinkHeader(data)).build();
  }

