  /**
   * Finds any workspaces that have expired.
   *
   * <p>A workspace is expired when the expiration value is less than the current time or when the
   * difference between the current time and the last running time is greater than the run timeout
   *
   * @param timestamp expiration time
   * @param runTimeout time after which the workspace will be stopped regardless of activity
   * @return
   */
  @Override
  @Transactional(rollbackOn = ServerException.class)
  public List<String> findExpiredRunTimeout(long timestamp, long runTimeout)
      throws ServerException {
    try {
      return managerProvider
          .get()
          .createNamedQuery("WorkspaceActivity.getExpiredRunTimeout", String.class)
          .setParameter("timeDifference", timestamp - runTimeout)
          .getResultList()
          .stream()
          .collect(Collectors.toList());
    } catch (RuntimeException x) {
      throw new ServerException(x.getLocalizedMessage(), x);
    }
  }

