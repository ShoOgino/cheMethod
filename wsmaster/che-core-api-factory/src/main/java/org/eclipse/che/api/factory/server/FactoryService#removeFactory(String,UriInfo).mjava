    /**
     * Removes factory information from storage by its id.
     *
     * @param id
     *         id of factory
     * @param uriInfo
     *         url context
     * @throws NotFoundException
     *         when the factory with specified id doesn't not found
     * @throws ServerException
     *         when any server errors occurs
     * @throws ForbiddenException
     *         when user does not have permission for removal the factory
     */
    @DELETE
    @Path("/{id}")
    @ApiOperation(value = "Removes factory by its id",
                  notes = "Removes factory based on the factory id which is passed in a path parameter. " +
                          "For perform this operation user needs respective rights")
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 403, message = "User not authorized to call this operation"),
                   @ApiResponse(code = 404, message = "Factory not found"),
                   @ApiResponse(code = 500, message = "Internal server error")})
    public void removeFactory(@ApiParam(value = "Factory id")
                              @PathParam("id")
                              String id,
                              @Context
                              UriInfo uriInfo) throws NotFoundException, ServerException, ForbiddenException {
        final Factory factory = factoryStore.getFactory(id);

        // check if the current user has enough access to edit the factory
        factoryEditValidator.validate(factory);

        // if validator didn't fail it means that the access is granted
        factoryStore.removeFactory(id);
    }

