  /**
   * Build a factory using the provided devfile. Allows to override devfile properties using
   * specially constructed map {@see DevfileManager#parseYaml(String, Map)}.
   *
   * <p>We want factory to never fail due to name collision. Taking `generateName` with precedence.
   * <br>
   * If devfile has only `name`, we convert it to `generateName`. <br>
   * If devfile has `name` and `generateName`, we remove `name` and use just `generateName`. <br>
   * If devfile has `generateName`, we use that.
   *
   * @param remoteFactoryUrl parsed factory URL object
   * @param fileContentProvider service-specific devfile related file content provider
   * @param overrideProperties map of overridden properties to apply in devfile
   * @return a factory or null if devfile is not found
   */
  public Optional<FactoryDto> createFactoryFromDevfile(
      RemoteFactoryUrl remoteFactoryUrl,
      FileContentProvider fileContentProvider,
      Map<String, String> overrideProperties)
      throws BadRequestException {
    for (DevfileLocation location : remoteFactoryUrl.devfileFileLocations()) {
      String devfileYamlContent = urlFetcher.fetchSafely(location.location());
      if (isNullOrEmpty(devfileYamlContent)) {
        continue;
      }
      try {
        DevfileImpl devfile = devfileParser.parseYaml(devfileYamlContent, overrideProperties);
        devfileParser.resolveReference(devfile, fileContentProvider);
        devfile = ensureToUseGenerateName(devfile);

        FactoryDto factoryDto =
            newDto(FactoryDto.class)
                .withV(CURRENT_VERSION)
                .withDevfile(DtoConverter.asDto(devfile))
                .withSource(location.filename().isPresent() ? location.filename().get() : null);
        return Optional.of(factoryDto);
      } catch (DevfileException | OverrideParameterException e) {
        throw new BadRequestException(
            "Error occurred during creation a workspace from devfile located at `"
                + location.location()
                + "`. Cause: "
                + e.getMessage());
      }
    }
    return Optional.empty();
  }

