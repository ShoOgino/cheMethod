  @POST
  @Path("/resolver")
  @Consumes(APPLICATION_JSON)
  @Produces(APPLICATION_JSON)
  @ApiOperation(
      value = "Create factory by providing map of parameters",
      notes = "Get JSON with factory information")
  @ApiResponses({
    @ApiResponse(code = 200, message = "Factory successfully built from parameters"),
    @ApiResponse(code = 400, message = "Missed required parameters, failed to validate factory"),
    @ApiResponse(code = 500, message = "Internal server error")
  })
  public FactoryDto resolveFactory(
      @ApiParam(value = "Parameters provided to create factories") Map<String, String> parameters,
      @ApiParam(
              value = "Whether or not to validate values like it is done when accepting a Factory",
              allowableValues = "true,false",
              defaultValue = "false")
          @DefaultValue("false")
          @QueryParam(VALIDATE_QUERY_PARAMETER)
          Boolean validate)
      throws BadRequestException, ServerException {

    // check parameter
    requiredNotNull(parameters, "Factory build parameters");

    // search matching resolver and create factory from matching resolver
    FactoryDto resolvedFactory =
        factoryParametersResolverHolder
            .getFactoryParametersResolver(parameters)
            .createFactory(parameters);
    if (resolvedFactory == null) {
      throw new BadRequestException(FACTORY_NOT_RESOLVABLE);
    }
    if (validate) {
      acceptValidator.validateOnAccept(resolvedFactory);
    }
    return injectLinks(resolvedFactory);
  }

