    /**
     * @deprecated this is a legacy method for functionality that is no longer exists.
     * There is no alternative for this method.
     */
    @GET
    @Path("/{id}/image")
    @Produces("image/*")
    @ApiOperation(value = "Get factory image",
                  notes = "If image identifier is not specified then first found image will be returned")
    @ApiResponses({@ApiResponse(code = 200, message = "Response contains requested factory image"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 404, message = "Factory or factory image not found"),
                   @ApiResponse(code = 500, message = "Internal server error")})
    @Deprecated
    public Response getImage(@ApiParam(value = "Factory identifier")
                             @PathParam("id")
                             String factoryId,
                             @ApiParam(value = "Image identifier")
                             @QueryParam("imgId")
                             String imageId) throws NotFoundException,
                                                    BadRequestException,
                                                    ServerException {
        final Set<FactoryImage> images;
        if (isNullOrEmpty(imageId)) {
            if ((images = factoryManager.getFactoryImages(factoryId)).isEmpty()) {
                LOG.warn("Default image for factory {} is not found.", factoryId);
                throw new NotFoundException("Default image for factory " + factoryId + " is not found.");
            }
        } else {
            if ((images = factoryManager.getFactoryImages(factoryId, imageId)).isEmpty()) {
                LOG.warn("Image with id {} is not found.", imageId);
                throw new NotFoundException("Image with id " + imageId + " is not found.");
            }
        }
        final FactoryImage image = images.iterator().next();
        return Response.ok(image.getImageData(), image.getMediaType()).build();
    }

