    /**
     * Save factory to storage and return stored data. Field 'factory' should contains factory information.
     * Fields with images should be named 'image'. Acceptable image size 100x100 pixels.
     *
     * @param formData
     *         http request form data
     * @param uriInfo
     *         url context
     * @return stored data
     * @throws ForbiddenException
     *         when the user have no access rights for saving the factory
     * @throws ConflictException
     *         when an error occurred during saving the factory
     * @throws BadRequestException
     *         when image content cannot be read or is invalid
     * @throws ServerException
     *         when any server errors occurs
     */
    @POST
    @Consumes(MULTIPART_FORM_DATA)
    @Produces(APPLICATION_JSON)
    @ApiOperation(value = "Create a Factory and return data",
                  notes = "Save factory to storage and return stored data. Field 'factory' should contains factory information.")
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "The user does not have appropriate rights for perform factory save"),
                   @ApiResponse(code = 409, message = "Conflict error. Some parameter is missing"),
                   @ApiResponse(code = 500, message = "Unable to identify user from context")})
    public Factory saveFactory(Iterator<FileItem> formData, @Context UriInfo uriInfo)
            throws ForbiddenException, ConflictException, BadRequestException, ServerException, NotFoundException {
        try {
            final Set<FactoryImage> images = new HashSet<>();
            Factory factory = null;
            while (formData.hasNext()) {
                final FileItem item = formData.next();
                switch (item.getFieldName()) {
                    case ("factory"): {
                        try (InputStream factoryData = item.getInputStream()) {
                            factory = factoryBuilder.build(factoryData);
                        } catch (JsonSyntaxException e) {
                            throw new BadRequestException("You have provided an invalid JSON.  For more information, please visit: " +
                                                          "http://docs.codenvy.com/user/creating-factories/factory-parameter-reference/");
                        }
                        break;
                    }
                    case ("image"): {
                        try (InputStream imageData = item.getInputStream()) {
                            final FactoryImage factoryImage = FactoryImage.createImage(imageData,
                                                                                       item.getContentType(),
                                                                                       NameGenerator.generate(null, 16));
                            if (factoryImage.hasContent()) {
                                images.add(factoryImage);
                            }
                        }
                        break;
                    }
                    default:
                        //DO NOTHING
                }
            }
            if (factory == null) {
                LOG.warn("No factory information found in 'factory' section of multipart form-data.");
                throw new BadRequestException("No factory information found in 'factory' section of multipart/form-data.");
            }
            processDefaults(factory);
            createValidator.validateOnCreate(factory);
            final Factory storedFactory = factoryStore.getFactory(factoryStore.saveFactory(factory, images));
            return storedFactory.withLinks(createLinks(storedFactory, images, uriInfo));
        } catch (IOException e) {
            LOG.error(e.getLocalizedMessage(), e);
            throw new ServerException(e.getLocalizedMessage(), e);
        }
    }

