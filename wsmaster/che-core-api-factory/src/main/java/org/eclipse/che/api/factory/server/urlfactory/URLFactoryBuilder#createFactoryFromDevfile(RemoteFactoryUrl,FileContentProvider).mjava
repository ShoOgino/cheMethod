  /**
   * Build a factory using the provided devfile
   *
   * @param remoteFactoryUrl parsed factory URL object
   * @param fileContentProvider service-specific devfile related file content provider
   * @return a factory or null if devfile is not found
   */
  public Optional<FactoryDto> createFactoryFromDevfile(
      RemoteFactoryUrl remoteFactoryUrl, FileContentProvider fileContentProvider)
      throws BadRequestException, ServerException {
    if (remoteFactoryUrl.devfileFileLocation() == null) {
      return Optional.empty();
    }
    final String devfileYamlContent =
        urlFetcher.fetchSafely(remoteFactoryUrl.devfileFileLocation());
    if (isNullOrEmpty(devfileYamlContent)) {
      return Optional.empty();
    }
    try {
      Devfile devfile = devfileManager.parse(devfileYamlContent);
      WorkspaceConfigImpl wsConfig =
          devfileManager.createWorkspaceConfig(devfile, fileContentProvider);
      FactoryDto factoryDto =
          newDto(FactoryDto.class)
              .withV(CURRENT_VERSION)
              .withWorkspace(DtoConverter.asDto(wsConfig))
              .withSource(remoteFactoryUrl.getDevfileFilename());
      return Optional.of(factoryDto);
    } catch (DevfileException e) {
      throw new BadRequestException(
          "Error occurred during creation a workspace from devfile located at `"
              + remoteFactoryUrl.devfileFileLocation()
              + "`. Cause: "
              + e.getMessage());
    }
  }

