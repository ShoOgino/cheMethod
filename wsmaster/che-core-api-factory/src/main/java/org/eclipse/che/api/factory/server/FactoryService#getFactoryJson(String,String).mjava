    /**
     * Generate factory containing workspace configuration.
     * Only projects that have {@code SourceStorage} configured can be included.
     *
     * @param workspace
     *         workspace id to generate factory from
     * @param path
     *         optional project path, if set, only this project will be included into result projects set
     * @throws ServerException
     *         when any server error occurs during factory getting
     * @throws BadRequestException
     *         when it is impossible get factory from specified workspace e.g. no projects in workspace
     * @throws NotFoundException
     *         when user's workspace with specified id not found
     * @throws ForbiddenException
     *         when user have no access rights e.g. user is not owner of specified workspace
     */
    @GET
    @Path("/workspace/{ws-id}")
    @Produces(APPLICATION_JSON)
    @ApiOperation(value = "Construct factory from workspace",
                  notes = "This call returns a Factory.json that is used to create a factory.")
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
                   @ApiResponse(code = 403, message = "Access to workspace denied"),
                   @ApiResponse(code = 404, message = "Workspace not found"),
                   @ApiResponse(code = 500, message = "Internal server error")})
    public Response getFactoryJson(@ApiParam(value = "Workspace ID")
                                   @PathParam("ws-id")
                                   String workspace,
                                   @ApiParam(value = "Project path")
                                   @QueryParam("path")
                                   String path)
            throws ServerException, BadRequestException, NotFoundException, ForbiddenException {
        final String userId = EnvironmentContext.getCurrent().getUser().getId();
        final UsersWorkspaceImpl usersWorkspace = workspaceManager.getWorkspace(workspace);
        if (!usersWorkspace.getOwner().equals(userId)) {
            throw new ForbiddenException("User '" + userId + "' doesn't have access to '" + usersWorkspace.getId() + "' workspace");
        }
        excludeProjectsWithoutLocation(usersWorkspace, path);
        final Factory factory = newDto(Factory.class).withWorkspace(asDto(usersWorkspace.getConfig())).withV("4.0");
        return Response.ok(factory, APPLICATION_JSON)
                       .header(CONTENT_DISPOSITION, "attachment; filename=factory.json")
                       .build();
    }

