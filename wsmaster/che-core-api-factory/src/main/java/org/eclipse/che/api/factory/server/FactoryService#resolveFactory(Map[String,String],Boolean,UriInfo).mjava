    /**
     * Resolve parameters and build a factory for the given parameters
     *
     * @param parameters
     *         map of key/values used to build factory.
     * @param uriInfo
     *         url context
     * @return a factory instance if found a matching resolver
     * @throws NotFoundException
     *         when no resolver can be used
     * @throws ServerException
     *         when any server errors occurs
     * @throws BadRequestException
     *         when the factory is invalid e.g. is expired
     */
    @POST
    @Path("/resolver")
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @ApiOperation(value = "Create factory by providing map of parameters",
                  notes = "Get JSON with factory information.")
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 400, message = "Failed to validate factory"),
                   @ApiResponse(code = 500, message = "Internal server error")})
    public Factory resolveFactory(
            @ApiParam(value = "Parameters provided to create factories")
            final Map<String, String> parameters,
            @ApiParam(value = "Whether or not to validate values like it is done when accepting a Factory",
                      allowableValues = "true,false",
                      defaultValue = "false")
            @DefaultValue("false")
            @QueryParam(VALIDATE_QUERY_PARAMETER)
            final Boolean validate,
            @Context
            final UriInfo uriInfo) throws NotFoundException, ServerException, BadRequestException {

        // Check parameter
        if (parameters == null) {
            throw new BadRequestException(ERROR_NO_PARAMETERS);
        }

        // search matching resolver
        Optional<FactoryParametersResolver> factoryParametersResolverOptional = this.factoryParametersResolvers.stream().filter((resolver -> resolver.accept(parameters))).findFirst();

        // no match
        if (!factoryParametersResolverOptional.isPresent()) {
            throw new NotFoundException(ERROR_NO_RESOLVER_AVAILABLE);
        }

        // create factory from matching resolver
        final Factory factory = factoryParametersResolverOptional.get().createFactory(parameters);

        // Apply links
        try {
            factory.setLinks(linksHelper.createLinks(factory, uriInfo, null));
        } catch (UnsupportedEncodingException e) {
            throw new ServerException(e.getLocalizedMessage(), e);
        }

        // time to validate the factory
        if (validate) {
            acceptValidator.validateOnAccept(factory);
        }

        return factory;
    }

