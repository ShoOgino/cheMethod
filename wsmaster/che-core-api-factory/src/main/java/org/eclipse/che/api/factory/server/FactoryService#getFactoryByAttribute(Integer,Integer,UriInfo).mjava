  @GET
  @Path("/find")
  @Produces(APPLICATION_JSON)
  @ApiOperation(
    value =
        "Get factory by attribute, "
            + "the attribute must match one of the Factory model fields with type 'String', "
            + "e.g. (factory.name, factory.creator.name)"
            + " This method is going to be deprecated or limited in scope in 6.0 GA "
            + "since it's not optimized on backend performance. "
            + "Expected parameters creator.userId=? or name=?.",
    notes =
        "If specify more than one value for a single query parameter then will be taken the first one"
  )
  @ApiResponses({
    @ApiResponse(code = 200, message = "Response contains list requested factories"),
    @ApiResponse(
      code = 400,
      message = "When query does not contain at least one attribute to search for"
    ),
    @ApiResponse(code = 500, message = "Internal server error")
  })
  @Deprecated
  public List<FactoryDto> getFactoryByAttribute(
      @DefaultValue("0") @QueryParam("skipCount") Integer skipCount,
      @DefaultValue("30") @QueryParam("maxItems") Integer maxItems,
      @Context UriInfo uriInfo)
      throws BadRequestException, ServerException {
    final Set<String> skip = ImmutableSet.of("token", "skipCount", "maxItems");
    final List<Pair<String, String>> query =
        URLEncodedUtils.parse(uriInfo.getRequestUri())
            .entrySet()
            .stream()
            .filter(param -> !skip.contains(param.getKey()) && !param.getValue().isEmpty())
            .map(entry -> Pair.of(entry.getKey(), entry.getValue().iterator().next()))
            .collect(toList());
    checkArgument(!query.isEmpty(), "Query must contain at least one attribute");

    for (Pair<String, String> pair : query) {
      if (!pair.first.equals("creator.userId") && !pair.first.equals("name")) {
        throw new BadRequestException(
            String.format(
                "Method factory.find is going to be removed or limited in scope in 6.0 GA."
                    + " Search allowed only by creator.userId and name parameters."
                    + " Requested attributes %s, skipCount %s, maxItems %s",
                query, skip, maxItems));
      }
    }

    final List<FactoryDto> factories = new ArrayList<>();
    for (Factory factory : factoryManager.getByAttribute(maxItems, skipCount, query)) {
      factories.add(injectLinks(asDto(factory)));
    }
    return factories;
  }

