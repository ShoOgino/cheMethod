  /**
   * Build a factory using the provided devfile
   *
   * @param devfileLocation location of devfile
   * @param fileUrlProvider optional service-specific provider of URL's to the file raw content
   * @return a factory or null if devfile is not found
   */
  public Optional<FactoryDto> createFactoryFromDevfile(
      String devfileLocation, @Nullable Function<String, String> fileUrlProvider)
      throws BadRequestException, ServerException {
    if (devfileLocation == null) {
      return Optional.empty();
    }
    final String devfileYamlContent = urlFetcher.fetchSafely(devfileLocation);
    if (isNullOrEmpty(devfileYamlContent)) {
      return Optional.empty();
    }
    try {
      Devfile devfile = devfileManager.parse(devfileYamlContent, false);
      WorkspaceConfigImpl wsConfig =
          devfileManager.createWorkspaceConfig(
              devfile,
              filename ->
                  fileUrlProvider != null
                      ? urlFetcher.fetch(fileUrlProvider.apply(filename))
                      : null);
      return Optional.of(
          newDto(FactoryDto.class)
              .withV(CURRENT_VERSION)
              .withWorkspace(DtoConverter.asDto(wsConfig)));
    } catch (DevfileException e) {
      throw new BadRequestException(e.getMessage());
    } catch (IOException x) {
      throw new ServerException(x.getLocalizedMessage(), x);
    }
  }

