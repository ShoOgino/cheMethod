  /**
   * Finds an recipe-type tool (openshift or kubernetes) in devfile and tries to create {@link
   * EnvironmentImpl} from it. If such tool is present in devfile, an file URL composer function
   * MUST be provided to allow to fetch recipe content.
   *
   * @param devfile source devfile
   * @param fileUrlProvider optional service-specific provider of URL's to the file raw content
   * @return optional pair of the recipe-type tool name and newly constructed environment from it
   * @throws BadRequestException when there is more than one recipe-type tool specified in devfile
   * @throws BadRequestException when there is no URL provider for recipe-type tool present in
   *     devfile
   * @throws BadRequestException when recipe-type tool content is unreachable or empty
   */
  public Optional<Pair<String, EnvironmentImpl>> create(
      Devfile devfile, @Nullable Function<String, String> fileUrlProvider)
      throws BadRequestException {
    List<Tool> recipeToolList =
        devfile
            .getTools()
            .stream()
            .filter(
                tool ->
                    tool.getType().equals(KUBERNETES_TOOL_TYPE)
                        || tool.getType().equals(OPENSHIFT_TOOL_TYPE))
            .collect(toList());
    if (recipeToolList.isEmpty()) {
      return Optional.empty();
    }
    if (recipeToolList.size() > 1) {
      throw new BadRequestException(
          format(
              "Multiple non plugin or editor type tools found (%d) but expected only one.",
              recipeToolList.size()));
    }
    final Tool recipeTool = recipeToolList.get(0);
    final String type = recipeTool.getType();
    if (fileUrlProvider == null) {
      throw new BadRequestException(
          format("This kind of factory URL's does not support '%s' type tools.", type));
    }

    String localFileContent = urlFetcher.fetch(fileUrlProvider.apply(recipeTool.getLocal()));
    if (isNullOrEmpty(localFileContent)) {
      throw new BadRequestException(
          format(
              "The local file '%s' defined in tool  '%s' is unreachable or empty.",
              recipeTool.getLocal(), recipeTool.getName()));
    }
    // TODO: it would be great to check there is real yaml and not binary etc
    RecipeImpl recipe = new RecipeImpl(type, DEFAULT_RECIPE_CONTENT_TYPE, localFileContent, null);
    return Optional.of(new Pair<>(recipeTool.getName(), new EnvironmentImpl(recipe, emptyMap())));
  }

