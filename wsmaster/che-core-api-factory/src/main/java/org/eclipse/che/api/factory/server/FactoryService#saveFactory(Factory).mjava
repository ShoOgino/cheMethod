    /**
     * Save factory to storage and return stored data.
     *
     * @param factory
     *         instance of factory which would be stored
     * @return decorated the factory instance of which has been stored
     * @throws BadRequestException
     *         when stored the factory is invalid
     * @throws ServerException
     *         when any server errors occurs
     * @throws ForbiddenException
     *         when the user have no access rights for saving the factory
     * @throws ConflictException
     *         when stored the factory is already exist
     */
    @POST
    @Consumes(APPLICATION_JSON)
    @Produces(APPLICATION_JSON)
    @ApiOperation(value = "Stores the factory from the configuration",
                  notes = "Stores the factory without pictures and returns instance of the stored factory with links")
    @ApiResponses({@ApiResponse(code = 200, message = "OK"),
                   @ApiResponse(code = 400, message = "Parameters are not valid: missing required parameter(s)"),
                   @ApiResponse(code = 403, message = "You do not have the permissions to perform a Factory save operation"),
                   @ApiResponse(code = 409, message = "Parameters are not valid: missing parameters causing conflict"),
                   @ApiResponse(code = 500, message = "Internal Server Error")})
    public Factory saveFactory(Factory factory)
            throws BadRequestException, ServerException, ForbiddenException, ConflictException, NotFoundException {
        if (factory == null) {
            throw new BadRequestException("Not null factory required");
        }
        processDefaults(factory);
        createValidator.validateOnCreate(factory);
        final Factory storedFactory = factoryStore.getFactory(factoryStore.saveFactory(factory, null));
        return storedFactory.withLinks(createLinks(storedFactory, null, uriInfo));
    }

