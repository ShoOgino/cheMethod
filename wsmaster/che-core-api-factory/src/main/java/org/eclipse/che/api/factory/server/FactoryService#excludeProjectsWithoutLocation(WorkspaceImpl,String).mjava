  /**
   * Filters workspace projects and removes projects without source location. If there is no at
   * least one project with source location then {@link BadRequestException} will be thrown
   */
  private static void excludeProjectsWithoutLocation(
      WorkspaceImpl usersWorkspace, String projectPath) throws BadRequestException {
    final boolean notEmptyPath = projectPath != null;
    //Condition for sifting valid project in user's workspace
    Predicate<ProjectConfig> predicate =
        projectConfig -> {
          // if project is a sub project (it's path contains another project) , then location can be null
          final boolean isSubProject = projectConfig.getPath().indexOf('/', 1) != -1;
          final boolean hasNotEmptySource =
              projectConfig.getSource() != null
                  && projectConfig.getSource().getType() != null
                  && projectConfig.getSource().getLocation() != null;

          return !(notEmptyPath && !projectPath.equals(projectConfig.getPath()))
              && (isSubProject || hasNotEmptySource);
        };

    // Filtered out projects by path and source storage presence
    final List<ProjectConfigImpl> filtered =
        usersWorkspace.getConfig().getProjects().stream().filter(predicate).collect(toList());
    checkArgument(
        !filtered.isEmpty(),
        "Unable to create factory from this workspace, "
            + "because it does not contains projects with source storage");
    usersWorkspace.getConfig().setProjects(filtered);
  }

