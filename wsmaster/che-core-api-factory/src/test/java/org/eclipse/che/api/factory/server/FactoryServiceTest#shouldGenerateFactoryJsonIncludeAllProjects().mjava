    @Test
    public void shouldGenerateFactoryJsonIncludeAllProjects() throws Exception {
        // given
        final String wsId = "workspace123234";
        WorkspaceImpl.WorkspaceImplBuilder userWs = WorkspaceImpl.builder();
        WorkspaceConfigImpl.WorkspaceConfigImplBuilder wsConfig = WorkspaceConfigImpl.builder();

        wsConfig.setProjects(Arrays.asList(dto.createDto(ProjectConfigDto.class)
                                              .withSource(dto.createDto(SourceStorageDto.class)
                                                       .withType("git")
                                                       .withLocation("location"))
                                              .withPath("path"),
                                           dto.createDto(ProjectConfigDto.class)
                                              .withSource(dto.createDto(SourceStorageDto.class)
                                                       .withType("git")
                                                       .withLocation("location"))
                                              .withPath("path")));
        wsConfig.setName("wsname");
        wsConfig.setDefaultEnv("env1");
        wsConfig.setEnvironments(singletonMap("env1", dto.createDto(EnvironmentDto.class)));
        wsConfig.setCommands(singletonList(dto.createDto(CommandDto.class)
                                              .withName("MCI")
                                              .withType("mvn")
                                              .withCommandLine("clean install")));
        userWs.setId(wsId);
        userWs.setNamespace("id-2314");
        userWs.setStatus(WorkspaceStatus.RUNNING);
        userWs.setConfig(wsConfig.build());

        WorkspaceImpl usersWorkspace = userWs.build();
        when(workspaceManager.getWorkspace(eq(wsId))).thenReturn(usersWorkspace);

        // when
        Response response = given().auth()
                                   .basic(JettyHttpServer.ADMIN_USER_NAME, JettyHttpServer.ADMIN_USER_PASSWORD)
                                   .when()
                                   .get("/private" + SERVICE_PATH + "/workspace/" + wsId);

        // then
        assertEquals(response.getStatusCode(), 200);
        Factory result = dto.createDtoFromJson(response.getBody().asString(), Factory.class);
        assertEquals(result.getWorkspace().getProjects().size(), 2);
        assertEquals(result.getWorkspace().getName(), usersWorkspace.getConfig().getName());
        assertEquals(result.getWorkspace()
                           .getEnvironments()
                           .toString(),
                     usersWorkspace.getConfig()
                                   .getEnvironments()
                                   .entrySet()
                                   .stream()
                                   .collect(Collectors.toMap(Map.Entry::getKey, entry -> asDto(entry.getValue())))
                                   .toString());
        assertEquals(result.getWorkspace().getCommands().get(0), asDto(usersWorkspace.getConfig().getCommands().get(0)));
    }

