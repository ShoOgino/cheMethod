    /**
     * Check that if there is a matching resolver and other not matching, factory is created
     */
    @Test
    public void onlyOneMatchingResolver() throws Exception {
        Set<FactoryParametersResolver> resolvers = new HashSet<>();
        when(factoryParametersResolvers.stream()).thenReturn(resolvers.stream());

        FactoryParametersResolver dummyResolver = mock(FactoryParametersResolver.class);
        resolvers.add(dummyResolver);
        FactoryParametersResolver fooResolver = mock(FactoryParametersResolver.class);
        resolvers.add(fooResolver);

        // create factory
        Factory expectFactory = dto.createDto(Factory.class).withV("4.0").withName("matchingResolverFactory");

        // accept resolver
        when(dummyResolver.accept(anyMap())).thenReturn(TRUE);
        when(dummyResolver.createFactory(anyMap())).thenReturn(expectFactory);
        when(fooResolver.accept(anyMap())).thenReturn(FALSE);

        // when
        Map<String, String> map = new HashMap<>();
        Response response = given().contentType(ContentType.JSON).when().body(map).post(SERVICE_PATH_RESOLVER);

        // then check we have a not found
        assertEquals(response.getStatusCode(), OK.getStatusCode());
        Factory responseFactory = dto.createDtoFromJson(response.getBody().asInputStream(), Factory.class);
        assertNotNull(responseFactory);
        assertEquals(responseFactory.getName(), expectFactory.getName());
        assertEquals(responseFactory.getV(), expectFactory.getV());

        // check we call resolvers
        verify(dummyResolver).accept(anyMap());
        verify(dummyResolver).createFactory(anyMap());
        // never called this resolver
        verify(fooResolver, never()).createFactory(anyMap());
    }

