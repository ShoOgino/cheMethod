    private static FactoryDto prepareFactory() {
        ProjectConfigDto project = dto.createDto(ProjectConfigDto.class)
                                      .withSource(dto.createDto(SourceStorageDto.class)
                                                     .withType("git")
                                                     .withLocation("location"))
                                      .withType("type")
                                      .withAttributes(singletonMap("key", singletonList("value")))
                                      .withDescription("description")
                                      .withName("name")
                                      .withPath("/path");
        EnvironmentDto environment = dto.createDto(EnvironmentDto.class)
                                        .withRecipe(newDto(RecipeDto.class).withType("compose")
                                                                           .withContentType("application/x-yaml")
                                                                           .withContent("some content"))
                                        .withMachines(singletonMap("devmachine",
                                                                   newDto(MachineConfigDto.class).withAgents(singletonList("org.eclipse.che.ws-agent"))
                                                                                                 .withAttributes(singletonMap("memoryLimitBytes", "" + 512L * 1024L * 1024L))));

        WorkspaceConfigDto workspaceConfig = dto.createDto(WorkspaceConfigDto.class)
                                                .withProjects(singletonList(project))
                                                .withCommands(singletonList(dto.createDto(CommandDto.class)
                                                                               .withName("command1")
                                                                               .withType("maven")
                                                                               .withCommandLine("mvn test")))
                                                .withDefaultEnv("env1")
                                                .withEnvironments(singletonMap("test", environment));
        IdeDto ide = dto.createDto(IdeDto.class)
                        .withOnAppClosed(dto.createDto(OnAppClosedDto.class)
                                            .withActions(singletonList(dto.createDto(IdeActionDto.class).withId("warnOnClose"))))
                        .withOnAppLoaded(dto.createDto(OnAppLoadedDto.class)
                                            .withActions(asList(dto.createDto(IdeActionDto.class)
                                                                   .withId("newProject"),
                                                                dto.createDto(IdeActionDto.class)
                                                                   .withId("openWelcomePage")
                                                                .withProperties(ImmutableMap.of(
                                                                        "authenticatedTitle",
                                                                        "Greeting title for authenticated users",
                                                                        "authenticatedContentUrl",
                                                                        "http://example.com/content.url")))))
                     .withOnProjectsLoaded(dto.createDto(OnProjectsLoadedDto.class)
                                              .withActions(asList(dto.createDto(IdeActionDto.class)
                                                                     .withId("openFile")
                                                                     .withProperties(singletonMap("file", "pom.xml")),
                                                                  dto.createDto(IdeActionDto.class)
                                                                     .withId("run"),
                                                                  dto.createDto(IdeActionDto.class)
                                                                     .withId("findReplace")
                                                                     .withProperties(
                                                                             ImmutableMap.of(
                                                                                     "in",
                                                                                     "src/main/resources/consts2.properties",
                                                                                     "find",
                                                                                     "OLD_VALUE_2",
                                                                                     "replace",
                                                                                     "NEW_VALUE_2",
                                                                                     "replaceMode",
                                                                                     "mode")))));
        return dto.createDto(FactoryDto.class)
                  .withV("4.0")
                  .withWorkspace(workspaceConfig)
                  .withCreator(dto.createDto(AuthorDto.class)
                                  .withEmail("email")
                                  .withName("name"))
                  .withPolicies(dto.createDto(PoliciesDto.class)
                                   .withReferer("referrer")
                                   .withSince(123L)
                                   .withUntil(123L))
                  .withButton(dto.createDto(ButtonDto.class)
                                 .withType(Button.Type.LOGO)
                                 .withAttributes(dto.createDto(ButtonAttributesDto.class)
                                                    .withColor("color")
                                                    .withCounter(true)
                                                    .withLogo("logo")
                                                    .withStyle("style")))
                  .withIde(ide);
    }

