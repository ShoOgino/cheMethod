  @Test
  public void shouldGenerateFactoryJsonIncludeGivenProjects() throws Exception {
    // given
    final String wsId = "workspace123234";
    WorkspaceImpl.WorkspaceImplBuilder ws = WorkspaceImpl.builder();
    WorkspaceConfigImpl.WorkspaceConfigImplBuilder wsConfig = WorkspaceConfigImpl.builder();
    ws.setId(wsId);
    wsConfig.setProjects(
        Arrays.asList(
            DTO.createDto(ProjectConfigDto.class)
                .withPath("/proj1")
                .withSource(
                    DTO.createDto(SourceStorageDto.class).withType("git").withLocation("location")),
            DTO.createDto(ProjectConfigDto.class)
                .withPath("/proj2")
                .withSource(
                    DTO.createDto(SourceStorageDto.class)
                        .withType("git")
                        .withLocation("location"))));
    wsConfig.setName("wsname");
    wsConfig.setEnvironments(singletonMap("env1", DTO.createDto(EnvironmentDto.class)));
    wsConfig.setDefaultEnv("env1");
    ws.setStatus(WorkspaceStatus.RUNNING);
    wsConfig.setCommands(
        singletonList(
            DTO.createDto(CommandDto.class)
                .withName("MCI")
                .withType("mvn")
                .withCommandLine("clean install")));
    ws.setConfig(wsConfig.build());
    WorkspaceImpl usersWorkspace = ws.build();
    when(workspaceManager.getWorkspace(eq(wsId))).thenReturn(usersWorkspace);

    // when
    Response response =
        given()
            .auth()
            .basic(ADMIN_USER_NAME, ADMIN_USER_PASSWORD)
            .when()
            .get("/private" + SERVICE_PATH + "/workspace/" + wsId);

    // then
    assertEquals(response.getStatusCode(), 200);
    FactoryDto result = DTO.createDtoFromJson(response.getBody().asString(), FactoryDto.class);
    assertEquals(result.getWorkspace().getProjects().size(), 2);
  }

