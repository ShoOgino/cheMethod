  @Test
  public void checkValidateResolver() throws Exception {
    final FactoryParametersResolver dummyResolver = Mockito.mock(FactoryParametersResolver.class);
    factoryParametersResolvers.add(dummyResolver);

    // invalid factory
    final String invalidFactoryMessage = "invalid factory";
    doThrow(new BadRequestException(invalidFactoryMessage))
        .when(acceptValidator)
        .validateOnAccept(any());

    // create factory
    final FactoryDto expectFactory =
        DTO.createDto(FactoryDto.class).withV("4.0").withName("matchingResolverFactory");

    // accept resolver
    when(dummyResolver.accept(anyMapOf(String.class, String.class))).thenReturn(true);
    when(dummyResolver.createFactory(anyMapOf(String.class, String.class)))
        .thenReturn(expectFactory);

    // when
    final Map<String, String> map = new HashMap<>();
    final Response response =
        given()
            .contentType(ContentType.JSON)
            .when()
            .body(map)
            .queryParam(VALIDATE_QUERY_PARAMETER, valueOf(true))
            .post(SERVICE_PATH + "/resolver");

    // then check we have a not found
    assertEquals(response.getStatusCode(), BAD_REQUEST.getStatusCode());
    assertTrue(response.getBody().asString().contains(invalidFactoryMessage));

    // check we call resolvers
    verify(dummyResolver).accept(anyMapOf(String.class, String.class));
    verify(dummyResolver).createFactory(anyMapOf(String.class, String.class));

    // check we call validator
    verify(acceptValidator).validateOnAccept(any());
  }

