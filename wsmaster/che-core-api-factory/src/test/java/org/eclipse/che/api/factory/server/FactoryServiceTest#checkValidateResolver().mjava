    /**
     * Check that if there is a matching resolver, that factory is valid
     */
    @Test
    public void checkValidateResolver() throws Exception {
        Set<FactoryParametersResolver> resolvers = new HashSet<>();
        when(factoryParametersResolvers.stream()).thenReturn(resolvers.stream());

        FactoryParametersResolver dummyResolver = mock(FactoryParametersResolver.class);
        resolvers.add(dummyResolver);

        // invalid factory
        String invalidFactoryMessage = "invalid factory";
        doThrow(new BadRequestException(invalidFactoryMessage)).when(acceptValidator).validateOnAccept(any());

        // create factory
        Factory expectFactory = dto.createDto(Factory.class).withV("4.0").withName("matchingResolverFactory");

        // accept resolver
        when(dummyResolver.accept(anyMap())).thenReturn(TRUE);
        when(dummyResolver.createFactory(anyMap())).thenReturn(expectFactory);

        // when
        Map<String, String> map = new HashMap<>();
        Response response = given().contentType(ContentType.JSON).when().body(map).queryParam(VALIDATE_QUERY_PARAMETER, valueOf(true)).post(
                SERVICE_PATH_RESOLVER);

        // then check we have a not found
        assertEquals(response.getStatusCode(), BAD_REQUEST.getStatusCode());
        assertTrue(response.getBody().prettyPrint().contains(invalidFactoryMessage));

        // check we call resolvers
        verify(dummyResolver).accept(anyMap());
        verify(dummyResolver).createFactory(anyMap());

        // check we call validator
        verify(acceptValidator).validateOnAccept(any());

    }

