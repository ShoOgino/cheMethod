  /**
   * Write thread dump that contains stack traces of existed threads, plus it contains some other
   * diagnostic information about threads such as: daemon, priority, etc.
   */
  public void writeThreadDump(OutputStream outputStream) throws IOException {
    ThreadInfo[] threadInfos =
        threadMxBean.getThreadInfo(threadMxBean.getAllThreadIds(), Integer.MAX_VALUE);
    Map<Long, ThreadInfo> threadInfoMap = new HashMap<>();
    for (ThreadInfo threadInfo : threadInfos) {
      threadInfoMap.put(threadInfo.getThreadId(), threadInfo);
    }

    try (OutputStreamWriter writer = new OutputStreamWriter(outputStream)) {
      Map<Thread, StackTraceElement[]> stacks = Thread.getAllStackTraces();

      writer.write(String.format("Dump of %d threads at %Tc\n", stacks.size(), new Date()));
      for (Map.Entry<Thread, StackTraceElement[]> entry : stacks.entrySet()) {
        Thread thread = entry.getKey();
        writer.write(
            String.format(
                "\"%s\" prio=%d tid=%d state=%s daemon=%s\n",
                thread.getName(),
                thread.getPriority(),
                thread.getId(),
                thread.getState(),
                thread.isDaemon()));
        ThreadInfo threadInfo = threadInfoMap.get(thread.getId());
        if (threadInfo != null) {
          writer.write(
              String.format(
                  "    native=%s, suspended=%s, block=%d, wait=%s\n",
                  threadInfo.isInNative(),
                  threadInfo.isSuspended(),
                  threadInfo.getBlockedCount(),
                  threadInfo.getWaitedCount()));
          writer.write(
              String.format(
                  "    lock=%s owned by %s (%s), cpu=%s, user=%s\n",
                  threadInfo.getLockName(),
                  threadInfo.getLockOwnerName(),
                  threadInfo.getLockOwnerId(),
                  MILLIS_FORMAT.format(
                      new Date(threadMxBean.getThreadCpuTime(threadInfo.getThreadId()) / 1000000L)),
                  MILLIS_FORMAT.format(
                      new Date(
                          threadMxBean.getThreadUserTime(threadInfo.getThreadId()) / 1000000L))));
        }
        for (StackTraceElement element : entry.getValue()) {
          writer.append("        ").append(element.toString()).append(System.lineSeparator());
        }
        writer.write(System.lineSeparator());
      }
      writer.write("------------------------------------------------------");
      writer.write(System.lineSeparator());
      writer.write("Non-daemon threads: ");
      writer.write(System.lineSeparator());

      for (Thread thread : stacks.keySet()) {
        if (!thread.isDaemon()) {
          writer
              .append("\"")
              .append(thread.getName())
              .append("\", ")
              .append(System.lineSeparator());
        }
      }
      writer.write("------------------------------------------------------");
      writer.write(System.lineSeparator());
      writer.write("Blocked threads: ");
      writer.write(System.lineSeparator());
      for (Thread thread : stacks.keySet()) {
        if (thread.getState() == Thread.State.BLOCKED) {
          writer
              .append("\"")
              .append(thread.getName())
              .append("\", ")
              .append(System.lineSeparator());
        }
      }
      writer.write("------------------------------------------------------");
    }
  }

