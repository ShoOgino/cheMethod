  @GET
  @Produces(APPLICATION_JSON)
  @ApiOperation(
      value = "Get a collection of the available installers",
      response = Installer.class,
      responseContainer = "collection")
  @ApiResponses({
    @ApiResponse(code = 200, message = "The response contains collection of available installers"),
    @ApiResponse(code = 400, message = "Bad Request"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public Response getInstallers(
      @ApiParam(value = "Max items") @QueryParam("maxItems") @DefaultValue("30") int maxItems,
      @ApiParam(value = "Skip count") @QueryParam("skipCount") @DefaultValue("0") int skipCount)
      throws InstallerException, BadRequestException {

    try {
      Page<? extends Installer> installers = installerRegistry.getInstallers(maxItems, skipCount);
      return Response.ok()
          .entity(
              installers.getItems().stream().map(DtoConverter::asDto).collect(Collectors.toList()))
          .header("Link", createLinkHeader(installers))
          .header(TOTAL_ITEMS_COUNT_HEADER, installers.getTotalItemsCount())
          .build();
    } catch (IllegalArgumentException e) {
      throw new BadRequestException(e.getMessage());
    }
  }

