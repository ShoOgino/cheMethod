    /**
     * Sort installers respecting dependencies between them.
     * Handles circular dependencies.
     *
     * @see InstallerKey
     * @see Installer#getDependencies()
     * @see InstallerRegistry#getInstaller(InstallerKey)
     *
     * @param installerKeys list of installers to sort
     * @return list of created installers in proper order
     *
     * @throws InstallerException
     *      if circular dependency found or installer creation failed or other unexpected error
     */
    public List<InstallerKey> sort(@Nullable List<String> installerKeys) throws InstallerException {
        List<InstallerKey> sorted = new ArrayList<>();
        Set<String> pending = new HashSet<>();

        if (installerKeys != null) {
            for (String installerKey : installerKeys) {
                if (installerKey != null) {
                    doSort(InstallerKeyImpl.parse(installerKey), sorted, pending);
                }
            }
        }

        return sorted;
    }

