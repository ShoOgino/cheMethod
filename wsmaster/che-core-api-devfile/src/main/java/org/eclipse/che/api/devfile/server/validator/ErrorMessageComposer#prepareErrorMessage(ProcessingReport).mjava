  /**
   * Parses {@link ProcessingReport} into an error string. Each processing message is recursively
   * parsed to extract nested errors if any.
   *
   * @param report Schema validation processing report
   * @return composite error string
   */
  public String prepareErrorMessage(ProcessingReport report) {
    List<String> errors = new ArrayList<>();
    StreamSupport.stream(report.spliterator(), false)
        .filter(m -> m.getLogLevel() == LogLevel.ERROR || m.getLogLevel() == LogLevel.FATAL)
        .forEach(msg -> recursivelyFindErrors(msg.asJson(), errors));
    StringBuilder sb = new StringBuilder("Devfile schema validation failed.");
    if (errors.size() == 1) {
      sb.append(" Error: ").append(errors.get(0));
    } else {
      String msg = errors.stream().collect(Collectors.joining(",", "[", "]"));
      sb.append(" Errors: ").append(msg);
    }
    return sb.toString();
  }

