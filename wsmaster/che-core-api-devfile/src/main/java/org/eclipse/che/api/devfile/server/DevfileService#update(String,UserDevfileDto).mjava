  @PUT
  @Path("/{id}")
  @Consumes(APPLICATION_JSON)
  @Produces(APPLICATION_JSON)
  @ApiOperation(value = "Update the devfile by replacing all the existing data with update")
  @ApiResponses({
    @ApiResponse(code = 200, message = "The devfile successfully updated"),
    @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
    @ApiResponse(code = 403, message = "The user does not have access to update the devfile"),
    @ApiResponse(
        code = 409,
        message =
            "Conflict error occurred during devfile update"
                + "(e.g. Workspace with such name already exists)"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public UserDevfileDto update(
      @ApiParam("The devfile id") @PathParam("id") String id,
      @ApiParam(value = "The devfile update", required = true) UserDevfileDto update)
      throws BadRequestException, ServerException, ForbiddenException, NotFoundException,
          ConflictException {
    requiredNotNull(update, "User Devfile configuration");
    update.setId(id);
    return linksInjector.injectLinks(
        asDto(userDevfileManager.updateUserDevfile(update)), getServiceContext());
  }

