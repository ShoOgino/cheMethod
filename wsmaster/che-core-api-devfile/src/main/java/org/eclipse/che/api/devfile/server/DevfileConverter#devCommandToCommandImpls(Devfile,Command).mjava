  private List<CommandImpl> devCommandToCommandImpls(Devfile devFile, Command devCommand) {
    List<CommandImpl> commands = new ArrayList<>();
    for (Action devAction : devCommand.getActions()) {
      CommandImpl command = new CommandImpl();
      command.setName(devCommand.getName() + ":" + devAction.getTool());
      command.setType(devAction.getType());
      command.setCommandLine(devAction.getCommand());
      if (devAction.getWorkdir() != null) {
        command.getAttributes().put(WORKING_DIRECTORY_ATTRIBUTE, devAction.getWorkdir());
      }
      Optional<Tool> toolOfCommand =
          devFile
              .getTools()
              .stream()
              .filter(tool -> tool.getName().equals(devAction.getTool()))
              .findFirst();
      if (toolOfCommand.isPresent() && !isNullOrEmpty(toolOfCommand.get().getId())) {
        command.getAttributes().put("pluginId", toolOfCommand.get().getId());
      }
      if (devCommand.getAttributes() != null) {
        command.getAttributes().putAll(devCommand.getAttributes());
      }
      commands.add(command);
    }
    return commands;
  }

