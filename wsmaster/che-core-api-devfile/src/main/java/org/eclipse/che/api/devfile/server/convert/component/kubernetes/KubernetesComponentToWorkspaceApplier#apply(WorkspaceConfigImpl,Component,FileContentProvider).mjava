  /**
   * Applies changes on workspace config according to the specified kubernetes/openshift component.
   *
   * @param workspaceConfig workspace config on which changes should be applied
   * @param k8sComponent kubernetes/openshift component that should be applied
   * @param contentProvider content provider that may be used for external component resource
   *     fetching
   * @throws IllegalArgumentException if specified workspace config or plugin component is null
   * @throws IllegalArgumentException if specified component has type different from chePlugin
   * @throws DevfileException if specified content provider is null while kubernetes/openshift
   *     component required external file content
   * @throws DevfileException if external file content is empty or any error occurred during content
   *     retrieving
   */
  @Override
  public void apply(
      WorkspaceConfigImpl workspaceConfig,
      Component k8sComponent,
      FileContentProvider contentProvider)
      throws DevfileException {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(k8sComponent != null, "Component must not be null");
    checkArgument(
        KUBERNETES_COMPONENT_TYPE.equals(k8sComponent.getType())
            || OPENSHIFT_COMPONENT_TYPE.equals(k8sComponent.getType()),
        format(
            "Plugin must have `%s` or `%s` type",
            KUBERNETES_COMPONENT_TYPE, OPENSHIFT_COMPONENT_TYPE));

    String componentContent = retrieveContent(k8sComponent, contentProvider);

    List<HasMetadata> componentObjects =
        new ArrayList<>(unmarshalComponentObjects(k8sComponent, componentContent));

    if (!k8sComponent.getSelector().isEmpty()) {
      componentObjects = SelectorFilter.filter(componentObjects, k8sComponent.getSelector());
    }

    estimateCommandsMachineName(workspaceConfig, k8sComponent, componentObjects);

    applyEntrypoints(k8sComponent.getEntrypoints(), componentObjects);

    k8sEnvProvisioner.provision(
        workspaceConfig, k8sComponent.getType(), componentObjects, emptyMap());
  }

