  /**
   * Applies changes on workspace config according to the specified editor tool.
   *
   * @param workspaceConfig workspace config on which changes should be applied
   * @param editorTool plugin tool that should be applied
   * @param contentProvider optional content provider that may be used for external tool resource
   *     fetching
   * @throws IllegalArgumentException if specified workspace config or plugin tool is null
   * @throws IllegalArgumentException if specified tool has type different from cheEditor
   */
  @Override
  public void apply(
      WorkspaceConfigImpl workspaceConfig, Tool editorTool, FileContentProvider contentProvider)
      throws DevfileException {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(editorTool != null, "Tool must not be null");
    checkArgument(
        EDITOR_TOOL_TYPE.equals(editorTool.getType()),
        format("Plugin must have `%s` type", EDITOR_TOOL_TYPE));

    String editorToolName = editorTool.getName();
    String editorId = editorTool.getId();

    workspaceConfig.getAttributes().put(WORKSPACE_TOOLING_EDITOR_ATTRIBUTE, editorId);

    workspaceConfig.getAttributes().put(EDITOR_TOOL_ALIAS_WORKSPACE_ATTRIBUTE, editorToolName);

    String editorIdVersion = resolveIdAndVersion(editorTool.getId());
    workspaceConfig
        .getCommands()
        .stream()
        .filter(c -> c.getAttributes().get(TOOL_NAME_COMMAND_ATTRIBUTE).equals(editorToolName))
        .forEach(c -> c.getAttributes().put(PLUGIN_ATTRIBUTE, editorIdVersion));
  }

