  /**
   * Creates workspace from provided devfile
   *
   * @param data devfile content
   * @return created workspace configuration
   */
  @POST
  @Consumes({"text/yaml", "text/x-yaml", "application/yaml", "application/json"})
  @Produces(APPLICATION_JSON)
  @ApiOperation(
      value = "Create a new workspace based on provided devfile",
      notes =
          "This operation can be performed only by authorized user,"
              + "this user will be the owner of the created workspace",
      response = WorkspaceDto.class)
  @ApiResponses({
    @ApiResponse(code = 200, message = "The workspace successfully created"),
    @ApiResponse(
        code = 400,
        message =
            "Provided devfile syntactically incorrect, doesn't match with actual schema or has integrity violations"),
    @ApiResponse(code = 403, message = "The user does not have access to create a new workspace"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public Response createFromYaml(String data)
      throws ServerException, ConflictException, NotFoundException, ValidationException,
          BadRequestException {

    WorkspaceImpl workspace;
    try {
      Devfile devfile = devfileManager.parse(data);
      workspace = devfileManager.createWorkspace(devfile, urlFileContentProvider);
    } catch (DevfileException e) {
      throw new BadRequestException(e.getMessage());
    }
    return Response.status(201)
        .entity(asDto(workspace).withLinks(linksGenerator.genLinks(workspace, getServiceContext())))
        .build();
  }

