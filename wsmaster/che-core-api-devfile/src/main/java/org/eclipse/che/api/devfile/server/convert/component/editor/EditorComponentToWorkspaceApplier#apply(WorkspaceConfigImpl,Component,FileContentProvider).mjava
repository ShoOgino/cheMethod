  /**
   * Applies changes on workspace config according to the specified editor component.
   *
   * @param workspaceConfig workspace config on which changes should be applied
   * @param editorComponent plugin component that should be applied
   * @param contentProvider optional content provider that may be used for external component
   *     resource fetching
   * @throws IllegalArgumentException if specified workspace config or plugin component is null
   * @throws IllegalArgumentException if specified component has type different from cheEditor
   */
  @Override
  public void apply(
      WorkspaceConfigImpl workspaceConfig,
      Component editorComponent,
      FileContentProvider contentProvider) {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(editorComponent != null, "Component must not be null");
    checkArgument(
        EDITOR_COMPONENT_TYPE.equals(editorComponent.getType()),
        format("Plugin must have `%s` type", EDITOR_COMPONENT_TYPE));

    String editorComponentAlias = editorComponent.getAlias();
    String editorId = editorComponent.getId();
    String memoryLimit = editorComponent.getMemoryLimit();

    workspaceConfig.getAttributes().put(WORKSPACE_TOOLING_EDITOR_ATTRIBUTE, editorId);

    if (editorComponentAlias != null) {
      workspaceConfig
          .getAttributes()
          .put(EDITOR_COMPONENT_ALIAS_WORKSPACE_ATTRIBUTE, editorComponentAlias);
    }

    String editorIdVersion = resolveIdAndVersion(editorComponent.getId());
    if (memoryLimit != null) {
      String editorIdPart = editorIdVersion.split(":")[0];
      workspaceConfig
          .getAttributes()
          .put(format(SIDECAR_MEMORY_LIMIT_ATTR_TEMPLATE, editorIdPart), memoryLimit);
    }
    workspaceConfig
        .getCommands()
        .stream()
        .filter(
            c ->
                c.getAttributes()
                    .get(COMPONENT_ALIAS_COMMAND_ATTRIBUTE)
                    .equals(editorComponentAlias))
        .forEach(c -> c.getAttributes().put(PLUGIN_ATTRIBUTE, editorIdVersion));
  }

