  /**
   * Validates that the selector, if any, selects some objects from the component's referenced
   * content. Only does anything for kubernetes and openshift components.
   *
   * @param component the component to check
   * @param contentProvider the content provider to use when fetching content
   * @return the list of referenced objects matching the selector or empty list
   * @throws ValidationException on failure to validate the referenced content
   * @throws InfrastructureException on failure to parse the referenced content
   * @throws IOException on failure to retrieve the referenced content
   * @throws DevfileException if the selector filters out all referenced objects
   */
  private List<HasMetadata> validateSelector(
      Component component, FileContentProvider contentProvider)
      throws ValidationException, InfrastructureException, IOException, DevfileException {

    if (!component.getType().equals(KUBERNETES_COMPONENT_TYPE)
        && !component.getType().equals(OPENSHIFT_COMPONENT_TYPE)) {
      return Collections.emptyList();
    }

    List<HasMetadata> content = getReferencedKubernetesList(component, contentProvider);

    Map<String, String> selector = component.getSelector();
    if (selector == null || selector.isEmpty()) {
      return content;
    }

    content = SelectorFilter.filter(content, selector);

    if (content.isEmpty()) {
      throw new DevfileException(
          format(
              "The selector of the component %s filters out all objects from the list.",
              component.getName()));
    }

    return content;
  }

