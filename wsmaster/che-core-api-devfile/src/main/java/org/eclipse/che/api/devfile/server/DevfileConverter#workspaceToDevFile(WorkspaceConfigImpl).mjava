  /**
   * Exports workspace config into {@link Devfile}
   *
   * @param wsConfig initial workspace config
   * @return devfile resulted devfile
   * @throws WorkspaceExportException if export of given workspace config is impossible
   */
  public Devfile workspaceToDevFile(WorkspaceConfigImpl wsConfig) throws WorkspaceExportException {

    Devfile devfile =
        new Devfile().withSpecVersion(CURRENT_SPEC_VERSION).withName(wsConfig.getName());

    if (wsConfig.getEnvironments().size() > 1) {
      throw new WorkspaceExportException(
          format(
              "Workspace `%s` cannot be converted to devfile since it has several environments which have no equivalent in devfile model",
              wsConfig.getName()));
    }

    String recipeToolName = null;
    if (!wsConfig.getEnvironments().isEmpty()) {
      Map<String, EnvironmentImpl> environments = wsConfig.getEnvironments();
      Entry<String, EnvironmentImpl> environmentEntry = environments.entrySet().iterator().next();
      String environmentName = environmentEntry.getKey();
      EnvironmentImpl environment = environmentEntry.getValue();
      if (!"dockerimage".equals(environment.getRecipe().getType())) {
        throw new WorkspaceExportException(
            format(
                "Workspace `%s` cannot be converted to devfile since it has environment with '%s' recipe type. Currently only workspaces with `dockerimage` recipe can be exported.",
                wsConfig.getName(), environment.getRecipe().getType()));
      }

      Tool dockerimageTool = dockerimageToolApplier.from(environmentName, environment);
      devfile.getTools().add(dockerimageTool);
      recipeToolName = dockerimageTool.getName();
    }

    // Manage projects
    List<Project> projects = new ArrayList<>();
    wsConfig
        .getProjects()
        .forEach(projectConfig -> projects.add(projectConfigToDevProject(projectConfig)));
    devfile.setProjects(projects);

    // Manage commands
    Map<String, String> toolsIdToName = parseTools(wsConfig);
    for (CommandImpl command : wsConfig.getCommands()) {
      devfile.getCommands().add(commandImplToDevCommand(command, toolsIdToName, recipeToolName));
    }

    // Manage tools
    for (Map.Entry<String, String> entry : wsConfig.getAttributes().entrySet()) {
      if (entry.getKey().equals(WORKSPACE_TOOLING_EDITOR_ATTRIBUTE)) {
        String editorId = entry.getValue();
        Tool editorTool =
            new Tool()
                .withType(EDITOR_TOOL_TYPE)
                .withId(editorId)
                .withName(toolsIdToName.getOrDefault(editorId, editorId));
        devfile.getTools().add(editorTool);
      } else if (entry.getKey().equals(WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE)) {
        for (String pluginId : entry.getValue().split(",")) {
          Tool pluginTool =
              new Tool()
                  .withId(pluginId)
                  .withType(PLUGIN_TOOL_TYPE)
                  .withName(toolsIdToName.getOrDefault(pluginId, pluginId));
          devfile.getTools().add(pluginTool);
        }
      }
    }
    return devfile;
  }

