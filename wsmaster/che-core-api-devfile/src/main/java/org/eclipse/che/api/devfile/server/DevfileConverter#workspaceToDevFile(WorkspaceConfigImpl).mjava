  /**
   * Exports workspace config into {@link Devfile}
   *
   * @param wsConfig initial workspace config
   * @return devfile resulted devfile
   * @throws WorkspaceExportException if export of given workspace config is impossible
   */
  public Devfile workspaceToDevFile(WorkspaceConfigImpl wsConfig) throws WorkspaceExportException {

    if (!isNullOrEmpty(wsConfig.getDefaultEnv()) || !wsConfig.getEnvironments().isEmpty()) {
      throw new WorkspaceExportException(
          format(
              "Workspace %s cannot be converted to devfile since it contains environments which have no equivalent in devfile model",
              wsConfig.getName()));
    }

    Devfile devfile =
        new Devfile().withSpecVersion(CURRENT_SPEC_VERSION).withName(wsConfig.getName());

    // Manage projects
    List<Project> projects = new ArrayList<>();
    wsConfig
        .getProjects()
        .forEach(projectConfig -> projects.add(projectConfigToDevProject(projectConfig)));
    devfile.setProjects(projects);

    // Manage commands
    Map<String, String> toolsIdToName = parseTools(wsConfig);
    List<Command> commands = new ArrayList<>();
    wsConfig
        .getCommands()
        .forEach(command -> commands.add(commandImplToDevCommand(command, toolsIdToName)));
    devfile.setCommands(commands);

    // Manage tools
    List<Tool> tools = new ArrayList<>();
    for (Map.Entry<String, String> entry : wsConfig.getAttributes().entrySet()) {
      if (entry.getKey().equals(WORKSPACE_TOOLING_EDITOR_ATTRIBUTE)) {
        String editorId = entry.getValue();
        Tool editorTool =
            new Tool()
                .withType(EDITOR_TOOL_TYPE)
                .withId(editorId)
                .withName(toolsIdToName.getOrDefault(editorId, editorId));
        tools.add(editorTool);
      } else if (entry.getKey().equals(WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE)) {
        for (String pluginId : entry.getValue().split(",")) {
          Tool pluginTool =
              new Tool()
                  .withId(pluginId)
                  .withType(PLUGIN_TOOL_TYPE)
                  .withName(toolsIdToName.getOrDefault(pluginId, pluginId));
          tools.add(pluginTool);
        }
      }
    }
    devfile.setTools(tools);
    return devfile;
  }

