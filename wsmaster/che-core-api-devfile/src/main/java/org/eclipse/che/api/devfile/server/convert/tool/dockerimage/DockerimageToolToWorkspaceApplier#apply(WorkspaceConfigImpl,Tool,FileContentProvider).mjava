  /**
   * Applies changes on workspace config according to the specified dockerimage tool.
   *
   * <p>Dockerimage tool is provisioned as Deployment in Kubernetes recipe.<br>
   * Generated deployment contains container with environment variables, memory limit, docker image,
   * arguments and commands specified in tool.<br>
   * Also, environment is provisioned with machine config with volumes and servers specified, then
   * Kubernetes infra will created needed PVC, Services, Ingresses, Routes according to specified
   * configuration.
   *
   * @param workspaceConfig workspace config on which changes should be applied
   * @param dockerimageTool dockerimage tool that should be applied
   * @param contentProvider optional content provider that may be used for external tool resource
   *     fetching
   * @throws DevfileException if specified workspace config already has default environment where
   *     dockerimage tool should be stored
   * @throws IllegalArgumentException if specified workspace config or plugin tool is null
   * @throws IllegalArgumentException if specified tool has type different from dockerimage
   */
  @Override
  public void apply(
      WorkspaceConfigImpl workspaceConfig,
      Tool dockerimageTool,
      FileContentProvider contentProvider)
      throws DevfileException {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(dockerimageTool != null, "Tool must not be null");
    checkArgument(
        DOCKERIMAGE_TOOL_TYPE.equals(dockerimageTool.getType()),
        format("Plugin must have `%s` type", DOCKERIMAGE_TOOL_TYPE));

    String machineName = dockerimageTool.getName();

    MachineConfigImpl machineConfig = new MachineConfigImpl();
    dockerimageTool
        .getEndpoints()
        .forEach(e -> machineConfig.getServers().put(e.getName(), toServerConfig(e)));

    dockerimageTool
        .getVolumes()
        .forEach(
            v ->
                machineConfig
                    .getVolumes()
                    .put(v.getName(), new VolumeImpl().withPath(v.getContainerPath())));

    if (dockerimageTool.getMountSources()) {
      machineConfig
          .getVolumes()
          .put(PROJECTS_VOLUME_NAME, new VolumeImpl().withPath(projectFolderPath));
    }

    List<HasMetadata> componentObjects = new ArrayList<>();
    Deployment deployment =
        buildDeployment(
            machineName,
            dockerimageTool.getImage(),
            dockerimageTool.getMemoryLimit(),
            dockerimageTool
                .getEnv()
                .stream()
                .map(e -> new EnvVar(e.getName(), e.getValue(), null))
                .collect(Collectors.toCollection(ArrayList::new)),
            dockerimageTool.getCommand(),
            dockerimageTool.getArgs());
    componentObjects.add(deployment);

    dockerimageTool
        .getEndpoints()
        .stream()
        .filter(e -> "true".equals(e.getAttributes().get(DISCOVERABLE_ENDPOINT_ATTRIBUTE)))
        .forEach(e -> componentObjects.add(createService(deployment, e)));

    k8sEnvProvisioner.provision(
        workspaceConfig,
        KubernetesEnvironment.TYPE,
        componentObjects,
        ImmutableMap.of(machineName, machineConfig));

    workspaceConfig
        .getCommands()
        .stream()
        .filter(
            c ->
                dockerimageTool
                    .getName()
                    .equals(c.getAttributes().get(Constants.TOOL_NAME_COMMAND_ATTRIBUTE)))
        .forEach(c -> c.getAttributes().put(MACHINE_NAME_ATTRIBUTE, machineName));
  }

