  /**
   * Applies Kubernetes tool configuration on provided {@link Devfile} and {@link
   * WorkspaceConfigImpl}.
   *
   * <p>It includes:
   *
   * <ul>
   *   <li>provisioning environment based on content of the file specified in {@link Tool#local};
   *   <li>provisioning machine name attribute to commands that are configured to be run in the
   *       specified tool. Note that name will be set only if tool contains the only one container;
   * </ul>
   *
   * <p>NOTE: An {@link FileContentProvider} MUST be provided in order to fetch recipe content.
   *
   * @param recipeTool the recipe-type tool
   * @param devfile devfile that should be changed according to the provided tool
   * @param workspaceConfig workspace config that should be changed according to the provided tool
   * @param contentProvider service-specific provider of recipe file content
   * @throws IllegalArgumentException when wrong type tool is passed
   * @throws IllegalArgumentException when there is no content provider for recipe-type tool
   * @throws DevfileRecipeFormatException when recipe-type tool content is empty or has wrong format
   * @throws DevfileException when general devfile error occurs
   */
  public void apply(
      Tool recipeTool,
      Devfile devfile,
      WorkspaceConfigImpl workspaceConfig,
      FileContentProvider contentProvider)
      throws DevfileRecipeFormatException, DevfileException {
    checkArgument(recipeTool != null, "Tool must not be null");
    checkArgument(devfile != null, "Devfile must not be null");
    checkArgument(workspaceConfig != null, "Workspace config must not be null");

    final String type = recipeTool.getType();
    checkArgument(
        KUBERNETES_TOOL_TYPE.equals(type) || OPENSHIFT_TOOL_TYPE.equals(type),
        format(
            "Unable to create environment from tool '%s' - it has ineligible type '%s'.",
            recipeTool.getName(), type));

    String recipeFileContent = retrieveContent(recipeTool, contentProvider, type);

    final KubernetesList list = unmarshal(recipeTool, recipeFileContent);

    if (!recipeTool.getSelector().isEmpty()) {
      list.setItems(filter(list, recipeTool.getSelector()));
    }

    estimateCommandsMachineName(devfile, recipeTool, list);

    RecipeImpl recipe = new RecipeImpl(type, YAML_CONTENT_TYPE, asYaml(recipeTool, list), null);

    String envName = recipeTool.getName();
    workspaceConfig.getEnvironments().put(envName, new EnvironmentImpl(recipe, emptyMap()));
    workspaceConfig.setDefaultEnv(envName);
  }

