  /**
   * Provision chePlugin components in {@link DevfileImpl} according to the value of {@link
   * Constants#WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE} in the specified {@link WorkspaceConfigImpl}.
   *
   * @param devfile devfile that should be provisioned with chePlugin components
   * @param workspaceConfig workspace config that may contain configured plugins
   * @throws IllegalArgumentException if the specified workspace config or devfile is null
   */
  @Override
  public void provision(DevfileImpl devfile, WorkspaceConfigImpl workspaceConfig)
      throws WorkspaceExportException {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(devfile != null, "Workspace config must not be null");

    String pluginsAttribute =
        workspaceConfig.getAttributes().get(WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE);
    if (isNullOrEmpty(pluginsAttribute)) {
      return;
    }

    Map<String, String> pluginIdToComponentAlias = extractPluginIdToComponentAlias(workspaceConfig);

    for (String pluginId : pluginsAttribute.split(",")) {
      final ExtendedPluginFQN fqn;
      try {
        fqn = fqnParser.parsePluginFQN(pluginId);
      } catch (InfrastructureException e) {
        throw new WorkspaceExportException(e.getMessage(), e);
      }

      ComponentImpl pluginComponent = new ComponentImpl(PLUGIN_COMPONENT_TYPE, fqn.getId());

      pluginComponent.setAlias(pluginIdToComponentAlias.get(fqn.getId()));
      pluginComponent.setMemoryLimit(
          workspaceConfig
              .getAttributes()
              .get(format(SIDECAR_MEMORY_LIMIT_ATTR_TEMPLATE, fqn.getPublisherAndName())));
      devfile.getComponents().add(pluginComponent);
    }
  }

