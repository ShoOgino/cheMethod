  /**
   * Provision default editor if there is no any another editor and default plugins for it.
   *
   * @param devfile devfile where editor and plugins should be provisioned
   */
  public void apply(Devfile devfile) {
    if (defaultEditorRef == null) {
      // there is no default editor configured
      return;
    }

    if ("true".equals(devfile.getAttributes().get(EDITOR_FREE_DEVFILE_ATTRIBUTE))) {
      return;
    }

    List<Component> components = devfile.getComponents();
    Set<String> componentsNames =
        components.stream().map(Component::getName).collect(Collectors.toCollection(HashSet::new));

    Optional<Component> editorOpt =
        components.stream().filter(t -> EDITOR_COMPONENT_TYPE.equals(t.getType())).findFirst();

    boolean isDefaultEditorUsed;
    if (!editorOpt.isPresent()) {
      components.add(
          new Component()
              .withName(findAvailableName(componentsNames, defaultEditorRef))
              .withType(EDITOR_COMPONENT_TYPE)
              .withId(defaultEditorRef));
      isDefaultEditorUsed = true;
    } else {
      Component editor = editorOpt.get();
      isDefaultEditorUsed = editor.getId().startsWith(defaultEditorId + ':');
    }

    if (isDefaultEditorUsed) {
      provisionDefaultPlugins(components, componentsNames);
    }
  }

