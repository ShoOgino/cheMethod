  /**
   * Consumes an recipe-type tool (openshift or kubernetes) and tries to create {@link
   * EnvironmentImpl} from it (including filtering of list items using selectors, if necessary). An
   * {@link RecipeFileContentProvider} MUST be provided in order to fetch recipe content.
   *
   * @param recipeTool the recipe-type tool
   * @param recipeFileContentProvider service-specific provider of recipe file content
   * @return constructed environment from recipe type tool
   * @throws IllegalArgumentException when wrong type tool is passed
   * @throws IllegalArgumentException when there is no content provider for recipe-type tool
   * @throws DevfileException when general devfile error occurs
   * @throws DevfileRecipeFormatException when recipe-type tool content is empty or has wrong format
   */
  public EnvironmentImpl createEnvironment(
      Tool recipeTool, RecipeFileContentProvider recipeFileContentProvider)
      throws DevfileRecipeFormatException, DevfileException {
    final String type = recipeTool.getType();
    if (!KUBERNETES_TOOL_TYPE.equals(type) && !OPENSHIFT_TOOL_TYPE.equals(type)) {
      throw new IllegalArgumentException(
          format(
              "Unable to create environment from tool '%s' - it has ineligible type '%s'.",
              recipeTool.getName(), type));
    }
    if (recipeFileContentProvider == null) {
      throw new DevfileException(
          format(
              "Unable to process tool '%s' of type '%s' since there is no recipe content provider supplied. "
                  + "That means you're trying to submit an devfile with recipe-type tools to the bare devfile API or used factory URL does not support this feature.",
              recipeTool.getName(), type));
    }

    String recipeFileContent;
    try {
      recipeFileContent = recipeFileContentProvider.fetchContent(recipeTool.getLocal());
    } catch (IOException e) {
      throw new DevfileException(
          format("Error during recipe content retrieval for tool '%s': ", recipeTool.getName())
              + e.getMessage(),
          e);
    }
    if (isNullOrEmpty(recipeFileContent)) {
      throw new DevfileException(
          format(
              "The local file '%s' defined in tool '%s' is unreachable or empty.",
              recipeTool.getLocal(), recipeTool.getName()));
    }
    final KubernetesList list = unmarshal(recipeTool, recipeFileContent);

    if (recipeTool.getSelector() != null && !recipeTool.getSelector().isEmpty()) {
      List<HasMetadata> itemsList =
          list.getItems()
              .stream()
              .filter(
                  e ->
                      e.getMetadata()
                          .getLabels()
                          .entrySet()
                          .containsAll(recipeTool.getSelector().entrySet()))
              .collect(Collectors.toList());
      list.setItems(itemsList);
    }
    RecipeImpl recipe =
        new RecipeImpl(type, DEFAULT_RECIPE_CONTENT_TYPE, asYaml(recipeTool, list), null);
    return new EnvironmentImpl(recipe, emptyMap());
  }

