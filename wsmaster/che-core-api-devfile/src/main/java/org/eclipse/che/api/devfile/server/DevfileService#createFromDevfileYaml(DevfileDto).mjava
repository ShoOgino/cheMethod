  @Path("/devfile")
  @POST
  @Consumes({APPLICATION_JSON, "text/yaml", "text/x-yaml"})
  @Produces(APPLICATION_JSON)
  @ApiOperation(
      value = "Creates a new persistent Devfile from yaml representation",
      consumes = "application/json, text/yaml, text/x-yaml",
      produces = APPLICATION_JSON,
      nickname = "createFromDevfileYaml",
      response = UserDevfileDto.class)
  @ApiResponses({
    @ApiResponse(code = 201, message = "The devfile successfully created"),
    @ApiResponse(code = 400, message = "Missed required parameters, parameters are not valid"),
    @ApiResponse(code = 403, message = "The user does not have access to create a new devfile"),
    @ApiResponse(code = 409, message = "Conflict error occurred during the devfile creation"),
    @ApiResponse(code = 500, message = "Internal server error occurred")
  })
  public Response createFromDevfileYaml(
      @ApiParam(value = "The devfile to create", required = true) DevfileDto devfile)
      throws ConflictException, BadRequestException, ForbiddenException, NotFoundException,
          ServerException {
    requiredNotNull(devfile, "Devfile");
    return Response.status(201)
        .entity(
            linksInjector.injectLinks(
                asDto(
                    userDevfileManager.createDevfile(
                        DtoFactory.newDto(UserDevfileDto.class)
                            .withDevfile(devfile)
                            .withName(NameGenerator.generate("devfile-", 16)))),
                getServiceContext()))
        .build();
  }

