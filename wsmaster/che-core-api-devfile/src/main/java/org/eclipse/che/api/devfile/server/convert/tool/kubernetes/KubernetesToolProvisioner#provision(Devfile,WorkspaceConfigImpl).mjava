  /**
   * Provision kubernetes/openshift tool in {@link Devfile} according to the value of environment
   * with kubernetes/openshift recipe if the specified {@link WorkspaceConfigImpl} has such.
   *
   * @param devfile devfile to which created kubernetes/openshfit tool should be injected
   * @param workspaceConfig workspace config that may contain environment with kubernetes/openshift
   *     recipe to convert
   * @throws IllegalArgumentException if the specified workspace config or devfile is null
   * @throws WorkspaceExportException if workspace config has more than one kubernetes/openshift
   *     environments
   * @throws WorkspaceExportException if workspace config has one kubernetes/openshift environments.
   *     Exporting of such workspaces will be implemented soon
   */
  @Override
  public void provision(Devfile devfile, WorkspaceConfigImpl workspaceConfig)
      throws WorkspaceExportException {
    checkArgument(devfile != null, "The environment must not be null");
    checkArgument(workspaceConfig != null, "The workspace config must not be null");

    List<Entry<String, EnvironmentImpl>> k8sEnvironments =
        workspaceConfig
            .getEnvironments()
            .entrySet()
            .stream()
            .filter(
                e ->
                    KubernetesEnvironment.TYPE.equals(e.getValue().getRecipe().getType())
                        || OpenShiftEnvironment.TYPE.equals(e.getValue().getRecipe().getType()))
            .collect(Collectors.toList());

    if (k8sEnvironments.isEmpty()) {
      return;
    }

    if (k8sEnvironments.size() > 1) {
      throw new WorkspaceExportException(
          "Workspace with multiple `kubernetes`/`openshift` environments can not be converted to devfile");
    }

    EnvironmentImpl env = k8sEnvironments.get(0).getValue();
    throw new WorkspaceExportException(
        String.format(
            "Exporting of workspace with `%s` is not supported yet.", env.getRecipe().getType()));
  }

