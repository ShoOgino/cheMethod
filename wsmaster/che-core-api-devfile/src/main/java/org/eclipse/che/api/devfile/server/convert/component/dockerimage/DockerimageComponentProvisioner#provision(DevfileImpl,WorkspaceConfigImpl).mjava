  /**
   * Provision dockerimage component in {@link DevfileImpl} according to the value of environment
   * with dockerimage recipe if the specified {@link WorkspaceConfigImpl} has such.
   *
   * @param devfile devfile to which created dockerimage component should be injected
   * @param workspaceConfig workspace config that may contain environment with dockerimage recipe to
   *     convert
   * @throws IllegalArgumentException if the specified workspace config or devfile is null
   * @throws WorkspaceExportException if workspace config has more than one dockerimage environments
   */
  @Override
  public void provision(DevfileImpl devfile, WorkspaceConfigImpl workspaceConfig)
      throws WorkspaceExportException {
    checkArgument(devfile != null, "The environment must not be null");
    checkArgument(workspaceConfig != null, "The workspace config must not be null");

    List<Entry<String, EnvironmentImpl>> dockerimageEnvironments =
        workspaceConfig
            .getEnvironments()
            .entrySet()
            .stream()
            .filter(e -> DockerImageEnvironment.TYPE.equals(e.getValue().getRecipe().getType()))
            .collect(Collectors.toList());

    if (dockerimageEnvironments.isEmpty()) {
      return;
    }

    if (dockerimageEnvironments.size() > 1) {
      throw new WorkspaceExportException(
          "Workspace with multiple `dockerimage` environments can not be converted to devfile");
    }

    Entry<String, EnvironmentImpl> dockerimageEnvEntry = dockerimageEnvironments.get(0);
    String environmentName = dockerimageEnvEntry.getKey();
    EnvironmentImpl environment = dockerimageEnvEntry.getValue();

    RecipeImpl recipe = environment.getRecipe();
    ComponentImpl dockerimageComponent = new ComponentImpl();
    dockerimageComponent.setName(environmentName);

    dockerimageComponent.setImage(recipe.getContent());
    dockerimageComponent.setType(DOCKERIMAGE_COMPONENT_TYPE);

    if (environment.getMachines().isEmpty()) {
      // environment does not have additional configuration
      devfile.getComponents().add(dockerimageComponent);
      return;
    }

    if (environment.getMachines().size() > 1) {
      throw new WorkspaceExportException(
          "Environment with 'dockerimage' recipe must contain only one machine configuration");
    }

    MachineConfigImpl machineConfig = environment.getMachines().values().iterator().next();

    for (Entry<String, ServerConfigImpl> serverEntry : machineConfig.getServers().entrySet()) {
      dockerimageComponent
          .getEndpoints()
          .add(toEndpoint(serverEntry.getKey(), serverEntry.getValue()));
    }

    for (Entry<String, org.eclipse.che.api.workspace.server.model.impl.VolumeImpl> volumeEntry :
        machineConfig.getVolumes().entrySet()) {
      if (volumeEntry.getKey().equals(PROJECTS_VOLUME_NAME)) {
        dockerimageComponent.setMountSources(true);
        continue;
      }

      dockerimageComponent
          .getVolumes()
          .add(toDevfileVolume(volumeEntry.getKey(), volumeEntry.getValue()));
    }

    dockerimageComponent.setMemoryLimit(machineConfig.getAttributes().get(MEMORY_LIMIT_ATTRIBUTE));

    EntryPoint ep = toEntryPoint(machineConfig);
    dockerimageComponent.setCommand(ep.getCommand());
    dockerimageComponent.setArgs(ep.getArguments());

    machineConfig
        .getEnv()
        .entrySet()
        .stream()
        .map(e -> new EnvImpl(e.getKey(), e.getValue()))
        .forEach(e -> dockerimageComponent.getEnv().add(e));

    devfile.getComponents().add(dockerimageComponent);
  }

