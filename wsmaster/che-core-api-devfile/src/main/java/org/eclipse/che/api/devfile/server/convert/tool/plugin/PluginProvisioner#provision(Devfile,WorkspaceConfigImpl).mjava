  /**
   * Provision chePlugin tools in {@link Devfile} according to the value of {@link
   * Constants#WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE} in the specified {@link WorkspaceConfigImpl}.
   *
   * @param devfile devfile that should be provisioned with chePlugin tools
   * @param workspaceConfig workspace config that may contain configured plugins
   * @throws IllegalArgumentException if the specified workspace config or devfile is null
   */
  @Override
  public void provision(Devfile devfile, WorkspaceConfigImpl workspaceConfig) {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(devfile != null, "Workspace config must not be null");

    String pluginsAttribute =
        workspaceConfig.getAttributes().get(WORKSPACE_TOOLING_PLUGINS_ATTRIBUTE);
    if (isNullOrEmpty(pluginsAttribute)) {
      return;
    }

    Map<String, String> pluginIdToToolName = extractPluginIdToToolName(workspaceConfig);

    for (String pluginId : pluginsAttribute.split(",")) {
      Tool pluginTool =
          new Tool()
              .withId(pluginId)
              .withType(PLUGIN_TOOL_TYPE)
              .withName(pluginIdToToolName.getOrDefault(pluginId, pluginId));
      devfile.getTools().add(pluginTool);
    }
  }

