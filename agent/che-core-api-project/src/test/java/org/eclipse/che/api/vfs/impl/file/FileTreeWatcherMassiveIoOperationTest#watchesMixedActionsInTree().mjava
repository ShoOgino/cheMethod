    @Test
    public void watchesMixedActionsInTree() throws Exception {
        fileWatcherTestTree.createTree("", 7, 5);
        Thread.sleep(100);

        FileWatcherNotificationHandler notificationListener = aNotificationListener();
        fileTreeWatcher = new FileTreeWatcher(testDirectory, newHashSet(), notificationListener);
        fileTreeWatcher.startup();
        Thread.sleep(5000);

        List<String> allFiles = fileWatcherTestTree.findAllFilesInTree("");
        List<String> updated = newArrayList(allFiles.subList(0, allFiles.size() / 2));
        List<String> deleted = newArrayList(allFiles.subList(allFiles.size() / 2, allFiles.size()));
        List<String> directories = fileWatcherTestTree.findAllDirectoriesInTree("");
        List<String> created = newArrayList();

        for (String directory : directories) {
            created.add(fileWatcherTestTree.createFile(directory));
        }

        for (String file : deleted) {
            fileWatcherTestTree.delete(file);
        }

        Thread.sleep(5000);

        updated.addAll(created.subList(0, created.size() / 2));
        for (String file : updated) {
            fileWatcherTestTree.updateFile(file);
        }

        Thread.sleep(5000);

        verify(notificationListener, never()).errorOccurred(eq(testDirectory), any(Throwable.class));

        ArgumentCaptor<String> eventsCaptor = ArgumentCaptor.forClass(String.class);
        verify(notificationListener, times(deleted.size())).handleFileWatcherEvent(eq(DELETED), eq(testDirectory), eventsCaptor.capture(), anyBoolean());
        assertThatCollectionsContainsSameItemsOrFailWithDiff(eventsCaptor.getAllValues(), deleted);

        eventsCaptor = ArgumentCaptor.forClass(String.class);
        verify(notificationListener, times(updated.size())).handleFileWatcherEvent(eq(MODIFIED), eq(testDirectory), eventsCaptor.capture(), anyBoolean());
        assertThatCollectionsContainsSameItemsOrFailWithDiff(eventsCaptor.getAllValues(), updated);

        eventsCaptor = ArgumentCaptor.forClass(String.class);
        verify(notificationListener, times(created.size())).handleFileWatcherEvent(eq(CREATED), eq(testDirectory), eventsCaptor.capture(), anyBoolean());
        assertThatCollectionsContainsSameItemsOrFailWithDiff(eventsCaptor.getAllValues(), created);
    }

