//
//    @Test
//    public void testUploadFile() throws Exception {
//        String fileContent = "to be or not to be";
//        String fileName = "test.txt";
//        String fileMediaType = TEXT_PLAIN;
//        Map<String, List<String>> headers = new HashMap<>();
//        headers.putProject(CONTENT_TYPE, singletonList("multipart/form-data; boundary=abcdef"));
//        String uploadBodyPattern =
//                "--abcdef\r\nContent-Disposition: form-data; name=\"file\"; filename=\"%1$s\"\r\nContent-Type: %2$s\r\n\r\n%3$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"mimeType\"\r\n\r\n%4$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"name\"\r\n\r\n%5$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"overwrite\"\r\n\r\n%6$b"
//                + "\r\n--abcdef--\r\n";
//        byte[] formData = String.format(uploadBodyPattern, fileName, fileMediaType, fileContent, fileMediaType, fileName, false).getBytes();
//        EnvironmentContext env = new EnvironmentContext();
//        env.putProject(HttpServletRequest.class, new MockHttpServletRequest("", new ByteArrayInputStream(formData),
//                                                                     formData.length, POST, headers));
//        ContainerResponse response = launcher.service(POST,
//                                                      String.format("http://localhost:8080/api/project/%s/uploadfile/my_project",
//                                                                    workspace),
//                                                      "http://localhost:8080/api",
//                                                      headers,
//                                                      formData,
//                                                      env);
//        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
//        VirtualFileEntry file = pm.getProject(workspace, "my_project").getBaseFolder().getChild(fileName);
//        Assert.assertTrue(file.isFile());
//        FileEntry _file = (FileEntry)file;
//        assertEquals(_file.getMediaType(), fileMediaType);
//        assertEquals(new String(_file.contentAsBytes()), fileContent);
//    }
//
//    @Test
//    public void testUploadFileWhenFileAlreadyExistAndOverwriteIsTrue() throws Exception {
//        String oldFileContent = "to be or not to be";
//        String newFileContent = "To be, or not to be, that is the question!";
//        String fileName = "test.txt";
//        String fileMediaType = TEXT_PLAIN;
//        Map<String, List<String>> headers = new HashMap<>();
//        headers.putProject(CONTENT_TYPE, singletonList("multipart/form-data; boundary=abcdef"));
//        String uploadBodyPattern =
//                "--abcdef\r\nContent-Disposition: form-data; name=\"file\"; filename=\"%1$s\"\r\nContent-Type: %2$s\r\n\r\n%3$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"mimeType\"\r\n\r\n%4$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"name\"\r\n\r\n%5$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"overwrite\"\r\n\r\n%6$b"
//                + "\r\n--abcdef--\r\n";
//        pm.getProject(workspace, "my_project").getBaseFolder().createFile(fileName, oldFileContent.getBytes());
//        byte[] newFileData =
//                String.format(uploadBodyPattern, fileName, fileMediaType, newFileContent, fileMediaType, fileName, true).getBytes();
//
//        EnvironmentContext env = new EnvironmentContext();
//        env.putProject(HttpServletRequest.class, new MockHttpServletRequest("", new ByteArrayInputStream(newFileData),
//                                                                     newFileData.length, POST, headers));
//        ContainerResponse response = launcher.service(POST,
//                                                      String.format("http://localhost:8080/api/project/%s/uploadfile/my_project",
//                                                                    workspace),
//                                                      "http://localhost:8080/api",
//                                                      headers,
//                                                      newFileData,
//                                                      env);
//        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
//        VirtualFileEntry file = pm.getProject(workspace, "my_project").getBaseFolder().getChild(fileName);
//        Assert.assertTrue(file.isFile());
//        FileEntry _file = (FileEntry)file;
//        assertEquals(_file.getMediaType(), fileMediaType);
//        assertEquals(new String(_file.contentAsBytes()), newFileContent);
//    }
//
//    @Test
//    public void testUploadFileWhenFileAlreadyExistAndOverwriteIsFalse() throws Exception {
//        String oldFileContent = "to be or not to be";
//        String newFileContent = "To be, or not to be, that is the question!";
//        String fileName = "test.txt";
//        String fileMediaType = TEXT_PLAIN;
//        Map<String, List<String>> headers = new HashMap<>();
//        headers.putProject(CONTENT_TYPE, singletonList("multipart/form-data; boundary=abcdef"));
//        String uploadBodyPattern =
//                "--abcdef\r\nContent-Disposition: form-data; name=\"file\"; filename=\"%1$s\"\r\nContent-Type: %2$s\r\n\r\n%3$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"mimeType\"\r\n\r\n%4$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"name\"\r\n\r\n%5$s"
//                + "\r\n--abcdef\r\nContent-Disposition: form-data; name=\"overwrite\"\r\n\r\n%6$b"
//                + "\r\n--abcdef--\r\n";
//        pm.getProject(workspace, "my_project").getBaseFolder().createFile(fileName, oldFileContent.getBytes());
//        byte[] newFileData =
//                String.format(uploadBodyPattern, fileName, fileMediaType, newFileContent, fileMediaType, fileName, false).getBytes();
//
//        EnvironmentContext env = new EnvironmentContext();
//        env.putProject(HttpServletRequest.class, new MockHttpServletRequest("", new ByteArrayInputStream(newFileData),
//                                                                     newFileData.length, POST, headers));
//        ContainerResponse response = launcher.service(POST,
//                                                      String.format("http://localhost:8080/api/project/%s/uploadfile/my_project",
//                                                                    workspace),
//                                                      "http://localhost:8080/api",
//                                                      headers,
//                                                      newFileData,
//                                                      env);
//        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
//        VirtualFileEntry file = pm.getProject(workspace, "my_project").getBaseFolder().getChild(fileName);
//        Assert.assertTrue(file.isFile());
//        FileEntry _file = (FileEntry)file;
//        assertEquals(_file.getMediaType(), fileMediaType);
//        assertEquals(new String(_file.contentAsBytes()), oldFileContent);
//    }
//
    @Test
    public void testGetFileContent() throws Exception {
        String myContent = "to be or not to be";
        pm.getProject("my_project").getBaseFolder().createFile("test.txt", myContent.getBytes());
        ByteArrayContainerResponseWriter writer = new ByteArrayContainerResponseWriter();
        ContainerResponse response = launcher.service(GET,
                                                      String.format("http://localhost:8080/api/project/%s/file/my_project/test.txt",
                                                                    workspace),
                                                      "http://localhost:8080/api", null, null, writer, null);
        assertEquals(response.getStatus(), 200, "Error: " + response.getEntity());
        assertEquals(response.getContentType().toString(), TEXT_PLAIN);
        assertEquals(new String(writer.getBody()), myContent);
    }

