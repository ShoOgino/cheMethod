    @Inject
    @SuppressWarnings("unchecked")
    public DefaultProjectManager(VirtualFileSystemRegistry fileSystemRegistry,
                                 EventService eventService,
                                 ProjectTypeRegistry projectTypeRegistry,
                                 ProjectHandlerRegistry handlers,
                                 Provider<AttributeFilter> filterProvider,
                                 @Named("api.endpoint") String apiEndpoint,
                                 HttpJsonRequestFactory httpJsonRequestFactory) {

        this.fileSystemRegistry = fileSystemRegistry;
        this.eventService = eventService;
        this.projectTypeRegistry = projectTypeRegistry;
        this.handlers = handlers;
        this.apiEndpoint = apiEndpoint;
        this.filterProvider = filterProvider;
        this.httpJsonRequestFactory = httpJsonRequestFactory;

        this.miscCaches = new Cache[CACHE_NUM];
        this.miscLocks = new Lock[CACHE_NUM];
        for (int i = 0; i < CACHE_NUM; i++) {
            miscLocks[i] = new ReentrantLock();
            miscCaches[i] = CacheBuilder.newBuilder()
                                        .concurrencyLevel(SEG_SIZE)
                                        .removalListener(new RemovalListener<Pair<String, String>, ProjectMisc>() {
                                            @Override
                                            public void onRemoval(RemovalNotification<Pair<String, String>, ProjectMisc> n) {
                                                if (n.getValue().isUpdated()) {
                                                    final int index = n.getKey().hashCode() & CACHE_MASK;
                                                    miscLocks[index].lock();
                                                    try {
                                                        writeProjectMisc(n.getValue().getProject(), n.getValue());
                                                    } catch (Exception e) {
                                                        LOG.error(e.getMessage(), e);
                                                    } finally {
                                                        miscLocks[index].unlock();
                                                    }
                                                }
                                            }
                                        }).build();
        }

        vfsSubscriber = new EventSubscriber<VirtualFileEvent>() {
            @Override
            public void onEvent(VirtualFileEvent event) {
                final String workspace = event.getWorkspaceId();
                final String path = event.getPath();
                if (path.endsWith(Constants.CODENVY_MISC_FILE_RELATIVE_PATH)) {
                    return;
                }
                switch (event.getType()) {
                    case CONTENT_UPDATED:
                    case CREATED:
                    case DELETED:
                    case MOVED:
                    case RENAMED: {
                        final int length = path.length();
                        for (int i = 1; i < length && (i = path.indexOf('/', i)) > 0; i++) {
                            final String projectPath = path.substring(0, i);
                            try {
                                final Project project = getProject(workspace, projectPath);
                                if (project != null) {
                                    getProjectMisc(project).setModificationDate(System.currentTimeMillis());
                                }
                            } catch (Exception e) {
                                LOG.error(e.getMessage(), e);
                            }
                        }
                        break;
                    }
                }
            }
        };
    }

