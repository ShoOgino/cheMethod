    /**
     * initializes all the attributes defined in myType and its ancestors recursively
     *
     * @param myType
     * @param typeId
     *         - temporary type for recursive (started with initial type)
     * @throws ProjectTypeConstraintException
     */
    private final void initRecursively(ProjectTypeDef myType, String typeId)
            throws ProjectTypeConstraintException {

        ProjectTypeDef type = validatedData.get(typeId);

        for (String supertypeId : type.getParents()) {

            myType.addAncestor(supertypeId);

            ProjectTypeDef supertype = validatedData.get(supertypeId);

            for (Attribute attr : supertype.getAttributes()) {

                // check attribute names
                for (Attribute attr2 : myType.getAttributes()) {
                    if (attr.getName().equals(attr2.getName()) && !attr.getProjectType().equals(attr2.getProjectType())) {
                        throw new ProjectTypeConstraintException("Attribute name conflict. Project type " +
                                                                 myType.getId() + " could not be registered as attribute declaration " +
                                                                 attr.getName() +
                                                                 " is duplicated in its ancestor(s).");
                    }
                }
                myType.addAttributeDefinition(attr);
            }
            initRecursively(myType, supertypeId);
        }

    }

