    @ApiOperation(value = "Get project modules",
                  notes = "Get project modules. Roles allowed: system/admin, system/manager.",
                  response = ProjectConfigDto.class,
                  responseContainer = "List",
                  position = 4)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 403, message = "User not authorized to call this operation"),
            @ApiResponse(code = 404, message = "Not found"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @GET
    @Path("/modules/{path:.*}")
    @Produces(MediaType.APPLICATION_JSON)
    public List<ProjectConfig> getModules(@ApiParam(value = "Workspace ID", required = true)
                                          @PathParam("ws-id") String workspace,
                                          @ApiParam(value = "Path to a project", required = true)
                                          @PathParam("path") String path)
            throws NotFoundException, ForbiddenException, ServerException, ConflictException, IOException {

        Project parent = projectManager.getProject(workspace, path);
        if (parent == null) {
            throw new NotFoundException("Project " + path + " was not found");
        }
        return projectManager.getProjectModules(parent).stream().collect(Collectors.toCollection(LinkedList::new));
    }

