    @Override
    public ProjectConfigDto addModule(String workspaceId,
                                      String pathToParent,
                                      ProjectConfigDto createdModuleDto,
                                      Map<String, String> options) throws ConflictException,
                                                                          ForbiddenException,
                                                                          ServerException,
                                                                          NotFoundException {
        if (createdModuleDto == null) {
            throw new ConflictException("Module not found and module configuration is not defined");
        }

        String[] pathToParentParts = pathToParent.split(String.format("(?=[%s])", File.separator));

        String pathToProject = pathToParentParts[0];

        ProjectConfigDto projectFromWorkspaceDto = getProjectFromWorkspace(workspaceId, pathToProject);

        if (projectFromWorkspaceDto == null) {
            throw new NotFoundException("Parent Project not found " + pathToProject);
        }

        String absolutePathToParent = pathToParent.startsWith("/") ? pathToParent : '/' + pathToParent;

        ProjectConfigDto parentModule = projectFromWorkspaceDto.findModule(absolutePathToParent);

        if (parentModule == null) {
            parentModule = projectFromWorkspaceDto;
        }

        parentModule.getModules().add(createdModuleDto);

        VirtualFileEntry parentFolder = getProjectsRoot(workspaceId).getChild(absolutePathToParent);

        if (parentFolder == null) {
            throw new NotFoundException("Parent folder not found for this node " + pathToParent);
        }

        String createdModuleName = createdModuleDto.getName();

        VirtualFileEntry moduleFolder = ((FolderEntry)parentFolder).getChild(createdModuleName);

        if (moduleFolder == null) {
            moduleFolder = ((FolderEntry)parentFolder).createFolder(createdModuleName);
        }

        Project createdModule = new Project((FolderEntry)moduleFolder, this);

        Map<String, AttributeValue> projectAttributes = new HashMap<>();

        Map<String, List<String>> attributes = createdModuleDto.getAttributes();

        if (attributes != null) {
            for (String key : attributes.keySet()) {
                projectAttributes.put(key, new AttributeValue(attributes.get(key)));
            }
        }

        CreateProjectHandler generator = this.getHandlers().getCreateProjectHandler(createdModuleDto.getType());

        if (generator != null) {
            generator.onCreateProject(createdModule.getBaseFolder(), projectAttributes, options);
        }

        ProjectMisc misc = createdModule.getMisc();
        misc.setCreationDate(System.currentTimeMillis());
        misc.save(); // Important to save misc!!

        CreateModuleHandler moduleHandler = this.getHandlers().getCreateModuleHandler(createdModuleDto.getType());

        if (moduleHandler != null) {
            moduleHandler.onCreateModule((FolderEntry)parentFolder,
                                         createdModule.getPath(),
                                         createdModuleDto.getType(),
                                         options);
        }

        createdModuleDto.setPath(createdModule.getPath());

        AttributeFilter attributeFilter = filterProvider.get();

        attributeFilter.addPersistedAttributesToProject(createdModuleDto, (FolderEntry)moduleFolder);

        updateProjectInWorkspace(workspaceId, projectFromWorkspaceDto);

        attributeFilter.addRuntimeAttributesToProject(createdModuleDto, (FolderEntry)moduleFolder);

        return createdModuleDto;
    }

