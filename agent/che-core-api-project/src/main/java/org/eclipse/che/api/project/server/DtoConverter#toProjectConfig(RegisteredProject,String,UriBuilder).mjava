    /**
     * The method tries to provide as much as possible information about project.If get error then save information about error
     * with 'problems' field in ProjectConfigDto.
     *
     * @param project
     *         project from which we need get information
     * @param serviceUriBuilder
     *         service for building URI
     * @return an instance of {@link ProjectConfigDto}
     */
    public static ProjectConfigDto toProjectConfig(RegisteredProject project, String workspace, UriBuilder serviceUriBuilder) {
        ProjectConfigDto projectConfigDto = newDto(ProjectConfigDto.class);

        projectConfigDto.withName(project.getName())
                        .withPath(project.getPath())
                        .withDescription(project.getDescription());


        List <String> mixins = project.getMixinTypes().keySet().stream().collect(Collectors.toList());
        projectConfigDto.withMixins(mixins);

        projectConfigDto.withAttributes(project.getAttributes());
        projectConfigDto.withType(project.getProjectType().getId());
        projectConfigDto.withSource(toSourceDto(project.getSource()));

        for (RegisteredProject.Problem p : project.getProblems()) {
            ProjectProblemDto projectProblem = newDto(ProjectProblemDto.class).withCode(p.code).withMessage(p.message);
            projectConfigDto.getProblems().add(projectProblem);
        }


        if (serviceUriBuilder != null) {
            projectConfigDto.withLinks(generateProjectLinks(project, workspace, serviceUriBuilder));
        }

        return projectConfigDto;
    }

