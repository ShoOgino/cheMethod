    // ProjectSuggestion
    public List<SourceEstimation> resolveSources(String workspace, String path, boolean transientOnly)
            throws ServerException, ForbiddenException, NotFoundException, ProjectTypeConstraintException {
        final List<SourceEstimation> estimations = new ArrayList<>();
        boolean isPresentPrimaryType = false;
        for (ProjectType type : projectTypeRegistry.getProjectTypes(ProjectTypeRegistry.CHILD_TO_PARENT_COMPARATOR)) {
            if (transientOnly && type.isPersisted()) {
                continue;
            }

            final HashMap<String, List<String>> attributes = new HashMap<>();

            try {
                for (Map.Entry<String, AttributeValue> attr : estimateProject(workspace, path, type.getId()).entrySet()) {
                    attributes.put(attr.getKey(), attr.getValue().getList());
                }

                if (!attributes.isEmpty()) {
                    estimations.add(newDto(SourceEstimation.class).withType(type.getId()).withAttributes(attributes));
                    ProjectType projectType = projectTypeRegistry.getProjectType(type.getId());
                    if (projectType.isPrimaryable()) {
                        isPresentPrimaryType = true;
                    }
                }
            } catch (ValueStorageException e) {
                LOG.warn(e.getLocalizedMessage(), e);
            }
        }
        if (!isPresentPrimaryType) {
            estimations.add(newDto(SourceEstimation.class).withType(BaseProjectType.ID));
        }

        return estimations;
    }

