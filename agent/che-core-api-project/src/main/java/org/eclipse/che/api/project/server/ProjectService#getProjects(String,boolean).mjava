    @ApiOperation(value = "Gets list of projects in root folder",
                  response = ProjectConfigDto.class,
                  responseContainer = "List",
                  position = 1)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 500, message = "Server error")})
    @GenerateLink(rel = Constants.LINK_REL_GET_PROJECTS)
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public List<ProjectConfigDto> getProjects(@ApiParam("ID of workspace to get projects")
                                              @PathParam("ws-id") String workspace,
                                              @ApiParam("Include project attributes")
                                              @QueryParam("includeAttributes")
                                              @DefaultValue("false") boolean includeAttributes) throws IOException,
                                                                                                       ServerException,
                                                                                                       ConflictException,
                                                                                                       ForbiddenException,
                                                                                                       NotFoundException {
        List<Project> projects = projectManager.getProjects(workspace);

        List<ProjectConfigDto> projectConfigs = new ArrayList<>(projects.size());

        for (Project project : projects) {
            try {
                projectConfigs.add(toProjectConfig(project, getServiceContext().getServiceUriBuilder()));
            } catch (RuntimeException exception) {
                // Ignore known error for single project.
                // In result we won't have them in explorer tree but at least 'bad' projects won't prevent to show 'good' projects.
                LOG.warn(exception.getMessage(), exception);

                NotValidProject notValidProject = new NotValidProject(project.getBaseFolder(), projectManager);
                projectConfigs.add(toProjectConfig(notValidProject, getServiceContext().getServiceUriBuilder()));
            }
        }

        addNotSynchronizedProjectsFromVFS(projectConfigs, workspace);
        addNotSynchronizedProjectsFromWorkspace(projectConfigs, workspace);

        return projectConfigs;
    }

