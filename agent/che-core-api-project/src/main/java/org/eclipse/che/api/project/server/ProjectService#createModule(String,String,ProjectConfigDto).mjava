    @ApiOperation(value = "Create a new module",
                  notes = "Create a new module in a specified project",
                  response = ProjectConfigDto.class,
                  position = 5)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "OK"),
            @ApiResponse(code = 403, message = "User not authorized to call this operation"),
            @ApiResponse(code = 404, message = "Not found"),
            @ApiResponse(code = 409, message = "Module already exists"),
            @ApiResponse(code = 500, message = "Internal Server Error")})
    @POST
    @Path("/{path:.*}")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public ProjectConfigDto createModule(@ApiParam(value = "Workspace ID", required = true)
                                         @PathParam("ws-id") String workspace,
                                         @ApiParam(value = "Path to a target directory", required = true)
                                         @PathParam("path") String pathToParent,
                                         ProjectConfigDto moduleConfigDto) throws NotFoundException,
                                                                                  ConflictException,
                                                                                  ForbiddenException,
                                                                                  ServerException {
        filesBuffer.addToBuffer(moduleConfigDto.getName());

        ProjectConfigDto module = projectManager.addModule(workspace,
                                                           pathToParent,
                                                           moduleConfigDto,
                                                           null);

        eventService.publish(new ProjectCreatedEvent(workspace, module.getPath()));

        logProjectCreatedEvent(module.getName(), module.getType());

        return module;
    }

