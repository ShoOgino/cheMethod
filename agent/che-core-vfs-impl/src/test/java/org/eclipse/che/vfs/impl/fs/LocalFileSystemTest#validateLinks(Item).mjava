    protected void validateLinks(Item item) throws Exception {
        Map<String, Link> links = item.getLinks();

        if (links.size() == 0) {
            fail("Links not found. ");
        }

        Link link = links.get(Link.REL_SELF);
        assertNotNull(String.format("'%s' link not found. ", Link.REL_SELF), link);
        assertEquals(MediaType.APPLICATION_JSON, link.getType());
        assertEquals(Link.REL_SELF, link.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("item").path(item.getId()).build().toString(), link.getHref());

        link = links.get(Link.REL_PARENT);
        if (item.getParentId() == null) {
            assertNull(String.format("'%s' link not allowed for root folder. ", Link.REL_PARENT), link);
        } else {
            assertNotNull(String.format("'%s' link not found. ", Link.REL_PARENT), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_PARENT, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("item").path(item.getParentId()).build().toString(),
                         link.getHref());
        }

        link = links.get(Link.REL_ACL);
        assertNotNull(String.format("'%s' link not found. ", Link.REL_ACL), link);
        assertEquals(MediaType.APPLICATION_JSON, link.getType());
        assertEquals(Link.REL_ACL, link.getRel());
        assertEquals(UriBuilder.fromPath(SERVICE_URI).path("acl").path(item.getId()).build().toString(), link.getHref());

        link = links.get(Link.REL_DELETE);
        if (item.getParentId() == null) {
            assertNull(String.format("'%s' link not allowed for root folder. ", Link.REL_DELETE), link);
        } else {
            assertNotNull(String.format("'%s' link not found. ", Link.REL_DELETE), link);
            assertEquals(null, link.getType());
            assertEquals(Link.REL_DELETE, link.getRel());
            if (item.getItemType() == ItemType.FILE && ((File)item).isLocked()) {
                assertEquals(
                        UriBuilder.fromPath(SERVICE_URI).path("delete").path(item.getId())
                                  .queryParam("lockToken", "[lockToken]").build().toString(),
                        link.getHref());
            } else {
                assertEquals(UriBuilder.fromPath(SERVICE_URI).path("delete").path(item.getId()).build().toString(),
                             link.getHref());
            }
        }

        link = links.get(Link.REL_COPY);
        if (item.getParentId() == null) {
            assertNull(String.format("'%s' link not allowed for root folder. ", Link.REL_COPY), link);
        } else {
            assertNotNull(String.format("'%s' link not found. ", Link.REL_COPY), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_COPY, link.getRel());
            assertEquals(
                    UriBuilder.fromPath(SERVICE_URI).path("copy").path(item.getId()).queryParam("parentId", "[parentId]")
                              .build().toString(),
                    link.getHref());
        }

        link = links.get(Link.REL_MOVE);
        if (item.getParentId() == null) {
            assertNull(String.format("'%s' link not allowed for root folder. ", Link.REL_MOVE), link);
        } else {
            assertNotNull(String.format("'%s' link not found. ", Link.REL_MOVE), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_MOVE, link.getRel());
            if (item.getItemType() == ItemType.FILE && ((File)item).isLocked()) {
                assertEquals(
                        UriBuilder.fromPath(SERVICE_URI).path("move").path(item.getId()).queryParam("parentId", "[parentId]")
                                  .queryParam("lockToken", "[lockToken]").build().toString(),
                        link.getHref());
            } else {
                assertEquals(
                        UriBuilder.fromPath(SERVICE_URI).path("move").path(item.getId()).queryParam("parentId", "[parentId]")
                                  .build().toString(),
                        link.getHref());
            }
        }

        link = links.get(Link.REL_RENAME);
        if (item.getParentId() == null) {
            assertNull(String.format("'%s' link not allowed for root folder. ", Link.REL_RENAME), link);
        } else {
            assertNotNull(String.format("'%s' link not found. ", Link.REL_RENAME), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_RENAME, link.getRel());
            if (item.getItemType() == ItemType.FILE && ((File)item).isLocked()) {
                assertEquals(
                        UriBuilder.fromPath(SERVICE_URI).path("rename").path(item.getId()).queryParam("newname", "[newname]")
                                  .queryParam("mediaType", "[mediaType]").queryParam("lockToken", "[lockToken]").build().toString(),
                        link.getHref());
            } else {
                assertEquals(
                        UriBuilder.fromPath(SERVICE_URI).path("rename").path(item.getId()).queryParam("newname", "[newname]")
                                  .queryParam("mediaType", "[mediaType]").build().toString(),
                        link.getHref());
            }
        }

        ItemType type = item.getItemType();
        if (type == ItemType.FILE) {
            File file = (File)item;

            link = links.get(Link.REL_CONTENT);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_CONTENT), link);
            assertEquals(file.getMimeType(), link.getType());
            assertEquals(Link.REL_CONTENT, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("content").path(file.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_DOWNLOAD_FILE);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_DOWNLOAD_FILE), link);
            assertEquals(file.getMimeType(), link.getType());
            assertEquals(Link.REL_DOWNLOAD_FILE, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("downloadfile").path(file.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_CONTENT_BY_PATH);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_CONTENT_BY_PATH), link);
            assertEquals(file.getMimeType(), link.getType());
            assertEquals(Link.REL_CONTENT_BY_PATH, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("contentbypath").path(file.getPath().substring(1)).build()
                                   .toString(), link.getHref());

            link = links.get(Link.REL_CURRENT_VERSION);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_CURRENT_VERSION), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_CURRENT_VERSION, link.getRel());
            String expectedCurrentVersionId = file.getId();
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("item").path(expectedCurrentVersionId).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_VERSION_HISTORY);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_VERSION_HISTORY), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_VERSION_HISTORY, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("version-history").path(file.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_LOCK);
            if (file.isLocked()) {
                assertNull(String.format("'%s' link not allowed for locked files. ", Link.REL_LOCK), link);
                link = links.get(Link.REL_UNLOCK);
                assertEquals(null, link.getType());
                assertEquals(Link.REL_UNLOCK, link.getRel());
                assertEquals(
                        UriBuilder.fromPath(SERVICE_URI).path("unlock").path(file.getId())
                                  .queryParam("lockToken", "[lockToken]").build().toString(),
                        link.getHref());
            } else {
                assertNotNull(String.format("'%s' link not found. ", Link.REL_LOCK), link);
                assertEquals(MediaType.APPLICATION_JSON, link.getType());
                assertEquals(Link.REL_LOCK, link.getRel());
                assertEquals(UriBuilder.fromPath(SERVICE_URI).path("lock").path(file.getId()).queryParam("timeout", "[timeout]").build()
                                       .toString(), link.getHref());
                link = links.get(Link.REL_UNLOCK);
                assertNull(String.format("'%s' link not allowed for unlocked files. ", Link.REL_UNLOCK), link);
            }
        } else {
            link = links.get(Link.REL_CHILDREN);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_CHILDREN), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_CHILDREN, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("children").path(item.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_CREATE_FOLDER);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_CREATE_FOLDER), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_CREATE_FOLDER, link.getRel());
            assertEquals(
                    UriBuilder.fromPath(SERVICE_URI).path("folder").path(item.getId()).queryParam("name", "[name]")
                              .build().toString(),
                    link.getHref());

            link = links.get(Link.REL_CREATE_FILE);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_CREATE_FILE), link);
            assertEquals(MediaType.APPLICATION_JSON, link.getType());
            assertEquals(Link.REL_CREATE_FILE, link.getRel());
            assertEquals(
                    UriBuilder.fromPath(SERVICE_URI).path("file").path(item.getId()).queryParam("name", "[name]")
                              .build().toString(),
                    link.getHref());

            link = links.get(Link.REL_UPLOAD_FILE);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_UPLOAD_FILE), link);
            assertEquals(MediaType.TEXT_HTML, link.getType());
            assertEquals(Link.REL_UPLOAD_FILE, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("uploadfile").path(item.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_EXPORT);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_EXPORT), link);
            assertEquals(ExtMediaType.APPLICATION_ZIP, link.getType());
            assertEquals(Link.REL_EXPORT, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("export").path(item.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_IMPORT);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_IMPORT), link);
            assertEquals(ExtMediaType.APPLICATION_ZIP, link.getType());
            assertEquals(Link.REL_IMPORT, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("import").path(item.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_DOWNLOAD_ZIP);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_DOWNLOAD_ZIP), link);
            assertEquals(ExtMediaType.APPLICATION_ZIP, link.getType());
            assertEquals(Link.REL_DOWNLOAD_ZIP, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("downloadzip").path(item.getId()).build().toString(),
                         link.getHref());

            link = links.get(Link.REL_UPLOAD_ZIP);
            assertNotNull(String.format("'%s' link not found. ", Link.REL_UPLOAD_ZIP), link);
            assertEquals(MediaType.TEXT_HTML, link.getType());
            assertEquals(Link.REL_UPLOAD_ZIP, link.getRel());
            assertEquals(UriBuilder.fromPath(SERVICE_URI).path("uploadzip").path(item.getId()).build().toString(),
                         link.getHref());
        }
    }

