    VirtualFileImpl createFile(VirtualFileImpl parent, String name, InputStream content)
            throws ForbiddenException, ConflictException, ServerException {
        checkName(name);

        if (!parent.isFolder()) {
            throw new ForbiddenException("Unable create new file. Item specified as parent is not a folder. ");
        }

        final Path newPath = parent.getVirtualFilePath().newPath(name);
        if (systemFilter.accept(workspaceId, newPath)) {
            // Don't check permissions when create file "misc.xml" in folder ".codenvy". Dirty huck :( but seems simplest solution for now.
            // Need to work with 'misc.xml' independently to user.
            if (!hasPermission(parent, BasicPermissions.WRITE.value(), true)) {
                throw new ForbiddenException(String.format("Unable create new file in '%s'. Operation not permitted. ", parent.getPath()));
            }
        }
        final java.io.File newIoFile = new java.io.File(ioRoot, toIoPath(newPath));
        try {
            if (!newIoFile.createNewFile()) { // atomic
                throw new ConflictException(String.format("Item '%s' already exists. ", newPath));
            }
        } catch (IOException e) {
            String msg = String.format("Unable create new file '%s'. ", newPath);
            LOG.error(msg + e.getMessage(), e); // More details in log but do not show internal error to caller.
            throw new ServerException(msg);
        }

        final VirtualFileImpl newVirtualFile = new VirtualFileImpl(newIoFile, newPath, pathToId(newPath), this);
        // Update content if any.
        if (content != null) {
            doUpdateContent(newVirtualFile, content);
        }

        if (searcherProvider != null) {
            try {
                searcherProvider.getSearcher(this, true).add(newVirtualFile);
            } catch (ServerException e) {
                LOG.error(e.getMessage(), e);
            }
        }
        eventService.publish(new CreateEvent(workspaceId, newVirtualFile.getPath(), false));
        return newVirtualFile;
    }

