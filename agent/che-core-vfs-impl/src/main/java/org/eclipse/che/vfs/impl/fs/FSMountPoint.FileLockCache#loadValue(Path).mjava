        @Override
        protected FileLock loadValue(Path key) {
            DataInputStream dis = null;

            try {
                final Path lockFilePath = getLockFilePath(key);
                final java.io.File lockIoFile = new java.io.File(ioRoot, toIoPath(lockFilePath));
                if (lockIoFile.exists()) {
                    final PathLockFactory.PathLock lockFilePathLock =
                            pathLockFactory.getLock(lockFilePath, false).acquire(LOCK_FILE_TIMEOUT);
                    try {
                        dis = new DataInputStream(new BufferedInputStream(new FileInputStream(lockIoFile)));
                        return locksSerializer.read(dis);
                    } finally {
                        lockFilePathLock.release();
                    }
                }
                return NO_LOCK;
            } catch (IOException e) {
                String msg = String.format("Unable read lock for '%s'. ", key);
                LOG.error(msg + e.getMessage(), e); // More details in log but do not show internal error to caller.
                throw new RuntimeException(msg);
            } finally {
                closeQuietly(dis);
            }
        }

