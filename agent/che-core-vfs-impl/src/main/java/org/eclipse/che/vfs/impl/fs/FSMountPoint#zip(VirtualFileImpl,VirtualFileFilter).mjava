    ContentStream zip(VirtualFileImpl virtualFile, VirtualFileFilter filter) throws ForbiddenException, ServerException {
        if (!virtualFile.isFolder()) {
            throw new ForbiddenException(String.format("Unable export to zip. Item '%s' is not a folder. ", virtualFile.getPath()));
        }
        java.io.File zipFile = null;
        FileOutputStream out = null;
        try {
            zipFile = java.io.File.createTempFile("export", ".zip");
            out = new FileOutputStream(zipFile);
            final ZipOutputStream zipOut = new ZipOutputStream(out);
            final LinkedList<VirtualFile> q = new LinkedList<>();
            q.add(virtualFile);
            final int zipEntryNameTrim = virtualFile.getVirtualFilePath().length();
            final byte[] buff = new byte[COPY_BUFFER_SIZE];
            while (!q.isEmpty()) {
                for (VirtualFile current : doGetChildren((VirtualFileImpl)q.pop(), SERVICE_GIT_DIR_FILTER)) {
                    // (1) Check filter.
                    // (2) Check permission directly for current file only.
                    // We already know parent accessible for current user otherwise we should not be here.
                    // Ignore item if don't have permission to read it.
                    if (filter.accept(current) && hasPermission((VirtualFileImpl)current, BasicPermissions.READ.value(), false)) {
                        final String zipEntryName = current.getVirtualFilePath().subPath(zipEntryNameTrim).toString().substring(1);
                        if (current.isFile()) {
                            final ZipEntry zipEntry = new ZipEntry(zipEntryName);
                            zipOut.putNextEntry(zipEntry);
                            InputStream in = null;
                            final PathLockFactory.PathLock lock =
                                    pathLockFactory.getLock(current.getVirtualFilePath(), false).acquire(LOCK_FILE_TIMEOUT);
                            try {
                                zipEntry.setTime(virtualFile.getLastModificationDate());
                                in = new FileInputStream(((VirtualFileImpl)current).getIoFile());
                                int r;
                                while ((r = in.read(buff)) != -1) {
                                    zipOut.write(buff, 0, r);
                                }
                            } finally {
                                closeQuietly(in);
                                lock.release();
                            }
                            zipOut.closeEntry();
                        } else if (current.isFolder()) {
                            final ZipEntry zipEntry = new ZipEntry(zipEntryName + '/');
                            zipEntry.setTime(0);
                            zipOut.putNextEntry(zipEntry);
                            q.add(current);
                            zipOut.closeEntry();
                        }
                    }
                }
            }
            closeQuietly(zipOut);
            final String name = virtualFile.getName() + ".zip";
            return new ContentStream(name, new DeleteOnCloseFileInputStream(zipFile), ExtMediaType.APPLICATION_ZIP, zipFile.length(), new Date());
        } catch (IOException | RuntimeException ioe) {
            if (zipFile != null) {
                zipFile.delete();
            }
            throw new ServerException(ioe.getMessage(), ioe);
        } finally {
            closeQuietly(out);
        }
    }

