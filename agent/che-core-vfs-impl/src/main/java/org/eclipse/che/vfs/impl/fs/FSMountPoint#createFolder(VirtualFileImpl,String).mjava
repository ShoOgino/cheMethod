    VirtualFileImpl createFolder(VirtualFileImpl parent, String name) throws ForbiddenException, ConflictException, ServerException {
        checkName(name);

        if (!parent.isFolder()) {
            throw new ForbiddenException("Unable create folder. Item specified as parent is not a folder. ");
        }

        if (!hasPermission(parent, BasicPermissions.WRITE.value(), true)) {
            throw new ForbiddenException(
                    String.format("Unable create new folder in '%s'. Operation not permitted. ", parent.getPath()));
        }
        // Name may be hierarchical, e.g. folder1/folder2/folder3.
        // Some folder in hierarchy may already exists but at least one folder must be created.
        // If no one folder created then ItemAlreadyExistException is thrown.
        Path currentPath = parent.getVirtualFilePath();
        Path newPath = null;
        java.io.File newIoFile = null;
        for (String element : Path.fromString(name).elements()) {
            currentPath = currentPath.newPath(element);
            java.io.File currentIoFile = new java.io.File(ioRoot, toIoPath(currentPath));
            if (currentIoFile.mkdir()) {
                newPath = currentPath;
                newIoFile = currentIoFile;
            }
        }

        if (newPath == null) {
            // Folder or folder hierarchy already exists.
            throw new ConflictException(String.format("Item '%s' already exists. ", parent.getVirtualFilePath().newPath(name)));
        }

        // Return first created folder, e.g. assume we need create: folder1/folder2/folder3 in specified folder.
        // If folder1 already exists then return folder2 as first created in hierarchy.
        final VirtualFileImpl newVirtualFile = new VirtualFileImpl(newIoFile, newPath, pathToId(newPath), this);
        eventService.publish(new CreateEvent(workspaceId, newVirtualFile.getPath(), true));
        return newVirtualFile;
    }

