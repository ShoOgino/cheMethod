    @Test(dataProvider = "GitConnectionFactory", dataProviderClass = GitConnectionFactoryProvider.class)
    public void testSimpleFetch(GitConnectionFactory connectionFactory)
            throws ServerException, IOException, UnauthorizedException, URISyntaxException {

        //given
        GitConnection connection = connectToInitializedGitRepository(connectionFactory, repository);
        GitConnection fetchConnection = connectionFactory.getConnection(fetchTestRepo.getAbsolutePath());

        addFile(connection, "README", "readme content");
        connection.add(newDto(AddRequest.class).withFilepattern(Arrays.asList(".")));
        connection.commit(newDto(CommitRequest.class).withMessage("fetch test"));
        //clone default repo into fetchRepo
        fetchConnection.clone(newDto(CloneRequest.class).withRemoteUri(connection.getWorkingDir().getAbsolutePath())
                                                        .withWorkingDir(fetchConnection.getWorkingDir().getAbsolutePath()));

        //add new File into defaultRepository
        addFile(connection, "newfile1", "newfile1 content");
        //add file to index and make commit
        connection.add(newDto(AddRequest.class).withFilepattern(Arrays.asList(".")));
        connection.commit(newDto(CommitRequest.class).withMessage("fetch test"));

        //when
        fetchConnection.fetch(newDto(FetchRequest.class).withRemote(repository.getAbsolutePath()));

        //then
        //make merge with FETCH_HEAD
        fetchConnection.merge(newDto(MergeRequest.class).withCommit("FETCH_HEAD"));
        assertTrue(new File(fetchTestRepo, "newfile1").exists());
    }

