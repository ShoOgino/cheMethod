    @Consumes({MediaType.APPLICATION_FORM_URLENCODED})
    @Override
    public ItemList search(MultivaluedMap<String, String> query,
                           @DefaultValue("-1") @QueryParam("maxItems") int maxItems,
                           @QueryParam("skipCount") int skipCount,
                           @DefaultValue(PropertyFilter.ALL) @QueryParam("propertyFilter") PropertyFilter propertyFilter)
            throws ConflictException, ServerException {
        if (searcherProvider != null) {
            if (skipCount < 0) {
                throw new ConflictException("'skipCount' parameter is negative. ");
            }
            final QueryExpression expr = new QueryExpression()
                    .setPath(query.getFirst("path"))
                    .setName(query.getFirst("name"))
                    .setMediaType(query.getFirst("mediaType"))
                    .setText(query.getFirst("text"))
                    .setSkipCount(skipCount)
                    .setMaxItems(maxItems);

            final String[] result = searcherProvider.getSearcher(mountPoint, true).search(expr);
            if (skipCount > 0) {
                if (skipCount > result.length) {
                    throw new ConflictException("'skipCount' parameter is greater then total number of items. ");
                }
            }
            final int length = maxItems > 0 ? Math.min(result.length, maxItems) : result.length;
            final List<Item> items = new ArrayList<>(length);
            for (int i = skipCount; i < length; i++) {
                String path = result[i];
                try {
                    items.add(fromVirtualFile(mountPoint.getVirtualFile(path), false, propertyFilter));
                } catch (NotFoundException | ForbiddenException ignored) {
                }
            }

            return DtoFactory.getInstance().createDto(ItemList.class).withItems(items).withNumItems(result.length)
                             .withHasMoreItems(length < result.length);
        }
        throw new ServerException("Not supported. ");
    }

