    @Override
    public void delete(final String lockToken) throws ForbiddenException, ServerException {
        checkExist();
        boolean isFile = isFile();
        if (isRoot()) {
            throw new ForbiddenException("Unable delete root folder. ");
        }
        if (!hasPermission(BasicPermissions.WRITE.value(), true)) {
            throw new ForbiddenException(String.format("We were unable to delete an item '%s'." +
                                                       " You do not have the correct permissions to complete this operation.", getPath()));
        }
        final String myPath = getPath();
        final boolean folder = isFolder();
        if (folder) {
            final ValueHolder<Exception> errorHolder = new ValueHolder<>();
            final List<VirtualFile> toDelete = new ArrayList<>();
            accept(new VirtualFileVisitor() {
                @Override
                public void visit(VirtualFile virtualFile) {
                    try {
                        if (virtualFile.isFolder()) {
                            for (VirtualFile childVirtualFile : doGetChildren(virtualFile)) {
                                childVirtualFile.accept(this);
                            }
                        }
                        if (!((MemoryVirtualFile)virtualFile).hasPermission(BasicPermissions.WRITE.value(), false)) {
                            throw new ForbiddenException(
                                    String.format("We were unable to delete an item '%s'." +
                                                  " You do not have the correct permissions to complete this operation.",
                                                  virtualFile.getPath()));
                        }

                        if (virtualFile.isFile() && virtualFile.isLocked()) {
                            throw new ForbiddenException(String.format("Unable delete item '%s'. Child item '%s' is locked. ",
                                                                       getPath(), virtualFile.getPath()));
                        }
                        toDelete.add(virtualFile);
                    } catch (ServerException | ForbiddenException e) {
                        errorHolder.set(e);
                    }
                }
            });
            final Exception error = errorHolder.get();
            if (error != null) {
                if (error instanceof ForbiddenException) {
                    throw (ForbiddenException)error;
                } else if (error instanceof ServerException) {
                    throw (ServerException)error;
                } else {
                    throw new ServerException(error.getMessage(), error);
                }
            }
            for (VirtualFile virtualFile : toDelete) {
                mountPoint.deleteItem(virtualFile.getId());
                ((MemoryVirtualFile)virtualFile).exists = false;
            }
        } else {
            if (!validateLockTokenIfLocked(lockToken)) {
                throw new ForbiddenException(String.format("Unable delete item '%s'. Item is locked. ", getPath()));
            }
            mountPoint.deleteItem(getId());
        }
        parent.children.remove(name);
        exists = false;
        parent = null;
        path = null;
        SearcherProvider searcherProvider = mountPoint.getSearcherProvider();
        if (searcherProvider != null) {
            try {
                searcherProvider.getSearcher(mountPoint, true).delete(myPath, isFile);
            } catch (ServerException e) {
                LOG.error(e.getMessage(), e);
            }
        }
        mountPoint.getEventService().publish(new DeleteEvent(mountPoint.getWorkspaceId(), myPath, folder));
    }

