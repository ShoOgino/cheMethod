    @Path("tree/{id}")
    @Override
    public ItemNode getTree(@PathParam("id") String folderId,
                            @DefaultValue("-1") @QueryParam("depth") int depth,
                            @DefaultValue("false") @QueryParam("includePermissions") Boolean includePermissions,
                            @DefaultValue(PropertyFilter.NONE) @QueryParam("propertyFilter") PropertyFilter propertyFilter)
            throws NotFoundException, ForbiddenException, ServerException {
        final VirtualFile virtualFile = mountPoint.getVirtualFileById(folderId);
        if (!virtualFile.isFolder()) {
            throw new ForbiddenException(String.format("Unable get tree. Item '%s' is not a folder. ", virtualFile.getPath()));
        }
        return DtoFactory.getInstance().createDto(ItemNode.class)
                         .withItem(fromVirtualFile(virtualFile, includePermissions, propertyFilter))
                         .withChildren(getTreeLevel(virtualFile, depth, includePermissions, propertyFilter));
    }

