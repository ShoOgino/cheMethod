    @Override
    public void unzip(InputStream zipped, boolean overwrite, int stripNumber) throws ForbiddenException, ServerException {
        checkExist();
        if (!hasPermission(BasicPermissions.WRITE.value(), true)) {
            throw new ForbiddenException(String.format("We were unable to import a ZIP file to '%s' as part of the import." +
                                                       " You do not have the correct permissions to complete this operation.", getPath()));
        }

        ZipInputStream zip = null;
        try {
            final ZipContent zipContent = ZipContent.newInstance(zipped);
            zip = new ZipInputStream(zipContent.zippedData);
            // Wrap zip stream to prevent close it. We can pass stream to other method and it can read content of current
            // ZipEntry but not able to close original stream of ZIPed data.
            InputStream noCloseZip = new NotClosableInputStream(zip);
            ZipEntry zipEntry;
            while ((zipEntry = zip.getNextEntry()) != null) {
                VirtualFile current = this;
                Path relPath = Path.fromString(zipEntry.getName());

                if (stripNumber > 0) {
                    int currentLevel = relPath.elements().length;
                    if (currentLevel <= stripNumber) {
                        continue;
                    }
                    relPath = relPath.subPath(stripNumber);
                }

                final String name = relPath.getName();
                if (relPath.length() > 1) {
                    // create all required parent directories
                    for (int i = 0, stop = relPath.length() - 1; i < stop; i++) {
                        MemoryVirtualFile folder = newFolder((MemoryVirtualFile)current, relPath.element(i));
                        if (((MemoryVirtualFile)current).addChild(folder)) {
                            current = folder;
                            mountPoint.putItem(folder);
                        } else {
                            current = current.getChild(relPath.element(i));
                        }
                    }
                }
                if (zipEntry.isDirectory()) {
                    if (current.getChild(name) == null) {
                        MemoryVirtualFile folder = newFolder((MemoryVirtualFile)current, name);
                        ((MemoryVirtualFile)current).addChild(folder);
                        mountPoint.putItem(folder);
                        mountPoint.getEventService().publish(new CreateEvent(mountPoint.getWorkspaceId(), folder.getPath(), true));
                    }
                } else {
                    current.getChild(name);
                    VirtualFile file = current.getChild(name);
                    if (file != null) {
                        if (file.isLocked()) {
                            throw new ForbiddenException(String.format("File '%s' already exists and locked. ", file.getPath()));
                        }
                        if (!((MemoryVirtualFile)file).hasPermission(BasicPermissions.WRITE.value(), true)) {
                            throw new ForbiddenException(
                                    String.format("We were unable to update file '%s' as part of the import." +
                                                  " You do not have the correct permissions to complete this operation.", file.getPath()));
                        }
                        if (!overwrite) {
                            throw new ForbiddenException(String.format("File '%s' already exists. ", file.getPath()));
                        }
                        file.updateContent(noCloseZip, null);
                        mountPoint.getEventService().publish(new UpdateContentEvent(mountPoint.getWorkspaceId(), file.getPath()));
                    } else {
                        file = newFile((MemoryVirtualFile)current, name, noCloseZip);
                        ((MemoryVirtualFile)current).addChild(file);
                        mountPoint.putItem((MemoryVirtualFile)file);
                        mountPoint.getEventService().publish(new CreateEvent(mountPoint.getWorkspaceId(), file.getPath(), false));
                    }
                }
                zip.closeEntry();
            }
            SearcherProvider searcherProvider = mountPoint.getSearcherProvider();
            if (searcherProvider != null) {
                try {
                    searcherProvider.getSearcher(mountPoint, true).add(this);
                } catch (ServerException e) {
                    LOG.error(e.getMessage(), e);
                }
            }

        } catch (IOException e) {
            throw new ServerException(e.getMessage(), e);
        } finally {
            if (zip != null) {
                try {
                    zip.close();
                } catch (IOException ignored) {
                }
            }
        }
    }

