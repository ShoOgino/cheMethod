    /**
     * Get list of versions of File. Even if File isn't versionable result must contain at least one item (current version of File).
     * Example of JSON response:
     * <p/>
     * <pre>
     * {
     *   "hasMoreItems":false,
     *   "items":[
     *       {
     *          "id":"/folder01/DOCUMENT01.txt",
     *          "type":"FILE",
     *          "path":"/folder01/DOCUMENT01.txt",
     *          "versionId":"1",
     *          "creationDate":1292574263440,
     *          "contentType":MediaType.TEXT_PLAIN,
     *          "length":56,
     *          "lastModificationDate":1292574263440
     *          "locked":false,
     *          "properties":[],
     *       }
     *       {
     *          "id":"/folder01/DOCUMENT01.txt",
     *          "type":"FILE",
     *          "path":"/folder01/DOCUMENT01.txt",
     *          "versionId":"2",
     *          "creationDate":1292574265640,
     *          "contentType":MediaType.TEXT_PLAIN,
     *          "length":83,
     *          "lastModificationDate":1292574265640
     *          "locked":false,
     *          "properties":[],
     *       }
     *       {
     *          "id":"/folder01/DOCUMENT01.txt",
     *          "type":"FILE",
     *          "path":"/folder01/DOCUMENT01.txt",
     *          "versionId":"current",
     *          "creationDate":1292574267340,
     *          "contentType":MediaType.TEXT_PLAIN,
     *          "length":100,
     *          "lastModificationDate":1292574268440
     *          "locked":false,
     *          "properties":[],
     *       }
     *   ],
     *   "numItems":1
     * }
     * </pre>
     *
     * @param id
     *         id of File
     * @param maxItems
     *         max number of items in response. If {@code -1} then no limit of max items in result set
     * @param skipCount
     *         the skip items. Must be equals or greater then {@code 0}
     * @param propertyFilter
     *         only properties which are accepted by filter should be included in response. See {@link PropertyFilter#accept(String)}
     * @return versions of file
     * @throws NotFoundException
     *         if {@code id} doesn't exist
     * @throws ForbiddenException
     *         if any of following conditions are met:
     *         <ul>
     *         <li>{@code id} isn't a file</li>
     *         <li>user which perform operation has no permissions</li>
     *         </ul>
     * @throws ConflictException
     *         {@code skipCount} is negative or greater then total number of items
     * @throws ServerException
     *         if any other errors occur
     */
    @GET
    @Path("version-history")
    @Produces({MediaType.APPLICATION_JSON})
    ItemList getVersions(String id, int maxItems, int skipCount, PropertyFilter propertyFilter)
            throws NotFoundException, ForbiddenException, ConflictException, ServerException;

