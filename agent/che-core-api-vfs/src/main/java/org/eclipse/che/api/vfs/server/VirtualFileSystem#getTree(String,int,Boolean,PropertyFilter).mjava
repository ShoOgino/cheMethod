    /**
     * Get tree of items starts from specified folder.
     *
     * @param folderId
     *         folder's id
     * @param depth
     *         depth for discover children if {@code -1} then get children at all levels
     * @param includePermissions
     *         if {@code true} add permissions for current user for each item. See {@link org.eclipse.che.api.vfs.shared.dto.Item#getPermissions()}.
     *         If parameter isn't set then result is implementation specific.
     * @param propertyFilter
     *         only properties which are accepted by filter should be included in response. See {@link PropertyFilter#accept(String)}
     * @return items tree started from specified folder
     * @throws NotFoundException
     *         if {@code folderId} doesn't exist
     * @throws ForbiddenException
     *         if any of following conditions are met:
     *         <ul>
     *         <li>{@code folderId} isn't a folder</li>
     *         <li>user which perform operation has no permissions</li>
     *         </ul>
     * @throws ServerException
     *         if any other errors occur
     */
    @GET
    @Path("tree")
    @Produces({MediaType.APPLICATION_JSON})
    ItemNode getTree(String folderId, int depth, Boolean includePermissions, PropertyFilter propertyFilter)
            throws NotFoundException, ForbiddenException, ServerException;

