    @Path("children/{id}")
    @Override
    public ItemList getChildren(@PathParam("id") String folderId,
                                @DefaultValue("-1") @QueryParam("maxItems") int maxItems,
                                @QueryParam("skipCount") int skipCount,
                                @QueryParam("itemType") String itemType,
                                @DefaultValue("false") @QueryParam("includePermissions") Boolean includePermissions,
                                @DefaultValue(PropertyFilter.NONE) @QueryParam("propertyFilter") PropertyFilter propertyFilter)
            throws NotFoundException, ForbiddenException, ConflictException, ServerException {
        if (skipCount < 0) {
            throw new ConflictException("'skipCount' parameter is negative. ");
        }

        final ItemType itemTypeType;
        if (itemType != null) {
            try {
                itemTypeType = ItemType.fromValue(itemType);
            } catch (IllegalArgumentException e) {
                throw new ForbiddenException(String.format("Unknown type: %s", itemType));
            }
        } else {
            itemTypeType = null;
        }

        final VirtualFile virtualFile = mountPoint.getVirtualFileById(folderId);

        if (!virtualFile.isFolder()) {
            throw new ForbiddenException(String.format("Unable get children. Item '%s' is not a folder. ", virtualFile.getPath()));
        }

        final VirtualFileFilter filter;
        if (itemTypeType == null) {
            filter = VirtualFileFilter.ALL;
        } else {
            filter = new VirtualFileFilter() {
                @Override
                public boolean accept(VirtualFile file) {
                    try {
                        return (itemTypeType == ItemType.FILE && file.isFile()) || (itemTypeType == ItemType.FOLDER && file.isFolder());
                    } catch (Exception e) {
                        throw new RuntimeException(e.getMessage(), e);
                    }
                }
            };
        }
        final LazyIterator<VirtualFile> children = virtualFile.getChildren(filter);
        try {
            if (skipCount > 0) {
                children.skip(skipCount);
            }
        } catch (NoSuchElementException nse) {
            throw new ConflictException("'skipCount' parameter is greater then total number of items. ");
        }

        final List<Item> items = new ArrayList<>();
        for (int count = 0; children.hasNext() && (maxItems < 0 || count < maxItems); count++) {
            items.add(fromVirtualFile(children.next(), includePermissions, propertyFilter));
        }
        return DtoFactory.getInstance().createDto(ItemList.class).withItems(items).withNumItems(children.size())
                         .withHasMoreItems(children.hasNext());
    }

