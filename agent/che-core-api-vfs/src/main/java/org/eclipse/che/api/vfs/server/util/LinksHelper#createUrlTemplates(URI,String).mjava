    public static Map<String, Link> createUrlTemplates(URI baseUri, String wsName) {
        final Map<String, Link> templates = new HashMap<>(16, 1.0f);
        final UriBuilder baseUriBuilder = UriBuilder.fromUri(baseUri).path(VirtualFileSystemFactory.class)
                                                    .path(VirtualFileSystemFactory.class, "getFileSystem");

        templates.put(Link.REL_ITEM,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "item", "[id]"), Link.REL_ITEM, MediaType.APPLICATION_JSON));

        templates.put(Link.REL_ITEM_BY_PATH,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "itembypath", "[path]"), Link.REL_ITEM_BY_PATH,
                                   MediaType.APPLICATION_JSON));

        templates.put(Link.REL_TREE,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "tree", "[id]"), Link.REL_TREE, MediaType.APPLICATION_JSON));

        templates.put(Link.REL_CREATE_FILE,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "file", "[parentId]", "name", "[name]"),
                                   Link.REL_CREATE_FILE, MediaType.APPLICATION_JSON));

        templates.put(Link.REL_CREATE_FOLDER,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "folder", "[parentId]", "name", "[name]"),
                                   Link.REL_CREATE_FOLDER, MediaType.APPLICATION_JSON));

        templates.put(Link.REL_COPY,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "copy", "[id]", "parentId", "[parentId]"),
                                   Link.REL_COPY, MediaType.APPLICATION_JSON));

        templates.put(Link.REL_MOVE,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "move", "[id]", "parentId", "[parentId]", "lockToken",
                                             "[lockToken]"), Link.REL_MOVE, MediaType.APPLICATION_JSON));

        templates.put(Link.REL_LOCK,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "lock", "[id]", "timeout", "[timeout]"),
                                   Link.REL_LOCK, MediaType.APPLICATION_JSON));

        templates.put(Link.REL_UNLOCK,
                      createLink(createURI(baseUriBuilder.clone(), wsName, "unlock", "[id]", "lockToken", "[lockToken]"),
                                   Link.REL_UNLOCK, null));

        templates.put(
                Link.REL_SEARCH_FORM,
                createLink(createURI(baseUriBuilder.clone(), wsName, "search", null, "maxItems", "[maxItems]", "skipCount",
                                       "[skipCount]", "propertyFilter", "[propertyFilter]"), Link.REL_SEARCH_FORM,
                             MediaType.APPLICATION_JSON));

        templates.put(
                Link.REL_SEARCH,
                createLink(createURI(baseUriBuilder.clone(), wsName, "search", null, "statement", "[statement]", "maxItems",
                                       "[maxItems]", "skipCount", "[skipCount]"), Link.REL_SEARCH, MediaType.APPLICATION_JSON));

        return templates;
    }

