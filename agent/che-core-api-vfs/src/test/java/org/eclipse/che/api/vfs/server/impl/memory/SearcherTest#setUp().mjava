    @SuppressWarnings("unchecked")
    @Override
    protected void setUp() throws Exception {
        super.setUp();
        searchTestFolder = mountPoint.getRoot().createFolder("SearcherTest");
        searcher = (LuceneSearcher)mountPoint.getSearcherProvider().getSearcher(mountPoint, true);
        searcherManager = new SearcherManager(searcher.getIndexWriter(), true, new SearcherFactory());

        VirtualFile searchTestFolder = this.searchTestFolder.createFolder("SearcherTest_Folder");
        searchTestPath = searchTestFolder.getPath();

        file1 = searchTestFolder.createFile("SearcherTest_File01.xml", new ByteArrayInputStream("to be or not to be".getBytes()))
                                .getPath();

        file2 = searchTestFolder.createFile("SearcherTest_File02.txt", new ByteArrayInputStream("to be or not to be".getBytes()))
                                .getPath();

        VirtualFile folder = searchTestFolder.createFolder("folder01");
        String folder1 = folder.getPath();
        file3 = folder.createFile("SearcherTest_File03.txt", new ByteArrayInputStream("to be or not to be".getBytes())).getPath();
        
        String file4 = searchTestFolder.createFile("SearcherTest_File04.txt", new ByteArrayInputStream("(1+1):2=1 is right".getBytes())).getPath();
        String file5 = searchTestFolder.createFile("SearcherTest_File05.txt", new ByteArrayInputStream("Copyright (c) 2012-2015 * All rights reserved".getBytes())).getPath();

        queryToResult = new Pair[16];
        // text
        queryToResult[0] = new Pair<>(new String[]{file1, file2, file3}, "text=to%20be%20or%20not%20to%20be");
        queryToResult[1] = new Pair<>(new String[]{file1, file2, file3}, "text=to%20be%20or");
        // text + media type
        queryToResult[2] = new Pair<>(new String[]{file2, file3}, "text=to%20be%20or&mediaType=text/plain");
        queryToResult[3] = new Pair<>(new String[]{file1}, "text=to%20be%20or&mediaType=text/xml");
        // text + name
        queryToResult[4] = new Pair<>(new String[]{file2}, "text=to%20be%20or&name=*File02.txt");
        queryToResult[5] = new Pair<>(new String[]{file1, file2, file3}, "text=to%20be%20or&name=SearcherTest*");
        // text + path
        queryToResult[6] = new Pair<>(new String[]{file3}, "text=to%20be%20or&path=" + folder1);
        queryToResult[7] = new Pair<>(new String[]{file1, file2, file3}, "text=to%20be%20or&path=" + searchTestPath);
        // name + media type
        queryToResult[8] = new Pair<>(new String[]{file2, file3, file4, file5}, "name=SearcherTest*&mediaType=text/plain");
        queryToResult[9] = new Pair<>(new String[]{file1}, "name=SearcherTest*&mediaType=text/xml");
        // text is a "contains" query
        queryToResult[10] = new Pair<>(new String[]{file4, file5}, "text=/.*right.*/");
        queryToResult[11] = new Pair<>(new String[]{file5}, "text=/.*rights.*/");
        // text is a regular expression
        queryToResult[12] = new Pair<>(new String[]{file4, file5}, "text=/.*\\(.*\\).*/");
        queryToResult[13] = new Pair<>(new String[]{file5}, "text=/.*\\([a-z]\\).*/");
        // text contains special characters
        queryToResult[14] = new Pair<>(new String[]{file4}, "text=\\(1\\%2B1\\)\\:2=1");
        queryToResult[15] = new Pair<>(new String[]{file5}, "text=\\(c\\)%202012\\-2015%20\\*");
    }

