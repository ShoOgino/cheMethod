    @Override
    protected void configure() {
        // db related components modules
        install(new com.google.inject.persist.jpa.JpaPersistModule("main"));
        install(new org.eclipse.che.account.api.AccountModule());
        install(new org.eclipse.che.api.user.server.jpa.UserJpaModule());
        install(new org.eclipse.che.api.ssh.server.jpa.SshJpaModule());
//        install(new org.eclipse.che.api.machine.server.jpa.MachineJpaModule());
        bind(RecipeDao.class).to(JpaRecipeDao.class);
        // TODO spi move into docker infra impl
        bind(SnapshotDao.class).to(JpaSnapshotDao.class);
        install(new org.eclipse.che.api.workspace.server.jpa.WorkspaceJpaModule());
        install(new org.eclipse.che.api.core.jsonrpc.JsonRpcModule());
        install(new org.eclipse.che.api.core.websocket.WebSocketModule());

        // db configuration
        bind(DataSource.class).toProvider(org.eclipse.che.core.db.h2.H2DataSourceProvider.class);
        bind(SchemaInitializer.class).to(org.eclipse.che.core.db.schema.impl.flyway.FlywaySchemaInitializer.class);
        bind(org.eclipse.che.core.db.DBInitializer.class).asEagerSingleton();
        bind(PlaceholderReplacer.class).toProvider(org.eclipse.che.core.db.schema.impl.flyway.PlaceholderReplacerProvider.class);

        //factory
        bind(FactoryAcceptValidator.class).to(org.eclipse.che.api.factory.server.impl.FactoryAcceptValidatorImpl.class);
        bind(FactoryCreateValidator.class).to(org.eclipse.che.api.factory.server.impl.FactoryCreateValidatorImpl.class);
        bind(FactoryEditValidator.class).to(org.eclipse.che.api.factory.server.impl.FactoryEditValidatorImpl.class);
        bind(org.eclipse.che.api.factory.server.FactoryService.class);
        install(new org.eclipse.che.api.factory.server.jpa.FactoryJpaModule());

        Multibinder<FactoryParametersResolver> factoryParametersResolverMultibinder =
                Multibinder.newSetBinder(binder(), FactoryParametersResolver.class);
        factoryParametersResolverMultibinder.addBinding()
                                            .to(GithubFactoryParametersResolver.class);

        bind(org.eclipse.che.api.user.server.CheUserCreator.class);

        bind(TokenValidator.class).to(org.eclipse.che.api.local.DummyTokenValidator.class);

        bind(org.eclipse.che.api.core.rest.ApiInfoService.class);
        bind(org.eclipse.che.api.project.server.template.ProjectTemplateDescriptionLoader.class).asEagerSingleton();
        bind(org.eclipse.che.api.project.server.template.ProjectTemplateRegistry.class);
        bind(org.eclipse.che.api.project.server.template.ProjectTemplateService.class);
        bind(org.eclipse.che.api.ssh.server.SshService.class);
        bind(RecipeService.class);
        bind(org.eclipse.che.api.user.server.UserService.class);
        bind(org.eclipse.che.api.user.server.ProfileService.class);
        bind(org.eclipse.che.api.user.server.PreferencesService.class);
        bind(org.eclipse.che.api.workspace.server.stack.StackLoader.class);
        bind(org.eclipse.che.api.workspace.server.stack.StackService.class);
        bind(org.eclipse.che.api.workspace.server.TemporaryWorkspaceRemover.class);
        bind(org.eclipse.che.api.workspace.server.WorkspaceService.class);
        bind(org.eclipse.che.api.workspace.server.event.WorkspaceMessenger.class).asEagerSingleton();
        bind(org.eclipse.che.api.workspace.server.event.WorkspaceJsonRpcMessenger.class).asEagerSingleton();
        bind(org.eclipse.che.plugin.docker.machine.ext.DockerMachineExtServerChecker.class);
        bind(org.eclipse.che.plugin.docker.machine.ext.DockerMachineTerminalChecker.class);
        bind(org.eclipse.che.everrest.EverrestDownloadFileResponseFilter.class);
        bind(org.eclipse.che.everrest.ETagResponseFilter.class);
        bind(org.eclipse.che.api.agent.server.AgentRegistryService.class);

        bind(org.eclipse.che.security.oauth.OAuthAuthenticatorProvider.class)
                .to(org.eclipse.che.security.oauth.OAuthAuthenticatorProviderImpl.class);
        bind(org.eclipse.che.api.auth.oauth.OAuthTokenProvider.class)
                .to(org.eclipse.che.security.oauth.OAuthAuthenticatorTokenProvider.class);
        bind(org.eclipse.che.security.oauth.OAuthAuthenticationService.class);

        bind(org.eclipse.che.api.core.notification.WSocketEventBusServer.class);
        // additional ports for development of extensions
// FIXME: spi
//        Multibinder<org.eclipse.che.api.core.model.machine.ServerConf> machineServers
//                = Multibinder.newSetBinder(binder(),
//                                           org.eclipse.che.api.core.model.machine.ServerConf.class,
//                                           Names.named("machine.docker.dev_machine.machine_servers"));
//        machineServers.addBinding().toInstance(
//                new org.eclipse.che.api.machine.server.model.impl.ServerConfImpl(Constants.WSAGENT_DEBUG_REFERENCE, "4403/tcp", "http",
//                                                                                 null));

        bind(org.eclipse.che.api.agent.server.WsAgentHealthChecker.class)
                .to(org.eclipse.che.api.agent.server.WsAgentHealthCheckerImpl.class);

        bind(RecipeLoader.class);
        Multibinder.newSetBinder(binder(), String.class, Names.named("predefined.recipe.path"))
                   .addBinding()
                   .toInstance("predefined-recipes.json");

// FIXME: spi
//        bind(org.eclipse.che.api.workspace.server.event.MachineStateListener.class).asEagerSingleton();

        // agents
        bind(org.eclipse.che.api.agent.server.AgentRegistry.class).to(LocalAgentRegistry.class);
        Multibinder<Agent> agents = Multibinder.newSetBinder(binder(), Agent.class);
        agents.addBinding().to(SshAgent.class);
        agents.addBinding().to(UnisonAgent.class);
        agents.addBinding().to(org.eclipse.che.api.agent.ExecAgent.class);
        agents.addBinding().to(org.eclipse.che.api.agent.TerminalAgent.class);
        agents.addBinding().to(WsAgent.class);
        agents.addBinding().to(LSPhpAgent.class);
        agents.addBinding().to(LSPythonAgent.class);
        agents.addBinding().to(LSJsonAgent.class);
        agents.addBinding().to(LSCSharpAgent.class);
        agents.addBinding().to(LSTypeScriptAgent.class);

        Multibinder<AgentLauncher> launchers = Multibinder.newSetBinder(binder(), AgentLauncher.class);
// FIXME: spi
//        launchers.addBinding().to(WsAgentLauncher.class);
//        launchers.addBinding().to(org.eclipse.che.api.agent.ExecAgentLauncher.class);
//        launchers.addBinding().to(org.eclipse.che.api.agent.TerminalAgentLauncher.class);
//        launchers.addBinding().to(SshAgentLauncher.class);

        bindConstant().annotatedWith(Names.named("machine.ws_agent.run_command"))
                      .to("export JPDA_ADDRESS=\"4403\" && ~/che/ws-agent/bin/catalina.sh jpda run");
        bindConstant().annotatedWith(Names.named("machine.terminal_agent.run_command"))
                      .to("$HOME/che/terminal/che-websocket-terminal " +
                          "-addr :4411 " +
                          "-cmd ${SHELL_INTERPRETER}");
        bindConstant().annotatedWith(Names.named("machine.exec_agent.run_command"))
                      .to("$HOME/che/exec-agent/che-exec-agent " +
                          "-addr :4412 " +
                          "-cmd ${SHELL_INTERPRETER} " +
                          "-logs-dir $HOME/che/exec-agent/logs");

        bind(org.eclipse.che.api.deploy.WsMasterAnalyticsAddresser.class);

// FIXME: spi
//        Multibinder<org.eclipse.che.api.machine.server.spi.InstanceProvider> machineImageProviderMultibinder =
//                Multibinder.newSetBinder(binder(), org.eclipse.che.api.machine.server.spi.InstanceProvider.class);
//        machineImageProviderMultibinder.addBinding().to(org.eclipse.che.plugin.docker.machine.DockerInstanceProvider.class);

//        bind(org.eclipse.che.api.environment.server.MachineInstanceProvider.class)
//                .to(org.eclipse.che.plugin.docker.machine.MachineProviderImpl.class);

        install(new org.eclipse.che.api.core.rest.CoreRestModule());
        install(new org.eclipse.che.api.core.util.FileCleaner.FileCleanerModule());
// FIXME: spi
//        install(new org.eclipse.che.plugin.docker.machine.local.LocalDockerModule());
//        install(new org.eclipse.che.api.machine.server.MachineModule());
// FIXME: spi
//        install(new org.eclipse.che.plugin.docker.machine.ext.DockerExtServerModule());
        install(new org.eclipse.che.swagger.deploy.DocsModule());
// FIXME: spi
//        install(new org.eclipse.che.plugin.machine.ssh.SshMachineModule());
// FIXME: spi
//        install(new org.eclipse.che.workspace.infrastructure.docker.old.proxy.DockerProxyModule());
        install(new org.eclipse.che.commons.schedule.executor.ScheduleModule());

        final Multibinder<MessageBodyAdapter> adaptersMultibinder = Multibinder.newSetBinder(binder(), MessageBodyAdapter.class);
        adaptersMultibinder.addBinding().to(WorkspaceConfigMessageBodyAdapter.class);
        adaptersMultibinder.addBinding().to(WorkspaceMessageBodyAdapter.class);
        adaptersMultibinder.addBinding().to(StackMessageBodyAdapter.class);

        final MessageBodyAdapterInterceptor interceptor = new MessageBodyAdapterInterceptor();
        requestInjection(interceptor);
        bindInterceptor(subclassesOf(CheJsonProvider.class), names("readFrom"), interceptor);
// FIXME: spi
//        bind(org.eclipse.che.api.workspace.server.WorkspaceFilesCleaner.class);
//                .to(org.eclipse.che.workspace.infrastructure.docker.old.cleaner.LocalWorkspaceFilesCleaner.class);
//        bind(org.eclipse.che.api.environment.server.InfrastructureProvisioner.class)
//                .to(org.eclipse.che.plugin.docker.machine.local.LocalCheInfrastructureProvisioner.class);

        // system components
        bind(org.eclipse.che.api.system.server.SystemService.class);
        bind(org.eclipse.che.api.system.server.SystemEventsWebsocketBroadcaster.class).asEagerSingleton();
// FIXME: spi
//        install(new org.eclipse.che.workspace.infrastructure.docker.old.config.dns.DnsResolversModule());

// FIXME: spi
//        bind(org.eclipse.che.api.agent.server.filters.AddExecAgentInWorkspaceFilter.class);
//        bind(org.eclipse.che.api.agent.server.filters.AddExecAgentInStackFilter.class);

// FIXME: spi
        install(new DummyInfrastructureModule());
        install(new DockerInfraModule());
        install(new LocalDockerModule());
        bind(RemoveWorkspaceFilesAfterRemoveWorkspaceEventSubscriber.class).asEagerSingleton();
    }

