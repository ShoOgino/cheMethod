    @BeforeMethod
    private void setUp() throws Exception {
        workingDir = Files.createTempDirectory(Paths.get("/tmp"), "test");
        factory = new LocalStorageFactory(workingDir.toString());
        injector = Guice.createInjector(Stage.PRODUCTION, new AbstractModule() {
            @Override
            protected void configure() {
                bindConstant().annotatedWith(Names.named("che.database")).to(workingDir.toString());

                bind(JpaInitializer.class).asEagerSingleton();
                bind(EntityListenerInjectionManagerInitializer.class).asEagerSingleton();
                install(new JpaPersistModule("test"));
                install(new UserJpaModule());
                install(new SshJpaModule());
                install(new WorkspaceJpaModule());
                install(new MachineJpaModule());
                bind(StackJsonAdapter.class);
                bind(WorkspaceManager.class).toInstance(Mockito.mock(WorkspaceManager.class));
            }
        });

        userDao = injector.getInstance(UserDao.class);
        preferenceDao = injector.getInstance(PreferenceDao.class);
        profileDao = injector.getInstance(ProfileDao.class);
        sshDao = injector.getInstance(SshDao.class);
        snapshotDao = injector.getInstance(SnapshotDao.class);
        workspaceDao = injector.getInstance(WorkspaceDao.class);
        recipeDao = injector.getInstance(RecipeDao.class);
        stackDao = injector.getInstance(StackDao.class);

        stackJsonAdapter = injector.getInstance(StackJsonAdapter.class);
        workspaceCfgJsonAdapter = injector.getInstance(WorkspaceConfigJsonAdapter.class);

        migrator = new LocalDataMigrator();
        storeTestData();
    }

