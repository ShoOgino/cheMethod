  @Test
  public void provisionPVC() throws Exception {
    pvcProvisioner =
        new PersistentVolumeClaimProvisioner(
            true, "claim-che-workspace", "10Gi", "ReadWriteOnce", "/projects");
    final Map<String, PersistentVolumeClaim> pvcs = new HashMap<>();
    when(osEnv.getPersistentVolumeClaims()).thenReturn(pvcs);
    final InternalMachineConfig devMachine = mock(InternalMachineConfig.class);
    when(environment.getMachines()).thenReturn(ImmutableMap.of("test/machine", devMachine));
    when(devMachine.getServers())
        .thenReturn(singletonMap(Constants.SERVER_WS_AGENT_HTTP_REFERENCE, new ServerConfigImpl()));
    final String podName = "test";
    final Pod pod = mock(Pod.class);
    final PodSpec podSpec = mock(PodSpec.class);
    final ObjectMeta podMeta = mock(ObjectMeta.class);
    final Container container = mock(Container.class);
    when(pod.getSpec()).thenReturn(podSpec);
    when(pod.getMetadata()).thenReturn(podMeta);
    when(podMeta.getName()).thenReturn(podName);
    when(podSpec.getContainers()).thenReturn(singletonList(container));
    final List<Volume> volumes = new ArrayList<>();
    when(podSpec.getVolumes()).thenReturn(volumes);
    when(container.getName()).thenReturn("machine");
    final List<VolumeMount> volumeMounts = new ArrayList<>();
    when(container.getVolumeMounts()).thenReturn(volumeMounts);
    when(osEnv.getPods()).thenReturn(ImmutableMap.of(podName, pod));

    pvcProvisioner.provision(environment, osEnv, runtimeIdentity);

    verify(osEnv, times(1)).getPersistentVolumeClaims();
    verify(environment, times(1)).getMachines();
    assertFalse(pvcs.isEmpty());
    assertFalse(volumes.isEmpty());
    assertFalse(volumeMounts.isEmpty());
  }

