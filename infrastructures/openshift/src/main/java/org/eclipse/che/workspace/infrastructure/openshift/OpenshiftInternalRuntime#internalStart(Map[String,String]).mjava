    @Override
    protected void internalStart(Map<String, String> startOptions) throws InfrastructureException {
        String projectName = getContext().getIdentity().getWorkspaceId();

        prepareOpenshiftProject(projectName);

        // TODO Add Persistent Volumes claims for projects
        try (OpenShiftClient client = clientFactory.create()) {
            LOG.info("Creating pods from environment");
            for (Pod toCreate : getContext().getOpenshiftEnvironment().getPods().values()) {
                Pod createdPod = client.pods()
                                       .inNamespace(projectName)
                                       .create(toCreate);

                for (Container container : createdPod.getSpec().getContainers()) {
                    OpenshiftMachine machine = new OpenshiftMachine(clientFactory,
                                                                    projectName,
                                                                    createdPod.getMetadata().getName(),
                                                                    container.getName());
                    machines.put(machine.getName(), machine);
                    sendStartingEvent(machine.getName());
                }
            }

            LOG.info("Creating services from environment");
            for (Service service : getContext().getOpenshiftEnvironment().getServices().values()) {
                client.services()
                      .inNamespace(projectName)
                      .create(service);
            }

            LOG.info("Creating routes from environment");
            for (Route route : getContext().getOpenshiftEnvironment().getRoutes().values()) {
                client.routes()
                      .inNamespace(projectName)
                      .create(route);
            }

            LOG.info("Waiting until pods created by deployment configs become available and bootstrapping them");

            for (OpenshiftMachine machine : machines.values()) {
                machine.waitRunning(machineStartTimeoutMin);

                openshiftBootstrapperFactory.create(machine.getName(),
                                                    getContext().getIdentity(),
                                                    getContext().getMachineConfigs().get(machine.getName())
                                                                .getInstallers(),
                                                    machine)
                                            .bootstrap();

                sendRunningEvent(machine.getName());
            }
        } catch (RuntimeException e) {
            LOG.error("Failed to start of openshift runtime. " + e.getMessage(), e);
            throw new InfrastructureException(e.getMessage(), e);
        }

        LOG.info("Openshift Runtime for workspace {} started", getContext().getIdentity().getWorkspaceId());
    }

