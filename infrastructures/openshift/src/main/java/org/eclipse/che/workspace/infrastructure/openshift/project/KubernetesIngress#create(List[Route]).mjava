  /**
   * Creates specified route.
   *
   * @param routes - List of OS routes to create as an ingress
   * @return created route
   * @throws InfrastructureException when any exception occurs
   */
  public Ingress create(List<Route> routes) throws InfrastructureException {
    try {
      List<HTTPIngressPath> httpIngressPaths = new ArrayList<>();
      HashSet<String> servers = new HashSet<>();
      for (Route route : routes) {
        String server = route.getSpec().getPort().getTargetPort().getStrVal();
        if (!servers.contains(server)) {
          IngressBackend ingressBackend =
              new IngressBackendBuilder()
                  .withServiceName(route.getSpec().getTo().getName())
                  .withNewServicePort(server)
                  .build();

          String serverPath = "/" + workspaceId + "/" + server;

          HTTPIngressPath httpIngressPath =
              new HTTPIngressPathBuilder()
                  // .withPath(route.getSpec().getPath())
                  .withPath(serverPath)
                  .withBackend(ingressBackend)
                  .build();
          servers.add(server);
          httpIngressPaths.add(httpIngressPath);
        }
      }

      HTTPIngressRuleValue httpIngressRuleValue =
          new HTTPIngressRuleValueBuilder().withPaths(httpIngressPaths).build();
      IngressRule ingressRule = new IngressRuleBuilder().withHttp(httpIngressRuleValue).build();
      IngressSpec ingressSpec = new IngressSpecBuilder().withRules(ingressRule).build();
      Map<String, String> ingressAnontations = new HashMap<>();
      ingressAnontations.put("ingress.kubernetes.io/rewrite-target", "/");
      ingressAnontations.put("ingress.kubernetes.io/ssl-redirect", "false");
      ingressAnontations.put("kubernetes.io/ingress.class", "nginx");
      Ingress ingress =
          new IngressBuilder()
              .withSpec(ingressSpec)
              .withMetadata(
                  new ObjectMetaBuilder()
                      .withName(workspaceId + "-ingress")
                      .withAnnotations(ingressAnontations)
                      .build())
              .build();
      return clientFactory
          .create()
          .extensions()
          .ingresses()
          .inNamespace(namespace)
          .withName(workspaceId + "-ingress")
          .create(ingress);
    } catch (KubernetesClientException e) {
      throw new InfrastructureException(e.getMessage(), e);
    }
  }

