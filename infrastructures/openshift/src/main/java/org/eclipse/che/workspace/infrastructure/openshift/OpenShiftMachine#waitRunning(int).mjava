    public void waitRunning(int timeoutMin) throws InfrastructureException {
        LOG.info("Waiting machine {}", getName());

        CompletableFuture<Void> future = new CompletableFuture<>();
        Watch watch = null;
        try (OpenShiftClient client = clientFactory.create()) {
            PodResource<Pod, DoneablePod> podResource = client.pods()
                                                              .inNamespace(projectName)
                                                              .withName(podName);

            Pod actualPod = podResource.get();
            if (actualPod == null) {
                throw new InternalInfrastructureException("Can't find created pod " + podName);
            }
            String status = actualPod.getStatus().getPhase();
            LOG.info("Machine {} is {}", getName(), status);
            if (OPENSHIFT_POD_STATUS_RUNNING.equals(status)) {
                future.complete(null);
            } else {
                watch = podResource.watch(new Watcher<Pod>() {
                                              @Override
                                              public void eventReceived(Action action, Pod pod) {
                                                  //TODO Replace with checking container status
                                                  String phase = pod.getStatus().getPhase();
                                                  LOG.info("Machine {} is {}", getName(), status);
                                                  if (OPENSHIFT_POD_STATUS_RUNNING.equals(phase)) {
                                                      future.complete(null);
                                                  }
                                              }

                                              @Override
                                              public void onClose(KubernetesClientException cause) {
                                                  if (!future.isDone()) {
                                                      future.completeExceptionally(
                                                              new InfrastructureException("Machine watching is interrupted"));
                                                  }
                                              }
                                          }
                );
                try {
                    future.get(timeoutMin, TimeUnit.MINUTES);
                } catch (ExecutionException e) {
                    throw new InfrastructureException(e.getCause().getMessage(), e);
                } catch (TimeoutException e) {
                    throw new InfrastructureException("Starting of machine " + getName() + " reached timeout");
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    throw new InfrastructureException("Starting of machine " + getName() + " was interrupted");
                }
            }
        } finally {
            if (watch != null) {
                watch.close();
            }
        }
    }

