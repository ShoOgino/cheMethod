  @Override
  public void provision(
      InternalEnvironment environment, OpenShiftEnvironment osEnv, RuntimeIdentity runtimeIdentity)
      throws InfrastructureException {
    if (pvcEnable) {
      osEnv
          .getPersistentVolumeClaims()
          .put(
              pvcName,
              new PersistentVolumeClaimBuilder()
                  .withNewMetadata()
                  .withName(pvcName)
                  .endMetadata()
                  .withNewSpec()
                  .withAccessModes(pvcAccessMode)
                  .withNewResources()
                  .withRequests(ImmutableMap.of("storage", new Quantity(pvcQuantity)))
                  .endResources()
                  .endSpec()
                  .build());
      String devMachineName =
          WsAgentMachineFinderUtil.getWsAgentServerMachine(environment)
              .orElseThrow(() -> new InfrastructureException("Machine with wsagent not found"));
      for (Pod pod : osEnv.getPods().values()) {
        for (Container container : pod.getSpec().getContainers()) {
          final String machineName = pod.getMetadata().getName() + "/" + container.getName();
          if (devMachineName.equals(machineName)) {
            final VolumeMount volumeMount =
                new VolumeMountBuilder()
                    .withMountPath(projectFolderPath)
                    .withName(pvcName)
                    .withSubPath(runtimeIdentity.getWorkspaceId() + projectFolderPath)
                    .build();
            container.getVolumeMounts().add(volumeMount);
            final PersistentVolumeClaimVolumeSource pvcs =
                new PersistentVolumeClaimVolumeSourceBuilder().withClaimName(pvcName).build();
            final Volume volume =
                new VolumeBuilder().withPersistentVolumeClaim(pvcs).withName(pvcName).build();
            pod.getSpec().getVolumes().add(volume);
            return;
          }
        }
      }
    }
  }

