  /**
   * Builds the Openshift {@link Config} object based on a default {@link Config} object and an
   * optional workspace Id.
   */
  public Config buildConfig(Config defaultConfig, @Nullable String workspaceId)
      throws InfrastructureException {
    Subject subject = EnvironmentContext.getCurrent().getSubject();

    String workspaceOwnerId = null;
    if (workspaceId != null) {
      @SuppressWarnings("rawtypes")
      Optional<RuntimeContext> context =
          workspaceRuntimeProvider.get().getRuntimeContext(workspaceId);
      workspaceOwnerId = context.map(c -> c.getIdentity().getOwnerId()).orElse(null);
    }

    if (oauthIdentityProvider != null
        && subject != Subject.ANONYMOUS
        && (workspaceOwnerId == null || subject.getUserId().equals(workspaceOwnerId))) {
      try {
        KeycloakTokenResponse keycloakTokenInfos =
            keycloakServiceClient.getIdentityProviderToken(oauthIdentityProvider);
        if ("user:full".equals(keycloakTokenInfos.getScope())) {
          return new OpenShiftConfigBuilder(OpenShiftConfig.wrap(defaultConfig))
              .withOauthToken(keycloakTokenInfos.getAccessToken())
              .build();
        } else {
          throw new InfrastructureException(
              "Cannot retrieve user Openshift token: '"
                  + oauthIdentityProvider
                  + "' identity provider is not granted full rights: "
                  + oauthIdentityProvider);
        }
      } catch (UnauthorizedException e) {
        LOG.error("cannot retrieve User Openshift token from the identity provider", e);

        throw new InfrastructureException(messageToLinkAccount);
      } catch (BadRequestException e) {
        LOG.error(
            "cannot retrieve User Openshift token from the '"
                + oauthIdentityProvider
                + "' identity provider",
            e);
        if (e.getMessage().endsWith("Invalid token.")) {
          throw new InfrastructureException(
              "Your session has expired. \nPlease "
                  + "<a href='javascript:location.reload();' target='_top'>"
                  + "login"
                  + "</a> to Che again to get access to your Openshift account");
        }
        throw new InfrastructureException(e.getMessage(), e);
      } catch (Exception e) {
        LOG.error(
            "cannot retrieve User Openshift token from the  '"
                + oauthIdentityProvider
                + "' identity provider",
            e);
        throw new InfrastructureException(e.getMessage(), e);
      }
    }
    return defaultConfig;
  }

