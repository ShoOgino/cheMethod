  /**
   * Make sure that workspace service account exists and has `view` and `exec` role bindings, as
   * well as create workspace-view and exec roles in namespace scope
   *
   * <p>Do NOT make any changes to the service account if it already exists in the namespace to
   * preserve its configuration done by someone else.
   *
   * @throws InfrastructureException when any exception occurred
   */
  void prepare() throws InfrastructureException {
    OpenShiftClient osClient = clientFactory.createOC(workspaceId);

    if (osClient.serviceAccounts().inNamespace(projectName).withName(serviceAccountName).get()
        == null) {
      createWorkspaceServiceAccount(osClient);
    } else {
      return;
    }

    String execRoleName = "exec";
    if (osClient.roles().inNamespace(projectName).withName(execRoleName).get() == null) {
      createExecRole(osClient, execRoleName);
    }

    String viewRoleName = "workspace-view";
    if (osClient.roles().inNamespace(projectName).withName(viewRoleName).get() == null) {
      createViewRole(osClient, viewRoleName);
    }

    osClient.roleBindings().inNamespace(projectName).createOrReplace(createExecRoleBinding());
    osClient.roleBindings().inNamespace(projectName).createOrReplace(createViewRoleBinding());

    // If the user specified an additional cluster role for the workspace,
    // create a role binding for it too
    if (!isNullOrEmpty(this.clusterRoleName)) {
      if (osClient.rbac().kubernetesClusterRoles().withName(this.clusterRoleName).get() != null) {
        osClient
            .roleBindings()
            .inNamespace(projectName)
            .createOrReplace(createCustomRoleBinding(this.clusterRoleName));
      } else {
        LOG.warn(
            "Unable to find the cluster role {}. Skip creating custom role binding.",
            this.clusterRoleName);
      }
    }
  }

