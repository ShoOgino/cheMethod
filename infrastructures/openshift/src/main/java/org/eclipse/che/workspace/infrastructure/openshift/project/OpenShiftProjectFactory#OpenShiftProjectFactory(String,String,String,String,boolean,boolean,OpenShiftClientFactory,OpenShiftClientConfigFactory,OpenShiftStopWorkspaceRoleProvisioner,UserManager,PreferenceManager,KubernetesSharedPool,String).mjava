  @Inject
  public OpenShiftProjectFactory(
      @Nullable @Named("che.infra.openshift.project") String projectName,
      @Nullable @Named("che.infra.kubernetes.service_account_name") String serviceAccountName,
      @Nullable @Named("che.infra.kubernetes.workspace_sa_cluster_roles") String clusterRoleNames,
      @Nullable @Named("che.infra.kubernetes.namespace.default") String defaultNamespaceName,
      @Named("che.infra.kubernetes.namespace.allow_user_defined")
          boolean allowUserDefinedNamespaces,
      @Named("che.infra.kubernetes.namespace.creation_allowed") boolean namespaceCreationAllowed,
      OpenShiftClientFactory clientFactory,
      OpenShiftClientConfigFactory clientConfigFactory,
      OpenShiftStopWorkspaceRoleProvisioner stopWorkspaceRoleProvisioner,
      UserManager userManager,
      PreferenceManager preferenceManager,
      KubernetesSharedPool sharedPool,
      @Nullable @Named("che.infra.openshift.oauth_identity_provider")
          String oAuthIdentityProvider) {
    super(
        projectName,
        serviceAccountName,
        clusterRoleNames,
        defaultNamespaceName,
        allowUserDefinedNamespaces,
        namespaceCreationAllowed,
        clientFactory,
        userManager,
        preferenceManager,
        sharedPool);
    if (allowUserDefinedNamespaces && !clientConfigFactory.isPersonalized()) {
      LOG.warn(
          "Users are allowed to list projects but Che server is configured with a service account. "
              + "All users will receive the same list of projects. Consider configuring OpenShift "
              + "OAuth to personalize credentials that will be used for cluster access.");
    }
    this.clientFactory = clientFactory;
    this.stopWorkspaceRoleProvisioner = stopWorkspaceRoleProvisioner;
    this.oAuthIdentityProvider = oAuthIdentityProvider;
  }

