  /**
   * Creates OpenShift PVCs from given OpenShift environment and pre creates subpaths if needed.
   *
   * @param osEnv OpenShift environment
   * @throws InfrastructureException when failed to get existing PVCs in given OpenShift namespace
   * @throws InfrastructureException when failed to create one of given PVCs
   * @throws InfrastructureException when any error occurs while preparing workspace's PVCs
   */
  @VisibleForTesting
  void preparePVCs(OpenShiftEnvironment osEnv) throws InfrastructureException {
    final Collection<PersistentVolumeClaim> claims = osEnv.getPersistentVolumeClaims().values();
    final OpenShiftPersistentVolumeClaims pvcs = project.persistentVolumeClaims();
    final Set<String> existing =
        pvcs.get().stream().map(p -> p.getMetadata().getName()).collect(toSet());
    final String workspaceId = getContext().getIdentity().getWorkspaceId();
    for (PersistentVolumeClaim pvc : claims) {
      final String[] subpaths =
          (String[])
              pvc.getAdditionalProperties().remove(format(SUBPATHS_PROPERTY_FMT, workspaceId));
      if (!existing.contains(pvc.getMetadata().getName())) {
        pvcs.create(pvc);
      }
      if (subpaths != null && subpaths.length > 0) {
        pvcSubPathHelper.createDirs(workspaceId, subpaths);
      }
    }
  }

