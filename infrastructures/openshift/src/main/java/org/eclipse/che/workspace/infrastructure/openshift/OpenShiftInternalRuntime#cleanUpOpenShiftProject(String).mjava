    private void cleanUpOpenShiftProject(String projectName) throws InfrastructureException {
        try (OpenShiftClient client = clientFactory.create()) {
            List<HasMetadata> toDelete = new ArrayList<>();
            toDelete.addAll(client.services().inNamespace(projectName).list().getItems());
            toDelete.addAll(client.routes().inNamespace(projectName).list().getItems());

            //services and routes will be removed immediately
            client.lists()
                  .inNamespace(projectName)
                  .delete(new KubernetesListBuilder().withItems(toDelete)
                                                     .build());

            //pods are removed with some delay related to stopping of containers. It is need to wait them
            List<Pod> pods = client.pods().inNamespace(projectName).list().getItems();
            List<CompletableFuture> deleteFutures = new ArrayList<>();
            for (Pod pod : pods) {
                PodResource<Pod, DoneablePod> podResource = client.pods()
                                                                  .inNamespace(projectName)
                                                                  .withName(pod.getMetadata().getName());
                CompletableFuture<Void> deleteFuture = new CompletableFuture<>();
                deleteFutures.add(deleteFuture);
                podResource.watch(new DeleteWatcher(deleteFuture));
                podResource.delete();
            }
            CompletableFuture<Void> allRemoved =
                    CompletableFuture.allOf(deleteFutures.toArray(new CompletableFuture[deleteFutures.size()]));
            try {
                allRemoved.get();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                throw new InfrastructureException("Interrupted while waiting for workspace stop. " + e.getMessage());
            } catch (ExecutionException e) {
                throw new InfrastructureException("Error occurred while waiting for pod removing. " + e.getMessage());
            }
        } catch (KubernetesClientException e) {
            throw new InfrastructureException(e.getMessage(), e);
        }
    }

