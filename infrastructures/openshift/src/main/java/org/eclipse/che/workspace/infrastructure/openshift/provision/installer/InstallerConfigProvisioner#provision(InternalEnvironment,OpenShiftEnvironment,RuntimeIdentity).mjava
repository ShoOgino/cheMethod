  @Override
  public void provision(
      InternalEnvironment environment, OpenShiftEnvironment osEnv, RuntimeIdentity identity)
      throws InfrastructureException {

    for (Pod pod : osEnv.getPods().values()) {
      String podName = pod.getMetadata().getName();
      for (Container container : pod.getSpec().getContainers()) {
        String containerName = container.getName();
        String machineName = podName + "/" + containerName;
        InternalMachineConfig machineConf = environment.getMachines().get(machineName);

        Map<String, ServerConfig> name2Server = new HashMap<>();
        for (Installer installer : machineConf.getInstallers()) {
          provisionEnv(container, installer.getProperties());
          name2Server.putAll(installer.getServers());
        }
        ServerExposer serverExposer = new ServerExposer(machineName, container, osEnv);
        serverExposer.expose("agents", name2Server);

        // CHE_API is used by installers for agent binary downloading
        container.getEnv().removeIf(env -> "CHE_API".equals(env.getName()));
        container.getEnv().add(new EnvVar("CHE_API", cheServerEndpoint, null));
      }
    }
    // TODO incorrect place for env variable addition. workspace ID is needed for wsagent server, not installer
    // WORKSPACE_ID is required only by workspace agent
    String devMachineName =
        WsAgentMachineFinderUtil.getWsAgentServerMachine(environment)
            .orElseThrow(() -> new InfrastructureException("Machine with wsagent not found"));
    for (Pod pod : osEnv.getPods().values()) {
      for (Container container : pod.getSpec().getContainers()) {
        final String machineName = pod.getMetadata().getName() + "/" + container.getName();
        if (devMachineName.equals(machineName)) {
          container.getEnv().removeIf(env -> "CHE_WORKSPACE_ID".equals(env.getName()));
          container.getEnv().add(new EnvVar("CHE_WORKSPACE_ID", identity.getWorkspaceId(), null));
        }
      }
    }
  }

