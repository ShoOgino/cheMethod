  /**
   * Builds new image.
   *
   * @param progressMonitor ProgressMonitor for images creation process
   * @return image id
   * @throws IOException
   */
  public String buildImage(final BuildImageParams params, final ProgressMonitor progressMonitor)
      throws IOException {

    if (params.getRemote() != null) {
      // build context provided by remote URL
      DockerConnection dockerConnection =
          connectionFactory.openConnection(dockerDaemonUri).query("remote", params.getRemote());
      return buildImage(dockerConnection, params, progressMonitor);
    }

    // build context is set of files
    final File tar = Files.createTempFile(null, ".tar").toFile();
    try {
      File[] files = new File[params.getFiles().size()];
      files = params.getFiles().toArray(files);
      createTarArchive(tar, files);
      try (InputStream tarInput = new FileInputStream(tar)) {
        DockerConnection dockerConnection =
            connectionFactory
                .openConnection(dockerDaemonUri)
                .header("Content-Type", "application/x-compressed-tar")
                .header("Content-Length", tar.length())
                .entity(tarInput);
        return buildImage(dockerConnection, params, progressMonitor);
      }
    } finally {
      FileCleaner.addFile(tar);
    }
  }

