  /**
   * Returns message parsed from JSON stream.
   *
   * @return object of class passed as parameter of constructor or null if stream is empty
   * @throws IOException if error occurs on reading stream
   */
  public T next() throws IOException {
    // on first read we check if this stream is empty with reading of the first byte of stream
    // if so we do not call JsonStreamParser.hasNext() because it will throw exception
    // if not we return read byte to stream using PushbackInputStream
    if (firstRead) {
      int firstChar = reader.read();
      if (firstChar == -1) {
        return null;
      } else {
        reader.unread(firstChar);
        firstRead = false;
      }
    }
    try {
      if (streamParser.hasNext()) {
        return GSON.fromJson(streamParser.next(), messageClass);
      }
    } catch (JsonIOException e) {
      throw new IOException(e);
    } catch (JsonParseException ignore) {
    }
    return null;
  }

