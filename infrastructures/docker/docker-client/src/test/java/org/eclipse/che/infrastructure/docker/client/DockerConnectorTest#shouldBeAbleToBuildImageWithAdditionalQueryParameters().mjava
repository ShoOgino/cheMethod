  @Test
  public void shouldBeAbleToBuildImageWithAdditionalQueryParameters()
      throws IOException, InterruptedException {
    AuthConfigs authConfigs = DtoFactory.newDto(AuthConfigs.class);
    AuthConfig authConfig = DtoFactory.newDto(AuthConfig.class);
    Map<String, AuthConfig> auth = new HashMap<>();
    auth.put("auth", authConfig);
    authConfigs.setConfigs(auth);

    final String imageId = "37a7da3b7edc";
    final String repository = "repo/name";
    final String tag = "tag";
    final boolean rm = true;
    final boolean forcerm = true;
    final long memory = 2147483648L;
    final long memswap = 3221225472L;
    final boolean pull = true;
    final String dockerfile = "path/Dockerfile";
    final boolean nocache = true;
    final boolean q = true;
    final String cpusetcpus = "4-5";
    final long cpuperiod = 10000L;
    final long cpuquota = 5000L;
    final Map<String, String> buildargs = new HashMap<>();
    buildargs.put("constraint:label.com!", "value");

    BuildImageParams buildImageParams =
        BuildImageParams.create(this.dockerfile)
            .withAuthConfigs(authConfigs)
            .withRepository(repository)
            .withTag(tag)
            .withRemoveIntermediateContainers(rm)
            .withForceRemoveIntermediateContainers(forcerm)
            .withMemoryLimit(memory)
            .withMemorySwapLimit(memswap)
            .withDoForcePull(pull)
            .withDockerfile(dockerfile)
            .withNoCache(nocache)
            .withQuiet(q)
            .withCpusetCpus(cpusetcpus)
            .withCpuPeriod(cpuperiod)
            .withCpuQuota(cpuquota)
            .withBuildArgs(buildargs);

    doReturn(
            new ByteArrayInputStream(
                ("{\"stream\":\"Successfully built " + imageId + "\"}").getBytes()))
        .when(dockerResponse)
        .getInputStream();

    String returnedImageId = dockerConnector.buildImage(buildImageParams, progressMonitor);

    verify(dockerConnectionFactory).openConnection(nullable(URI.class));
    verify(dockerConnection).method(REQUEST_METHOD_POST);
    verify(dockerConnection).path("/build");

    verify(dockerConnection).header("Content-Type", "application/x-compressed-tar");
    verify(dockerConnection).header(eq("Content-Length"), anyLong());
    verify(dockerConnection).entity(any(InputStream.class));
    verify(dockerConnection, never()).header(eq("remote"), anyString());

    verify(dockerConnection).header(eq("X-Registry-Config"), nullable(byte[].class));

    verify(dockerConnection).request();
    verify(dockerResponse).getStatus();
    verify(dockerResponse).getInputStream();

    verify(dockerConnection).query(eq("rm"), eq(1));
    verify(dockerConnection).query(eq("forcerm"), eq(1));
    verify(dockerConnection).query(eq("memory"), eq(memory));
    verify(dockerConnection).query(eq("memswap"), eq(memswap));
    verify(dockerConnection).query(eq("pull"), eq(1));
    verify(dockerConnection).query(eq("dockerfile"), eq(dockerfile));
    verify(dockerConnection).query(eq("nocache"), eq(1));
    verify(dockerConnection).query(eq("q"), eq(1));
    verify(dockerConnection).query(eq("cpusetcpus"), eq(cpusetcpus));
    verify(dockerConnection).query(eq("cpuperiod"), eq(cpuperiod));
    verify(dockerConnection).query(eq("cpuquota"), eq(cpuquota));
    verify(dockerConnection).query(eq("t"), eq(repository + ':' + tag));
    verify(dockerConnection)
        .query(eq("buildargs"), eq(URLEncoder.encode(GSON.toJson(buildargs), "UTF-8")));

    assertEquals(returnedImageId, imageId);
  }

