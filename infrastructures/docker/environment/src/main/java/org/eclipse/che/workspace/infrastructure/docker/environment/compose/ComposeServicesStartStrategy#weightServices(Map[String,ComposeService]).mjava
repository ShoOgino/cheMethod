  /**
   * Returns mapping of names of services to its weights in dependency graph.
   *
   * @throws ValidationException if weights of services can not be calculated
   */
  private Map<String, Integer> weightServices(Map<String, ComposeService> services)
      throws ValidationException {

    HashMap<String, Integer> weights = new HashMap<>();

    // create services dependency graph
    Map<String, Set<String>> dependencies = new HashMap<>(services.size());
    for (Map.Entry<String, ComposeService> containerEntry : services.entrySet()) {
      ComposeService service = containerEntry.getValue();

      Set<String> serviceDependencies =
          Sets.newHashSetWithExpectedSize(
              service.getDependsOn().size()
                  + service.getLinks().size()
                  + service.getVolumesFrom().size());

      for (String dependsOn : service.getDependsOn()) {
        checkDependency(
            dependsOn, containerEntry.getKey(), services, "A service can not depend on itself");
        serviceDependencies.add(dependsOn);
      }

      // links also counts as dependencies
      for (String link : service.getLinks()) {
        String dependency = getContainerFromLink(link);
        checkDependency(
            dependency, containerEntry.getKey(), services, "A service can not link to itself");
        serviceDependencies.add(dependency);
      }
      // volumesFrom also counts as dependencies
      for (String volumesFrom : service.getVolumesFrom()) {
        String dependency = getContainerFromVolumesFrom(volumesFrom);
        checkDependency(
            dependency,
            containerEntry.getKey(),
            services,
            "A service can not contain 'volumes_from' to itself");
        serviceDependencies.add(dependency);
      }
      dependencies.put(containerEntry.getKey(), serviceDependencies);
    }

    // Find weight of each service in graph.
    // Weight of service is calculated as sum of all weights of services it depends on.
    // Nodes with no dependencies gets weight 0
    while (!dependencies.isEmpty()) {
      int previousSize = dependencies.size();
      for (Iterator<Map.Entry<String, Set<String>>> it = dependencies.entrySet().iterator();
          it.hasNext(); ) {
        // process not yet processed services only
        Map.Entry<String, Set<String>> containerEntry = it.next();
        String container = containerEntry.getKey();
        Set<String> containerDependencies = containerEntry.getValue();

        if (containerDependencies.isEmpty()) {
          // no links - smallest weight 0
          weights.put(container, 0);
          it.remove();
        } else {
          // service has dependencies - check if it has not weighted dependencies
          if (weights.keySet().containsAll(containerDependencies)) {
            // all connections are weighted - lets evaluate current service
            Optional<String> maxWeight =
                containerDependencies.stream().max(Comparator.comparing(weights::get));
            // optional can't be empty because size of the list is checked above
            // noinspection OptionalGetWithoutIsPresent
            weights.put(container, weights.get(maxWeight.get()) + 1);
            it.remove();
          }
        }
      }
      if (dependencies.size() == previousSize) {
        throw new ValidationException(
            "Launch order of services '"
                + Joiner.on(", ").join(dependencies.keySet())
                + "' can't be evaluated. Circular dependency.");
      }
    }

    return weights;
  }

