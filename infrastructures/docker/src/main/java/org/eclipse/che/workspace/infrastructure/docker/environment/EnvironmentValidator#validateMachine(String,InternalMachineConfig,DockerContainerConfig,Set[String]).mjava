  private void validateMachine(
      String machineName,
      @Nullable InternalMachineConfig machineConfig,
      DockerContainerConfig container,
      Set<String> containersNames)
      throws ValidationException {

    checkArgument(
        MACHINE_NAME_PATTERN.matcher(machineName).matches(),
        "Name of machine '%s' in environment is invalid",
        machineName);

    checkArgument(
        !isNullOrEmpty(container.getImage())
            || (container.getBuild() != null
                && (!isNullOrEmpty(container.getBuild().getContext())
                    || !isNullOrEmpty(container.getBuild().getDockerfileContent()))),
        "Field 'image' or 'build.context' is required in machine '%s' in environment",
        machineName);

    checkArgument(
        container.getBuild() == null
            || (isNullOrEmpty(container.getBuild().getContext())
                != isNullOrEmpty(container.getBuild().getDockerfileContent())),
        "Machine '%s' in environment contains mutually exclusive dockerfile content and build context.",
        machineName);

    if (machineConfig != null) {
      validateExtendedMachine(machineConfig, machineName);
    }

    for (String expose : container.getExpose()) {
      checkArgument(
          EXPOSE_PATTERN.matcher(expose).matches(),
          "Exposed port '%s' in machine '%s' in environment is invalid",
          expose,
          machineName);
    }

    for (String link : container.getLinks()) {
      Matcher matcher = LINK_PATTERN.matcher(link);

      checkArgument(
          matcher.matches(),
          "Link '%s' in machine '%s' in environment is invalid",
          link,
          machineName);

      String containerFromLink = matcher.group("containerName");
      checkArgument(
          !machineName.equals(containerFromLink),
          "Container '%s' has illegal link to itself",
          machineName);
      checkArgument(
          containersNames.contains(containerFromLink),
          "Machine '%s' in environment contains link to non existing machine '%s'",
          machineName,
          containerFromLink);
    }

    for (String depends : container.getDependsOn()) {
      checkArgument(
          MACHINE_NAME_PATTERN.matcher(depends).matches(),
          "Dependency '%s' in machine '%s' in environment is invalid",
          depends,
          machineName);

      checkArgument(
          !machineName.equals(depends),
          "Container '%s' has illegal dependency to itself",
          machineName);
      checkArgument(
          containersNames.contains(depends),
          "Machine '%s' in environment contains dependency to non existing machine '%s'",
          machineName,
          depends);
    }

    for (String volumesFrom : container.getVolumesFrom()) {
      Matcher matcher = VOLUME_FROM_PATTERN.matcher(volumesFrom);

      checkArgument(
          matcher.matches(),
          "Machine name '%s' in field 'volumes_from' of machine '%s' in environment is invalid",
          volumesFrom,
          machineName);

      String containerFromVolumesFrom = matcher.group("containerName");
      checkArgument(
          !machineName.equals(containerFromVolumesFrom),
          "Container '%s' can not mount volume from itself",
          machineName);
      checkArgument(
          containersNames.contains(containerFromVolumesFrom),
          "Machine '%s' in environment contains non existing machine '%s' in 'volumes_from' field",
          machineName,
          containerFromVolumesFrom);
    }

    checkArgument(
        container.getPorts() == null || container.getPorts().isEmpty(),
        "Ports binding is forbidden but found in machine '%s' of environment",
        machineName);

    checkArgument(
        container.getVolumes() == null || container.getVolumes().isEmpty(),
        "Volumes binding is forbidden but found in machine '%s' of environment",
        machineName);

    checkArgument(
        container.getNetworks() == null || container.getNetworks().isEmpty(),
        "Networks configuration is forbidden but found in machine '%s' of environment",
        machineName);
  }

