    /**
     * Transforms address and server ports into map where
     * key is port and optional transport protocol and value is address port of server.
     *
     * <p/>Example:
     * When method accepts address my-host.com and ports:
     * <pre>{@code
     * {
     *     "7070" : [
     *         "hostIp" : "127.0.0.1",
     *         "hostPort" : "32720"
     *     ],
     *     "8080/tcp" : [
     *         "hostIp" : "127.0.0.1",
     *         "hostPort" : "32721"
     *     ],
     *     "9090/udp" : [
     *         "hostIp" : "127.0.0.1",
     *         "hostPort" : "32722"
     *     ]
     * }
     * }</pre>
     * this method returns:
     * <pre>{@code
     * {
     *     "7070" : "my-host.com:32720",
     *     "8080/tcp" : "my-host.com:32721",
     *     "9090/udp" : "my-host.com:32722"
     * }
     * }</pre>
     *
     */
    protected Map<String, String> getExposedPortsToAddressPorts(String address, Map<String, List<PortBinding>> ports, boolean useExposedPorts) {
        Map<String, String> addressesAndPorts = new HashMap<>();
        for (Map.Entry<String, List<PortBinding>> portEntry : ports.entrySet()) {
            String exposedPort = portEntry.getKey().split("/")[0];
            // there is one value always
            String ephemeralPort = portEntry.getValue().get(0).getHostPort();
            if (useExposedPorts) {
                addressesAndPorts.put(portEntry.getKey(), address + ":" + exposedPort);
            } else {
                addressesAndPorts.put(portEntry.getKey(), address + ":" + ephemeralPort);
            }
        }
        return addressesAndPorts;
    }

