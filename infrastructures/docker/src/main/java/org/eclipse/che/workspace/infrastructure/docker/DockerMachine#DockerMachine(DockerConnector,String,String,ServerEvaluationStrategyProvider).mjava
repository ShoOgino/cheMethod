    public DockerMachine(DockerConnector docker,
//                         @Named("che.docker.registry") String registry,
//                         @Named("che.docker.namespace") @Nullable String registryNamespace,
//                         @Assisted Machine machine,
                         @Assisted("container") String container,
                         @Assisted("image") String image,
//                         @Assisted LineConsumer outputConsumer,
//                         DockerInstanceStopDetector dockerInstanceStopDetector,
//                         DockerInstanceProcessesCleaner processesCleaner,
//                         @Named("che.docker.registry_for_snapshots") boolean snapshotUseRegistry,
                         ServerEvaluationStrategyProvider provider
//                         @Named("machine.docker.dev_machine.machine_servers") Set<OldServerConf> devMachineSystemServers,
//                         @Named("machine.docker.machine_servers") Set<OldServerConf> allMachinesSystemServers
    ) throws InfrastructureException {
        this.container = container;
        this.docker = docker;
        this.image = image;
//        this.outputConsumer = outputConsumer;
//        this.registry = registry;
//        this.registryNamespace = registryNamespace;
//        this.node = node;
//        this.dockerInstanceStopDetector = dockerInstanceStopDetector;
//        processesCleaner.trackProcesses(this);
//        this.snapshotUseRegistry = snapshotUseRegistry;
//        this.machineRuntime = doGetRuntime();
//        this.workspace = workspace;
//        this.envName = envName;
//        this.owner = owner;
//        this.id = id;
        try {
            this.info = docker.inspectContainer(container);
        } catch (IOException e) {
            throw new InfrastructureException(e.getLocalizedMessage(), e);
        }
//        Stream<OldServerConf> confStream = Stream.concat(machineConfig.getServers().stream(), allMachinesSystemServers.stream());
//        if (machineConfig.isDev()) {
//            confStream = Stream.concat(confStream, devMachineSystemServers.stream());
//        }
        // convert list to map for quick search and normalize port - add /tcp if missing
//        this.serversConf = confStream.collect(toMap(srvConf -> srvConf.getPort().contains("/") ?
//                                                               srvConf.getPort() :
//                                                               srvConf.getPort() + "/tcp",
//                                                    OldServerConfImpl::new));
//
//        this.internalHost = internalHost;
        this.provider = provider;
    }

