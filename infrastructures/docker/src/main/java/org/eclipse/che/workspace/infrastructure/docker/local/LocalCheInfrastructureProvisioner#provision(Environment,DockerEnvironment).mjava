    @Override
    public void provision(Environment envConfig, DockerEnvironment internalEnv)
            throws InfrastructureException {
        String devMachineName = getDevMachineName(envConfig);
        if (devMachineName == null) {
            throw new InfrastructureException("ws-machine is not found on agents applying");
        }

        DockerContainerConfig devMachine = internalEnv.getServices().get(devMachineName);

        for (DockerContainerConfig machine : internalEnv.getServices().values()) {
            ArrayList<String> volumes = new ArrayList<>(machine.getVolumes());
            volumes.add(terminalVolumeProvider.get());
            volumes.add(execVolumeProvider.get());
            machine.setVolumes(volumes);
        }

        // add bind-mount volume for projects in a workspace
        String projectFolderVolume = "/tmp:" + projectFolderPath;
//        try {
//            projectFolderVolume = String.format("%s:%s%s",
//                                                workspaceFolderPathProvider.getPath(internalEnv.getWorkspaceId()),
//                                                projectFolderPath, projectsVolumeOptions);
//        } catch (IOException e) {
//            throw new InfrastructureException("Error occurred on resolving path to files of workspace " +
//                                           internalEnv.getWorkspaceId());
//        }
        List<String> devMachineVolumes = devMachine.getVolumes();
        devMachineVolumes.add(SystemInfo.isWindows() ? pathEscaper.escapePath(projectFolderVolume)
                                                     : projectFolderVolume);
        // add volume with ws-agent archive
        devMachineVolumes.add(wsAgentVolumeProvider.get());
        // add volume and variable to setup ws-agent configuration
        String dockerExtConfVolume = dockerExtConfBindingProvider.get();
        if (dockerExtConfVolume != null) {
            devMachineVolumes.add(dockerExtConfVolume);
        }
        HashMap<String, String> environmentVars = new HashMap<>(devMachine.getEnvironment());
        environmentVars.put(CheBootstrap.CHE_LOCAL_CONF_DIR, DockerExtConfBindingProvider.EXT_CHE_LOCAL_CONF_DIR);
        devMachine.setEnvironment(environmentVars);

        // apply basic infra (e.g. agents)
        super.provision(envConfig, internalEnv);
    }

