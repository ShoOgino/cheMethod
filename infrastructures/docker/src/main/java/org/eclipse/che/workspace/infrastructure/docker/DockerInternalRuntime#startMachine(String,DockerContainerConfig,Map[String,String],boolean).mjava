    private void startMachine(String name,
                              DockerContainerConfig containerConfig,
                              Map<String, String> startOptions,
                              boolean isDev) throws InfrastructureException {
        DockerMachine dockerMachine;
        // TODO property name
        final RuntimeIdentity identity = getContext().getIdentity();
        if ("true".equals(startOptions.get("restore"))) {
            MachineSourceImpl machineSource;
            try {
                SnapshotImpl snapshot = snapshotDao.getSnapshot(identity.getWorkspaceId(),
                                                                identity.getEnvName(),
                                                                name);
                machineSource = snapshot.getMachineSource();
                // Snapshot image location has SHA-256 digest which needs to be removed,
                // otherwise it will be pulled without tag and cause problems
                String imageName = machineSource.getLocation();
                if (imageName.contains("@sha256:")) {
                    machineSource.setLocation(imageName.substring(0, imageName.indexOf('@')));
                }

                DockerContainerConfig imageContainerConfig = normalizeSource(containerConfig, machineSource);
                dockerMachine = serviceStarter.startService(dockerEnvironment.getNetwork(),
                                                            name,
                                                            imageContainerConfig,
                                                            identity,
                                                            isDev);
            } catch (NotFoundException | SnapshotException | SourceNotFoundException e) {
                // slip to start without recovering
                dockerMachine = serviceStarter.startService(dockerEnvironment.getNetwork(),
                                                            name,
                                                            containerConfig,
                                                            identity,
                                                            isDev);
            }
        } else {
            dockerMachine = serviceStarter.startService(dockerEnvironment.getNetwork(),
                                                        name,
                                                        containerConfig,
                                                        identity,
                                                        isDev);
        }
        try {
            checkStartInterruption();
            startSynchronizer.addMachine(name, dockerMachine);
        } catch (InfrastructureException e) {
            destroyMachineQuietly(name, dockerMachine);
            throw e;
        }
        startAgents(name, dockerMachine);
        checkServersReadiness(name, dockerMachine);
    }

