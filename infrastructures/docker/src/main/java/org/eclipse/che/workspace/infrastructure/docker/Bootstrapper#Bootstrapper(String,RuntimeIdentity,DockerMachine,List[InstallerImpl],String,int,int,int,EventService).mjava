    @Inject
    public Bootstrapper(@Assisted String machineName,
                        @Assisted RuntimeIdentity runtimeIdentity,
                        @Assisted DockerMachine dockerMachine,
                        @Assisted List<InstallerImpl> agents,
                        @Named("che.workspace.che_server_websocket_endpoint_base") String websocketBaseEndpoint,
                        @Named("che.infra.docker.bootstrapper.timeout_min") int bootstrappingTimeoutMinutes,
                        @Named("che.infra.docker.bootstrapper.installer_timeout_sec") int installerTimeoutSeconds,
                        @Named("che.infra.docker.bootstrapper.server_check_period_sec") int serverCheckPeriodSeconds,
                        EventService eventService) {
        this.machineName = machineName;
        this.runtimeIdentity = runtimeIdentity;
        this.dockerMachine = dockerMachine;
        this.agents = agents;
        this.installerEndpoint = websocketBaseEndpoint + InstallerEndpoint.INSTALLER_WEBSOCKET_ENDPOINT_BASE;
        this.bootstrappingTimeoutMinutes = bootstrappingTimeoutMinutes;
        this.serverCheckPeriodSeconds = serverCheckPeriodSeconds;
        this.installerTimeoutSeconds = installerTimeoutSeconds;
        this.eventService = eventService;
        this.bootstrapperStatusListener = event -> {
            BootstrapperStatus status = event.getStatus();
            //skip starting status event
            if (status.equals(BootstrapperStatus.DONE) || status.equals(BootstrapperStatus.FAILED)) {
                //check boostrapper belongs to current runtime and machine
                RuntimeIdentityDto runtimeId = event.getRuntimeId();
                if (event.getMachineName().equals(machineName)
                    && runtimeIdentity.getEnvName().equals(runtimeId.getEnvName())
                    && runtimeIdentity.getOwner().equals(runtimeId.getOwner())
                    && runtimeIdentity.getWorkspaceId().equals(runtimeId.getWorkspaceId())) {

                    finishEventFuture.complete(event);
                }
            }
        };
    }

