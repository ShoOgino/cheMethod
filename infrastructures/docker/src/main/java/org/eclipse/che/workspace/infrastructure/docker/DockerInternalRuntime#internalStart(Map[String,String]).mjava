    @Override
    protected void internalStart(Map<String, String> startOptions) throws InfrastructureException {
        startSynchronizer.setStartThread();
        try {
            dockerNetworkLifecycle.createNetwork(dockerEnvironment.getNetwork());

            boolean restore = isRestoreEnabled(startOptions);

            String machineName = startQueue.peek();
            while (machineName != null) {
                DockerContainerConfig container = dockerEnvironment.getContainers().get(machineName);
                sendStartingEvent(machineName);
                try {
                    if (restore) {
                        restoreMachine(machineName, container);
                    } else {
                        startMachine(machineName, container);
                    }
                    sendRunningEvent(machineName);
                } catch (InfrastructureException e) {
                    sendFailedEvent(machineName, e.getMessage());
                    throw e;
                }
                startQueue.poll();
                machineName = startQueue.peek();
            }
        } catch (InfrastructureException | InterruptedException | RuntimeException e) {
            boolean interrupted = e instanceof InterruptedException || Thread.interrupted();
            boolean runtimeDestroyingNeeded = !startSynchronizer.isStopCalled();
            if (runtimeDestroyingNeeded) {
                try {
                    destroyRuntime(null);
                } catch (Exception destExc) {
                    LOG.error(destExc.getLocalizedMessage(), destExc);
                }
            }
            if (interrupted) {
                throw new InfrastructureException("Docker runtime start was interrupted");
            }
            if (e instanceof InfrastructureException) {
                throw (InfrastructureException)e;
            } else {
                throw new InternalInfrastructureException(e.getLocalizedMessage(), e);
            }
        }
    }

