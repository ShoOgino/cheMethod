    // TODO rework checks to ping servers concurrently and timeouts each ping in case of network/server hanging
    private void checkServerReadiness(String machineName,
                                      String serverRef,
                                      String serverUrl)
            throws InfrastructureException {

        if (!livenessChecksPaths.containsKey(serverRef)) {
            return;
        }
        String livenessCheckPath = livenessChecksPaths.get(serverRef);
        URL url;
        try {
            url = UriBuilder.fromUri(serverUrl)
                            .replacePath(livenessCheckPath)
                            .build()
                            .toURL();
        } catch (MalformedURLException e) {
            throw new InternalInfrastructureException("Server " + serverRef +
                                                      " URL is invalid. Error: " + e.getLocalizedMessage(), e);
        }
        // max start time 180 seconds
        long readinessDeadLine = System.currentTimeMillis() + 3000 * 60;
        while (System.currentTimeMillis() < readinessDeadLine) {
            LOG.info("Checking agent {} of machine {} at {}", serverRef, machineName,
                     System.currentTimeMillis());
            checkStartInterruption();
            if (isHttpConnectionSucceed(url)) {
                // TODO protect with lock, from null, from exceptions
                DockerMachine machine = startSynchronizer.getMachines().get(machineName);
                machine.setServerStatus(serverRef, ServerStatus.RUNNING);
                eventService.publish(DtoFactory.newDto(ServerStatusEvent.class)
                                               .withIdentity(DtoConverter.asDto(identity))
                                               .withMachineName(machineName)
                                               .withServerName(serverRef)
                                               .withStatus(ServerStatus.RUNNING)
                                               .withServerUrl(serverUrl));
                LOG.info("Server {} of machine {} started", serverRef, machineName);
                return;
            }

            try {
                Thread.sleep(3000);
            } catch (InterruptedException e) {
                throw new InternalInfrastructureException("Interrupted");
            }
        }
    }

