    /**
     * Start Docker machine by performing all needed operations such as pull, build, create container, etc.
     *
     * @param networkName
     *         name of a network Docker container should use
     * @param machineName
     *         name of Docker machine
     * @param containerConfig
     *         configuration of container to start
     * @param identity
     *         identity of user that starts machine
     * @param isDev
     *         whether machine is dev or not
     * @return {@link DockerMachine} instance that represents started container
     * @throws InternalInfrastructureException
     *         if internal error occurs
     * @throws SourceNotFoundException
     *         if image for container creation is missing
     * @throws InfrastructureException
     *         if any other error occurs
     */
    public DockerMachine startContainer(String networkName,
                                        String machineName,
                                        DockerContainerConfig containerConfig,
                                        RuntimeIdentity identity,
                                        boolean isDev,
                                        AbnormalMachineStopHandler abnormalMachineStopHandler)
            throws InfrastructureException {
        String workspaceId = identity.getWorkspaceId();

        // copy to not affect/be affected by changes in origin
        containerConfig = new DockerContainerConfig(containerConfig);
        final ProgressMonitor progressMonitor = machineLoggerFactory.newProgressMonitor(machineName, identity);
        String container = null;
        try {
            String image = prepareImage(machineName, containerConfig, progressMonitor);

            container = createContainer(workspaceId,
                                        machineName,
                                        isDev,
                                        image,
                                        networkName,
                                        containerConfig);

            connectContainerToAdditionalNetworks(container, containerConfig);

            docker.startContainer(StartContainerParams.create(container));

            checkContainerIsRunning(container);

            readContainerLogsInSeparateThread(container,
                                              workspaceId,
                                              containerConfig.getId(),
                                              machineLoggerFactory.newLogsProcessor(machineName, identity));

            dockerInstanceStopDetector.startDetection(container, machineName, abnormalMachineStopHandler);

            return new DockerMachine(docker,
                                     registry,
                                     registryNamespace,
                                     snapshotUseRegistry,
                                     container,
                                     image,
                                     serverEvaluationStrategyProvider,
                                     dockerInstanceStopDetector,
                                     progressMonitor);
        } catch (RuntimeException | IOException | InfrastructureException e) {
            cleanUpContainer(container);
            if (e instanceof InfrastructureException) {
                throw (InfrastructureException)e;
            } else {
                throw new InternalInfrastructureException(e.getLocalizedMessage(), e);
            }
        }
    }

