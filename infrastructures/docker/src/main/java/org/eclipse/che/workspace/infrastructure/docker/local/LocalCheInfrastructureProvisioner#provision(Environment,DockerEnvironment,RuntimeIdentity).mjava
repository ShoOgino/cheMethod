    @Override
    public void provision(Environment envConfig,
                          DockerEnvironment internalEnv,
                          RuntimeIdentity identity)
            throws InfrastructureException {
        String devMachineName = getDevMachineName(envConfig);
        if (devMachineName == null) {
            throw new InfrastructureException("ws-machine is not found on installers applying");
        }

        DockerContainerConfig devMachine = internalEnv.getServices().get(devMachineName);

        for (DockerContainerConfig machine : internalEnv.getServices().values()) {
            ArrayList<String> volumes = new ArrayList<>(machine.getVolumes());
            volumes.add(terminalVolumeProvider.get());
            volumes.add(execVolumeProvider.get());
            machine.setVolumes(volumes);
        }

        // add bind-mount volume for projects in a workspace
        String projectFolderVolume;
        try {
            projectFolderVolume = String.format("%s:%s%s",
                                                workspaceFolderPathProvider.getPath(identity.getWorkspaceId()),
                                                projectFolderPath, projectsVolumeOptions);
        } catch (IOException e) {
            throw new InfrastructureException("Error occurred on resolving path to files of workspace " +
                                              identity.getWorkspaceId());
        }
        List<String> devMachineVolumes = devMachine.getVolumes();
        devMachineVolumes.add(SystemInfo.isWindows() ? pathEscaper.escapePath(projectFolderVolume)
                                                     : projectFolderVolume);
        // add volume with ws-agent archive
        devMachineVolumes.add(wsAgentVolumeProvider.get());
        // add volume and variable to setup ws-agent configuration
        String dockerExtConfVolume = dockerExtConfBindingProvider.get();
        if (dockerExtConfVolume != null) {
            devMachineVolumes.add(dockerExtConfVolume);
        }
        // create volume for each directory to exclude from a snapshot
        List<String> volumes;
        for (DockerContainerConfig service : internalEnv.getServices().values()) {
            volumes = new ArrayList<>(service.getVolumes());
            volumes.addAll(SNAPSHOT_EXCLUDED_DIRECTORIES);
            service.setVolumes(volumes);
        }
        HashMap<String, String> environmentVars = new HashMap<>(devMachine.getEnvironment());
        environmentVars.put(CheBootstrap.CHE_LOCAL_CONF_DIR, DockerExtConfBindingProvider.EXT_CHE_LOCAL_CONF_DIR);
        devMachine.setEnvironment(environmentVars);

        // apply basic infra (e.g. agents)
        super.provision(envConfig, internalEnv, identity);
    }

