    /**
     * Waits until servers are considered available or one of them is considered as unavailable.
     *
     * @throws InternalInfrastructureException
     *         if check of a server failed due to an unexpected error
     * @throws InfrastructureException
     *         if check of a server failed due to interruption
     * @throws InfrastructureException
     *         if check of a server failed because it reached timeout
     * @throws InfrastructureException
     *         if check of a server failed due to an error
     */
    public void await() throws InfrastructureException, InterruptedException {
        try {
            // TODO how much time should we check?
            result.get(resultTimeoutSeconds, TimeUnit.SECONDS);
        } catch (TimeoutException e) {
            throw new InfrastructureException("Servers readiness check of machine " + machineName + " timed out");
        } catch (ExecutionException e) {
            try {
                throw e.getCause();
            } catch (InfrastructureException rethrow) {
                throw rethrow;
            } catch (Throwable thr) {
                throw new InternalInfrastructureException(
                        "Machine " + machineName + " servers readiness check failed. Error: " + thr.getMessage(), thr);
            }
        }
    }

