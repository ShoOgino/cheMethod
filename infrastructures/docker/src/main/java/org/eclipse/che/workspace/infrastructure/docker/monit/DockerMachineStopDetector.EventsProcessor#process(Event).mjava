        @Override
        public void process(Event message) {
            if (message.getType() != null && !"container".equals(message.getType())) {
                // this check is added because of bug in the docker swarm which do not filter events
                // in case of new response format of 'get events' we should skip all not filtered by swarm event types
                return;
            }

            switch (message.getStatus()) {
                case "oom":
                    containersOomTimestamps.put(message.getId(), message.getId());
                    LOG.debug("OOM of process in container {} has been detected", message.getId());
                    break;
                case "die":
                    String stopType;
                    if (containersOomTimestamps.getIfPresent(message.getId()) != null) {
                        containersOomTimestamps.invalidate(message.getId());
                        LOG.debug("OOM of container '{}' has been detected", message.getId());
                        stopType = "oom";
                    } else {
                        stopType = "die";
                    }
                    Pair<String, String> instanceIds = instances.get(message.getId());
                    if (instanceIds != null) {
                        try {
                            DockerRuntimeContext context = contextsStorage.get(instanceIds.second);
                            try {
                                context.stop(Collections.emptyMap());
                            } catch (InternalInfrastructureException e) {
                                LOG.error(e.getLocalizedMessage(), e);
                            } catch (InfrastructureException ignored) {
                            } finally {
                                // TODO spi send event environment abnormally stopped to master #5125
                            }
                        } catch (NotFoundException ignore) {}
                    }
                    lastProcessedEventDate = message.getTime();
                    break;
                default:
                    // we don't care about other event types
            }
        }

