  /**
   * Parses {@link Environment} into {@link DockerEnvironment}.
   *
   * @param environment environment to parse
   * @return environment representation as compose environment
   * @throws ValidationException if provided environment is illegal
   * @throws InfrastructureException if fetching of environment recipe content fails
   */
  public DockerEnvironment parse(Environment environment)
      throws ValidationException, InfrastructureException {

    checkNotNull(environment, "Environment should not be null");
    Recipe recipe = environment.getRecipe();
    checkNotNull(recipe, "Environment recipe should not be null");
    checkNotNull(recipe.getType(), "Environment recipe type should not be null");
    checkArgument(
        recipe.getContent() != null || recipe.getLocation() != null,
        "Recipe of environment must contain location or content");
    checkArgument(
        recipe.getContent() == null || recipe.getLocation() == null,
        "Recipe of environment contains mutually exclusive fields location and content");

    DockerConfigSourceSpecificEnvironmentParser parser = environmentParsers.get(recipe.getType());
    if (parser == null) {
      throw new ValidationException(
          format(
              "Environment type '%s' is not supported. " + "Supported environment types: %s",
              recipe.getType(), Joiner.on(", ").join(environmentParsers.keySet())));
    }

    DockerEnvironment dockerEnvironment = parser.parse(environment);

    for (Map.Entry<String, DockerContainerConfig> entry :
        dockerEnvironment.getContainers().entrySet()) {
      MachineConfig machineConfig = environment.getMachines().get(entry.getKey());
      if (machineConfig != null) {
        normalizeMachine(entry.getKey(), entry.getValue(), machineConfig);
      }
    }

    return dockerEnvironment;
  }

