  @BeforeMethod
  public void setup() throws Exception {
    MockitoAnnotations.initMocks(this);
    final DockerContainerConfig config1 = new DockerContainerConfig();
    final DockerContainerConfig config2 = new DockerContainerConfig();
    final DockerEnvironment environment = new DockerEnvironment();
    final InternalMachineConfig internalMachineCfg1 = mock(InternalMachineConfig.class);
    when(internalMachineCfg1.getInstallers()).thenReturn(singletonList(newInstaller(1)));
    final InternalMachineConfig internalMachineCfg2 = mock(InternalMachineConfig.class);
    when(internalMachineCfg2.getInstallers()).thenReturn(singletonList(newInstaller(2)));
    environment.setContainers(ImmutableMap.of(DEV_MACHINE, config1, DB_MACHINE, config2));

    doNothing().when(networks).createNetwork(anyString());
    when(runtimeContext.getIdentity()).thenReturn(IDENTITY);
    when(runtimeContext.getDockerEnvironment()).thenReturn(environment);
    final LinkedList<String> orderedContainers = new LinkedList<>();
    orderedContainers.add(DEV_MACHINE);
    orderedContainers.add(DB_MACHINE);
    when(runtimeContext.getOrderedContainers()).thenReturn(orderedContainers);
    InternalEnvironment internalEnvironment = mock(InternalEnvironment.class);
    when(runtimeContext.getEnvironment()).thenReturn(internalEnvironment);
    when(internalEnvironment.getMachines())
        .thenReturn(
            ImmutableMap.of(DEV_MACHINE, internalMachineCfg1, DB_MACHINE, internalMachineCfg2));
    dockerRuntime =
        new DockerInternalRuntime(
            runtimeContext,
            mock(ExternalIpURLRewriter.class),
            networks,
            starter,
            mock(SnapshotDao.class),
            mock(DockerRegistryClient.class),
            eventService,
            bootstrapperFactory,
            mock(ServerCheckerFactory.class),
            mock(MachineLoggersFactory.class));
  }

