    @BeforeMethod
    public void setUp() throws Exception {
        // docker
        InitialAuthConfig initialAuthConfig = new InitialAuthConfig();
        UserSpecificDockerRegistryCredentialsProvider credentialsProvider = mock(UserSpecificDockerRegistryCredentialsProvider.class);
        connectorConfiguration = new DockerConnectorConfiguration(URI.create("unix:///var/run/docker.sock"),
                                                                  null,
                                                                  initialAuthConfig,
                                                                  new DefaultNetworkFinder());
        connectionFactory = new DockerConnectionFactory(connectorConfiguration);
        resolver = new DockerRegistryAuthResolver(initialAuthConfig, new NoOpDockerRegistryDynamicAuthResolverImpl());
        dockerApiVersion = new DockerApiVersionPathPrefixProvider("1.20");
        docker = new DockerConnector(connectorConfiguration, connectionFactory, resolver, dockerApiVersion);

        // agent stuff
        agentRegistry = new AgentRegistryImpl(ImmutableSet.of(new WsAgent(), new ExecAgent(), new TerminalAgent()));
        agentSorter = new AgentSorter(agentRegistry);
        agentConfigApplier = new AgentConfigApplier(agentSorter, agentRegistry);

        // other
        urlRewriter = new TestURLRewriter();
        recipeDownloader = mock(RecipeDownloader.class);
        Pattern recipePattern = Pattern.compile(".*");

        // docker runtime
        ContainerNameGenerator dockerContainerNameGenerator = new ContainerNameGenerator();
        DockerInstanceStopDetector stopDetector = mock(DockerInstanceStopDetector.class);
        parser = new EnvironmentParser(singletonMap("dockerimage", new DockerImageEnvironmentParser()));
        validator = new EnvironmentValidator();
        strategy = new ServicesStartStrategy();
        ServerEvaluationStrategy serverEvaluationStrategy = new LocalDockerServerEvaluationStrategy("localhost", "localhost");
        ServerEvaluationStrategyProvider strategyProvider = new ServerEvaluationStrategyProvider(singletonMap("strategy1", serverEvaluationStrategy), "strategy1");
        normalizer = new EnvironmentNormalizer(recipeDownloader, recipePattern, dockerContainerNameGenerator, 2_000_000_000);
        starter = new ServiceStarter(docker,
                                     credentialsProvider,
                                     stopDetector,
                                     emptySet(),
                                     emptySet(),
                                     emptySet(),
                                     emptySet(),
                                     false,
                                     false,
                                     0,
                                     emptySet(),
                                     emptySet(),
                                     false,
                                     -1,
                                     emptySet(),
                                     null,
                                     null,
                                     0,
                                     0,
                                     new WindowsPathEscaper(),
                                     emptySet(),
                                     null,
                                     strategyProvider);
        networkLifecycle = new NetworkLifecycle(docker, null);
        WorkspaceFolderPathProvider workspaceFolderPathProvider = mock(WorkspaceFolderPathProvider.class);
        WsAgentVolumeProvider wsAgentVolumeProvider =
                new WsAgentVolumeProvider(null, "/home/gaal/workspace/che2/assembly/assembly-wsagent-server/target/ext-server-5.7.0-SNAPSHOT.tar.gz");
        TerminalVolumeProvider terminalVolumeProvider = new TerminalVolumeProvider(null, "/home/gaal/workspace/che2/agents/terminal/target/terminal-agent-5.7.0-SNAPSHOT-linux_amd64.tar.gz");
        ExecAgentVolumeProvider execAgentVolumeProvider = new ExecAgentVolumeProvider(null, "/home/gaal/workspace/che2/agents/exec/target/exec-agent-5.7.0-SNAPSHOT-linux_amd64.tar.gz");
        provisioner = new LocalCheInfrastructureProvisioner(agentConfigApplier,
                                                            workspaceFolderPathProvider,
                                                            new WindowsPathEscaper(),
                                                            "/projects",
                                                            null,
                                                            wsAgentVolumeProvider,
                                                            new DockerExtConfBindingProvider(),
                                                            terminalVolumeProvider,
                                                            execAgentVolumeProvider);

        // TODO agents in separate thread
        // TODO exec/terminal binaries are not found
        // TODO che.api

        DockerRuntimeContext.runCommands.put("org.eclipse.che.ws-agent", "export JPDA_ADDRESS=\"4403\" && ~/che/ws-agent/bin/catalina.sh jpda run");
        DockerRuntimeContext.runCommands.put("org.eclipse.che.terminal", "$HOME/che/terminal/che-websocket-terminal " +
                                                    "-addr :4411 " +
                                                    "-cmd ${SHELL_INTERPRETER}");
        DockerRuntimeContext.runCommands.put("org.eclipse.che.exec", "$HOME/che/exec-agent/che-exec-agent " +
                                                "-addr :4412 " +
                                                "-cmd ${SHELL_INTERPRETER} " +
                                                "-logs-dir $HOME/che/exec-agent/logs");

        // desired class
        infra = new DockerRuntimeInfrastructure(parser,
                                                validator,
                                                strategy,
                                                provisioner,
                                                normalizer,
                                                starter,
                                                networkLifecycle,
                                                urlRewriter,
                                                docker,
                                                agentRegistry, agentSorter);
    }

