  @Test
  public void shouldNotRemoveExistingEnvVarsWithDifferentNames() throws Exception {
    // given
    ToolingServersEnvVarsProvisioner provisioner =
        new ToolingServersEnvVarsProvisioner(singleton(provider1));
    Pair<String, String> envVar1 = Pair.of("env1", "value1");
    Pair<String, String> existingEnvVar = Pair.of("existingEnvVar", "some-value");
    when(provider1.get(any(RuntimeIdentity.class))).thenReturn(envVar1);
    dockerEnvironment
        .getContainers()
        .get(CONTAINER_1_NAME)
        .getEnvironment()
        .put(existingEnvVar.first, existingEnvVar.second);
    DockerEnvironment expected = new DockerEnvironment();
    expected
        .getContainers()
        .put(
            CONTAINER_1_NAME,
            new DockerContainerConfig()
                .setEnvironment(
                    ImmutableMap.of(
                        envVar1.first,
                        envVar1.second,
                        existingEnvVar.first,
                        existingEnvVar.second)));

    // when
    provisioner.provision(envConfig, dockerEnvironment, RUNTIME_IDENTITY);

    // then
    assertEquals(expected, dockerEnvironment);
  }

