  @Test
  public void shouldChangeMatchingVolumesOnly() throws Exception {
    // given
    dockerEnvironment
        .getContainers()
        .get(MACHINE_1_NAME)
        .getVolumes()
        .add(volume(WORKSPACE_ID, "projects2"));
    dockerEnvironment
        .getContainers()
        .get(MACHINE_1_NAME)
        .getVolumes()
        .add(volume(WORKSPACE_ID + "2", "projects"));
    dockerEnvironment.getContainers().get(MACHINE_2_NAME).getVolumes();
    dockerEnvironment
        .getContainers()
        .get(MACHINE_3_NAME)
        .getVolumes()
        .add(volume(WORKSPACE_ID, "/projects", "/projects"));
    dockerEnvironment
        .getContainers()
        .get(MACHINE_3_NAME)
        .getVolumes()
        .add(volume(WORKSPACE_ID, "projects", "/non/common/projects/path"));
    when(workspaceFolderPathProvider.getPath(anyString())).thenReturn(PATH_ON_HOST);
    DockerEnvironment expectedDockerEnv = new DockerEnvironment(dockerEnvironment);
    List<String> expectedMachine3Volumes =
        expectedDockerEnv.getContainers().get(MACHINE_3_NAME).getVolumes();
    expectedMachine3Volumes.clear();
    expectedMachine3Volumes.add(volume(WORKSPACE_ID, "/projects", "/projects"));
    expectedMachine3Volumes.add(PATH_ON_HOST + ":" + "/non/common/projects/path");

    // when
    provisioner.provision(dockerEnvironment, RUNTIME_IDENTITY);

    // then
    assertEquals(dockerEnvironment, expectedDockerEnv);
  }

