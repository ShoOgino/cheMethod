  @Test
  void shouldBuildAllImages() throws Throwable {

    Map<String, String> args1 = singletonMap("key1", "value1");
    DockerBuildContext context1 =
        new DockerBuildContext().setDockerfileContent("FROM ubuntu/jdk8").setArgs(args1);
    DockerContainerConfig config1 =
        new DockerContainerConfig().setBuild(context1).setMemLimit(1_024_000_000L);

    Map<String, String> args2 = singletonMap("key2", "value2");
    DockerBuildContext context2 =
        new DockerBuildContext().setDockerfileContent("FROM ubuntu/jdk9").setArgs(args2);
    DockerContainerConfig config2 =
        new DockerContainerConfig().setBuild(context2).setMemLimit(2_048_000_000L);

    Map<String, DockerContainerConfig> input = new HashMap<>();
    input.put("machine1", config1);
    input.put("machine2", config2);

    when(dockerConnector.listImages(any())).thenReturn(Collections.emptyList());
    Map<String, String> result = dockerImagesBuilder.prepareImages(input);

    ArgumentCaptor<BuildImageParams> captor = ArgumentCaptor.forClass(BuildImageParams.class);
    verify(dockerConnector, times(input.size())).buildImage(captor.capture(), any());
    assertEquals(result.size(), input.size());
    List<BuildImageParams> list = captor.getAllValues();
    assertTrue(
        list.stream()
            .map(BuildImageParams::getMemoryLimit)
            .anyMatch(l -> l.equals(config1.getMemLimit())));
    assertTrue(
        list.stream()
            .map(BuildImageParams::getMemoryLimit)
            .anyMatch(l -> l.equals(config2.getMemLimit())));
    assertTrue(list.stream().map(BuildImageParams::getBuildArgs).anyMatch(m -> m.equals(args1)));
    assertTrue(list.stream().map(BuildImageParams::getBuildArgs).anyMatch(m -> m.equals(args2)));
  }

