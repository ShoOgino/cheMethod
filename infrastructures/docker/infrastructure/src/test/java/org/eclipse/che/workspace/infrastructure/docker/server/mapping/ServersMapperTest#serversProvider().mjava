  @DataProvider(name = "servers")
  private Object[][] serversProvider() {
    return new Object[][] {
      {
        ImmutableMap.of(
            "8080/tcp", "0.0.0.0:32080",
            "8081/tcp", "0.0.0.0:32081"),
        ImmutableMap.of(
            "server1", new ServerConfigImpl("8080", "http", "no-slash-path", ONE_ATTRIBUTE_MAP),
            "server2", new ServerConfigImpl("8081", "http", "/slash-path", null)),
        ImmutableMap.of(
            "server1",
                new ServerImpl()
                    .withUrl("http://" + hostname + ":32080/no-slash-path")
                    .withAttributes(ONE_ATTRIBUTE_MAP),
            "server2",
                new ServerImpl()
                    .withUrl("http://" + hostname + ":32081/slash-path")
                    .withAttributes(emptyMap()))
      },
      {
        ImmutableMap.of("8080/tcp", "0.0.0.0:32080"),
        ImmutableMap.of(
            "server1", new ServerConfigImpl("8080", "http", "http-endpoint", emptyMap()),
            "server2", new ServerConfigImpl("8080", "ws", "ws-endpoint", ATTRIBUTES_MAP)),
        ImmutableMap.of(
            "server1",
                new ServerImpl()
                    .withUrl("http://" + hostname + ":32080/http-endpoint")
                    .withAttributes(emptyMap()),
            "server2",
                new ServerImpl()
                    .withUrl("ws://" + hostname + ":32080/ws-endpoint")
                    .withAttributes(ATTRIBUTES_MAP))
      },
      {
        ImmutableMap.of("8080/tcp", "0.0.0.0:32080"),
        ImmutableMap.of(
            "server1", new ServerConfigImpl("8080", "http", "http-endpoint", emptyMap()),
            "server2", new ServerConfigImpl("8080/tcp", "ws", "ws-endpoint", null)),
        ImmutableMap.of(
            "server1",
                new ServerImpl()
                    .withUrl("http://" + hostname + ":32080/http-endpoint")
                    .withAttributes(emptyMap()),
            "server2",
                new ServerImpl()
                    .withUrl("ws://" + hostname + ":32080/ws-endpoint")
                    .withAttributes(emptyMap()))
      },
      // ensure that ports that don't have matching server config are not shown as servers
      {
        ImmutableMap.of(
            "8080/tcp", "0.0.0.0:32080",
            "8081/udp", "0.0.0.0:32081",
            "8082", "0.0.0.0:32082"),
        ImmutableMap.of(),
        emptyMap()
      },
      {
        ImmutableMap.of(
            "8000/tcp", "0.0.0.0:32000",
            "8080/tcp", "0.0.0.0:32080",
            "2288/udp", "0.0.0.0:32288",
            "4401/tcp", "0.0.0.0:32401"),
        ImmutableMap.of(
            "ws-master", new ServerConfigImpl("8080", "http", "/api", emptyMap()),
            "exec-agent-api", new ServerConfigImpl("4401", "http", "/process", ONE_ATTRIBUTE_MAP),
            "exec-agent-ws", new ServerConfigImpl("4401", "ws", "/connect", ATTRIBUTES_MAP)),
        ImmutableMap.of(
            "ws-master",
                new ServerImpl()
                    .withUrl("http://" + hostname + ":32080/api")
                    .withAttributes(emptyMap()),
            "exec-agent-api",
                new ServerImpl()
                    .withUrl("http://" + hostname + ":32401/process")
                    .withAttributes(ONE_ATTRIBUTE_MAP),
            "exec-agent-ws",
                new ServerImpl()
                    .withUrl("ws://" + hostname + ":32401/connect")
                    .withAttributes(ATTRIBUTES_MAP))
      },
      // mapping of internal servers
      {
        mapOf("4401/tcp", null),
        ImmutableMap.of(
            "ls-api", new ServerConfigImpl("4401", "tcp", null, INTERNAL_SERVER_ATTRIBUTE_MAP)),
        ImmutableMap.of(
            "ls-api",
            new ServerImpl()
                .withUrl("tcp://" + machine + ":4401")
                .withAttributes(INTERNAL_SERVER_ATTRIBUTE_MAP))
      }
    };
  }

