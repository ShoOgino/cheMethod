  private ComposeEnvironment createTestComposeEnv() {
    ComposeService machine1 =
        new ComposeService()
            .withBuild(
                new BuildContext()
                    .withContext("http://host.com:port/location/of/dockerfile/or/git/repo/")
                    .withDockerfile("dockerfile/Dockerfile_alternate"))
            .withCommand(asList("tail", "-f", "/dev/null"))
            .withContainerName("some_name")
            .withDependsOn(asList("machine2", "machine3"))
            .withEntrypoint(asList("/bin/bash", "-c"))
            .withEnvironment((ImmutableMap.of("env1", "123", "env2", "345")))
            .withExpose(ImmutableSet.of("3000", "8080"))
            .withImage("eclipse/ubuntu_jdk8")
            .withLabels(
                ImmutableMap.of(
                    "com.example.department",
                    "Finance",
                    "com.example.description",
                    "Accounting webapp",
                    "com.example.label-with-empty-value",
                    ""))
            .withLinks(asList("machine1", "machine2:db"))
            .withMemLimit(2147483648L)
            .withNetworks(asList("some-network", "other-network"))
            .withPorts(asList("3000", "3000-3005"))
            .withVolumes(asList("/opt/data:/var/lib/mysql", "~/configs:/etc/configs/:ro"))
            .withVolumesFrom(asList("machine2:ro", "machine3"));
    ComposeService machine2 = new ComposeService().withImage("che/ubuntu_jdk8");
    ComposeService machine3 = new ComposeService().withImage("che/centos_jdk8");
    ComposeEnvironment composeEnv = mock(ComposeEnvironment.class);
    when(composeEnv.getServices())
        .thenReturn(
            newLinkedHashMap(
                ImmutableMap.of("machine1", machine1, "machine2", machine2, "machine3", machine3)));
    return composeEnv;
  }

