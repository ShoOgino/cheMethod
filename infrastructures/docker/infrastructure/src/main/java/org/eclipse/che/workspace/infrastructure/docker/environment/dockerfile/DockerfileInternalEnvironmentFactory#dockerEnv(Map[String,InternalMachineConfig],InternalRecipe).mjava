  private DockerEnvironment dockerEnv(
      Map<String, InternalMachineConfig> machines, InternalRecipe recipe)
      throws ValidationException {
    if (!TYPE.equals(recipe.getType())) {
      throw new ValidationException(
          format(
              "Dockerfile environment parser doesn't support recipe type '%s'", recipe.getType()));
    }

    if (!CONTENT_TYPE.equals(recipe.getContentType())) {
      throw new ValidationException(
          format(
              "Content type '%s' of recipe of environment is unsupported."
                  + " Supported values are: text/x-dockerfile",
              recipe.getContentType()));
    }

    Map.Entry<String, InternalMachineConfig> entry = machines.entrySet().iterator().next();
    String machineName = entry.getKey();
    InternalMachineConfig machineConfig = entry.getValue();

    DockerEnvironment cheContainerEnv = new DockerEnvironment();
    DockerContainerConfig container = new DockerContainerConfig();
    cheContainerEnv.getContainers().put(entry.getKey(), container);
    container.setBuild(new DockerBuildContext().setDockerfileContent(recipe.getContent()));

    for (ServerConfig server : machineConfig.getServers().values()) {
      container.addExpose(server.getPort());
    }
    if (machineConfig.getAttributes().containsKey("memoryLimitBytes")) {
      try {
        container.setMemLimit(
            Long.parseLong(machineConfig.getAttributes().get("memoryLimitBytes")));
      } catch (NumberFormatException e) {
        throw new ValidationException(
            format("Value of attribute 'memoryLimitBytes' of machine '%s' is illegal", machineName));
      }
    }

    return cheContainerEnv;
  }

