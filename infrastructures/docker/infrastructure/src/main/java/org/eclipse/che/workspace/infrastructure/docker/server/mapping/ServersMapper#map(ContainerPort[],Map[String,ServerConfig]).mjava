  /**
   * Maps container ports to machine servers resolving references from the given configuration map.
   *
   * @param ports container ports to map
   * @param configs servers configuration map used to resolve server references
   * @return server reference -> server map. Note that if there is no server configuration for
   *     container bound port, port+type itself(like 4022/tpc) will be used as a reference
   */
  public Map<String, ServerImpl> map(ContainerPort[] ports, Map<String, ServerConfig> configs) {
    if (ports == null || ports.length == 0) {
      return Collections.emptyMap();
    }

    // 4011/tcp -> [ exec-agent-rest, exec-agent-ws ]
    // 4012     -> [ terminal ]
    Map<String, List<String>> port2refs = new HashMap<>();
    for (Map.Entry<String, ServerConfig> entry : configs.entrySet()) {
      port2refs.compute(
          entry.getValue().getPort(),
          (port, list) -> {
            if (list == null) {
              list = new ArrayList<>();
            }
            list.add(entry.getKey());
            return list;
          });
    }

    Map<String, ServerImpl> mapped = new HashMap<>();
    for (ContainerPort port : ports) {
      List<String> refs = null;

      // configs which define port in format 'numPort/type' e.g. 4011/tcp
      String rawPort = port.getPrivatePort() + "/" + port.getType();
      if (port2refs.containsKey(rawPort)) {
        refs = port2refs.get(rawPort);
      }

      // configs which define numPort in format 'numPort' e.g. 4011
      String numPort = Integer.toString(port.getPrivatePort());
      if (port2refs.containsKey(numPort)) {
        if (refs == null) {
          refs = port2refs.get(numPort);
        } else {
          refs.addAll(port2refs.get(numPort));
        }
      }

      if (refs == null) {
        mapped.put(rawPort, new ServerImpl().withUrl(makeUrl(port, null, null)));
      } else {
        for (String ref : refs) {
          ServerConfig cfg = configs.get(ref);
          mapped.put(
              ref,
              new ServerImpl()
                  .withUrl(makeUrl(port, cfg.getProtocol(), cfg.getPath()))
                  .withAttributes(cfg.getAttributes()));
        }
      }
    }
    return mapped;
  }

