  /**
   * Pulls docker image for container creation.
   *
   * @param container container that provides description of image that should be pulled
   * @param machineImageName name of the image that should be assigned on pull
   * @param progressMonitor consumer of output
   * @throws SourceNotFoundException if image for pulling not found in registry
   * @throws InternalInfrastructureException if any other error occurs
   */
  private void pullImage(
      DockerContainerConfig container, String machineImageName, ProgressMonitor progressMonitor)
      throws InternalInfrastructureException, SourceNotFoundException {
    final DockerImageIdentifier dockerImageIdentifier;
    try {
      dockerImageIdentifier = DockerImageIdentifierParser.parse(container.getImage());
    } catch (DockerFileException e) {
      throw new InternalInfrastructureException(
          "Try to build a docker machine source with an invalid location/content. It is not in the expected format",
          e);
    }
    if (dockerImageIdentifier.getRepository() == null) {
      throw new InternalInfrastructureException(
          format(
              "Machine creation failed. Machine source is invalid. No repository is defined. Found '%s'.",
              dockerImageIdentifier.getRepository()));
    }
    try {
      boolean isImageExistLocally =
          isDockerImageExistLocally(dockerImageIdentifier.getRepository());
      if (doForcePullImage || !isImageExistLocally) {
        PullParams pullParams =
            PullParams.create(dockerImageIdentifier.getRepository())
                .withTag(MoreObjects.firstNonNull(dockerImageIdentifier.getTag(), LATEST_TAG))
                .withRegistry(dockerImageIdentifier.getRegistry())
                .withAuthConfigs(dockerCredentials.getCredentials());
        dockerConnector.pull(pullParams, progressMonitor);
      }

      String fullNameOfPulledImage = container.getImage();
      try {
        // tag image with generated name to allow sysadmin recognize it
        dockerConnector.tag(TagParams.create(fullNameOfPulledImage, machineImageName));
      } catch (ImageNotFoundException nfEx) {
        throw new SourceNotFoundException(nfEx.getLocalizedMessage(), nfEx);
      }
    } catch (IOException e) {
      throw new InternalInfrastructureException(
          "Can't create machine from image. Cause: " + e.getLocalizedMessage(), e);
    }
  }

