  private String createContainer(
      String machineName, String image, String networkName, DockerContainerConfig containerConfig)
      throws IOException, InternalInfrastructureException {

    EndpointConfig endpointConfig =
        new EndpointConfig()
            .withAliases(machineName)
            .withLinks(toArrayIfNotNull(containerConfig.getLinks()));
    NetworkingConfig networkingConfig =
        new NetworkingConfig().withEndpointsConfig(singletonMap(networkName, endpointConfig));

    HostConfig hostConfig = new HostConfig();
    hostConfig
        .withMemory(containerConfig.getMemLimit())
        .withMemorySwap(containerConfig.getMemSwapLimit())
        .withPidsLimit(containerConfig.getPidsLimit())
        .withPidMode(containerConfig.getPidMode())
        .withExtraHosts(
            containerConfig
                .getExtraHosts()
                .toArray(new String[containerConfig.getExtraHosts().size()]))
        .withPrivileged(containerConfig.getPrivileged())
        .withDns(containerConfig.getDns().toArray(new String[containerConfig.getDns().size()]))
        .withCpusetCpus(containerConfig.getCpuSet())
        .withCpuQuota(containerConfig.getCpuQuota())
        .withCpuPeriod(containerConfig.getCpuPeriod())
        .withCgroupParent(containerConfig.getCgroupParent())
        .withNetworkMode(networkName)
        .withLinks(toArrayIfNotNull(containerConfig.getLinks()))
        .withPortBindings(convertPortBindings(containerConfig.getPorts(), machineName))
        .withVolumesFrom(toArrayIfNotNull(containerConfig.getVolumesFrom()));

    ContainerConfig config = new ContainerConfig();
    config
        .withImage(image)
        .withExposedPorts(
            containerConfig
                .getExpose()
                .stream()
                .distinct()
                .collect(toMap(Function.identity(), value -> emptyMap())))
        .withHostConfig(hostConfig)
        .withCmd(toArrayIfNotNull(containerConfig.getCommand()))
        .withEntrypoint(toArrayIfNotNull(containerConfig.getEntrypoint()))
        .withLabels(containerConfig.getLabels())
        .withNetworkingConfig(networkingConfig)
        .withEnv(
            containerConfig
                .getEnvironment()
                .entrySet()
                .stream()
                .map(entry -> entry.getKey() + "=" + entry.getValue())
                .toArray(String[]::new));

    List<String> bindMountVolumes = new ArrayList<>();
    Map<String, Volume> nonBindMountVolumes = new HashMap<>();
    for (String volume : containerConfig.getVolumes()) {
      // If volume contains colon then it is bind volume, otherwise - non bind-mount volume.
      if (volume.contains(":")) {
        bindMountVolumes.add(volume);
      } else {
        nonBindMountVolumes.put(volume, new Volume());
      }
    }
    hostConfig.setBinds(bindMountVolumes.toArray(new String[bindMountVolumes.size()]));
    config.setVolumes(nonBindMountVolumes);

    config.getHostConfig().withPublishAllPorts(true);

    setNonExitingContainerCommandIfNeeded(config);

    return docker
        .createContainer(
            CreateContainerParams.create(config)
                .withContainerName(containerConfig.getContainerName()))
        .getId();
  }

