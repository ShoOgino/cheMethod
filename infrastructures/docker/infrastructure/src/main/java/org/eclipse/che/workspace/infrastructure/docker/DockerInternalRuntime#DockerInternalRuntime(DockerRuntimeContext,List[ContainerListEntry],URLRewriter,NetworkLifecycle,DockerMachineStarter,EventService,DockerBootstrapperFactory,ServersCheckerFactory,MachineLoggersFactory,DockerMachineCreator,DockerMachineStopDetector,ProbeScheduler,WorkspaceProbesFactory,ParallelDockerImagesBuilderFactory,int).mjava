  /**
   * Creates a running runtime from the list of given containers. Normally created by {@link
   * DockerRuntimeFactory#create(DockerRuntimeContext, List)}.
   */
  @AssistedInject
  public DockerInternalRuntime(
      @Assisted DockerRuntimeContext context,
      @Assisted List<ContainerListEntry> containers,
      URLRewriter urlRewriter,
      NetworkLifecycle networks,
      DockerMachineStarter machineStarter,
      EventService eventService,
      DockerBootstrapperFactory bootstrapperFactory,
      ServersCheckerFactory serverCheckerFactory,
      MachineLoggersFactory loggers,
      DockerMachineCreator machineCreator,
      DockerMachineStopDetector stopDetector,
      ProbeScheduler probeScheduler,
      WorkspaceProbesFactory probesFactory,
      ParallelDockerImagesBuilderFactory imagesBuilderFactory,
      @Named("che.infra.docker.bootstrapper.timeout_min") int bootstrappingTimeoutMinutes)
      throws InfrastructureException {
    this(
        context,
        urlRewriter,
        true, // <- running
        networks,
        machineStarter,
        eventService,
        bootstrapperFactory,
        serverCheckerFactory,
        loggers,
        probeScheduler,
        probesFactory,
        imagesBuilderFactory,
        bootstrappingTimeoutMinutes);

    for (ContainerListEntry container : containers) {
      DockerMachine machine = machineCreator.create(container);
      String name = Labels.newDeserializer(container.getLabels()).machineName();

      runtimeMachines.putMachine(name, machine);
      stopDetector.startDetection(container.getId(), name, new AbnormalMachineStopHandlerImpl());
      streamLogsAsync(name, container.getId());
    }
  }

