  /**
   * Modifies Kubernetes environment to expose the specified service port via JWTProxy.
   *
   * @param k8sEnv Kubernetes environment to modify
   * @param pod the pod that runs the server being exposed
   * @param backendServiceName service name that will be exposed
   * @param backendServicePort service port that will be exposed
   * @param protocol protocol that will be used for exposed port
   * @param secureServers secure servers to expose
   * @return JWTProxy service port that expose the specified one
   * @throws InfrastructureException if any exception occurs during port exposing
   */
  @Override
  public ServicePort expose(
      KubernetesEnvironment k8sEnv,
      PodData pod,
      String machineName,
      String backendServiceName,
      ServicePort backendServicePort,
      String protocol,
      Map<String, ServerConfig> secureServers)
      throws InfrastructureException {
    Preconditions.checkArgument(
        secureServers != null && !secureServers.isEmpty(), "Secure servers are missing");
    ensureJwtProxyInjected(k8sEnv, machineName, pod);

    Set<String> excludes = new HashSet<>();
    Boolean cookiesAuthEnabled = null;
    for (ServerConfig serverConfig : secureServers.values()) {
      ExposureConfiguration config = getExposureConfiguration(serverConfig);

      // accumulate unsecured paths
      if (config.excludedPaths != null) {
        excludes.addAll(config.excludedPaths);
      }

      // calculate `cookiesAuthEnabled` attributes
      if (detectCookieAuth) {
        if (cookiesAuthEnabled == null) {
          cookiesAuthEnabled = config.cookiesAuthEnabled;
        } else {
          if (!cookiesAuthEnabled.equals(config.cookiesAuthEnabled)) {
            throw new InfrastructureException(
                "Secure servers which expose the same port should have the same `cookiesAuthEnabled` value.");
          }
        }
      }
    }

    int listenPort = availablePort++;

    ServicePort exposedPort =
        new ServicePortBuilder()
            .withName("server-" + listenPort)
            .withPort(listenPort)
            .withProtocol(protocol)
            .withNewTargetPort(listenPort)
            .build();

    k8sEnv.getServices().get(serviceName).getSpec().getPorts().add(exposedPort);

    // JwtProxySecureServerExposer creates no service for the exposed secure servers and
    // assumes everything will be proxied from localhost, because JWT proxy is collocated
    // with the workspace pod (because it is added to the environment as an injectable pod).
    // This method historically supported proxying secure servers exposed through a service
    // (which is not secure in absence of a appropriate network policy). The support for
    // accessing the backend server through a service was kept here because it doesn't add
    // any additional complexity to this method and keeps the door open for the
    // JwtProxySecureServerExposer to be enhanced in the future with support for service-handled
    // secure servers.
    backendServiceName = backendServiceName == null ? "127.0.0.1" : backendServiceName;
    proxyConfigBuilder.addVerifierProxy(
        listenPort,
        "http://" + backendServiceName + ":" + backendServicePort.getTargetPort().getIntVal(),
        excludes,
        cookiesAuthEnabled == null ? false : cookiesAuthEnabled,
        cookiePathStrategy.get(serviceName, exposedPort),
        externalServiceExposureStrategy.getExternalPath(serviceName, exposedPort.getName()));
    k8sEnv
        .getConfigMaps()
        .get(getConfigMapName())
        .getData()
        .put(JWT_PROXY_CONFIG_FILE, proxyConfigBuilder.build());

    return exposedPort;
  }

