  /**
   * Tells the caller whether the namespace that is being prepared for the provided workspace
   * runtime identity can be created or is expected to already be present.
   *
   * <p>Note that this method cannot be reduced to merely checking if user-defined namespaces are
   * allowed or not (and depending on prior validation using the {@link
   * #checkIfNamespaceIsAllowed(String)} method during the workspace creation) because workspace
   * start is a) async from workspace creation and the underlying namespaces might have disappeared
   * and b) can be called during workspace recovery, where we don't even have the current user in
   * the context.
   *
   * @param identity the identity of the workspace runtime
   * @return true if the namespace can be created, false if the namespace is expected to already
   *     exist
   * @throws InfrastructureException on failure
   */
  protected boolean canCreateNamespace(RuntimeIdentity identity) throws InfrastructureException {
    if (allowUserDefinedNamespaces) {
      return true;
    } else {
      // we need to make sure that the provided namespace is indeed the one provided by our
      // configuration
      User owner;
      try {
        owner = userManager.getById(identity.getOwnerId());
      } catch (NotFoundException | ServerException e) {
        throw new InfrastructureException(
            "Failed to resolve workspace owner. Cause: " + e.getMessage(), e);
      }

      String requiredNamespace = identity.getInfrastructureNamespace();

      NamespaceResolutionContext resolutionContext =
          new NamespaceResolutionContext(
              identity.getWorkspaceId(), identity.getOwnerId(), owner.getName());

      String resolvedDefaultNamespace = evalPlaceholders(defaultNamespaceName, resolutionContext);

      return resolvedDefaultNamespace.equals(requiredNamespace);
    }
  }

