  /**
   * Constructor!
   *
   * @param signatureKeyPair the key pair for JWT proxy SSH comms
   * @param jwtProxyConfigBuilderFactory factory to create a JWT proxy config builder
   * @param externalServiceExposureStrategy the strategy to expose external servers
   * @param cookiePathStrategy the strategy for the cookie path of the JWT auth cookies, if used
   * @param jwtProxyImage the image of JWT proxy to use
   * @param memoryLimitBytes the memory limit of the JWT proxy container
   * @param imagePullPolicy the image pull policy for the JWT proxy container
   * @param workspaceId the workspace ID being started
   * @param detectCookieAuth whether to look for cookie auth requirements in the proxied servers or
   *     whether to ignore such requirements
   */
  AbstractJwtProxyProvisioner(
      KeyPair signatureKeyPair,
      JwtProxyConfigBuilderFactory jwtProxyConfigBuilderFactory,
      ExternalServiceExposureStrategy externalServiceExposureStrategy,
      CookiePathStrategy cookiePathStrategy,
      String jwtProxyImage,
      String memoryLimitBytes,
      String cpuLimitCores,
      String imagePullPolicy,
      String workspaceId,
      boolean detectCookieAuth) {
    this.keyPair = signatureKeyPair;
    this.proxyConfigBuilder = jwtProxyConfigBuilderFactory.create(workspaceId);
    this.jwtProxyImage = jwtProxyImage;
    this.externalServiceExposureStrategy = externalServiceExposureStrategy;
    this.cookiePathStrategy = cookiePathStrategy;
    this.imagePullPolicy = imagePullPolicy;
    this.serviceName = generate(SERVER_PREFIX, SERVER_UNIQUE_PART_SIZE) + "-jwtproxy";

    this.availablePort = FIRST_AVAILABLE_PROXY_PORT;
    long memoryLimitLong = Size.parseSizeToMegabytes(memoryLimitBytes) * MEGABYTES_TO_BYTES_DIVIDER;
    this.attributes =
        ImmutableMap.of(
            MEMORY_LIMIT_ATTRIBUTE,
            Long.toString(memoryLimitLong),
            MEMORY_REQUEST_ATTRIBUTE,
            Long.toString(memoryLimitLong),
            CPU_LIMIT_ATTRIBUTE,
            cpuLimitCores,
            CONTAINER_SOURCE_ATTRIBUTE,
            TOOL_CONTAINER_SOURCE);

    this.detectCookieAuth = detectCookieAuth;
  }

