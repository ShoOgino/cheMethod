  /**
   * Parses Kubernetes objects from recipe content.
   *
   * @param recipeContent recipe content that should be parsed
   * @return parsed objects
   * @throws IllegalArgumentException if recipe content is null
   * @throws ValidationException if recipe content has broken format
   * @throws ValidationException if recipe content has unrecognized objects
   * @throws InfrastructureException when exception occurred during kubernetes client creation
   */
  public List<HasMetadata> parse(String recipeContent)
      throws ValidationException, InfrastructureException {
    checkNotNull(recipeContent, "Recipe content type must not be null");

    try {
      // Behavior:
      // - If `content` is a single object like Deployment, load().get() will get the object in that
      // list
      // - If `content` is a Kubernetes List, load().get() will get the objects in that list
      // - If `content` is an OpenShift template, load().get() will get the objects in the template
      //   with parameters substituted (e.g. with default values).
      List<HasMetadata> parsed =
          clientFactory.create().load(new ByteArrayInputStream(recipeContent.getBytes())).get();

      // needed because Che master namespace is set by K8s API during list loading
      parsed
          .stream()
          .filter(o -> o.getMetadata() != null)
          .forEach(o -> o.getMetadata().setNamespace(null));

      return parsed;
    } catch (KubernetesClientException e) {
      // KubernetesClient wraps the error when a JsonMappingException occurs so we need the cause
      String message = e.getCause() == null ? e.getMessage() : e.getCause().getMessage();
      if (message.contains("\n")) {
        // Clean up message if it comes from JsonMappingException. Format is e.g.
        // `No resource type found for:v1#Route1\n at [...]`
        message = message.split("\\n", 2)[0];
      }
      throw new ValidationException(format("Could not parse Kubernetes recipe: %s", message));
    }
  }

