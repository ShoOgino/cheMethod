  @Override
  public void apply(InternalEnvironment internalEnvironment, Collection<ChePlugin> chePlugins)
      throws InfrastructureException {
    if (chePlugins.isEmpty()) {
      return;
    }
    KubernetesEnvironment kubernetesEnvironment = (KubernetesEnvironment) internalEnvironment;
    Map<String, Pod> pods = kubernetesEnvironment.getPods();
    if (pods.size() != 1) {
      throw new InfrastructureException(
          "Workspace.Next configuration can be applied to a workspace with one pod only");
    }
    Pod pod = pods.values().iterator().next();
    for (ChePlugin chePlugin : chePlugins) {
      for (CheContainer container : chePlugin.getContainers()) {
        io.fabric8.kubernetes.api.model.Container k8sContainer =
            addContainer(pod, container.getImage(), container.getEnv());

        String machineName = Names.machineName(pod, k8sContainer);

        InternalMachineConfig machineConfig =
            addMachine(
                kubernetesEnvironment,
                machineName,
                getContainerEndpoints(container.getPorts(), chePlugin.getEndpoints()),
                container.getVolumes());

        normalizeMemory(k8sContainer, machineConfig);
      }
    }
  }

