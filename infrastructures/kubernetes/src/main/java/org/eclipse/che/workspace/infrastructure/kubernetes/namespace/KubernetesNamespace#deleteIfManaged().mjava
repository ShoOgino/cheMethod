  /**
   * Deletes the namespace. Deleting a non-existent namespace is not an error as is not an attempt
   * to delete a namespace that is already being deleted. If the namespace is not marked as managed,
   * it is silently not deleted.
   *
   * @throws InfrastructureException if any unexpected exception occurs during namespace deletion
   */
  void deleteIfManaged() throws InfrastructureException {
    KubernetesClient client = clientFactory.create(workspaceId);

    if (!isNamespaceManaged(client)) {
      LOG.info(
          "Namespace {} for workspace {} is not marked as managed. Ignoring the delete request.",
          name,
          workspaceId);
      return;
    }

    try {
      delete(name, client);
    } catch (KubernetesClientException e) {
      if (e.getCode() == 403) {
        throw new InfrastructureException(
            format(
                "Could not access the namespace %s when deleting it for workspace %s",
                name, workspaceId),
            e);
      }

      throw new KubernetesInfrastructureException(e);
    }
  }

