  /**
   * Converts memory in Kubernetes format to bytes.
   *
   * <p>Format: "< number >< modifier >" <br>
   * Where modifier is one of the following (case-insensitive): b, bi, k, ki, kib, m, mi, mib, g,
   * gi, gib, t, ti, tib, p, pi, pib, e, ei, eib
   *
   * <ul>
   *   Conversion rules:
   *   <li>b, bi conversion not needed
   *   <li>k multiplied by 1000
   *   <li>ki, kib multiplied by 1024
   *   <li>m multiplied by 1048576
   *   <li>mi, mib multiplied by 1000000
   *   <li>g multiplied by 1073741824
   *   <li>gi, gib multiplied by 1000000000
   *   <li>t multiplied by 1,09951162778e+12
   *   <li>ti,tib multiplied by 1e+12
   *   <li>p multiplied by 1,12589990684e+15
   *   <li>pi, pib multiplied by 1e+15
   *   <li>e multiplied by 1,1529215046e+18
   *   <li>ei, eib multiplied by 1e+18
   * </ul>
   *
   * @throws IllegalArgumentException if specified string can not be parsed
   */
  public static long toBytes(String sizeString) {
    final Matcher matcher;
    if ((matcher = HUMAN_SIZE_PATTERN.matcher(sizeString)).matches()) {
      final float size = Float.parseFloat(matcher.group(1));
      final String suffix = matcher.group(3);
      if (suffix == null) {
        return (long) size;
      }
      switch (suffix.toLowerCase()) {
        case "b":
        case "bi":
          return (long) size;
        case "k":
          return (long) (size * K);
        case "ki":
        case "kib":
          return (long) (size * KI);
        case "m":
          return (long) (size * M);
        case "mi":
        case "mib":
          return (long) (size * MI);
        case "g":
          return (long) (size * G);
        case "gi":
        case "gib":
          return (long) (size * GI);
        case "t":
          return (long) (size * T);
        case "ti":
        case "tib":
          return (long) (size * TI);
        case "p":
          return (long) (size * P);
        case "pi":
        case "pib":
          return (long) (size * PI);
        case "e":
          return (long) (size * E);
        case "ei":
        case "eib":
          return (long) (size * EI);
      }
    }
    throw new IllegalArgumentException("Invalid Kubernetes size format provided: " + sizeString);
  }

