  /**
   * Make sure that workspace service account exists and has `view` and `exec` role bindings, as
   * well as create workspace-view and exec roles in namespace scope
   *
   * <p>Do NOT make any changes to the service account if it already exists in the namespace to
   * preserve its configuration done by someone else.
   *
   * @throws InfrastructureException when any exception occurred
   */
  void prepare() throws InfrastructureException {
    KubernetesClient k8sClient = clientFactory.create(workspaceId);

    if (k8sClient.serviceAccounts().inNamespace(namespace).withName(serviceAccountName).get()
        == null) {
      createWorkspaceServiceAccount(k8sClient);
    } else {
      return;
    }

    String execRoleName = "exec";
    if (k8sClient.rbac().kubernetesRoles().inNamespace(namespace).withName(execRoleName).get()
        == null) {
      createExecRole(k8sClient, execRoleName);
    }

    String viewRoleName = "workspace-view";
    if (k8sClient.rbac().kubernetesRoles().inNamespace(namespace).withName(viewRoleName).get()
        == null) {
      createViewRole(k8sClient, viewRoleName);
    }

    k8sClient
        .rbac()
        .kubernetesRoleBindings()
        .inNamespace(namespace)
        .createOrReplace(createExecRoleBinding());
    k8sClient
        .rbac()
        .kubernetesRoleBindings()
        .inNamespace(namespace)
        .createOrReplace(createViewRoleBinding());

    // If the user specified an additional cluster role for the workspace,
    // create a role binding for it too
    if (!isNullOrEmpty(this.clusterRoleName)) {
      if (k8sClient.rbac().kubernetesClusterRoles().withName(this.clusterRoleName).get() != null) {
        k8sClient
            .rbac()
            .kubernetesRoleBindings()
            .inNamespace(namespace)
            .createOrReplace(createCustomRoleBinding(this.clusterRoleName));
      } else {
        LOG.warn(
            "Unable to find the cluster role {}. Skip creating custom role binding.",
            this.clusterRoleName);
      }
    }
  }

