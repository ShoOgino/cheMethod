  /**
   * Waits until persistent volume claim state will suit for specified predicate.
   *
   * @param name name of persistent volume claim that should be watched
   * @param timeoutMillis waiting timeout in milliseconds
   * @param predicate predicate to perform state check
   * @return persistent volume claim that satisfies the specified predicate
   * @throws InfrastructureException when specified timeout is reached
   * @throws InfrastructureException when {@link Thread} is interrupted while waiting
   * @throws InfrastructureException when any other exception occurs
   */
  public PersistentVolumeClaim wait(
      String name, long timeoutMillis, Predicate<PersistentVolumeClaim> predicate)
      throws InfrastructureException {
    CompletableFuture<PersistentVolumeClaim> future = new CompletableFuture<>();
    Watch watch = null;
    try {
      Resource<PersistentVolumeClaim, DoneablePersistentVolumeClaim> pvcResource =
          clientFactory
              .create(workspaceId)
              .persistentVolumeClaims()
              .inNamespace(namespace)
              .withName(name);

      watch =
          pvcResource.watch(
              new Watcher<PersistentVolumeClaim>() {
                @Override
                public void eventReceived(Action action, PersistentVolumeClaim pvc) {
                  if (predicate.test(pvc)) {
                    future.complete(pvc);
                  }
                }

                @Override
                public void onClose(KubernetesClientException cause) {
                  future.completeExceptionally(
                      new InfrastructureException(
                          "Waiting for persistent volume claim '" + name + "' was interrupted"));
                }
              });

      PersistentVolumeClaim actualPvc = pvcResource.get();
      if (predicate.test(actualPvc)) {
        return actualPvc;
      }
      try {
        return future.get(timeoutMillis, TimeUnit.MILLISECONDS);
      } catch (ExecutionException e) {
        // May happen only if WebSocket Connection is closed before needed event received.
        // Throw internal exception because there may be some cluster/network issues that admin
        // should take a look.
        throw new InternalInfrastructureException(e.getCause().getMessage(), e);
      } catch (TimeoutException e) {
        // May happen when PVC is not bound in the time.
        // Throw internal exception because there may be some cluster configuration/performance
        // issues that admin should take a look.
        throw new InternalInfrastructureException(
            "Waiting for persistent volume claim '" + name + "' reached timeout");
      } catch (InterruptedException e) {
        Thread.currentThread().interrupt();
        throw new InfrastructureException(
            "Waiting for persistent volume claim '" + name + "' was interrupted");
      }
    } catch (KubernetesClientException e) {
      throw new KubernetesInfrastructureException(e);
    } finally {
      if (watch != null) {
        watch.close();
      }
    }
  }

