  /**
   * Finds secrets matching specified label selector.
   *
   * @param labelSelector selector to filter secrets
   * @return matched secrets list
   * @throws InfrastructureException when any exception occurs
   */
  public List<Secret> get(LabelSelector labelSelector) throws InfrastructureException {
    try {
      return clientFactory
          .create(workspaceId)
          .secrets()
          .inNamespace(namespace)
          .withLabelSelector(labelSelector)
          .list()
          .getItems();
    } catch (KubernetesClientException e) {
      throw new KubernetesInfrastructureException(e);
    }
  }

