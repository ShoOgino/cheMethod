  /**
   * Returns the function the result of which the completable stage that informs about bootstrapping
   * of the machine. Note that when the given machine does not contain installers then the result of
   * this function will be completed stage.
   */
  private Function<Void, CompletionStage<Void>> bootstrap(
      List<CompletableFuture<?>> toCancelFutures, KubernetesMachineImpl machine) {

    // Need to get active span here to allow use in returned function;
    final Span activeSpan = tracer.activeSpan();

    return ignored -> {
      // think about to return copy of machines in environment
      final InternalMachineConfig machineConfig =
          getContext().getEnvironment().getMachines().get(machine.getName());
      LOG.debug(
          "Bootstrapping machine '{}' in workspace '{}'",
          machine.getName(),
          getContext().getIdentity().getWorkspaceId());
      final CompletableFuture<Void> bootstrapperFuture;
      if (!machineConfig.getInstallers().isEmpty()) {
        // Span must be created within this lambda block, otherwise the span begins as soon as
        // this function is called (i.e. before the previous steps in the machine boot chain
        // are complete
        Span tracingSpan = tracer.buildSpan("BootstrapInstallers").asChildOf(activeSpan).start();
        TracingUtil.setWorkspaceIdAndMachineName(
            tracingSpan, getContext().getIdentity().getWorkspaceId(), machine.getName());

        bootstrapperFuture =
            bootstrapperFactory
                .create(
                    getContext().getIdentity(),
                    machineConfig.getInstallers(),
                    machine,
                    namespace,
                    startSynchronizer)
                .bootstrapAsync();
        bootstrapperFuture.whenComplete(
            (res, ex) -> {
              if (ex != null) {
                TracingUtil.setErrorStatus(tracingSpan, ex);
              }
              tracingSpan.finish();
            });
        toCancelFutures.add(bootstrapperFuture);
      } else {
        bootstrapperFuture = CompletableFuture.completedFuture(null);
      }
      return bootstrapperFuture;
    };
  }

