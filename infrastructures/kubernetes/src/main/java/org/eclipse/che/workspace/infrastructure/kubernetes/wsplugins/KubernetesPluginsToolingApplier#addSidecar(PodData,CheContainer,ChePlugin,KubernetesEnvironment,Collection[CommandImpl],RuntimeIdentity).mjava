  /**
   * Adds k8s and Che specific configuration of a sidecar into the environment. For example:
   * <li>k8s container configuration {@link Container}
   * <li>k8s service configuration {@link Service}
   * <li>Che machine config {@link InternalMachineConfig}
   * <li>Fill in machine name attribute in related commands
   *
   * @throws InfrastructureException when any error occurs
   */
  private void addSidecar(
      PodData pod,
      CheContainer container,
      ChePlugin chePlugin,
      KubernetesEnvironment kubernetesEnvironment,
      Collection<CommandImpl> sidecarRelatedCommands,
      RuntimeIdentity runtimeIdentity)
      throws InfrastructureException {

    K8sContainerResolver k8sContainerResolver =
        new K8sContainerResolverBuilder()
            .setContainer(container)
            .setImagePullPolicy(sidecarImagePullPolicy)
            .setPluginName(chePlugin.getName())
            .setPluginEndpoints(chePlugin.getEndpoints())
            .build();
    List<ChePluginEndpoint> containerEndpoints = k8sContainerResolver.getEndpoints();

    Container k8sContainer = k8sContainerResolver.resolve();

    String machineName = Names.machineName(pod, k8sContainer);
    pod.getSpec().getContainers().add(k8sContainer);

    MachineResolver machineResolver =
        new MachineResolverBuilder()
            .setCheContainer(container)
            .setContainer(k8sContainer)
            .setContainerEndpoints(containerEndpoints)
            .setDefaultSidecarMemorySizeAttribute(defaultSidecarMemoryLimitBytes)
            .setAttributes(kubernetesEnvironment.getAttributes())
            .setProjectsRootPathEnvVar(projectsRootEnvVariableProvider.get(runtimeIdentity))
            .setPluginId(chePlugin.getId())
            .build();

    InternalMachineConfig machineConfig = machineResolver.resolve();
    machineConfig.getAttributes().put(CONTAINER_SOURCE_ATTRIBUTE, TOOL_CONTAINER_SOURCE);
    kubernetesEnvironment.getMachines().put(machineName, machineConfig);

    sidecarRelatedCommands.forEach(c -> c.getAttributes().put("machineName", machineName));

    container
        .getCommands()
        .stream()
        .map(c -> asCommand(machineName, c))
        .forEach(c -> kubernetesEnvironment.getCommands().add(c));

    SidecarServicesProvisioner sidecarServicesProvisioner =
        new SidecarServicesProvisioner(containerEndpoints, pod.getMetadata().getName());
    sidecarServicesProvisioner.provision(kubernetesEnvironment);
  }

