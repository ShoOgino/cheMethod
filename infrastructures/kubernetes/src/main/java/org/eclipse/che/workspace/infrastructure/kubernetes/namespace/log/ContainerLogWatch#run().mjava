  /**
   * Do the best effort to get the logs from the container. The method is trying for {@link
   * LogWatchTimeouts#getWatchTimeoutMs()} to get the logs from the container. If response on log
   * request from the k8s is 40x, it possibly means that container is not ready to get the logs and
   * we'll try again after {@link LogWatchTimeouts#getWaitBeforeNextTry()} milliseconds.
   */
  @Override
  public void run() {
    Stopwatch stopwatch = Stopwatch.createStarted();
    // we try to get logs for `timeouts.getWatchTimeoutMs()`
    while (stopwatch.elapsed(TimeUnit.MILLISECONDS) < timeouts.getWatchTimeoutMs()) {

      // request k8s to get the logs from the container
      try (LogWatch logWatch =
          client
              .pods()
              .inNamespace(namespace)
              .withName(podName)
              .inContainer(containerName)
              .watchLog()) {

        // we need to synchroinze here to avoid adding new `currentLogWatch` after we close it
        synchronized (this) {
          if (closed) {
            return;
          }
          currentLogWatch = logWatch;
        }

        if (currentLogWatch.getOutput() == null
            || !readAndHandle(
                ByteStreams.limit(currentLogWatch.getOutput(), inputStreamLimit), logHandler)) {
          // failed to get the logs this time, so removing this watcher
          LOG.trace(
              "failed to get the logs for '{} : {} : {}'. Container probably still starting after [{}]ms.",
              namespace,
              podName,
              containerName,
              stopwatch.elapsed(TimeUnit.MILLISECONDS));

          // wait before next try
          Thread.sleep(timeouts.getWaitBeforeNextTry());
        } else {
          LOG.debug(
              "finished watching the logs of '{} : {} : {}'", namespace, podName, containerName);
          return;
        }
      } catch (InterruptedException e) {
        LOG.error(
            "Failed watch the logs '{} : {} : {}', nothing better to do here.",
            namespace,
            podName,
            containerName,
            e);
        return;
      }
    }
  }

