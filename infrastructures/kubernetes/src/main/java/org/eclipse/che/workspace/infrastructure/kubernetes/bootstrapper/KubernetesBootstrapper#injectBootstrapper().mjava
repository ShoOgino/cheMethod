  private void injectBootstrapper() throws InfrastructureException {
    final String mName = kubernetesMachine.getName();
    final RuntimeIdentityDto runtimeIdentityDto = DtoConverter.asDto(runtimeIdentity);
    final BiConsumer<String, String> outputConsumer =
        (stream, text) ->
            eventService.publish(
                DtoFactory.newDto(MachineLogEvent.class)
                    .withRuntimeId(runtimeIdentityDto)
                    .withStream(stream)
                    .withText(text)
                    .withTime(ZonedDateTime.now().format(ISO_OFFSET_DATE_TIME))
                    .withMachineName(mName));
    startSynchronizer.checkFailure();
    LOG.debug("Bootstrapping {}:{}. Creating folder for bootstrapper", runtimeIdentity, mName);
    exec(outputConsumer, "mkdir", "-p", BOOTSTRAPPER_DIR, bootstrapperLogsFolder);

    startSynchronizer.checkFailure();
    LOG.debug("Bootstrapping {}:{}. Downloading bootstrapper binary", runtimeIdentity, mName);
    exec(
        outputConsumer,
        "curl",
        "-fsSo",
        BOOTSTRAPPER_DIR + BOOTSTRAPPER_FILE,
        bootstrapperBinaryUrl);
    exec(outputConsumer, "chmod", "+x", BOOTSTRAPPER_DIR + BOOTSTRAPPER_FILE);

    startSynchronizer.checkFailure();
    LOG.debug("Bootstrapping {}:{}. Creating config file", runtimeIdentity, mName);
    exec("sh", "-c", "rm " + BOOTSTRAPPER_DIR + CONFIG_FILE);

    List<String> contentsToConcatenate = new ArrayList<>();
    contentsToConcatenate.add("[");
    boolean firstOne = true;
    for (Installer installer : installers) {
      if (firstOne) {
        firstOne = false;
      } else {
        contentsToConcatenate.add(",");
      }
      contentsToConcatenate.add(GSON.toJson(installer));
    }
    contentsToConcatenate.add("]");
    for (String content : contentsToConcatenate) {
      startSynchronizer.checkFailure();
      exec(
          "sh",
          "-c",
          "cat >> " + BOOTSTRAPPER_DIR + CONFIG_FILE + " << 'EOF'\n" + content + "\nEOF");
    }
  }

