  /**
   * Creates Kubernetes pods and resolves servers using the specified serverResolver.
   *
   * @param serverResolver server resolver that provide servers by container
   * @throws InfrastructureException when any error occurs while creating Kubernetes pods
   */
  protected void doStartMachine(KubernetesServerResolver serverResolver)
      throws InfrastructureException {
    machineStartupTraces =
        new ConcurrentHashMap<>(getContext().getEnvironment().getMachines().size());

    final KubernetesEnvironment environment = getContext().getEnvironment();
    final Map<String, InternalMachineConfig> machineConfigs = environment.getMachines();
    final String workspaceId = getContext().getIdentity().getWorkspaceId();
    LOG.info("Begin pods creation for workspace '{}'", workspaceId);
    for (Pod toCreate : environment.getPodsCopy().values()) {
      startTracingContainersStartup(toCreate.getMetadata(), toCreate.getSpec());
      ObjectMeta toCreateMeta = toCreate.getMetadata();
      final Pod createdPod = namespace.deployments().deploy(toCreate);
      LOG.debug("Creating pod '{}' in workspace '{}'", toCreateMeta.getName(), workspaceId);
      storeStartingMachine(createdPod, toCreateMeta, machineConfigs, serverResolver);
    }
    for (Deployment toCreate : environment.getDeploymentsCopy().values()) {
      PodTemplateSpec template = toCreate.getSpec().getTemplate();
      startTracingContainersStartup(template.getMetadata(), template.getSpec());
      ObjectMeta toCreateMeta = toCreate.getMetadata();
      final Pod createdPod = namespace.deployments().deploy(toCreate);
      LOG.debug("Creating deployment '{}' in workspace '{}'", toCreateMeta.getName(), workspaceId);
      // We need to pass the meta from the pod in the deployment as that is what matches
      // machine name
      final ObjectMeta templateMeta = toCreate.getSpec().getTemplate().getMetadata();
      storeStartingMachine(createdPod, templateMeta, machineConfigs, serverResolver);
    }
    LOG.info("Pods creation finished in workspace '{}'", workspaceId);
  }

