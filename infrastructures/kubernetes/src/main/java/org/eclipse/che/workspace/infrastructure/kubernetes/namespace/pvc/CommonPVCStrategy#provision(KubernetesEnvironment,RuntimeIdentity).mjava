  @Override
  public void provision(KubernetesEnvironment k8sEnv, RuntimeIdentity identity)
      throws InfrastructureException {
    final String workspaceId = identity.getWorkspaceId();
    if (EphemeralWorkspaceAdapter.isEphemeral(k8sEnv.getAttributes())) {
      ephemeralWorkspaceAdapter.provision(k8sEnv, identity);
      return;
    }
    LOG.debug("Provisioning PVC strategy for workspace '{}'", workspaceId);
    final Set<String> subPaths = new HashSet<>();
    final PersistentVolumeClaim pvc = newPVC(pvcName, pvcAccessMode, pvcQuantity);
    k8sEnv.getPersistentVolumeClaims().put(pvcName, pvc);
    for (Pod pod : k8sEnv.getPods().values()) {
      PodSpec podSpec = pod.getSpec();
      List<Container> containers = new ArrayList<>();
      containers.addAll(podSpec.getContainers());
      containers.addAll(podSpec.getInitContainers());
      for (Container container : podSpec.getContainers()) {
        String machineName = Names.machineName(pod, container);
        InternalMachineConfig machineConfig = k8sEnv.getMachines().get(machineName);
        addMachineVolumes(workspaceId, subPaths, pod, container, machineConfig.getVolumes());
      }
    }
    if (preCreateDirs && !subPaths.isEmpty()) {
      pvc.setAdditionalProperty(
          format(SUBPATHS_PROPERTY_FMT, workspaceId),
          subPaths.toArray(new String[subPaths.size()]));
    }
    LOG.debug("PVC strategy provisioning done for workspace '{}'", workspaceId);
  }

