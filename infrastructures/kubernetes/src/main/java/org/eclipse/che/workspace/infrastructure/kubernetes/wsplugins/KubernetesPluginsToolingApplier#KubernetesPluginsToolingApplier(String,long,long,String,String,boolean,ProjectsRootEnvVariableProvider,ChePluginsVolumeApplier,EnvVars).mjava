  @Inject
  public KubernetesPluginsToolingApplier(
      @Named("che.workspace.sidecar.image_pull_policy") String sidecarImagePullPolicy,
      @Named("che.workspace.sidecar.default_memory_limit_mb") long defaultSidecarMemoryLimitMB,
      @Named("che.workspace.sidecar.default_memory_request_mb") long defaultSidecarMemoryRequestMB,
      @Named("che.workspace.sidecar.default_cpu_limit_cores") String defaultSidecarCpuLimitCores,
      @Named("che.workspace.sidecar.default_cpu_request_cores")
          String defaultSidecarCpuRequestCores,
      @Named("che.agents.auth_enabled") boolean isAuthEnabled,
      ProjectsRootEnvVariableProvider projectsRootEnvVariableProvider,
      ChePluginsVolumeApplier chePluginsVolumeApplier,
      EnvVars envVars) {
    this.defaultSidecarMemoryLimitBytes = toBytesString(defaultSidecarMemoryLimitMB);
    this.defaultSidecarMemoryRequestBytes = toBytesString(defaultSidecarMemoryRequestMB);
    this.defaultSidecarCpuLimitCores =
        Float.toString(KubernetesSize.toCores(defaultSidecarCpuLimitCores));
    this.defaultSidecarCpuRequestCores =
        Float.toString(KubernetesSize.toCores(defaultSidecarCpuRequestCores));
    this.isAuthEnabled = isAuthEnabled;
    this.sidecarImagePullPolicy =
        validImagePullPolicies.contains(sidecarImagePullPolicy) ? sidecarImagePullPolicy : null;
    this.projectsRootEnvVariableProvider = projectsRootEnvVariableProvider;
    this.chePluginsVolumeApplier = chePluginsVolumeApplier;
    this.envVars = envVars;
  }

