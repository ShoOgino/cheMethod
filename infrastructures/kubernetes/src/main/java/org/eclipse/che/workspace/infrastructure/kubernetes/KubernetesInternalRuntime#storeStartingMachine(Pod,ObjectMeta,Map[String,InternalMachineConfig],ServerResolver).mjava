  /** Puts createdPod in the {@code machines} map and sends the starting event for this machine */
  private void storeStartingMachine(
      Pod createdPod,
      ObjectMeta toCreateMeta,
      Map<String, InternalMachineConfig> machineConfigs,
      ServerResolver serverResolver)
      throws InfrastructureException {
    final String workspaceId = getContext().getIdentity().getWorkspaceId();
    for (Container container : createdPod.getSpec().getContainers()) {
      String machineName = Names.machineName(toCreateMeta, container);

      LOG.debug("Creating machine '{}' in workspace '{}'", machineName, workspaceId);
      // Sometimes we facing NPE trying to retrieve machine config. Possible names mismatch. Need to
      // get more info on that cases.
      InternalMachineConfig machineConfig =
          Optional.ofNullable(machineConfigs.get(machineName))
              .orElseThrow(
                  () -> {
                    LOG.error(
                        "Workspace '{}' start failed. Machine with name '{}' requested but not found in configs map. Present machines are: {}.",
                        workspaceId,
                        machineName,
                        String.join(",", machineConfigs.keySet()));
                    return new InfrastructureException(
                        format(
                            "Unable to start the workspace '%s' due to an internal inconsistency while composing the workspace runtime."
                                + "Please report a bug. If possible, include the details from Che devfile and server log in bug report (your admin can help with that)",
                            workspaceId));
                  });
      machines.put(
          getContext().getIdentity(),
          new KubernetesMachineImpl(
              workspaceId,
              machineName,
              createdPod.getMetadata().getName(),
              container.getName(),
              MachineStatus.STARTING,
              machineConfig.getAttributes(),
              serverResolver.resolve(machineName)));
      eventPublisher.sendStartingEvent(machineName, getContext().getIdentity());
    }
  }

