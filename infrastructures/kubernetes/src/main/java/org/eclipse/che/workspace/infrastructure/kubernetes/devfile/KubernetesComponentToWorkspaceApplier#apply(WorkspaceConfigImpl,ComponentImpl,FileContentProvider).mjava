  /**
   * Applies changes on workspace config according to the specified kubernetes/openshift component.
   *
   * @param workspaceConfig workspace config on which changes should be applied
   * @param k8sComponent kubernetes/openshift component that should be applied
   * @param contentProvider content provider that may be used for external component resource
   *     fetching
   * @throws IllegalArgumentException if specified workspace config or plugin component is null
   * @throws IllegalArgumentException if specified component has type different from chePlugin
   * @throws DevfileException if specified content provider is null while kubernetes/openshift
   *     component required external file content
   * @throws DevfileException if external file content is empty or any error occurred during content
   *     retrieving
   */
  @Override
  public void apply(
      WorkspaceConfigImpl workspaceConfig,
      ComponentImpl k8sComponent,
      FileContentProvider contentProvider)
      throws DevfileException {
    checkArgument(workspaceConfig != null, "Workspace config must not be null");
    checkArgument(k8sComponent != null, "Component must not be null");
    checkArgument(
        kubernetesBasedComponentTypes.contains(k8sComponent.getType()),
        format("Plugin must have %s type", String.join(" or ", kubernetesBasedComponentTypes)));

    String componentContent = retrieveContent(k8sComponent, contentProvider);

    List<HasMetadata> componentObjects =
        new ArrayList<>(unmarshalComponentObjects(k8sComponent, componentContent));

    if (!k8sComponent.getSelector().isEmpty()) {
      componentObjects = SelectorFilter.filter(componentObjects, k8sComponent.getSelector());
    }

    List<PodData> podsData = getPodDatas(componentObjects);

    podsData
        .stream()
        .flatMap(e -> e.getSpec().getContainers().stream())
        .forEach(c -> c.setImagePullPolicy(imagePullPolicy));

    if (Boolean.TRUE.equals(k8sComponent.getMountSources())) {
      applyProjectsVolumes(podsData, componentObjects);
    }

    if (!k8sComponent.getEnv().isEmpty()) {
      podsData.forEach(p -> envVars.apply(p, k8sComponent.getEnv()));
    }

    applyEntrypoints(k8sComponent.getEntrypoints(), componentObjects);

    Map<String, MachineConfigImpl> machineConfigs =
        prepareMachineConfigs(podsData, k8sComponent.getAlias());

    linkCommandsToMachineName(workspaceConfig, k8sComponent, machineConfigs.keySet());

    k8sEnvProvisioner.provision(workspaceConfig, environmentType, componentObjects, machineConfigs);
  }

