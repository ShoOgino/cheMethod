  /**
   * Constructs a new provider returning one of the instances from the provided mapping
   *
   * <p>If the server exposure strategy is not "single-host", the {@link
   * WorkspaceExposureType#NATIVE native} is used to lookup the instance from the map.
   *
   * <p>If the server exposure strategy is "single-host", the appropriate instance is looked up in
   * the mapping that corresponds to the {@code singleHostType}.
   *
   * @param exposureStrategy the server exposure strategy
   * @param wsExposureType the type of workspace exposure under single-host
   * @param mapping the mapping for the different exposure types
   * @param errorMessageTemplate the template for the error message which should contain a single
   *     '%s' that is going to be replaced by the "wsExposureType" value.
   * @throws IllegalStateException if the mapping doesn't contain a value for the chosen server
   *     strategy and workspace exposure
   */
  protected AbstractExposureStrategyAwareProvider(
      @Named("che.infra.kubernetes.server_strategy") String exposureStrategy,
      @Named("che.infra.kubernetes.single_host.workspace.exposure") String wsExposureType,
      Map<WorkspaceExposureType, T> mapping,
      String errorMessageTemplate) {
    if (exposureStrategy.equals(SingleHostExternalServiceExposureStrategy.SINGLE_HOST_STRATEGY)) {
      instance = mapping.get(WorkspaceExposureType.fromConfigurationValue(wsExposureType));
    } else {
      instance = mapping.get(WorkspaceExposureType.NATIVE);
    }

    if (instance == null) {
      throw new IllegalStateException(String.format(errorMessageTemplate, wsExposureType));
    }
  }

