  @Override
  @Traced
  public void provision(KubernetesEnvironment k8sEnv, RuntimeIdentity identity)
      throws InfrastructureException {

    TracingTags.WORKSPACE_ID.set(identity::getWorkspaceId);

    final Map<String, InternalMachineConfig> machines = k8sEnv.getMachines();
    for (PodData pod : k8sEnv.getPodsData().values()) {
      for (Container container : pod.getSpec().getContainers()) {

        // make sure that machine configs have settings for RAM limit and request
        InternalMachineConfig machineConfig = machines.get(machineName(pod, container));
        ResourceLimitAttributesProvisioner.provisionMemory(
            machineConfig,
            Containers.getRamLimit(container),
            Containers.getRamRequest(container),
            defaultMachineMaxMemorySizeAttribute,
            defaultMachineRequestMemorySizeAttribute);

        // make sure that machine configs have settings for CPU limit and request
        ResourceLimitAttributesProvisioner.provisionCPU(
            machineConfig,
            Containers.getCpuLimit(container),
            Containers.getCpuRequest(container),
            defaultMachineCpuLimitAttribute,
            defaultMachineCpuRequestAttribute);

        // reapply memory and CPU settings to k8s container to make sure that provisioned
        // values above are set. Non-positive value means that limit is disabled, so just
        // ignoring them.
        final Map<String, String> attributes = machineConfig.getAttributes();
        long memLimit = Long.parseLong(attributes.get(MEMORY_LIMIT_ATTRIBUTE));
        if (memLimit > 0) {
          Containers.addRamLimit(container, memLimit);
        }
        long memRequest = Long.parseLong(attributes.get(MEMORY_REQUEST_ATTRIBUTE));
        if (memRequest > 0) {
          Containers.addRamRequest(container, memRequest);
        }
        float cpuLimit = Float.parseFloat(attributes.get(CPU_LIMIT_ATTRIBUTE));
        if (cpuLimit > 0) {
          Containers.addCpuLimit(container, cpuLimit);
        }
        float cpuRequest = Float.parseFloat(attributes.get(CPU_REQUEST_ATTRIBUTE));
        if (cpuRequest > 0) Containers.addCpuRequest(container, cpuRequest);
      }
    }
  }

