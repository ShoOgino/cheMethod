  /**
   * Awaits until workspace start process will be completed.
   *
   * <p>Returns true is interruption is completed. Or returns false when interruption wasn't
   * received or processed by start thread and workspace is STARTING or STOPPING. So it's needed to
   * stop a runtime and clean up used resources.
   *
   * @throws InterruptedException if the current thread is interrupted while waiting
   */
  public boolean awaitInterruption(long timeout, TimeUnit unit) throws InterruptedException {
    boolean isCompleted = completionLatch.await(timeout, unit);

    if (isCompleted) {
      // check start failure
      try {
        startFailure.get();
      } catch (ExecutionException e) {
        // start is interrupted or failed. Resources are freed
        return true;
      }
    }
    // runtime start is still in progress
    return false;
  }

