  /**
   * Exposes specified servers.
   *
   * <p>Note that created Kubernetes objects will select the corresponding pods by {@link
   * Constants#CHE_ORIGINAL_NAME_LABEL} label. That should be added by {@link
   * UniqueNamesProvisioner}.
   *
   * @param servers servers to expose
   * @see ConfigurationProvisioner#provision(KubernetesEnvironment, RuntimeIdentity)
   */
  public void expose(Map<String, ? extends ServerConfig> servers) throws InfrastructureException {
    Map<String, ServerConfig> internalServers = new HashMap<>();
    Map<String, ServerConfig> externalServers = new HashMap<>();
    Map<String, ServerConfig> secureServers = new HashMap<>();

    servers.forEach(
        (key, value) -> {
          if (value.isInternal()) {
            // Server is internal. It doesn't make sense to make an it secure since
            // it is available only within workspace servers
            internalServers.put(key, value);
          } else {
            // Server is external. Check if it should be secure or not
            if (value.isSecure()) {
              secureServers.put(key, value);
            } else {
              externalServers.put(key, value);
            }
          }
        });

    Collection<ServicePort> servicePorts = exposePorts(servers.values());
    Service service =
        new ServerServiceBuilder()
            .withName(generate(SERVER_PREFIX, SERVER_UNIQUE_PART_SIZE) + '-' + machineName)
            .withMachineName(machineName)
            .withSelectorEntry(CHE_ORIGINAL_NAME_LABEL, pod.getMetadata().getName())
            .withPorts(new ArrayList<>(servicePorts))
            .withServers(internalServers)
            .build();

    String serviceName = service.getMetadata().getName();
    k8sEnv.getServices().put(serviceName, service);

    for (ServicePort servicePort : servicePorts) {
      // expose service port related external servers if exist
      Map<String, ServerConfig> matchedExternalServers = match(externalServers, servicePort);
      if (!matchedExternalServers.isEmpty()) {
        onEachExposableServerSet(
            matchedExternalServers,
            (serverId, srvrs) -> {
              externalServerExposer.expose(
                  k8sEnv, machineName, serviceName, serverId, servicePort, srvrs);
            });
      }

      // expose service port related secure servers if exist
      Map<String, ServerConfig> matchedSecureServers = match(secureServers, servicePort);
      if (!matchedSecureServers.isEmpty()) {
        onEachExposableServerSet(
            matchedSecureServers,
            (serverId, srvrs) -> {
              secureServerExposer.expose(
                  k8sEnv, machineName, serviceName, serverId, servicePort, matchedSecureServers);
            });
      }
    }
  }

