  /**
   * Operations that are done in this method are described in java doc of {@link
   * UniqueWorkspacePVCStrategy}.
   */
  private void processUserDefinedPVCs(
      KubernetesEnvironment k8sEnv,
      RuntimeIdentity identity,
      String workspaceId,
      Map<String, PersistentVolumeClaim> volumeName2PVC) {
    // process user-defined PVCs according to unique strategy
    final Map<String, PersistentVolumeClaim> envClaims = k8sEnv.getPersistentVolumeClaims();
    Map<String, PersistentVolumeClaim> userDefinedPVCs =
        envClaims
            .values()
            .stream()
            .filter(
                p -> {
                  Object isProvisioned =
                      p.getAdditionalProperties().get(CHE_PROVISIONED_PVC_PROPERTY);
                  return !(isProvisioned instanceof Boolean) || !(Boolean) isProvisioned;
                })
            .collect(toMap(pvc -> pvc.getMetadata().getName(), Function.identity()));

    prefixSubpaths(userDefinedPVCs.keySet(), k8sEnv.getPodsData(), identity.getWorkspaceId());

    for (PersistentVolumeClaim pvc : userDefinedPVCs.values()) {
      String originalPVCName = pvc.getMetadata().getName();

      PersistentVolumeClaim existingPVC = volumeName2PVC.get(originalPVCName);

      if (existingPVC != null) {
        // Replace pvc in environment with existing. Fix the references in Pods
        envClaims.remove(originalPVCName);
        changePVCReferences(
            k8sEnv.getPodsData(), originalPVCName, existingPVC.getMetadata().getName());
      } else {
        // there is no the corresponding existing pvc
        // new one should be created with generated name
        putLabel(pvc, CHE_VOLUME_NAME_LABEL, originalPVCName);
        putLabel(pvc, CHE_WORKSPACE_ID_LABEL, workspaceId);

        final String uniqueName = Names.generateName(pvcNamePrefix + '-');
        pvc.getMetadata().setName(uniqueName);
        pvc.getAdditionalProperties().put(CHE_PROVISIONED_PVC_PROPERTY, true);
        envClaims.remove(originalPVCName);
        envClaims.put(uniqueName, pvc);

        volumeName2PVC.put(originalPVCName, pvc);
        changePVCReferences(k8sEnv.getPodsData(), originalPVCName, uniqueName);
      }
    }
  }

