  /**
   * Subscribes to pod events and returns the resulting future, which ends when a pod event that
   * satisfies the predicate is received.
   *
   * <p>Note that the resulting future must be explicitly cancelled when its completion no longer
   * important because of finalization allocated resources.
   *
   * @param name the pod name that should be watched
   * @param predicate a function that performs pod state check
   * @return completable future that is completed when one of the following conditions is met:
   *     <ul>
   *       <li>an event that satisfies predicate is received
   *       <li>exception while getting pod resource occurred
   *       <li>connection problem occurred
   *     </ul>
   *     otherwise, it must be explicitly closed
   */
  public CompletableFuture<Void> waitAsync(String name, Predicate<Pod> predicate) {
    final CompletableFuture<Void> podRunningFuture = new CompletableFuture<>();
    try {
      final PodResource<Pod, DoneablePod> podResource =
          clientFactory.create().pods().inNamespace(namespace).withName(name);
      final Watch watch =
          podResource.watch(
              new Watcher<Pod>() {
                @Override
                public void eventReceived(Action action, Pod pod) {
                  if (predicate.test(pod)) {
                    podRunningFuture.complete(null);
                  }
                }

                @Override
                public void onClose(KubernetesClientException cause) {
                  podRunningFuture.completeExceptionally(
                      new InfrastructureException(
                          "Waiting for pod '" + name + "' was interrupted"));
                }
              });

      podRunningFuture.whenComplete((ok, ex) -> watch.close());
      final Pod pod = podResource.get();
      if (pod == null) {
        podRunningFuture.completeExceptionally(
            new InfrastructureException("Specified pod " + name + " doesn't exist"));
      }
      if (predicate.test(pod)) {
        podRunningFuture.complete(null);
      }
    } catch (KubernetesClientException | InfrastructureException ex) {
      podRunningFuture.completeExceptionally(ex);
    }
    return podRunningFuture;
  }

