  /**
   * Create all machine related objects and start machines.
   *
   * @throws InfrastructureException when any error occurs while creating Kubernetes objects
   */
  protected void startMachines() throws InfrastructureException {
    KubernetesEnvironment k8sEnv = getContext().getEnvironment();

    for (Secret secret : k8sEnv.getSecrets().values()) {
      namespace.secrets().create(secret);
    }

    for (ConfigMap configMap : k8sEnv.getConfigMaps().values()) {
      namespace.configMaps().create(configMap);
    }

    List<Service> createdServices = new ArrayList<>();
    for (Service service : k8sEnv.getServices().values()) {
      createdServices.add(namespace.services().create(service));
    }

    // needed for resolution later on, even though n routes are actually created by ingress
    // /workspace{wsid}/server-{port} => service({wsid}):server-port => pod({wsid}):{port}
    List<Ingress> readyIngresses = createAndWaitReady(k8sEnv.getIngresses().values());

    // TODO https://github.com/eclipse/che/issues/7653
    // namespace.pods().watch(new AbnormalStopHandler());
    namespace.deployments().watchEvents(new MachineLogsPublisher());
    if (unrecoverableEventListenerFactory.isConfigured()) {
      Map<String, Pod> pods = getContext().getEnvironment().getPods();
      namespace
          .deployments()
          .watchEvents(
              unrecoverableEventListenerFactory.create(
                  pods.keySet(), this::handleUnrecoverableEvent));
    }

    final KubernetesServerResolver serverResolver =
        new KubernetesServerResolver(createdServices, readyIngresses);

    doStartMachine(serverResolver);
  }

