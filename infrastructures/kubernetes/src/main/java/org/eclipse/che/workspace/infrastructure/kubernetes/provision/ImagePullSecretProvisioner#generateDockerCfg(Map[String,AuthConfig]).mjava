  /**
   * Generates a dockercfg file with the authentication information contained in the given {@code
   * authConfigs} parameter.
   *
   * <p>The syntax of the produced <code>dockercfg</code> file is as follow:
   *
   * <pre><code>
   *   {
   *     "private.repo.1" : {
   *        "username": "theUsername1",
   *        "password": "thePassword1",
   *        "email": "theEmail1",
   *        "auth": "<base64 encoding of username:password>",
   *      },
   *     "private.repo.2" : {
   *        "username": "theUsername2",
   *        "password": "thePassword2",
   *        "email": "theEmail2",
   *        "auth": "<base64 encoding of username:password>",
   *      }
   *   }
   * </code></pre>
   */
  private String generateDockerCfg(Map<String, AuthConfig> authConfigs)
      throws InfrastructureException {
    try (StringWriter strWriter = new StringWriter();
        JsonWriter jsonWriter = new Gson().newJsonWriter(strWriter)) {
      Base64.Encoder encoder = Base64.getEncoder();

      jsonWriter.beginObject();
      for (Map.Entry<String, AuthConfig> entry : authConfigs.entrySet()) {
        String name = entry.getKey();
        AuthConfig authConfig = entry.getValue();
        try {
          if (!name.startsWith("https://") && !name.startsWith("http://")) {
            name = "https://" + name;
          }
          jsonWriter.name(name);
          jsonWriter.beginObject();
          jsonWriter.name("username");
          jsonWriter.value(authConfig.getUsername());
          jsonWriter.name("password");
          jsonWriter.value(authConfig.getPassword());
          jsonWriter.name("email");
          jsonWriter.value("email@email");
          String auth =
              new StringBuilder(authConfig.getUsername())
                  .append(':')
                  .append(authConfig.getPassword())
                  .toString();
          jsonWriter.name("auth");
          jsonWriter.value(encoder.encodeToString(auth.getBytes()));
          jsonWriter.endObject();
        } catch (IOException e) {
          throw new InfrastructureException(
              "Unexpected exception occured while building the 'ImagePullSecret' from private docker registry user preferences",
              e);
        }
      }

      jsonWriter.endObject();
      jsonWriter.flush();
      return strWriter.toString();
    } catch (IOException e) {
      throw new InfrastructureException(e);
    }
  }

