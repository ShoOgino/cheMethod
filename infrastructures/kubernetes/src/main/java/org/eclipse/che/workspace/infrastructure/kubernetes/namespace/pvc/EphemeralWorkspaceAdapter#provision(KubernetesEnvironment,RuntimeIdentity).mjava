  public void provision(KubernetesEnvironment k8sEnv, RuntimeIdentity identity)
      throws InfrastructureException {
    LOG.debug("Provisioning PVC strategy for workspace '{}'", identity.getWorkspaceId());
    for (PodData pod : k8sEnv.getPodsData().values()) {
      PodSpec podSpec = pod.getSpec();

      // To ensure same volumes get mounted correctly in different containers, we need to track
      // which volumes have been "created"
      Map<String, String> volumeKeyToNameCache = new HashMap<>();

      List<Container> containers = new ArrayList<>();
      containers.addAll(podSpec.getContainers());
      containers.addAll(podSpec.getInitContainers());
      for (Container container : containers) {
        String machineName = Names.machineName(pod, container);
        Map<String, Volume> volumes = k8sEnv.getMachines().get(machineName).getVolumes();
        if (volumes.isEmpty()) {
          continue;
        }

        for (Entry<String, Volume> volumeEntry : volumes.entrySet()) {
          final String volumePath = volumeEntry.getValue().getPath();
          final String volumeKey =
              LOGS_VOLUME_NAME.equals(volumeEntry.getKey())
                  ? volumeEntry.getKey() + '-' + pod.getMetadata().getName()
                  : volumeEntry.getKey();

          final String uniqueVolumeName;
          if (volumeKeyToNameCache.containsKey(volumeKey)) {
            uniqueVolumeName = volumeKeyToNameCache.get(volumeKey);
          } else {
            uniqueVolumeName = Names.generateName(EPHEMERAL_VOLUME_NAME_PREFIX);
            volumeKeyToNameCache.put(volumeKey, uniqueVolumeName);
          }
          // binds volume to pod and container
          container
              .getVolumeMounts()
              .add(
                  newVolumeMount(
                      uniqueVolumeName,
                      volumePath,
                      getSubPath(identity.getWorkspaceId(), volumeKey, machineName)));
          addEmptyDirVolumeIfAbsent(pod.getSpec(), uniqueVolumeName);
        }
      }
    }
  }

