  private String envName(Secret secret, String key, RuntimeIdentity runtimeIdentity)
      throws InfrastructureException {
    String mountEnvName;
    if (secret.getData().size() == 1) {
      List<String> providedNames =
          Stream.of(
                  secret.getMetadata().getAnnotations().get(ANNOTATION_ENV_NAME),
                  secret
                      .getMetadata()
                      .getAnnotations()
                      .get(format(ANNOTATION_ENV_NAME_TEMPLATE, key)))
              .filter(Objects::nonNull)
              .collect(Collectors.toList());
      if (providedNames.isEmpty()) {
        throw new InfrastructureException(
            format(
                "Unable to mount secret '%s': It is configured to be mount as a environment variable, but its name was not specified. Please define the '%s' annotation on the secret to specify it.",
                secret.getMetadata().getName(), ANNOTATION_ENV_NAME));
      }

      if (providedNames.size() > 1) {
        String msg =
            String.format(
                "Secret '%s' defines multiple environment variable name annotations, but contains only one data entry. That may cause inconsistent behavior and needs to be corrected.",
                secret.getMetadata().getName());
        LOG.warn(msg);
        runtimeEventsPublisher.sendRuntimeLogEvent(
            msg, ZonedDateTime.now().toString(), runtimeIdentity);
      }
      mountEnvName = providedNames.get(0);
    } else {
      mountEnvName =
          secret.getMetadata().getAnnotations().get(format(ANNOTATION_ENV_NAME_TEMPLATE, key));
      if (mountEnvName == null) {
        throw new InfrastructureException(
            format(
                "Unable to mount key '%s'  of secret '%s': It is configured to be mount as a environment variable, but its name was not specified. Please define the '%s' annotation on the secret to specify it.",
                key, secret.getMetadata().getName(), format(ANNOTATION_ENV_NAME_TEMPLATE, key)));
      }
    }
    return mountEnvName;
  }

