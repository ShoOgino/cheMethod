  /**
   * Modifies Kubernetes environment to expose the specified service port via JWTProxy.
   *
   * @param k8sEnv Kubernetes environment to modify
   * @param backendServiceName service name that will be exposed
   * @param backendServicePort service port that will be exposed
   * @param protocol protocol that will be used for exposed port
   * @param secureServers secure servers to expose
   * @return JWTProxy service port that expose the specified one
   * @throws InfrastructureException if any exception occurs during port exposing
   */
  public ServicePort expose(
      KubernetesEnvironment k8sEnv,
      String backendServiceName,
      ServicePort backendServicePort,
      String protocol,
      Map<String, ServerConfig> secureServers)
      throws InfrastructureException {
    Preconditions.checkArgument(
        secureServers != null && !secureServers.isEmpty(), "Secure servers are missing");
    ensureJwtProxyInjected(k8sEnv);

    Set<String> excludes = new HashSet<>();
    Boolean cookiesAuthEnabled = null;
    for (ServerConfig config : secureServers.values()) {
      // accumulate unsecured paths
      if (config.getAttributes().containsKey(UNSECURED_PATHS_ATTRIBUTE)) {
        Collections.addAll(
            excludes, config.getAttributes().get(UNSECURED_PATHS_ATTRIBUTE).split(","));
      }

      // calculate `cookiesAuthEnabled` attributes
      Boolean serverCookiesAuthEnabled =
          parseBoolean(config.getAttributes().get(SECURE_SERVER_COOKIES_AUTH_ENABLED_ATTRIBUTE));
      if (cookiesAuthEnabled == null) {
        cookiesAuthEnabled = serverCookiesAuthEnabled;
      } else {
        if (!cookiesAuthEnabled.equals(serverCookiesAuthEnabled)) {
          throw new InfrastructureException(
              "Secure servers which expose the same port should have the same `cookiesAuthEnabled` value.");
        }
      }
    }

    int listenPort = availablePort++;

    ServicePort exposedPort =
        new ServicePortBuilder()
            .withName("server-" + listenPort)
            .withPort(listenPort)
            .withProtocol(protocol)
            .withNewTargetPort(listenPort)
            .build();

    k8sEnv.getServices().get(serviceName).getSpec().getPorts().add(exposedPort);

    proxyConfigBuilder.addVerifierProxy(
        listenPort,
        "http://" + backendServiceName + ":" + backendServicePort.getTargetPort().getIntVal(),
        excludes,
        cookiesAuthEnabled,
        cookiePathStrategy.get(serviceName, exposedPort),
        externalServiceExposureStrategy.getExternalPath(serviceName, exposedPort.getName()));
    k8sEnv
        .getConfigMaps()
        .get(getConfigMapName())
        .getData()
        .put(JWT_PROXY_CONFIG_FILE, proxyConfigBuilder.build());

    return exposedPort;
  }

