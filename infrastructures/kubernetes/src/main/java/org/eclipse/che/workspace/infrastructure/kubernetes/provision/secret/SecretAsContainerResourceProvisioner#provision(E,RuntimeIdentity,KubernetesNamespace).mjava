  public void provision(E env, RuntimeIdentity runtimeIdentity, KubernetesNamespace namespace)
      throws InfrastructureException {
    LabelSelector selector = new LabelSelectorBuilder().withMatchLabels(secretLabels).build();
    for (Secret secret : namespace.secrets().get(selector)) {
      if (secret.getMetadata().getAnnotations() == null) {
        throw new InfrastructureException(
            format(
                "Unable to mount secret '%s': it has missing required annotations. Please check documentation for secret format guide.",
                secret.getMetadata().getName()));
      }
      String mountType = secret.getMetadata().getAnnotations().get(ANNOTATION_MOUNT_AS);
      if ("env".equalsIgnoreCase(mountType)) {
        environmentVariableSecretApplier.applySecret(env, runtimeIdentity, secret);
      } else if ("file".equalsIgnoreCase(mountType)) {
        if (parseBoolean(secret.getMetadata().getAnnotations().get(ANNOTATION_GIT_CREDENTIALS))) {
          gitCredentialStorageFileSecretApplier.applySecret(env, runtimeIdentity, secret);
        } else {
          fileSecretApplier.applySecret(env, runtimeIdentity, secret);
        }

      } else {
        throw new InfrastructureException(
            format(
                "Unable to mount secret '%s': it has missing or unknown type of the mount. Please make sure that '%s' annotation has value either 'env' or 'file'.",
                secret.getMetadata().getName(), ANNOTATION_MOUNT_AS));
      }
    }
  }

