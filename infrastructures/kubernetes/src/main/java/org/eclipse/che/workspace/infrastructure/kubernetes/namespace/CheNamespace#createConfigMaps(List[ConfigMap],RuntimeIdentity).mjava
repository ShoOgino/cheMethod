  /**
   * Creates given {@link ConfigMap}s in Che installation namespace labeled with `workspaceId` from
   * given `identity`.
   *
   * <p>`workspaceId` from given `identity` must be valid workspace ID, that is in {@link
   * WorkspaceStatus#STARTING} state. Otherwise, {@link InfrastructureException} is thrown.
   *
   * <p>all given {@code configMaps} must be annotated with {@link
   * Annotations#CREATE_IN_CHE_INSTALLATION_NAMESPACE} set to 'true'.
   *
   * @param configMaps to create
   * @param identity to validate and label configmaps
   * @return created {@link ConfigMap}s
   * @throws InfrastructureException when something goes wrong
   */
  public List<ConfigMap> createConfigMaps(List<ConfigMap> configMaps, RuntimeIdentity identity)
      throws InfrastructureException {
    if (configMaps.isEmpty()) {
      return Collections.emptyList();
    }
    validate(identity, WorkspaceStatus.STARTING);

    List<ConfigMap> createdConfigMaps = new ArrayList<>();
    for (ConfigMap cm : configMaps) {
      createdConfigMaps.add(createConfigMap(cm, identity));
    }
    return createdConfigMaps;
  }

