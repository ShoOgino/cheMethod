  /**
   * Waits for the tooling that needs to be injected into a workspace being submitted by calls of
   * {@link #brokerResult(List)}.
   *
   * <p>Number of calls of {@link #brokerResult(List)} needs to be the same as number of calls of
   * {@link #oneMoreBroker()}.
   * Returned list is a combination of lists submitted to {@link #brokerResult(List)}. If provided
   * timeout elapses before all needed calls of {@link #brokerResult(List)} method ends with an
   * exception. This method is based on {@link CompletableFuture#get(long, TimeUnit)} so it also
   * inherits parameters and thrown exception.
   *
   * @return tooling submitted by one or several brokers that needs to be injected into a workspace
   * @throws IllegalStateException if called more than one time
   * @see CompletableFuture#get(long, TimeUnit)
   */
  public List<ChePlugin> get(long waitTime, TimeUnit tu)
      throws ExecutionException, InterruptedException, TimeoutException {
    if (started.compareAndSet(false, true)) {
      return future.get(waitTime, tu);
    } else {
      throw new IllegalStateException("BrokerResult#get doesn't support multiple calls");
    }
  }

