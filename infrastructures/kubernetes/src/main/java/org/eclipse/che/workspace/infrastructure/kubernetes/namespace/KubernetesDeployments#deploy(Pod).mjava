  /**
   * Starts the specified Pod via a Deployment.
   *
   * @param pod pod to deploy
   * @return created pod
   * @throws InfrastructureException when any exception occurs
   */
  public Pod deploy(Pod pod) throws InfrastructureException {
    putLabel(pod, CHE_WORKSPACE_ID_LABEL, workspaceId);

    ObjectMeta metadata = pod.getMetadata();
    // Note: metadata.name will be changed as for pods it is set by the deployment.
    String originalName = metadata.getName();
    putLabel(pod, CHE_DEPLOYMENT_NAME_LABEL, originalName);

    PodSpec podSpec = pod.getSpec();
    podSpec.setRestartPolicy("Always"); // Only allowable value
    final CompletableFuture<Pod> createFuture = new CompletableFuture<>();
    final Watch createWatch =
        clientFactory
            .create(workspaceId)
            .pods()
            .inNamespace(namespace)
            .watch(new CreateWatcher(createFuture, workspaceId, originalName));
    try {
      clientFactory
          .create(workspaceId)
          .apps()
          .deployments()
          .inNamespace(namespace)
          .createNew()
          .withMetadata(metadata)
          .withNewSpec()
          .withNewSelector()
          .withMatchLabels(metadata.getLabels())
          .endSelector()
          .withReplicas(1)
          .withNewTemplate()
          .withMetadata(metadata)
          .withSpec(podSpec)
          .endTemplate()
          .endSpec()
          .done();
      return createFuture.get(POD_CREATION_TIMEOUT_MIN, TimeUnit.MINUTES);
    } catch (KubernetesClientException e) {
      throw new KubernetesInfrastructureException(e);
    } catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new InfrastructureException(
          String.format(
              "Interrupted while waiting for Pod creation. -id: %s -message: %s",
              metadata.getName(), e.getMessage()));
    } catch (ExecutionException e) {
      throw new InfrastructureException(
          String.format(
              "Error occured while waiting for Pod creation. -id: %s -message: %s",
              metadata.getName(), e.getCause().getMessage()));
    } catch (TimeoutException e) {
      throw new InfrastructureException(
          String.format(
              "Pod creation timeout exceeded. -id: %s -message: %s",
              metadata.getName(), e.getMessage()));
    } finally {
      createWatch.close();
    }
  }

