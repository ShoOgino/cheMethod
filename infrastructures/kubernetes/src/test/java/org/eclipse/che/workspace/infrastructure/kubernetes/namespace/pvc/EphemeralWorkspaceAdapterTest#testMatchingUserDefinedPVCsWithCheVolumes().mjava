  @Test
  public void testMatchingUserDefinedPVCsWithCheVolumes() throws Exception {
    // given
    k8sEnv.getPersistentVolumeClaims().put("pvc1", mock(PersistentVolumeClaim.class));

    io.fabric8.kubernetes.api.model.Volume pvcVolume =
        new VolumeBuilder()
            .withName("pvc1volume")
            .withNewPersistentVolumeClaim()
            .withClaimName("pvc1")
            .endPersistentVolumeClaim()
            .build();
    Pod pod =
        new PodBuilder()
            .withNewMetadata()
            .withName("pod")
            .endMetadata()
            .withNewSpec()
            .withContainers(
                new ContainerBuilder()
                    .withName("c1")
                    .withVolumeMounts(new VolumeMountBuilder().withName("pvc1volume").build())
                    .build(),
                new ContainerBuilder().withName("c2").build())
            .withVolumes(new VolumeBuilder(pvcVolume).build())
            .endSpec()
            .build();
    k8sEnv.addPod(pod);

    k8sEnv.setMachines(new HashMap<>());
    k8sEnv.getMachines().put("pod/c1", new InternalMachineConfig());
    InternalMachineConfig machine2 = new InternalMachineConfig();
    machine2.getVolumes().put("pvc1", new VolumeImpl().withPath("/tmp/pvc1"));
    k8sEnv.getMachines().put("pod/c2", machine2);

    // when
    ephemeralWorkspaceAdapter.provision(k8sEnv, runtimeIdentity);

    // then
    assertTrue(k8sEnv.getPersistentVolumeClaims().isEmpty());
    List<io.fabric8.kubernetes.api.model.Volume> podVolumes = pod.getSpec().getVolumes();
    assertEquals(podVolumes.size(), 1);
    io.fabric8.kubernetes.api.model.Volume podVolume = podVolumes.get(0);
    assertNull(podVolume.getPersistentVolumeClaim());
    assertEquals(podVolume.getEmptyDir(), new EmptyDirVolumeSource());

    Container c1 = pod.getSpec().getContainers().get(0);
    VolumeMount c1VolumeMount = c1.getVolumeMounts().get(0);
    assertEquals(c1VolumeMount.getName(), podVolume.getName());

    Container c2 = pod.getSpec().getContainers().get(1);
    VolumeMount c2VolumeMount = c2.getVolumeMounts().get(0);
    assertEquals(c2VolumeMount.getName(), podVolume.getName());
  }

