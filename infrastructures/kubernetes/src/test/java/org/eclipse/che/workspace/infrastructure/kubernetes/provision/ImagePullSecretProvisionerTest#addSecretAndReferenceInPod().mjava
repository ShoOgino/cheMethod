  @Test
  public void addSecretAndReferenceInPod() throws Exception {
    when(authConfigs.getConfigs())
        .thenReturn(
            ImmutableMap.of(
                "reg1",
                new TestAuthConfig().withUsername("username1").withPassword("password1"),
                "reg2",
                new TestAuthConfig().withUsername("username2").withPassword("password2")));

    imagePullSecretProvisioner.provision(k8sEnv, runtimeIdentity);

    verify(podSpec)
        .setImagePullSecrets(ImmutableList.of(newImagePullSecretRef, existingImagePullSecretRef));

    ArgumentCaptor<Secret> varArgs = ArgumentCaptor.forClass(Secret.class);
    verify(namespaceOperation).createOrReplace(varArgs.capture());

    List<Secret> addedSecrets = varArgs.getAllValues();

    assertEquals(addedSecrets.size(), 1);
    Secret secret = addedSecrets.get(0);

    Assert.assertEquals(secret.getType(), "kubernetes.io/dockercfg");
    String dockerCfgData = secret.getData().get(".dockercfg");
    Assert.assertNotNull(dockerCfgData);
    Gson gson = new Gson();
    assertEquals(
        gson.toJson(
            gson.fromJson(new String(Base64.getDecoder().decode(dockerCfgData)), Map.class)),
        gson.toJson(
            gson.fromJson(
                ""
                    + "{ \"https://reg1\": { \"username\": \"username1\", \"password\": \"password1\", \"email\": \"email@email\", \"auth\": \""
                    + buildAuth("username1", "password1")
                    + "\" }"
                    + ", \"https://reg2\": { \"username\": \"username2\", \"password\": \"password2\", \"email\": \"email@email\", \"auth\": \""
                    + buildAuth("username2", "password2")
                    + "\" }"
                    + "}",
                Map.class)));
  }

