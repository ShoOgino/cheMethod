  @BeforeMethod
  public void setUp() throws Exception {
    Map<String, String> ephemeralEnvAttributes = new HashMap<>(environmentAttributesBase);
    EphemeralWorkspaceUtility.makeEphemeral(ephemeralEnvAttributes);
    Map<String, String> nonEphemeralEnvAttributes = new HashMap<>(environmentAttributesBase);

    Map<String, String> mergePluginsEnvAttributes = new HashMap<>(environmentAttributesBase);
    mergePluginsEnvAttributes.put(MERGE_PLUGINS_ATTRIBUTE, "true");
    Map<String, String> noMergePluginsEnvAttributes = new HashMap<>(environmentAttributesBase);
    noMergePluginsEnvAttributes.put(MERGE_PLUGINS_ATTRIBUTE, "false");

    lenient().doReturn(RECIPE_TYPE).when(nonEphemeralEnvironment).getType();
    lenient().doReturn(RECIPE_TYPE).when(ephemeralEnvironment).getType();
    lenient().doReturn(RECIPE_TYPE).when(mergePluginsEnvironment).getType();
    lenient().doReturn(RECIPE_TYPE).when(noMergePluginsEnvironment).getType();
    lenient().doReturn(nonEphemeralEnvAttributes).when(nonEphemeralEnvironment).getAttributes();
    lenient().doReturn(ephemeralEnvAttributes).when(ephemeralEnvironment).getAttributes();
    lenient().doReturn(mergePluginsEnvAttributes).when(mergePluginsEnvironment).getAttributes();
    lenient().doReturn(noMergePluginsEnvAttributes).when(noMergePluginsEnvironment).getAttributes();
    doReturn(pluginFQNs).when(pluginFQNParser).parsePlugins(any());
  }

