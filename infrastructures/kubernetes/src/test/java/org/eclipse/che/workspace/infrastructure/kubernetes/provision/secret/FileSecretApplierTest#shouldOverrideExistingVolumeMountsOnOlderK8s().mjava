  @Test
  public void shouldOverrideExistingVolumeMountsOnOlderK8s() throws InfrastructureException {
    lenient().when(kubernetesVersion.newerOrEqualThan(1, 13)).thenReturn(false);
    lenient().when(kubernetesVersion.olderThan(1, 13)).thenReturn(true);

    Container container_match1 =
        new ContainerBuilder()
            .withName("maven")
            .withVolumeMounts(
                new VolumeMountBuilder()
                    .withName("existing-volume")
                    .withMountPath("/home/user/.m2")
                    .build())
            .build();

    PodSpec localSpec =
        new PodSpecBuilder().withContainers(ImmutableList.of(container_match1)).build();

    when(podData.getSpec()).thenReturn(localSpec);

    Secret secret =
        new SecretBuilder()
            .withData(ImmutableMap.of("settings.xml", "random"))
            .withMetadata(
                new ObjectMetaBuilder()
                    .withName("test_secret")
                    .withAnnotations(
                        ImmutableMap.of(
                            ANNOTATION_MOUNT_AS,
                            "file",
                            ANNOTATION_MOUNT_PATH,
                            "/home/user/.m2",
                            ANNOTATION_AUTOMOUNT,
                            "true"))
                    .withLabels(emptyMap())
                    .build())
            .build();

    secretApplier.applySecret(environment, runtimeIdentity, secret);

    // pod has volume created
    assertEquals(environment.getPodsData().get("pod1").getSpec().getVolumes().size(), 1);
    Volume volume = environment.getPodsData().get("pod1").getSpec().getVolumes().get(0);
    assertEquals(volume.getName(), "test_secret");
    assertEquals(volume.getSecret().getSecretName(), "test_secret");

    assertEquals(
        environment
            .getPodsData()
            .get("pod1")
            .getSpec()
            .getContainers()
            .get(0)
            .getVolumeMounts()
            .size(),
        1);
    VolumeMount secretMount =
        environment
            .getPodsData()
            .get("pod1")
            .getSpec()
            .getContainers()
            .get(0)
            .getVolumeMounts()
            .get(0);
    assertEquals(secretMount.getName(), "test_secret");
    assertEquals(secretMount.getMountPath(), "/home/user/.m2");
    assertNull(secretMount.getSubPath());
  }

