  @Test
  public void shouldProvisionServiceAndIngressWhenNotFound()
      throws InternalInfrastructureException {
    Mockito.when(
            externalServiceExposureStrategy.getExternalPath(Mockito.anyString(), Mockito.any()))
        .thenReturn("some-server-path");

    final int PORT = 8080;
    final String SERVER_PORT_NAME = "server-" + PORT;

    CommandImpl command =
        new CommandImpl("a", "a", "a", new PreviewUrlImpl(PORT, null), Collections.emptyMap());

    KubernetesEnvironment env =
        KubernetesEnvironment.builder()
            .setCommands(singletonList(new CommandImpl(command)))
            .setIngresses(new HashMap<>())
            .setServices(new HashMap<>())
            .build();

    previewUrlExposer.expose(env);

    assertEquals(env.getIngresses().size(), 1);
    assertEquals(env.getServices().size(), 1);

    Service provisionedService = env.getServices().values().iterator().next();
    ServicePort provisionedServicePort = provisionedService.getSpec().getPorts().get(0);
    assertEquals(provisionedServicePort.getName(), SERVER_PORT_NAME);
    assertEquals(provisionedServicePort.getPort().intValue(), PORT);

    Ingress provisionedIngress = env.getIngresses().values().iterator().next();
    IngressBackend provisionedIngressBackend =
        provisionedIngress.getSpec().getRules().get(0).getHttp().getPaths().get(0).getBackend();
    assertEquals(provisionedIngressBackend.getServicePort().getStrVal(), SERVER_PORT_NAME);
    assertEquals(
        provisionedIngressBackend.getServiceName(), provisionedService.getMetadata().getName());
  }

