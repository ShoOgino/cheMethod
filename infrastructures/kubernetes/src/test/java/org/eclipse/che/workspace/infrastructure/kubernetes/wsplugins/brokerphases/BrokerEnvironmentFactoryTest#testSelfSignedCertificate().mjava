  @Test
  public void testSelfSignedCertificate() throws Exception {
    when(certProvisioner.isConfigured()).thenReturn(true);
    when(certProvisioner.getCertPath()).thenReturn("/tmp/che/cacert");
    // given
    Collection<PluginFQN> pluginFQNs = singletonList(new PluginFQN(null, "id"));
    ArgumentCaptor<BrokersConfigs> captor = ArgumentCaptor.forClass(BrokersConfigs.class);

    // when
    factory.create(pluginFQNs, runtimeId);

    // then
    verify(factory).doCreate(captor.capture());
    BrokersConfigs brokersConfigs = captor.getValue();

    List<Container> initContainers = brokersConfigs.pod.getSpec().getInitContainers();
    assertEquals(initContainers.size(), 1);
    Container initContainer = initContainers.get(0);
    assertEquals(
        initContainer.getArgs().toArray(),
        new String[] {
          "-push-endpoint",
          PUSH_ENDPOINT,
          "-runtime-id",
          String.format(
              "%s:%s:%s",
              runtimeId.getWorkspaceId(), runtimeId.getEnvName(), runtimeId.getOwnerId()),
          "-cacert",
          "/tmp/che/cacert",
          "--registry-address",
          DEFAULT_REGISTRY,
        });

    List<Container> containers = brokersConfigs.pod.getSpec().getContainers();
    assertEquals(containers.size(), 1);
    Container container = containers.get(0);
    assertEquals(
        container.getArgs().toArray(),
        new String[] {
          "-push-endpoint",
          PUSH_ENDPOINT,
          "-runtime-id",
          String.format(
              "%s:%s:%s",
              runtimeId.getWorkspaceId(), runtimeId.getEnvName(), runtimeId.getOwnerId()),
          "-cacert",
          "/tmp/che/cacert",
          "--registry-address",
          DEFAULT_REGISTRY,
          "-metas",
          "/broker-config/config.json",
        });
  }

