  @Test
  public void shouldProvisionDevfileVolumesIfSpecifiedIntoMachineConfig() throws Exception {
    // given
    String yamlRecipeContent = getResource("devfile/petclinic.yaml");
    List<HasMetadata> k8sList = toK8SList(yamlRecipeContent).getItems();
    doReturn(k8sList).when(k8sRecipeParser).parse(anyString());
    ComponentImpl component = new ComponentImpl();
    component.setType(KUBERNETES_COMPONENT_TYPE);
    component.setReference(REFERENCE_FILENAME);
    component.setAlias(COMPONENT_NAME);
    component.setVolumes(asList(new VolumeImpl("foo", "/foo1"), new VolumeImpl("bar", "/bar1")));
    ArgumentCaptor<Map<String, MachineConfigImpl>> mapCaptor = ArgumentCaptor.forClass(Map.class);

    // when
    applier.apply(workspaceConfig, component, s -> yamlRecipeContent);

    // then
    verify(k8sEnvProvisioner).provision(any(), any(), any(), mapCaptor.capture());
    Map<String, MachineConfigImpl> configMaps = mapCaptor.getValue();

    for (MachineConfig config : configMaps.values()) {
      assertEquals(config.getVolumes().size(), 2);
      assertTrue(
          config
              .getVolumes()
              .entrySet()
              .stream()
              .anyMatch(
                  entry ->
                      entry.getKey().equals("foo") && entry.getValue().getPath().equals("/foo1")));
      assertTrue(
          config
              .getVolumes()
              .entrySet()
              .stream()
              .anyMatch(
                  entry ->
                      entry.getKey().equals("bar") && entry.getValue().getPath().equals("/bar1")));
    }
  }

