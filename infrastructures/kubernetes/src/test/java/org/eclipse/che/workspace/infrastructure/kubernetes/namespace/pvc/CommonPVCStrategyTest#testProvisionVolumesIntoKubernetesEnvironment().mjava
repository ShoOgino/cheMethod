  @Test
  public void testProvisionVolumesIntoKubernetesEnvironment() throws Exception {
    // given
    k8sEnv.getPersistentVolumeClaims().put("pvc1", newPVC("pvc1"));
    k8sEnv.getPersistentVolumeClaims().put("pvc2", newPVC("pvc2"));

    // when
    commonPVCStrategy.provision(k8sEnv, IDENTITY);

    // then
    provisionOrder.verify(volumeConverter).convertCheVolumes(k8sEnv, WORKSPACE_ID);
    provisionOrder.verify(subpathPrefixes).prefixVolumeMountsSubpaths(k8sEnv, WORKSPACE_ID);
    provisionOrder.verify(podsVolumes).replacePVCVolumesWithCommon(k8sEnv.getPodsData(), PVC_NAME);
    assertEquals(k8sEnv.getPersistentVolumeClaims().size(), 1);
    PersistentVolumeClaim commonPVC = k8sEnv.getPersistentVolumeClaims().get(PVC_NAME);
    assertNotNull(commonPVC);
    assertEquals(commonPVC.getMetadata().getName(), PVC_NAME);
    assertEquals(commonPVC.getSpec().getAccessModes(), Collections.singletonList(PVC_ACCESS_MODE));
    assertEquals(
        commonPVC.getSpec().getResources().getRequests().get("storage"),
        new Quantity(PVC_QUANTITY));
  }

