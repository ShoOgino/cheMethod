  @Test
  public void testProvisionPVCsForEachVolumeWithUniqueName() throws Exception {
    // given
    k8sEnv.getPersistentVolumeClaims().clear();

    // when
    strategy.provision(k8sEnv, IDENTITY);

    // then
    assertEquals(pod.getSpec().getVolumes().size(), 2);
    assertEquals(pod.getSpec().getContainers().get(0).getVolumeMounts().size(), 2);
    assertEquals(pod.getSpec().getContainers().get(1).getVolumeMounts().size(), 1);

    assertEquals(pod2.getSpec().getVolumes().size(), 1);
    assertEquals(pod2.getSpec().getContainers().get(0).getVolumeMounts().size(), 1);
    assertEquals(k8sEnv.getPersistentVolumeClaims().size(), 2);

    PersistentVolumeClaim pvcForVolume1 =
        findPvc(VOLUME_1_NAME, k8sEnv.getPersistentVolumeClaims());
    assertNotNull(pvcForVolume1);
    assertTrue(pvcForVolume1.getMetadata().getName().startsWith(PVC_NAME_PREFIX));

    PersistentVolumeClaim pvcForVolume2 =
        findPvc(VOLUME_2_NAME, k8sEnv.getPersistentVolumeClaims());
    assertNotNull(pvcForVolume2);
    assertTrue(pvcForVolume2.getMetadata().getName().startsWith(PVC_NAME_PREFIX));
  }

