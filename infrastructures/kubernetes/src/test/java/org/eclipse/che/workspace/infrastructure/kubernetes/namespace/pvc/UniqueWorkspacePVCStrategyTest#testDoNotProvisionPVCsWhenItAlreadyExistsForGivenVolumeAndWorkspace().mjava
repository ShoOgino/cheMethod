  @Test
  public void testDoNotProvisionPVCsWhenItAlreadyExistsForGivenVolumeAndWorkspace()
      throws Exception {
    final String pvcUniqueName1 = PVC_NAME_PREFIX + "-3121";
    PersistentVolumeClaim pvc1 =
        newPVC(pvcUniqueName1, ImmutableMap.of(CHE_VOLUME_NAME_LABEL, VOLUME_1_NAME));
    pvc1.getAdditionalProperties().put("CHE_PROVISIONED", true);
    final String pvcUniqueName2 = PVC_NAME_PREFIX + "-71333";
    PersistentVolumeClaim pvc2 =
        newPVC(pvcUniqueName2, ImmutableMap.of(CHE_VOLUME_NAME_LABEL, VOLUME_2_NAME));
    pvc2.getAdditionalProperties().put("CHE_PROVISIONED", true);

    when(pvcs.getByLabel(CHE_WORKSPACE_ID_LABEL, WORKSPACE_ID))
        .thenReturn(ImmutableList.of(pvc1, pvc2));

    strategy.provision(k8sEnv, IDENTITY);

    assertEquals(pod.getSpec().getVolumes().size(), 2);
    assertEquals(pod.getSpec().getContainers().get(0).getVolumeMounts().size(), 2);
    assertEquals(pod.getSpec().getContainers().get(1).getVolumeMounts().size(), 1);
    assertEquals(pod2.getSpec().getVolumes().size(), 1);
    assertEquals(pod2.getSpec().getContainers().get(0).getVolumeMounts().size(), 1);
    assertEquals(k8sEnv.getPersistentVolumeClaims().size(), 2);
    assertTrue(k8sEnv.getPersistentVolumeClaims().containsKey(pvcUniqueName1));
    assertTrue(k8sEnv.getPersistentVolumeClaims().containsKey(pvcUniqueName2));
  }

