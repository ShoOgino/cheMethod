  @BeforeMethod
  public void setUp() throws Exception {
    // Workspace env setup
    ObjectMeta workspacePodMeta =
        new ObjectMetaBuilder().withAnnotations(workspacePodAnnotations).build();
    workspacePod = new PodBuilder().withMetadata(workspacePodMeta).withSpec(new PodSpec()).build();
    Map<String, ConfigMap> workspaceConfigMaps = new HashMap<>();
    workspaceEnvironment =
        KubernetesEnvironment.builder()
            .setPods(ImmutableMap.of(WORKSPACE_POD_NAME, workspacePod))
            .setMachines(new HashMap<>())
            .setConfigMaps(workspaceConfigMaps)
            .build();

    // Broker env setup
    ObjectMeta brokerPodMeta =
        new ObjectMetaBuilder().withAnnotations(brokerPodAnnotations).build();
    brokerContainer = new ContainerBuilder().withName(BROKER_CONTAINER_NAME).build();
    brokerVolume = new VolumeBuilder().build();
    Pod brokerPod =
        new PodBuilder()
            .withMetadata(brokerPodMeta)
            .withNewSpec()
            .withContainers(brokerContainer)
            .withVolumes(brokerVolume)
            .endSpec()
            .build();
    brokerConfigMap = new ConfigMapBuilder().addToData(brokerConfigMapData).build();
    KubernetesEnvironment brokerEnvironment =
        KubernetesEnvironment.builder()
            .setPods(ImmutableMap.of(BROKER_POD_NAME, brokerPod))
            .setConfigMaps(ImmutableMap.of(BROKER_CONFIGMAP_NAME, brokerConfigMap))
            .setMachines(ImmutableMap.of(BROKER_MACHINE_NAME, brokerMachine))
            .build();
    doReturn(brokerEnvironment).when(brokerEnvironmentFactory).create(any(), any());

    applier = new KubernetesBrokerInitContainerApplier<>(brokerEnvironmentFactory);
  }

