  @BeforeMethod
  public void setUp() throws Exception {
    // Workspace mocking
    doReturn(ImmutableMap.of(WORKSPACE_POD_NAME, workspacePod))
        .when(workspaceEnvironment)
        .getPods();
    doReturn(workspaceMachines).when(workspaceEnvironment).getMachines();
    workspacePodSpec = new PodSpec();
    doReturn(workspacePodSpec).when(workspacePod).getSpec();
    workspaceConfigMaps = new HashMap<>();
    doReturn(workspaceConfigMaps).when(workspaceEnvironment).getConfigMaps();

    // Broker mocking
    doReturn(brokerEnvironment).when(brokerEnvironmentFactory).create(any(), any(), any());
    doReturn(ImmutableMap.of(BROKER_POD_NAME, brokerPod)).when(brokerEnvironment).getPods();
    brokerPodSpec = new PodSpec();
    brokerPodSpec.setContainers(ImmutableList.of(brokerContainer));
    brokerPodSpec.setVolumes(ImmutableList.of(brokerVolume));
    doReturn(brokerPodSpec).when(brokerPod).getSpec();
    doReturn(brokerMachines).when(brokerEnvironment).getMachines();
    doReturn(brokerMachine).when(brokerMachines).get(any());
    doReturn(ImmutableMap.of(BROKER_CONFIGMAP_NAME, brokerConfigMap))
        .when(brokerEnvironment)
        .getConfigMaps();

    // Mocks necessary to make Names.machineName(pod, container) work
    ObjectMeta workspacePodMetadata = mock(ObjectMeta.class);
    doReturn(workspacePodMetadata).when(workspacePod).getMetadata();
    doReturn(
            ImmutableMap.of(
                String.format(MACHINE_NAME_ANNOTATION_FMT, WORKSPACE_CONTAINER_NAME),
                WORKSPACE_MACHINE_NAME))
        .when(workspacePodMetadata)
        .getAnnotations();
    ObjectMeta brokerPodMetadata = mock(ObjectMeta.class);
    doReturn(brokerPodMetadata).when(brokerPod).getMetadata();
    doReturn(
            ImmutableMap.of(
                String.format(MACHINE_NAME_ANNOTATION_FMT, BROKER_CONTAINER_NAME),
                BROKER_MACHINE_NAME))
        .when(brokerPodMetadata)
        .getAnnotations();

    applier = new KubernetesBrokerInitContainerApplier<>(brokerEnvironmentFactory);
  }

