    @Test
    public void shouldRestorePartStackSize() throws Exception {
        JsonObject state = Json.createObject();

            JsonObject parts = Json.createObject();
            state.put("PART_STACKS", parts);

                JsonObject partStack = Json.createObject();
                parts.put("INFORMATION", partStack);

                    JsonArray partsArray = Json.createArray();
                    partStack.put("PARTS", partsArray);

                        JsonObject part = Json.createObject();
                        partsArray.set(0, part);
                        part.put("CLASS", "foo.Bar");

                    partStack.put("SIZE", 142);

        // partStackPresenter.getParts() must return non empty list
        final List<PartPresenter> partPresenters = new ArrayList<>();
        partPresenters.add(partPresenter);
        when(partStackPresenter.getParts()).thenAnswer(new Answer<List<? extends PartPresenter>>() {
            @Override
            public List<? extends PartPresenter> answer(InvocationOnMock invocationOnMock) throws Throwable {
                return partPresenters;
            }
        });

        perspective.loadState(state);

        verify(workBenchController).setSize(142d);
    }

