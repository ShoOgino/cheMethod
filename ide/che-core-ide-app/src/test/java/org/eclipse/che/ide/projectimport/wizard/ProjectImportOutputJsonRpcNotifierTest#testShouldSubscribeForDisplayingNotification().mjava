  @Test
  public void testShouldSubscribeForDisplayingNotification() throws Exception {
    //given
    final ImportProgressRecordDto dto = mock(ImportProgressRecordDto.class);
    when(dto.getNum()).thenReturn(1);
    when(dto.getLine()).thenReturn("message");
    when(dto.getProjectName()).thenReturn("project");

    final ArgumentCaptor<Consumer> argumentCaptor = ArgumentCaptor.forClass(Consumer.class);
    final StatusNotification statusNotification = mock(StatusNotification.class);
    when(notificationManager.notify(anyString(), any(Status.class), any(DisplayMode.class)))
        .thenReturn(statusNotification);
    when(constant.importingProject(anyString())).thenReturn("message");
    final MethodNameConfigurator methodNameConfigurator = mock(MethodNameConfigurator.class);
    when(configurator.newConfiguration()).thenReturn(methodNameConfigurator);
    final ParamsConfigurator paramsConfigurator = mock(ParamsConfigurator.class);
    when(methodNameConfigurator.methodName(anyString())).thenReturn(paramsConfigurator);
    final ResultConfiguratorFromOne resultConfiguratorFromOne =
        mock(ResultConfiguratorFromOne.class);
    when(paramsConfigurator.paramsAsDto(any())).thenReturn(resultConfiguratorFromOne);
    final ConsumerConfiguratorOneToNone consumerConfiguratorOneToNone =
        mock(ConsumerConfiguratorOneToNone.class);
    when(resultConfiguratorFromOne.noResult()).thenReturn(consumerConfiguratorOneToNone);

    //when
    notifier.subscribe("project");

    //then
    verify(constant).importingProject(eq("project"));
    verify(consumerConfiguratorOneToNone).withConsumer(argumentCaptor.capture());
    argumentCaptor.getValue().accept(dto);
    verify(statusNotification).setTitle(eq("message"));
    verify(statusNotification).setContent(eq(dto.getLine()));
  }

