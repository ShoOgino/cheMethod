  @Test
  public void testShouldReturnRuntimeInfoList() throws Exception {
    WorkspaceImpl workspace = mock(WorkspaceImpl.class);
    WorkspaceConfigImpl workspaceConfig = mock(WorkspaceConfigImpl.class);
    EnvironmentImpl environment = mock(EnvironmentImpl.class);
    MachineConfigImpl machineConfig = mock(MachineConfigImpl.class);

    when(appContext.getWorkspace()).thenReturn(workspace);
    when(workspace.getConfig()).thenReturn(workspaceConfig);
    when(workspaceConfig.getDefaultEnv()).thenReturn(DEFAULT_ENV);
    when(workspaceConfig.getEnvironments()).thenReturn(singletonMap(DEFAULT_ENV, environment));
    when(environment.getMachines()).thenReturn(singletonMap(DEV_MACHINE, machineConfig));

    RuntimeImpl runtime = mock(RuntimeImpl.class);
    MachineImpl runtimeDevMachine = mock(MachineImpl.class);

    when(workspace.getRuntime()).thenReturn(runtime);
    when(runtime.getMachineByName(eq(DEV_MACHINE))).thenReturn(Optional.of(runtimeDevMachine));

    ServerConfigImpl serverConfig1 = mock(ServerConfigImpl.class);
    when(serverConfig1.getPort()).thenReturn(CONFIG_PORT);
    when(serverConfig1.getProtocol()).thenReturn(CONFIG_PROTOCOL);

    when(machineConfig.getServers()).thenReturn(singletonMap(CONFIG_REF, serverConfig1));

    ServerImpl runtimeServer1 = mock(ServerImpl.class);
    when(runtimeServer1.getUrl()).thenReturn(CONFIG_URL);

    ServerImpl runtimeServer2 = mock(ServerImpl.class);
    when(runtimeServer2.getUrl()).thenReturn(RUNTIME_URL);

    Map<String, ServerImpl> runtimeServers = new HashMap<>();
    runtimeServers.put(CONFIG_REF, runtimeServer1);
    runtimeServers.put(RUNTIME_REF, runtimeServer2);

    when(runtimeDevMachine.getServers()).thenReturn(runtimeServers);

    List<RuntimeInfo> expectedList = provider.get(DEV_MACHINE);

    assertEquals(expectedList.size(), 2);

    RuntimeInfo expectedRuntime1 = new RuntimeInfo("web", "666", "http", "http://example.com/");
    RuntimeInfo expectedRuntime2 = new RuntimeInfo("wsagent", null, "http", "http://example.org/");

    assertTrue(expectedList.contains(expectedRuntime1));
    assertTrue(expectedList.contains(expectedRuntime2));
  }

