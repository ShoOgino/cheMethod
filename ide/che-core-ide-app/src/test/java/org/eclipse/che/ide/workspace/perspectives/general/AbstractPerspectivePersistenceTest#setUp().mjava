  @Before
  public void setUp() throws Exception {
    when(view.getLeftPanel()).thenReturn(panel);
    when(view.getRightPanel()).thenReturn(panel);
    when(view.getBottomPanel()).thenReturn(panel);

    when(view.getSplitPanel()).thenReturn(layoutPanel);

    when(view.getNavigationPanel()).thenReturn(simplePanel);
    when(view.getInformationPanel()).thenReturn(simpleLayoutPanel);
    when(view.getToolPanel()).thenReturn(simplePanel);

    when(partStackPresenter.getPartStackState()).thenReturn(PartStack.State.NORMAL);

    when(controllerFactory.createController(
            org.mockito.ArgumentMatchers.<SplitLayoutPanel>anyObject(),
            org.mockito.ArgumentMatchers.<SimplePanel>anyObject()))
        .thenReturn(workBenchController);

    when(partStackViewFactory.create(
            org.mockito.ArgumentMatchers.<PartStackView.TabPosition>anyObject(),
            org.mockito.ArgumentMatchers.<FlowPanel>anyObject()))
        .thenReturn(partStackView);

    when(stackPresenterFactory.create(
            org.mockito.ArgumentMatchers.<PartStackView>anyObject(),
            org.mockito.ArgumentMatchers.<WorkBenchPartController>anyObject()))
        .thenReturn(partStackPresenter);

    perspective =
        new AbstractPerspectiveTest.DummyPerspective(
            view,
            stackPresenterFactory,
            partStackViewFactory,
            controllerFactory,
            eventBus,
            null,
            partStackPresenter,
            dynaProvider);
    perspective.onActivePartChanged(new ActivePartChangedEvent(activePart));
  }

