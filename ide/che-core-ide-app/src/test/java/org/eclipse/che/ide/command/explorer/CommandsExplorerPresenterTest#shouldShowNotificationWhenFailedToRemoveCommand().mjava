    @Test(expected = OperationException.class)
    public void shouldShowNotificationWhenFailedToRemoveCommand() throws Exception {
        // given
        ConfirmDialog confirmDialog = mock(ConfirmDialog.class);
        when(dialogFactory.createConfirmDialog(anyString(),
                                               anyString(),
                                               any(ConfirmCallback.class),
                                               any(CancelCallback.class))).thenReturn(confirmDialog);
        ArgumentCaptor<ConfirmCallback> confirmCallbackCaptor = ArgumentCaptor.forClass(ConfirmCallback.class);

        when(commandManager.removeCommand(anyString())).thenReturn(voidPromise);

        // when
        presenter.onCommandRemove(mock(CommandImpl.class));

        // then
        verify(dialogFactory).createConfirmDialog(anyString(), anyString(), confirmCallbackCaptor.capture(), isNull(CancelCallback.class));
        confirmCallbackCaptor.getValue().accepted();

        verify(voidPromise).catchError(errorOperationCaptor.capture());
        errorOperationCaptor.getValue().apply(mock(PromiseError.class));
        verify(messages).unableRemove();
        verify(notificationManager).notify(anyString(), anyString(), eq(FAIL), eq(EMERGE_MODE));
    }

