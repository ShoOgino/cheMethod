  @Test(expected = OperationException.class)
  public void shouldShowNotificationWhenFailedToRemoveCommand() throws Exception {
    // given
    ConfirmDialog confirmDialog = mock(ConfirmDialog.class);
    when(dialogFactory.createConfirmDialog(
            nullable(String.class),
            nullable(String.class),
            nullable(ConfirmCallback.class),
            nullable(CancelCallback.class)))
        .thenReturn(confirmDialog);
    ArgumentCaptor<ConfirmCallback> confirmCallbackCaptor =
        ArgumentCaptor.forClass(ConfirmCallback.class);

    when(commandManager.removeCommand(nullable(String.class))).thenReturn(voidPromise);

    // when
    presenter.onCommandRemove(mock(CommandImpl.class));

    // then
    verify(dialogFactory)
        .createConfirmDialog(
            nullable(String.class),
            nullable(String.class),
            confirmCallbackCaptor.capture(),
            isNull());

    confirmCallbackCaptor.getValue().accepted();

    verify(voidPromise).catchError(errorOperationCaptor.capture());
    errorOperationCaptor.getValue().apply(mock(PromiseError.class));
    verify(messages).unableRemove();
    verify(notificationManager).notify(anyString(), anyString(), eq(FAIL), eq(EMERGE_MODE));
  }

