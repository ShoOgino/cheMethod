    @Test
    public void shouldFilterCommands() throws Exception {
        // given
        CommandImpl cmd1 = mock(CommandImpl.class);
        when(cmd1.getName()).thenReturn("test");

        CommandImpl cmd2 = mock(CommandImpl.class);
        when(cmd2.getName()).thenReturn("run");

        List<CommandImpl> commands = new ArrayList<>();
        commands.add(cmd1);
        commands.add(cmd2);

        when(commandManager.getCommands()).thenReturn(commands);

        Map<CommandGoal, List<CommandImpl>> filteredCommandsMock = new HashMap<>();
        filteredCommandsMock.put(mock(CommandGoal.class), commands);
        when(commandUtils.groupCommandsByGoal(commands)).thenReturn(filteredCommandsMock);

        // when
        presenter.onFilterChanged("run");

        // then
        verify(commandUtils).groupCommandsByGoal(commands);
        verify(view).setCommands(filteredCommandsCaptor.capture());
        final Map<CommandGoal, List<CommandImpl>> filteredCommandsValue = filteredCommandsCaptor.getValue();
        assertEquals(filteredCommandsMock, filteredCommandsValue);
    }

