  @Test(expected = OperationException.class)
  public void shouldShowNotificationWhenFailedToCreateCommand() throws Exception {
    // given
    CommandType selectedCommandType = mock(CommandType.class);
    String commandTypeId = "mvn";
    when(selectedCommandType.getId()).thenReturn(commandTypeId);

    CommandGoal selectedCommandGoal = mock(CommandGoal.class);
    String commandGoalId = "test";
    when(selectedCommandGoal.getId()).thenReturn(commandGoalId);

    when(view.getSelectedGoal()).thenReturn(selectedCommandGoal);
    when(commandTypeChooser.show(anyInt(), anyInt())).thenReturn(commandTypePromise);
    when(appContext.getProjects()).thenReturn(new Project[0]);
    when(commandManager.createCommand(anyString(), anyString(), any(ApplicableContext.class)))
        .thenReturn(commandPromise);
    when(commandPromise.then(any(Operation.class))).thenReturn(commandPromise);
    when(commandPromise.catchError(any(Operation.class))).thenReturn(commandPromise);

    // when
    presenter.onCommandAdd(0, 0);

    // then
    verify(commandTypeChooser).show(0, 0);
    verify(commandTypePromise).then(commandTypeOperationCaptor.capture());
    commandTypeOperationCaptor.getValue().apply(selectedCommandType);

    verify(view).getSelectedGoal();

    verify(commandManager)
        .createCommand(eq(commandGoalId), eq(commandTypeId), any(ApplicableContext.class));

    verify(commandPromise).catchError(errorOperationCaptor.capture());
    errorOperationCaptor.getValue().apply(mock(PromiseError.class));
    verify(messages).unableCreate();
    verify(notificationManager).notify(anyString(), anyString(), eq(FAIL), eq(EMERGE_MODE));
  }

