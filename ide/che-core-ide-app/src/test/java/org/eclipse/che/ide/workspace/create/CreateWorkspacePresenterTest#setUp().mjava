    @Before
    public void setUp() {
        machineConfigDto = mock(MachineConfigDto.class, new SelfReturningAnswer());
        workspaceConfigDto = mock(WorkspaceConfigDto.class, new SelfReturningAnswer());
        when(usersWorkspaceDto.getConfig()).thenReturn(workspaceConfigDto);

        when(dtoFactory.createDto(MachineSourceDto.class)).thenReturn(machineSourceDto);
        when(machineSourceDto.withType(anyString())).thenReturn(machineSourceDto);
        when(machineSourceDto.withLocation(anyString())).thenReturn(machineSourceDto);

        when(dtoFactory.createDto(LimitsDto.class)).thenReturn(limitsDto);
        when(limitsDto.withRam(anyInt())).thenReturn(limitsDto);

        when(dtoFactory.createDto(MachineConfigDto.class)).thenReturn(machineConfigDto);

        when(dtoFactory.createDto(EnvironmentDto.class)).thenReturn(environmentDto);

        when(dtoFactory.createDto(WorkspaceConfigDto.class)).thenReturn(workspaceConfigDto);

        when(dtoFactory.createDto(WorkspaceDto.class)).thenReturn(usersWorkspaceDto);
        environmentDto = mock(EnvironmentDto.class, new SelfReturningAnswer());
        when(dtoFactory.createDto(EnvironmentDto.class)).thenReturn(environmentDto);
        environmentRecipeDto = mock(EnvironmentRecipeDto.class, new SelfReturningAnswer());
        when(dtoFactory.createDto(EnvironmentRecipeDto.class)).thenReturn(environmentRecipeDto);
        extendedMachineDto = mock(ExtendedMachineDto.class, new SelfReturningAnswer());
        when(dtoFactory.createDto(ExtendedMachineDto.class)).thenReturn(extendedMachineDto);

        when(wsComponentProvider.get()).thenReturn(workspaceComponent);

        when(recipeServiceClient.getAllRecipes()).thenReturn(recipesPromise);
        when(view.getWorkspaceName()).thenReturn("test");
        when(view.getRecipeUrl()).thenReturn("recipe");
    }

