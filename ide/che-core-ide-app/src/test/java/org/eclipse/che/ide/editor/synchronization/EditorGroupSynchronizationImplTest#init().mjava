  @Before
  public void init() {
    activeEditor =
        mock(
            EditorPartPresenter.class,
            withSettings().extraInterfaces(TextEditor.class, EditorWithAutoSave.class));
    openedEditor1 =
        mock(
            EditorPartPresenter.class,
            withSettings().extraInterfaces(TextEditor.class, EditorWithAutoSave.class));
    openedEditor2 =
        mock(
            EditorPartPresenter.class,
            withSettings().extraInterfaces(TextEditor.class, EditorWithAutoSave.class));
    virtualFile = mock(VirtualFile.class, withSettings().extraInterfaces(File.class));

    when(((EditorWithAutoSave) openedEditor1).isAutoSaveEnabled()).thenReturn(true);
    when(((EditorWithAutoSave) openedEditor2).isAutoSaveEnabled()).thenReturn(true);

    when(editorAgent.getActiveEditor()).thenReturn(activeEditor);
    when(document.getDocumentHandle()).thenReturn(documentHandle);
    when(documentHandle.getDocEventBus()).thenReturn(documentEventBus);
    when(documentHandle.getDocument()).thenReturn(document);

    when(((TextEditor) activeEditor).getDocument()).thenReturn(document);
    when(((TextEditor) openedEditor1).getDocument()).thenReturn(document);
    when(((TextEditor) openedEditor2).getDocument()).thenReturn(document);

    when(document.getContents()).thenReturn(FILE_CONTENT);
    when(openedEditor1.getEditorInput()).thenReturn(editorInput);
    when(editorInput.getFile()).thenReturn(virtualFile);
    when(virtualFile.getLocation()).thenReturn(new Path(FILE_LOCATION));

    when(documentEventBus.addHandler((Event.Type<Object>) anyObject(), anyObject()))
        .thenReturn(handlerRegistration);

    editorGroupSynchronization =
        new EditorGroupSynchronizationImpl(eventBus, documentStorage, notificationManager);
  }

