  /**
   * Restores cached state for {@link StateComponent}s. Use {@link #readState()} first to restore
   * not cached state or {@link #restoreState(JsonObject)}
   */
  Promise<Void> restoreState() {
    try {
      Promise<Void> sequentialRestore = promises.resolve(null);
      for (String key : appState.keys()) {
        Optional<StateComponent> stateComponent =
            stateComponentRegistry.get().getComponentById(key);
        if (stateComponent.isPresent()) {
          StateComponent component = stateComponent.get();
          String componentId = component.getId();
          Log.debug(getClass(), "Restore state for the component ID: " + componentId);
          sequentialRestore =
              sequentialRestore.thenPromise(
                  ignored ->
                      component
                          .loadState(appState.getObject(key))
                          .catchError(
                              arg -> {
                                String error =
                                    "Error is happened at restoring state for the component "
                                        + componentId
                                        + ": "
                                        + arg.getMessage();
                                Log.error(getClass(), error);
                              }));
        }
      }
      return sequentialRestore;
    } catch (JsonException e) {
      Log.error(getClass(), e);
    }
    return promises.resolve(null);
  }

