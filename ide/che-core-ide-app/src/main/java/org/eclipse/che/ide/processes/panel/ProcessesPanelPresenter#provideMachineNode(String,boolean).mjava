    /**
     * Provides machine node:
     * <li>creates new machine node when this one not exist or {@code replace} is {@code true}</li>
     * <li>returns old machine node when this one exist and {@code replace} is {@code false}</li>
     *
     * @param machineName
     *         name of the machine to creating node
     * @param replace
     *         existed node will be replaced when {@code replace} is {@code true}
     * @return machine node
     */
    @Nullable
    private ProcessTreeNode provideMachineNode(String machineName, boolean replace) {
        final ProcessTreeNode existedMachineNode = findTreeNodeById(machineName);
        if (!replace && existedMachineNode != null) {
            return existedMachineNode;
        }

        //we need to keep old machine node children
        ArrayList<ProcessTreeNode> children = new ArrayList<>();

        // remove existed node
        for (ProcessTreeNode node : rootNode.getChildren()) {
            if (machineName.equals(node.getName())) {
                children.addAll(node.getChildren());
                rootNode.getChildren().remove(node);
                break;
            }
        }

        // create new node
        RuntimeImpl runtime = appContext.getWorkspace().getRuntime();
        if (runtime == null) {
            return null;
        }
        Optional<MachineImpl> machineByName = runtime.getMachineByName(machineName);
        if (!machineByName.isPresent()) {
            return null;
        }

        final ProcessTreeNode newMachineNode = new ProcessTreeNode(MACHINE_NODE, rootNode, machineByName.get(), null, children);
        newMachineNode.setRunning(/*RUNNING == machine.getStatus()*/true);
        newMachineNode.setHasTerminalAgent(hasAgent(machineName, TERMINAL_AGENT) || hasTerminal(machineName));
        newMachineNode.setHasSSHAgent(hasAgent(machineName, SSH_AGENT));
        for (ProcessTreeNode child : children) {
            child.setParent(newMachineNode);
        }

        machineNodes.put(machineName, newMachineNode);

        // add to children
        rootNode.getChildren().add(newMachineNode);

        // update the view
        view.setProcessesData(rootNode);

        // add output for the machine if it is not exist
        if (!consoles.containsKey(machineName)) {
            OutputConsole outputConsole = commandConsoleFactory.create(machineName);
            addOutputConsole(machineName, newMachineNode, outputConsole, true);
        }

        return newMachineNode;
    }

