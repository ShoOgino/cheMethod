    /**
     * Copies with overwriting.
     * Delete destination resource and copy again.
     */
    private void copyWithOverwriting() {
        /** Get item to copy */
        final ResourceBasedNode<?> item = itemsToProcess.get(itemIndex);

        try {
            /** Delete destination item */
            String deletePath = ((HasStorablePath)destination).getStorablePath() + "/" + item.getName();
            projectServiceClient.delete(appContext.getDevMachine(), deletePath, new AsyncRequestCallback<Void>() {
                @Override
                protected void onSuccess(Void result) {
                    /** Copy the item */
                    projectServiceClient
                            .copy(appContext.getDevMachine(), ((HasStorablePath)item).getStorablePath(), ((HasStorablePath)destination).getStorablePath(),
                                  null,
                                  copyCallback);
                }

                @Override
                protected void onFailure(Throwable error) {
                    /** Handle error and stop copying */
                    notificationManager.notify(localization.failedToCopyItems(), error.getMessage(), FAIL, FLOAT_MODE, item.getProjectConfig());
                    dialogFactory.createMessageDialog("ERROR", error.getMessage(), null).show();
                }
            });
        } catch (Exception error) {
            /** Handle error and stop copying */
            notificationManager.notify(localization.failedToCopyItems(), error.getMessage(), FAIL, FLOAT_MODE, item.getProjectConfig());
            dialogFactory.createMessageDialog("ERROR", error.getMessage(), null).show();
        }
    }

