    @Inject
    private void startWsAgentComponents(EventBus eventBus, final Map<String, Provider<WsAgentComponent>> components) {
        eventBus.addHandler(WorkspaceStartedEvent.TYPE, new WorkspaceStartedEvent.Handler() {
            @Override
            public void onWorkspaceStarted(WorkspaceStartedEvent event) {
                workspaceService.getWorkspace(event.getWorkspace().getId()).then(new Operation<WorkspaceDto>() {
                    @Override
                    public void apply(WorkspaceDto ws) throws OperationException {
                        MachineDto devMachineDto = ws.getRuntime().getDevMachine();
                        DevMachine devMachine = new DevMachine(devMachineDto);

                        wsAgentInitializerProvider.get().initialize(devMachine, new WsAgentInitializer.WsAgentCallback() {
                            @Override
                            public void onWsAgentInitialized() {
                                SortedMap<String, Provider<WsAgentComponent>> sortedComponents = new TreeMap<>();
                                sortedComponents.putAll(components);
                                startWsAgentComponents(sortedComponents.values().iterator());
                            }
                        });
                        wsAgentURLModifier.initialize(devMachine);

                    }
                }).catchError(new Operation<PromiseError>() {
                    @Override
                    public void apply(PromiseError err) throws OperationException {
                        Log.error(getClass(), err.getCause());
                        initializationFailed(err.getMessage());
                    }
                });
            }
        });
    }

