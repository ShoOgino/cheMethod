    @Override
    public Promise<ProjectConfigDto> rename(final HasStorablePath parent,
                                            final HasDataObject<ProjectConfigDto> node,
                                            final String newName) {
        final ProjectConfigDto projectConfig = node.getData();

        return createFromAsyncRequest(new AsyncPromiseHelper.RequestCall<Void>() {
            @Override
            public void makeCall(AsyncCallback<Void> callback) {
                projectService.rename(appContext.getDevMachine(),
                                      projectConfig.getPath(),
                                      newName,
                                      null,
                                      newCallback(callback));
            }
        }).thenPromise(new Function<Void, Promise<ProjectConfigDto>>() {
            @Override
            public Promise<ProjectConfigDto> apply(Void arg) throws FunctionException {
                return createFromAsyncRequest(new AsyncPromiseHelper.RequestCall<ProjectConfigDto>() {
                    @Override
                    public void makeCall(AsyncCallback<ProjectConfigDto> callback) {
                        Promise<ProjectConfigDto> projectPromise = projectService.getProject(appContext.getDevMachine(), '/' + newName);

                        projectPromise.then(new Operation<ProjectConfigDto>() {
                            @Override
                            public void apply(ProjectConfigDto renamedProject) throws OperationException {
                                eventBus.fireEvent(new DeleteProjectEvent(projectConfig));

                                eventBus.fireEvent(new CreateProjectEvent(renamedProject));
                            }
                        });
                    }
                });
            }
        });
    }

