    private Promise<Void> loadAndRegisterResources(Path absolutePath) {
        return ps.getTree(absolutePath, 1, true).thenPromise(treeElement -> {
            final Optional<Resource[]> optionalChildren = store.get(absolutePath);

            if (optionalChildren.isPresent()) {
                for (Resource child : optionalChildren.get()) {
                    store.dispose(child.getLocation(), false);
                }
            }

            for (TreeElement element : treeElement.getChildren()) {
                final Resource resource = newResourceFrom(element.getNode());

                if (resource.isProject()) {
                    inspectProject(resource.asProject());
                }

                store.register(resource);
            }

            return promises.resolve(null);
        });
    }

