  @Inject
  public EditorTabWidget(
      @Assisted final EditorPartPresenter relatedEditorPart,
      @Assisted EditorPartStack relatedEditorPartStack,
      PartStackUIResources resources,
      EditorTabContextMenuFactory editorTabContextMenu,
      final EventBus eventBus,
      final EditorAgent editorAgent) {
    this.resources = resources;
    this.relatedEditorPart = relatedEditorPart;
    this.relatedEditorPartStack = relatedEditorPartStack;
    this.editorAgent = editorAgent;

    initWidget(UI_BINDER.createAndBindUi(this));

    this.editorTabContextMenu = editorTabContextMenu;
    this.file = relatedEditorPart.getEditorInput().getFile();
    this.icon = relatedEditorPart.getTitleImage();
    this.title.setText(file.getDisplayName());
    // add "path" attribute describing the full path of opened file, will be used full for testing
    this.title.getElement().setAttribute("path", file.getLocation().toString());
    this.id = title + UUID.uuid(4);

    iconPanel.add(getIcon());

    addDomHandler(this, ClickEvent.getType());
    addDomHandler(this, DoubleClickEvent.getType());
    addDomHandler(this, ContextMenuEvent.getType());

    eventBus.addHandler(ResourceChangedEvent.getType(), this);
    eventBus.addHandler(FileEvent.TYPE, this);

    sinkEvents(Event.ONMOUSEDOWN);

    closeButton.addDomHandler(
        event -> editorAgent.closeEditor(relatedEditorPart), ClickEvent.getType());

    relatedEditorPart.addPropertyListener(
        (source, propId) -> {
          if (propId == EditorPartPresenter.PROP_INPUT) {
            file = relatedEditorPart.getEditorInput().getFile();
            title.setText(file.getDisplayName());
          }
        });
  }

