  /** Removes the command without notifying listeners. */
  private Promise<Void> doRemoveCommand(String name) {
    final CommandImpl command = commands.get(name);

    if (command == null) {
      return promiseProvider.reject(new Exception("Command '" + name + "' does not exist."));
    }

    final ApplicableContext context = command.getApplicableContext();

    final ArrayOf<Promise<?>> commandPromises = Collections.arrayOf();

    if (context.isWorkspaceApplicable()) {
      commandPromises.push(workspaceCommandManager.removeCommand(name));
    }

    for (final String projectPath : context.getApplicableProjects()) {
      final Project project = getProjectByPath(projectPath);

      if (project == null) {
        continue;
      }

      commandPromises.push(projectCommandManager.removeCommand(project, name));
    }

    return promiseProvider
        .all2(commandPromises)
        .then(
            (Function<ArrayOf<?>, Void>)
                arg -> {
                  commands.remove(command.getName());
                  return null;
                });
  }

