  Promise<Project> createProject(final Project.ProjectRequest createRequest) {
    checkArgument(checkProjectName(createRequest.getBody().getName()), "Invalid project name");
    checkArgument(
        typeRegistry.getProjectType(createRequest.getBody().getType()) != null,
        "Invalid project type");

    final Path path = Path.valueOf(createRequest.getBody().getPath());
    return findResource(path)
        .thenPromise(
            resource -> {
              if (resource.isPresent()) {
                if (resource.get().isProject()) {
                  return promises.reject(new IllegalStateException("Project already exists"));
                } else if (resource.get().isFile()) {
                  return promises.reject(
                      new IllegalStateException("File can not be converted to project"));
                }

                return update(path, createRequest);
              }

              final MutableProjectConfig projectConfig =
                  (MutableProjectConfig) createRequest.getBody();
              final List<NewProjectConfig> projectConfigList = projectConfig.getProjects();
              projectConfigList.add(asDto(projectConfig));
              final List<NewProjectConfigDto> configDtoList = asDto(projectConfigList);

              return ps.createBatchProjects(configDtoList)
                  .thenPromise(
                      configList ->
                          ps.getProjects()
                              .thenPromise(
                                  updatedConfiguration -> {
                                    for (ProjectConfigDto projectConfigDto : configList) {
                                      if (projectConfigDto.getPath().equals(path.toString())) {
                                        final Project newResource =
                                            resourceFactory.newProjectImpl(
                                                projectConfigDto, ResourceManager.this);
                                        store.register(newResource);
                                        eventBus.fireEvent(
                                            new ResourceChangedEvent(
                                                new ResourceDeltaImpl(
                                                    newResource, ADDED | DERIVED)));

                                        return promises.resolve(newResource);
                                      }
                                    }

                                    return promises.reject(
                                        new IllegalStateException("Created project is not found"));
                                  }));
            });
  }

