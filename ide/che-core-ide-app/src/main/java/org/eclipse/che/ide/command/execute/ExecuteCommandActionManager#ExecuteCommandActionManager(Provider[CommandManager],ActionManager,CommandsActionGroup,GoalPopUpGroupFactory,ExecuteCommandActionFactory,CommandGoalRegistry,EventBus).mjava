  @Inject
  public ExecuteCommandActionManager(
      Provider<CommandManager> commandManagerProvider,
      ActionManager actionManager,
      CommandsActionGroup commandsActionGroup,
      GoalPopUpGroupFactory goalPopUpGroupFactory,
      ExecuteCommandActionFactory commandActionFactory,
      CommandGoalRegistry goalRegistry,
      EventBus eventBus) {
    this.commandManagerProvider = commandManagerProvider;
    this.actionManager = actionManager;
    this.commandsActionGroup = commandsActionGroup;
    this.goalPopUpGroupFactory = goalPopUpGroupFactory;
    this.commandActionFactory = commandActionFactory;
    this.goalRegistry = goalRegistry;

    commandActions = new HashMap<>();
    goalPopUpGroups = new HashMap<>();

    initialize();

    eventBus.addHandler(CommandAddedEvent.getType(), e -> addAction(e.getCommand()));
    eventBus.addHandler(CommandRemovedEvent.getType(), e -> removeAction(e.getCommand()));
    eventBus.addHandler(
        CommandUpdatedEvent.getType(),
        e -> {
          removeAction(e.getInitialCommand());
          addAction(e.getUpdatedCommand());
        });

    eventBus.addHandler(WsAgentServerStoppedEvent.TYPE, e -> disposeActions());

    eventBus.addHandler(
        CommandsLoadedEvent.getType(),
        e -> {
          disposeActions();
          registerActions();
        });
  }

