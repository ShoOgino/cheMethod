    private Promise<Void> pasteSuccessively(Promise<Void> promise, Resource[] resources, int position, final Path destination) {
        if (position == resources.length) {
            return promise;
        }

        final Resource resource = resources[position];
        final Promise<Void> derivedPromise;

        if (move) {
            derivedPromise = promise.thenPromise(new Function<Void, Promise<Void>>() {
                @Override
                public Promise<Void> apply(Void ignored) throws FunctionException {
                    return moveResource(resource, destination.append(resource.getName()));
                }
            });
        } else {
            derivedPromise = promise.thenPromise(new Function<Void, Promise<Void>>() {
                @Override
                public Promise<Void> apply(Void ignored) throws FunctionException {
                    return copyResource(resource, destination.append(resource.getName()));
                }
            });
        }

        return pasteSuccessively(derivedPromise, resources, ++position, destination);
    }

