  Promise<Resource[]> childrenOf(final Container container, boolean forceUpdate) {
    if (forceUpdate) {
      return getRemoteResources(container, DEPTH_ONE, true);
    }

    Promise<Optional<Resource[]>> promise = promises.resolve(store.get(container.getLocation()));

    return promise.thenPromise(
        children ->
            ps.getTree(container.getLocation(), 1, true)
                .thenPromise(
                    loadedChildren -> {
                      if (!children.isPresent()) {
                        return promises.resolve(NO_RESOURCES);
                      }

                      Resource[] resources = children.get();

                      if (resources.length == loadedChildren.getChildren().size()) {

                        Map<String, VcsStatus> vcsStatusMap =
                            getVcsStatusesForFiles(loadedChildren.getChildren());

                        for (Resource resource : resources) {
                          if (resource.isFile()) {
                            VcsStatus oldVcsStatus = resource.asFile().getVcsStatus();
                            VcsStatus newVcsStatus = vcsStatusMap.remove(resource.getName());

                            if (oldVcsStatus != newVcsStatus) {
                              resource.asFile().setVcsStatus(newVcsStatus);
                            }
                          }
                        }

                        return promises.resolve(resources);
                      } else {
                        // situation, when we have outdated cached children
                        java.util.Arrays.stream(resources)
                            .forEach(outdated -> store.dispose(outdated.getLocation(), false));

                        List<Resource> updated =
                            new ArrayList<>(loadedChildren.getChildren().size());

                        for (TreeElement nodeElement : loadedChildren.getChildren()) {
                          ItemReference reference = nodeElement.getNode();
                          Resource tempResource = newResourceFrom(reference);
                          store.register(tempResource);

                          if (tempResource.isProject()) {
                            inspectProject(tempResource.asProject());
                          }

                          updated.add(tempResource);
                        }

                        return promises.resolve(updated.toArray(new Resource[updated.size()]));
                      }
                    }));
  }

