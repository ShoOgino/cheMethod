    /**
     * Listens message bus and handles workspace events.
     *
     * @param workspace
     *          workspace to listen
     * @param callback
     *          callback
     * @param checkForShapshots
     *          whether is needed checking workspace for snapshots
     * @param restoreFromSnapshot
     *          restore or not the workspace from snapshot
     */
    public void handleWorkspaceEvents(final WorkspaceDto workspace, final Callback<Component, Exception> callback,
                                      final boolean checkForShapshots, final boolean restoreFromSnapshot) {
        this.callback = callback;
        if (messageBus != null) {
            messageBus.cancelReconnection();
        }
        messageBus = messageBusProvider.createMessageBus();

        messageBus.addOnOpenHandler(new ConnectionOpenedHandler() {
            @Override
            public void onOpen() {
                loader.show(LoaderPresenter.Phase.STARTING_WORKSPACE_RUNTIME);

                messageBus.removeOnOpenHandler(this);

                setCurrentWorkspace(workspace);
                workspaceEventsHandler.trackWorkspaceEvents(workspace, callback);

                final WorkspaceStatus workspaceStatus = workspace.getStatus();
                switch (workspaceStatus) {
                    case STARTING:
                        eventBus.fireEvent(new WorkspaceStartingEvent(workspace));
                        break;
                    case RUNNING:
                        Scheduler.get().scheduleDeferred(new Scheduler.ScheduledCommand() {
                            @Override
                            public void execute() {
                                loader.setSuccess(LoaderPresenter.Phase.STARTING_WORKSPACE_RUNTIME);
                                eventBus.fireEvent(new WorkspaceStartedEvent(workspace));
                                machineManagerProvider.get();//start instance of machine manager
                            }
                        });
                        break;
                    default:
                        if (checkForShapshots) {
                            checkWorkspaceForSnapshots(workspace);
                        } else {
                            loader.show(LoaderPresenter.Phase.STARTING_WORKSPACE_RUNTIME);
                            workspaceServiceClient.startById(workspace.getId(), workspace.getConfig().getDefaultEnv(), restoreFromSnapshot);
                        }
                }
            }
        });
    }

