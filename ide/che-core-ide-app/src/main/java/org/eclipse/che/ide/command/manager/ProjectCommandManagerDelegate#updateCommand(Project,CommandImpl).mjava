  /**
   * Updates the command with the specified {@code name} by replacing it with the given {@code
   * command}.
   *
   * <p><b>Note</b> that name of the updated command may differ from the name provided by the given
   * {@code command} in order to prevent name duplication.
   */
  Promise<CommandImpl> updateCommand(Project project, final CommandImpl command) {
    final List<CommandImpl> projectCommands = getCommands(project);

    if (projectCommands.isEmpty()) {
      return promiseProvider.reject(
          new Exception(
              "Command '"
                  + command.getName()
                  + "' is not associated with the project '"
                  + project.getName()
                  + "'"));
    }

    final List<CommandImpl> commandsToUpdate = new ArrayList<>();
    for (CommandImpl projectCommand : projectCommands) {
      // skip existed command with the same name
      if (!command.getName().equals(projectCommand.getName())) {
        commandsToUpdate.add(projectCommand);
      }
    }

    commandsToUpdate.add(command);

    return updateProject(project, new ArrayList<>(commandsToUpdate))
        .then((Function<Void, CommandImpl>) arg -> command);
  }

