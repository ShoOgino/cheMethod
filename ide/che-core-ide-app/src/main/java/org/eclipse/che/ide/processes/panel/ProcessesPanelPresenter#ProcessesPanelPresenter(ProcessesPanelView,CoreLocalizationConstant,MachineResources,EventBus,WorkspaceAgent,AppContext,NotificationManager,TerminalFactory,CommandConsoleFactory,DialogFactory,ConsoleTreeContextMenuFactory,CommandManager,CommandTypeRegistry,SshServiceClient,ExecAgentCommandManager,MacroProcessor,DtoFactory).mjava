  @Inject
  public ProcessesPanelPresenter(
      ProcessesPanelView view,
      CoreLocalizationConstant localizationConstant,
      MachineResources resources,
      EventBus eventBus,
      WorkspaceAgent workspaceAgent,
      AppContext appContext,
      NotificationManager notificationManager,
      TerminalFactory terminalFactory,
      CommandConsoleFactory commandConsoleFactory,
      DialogFactory dialogFactory,
      ConsoleTreeContextMenuFactory consoleTreeContextMenuFactory,
      CommandManager commandManager,
      CommandTypeRegistry commandTypeRegistry,
      SshServiceClient sshServiceClient,
      ExecAgentCommandManager execAgentCommandManager,
      MacroProcessor macroProcessor,
      DtoFactory dtoFactory) {
    this.view = view;
    this.localizationConstant = localizationConstant;
    this.resources = resources;
    this.workspaceAgent = workspaceAgent;
    this.commandManager = commandManager;
    this.sshServiceClient = sshServiceClient;
    this.appContext = appContext;
    this.notificationManager = notificationManager;
    this.terminalFactory = terminalFactory;
    this.commandConsoleFactory = commandConsoleFactory;
    this.dialogFactory = dialogFactory;
    this.consoleTreeContextMenuFactory = consoleTreeContextMenuFactory;
    this.eventBus = eventBus;
    this.commandTypeRegistry = commandTypeRegistry;
    this.execAgentCommandManager = execAgentCommandManager;
    this.macroProcessor = macroProcessor;
    this.dtoFactory = dtoFactory;

    machineNodes = new HashMap<>();
    machines = new HashMap<>();
    rootNode = new ProcessTreeNode(ROOT_NODE, null, null, null, new ArrayList<ProcessTreeNode>());
    terminals = new HashMap<>();
    consoles = new HashMap<>();
    consoleCommands = new HashMap<>();

    view.setDelegate(this);

    eventBus.addHandler(ProcessFinishedEvent.TYPE, this);
    eventBus.addHandler(WorkspaceStartedEvent.TYPE, this);
    eventBus.addHandler(WorkspaceStoppedEvent.TYPE, this);
    eventBus.addHandler(WsAgentStateEvent.TYPE, this);
    eventBus.addHandler(MachineStateEvent.TYPE, this);
    eventBus.addHandler(EnvironmentOutputEvent.TYPE, this);
    eventBus.addHandler(DownloadWorkspaceOutputEvent.TYPE, this);
    eventBus.addHandler(PartStackStateChangedEvent.TYPE, this);
    eventBus.addHandler(
        ActivateProcessOutputEvent.TYPE, event -> setActiveProcessOutput(event.getPid()));

    final PartStack partStack =
        checkNotNull(
            workspaceAgent.getPartStack(PartStackType.INFORMATION),
            "Information part stack should not be a null");
    partStack.addPart(this);

    if (appContext.getFactory() == null) {
      partStack.setActivePart(this);
    }

    Scheduler.get()
        .scheduleDeferred(
            new Scheduler.ScheduledCommand() {
              @Override
              public void execute() {
                updateMachineList();
              }
            });
  }

