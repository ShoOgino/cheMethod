  @Override
  public Promise<Void> loadState(@NotNull JsonObject state) {
    if (state.hasKey("PART_STACKS")) {
      JsonObject partStacksState = state.getObject("PART_STACKS");

      // Don't restore part dimensions if perspective is maximized.
      boolean perspectiveMaximized = isPerspectiveMaximized(partStacksState);

      for (String partStackType : partStacksState.keys()) {
        JsonObject partStackState = partStacksState.getObject(partStackType);
        switch (PartStackType.valueOf(partStackType)) {
          case INFORMATION:
            loadPartStackState(
                partStacks.get(INFORMATION),
                belowPartController,
                partStackState,
                perspectiveMaximized);
            break;
          case NAVIGATION:
            loadPartStackState(
                partStacks.get(NAVIGATION),
                leftPartController,
                partStackState,
                perspectiveMaximized);
            break;
          case TOOLING:
            loadPartStackState(
                partStacks.get(TOOLING), rightPartController, partStackState, perspectiveMaximized);
            break;
        }
      }
    }

    // restore perspective's active part
    if (state.hasKey("ACTIVE_PART")) {
      String activePart = state.getString("ACTIVE_PART");
      Provider<PartPresenter> provider = dynaProvider.getProvider(activePart);
      if (provider != null) {
        setActivePart(provider.get());
      }
    }

    return Promises.resolve(null);
  }

