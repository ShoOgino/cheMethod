    /**
     * Listens message bus and handles workspace events.
     *
     * @param workspace
     *         workspace to listen
     * @param callback
     *         callback
     * @param restoreFromSnapshot
     *         restore or not the workspace from snapshot
     */
    public void handleWorkspaceEvents(final WorkspaceImpl workspace, final Callback<Component, Exception> callback,
                                      final Boolean restoreFromSnapshot) {

        loader.show(STARTING_WORKSPACE_RUNTIME);

        setCurrentWorkspace(workspace);

        String workspaceId = appContext.getWorkspaceId();

        subscribe(WS_STATUS_ERROR_MSG, "event:workspace-status:subscribe", workspaceId);
        subscribe(WS_AGENT_OUTPUT_ERROR_MSG, "event:ws-agent-output:subscribe", workspaceId);
        subscribe(ENV_STATUS_ERROR_MSG, "event:environment-status:subscribe", workspaceId);

        if (appContext.getActiveRuntime() != null) {
            appContext.getActiveRuntime().getMachines().forEach(machine -> subscribeEnvironmentOutput(machine.getDisplayName()));
        }

        WorkspaceStatus workspaceStatus = workspace.getStatus();
        switch (workspaceStatus) {
            case SNAPSHOTTING:
                loader.show(CREATING_WORKSPACE_SNAPSHOT);
                break;
            case STARTING:
                eventBus.fireEvent(new WorkspaceStartingEvent(workspace));
                break;
            case RUNNING:
                Scheduler.get().scheduleDeferred(() -> {
                    loader.setSuccess(STARTING_WORKSPACE_RUNTIME);
                    eventBus.fireEvent(new WorkspaceStartedEvent(workspace));
                });
                break;
            default:
                workspaceServiceClient.getSettings()
                                      .then((Function<Map<String, String>, Map<String, String>>)settings -> {
                                          if (Boolean.parseBoolean(settings.getOrDefault(CHE_WORKSPACE_AUTO_START, "true"))) {
                                              final WorkspaceConfig config = workspace.getConfig();
                                              config.getEnvironments().get(config.getDefaultEnv()).getMachines().keySet()
                                                    .forEach(machine -> subscribeEnvironmentOutput(machine));
                                              startWorkspaceById(workspaceId, config.getDefaultEnv(), restoreFromSnapshot);
                                          } else {
                                              loader.show(WORKSPACE_STOPPED);
                                          }
                                          return settings;
                                      });
        }
    }

