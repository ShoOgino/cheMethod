    @Override
    public void onWorkspaceStatusChangedEvent(WorkspaceStatusChangedEvent event) {
        WorkspaceStatusEvent statusEvent = event.getWorkspaceStatusEvent();
        final String workspaceId = statusEvent.getWorkspaceId();
        switch (statusEvent.getEventType()) {
            case STARTING:
                onWorkspaceStarting(workspaceId);
                break;

            case RUNNING:
                onWorkspaceStarted(workspaceId);
                break;

            case ERROR:
                notificationManager.notify(locale.workspaceStartFailed(), FAIL, FLOAT_MODE);
                startWorkspaceNotification.show(workspaceId);
                final String workspaceName = appContext.getWorkspace().getConfig().getName();
                final String error = statusEvent.getError();
                workspaceServiceClient.getWorkspaces(SKIP_COUNT, MAX_COUNT).then(showErrorDialog(workspaceName, error));
                eventBus.fireEvent(new WorkspaceStoppedEvent(appContext.getWorkspace()));
                eventBus.fireEvent(WsAgentStateEvent.createWsAgentStoppedEvent());
                break;

            case STOPPING:
                loader.show(LoaderPresenter.Phase.STOPPING_WORKSPACE);

                if (wsStartedNotification != null) {
                    wsStartedNotification.cancel();
                    wsStartedNotification = null;
                }

                break;

            case STOPPED:
                loader.setSuccess(LoaderPresenter.Phase.STOPPING_WORKSPACE);
                startWorkspaceNotification.show(statusEvent.getWorkspaceId());
                eventBus.fireEvent(WsAgentStateEvent.createWsAgentStoppedEvent());
                eventBus.fireEvent(new WorkspaceStoppedEvent(appContext.getWorkspace()));
                break;

            case SNAPSHOT_CREATING:
                loader.show(LoaderPresenter.Phase.CREATING_WORKSPACE_SNAPSHOT);
                snapshotNotifier.creationStarted();
                break;

            case SNAPSHOT_CREATED:
                loader.setSuccess(LoaderPresenter.Phase.CREATING_WORKSPACE_SNAPSHOT);
                snapshotNotifier.successfullyCreated();

                wsStartedNotification = new DelayedTask() {
                    @Override
                    public void onExecute() {

                            /*
                              Workaround. When ws is in snapshotting state we can get only running state after. But we know that stopping
                              state may occur after running, so when user is entering ide when the last one is stopping we haven't init
                              ide then.
                             */

                        onWorkspaceStarted(workspaceId);
                    }
                };
                wsStartedNotification.delay(500);

                break;

            case SNAPSHOT_CREATION_ERROR:
                loader.setError(LoaderPresenter.Phase.CREATING_WORKSPACE_SNAPSHOT);
                snapshotNotifier.creationError("Snapshot creation error: " + statusEvent.getError());
                break;
        }
    }

