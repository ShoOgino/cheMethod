  private Promise<Project> recallImportWithCredentials(
      final SourceStorage sourceStorage, final Path path) {
    return createFromAsyncRequest(
        new RequestCall<Project>() {
          @Override
          public void makeCall(final AsyncCallback<Project> callback) {
            credentialsDialog
                .askCredentials()
                .then(
                    new Operation<Credentials>() {
                      @Override
                      public void apply(Credentials credentials) throws OperationException {
                        sourceStorage.getParameters().put("username", credentials.getUsername());
                        sourceStorage.getParameters().put("password", credentials.getPassword());
                        doImport(path, sourceStorage)
                            .then(
                                new Operation<Project>() {
                                  @Override
                                  public void apply(Project project) throws OperationException {
                                    callback.onSuccess(project);
                                  }
                                })
                            .catchError(
                                new Operation<PromiseError>() {
                                  @Override
                                  public void apply(PromiseError error) throws OperationException {
                                    callback.onFailure(error.getCause());
                                  }
                                });
                      }
                    });
          }
        });
  }

