    /**
     * Create batch of projects according to their configurations.
     * <p/>
     * Notes: a project will be created by importing when project configuration contains {@link SourceStorageDto}
     * object, otherwise this one will be created corresponding its {@link NewProjectConfigDto}:
     * <li> - {@link NewProjectConfigDto} object contains only one mandatory {@link NewProjectConfigDto#setPath(String)} field.
     * In this case Project will be created as project of "blank" type </li>
     * <li> - a project will be created as project of "blank" type when declared primary project type is not registered, </li>
     * <li> - a project will be created without mixin project type when declared mixin project type is not registered</li>
     * <li> - for creating a project by generator {@link NewProjectConfigDto#getOptions()} should be specified.</li>
     *
     * @param configurations
     *         the list of configurations to creating projects
     * @return {@link Promise} with the list of {@link ProjectConfigDto}
     * @see ProjectConfigDto
     */
    public Promise<List<ProjectConfigDto>> createBatchProjects(List<NewProjectConfigDto> configurations) {
        final String url = encodeAllowEscapes(getBaseUrl() + BATCH_PROJECTS);
        final String loaderMessage = configurations.size() > 1 ? "Creating the batch of projects..." : "Creating project...";
        return reqFactory.createPostRequest(url, configurations)
                         .header(ACCEPT, MimeType.APPLICATION_JSON)
                         .loader(loaderFactory.newLoader(loaderMessage))
                         .send(unmarshaller.newListUnmarshaller(ProjectConfigDto.class));
    }

