  @Override
  public void restore() {
    // Update the view state.
    view.setMaximized(false);

    // Don't restore part stack if it's in MINIMIZED or NORMAL state.
    if (state == State.MINIMIZED || state == State.NORMAL) {
      return;
    }

    // Restore and update the stack.
    State prevState = state;
    state = State.NORMAL;

    if (!parts.isEmpty()) {

      if (currentSize < MIN_PART_SIZE) {
        currentSize = DEFAULT_PART_SIZE;
      }

      workBenchPartController.setSize(currentSize);
      workBenchPartController.setHidden(false);
    }

    // Ask the delegate to restore part stacks if this part stack was maximized.
    if (prevState == State.MAXIMIZED) {
      if (delegate != null) {
        delegate.onRestore(this);
      }
    }

    // Select active tab.
    if (activeTab != null) {
      activeTab.select();
    }

    // Notify the part stack state has been changed.
    Scheduler.get()
        .scheduleDeferred(
            new Scheduler.ScheduledCommand() {
              @Override
              public void execute() {
                eventBus.fireEvent(new PartStackStateChangedEvent(PartStackPresenter.this));
              }
            });
  }

