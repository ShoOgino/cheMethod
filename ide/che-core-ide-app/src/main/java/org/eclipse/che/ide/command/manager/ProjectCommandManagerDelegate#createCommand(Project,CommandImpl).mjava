  /**
   * Creates new command of the specified type.
   *
   * <p><b>Note</b> that command's name will be generated by {@link CommandManager} and command line
   * will be provided by an appropriate {@link CommandType}.
   */
  Promise<CommandImpl> createCommand(Project project, final CommandImpl newCommand) {
    final List<CommandImpl> commands = getCommands(project);

    for (CommandImpl projectCommand : commands) {
      if (projectCommand.getName().equals(newCommand.getName())) {
        return promiseProvider.reject(
            new Exception(
                "Command '"
                    + newCommand.getName()
                    + "' is already associated to the project '"
                    + project.getName()
                    + "'"));
      }
    }

    commands.add(newCommand);

    return updateProject(project, commands).then((Function<Void, CommandImpl>) arg -> newCommand);
  }

