    protected Promise<Void> delete(final Resource resource) {
        checkArgument(!resource.getLocation().isRoot(), "Workspace root is not allowed to be moved");

        return ps.deleteItem(resource.getLocation()).then(new Function<Void, Void>() {
            @Override
            public Void apply(Void ignored) throws FunctionException {

                Resource[] descToRemove = null;

                if (resource instanceof Container) {
                    final Optional<Resource[]> optDescendants = store.getAll(resource.getLocation());

                    if (optDescendants.isPresent()) {
                        descToRemove = optDescendants.get();
                    }
                }

                store.dispose(resource.getLocation(), !resource.isFile());

                eventBus.fireEvent(new ResourceChangedEvent(new ResourceDeltaImpl(resource, REMOVED | DERIVED)));

                if (descToRemove != null) {
                    for (Resource toRemove : descToRemove) {
                        eventBus.fireEvent(new ResourceChangedEvent(new ResourceDeltaImpl(toRemove, REMOVED | DERIVED)));
                    }
                }

                return null;
            }
        });
    }

