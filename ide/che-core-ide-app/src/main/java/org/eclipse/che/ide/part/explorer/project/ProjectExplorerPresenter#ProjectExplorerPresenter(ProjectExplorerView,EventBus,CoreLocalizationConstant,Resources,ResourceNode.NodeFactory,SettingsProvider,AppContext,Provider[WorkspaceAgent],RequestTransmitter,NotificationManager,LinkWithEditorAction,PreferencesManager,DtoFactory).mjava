  @Inject
  public ProjectExplorerPresenter(
      ProjectExplorerView view,
      EventBus eventBus,
      CoreLocalizationConstant locale,
      Resources resources,
      ResourceNode.NodeFactory nodeFactory,
      SettingsProvider settingsProvider,
      AppContext appContext,
      Provider<WorkspaceAgent> workspaceAgentProvider,
      RequestTransmitter requestTransmitter,
      NotificationManager notificationManager,
      LinkWithEditorAction linkWithEditorAction,
      PreferencesManager preferencesManager,
      DtoFactory dtoFactory) {
    this.view = view;
    this.eventBus = eventBus;
    this.nodeFactory = nodeFactory;
    this.settingsProvider = settingsProvider;
    this.locale = locale;
    this.resources = resources;
    this.appContext = appContext;
    this.requestTransmitter = requestTransmitter;
    this.notificationManager = notificationManager;
    this.linkWithEditorAction = linkWithEditorAction;
    this.preferencesManager = preferencesManager;
    this.dtoFactory = dtoFactory;
    this.view.setDelegate(this);

    eventBus.addHandler(ResourceChangedEvent.getType(), this);
    eventBus.addHandler(MarkerChangedEvent.getType(), this);
    eventBus.addHandler(SyntheticNodeUpdateEvent.getType(), this);
    eventBus.addHandler(WorkspaceStoppedEvent.TYPE, event -> getTree().getNodeStorage().clear());

    view.getTree()
        .getSelectionModel()
        .addSelectionChangedHandler(event -> setSelection(new Selection<>(event.getSelection())));

    view.getTree()
        .addBeforeExpandHandler(
            event -> {
              NodeDescriptor nodeDescriptor = view.getTree().getNodeDescriptor(event.getNode());

              if (event.getNode() instanceof SyntheticNode
                  && nodeDescriptor != null
                  && nodeDescriptor.isExpandDeep()) {
                event.setCancelled(true);
              }
            });

    view.getTree()
        .getNodeLoader()
        .addPostLoadHandler(
            event -> {
              for (Node node : event.getReceivedNodes()) {
                if (node instanceof ResourceNode
                    && expandQueue.remove(((ResourceNode) node).getData().getLocation())) {
                  view.getTree().setExpanded(node, true);
                }
              }
            });

    treeExpander = new ProjectExplorerTreeExpander(view.getTree(), appContext);

    registerNative();

    // when ide has already initialized, then we force set focus to the current part
    eventBus.addHandler(
        ExtensionsInitializedEvent.getType(),
        event -> partStack.setActivePart(ProjectExplorerPresenter.this));

    Scheduler.get()
        .scheduleDeferred(
            () -> {
              PartStack partStack =
                  checkNotNull(
                      workspaceAgentProvider.get().getPartStack(PartStackType.NAVIGATION),
                      "Navigation part stack should not be a null");
              partStack.addPart(ProjectExplorerPresenter.this);
              partStack.setActivePart(ProjectExplorerPresenter.this);
            });

    updateLinkWithEditorButtonState();
  }

