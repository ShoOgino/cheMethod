    /**
     * Starts workspace by id when web socket connected.
     *
     * @param workspace
     *         workspace which will be started
     * @param callback
     *         callback to be executed
     */
    public void startWorkspaceById(final WorkspaceDto workspace, final Callback<Component, Exception> callback) {
        this.callback = callback;
        workspaceServiceClient.getWorkspace(workspace.getId()).then(new Operation<WorkspaceDto>() {
            @Override
            public void apply(WorkspaceDto arg) throws OperationException {
                loader.show(initialLoadingInfo);
                initialLoadingInfo.setOperationStatus(WORKSPACE_BOOTING.getValue(), IN_PROGRESS);

                if (messageBus != null) {
                    messageBus.cancelReconnection();
                }
                messageBus = messageBusProvider.createMessageBus(workspace.getId());

                messageBus.addOnOpenHandler(new ConnectionOpenedHandler() {
                    @Override
                    public void onOpen() {
                        messageBus.removeOnOpenHandler(this);
                        subscribeToWorkspaceStatusWebSocket(workspace);

                        WorkspaceStatus workspaceStatus = workspace.getStatus();

                        switch (workspaceStatus) {
                            case STARTING:
                                handleWsStart(workspace);
                                break;

                            case RUNNING:
                                setCurrentWorkspace(workspace);
                                Scheduler.get().scheduleDeferred(new Scheduler.ScheduledCommand() {
                                    @Override
                                    public void execute() {
                                        initialLoadingInfo.setOperationStatus(WORKSPACE_BOOTING.getValue(), SUCCESS);
                                        notificationManager.notify(locale.startedWs(), StatusNotification.Status.SUCCESS, FLOAT_MODE);
                                        eventBus.fireEvent(new WorkspaceStartedEvent(workspace));
                                    }
                                });
                                break;

                            default:
                                checkWorkspaceForSnapshots(workspace);
                        }
                    }
                });
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError err) throws OperationException {
                Log.error(getClass(), err.getCause());
                if (ExceptionUtils.getStatusCode(err.getCause()) == HTTPStatus.FORBIDDEN) {
                    eventBus.fireEvent(new HttpSessionDestroyedEvent());
                }
            }
        });
    }

