  private EnvironmentDto getMultiMachineEnvironment() {
    RecipeDto recipe =
        dtoFactory
            .createDto(RecipeDto.class)
            .withType("compose")
            .withContentType("application/x-yaml")
            .withContent(
                "services:\n db:\n  image: eclipse/mysql\n  environment:\n   MYSQL_ROOT_PASSWORD: password\n   MYSQL_DATABASE: petclinic\n   MYSQL_USER: petclinic\n   MYSQL_PASSWORD: password\n  mem_limit: 1073741824\n dev-machine:\n  image: eclipse/ubuntu_jdk8\n  mem_limit: 2147483648\n  depends_on:\n    - db");

    List<String> devInstallers = new ArrayList<>();
    devInstallers.add("org.eclipse.che.exec");
    devInstallers.add("org.eclipse.che.terminal");
    devInstallers.add("org.eclipse.che.ws-agent");
    devInstallers.add("org.eclipse.che.ssh");

    MachineConfigDto devMachine =
        dtoFactory
            .createDto(MachineConfigDto.class)
            .withInstallers(devInstallers)
            .withAttributes(singletonMap("memoryLimitBytes", MEMORY_LIMIT_BYTES));

    List<String> dbInstallers = new ArrayList<>();
    dbInstallers.add("org.eclipse.che.exec");
    dbInstallers.add("org.eclipse.che.terminal");

    MachineConfigDto dbMachine =
        dtoFactory
            .createDto(MachineConfigDto.class)
            .withInstallers(dbInstallers)
            .withAttributes(singletonMap("memoryLimitBytes", MEMORY_LIMIT_BYTES));

    Map<String, MachineConfigDto> machines = new HashMap<>();
    machines.put("dev-machine", devMachine);
    machines.put("db", dbMachine);

    return dtoFactory.createDto(EnvironmentDto.class).withRecipe(recipe).withMachines(machines);
  }

