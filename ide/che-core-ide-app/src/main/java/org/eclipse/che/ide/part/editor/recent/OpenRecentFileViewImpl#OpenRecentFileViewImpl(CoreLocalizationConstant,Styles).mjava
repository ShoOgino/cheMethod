  @Inject
  public OpenRecentFileViewImpl(CoreLocalizationConstant locale, Styles styles) {

    setWidget(uiBinder.createAndBindUi(this));

    styles.css().ensureInjected();

    pathLabel = new Label();
    pathLabel.setStyleName(styles.css().label());

    final NodeStorage storage = new NodeStorage();
    final NodeLoader loader = new NodeLoader();
    tree = new Tree(storage, loader);
    tree.setPresentationRenderer(
        new DefaultPresentationRenderer<Node>(tree.getTreeStyles()) {
          @Override
          public Element render(Node node, String domID, Tree.Joint joint, int depth) {
            Element element = super.render(node, domID, joint, depth);

            element.setAttribute("name", node.getName());

            if (node instanceof ResourceNode) {
              element.setAttribute(
                  "path", ((ResourceNode) node).getData().getLocation().toString());
              element.setAttribute(
                  "project",
                  ((ResourceNode) node)
                      .getData()
                      .getRelatedProject()
                      .get()
                      .getLocation()
                      .toString());
            }

            if (node instanceof HasAttributes
                && ((HasAttributes) node).getAttributes().containsKey(CUSTOM_BACKGROUND_FILL)) {
              element
                  .getFirstChildElement()
                  .getStyle()
                  .setBackgroundColor(
                      ((HasAttributes) node).getAttributes().get(CUSTOM_BACKGROUND_FILL).get(0));
            }

            return element;
          }
        });
    tree.setAutoSelect(true);
    tree.getSelectionModel().setSelectionMode(SINGLE);
    tree.getSelectionModel()
        .addSelectionChangedHandler(
            new SelectionChangedEvent.SelectionChangedHandler() {
              @Override
              public void onSelectionChanged(SelectionChangedEvent event) {
                List<Node> selection = event.getSelection();
                if (selection == null || selection.isEmpty()) {
                  pathLabel.setText("");
                  pathLabel.setTitle("");
                  return;
                }

                Node head = selection.get(0);

                if (head instanceof ResourceNode) {
                  String path =
                      getShortPath(((ResourceNode) head).getData().getLocation().toString());
                  pathLabel.setText(path);
                  pathLabel.setTitle(path);
                  return;
                }

                pathLabel.setText("");
                pathLabel.setTitle("");
              }
            });

    KeyboardNavigationHandler handler =
        new KeyboardNavigationHandler() {
          @Override
          public void onEnter(NativeEvent evt) {
            hide();
          }
        };

    handler.bind(tree);

    tree.addDomHandler(
        new DoubleClickHandler() {
          @Override
          public void onDoubleClick(DoubleClickEvent event) {
            hide();
          }
        },
        DoubleClickEvent.getType());

    tree.ensureDebugId("recent-files");
    tree.getElement().getStyle().setOverflowY(AUTO);

    content.addSouth(pathLabel, 20.);
    content.add(tree);

    setTitle(locale.openRecentFilesTitle());

    setHideOnEscapeEnabled(true);

    getFooter().setVisible(false);

    getWidget().setStyleName(styles.css().window());

    hideCrossButton();
  }

