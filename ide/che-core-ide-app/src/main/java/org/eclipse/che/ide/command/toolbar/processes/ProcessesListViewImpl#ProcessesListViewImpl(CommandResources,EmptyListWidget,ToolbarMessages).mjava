  @Inject
  public ProcessesListViewImpl(
      CommandResources resources, EmptyListWidget emptyListWidget, ToolbarMessages messages) {
    this.emptyListWidget = emptyListWidget;
    this.messages = messages;

    listItems = new HashMap<>();
    renderers = new HashMap<>();

    execLabel = new Label("EXEC");
    execLabel.addStyleName(resources.commandToolbarCss().processesListExecLabel());

    loadLabel = new Label("LOAD");
    loadLabel.addStyleName(resources.commandToolbarCss().processesListLoadLabel());

    dropdownList = new DropdownList(emptyListWidget, true);
    dropdownList.setWidth("100%");
    dropdownList.ensureDebugId("dropdown-processes");
    dropdownList.setSelectionHandler(
        item -> {
          if (item instanceof CreateCommandItem) {
            delegate.onCreateCommand();
          } else {
            listItems
                .entrySet()
                .stream()
                .filter(entry -> item.equals(entry.getValue()))
                .forEach(entry -> delegate.onProcessChosen(entry.getKey()));
          }
        });

    rootPanel = new FlowPanel();
    rootPanel.add(execLabel);
    rootPanel.add(loadLabel);
    rootPanel.add(dropdownList);

    createCommandItem = new CreateCommandItem();
    createCommandItemRenderer = new CreateCommandItemRenderer();
    checkCreateCommandItem();

    loadInfo = new FlowPanel();
    loadInfo.setStyleName(resources.commandToolbarCss().loaderPanel());
    rootPanel.add(loadInfo);

    loadingLabel = new FlowPanel();
    loadingLabel.setStyleName(resources.commandToolbarCss().loaderPanelLabel());
    loadInfo.add(loadingLabel);

    loadingProgress = new FlowPanel();
    loadingProgress.setStyleName(resources.commandToolbarCss().loaderPanelProgressBar());
    loadInfo.add(loadingProgress);
  }

