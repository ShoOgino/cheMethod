    /**
     * Starts workspace based on workspace id and environment.
     *
     * @param id
     *         workspace ID
     * @param envName
     *         the name of the workspace environment that should be used for start
     * @param restore
     *         if <code>true</code> workspace will be restored from snapshot if snapshot exists,
     *         if <code>false</code> workspace will not be restored from snapshot
     *         even if auto-restore is enabled and snapshot exists
     * @return a promise that resolves to the {@link WorkspaceImpl}, or rejects with an error
     */
    public Promise<WorkspaceImpl> startById(@NotNull final String id, final String envName, final Boolean restore) {
        String url = baseHttpUrl + "/" + id + "/runtime";
        if (restore != null) {
            url += "?restore=" + restore;
        }
        if (envName != null) {
            url += (url.contains("?") ? '&' : '?') + "environment=" + envName;
        }
        return asyncRequestFactory.createPostRequest(url, null)
                                  .header(ACCEPT, APPLICATION_JSON)
                                  .header(CONTENT_TYPE, APPLICATION_JSON)
                                  .loader(loaderFactory.newLoader("Starting workspace..."))
                                  .send(dtoUnmarshallerFactory.newUnmarshaller(WorkspaceDto.class))
                                  .then((Function<WorkspaceDto, WorkspaceImpl>)WorkspaceImpl::new);
    }

