    @Override
    public void subscribe(final String name, final StatusNotification existingNotification) {
        this.projectName = name;
        this.wsChannel = "importProject:output";
        this.notification = existingNotification;

        // TODO (spi ide): should be removed after reworking Dashboard since it depends on this class somehow
//        this.subscriptionHandler = new SubscriptionHandler<String>(new StringUnmarshallerWS()) {
//            @Override
//            protected void onMessageReceived(String result) {
//                JsonObject jsonObject = Json.parse(result);
//
//                if (jsonObject == null) {
//                    return;
//                }
//
//                if (jsonObject.hasKey("project")) {
//                    projectName = jsonObject.getString("project");
//                    notification.setTitle(locale.importingProject(projectName));
//                }
//
//                if (jsonObject.hasKey("line")) {
//                    notification.setContent(jsonObject.getString("line"));
//                }
//            }
//
//            @Override
//            protected void onErrorReceived(final Throwable throwable) {
//                wsAgentStateController.getMessageBus().then(new Operation<MessageBus>() {
//                    @Override
//                    public void apply(MessageBus messageBus) throws OperationException {
//                        try {
//                            messageBus.unsubscribe(wsChannel, subscriptionHandler);
//                        } catch (WebSocketException e) {
//                            Log.error(getClass(), e);
//                        }
//                        notification.setTitle(locale.importProjectMessageFailure(projectName));
//                        notification.setContent("");
//                        notification.setStatus(FAIL);
//                        Log.error(getClass(), throwable);
//                    }
//                }).catchError(logErrorHandler);
//            }
//        };

//        wsAgentStateController.getMessageBus().then(new Operation<MessageBus>() {
//            @Override
//            public void apply(final MessageBus messageBus) throws OperationException {
//                try {
//                    messageBus.subscribe(wsChannel, subscriptionHandler);
//                } catch (WebSocketException wsEx) {
//                    Log.error(ProjectNotificationSubscriberImpl.class, wsEx);
//                }
//            }
//        }).catchError(logErrorHandler);
    }

