  /**
   * Deletes the given resources and its descendants in the standard manner from file system. Method
   * requires a confirmation from the user before resource will be removed.
   *
   * @param needConfirmation true if confirmation is need
   * @param resources the resources to delete
   * @return the {@link Promise} with void if removal has successfully completed
   * @see #delete(Resource...)
   */
  public Promise<Void> delete(boolean needConfirmation, Resource... resources) {
    checkArgument(resources != null, "Null resource occurred");
    checkArgument(resources.length > 0, "No resources were provided to remove");

    final Resource[] filtered = filterDescendants(resources);

    if (!needConfirmation) {
      Promise<?>[] deleteAll = new Promise<?>[resources.length];
      for (int i = 0; i < resources.length; i++) {
        deleteAll[i] = resources[i].delete();
      }

      return promiseProvider
          .all(deleteAll)
          .then(
              new Function<JsArrayMixed, Void>() {
                @Override
                public Void apply(JsArrayMixed arg) throws FunctionException {
                  return null;
                }
              });
    }

    List<Resource> projectsList = newArrayList();

    for (Resource resource : filtered) {
      if (resource.getResourceType() == PROJECT) {
        projectsList.add(resource);
      }
    }

    Resource[] projects = projectsList.toArray(new Resource[projectsList.size()]);

    if (projectsList.isEmpty()) {
      // if no project were found in nodes list
      return promptUserToDelete(filtered);
    } else if (projects.length < filtered.length) {
      // inform user that we can't delete mixed list of the nodes
      return promiseProvider.reject(
          JsPromiseError.create(localization.mixedProjectDeleteMessage()));
    } else {
      // delete only project nodes
      return promptUserToDelete(projects);
    }
  }

