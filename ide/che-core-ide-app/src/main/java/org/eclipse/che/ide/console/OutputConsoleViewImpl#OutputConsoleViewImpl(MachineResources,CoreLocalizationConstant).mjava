  @Inject
  public OutputConsoleViewImpl(MachineResources resources, CoreLocalizationConstant localization) {
    initWidget(UI_BINDER.createAndBindUi(this));

    reRunProcessButton.add(new SVGImage(resources.reRunIcon()));
    stopProcessButton.add(new SVGImage(resources.stopIcon()));
    clearOutputsButton.add(new SVGImage(resources.clearOutputsIcon()));
    downloadOutputsButton.getElement().setInnerHTML(FontAwesome.DOWNLOAD);

    wrapTextButton.add(new SVGImage(resources.lineWrapIcon()));
    scrollToBottomButton.add(new SVGImage(resources.scrollToBottomIcon()));

    scrollPanel.addDomHandler(this, ScrollEvent.getType());

    reRunProcessButton.addDomHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            if (!reRunProcessButton.getElement().hasAttribute("disabled") && delegate != null) {
              delegate.reRunProcessButtonClicked();
            }
          }
        },
        ClickEvent.getType());

    stopProcessButton.addDomHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            if (!stopProcessButton.getElement().hasAttribute("disabled") && delegate != null) {
              delegate.stopProcessButtonClicked();
            }
          }
        },
        ClickEvent.getType());

    clearOutputsButton.addDomHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            if (!clearOutputsButton.getElement().hasAttribute("disabled") && delegate != null) {
              delegate.clearOutputsButtonClicked();
            }
          }
        },
        ClickEvent.getType());

    downloadOutputsButton.addDomHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            if (delegate != null) {
              delegate.downloadOutputsButtonClicked();
            }
          }
        },
        ClickEvent.getType());

    wrapTextButton.addDomHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent clickEvent) {
            if (!wrapTextButton.getElement().hasAttribute("disabled") && delegate != null) {
              delegate.wrapTextButtonClicked();
            }
          }
        },
        ClickEvent.getType());

    scrollToBottomButton.addDomHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            if (!scrollToBottomButton.getElement().hasAttribute("disabled") && delegate != null) {
              delegate.scrollToBottomButtonClicked();
            }
          }
        },
        ClickEvent.getType());

    Tooltip.create(
        (elemental.dom.Element) reRunProcessButton.getElement(),
        BOTTOM,
        MIDDLE,
        localization.consolesReRunButtonTooltip());

    Tooltip.create(
        (elemental.dom.Element) stopProcessButton.getElement(),
        BOTTOM,
        MIDDLE,
        localization.consolesStopButtonTooltip());

    Tooltip.create(
        (elemental.dom.Element) clearOutputsButton.getElement(),
        BOTTOM,
        MIDDLE,
        localization.consolesClearOutputsButtonTooltip());

    Tooltip.create(
        (elemental.dom.Element) wrapTextButton.getElement(),
        BOTTOM,
        MIDDLE,
        localization.consolesWrapTextButtonTooltip());

    Tooltip.create(
        (elemental.dom.Element) scrollToBottomButton.getElement(),
        BOTTOM,
        MIDDLE,
        localization.consolesAutoScrollButtonTooltip());

    toggleScrollToEndButton(followOutput);
  }

