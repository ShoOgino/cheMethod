  @UiHandler("fileName")
  void handleKeyDown(KeyDownEvent event) {
    switch (event.getNativeKeyCode()) {
      case KeyCodes.KEY_UP:
        event.stopPropagation();
        event.preventDefault();
        if (list != null) {
          list.getSelectionModel().selectPrevious();
        }
        break;

      case KeyCodes.KEY_DOWN:
        event.stopPropagation();
        event.preventDefault();
        if (list != null) {
          list.getSelectionModel().selectNext();
        }
        break;

      case KeyCodes.KEY_PAGEUP:
        event.stopPropagation();
        event.preventDefault();
        if (list != null) {
          list.getSelectionModel().selectPreviousPage();
        }
        break;

      case KeyCodes.KEY_PAGEDOWN:
        event.stopPropagation();
        event.preventDefault();
        if (list != null) {
          list.getSelectionModel().selectNextPage();
        }
        break;

      case KeyCodes.KEY_ENTER:
        event.stopPropagation();
        event.preventDefault();
        SearchResultDto selectedItem = list.getSelectionModel().getSelectedItem();
        if (selectedItem != null) {
          delegate.onFileSelected(Path.valueOf(selectedItem.getItemReference().getPath()));
        }
        break;

      case KeyCodes.KEY_ESCAPE:
        event.stopPropagation();
        event.preventDefault();
        hidePopup();
        break;
      default:
        // here need some delay to be sure input box initiated with given value
        // in manually testing hard to reproduce this problem but it reproduced with selenium tests
        new Timer() {
          @Override
          public void run() {
            delegate.onFileNameChanged(fileName.getText());
          }
        }.schedule(300);
        break;
    }
  }

