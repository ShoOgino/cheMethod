  @Inject
  public SelectPathViewImpl(
      Styles styles,
      SkipHiddenNodesInterceptor skipHiddenNodesInterceptor,
      SkipLeafsInterceptor skipLeafsInterceptor) {
    this.skipLeafsInterceptor = skipLeafsInterceptor;
    Widget widget = uiBinder.createAndBindUi(this);
    widget.addStyleName(styles.css().window());
    setWidget(widget);

    styles.css().ensureInjected();

    final NodeStorage storage = new NodeStorage();
    final NodeLoader loader =
        new NodeLoader(Collections.<NodeInterceptor>singleton(skipHiddenNodesInterceptor));
    tree = new Tree(storage, loader);
    tree.setPresentationRenderer(
        new DefaultPresentationRenderer<Node>(tree.getTreeStyles()) {
          @Override
          public Element render(Node node, String domID, Tree.Joint joint, int depth) {
            Element element = super.render(node, domID, joint, depth);

            element.setAttribute("name", node.getName());

            if (node instanceof ResourceNode) {
              element.setAttribute(
                  "path", ((ResourceNode) node).getData().getLocation().toString());
            }

            if (node instanceof HasAttributes
                && ((HasAttributes) node).getAttributes().containsKey(CUSTOM_BACKGROUND_FILL)) {
              element
                  .getFirstChildElement()
                  .getStyle()
                  .setBackgroundColor(
                      ((HasAttributes) node).getAttributes().get(CUSTOM_BACKGROUND_FILL).get(0));
            }

            return element;
          }
        });

    tree.setAutoSelect(true);
    tree.getSelectionModel().setSelectionMode(SINGLE);
    tree.getSelectionModel()
        .addSelectionChangedHandler(
            new SelectionChangedEvent.SelectionChangedHandler() {
              @Override
              public void onSelectionChanged(SelectionChangedEvent event) {
                final List<Node> selection = event.getSelection();
                if (selection == null || selection.isEmpty()) {
                  delegate.onPathSelected(Path.ROOT);
                  return;
                }

                final Node head = selection.get(0);

                if (head instanceof ResourceNode) {
                  final Path path = ((ResourceNode) head).getData().getLocation();
                  delegate.onPathSelected(path);
                }
              }
            });

    tree.ensureDebugId("select-path");
    tree.getElement().getStyle().setOverflowY(AUTO);

    content.add(tree);

    KeyboardNavigationHandler handler =
        new KeyboardNavigationHandler() {
          @Override
          public void onEnter(NativeEvent evt) {
            evt.preventDefault();
            hide();
            delegate.onSubmit();
          }
        };

    handler.bind(tree);

    submitBtn =
        addFooterButton(
            "Select",
            "select-path-submit-button",
            event -> {
              delegate.onSubmit();
              hide();
            },
            true);

    cancelButton =
        addFooterButton(
            "Cancel",
            "select-path-cancel-button",
            event -> {
              delegate.onCancel();
              hide();
            });

    setTitle("Select Path");
  }

