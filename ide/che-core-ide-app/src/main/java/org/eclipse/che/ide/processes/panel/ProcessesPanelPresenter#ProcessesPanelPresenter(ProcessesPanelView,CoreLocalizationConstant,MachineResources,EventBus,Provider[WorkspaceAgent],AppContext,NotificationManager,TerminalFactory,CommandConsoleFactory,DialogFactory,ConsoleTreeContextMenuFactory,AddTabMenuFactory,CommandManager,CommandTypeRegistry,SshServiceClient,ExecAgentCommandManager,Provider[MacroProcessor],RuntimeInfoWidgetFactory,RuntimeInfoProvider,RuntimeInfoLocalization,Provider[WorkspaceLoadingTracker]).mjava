  @Inject
  public ProcessesPanelPresenter(
      ProcessesPanelView view,
      CoreLocalizationConstant localizationConstant,
      MachineResources resources,
      EventBus eventBus,
      Provider<WorkspaceAgent> workspaceAgentProvider,
      AppContext appContext,
      NotificationManager notificationManager,
      TerminalFactory terminalFactory,
      CommandConsoleFactory commandConsoleFactory,
      DialogFactory dialogFactory,
      ConsoleTreeContextMenuFactory consoleTreeContextMenuFactory,
      AddTabMenuFactory addTabMenuFactory,
      CommandManager commandManager,
      CommandTypeRegistry commandTypeRegistry,
      SshServiceClient sshServiceClient,
      ExecAgentCommandManager execAgentCommandManager,
      Provider<MacroProcessor> macroProcessorProvider,
      RuntimeInfoWidgetFactory runtimeInfoWidgetFactory,
      RuntimeInfoProvider runtimeInfoProvider,
      RuntimeInfoLocalization runtimeInfoLocalization,
      Provider<WorkspaceLoadingTracker> workspaceLoadingTrackerProvider) {
    this.view = view;
    this.localizationConstant = localizationConstant;
    this.resources = resources;
    this.commandManager = commandManager;
    this.workspaceAgentProvider = workspaceAgentProvider;
    this.sshServiceClient = sshServiceClient;
    this.appContext = appContext;
    this.notificationManager = notificationManager;
    this.terminalFactory = terminalFactory;
    this.commandConsoleFactory = commandConsoleFactory;
    this.dialogFactory = dialogFactory;
    this.consoleTreeContextMenuFactory = consoleTreeContextMenuFactory;
    this.addTabMenuFactory = addTabMenuFactory;
    this.eventBus = eventBus;
    this.commandTypeRegistry = commandTypeRegistry;
    this.execAgentCommandManager = execAgentCommandManager;
    this.macroProcessorProvider = macroProcessorProvider;
    this.runtimeInfoWidgetFactory = runtimeInfoWidgetFactory;
    this.runtimeInfoProvider = runtimeInfoProvider;
    this.runtimeInfoLocalization = runtimeInfoLocalization;

    machineNodes = new HashMap<>();
    machines = new HashMap<>();
    rootNode = new ProcessTreeNode(ROOT_NODE, null, null, null, new ArrayList<ProcessTreeNode>());
    terminals = new HashMap<>();
    consoles = new HashMap<>();
    consoleCommands = new HashMap<>();

    view.setDelegate(this);

    eventBus.addHandler(ProcessFinishedEvent.TYPE, this);
    eventBus.addHandler(WorkspaceRunningEvent.TYPE, this);
    eventBus.addHandler(WorkspaceStoppedEvent.TYPE, this);
    eventBus.addHandler(MachineStartingEvent.TYPE, this);
    eventBus.addHandler(MachineRunningEvent.TYPE, this);
    eventBus.addHandler(TerminalAgentServerRunningEvent.TYPE, this);
    eventBus.addHandler(ExecAgentServerRunningEvent.TYPE, this);
    eventBus.addHandler(EnvironmentOutputEvent.TYPE, this);
    eventBus.addHandler(CommandsLoadedEvent.getType(), this);
    eventBus.addHandler(DownloadWorkspaceOutputEvent.TYPE, this);
    eventBus.addHandler(PartStackStateChangedEvent.TYPE, this);
    eventBus.addHandler(
        ActivateProcessOutputEvent.TYPE, event -> setActiveProcessOutput(event.getPid()));
    eventBus.addHandler(BasicIDEInitializedEvent.TYPE, this);

    Scheduler.get().scheduleDeferred(() -> workspaceLoadingTrackerProvider.get().startTracking());

    Scheduler.get().scheduleDeferred(this::updateMachineList);
  }

