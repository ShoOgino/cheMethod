    /** Creates or returns project wizard for the specified projectType with the given dataObject. */
    private ProjectWizard getWizardForProjectType(@NotNull ProjectTypeDto projectType, @NotNull MutableProjectConfig configDto) {
        if (wizardsCache.containsKey(projectType)) {
            return wizardsCache.get(projectType);
        }

        final Optional<ProjectWizardRegistrar> wizardRegistrar = wizardRegistry.getWizardRegistrar(projectType.getId());
        if (!wizardRegistrar.isPresent()) {
            // should never occur
            throw new IllegalStateException("WizardRegistrar for the project type " + projectType.getId() + " isn't registered.");
        }

        List<Provider<? extends WizardPage<MutableProjectConfig>>> pageProviders = wizardRegistrar.get().getWizardPages();
        final ProjectWizard projectWizard = createDefaultWizard(configDto, wizardMode);
        for (Provider<? extends WizardPage<MutableProjectConfig>> provider : pageProviders) {
            projectWizard.addPage(provider.get(), 1, false);
        }

        wizardsCache.put(projectType, projectWizard);
        return projectWizard;
    }

