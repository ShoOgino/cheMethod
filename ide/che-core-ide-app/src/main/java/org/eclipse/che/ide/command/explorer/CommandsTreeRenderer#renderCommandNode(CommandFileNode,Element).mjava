  private void renderCommandNode(CommandFileNode node, Element nodeContainerElement) {
    nodeContainerElement.addClassName(resources.commandsExplorerCss().commandNode());

    final Element removeCommandButton = createButton(resources.removeCommand());
    Event.setEventListener(
        removeCommandButton,
        event -> {
          if (ONCLICK == event.getTypeInt()) {
            event.stopPropagation();
            delegate.onCommandRemove(node.getData());
          }
        });

    final Element duplicateCommandButton = createButton(resources.duplicateCommand());
    Event.setEventListener(
        duplicateCommandButton,
        event -> {
          if (ONCLICK == event.getTypeInt()) {
            event.stopPropagation();
            delegate.onCommandDuplicate(node.getData());
          }
        });

    final Element buttonsPanel = Document.get().createSpanElement();
    buttonsPanel.setClassName(resources.commandsExplorerCss().commandNodeButtonsPanel());
    buttonsPanel.appendChild(removeCommandButton);
    buttonsPanel.appendChild(duplicateCommandButton);

    nodeContainerElement.appendChild(buttonsPanel);

    removeCommandButton.setId("commands_tree-button-remove");
    duplicateCommandButton.setId("commands_tree-button-duplicate");
  }

