  private String convertPattern(String pattern) {
    final int eol = pattern.indexOf('\n');
    if (eol != -1) {
      pattern = pattern.substring(0, eol);
    }
    if (pattern.length() >= 80) {
      pattern = pattern.substring(0, 80);
    }

    final StringBuilder buffer = new StringBuilder();

    boolean allowToLower = true;
    if (containsOnlyUppercaseLetters(pattern)) {
      allowToLower = false;
    }

    boolean firstIdentifierLetter = true;
    for (int i = 0; i < pattern.length(); i++) {
      final char c = pattern.charAt(i);
      if (Character.isLetterOrDigit(c)
          || UnicodeUtils.regexpIdentifierOrWhitespace.test(String.valueOf(c))) {
        // This logic allows to use uppercase letters only to catch the name like PDM for
        // PsiDocumentManager
        if (Character.isUpperCase(c) || Character.isDigit(c)) {

          if (!firstIdentifierLetter) {
            buffer.append("[^A-Z]*");
          }

          buffer.append("[");
          buffer.append(c);
          if (allowToLower || i == 0) {
            buffer.append('|');
            buffer.append(Character.toLowerCase(c));
          }
          buffer.append("]");
        } else if (Character.isLowerCase(c)) {
          buffer.append('[');
          buffer.append(c);
          buffer.append('|');
          buffer.append(Character.toUpperCase(c));
          buffer.append(']');
        } else {
          buffer.append(c);
        }

        firstIdentifierLetter = false;
      } else if (c == '*') {
        buffer.append(".*");
        firstIdentifierLetter = true;
      } else if (c == '.') {
        buffer.append("\\.");
        firstIdentifierLetter = true;
      } else if (c == ' ') {
        buffer.append("[^A-Z]*\\ ");
        firstIdentifierLetter = true;
      } else {
        firstIdentifierLetter = true;
        // for standard RegExp engine
        buffer.append("\\u");
        buffer.append(Integer.toHexString(c + 0x20000).substring(1));

        // for OROMATCHER RegExp engine
        //                buffer.append("\\x");
        //                buffer.append(Integer.toHexString(c + 0x20000).substring(3));
      }
    }

    return buffer.toString();
  }

