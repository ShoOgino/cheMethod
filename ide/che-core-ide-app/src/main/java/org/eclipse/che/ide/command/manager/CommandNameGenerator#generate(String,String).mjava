    /**
     * Generates unique command names.
     *
     * @param commandTypeId
     *         ID of the command type which display name should be used as part of the generated name
     * @param customName
     *         desired name. If some command with {@code customName} already exists
     *         then generated name will be begin with {@code customName}
     * @return command name
     */
    String generate(String commandTypeId, @Nullable String customName) {
        final Set<String> existingNames = commandManagerProvider.get().getCommands()
                                                                .stream()
                                                                .map(CommandImpl::getName)
                                                                .collect(toSet());

        String newName;

        if (isNullOrEmpty(customName)) {
            Optional<CommandType> commandType = typeRegistry.getCommandTypeById(commandTypeId);
            newName = "new";

            if (commandType.isPresent()) {
                newName = newName + commandType.get().getDisplayName();
            }
        } else {
            if (!existingNames.contains(customName)) {
                return customName;
            }

            newName = customName + " copy";
        }

        if (!existingNames.contains(newName)) {
            return newName;
        }

        for (int count = 1; count < 1000; count++) {
            if (!existingNames.contains(newName + "-" + count)) {
                return newName + "-" + count;
            }
        }

        return newName;
    }

