  private Promise<Project> authUserAndRecallImport(
      final String providerName,
      final String authenticateUrl,
      final Path path,
      final SourceStorage sourceStorage,
      final ProjectNotificationSubscriber subscriber) {

    return createFromAsyncRequest(
        new RequestCall<Project>() {
          @Override
          public void makeCall(final AsyncCallback<Project> callback) {
            OAuth2Authenticator authenticator =
                oAuth2AuthenticatorRegistry.getAuthenticator(providerName);
            if (authenticator == null) {
              authenticator = oAuth2AuthenticatorRegistry.getAuthenticator("default");
            }

            authenticator.authenticate(
                OAuth2AuthenticatorUrlProvider.get(
                    appContext.getMasterApiEndpoint(), authenticateUrl),
                new AsyncCallback<OAuthStatus>() {
                  @Override
                  public void onFailure(Throwable caught) {
                    callback.onFailure(new Exception(caught.getMessage()));
                  }

                  @Override
                  public void onSuccess(OAuthStatus result) {
                    if (!result.equals(OAuthStatus.NOT_PERFORMED)) {
                      oAuthServiceClient.getToken(
                          providerName,
                          new AsyncRequestCallback<OAuthToken>(
                              unmarshallerFactory.newUnmarshaller(OAuthToken.class)) {
                            @Override
                            protected void onSuccess(OAuthToken result) {
                              sourceStorage.getParameters().put("username", result.getToken());
                              sourceStorage.getParameters().put("password", result.getToken());

                              doImport(path, sourceStorage)
                                  .then(
                                      project -> {
                                        callback.onSuccess(project);
                                      })
                                  .catchError(
                                      error -> {
                                        callback.onFailure(error.getCause());
                                      });
                            }

                            @Override
                            protected void onFailure(Throwable exception) {
                              callback.onFailure(new Exception(exception.getMessage()));
                            }
                          });
                    } else {
                      subscriber.onFailure("Authentication cancelled");
                      callback.onFailure(new IllegalStateException("Authentication cancelled"));
                    }
                  }
                });
          }
        });
  }

