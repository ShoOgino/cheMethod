    protected AbstractPerspective(@NotNull String perspectiveId,
                                  @NotNull PerspectiveViewImpl view,
                                  @NotNull PartStackPresenterFactory stackPresenterFactory,
                                  @NotNull PartStackViewFactory partViewFactory,
                                  @NotNull WorkBenchControllerFactory controllerFactory,
                                  @NotNull EventBus eventBus,
                                  @NotNull DynaProvider dynaProvider) {
        this.view = view;
        this.perspectiveId = perspectiveId;
        this.dynaProvider = dynaProvider;
        this.partStacks = new HashMap<>();

        view.setDelegate(this);

        PartStackView navigationView = partViewFactory.create(LEFT, view.getLeftPanel());
        leftPartController = controllerFactory.createController(view.getSplitPanel(), view.getNavigationPanel());
        PartStack navigationPartStack = stackPresenterFactory.create(navigationView, leftPartController);
        navigationPartStack.setDelegate(this);
        partStacks.put(NAVIGATION, navigationPartStack);

        PartStackView informationView = partViewFactory.create(BELOW, view.getBottomPanel());
        belowPartController = controllerFactory.createController(view.getSplitPanel(), view.getInformationPanel());
        PartStack informationStack = stackPresenterFactory.create(informationView, belowPartController);
        informationStack.setDelegate(this);
        partStacks.put(INFORMATION, informationStack);

        PartStackView toolingView = partViewFactory.create(RIGHT, view.getRightPanel());
        rightPartController = controllerFactory.createController(view.getSplitPanel(), view.getToolPanel());
        PartStack toolingPartStack = stackPresenterFactory.create(toolingView, rightPartController);
        toolingPartStack.setDelegate(this);
        partStacks.put(TOOLING, toolingPartStack);

        eventBus.addHandler(ActivePartChangedEvent.TYPE, this);
        eventBus.addHandler(MaximizePartEvent.TYPE, this);
    }

