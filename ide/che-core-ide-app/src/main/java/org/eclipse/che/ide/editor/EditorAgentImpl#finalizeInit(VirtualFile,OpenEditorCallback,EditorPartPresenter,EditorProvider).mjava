    private Promise<Void> finalizeInit(final VirtualFile file,
                                       final OpenEditorCallback openEditorCallback,
                                       final EditorPartPresenter editor,
                                       EditorProvider editorProvider) {
        return AsyncPromiseHelper.createFromAsyncRequest(promiseCallback -> {
            openedEditors.add(editor);
            openedEditorsToProviders.put(editor, editorProvider.getId());

            workspaceAgent.setActivePart(editor);
            editor.addPropertyListener((source, propId) -> {
                if (propId == EditorPartPresenter.PROP_INPUT) {
                    promiseCallback.onSuccess(null);

                    if (editor instanceof HasReadOnlyProperty) {
                        ((HasReadOnlyProperty)editor).setReadOnly(file.isReadOnly());
                    }

                    if (editor instanceof TextEditor) {
                        editorContentSynchronizer.trackEditor(editor);
                    }
                    openEditorCallback.onEditorOpened(editor);
                    eventBus.fireEvent(FileEvent.createFileOpenedEvent(file));
                    eventBus.fireEvent(new EditorOpenedEvent(file, editor));
                }
            });
        });
    }

