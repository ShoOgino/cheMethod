  private Promise<Void> restoreInitEditor(
      final VirtualFile file,
      final OpenEditorCallback openEditorCallback,
      FileType fileType,
      final EditorPartPresenter editor,
      EditorProvider editorProvider,
      EditorPartStack editorPartStack) {
    return AsyncPromiseHelper.createFromAsyncRequest(
        (AsyncCallback<Void> promiseCallback) -> {
          OpenEditorCallback initializeCallback =
              new OpenEditorCallbackImpl() {
                @Override
                public void onEditorOpened(EditorPartPresenter editor) {
                  editorPartStack.addPart(editor);

                  openedEditors.add(editor);
                  removeFromOpeningFilesList(file.getLocation(), editorPartStack);

                  promiseCallback.onSuccess(null);
                  openEditorCallback.onEditorOpened(editor);
                  openEditorCallback.onEditorActivated(editor);

                  eventBus.fireEvent(new EditorOpenedEvent(file, editor));
                }

                @Override
                public void onInitializationFailed() {
                  promiseCallback.onFailure(
                      new Exception("Can not initialize editor for " + file.getLocation()));
                  openEditorCallback.onInitializationFailed();
                  removeFromOpeningFilesList(file.getLocation(), editorPartStack);

                  if (!openingEditorsPathsToStacks.containsKey(editorPartStack)
                      && editorPartStack.getParts().isEmpty()) {
                    editorMultiPartStack.removePartStack(editorPartStack);
                  }
                }
              };

          editor.init(new EditorInputImpl(fileType, file), initializeCallback);
          finalizeInit(file, editor, editorProvider);
        });
  }

