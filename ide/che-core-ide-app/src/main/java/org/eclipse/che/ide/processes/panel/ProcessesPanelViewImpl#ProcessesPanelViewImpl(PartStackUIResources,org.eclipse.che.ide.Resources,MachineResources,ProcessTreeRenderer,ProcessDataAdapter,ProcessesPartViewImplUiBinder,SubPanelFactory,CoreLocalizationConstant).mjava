    @Inject
    public ProcessesPanelViewImpl(PartStackUIResources partStackUIResources,
                                  org.eclipse.che.ide.Resources resources,
                                  MachineResources machineResources,
                                  ProcessTreeRenderer renderer,
                                  ProcessDataAdapter adapter,
                                  ProcessesPartViewImplUiBinder uiBinder,
                                  SubPanelFactory subPanelFactory,
                                  CoreLocalizationConstant localizationConstants) {
        super(partStackUIResources);
        setTitle(localizationConstants.viewProcessesTitle());
        this.machineResources = machineResources;

        processTreeNodes = new LinkedHashMap<>();
        widget2Panels = new HashMap<>();
        processWidgets = new HashMap<>();
        widget2TreeNodes = new HashMap<>();

        renderer.addAddTerminalClickHandler(machineId -> delegate.onAddTerminal(machineId, this));
        renderer.addPreviewSshClickHandler(machineId -> delegate.onPreviewSsh(machineId));
        renderer.addStopProcessHandler(new StopProcessHandler() {
            @Override
            public void onStopProcessClick(ProcessTreeNode node) {
                delegate.onStopCommandProcess(node);
            }

            @Override
            public void onCloseProcessOutputClick(ProcessTreeNode node) {
                switch (node.getType()) {
                    case COMMAND_NODE:
                        delegate.onCloseCommandOutputClick(node);
                        break;
                    case TERMINAL_NODE:
                        delegate.onCloseTerminal(node);
                        break;
                }
            }
        });

        processTree = Tree.create(resources, adapter, renderer);
        processTree.asWidget().addStyleName(machineResources.getCss().processTree());
        processTree.setTreeEventHandler(new Tree.Listener<ProcessTreeNode>() {
            @Override
            public void onNodeAction(TreeNodeElement<ProcessTreeNode> node) {
            }

            @Override
            public void onNodeClosed(TreeNodeElement<ProcessTreeNode> node) {
            }

            @Override
            public void onNodeContextMenu(int mouseX, int mouseY, TreeNodeElement<ProcessTreeNode> node) {
                delegate.onContextMenu(mouseX, mouseY, node.getData());
            }

            @Override
            public void onNodeDragStart(TreeNodeElement<ProcessTreeNode> node, MouseEvent event) {
            }

            @Override
            public void onNodeDragDrop(TreeNodeElement<ProcessTreeNode> node, MouseEvent event) {
            }

            @Override
            public void onNodeExpanded(TreeNodeElement<ProcessTreeNode> node) {
            }

            @Override
            public void onNodeSelected(TreeNodeElement<ProcessTreeNode> node, SignalEvent event) {
                delegate.onTreeNodeSelected(node.getData());
            }

            @Override
            public void onRootContextMenu(int mouseX, int mouseY) {
            }

            @Override
            public void onRootDragDrop(MouseEvent event) {
            }

            @Override
            public void onKeyboard(KeyboardEvent event) {
            }
        });
        processTree.asWidget().ensureDebugId("process-tree");

        splitLayoutPanel = new SplitLayoutPanel(1);

        setContentWidget(uiBinder.createAndBindUi(this));
        navigationPanel.getElement().setTabIndex(0);

        final SubPanel subPanel = subPanelFactory.newPanel();
        subPanel.setFocusListener(this);
        subPanel.setDoubleClickListener(this);
        splitLayoutPanel.add(subPanel.getView());
        focusedSubPanel = subPanel;

        tuneSplitter();
        splitLayoutPanel.setWidgetHidden(navigationPanel, true);
        navigationPanelVisible = false;
    }

