    @Inject
    public AppStateManager(Map<String, Provider<StateComponent>> persistenceComponents,
                           PreferencesManager preferencesManager,
                           JsonFactory jsonFactory,
                           EventBus eventBus,
                           AppContext appContext) {
        this.persistenceComponents = persistenceComponents;
        this.preferencesManager = preferencesManager;
        this.jsonFactory = jsonFactory;
        this.appContext = appContext;

        eventBus.addHandler(WsAgentStateEvent.TYPE, new WsAgentStateHandler() {
            @Override
            public void onWsAgentStarted(WsAgentStateEvent event) {
                Scheduler.get().scheduleDeferred(AppStateManager.this::restoreWorkspaceState);
            }

            @Override
            public void onWsAgentStopped(WsAgentStateEvent event) {
            }
        });

        eventBus.addHandler(WindowActionEvent.TYPE, new WindowActionHandler() {
            @Override
            public void onWindowClosing(WindowActionEvent event) {
                final Workspace workspace = appContext.getWorkspace();
                if (workspace != null) {
                    persistWorkspaceState(workspace.getId());
                }
            }

            @Override
            public void onWindowClosed(WindowActionEvent event) {
            }
        });
    }

