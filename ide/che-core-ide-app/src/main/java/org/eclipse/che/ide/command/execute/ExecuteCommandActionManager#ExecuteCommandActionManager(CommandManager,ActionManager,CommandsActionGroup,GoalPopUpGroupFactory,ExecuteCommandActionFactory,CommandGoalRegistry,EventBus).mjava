  @Inject
  public ExecuteCommandActionManager(
      CommandManager commandManager,
      ActionManager actionManager,
      CommandsActionGroup commandsActionGroup,
      GoalPopUpGroupFactory goalPopUpGroupFactory,
      ExecuteCommandActionFactory commandActionFactory,
      CommandGoalRegistry goalRegistry,
      EventBus eventBus) {
    this.commandManager = commandManager;
    this.actionManager = actionManager;
    this.commandsActionGroup = commandsActionGroup;
    this.goalPopUpGroupFactory = goalPopUpGroupFactory;
    this.commandActionFactory = commandActionFactory;
    this.goalRegistry = goalRegistry;

    commandActions = new HashMap<>();
    goalPopUpGroups = new HashMap<>();

    eventBus.addHandler(CommandAddedEvent.getType(), e -> addAction(e.getCommand()));
    eventBus.addHandler(CommandRemovedEvent.getType(), e -> removeAction(e.getCommand()));

    eventBus.addHandler(
        CommandUpdatedEvent.getType(),
        e -> {
          removeAction(e.getInitialCommand());
          addAction(e.getUpdatedCommand());
        });

    eventBus.addHandler(
        WsAgentStateEvent.TYPE,
        new AbstractWsAgentStateHandler() {
          @Override
          public void onWsAgentStopped(WsAgentStateEvent event) {
            disposeActions();
          }
        });

    eventBus.addHandler(
        CommandsLoadedEvent.getType(),
        e -> {
          disposeActions();
          registerActions();
        });

    actionManager.registerAction(COMMANDS_ACTION_GROUP_ID_PREFIX, commandsActionGroup);

    // inject 'Commands' menu into context menus
    ((DefaultActionGroup) actionManager.getAction(GROUP_MAIN_CONTEXT_MENU))
        .add(commandsActionGroup);
    ((DefaultActionGroup) actionManager.getAction(GROUP_EDITOR_TAB_CONTEXT_MENU))
        .add(commandsActionGroup);
    ((DefaultActionGroup) actionManager.getAction(GROUP_CONSOLES_TREE_CONTEXT_MENU))
        .add(commandsActionGroup);
  }

