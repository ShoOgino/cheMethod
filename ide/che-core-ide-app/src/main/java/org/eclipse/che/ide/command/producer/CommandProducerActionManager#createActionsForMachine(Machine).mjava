  /**
   * Creates actions for that {@link CommandProducer}s which are applicable for the given machine's
   * type.
   */
  private void createActionsForMachine(Machine machine) {
    for (CommandProducer commandProducer : commandProducers) {
      if (commandProducer.getMachineTypes().contains(machine.getConfig().getType())) {
        CommandProducerAction machineAction =
            commandProducerActionFactory.create(
                machine.getConfig().getName(), commandProducer, machine);
        final List<Action> actionList =
            actionsByMachines.computeIfAbsent(machine, key -> new ArrayList<>());
        actionList.add(machineAction);

        actionManager.registerAction(machine.getConfig().getName(), machineAction);

        DefaultActionGroup actionGroup = producersToActionGroups.get(commandProducer);
        if (actionGroup != null) {
          actionGroup.add(machineAction);

          actionsToActionGroups.put(machineAction, actionGroup);
        }
      }
    }
  }

