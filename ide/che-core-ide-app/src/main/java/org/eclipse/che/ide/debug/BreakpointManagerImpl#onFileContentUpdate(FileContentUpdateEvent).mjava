  /**
   * When source is downloaded then {@link FileContentUpdateEvent} will be generated. After that we
   * have to wait {@link DocumentChangedEvent} to know when {@link TextEditor} will be updated.
   */
  private void onFileContentUpdate(FileContentUpdateEvent event) {
    String filePath = event.getFilePath();
    if (suspendedLocation != null && suspendedLocation.getTarget().equals(filePath)) {

      EditorPartPresenter editor = getEditorForFile(filePath);
      if (editor instanceof TextEditor) {

        final TextEditor textEditor = (TextEditor) editor;
        textEditor
            .getDocument()
            .getDocumentHandle()
            .getDocEventBus()
            .addHandler(
                DocumentChangedEvent.TYPE,
                docChangedEvent -> {
                  String changedFilePath =
                      docChangedEvent
                          .getDocument()
                          .getDocument()
                          .getFile()
                          .getLocation()
                          .toString();
                  if (suspendedLocation == null
                      || !suspendedLocation.getTarget().equals(changedFilePath)) {
                    return;
                  }

                  BreakpointRenderer breakpointRenderer = getBreakpointRendererForEditor(editor);
                  if (breakpointRenderer != null) {
                    new Timer() {
                      @Override
                      public void run() {
                        breakpointRenderer.setLineActive(
                            suspendedLocation.getLineNumber() - 1, true);
                        textEditor.setCursorPosition(
                            new TextPosition(suspendedLocation.getLineNumber(), 0));
                      }
                    }.schedule(300);
                  }
                });
      }
    }
  }

