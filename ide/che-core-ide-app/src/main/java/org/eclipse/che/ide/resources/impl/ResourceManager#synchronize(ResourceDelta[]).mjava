  protected Promise<ResourceDelta[]> synchronize(final ResourceDelta[] deltas) {
    List<Promise<Void>> promisesToResolve = new ArrayList<>(deltas.length);
    for (final ResourceDelta delta : deltas) {
      if (delta.getKind() == ADDED) {
        if (delta.getFlags() == (MOVED_FROM | MOVED_TO)) {
          promisesToResolve.add(onExternalDeltaMoved(delta));
        } else {
          promisesToResolve.add(onExternalDeltaAdded(delta));
        }
      } else if (delta.getKind() == REMOVED) {
        promisesToResolve.add(onExternalDeltaRemoved(delta));

      } else if (delta.getKind() == UPDATED) {
        promisesToResolve.add(onExternalDeltaUpdated(delta));
      }
    }

    Promise<ArrayOf<?>> promise =
        promises.all2(promisesToResolve.toArray(new Promise[promisesToResolve.size()]));
    return promise.then((Function<ArrayOf<?>, ResourceDelta[]>) arg -> deltas);
  }

