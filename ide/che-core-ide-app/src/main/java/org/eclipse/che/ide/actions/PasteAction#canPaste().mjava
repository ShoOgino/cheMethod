    /**
     * Determines whether pasting can be performed.
     *
     * @return <b>true</b> if pasting can be performed, otherwise returns <b>false</b>
     */
    private boolean canPaste() {
        if (itemsToProcess == null || itemsToProcess.isEmpty()) {
            return false;
        }

        Selection<?> selection = projectExplorer.getSelection();
        if (selection == null || selection.isMultiSelection()) {
            return false;
        }

        final Node targetNode = selection.getHeadElement() instanceof Node ? (Node)selection.getHeadElement() : null;
        final Path targetPath = targetNode != null && targetNode instanceof HasStorablePath
                                ? Path.valueOf(((HasStorablePath)targetNode).getStorablePath())
                                : null;

        if (targetPath == null || targetNode.isLeaf()) {
            return false;
        }

        for (ResourceBasedNode<?> proceedItem : itemsToProcess) {

            if (!(proceedItem instanceof HasStorablePath)) {
                return false;
            }

            final Path proceedPath = Path.valueOf(((HasStorablePath)proceedItem).getStorablePath());

            if (proceedPath.equals(targetPath) || proceedPath.isPrefixOf(targetPath)) {
                //source == target or target path is prefix or source, e.g. src => /a/b/c, target => /a/b/c/d
                return false;
            } else if (targetPath.equals(proceedPath.removeLastSegments(1))) {
                //target == source's parent, e.g. src => /a/b/resource, target => /a/b, src parent => /a/b
                return false;
            } else if (!proceedItem.isLeaf() && targetNode.isLeaf() && targetPath.removeLastSegments(1).isPrefixOf(proceedPath)) {
                //source is folder, target is file, e.g. src => /a/b/c, target => /a/b/file, target parent => /a/b
                return false;
            }
        }

        return true;
    }

