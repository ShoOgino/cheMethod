    private void restoreBreakpoints() {
        Storage localStorage = Storage.getLocalStorageIfSupported();
        if (localStorage == null) {
            return;
        }

        String data = localStorage.getItem(LOCAL_STORAGE_BREAKPOINTS_KEY);
        if (data == null || data.isEmpty()) {
            return;
        }

        List<BreakpointDto> allDtoBreakpoints = dtoFactory.createListDtoFromJson(data, BreakpointDto.class);

        Promise<Void> bpPromise = promises.resolve(null);

        for (final BreakpointDto dto : allDtoBreakpoints) {
            bpPromise.thenPromise(new Function<Void, Promise<Void>>() {
                @Override
                public Promise<Void> apply(Void ignored) throws FunctionException {
                    return appContext.getWorkspaceRoot().getFile(dto.getPath()).then(new Function<Optional<File>, Void>() {
                        @Override
                        public Void apply(Optional<File> file) throws FunctionException {
                            if (dto.getType() == Type.CURRENT) {
                                doSetCurrentBreakpoint(file.get(), dto.getLineNumber());
                            } else {
                                addBreakpoint(new Breakpoint(dto.getType(),
                                                             dto.getLineNumber(),
                                                             dto.getPath(),
                                                             file.get(),
                                                             dto.isActive()));
                            }

                            return null;
                        }
                    });
                }
            });
        }
    }

