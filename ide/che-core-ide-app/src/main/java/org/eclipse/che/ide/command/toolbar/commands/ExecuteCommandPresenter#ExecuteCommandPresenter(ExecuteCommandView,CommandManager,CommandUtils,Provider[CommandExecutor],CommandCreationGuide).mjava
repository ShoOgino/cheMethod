    @Inject
    public ExecuteCommandPresenter(ExecuteCommandView view,
                                   CommandManager commandManager,
                                   CommandUtils commandUtils,
                                   Provider<CommandExecutor> commandExecutorProvider,
                                   CommandCreationGuide commandCreationGuide) {
        this.view = view;
        this.commandManager = commandManager;
        this.commandUtils = commandUtils;
        this.commandExecutorProvider = commandExecutorProvider;
        this.commandCreationGuide = commandCreationGuide;

        view.setDelegate(this);

        commandManager.addCommandLoadedListener(this::updateView);
        commandManager.addCommandChangedListener(new CommandManager.CommandChangedListener() {
            @Override
            public void onCommandAdded(CommandImpl command) {
                updateView();
            }

            @Override
            public void onCommandUpdated(CommandImpl previousCommand, CommandImpl command) {
                updateView();
            }

            @Override
            public void onCommandRemoved(CommandImpl command) {
                updateView();
            }
        });
    }

