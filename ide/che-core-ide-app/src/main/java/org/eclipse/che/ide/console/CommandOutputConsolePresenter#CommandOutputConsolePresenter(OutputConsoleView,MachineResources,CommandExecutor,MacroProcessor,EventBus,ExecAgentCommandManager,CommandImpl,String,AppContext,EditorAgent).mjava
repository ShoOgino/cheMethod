  @Inject
  public CommandOutputConsolePresenter(
      final OutputConsoleView view,
      MachineResources resources,
      CommandExecutor commandExecutor,
      MacroProcessor macroProcessor,
      EventBus eventBus,
      ExecAgentCommandManager execAgentCommandManager,
      @Assisted CommandImpl command,
      @Assisted String machineName,
      AppContext appContext,
      EditorAgent editorAgent) {
    this.view = view;
    this.resources = resources;
    this.execAgentCommandManager = execAgentCommandManager;
    this.command = command;
    this.machineName = machineName;
    this.eventBus = eventBus;
    this.commandExecutor = commandExecutor;

    setCustomizer(
        new CompoundOutputCustomizer(
            new JavaOutputCustomizer(appContext, editorAgent),
            new CSharpOutputCustomizer(appContext, editorAgent),
            new CPPOutputCustomizer(appContext, editorAgent)));

    view.setDelegate(this);

    final String previewUrl = command.getAttributes().get(COMMAND_PREVIEW_URL_ATTRIBUTE_NAME);
    if (!isNullOrEmpty(previewUrl)) {
      macroProcessor
          .expandMacros(previewUrl)
          .then(
              new Operation<String>() {
                @Override
                public void apply(String arg) throws OperationException {
                  view.showPreviewUrl(arg);
                }
              });
    } else {
      view.hidePreview();
    }

    view.showCommandLine(command.getCommandLine());
  }

