  @Inject
  public AppStateManager(
      Provider<PerspectiveManager> perspectiveManagerProvider,
      Provider<StateComponentRegistry> stateComponentRegistryProvider,
      PreferencesManager preferencesManager,
      JsonFactory jsonFactory,
      PromiseProvider promises,
      EventBus eventBus,
      AppContext appContext) {
    this.perspectiveManagerProvider = perspectiveManagerProvider;
    this.stateComponentRegistry = stateComponentRegistryProvider;
    this.preferencesManager = preferencesManager;
    this.jsonFactory = jsonFactory;
    this.promises = promises;
    this.eventBus = eventBus;
    this.appContext = appContext;

    eventBus.addHandler(WorkspaceReadyEvent.getType(), this::onWorkspaceReady);

    eventBus.addHandler(
        WindowActionEvent.TYPE,
        new WindowActionHandler() {
          @Override
          public void onWindowClosing(WindowActionEvent event) {
            Workspace workspace = appContext.getWorkspace();
            if (workspace != null) {
              persistWorkspaceState();
            }
          }

          @Override
          public void onWindowClosed(WindowActionEvent event) {}
        });
  }

