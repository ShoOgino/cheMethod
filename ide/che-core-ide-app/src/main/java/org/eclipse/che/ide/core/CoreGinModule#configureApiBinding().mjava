    /** API Bindings, binds API interfaces to the implementations */
    private void configureApiBinding() {
        // Agents
        bind(KeyBindingAgent.class).to(KeyBindingManager.class).in(Singleton.class);
        bind(SelectionAgent.class).to(SelectionAgentImpl.class).asEagerSingleton();
        bind(WorkspaceAgent.class).to(WorkspacePresenter.class).in(Singleton.class);
        bind(IconRegistry.class).to(IconRegistryImpl.class).in(Singleton.class);

        // UI Model
        bind(EditorMultiPartStack.class).to(EditorMultiPartStackPresenter.class).in(Singleton.class);
        bind(ActionManager.class).to(ActionManagerImpl.class).in(Singleton.class);

        GinMultibinder<NodeInterceptor> nodeInterceptors = GinMultibinder.newSetBinder(binder(), NodeInterceptor.class);
        nodeInterceptors.addBinding().to(DefaultNodeInterceptor.class);

        // Command API
        bind(CommandTypeRegistry.class).to(CommandTypeRegistryImpl.class).in(Singleton.class);

        bind(MacroRegistry.class).to(MacroRegistryImpl.class).in(Singleton.class);

        bind(MacroProcessor.class).to(MacroProcessorImpl.class).in(Singleton.class);

        GinMultibinder<Macro> macrosBinder = GinMultibinder.newSetBinder(binder(), Macro.class);
        macrosBinder.addBinding().to(EditorCurrentFileNameMacro.class);
        macrosBinder.addBinding().to(EditorCurrentFilePathMacro.class);
        macrosBinder.addBinding().to(EditorCurrentFileRelativePathMacro.class);
        macrosBinder.addBinding().to(EditorCurrentProjectNameMacro.class);
        macrosBinder.addBinding().to(EditorCurrentProjectTypeMacro.class);
        macrosBinder.addBinding().to(ExplorerCurrentFileNameMacro.class);
        macrosBinder.addBinding().to(ExplorerCurrentFilePathMacro.class);
        macrosBinder.addBinding().to(ExplorerCurrentFileParentPathMacro.class);
        macrosBinder.addBinding().to(ExplorerCurrentFileRelativePathMacro.class);
        macrosBinder.addBinding().to(ExplorerCurrentProjectNameMacro.class);
        macrosBinder.addBinding().to(ExplorerCurrentProjectTypeMacro.class);
        macrosBinder.addBinding().to(WorkspaceNameMacro.class);
    }

