    /** API Bindings, binds API interfaces to the implementations */
    private void configureApiBinding() {
        // Agents
        bind(KeyBindingAgent.class).to(KeyBindingManager.class).in(Singleton.class);
        bind(SelectionAgent.class).to(SelectionAgentImpl.class).asEagerSingleton();
        bind(WorkspaceAgent.class).to(WorkspacePresenter.class).in(Singleton.class);
        bind(IconRegistry.class).to(IconRegistryImpl.class).in(Singleton.class);
        // UI Model
        bind(EditorMultiPartStack.class).to(EditorMultiPartStackPresenter.class).in(Singleton.class);
        bind(ActionManager.class).to(ActionManagerImpl.class).in(Singleton.class);

        GinMultibinder<NodeInterceptor> nodeInterceptors = GinMultibinder.newSetBinder(binder(), NodeInterceptor.class);
        nodeInterceptors.addBinding().to(DefaultNodeInterceptor.class);

        // Machine
        bind(CommandPropertyValueProviderRegistry.class).to(CommandPropertyValueProviderRegistryImpl.class).in(Singleton.class);
        GinMultibinder<CommandPropertyValueProvider> macroProviders = GinMultibinder.newSetBinder(binder(), CommandPropertyValueProvider.class);
        macroProviders.addBinding().to(EditorCurrentFileNameProvider.class);
        macroProviders.addBinding().to(EditorCurrentFilePathProvider.class);
        macroProviders.addBinding().to(EditorCurrentFileRelativePathProvider.class);
        macroProviders.addBinding().to(EditorCurrentProjectNameProvider.class);
        macroProviders.addBinding().to(EditorCurrentProjectTypeProvider.class);
        macroProviders.addBinding().to(ExplorerCurrentFileNameProvider.class);
        macroProviders.addBinding().to(ExplorerCurrentFilePathProvider.class);
        macroProviders.addBinding().to(ExplorerCurrentFileRelativePathProvider.class);
        macroProviders.addBinding().to(ExplorerCurrentProjectNameProvider.class);
        macroProviders.addBinding().to(ExplorerCurrentProjectTypeProvider.class);
        macroProviders.addBinding().to(WorkspaceNameMacroProvider.class);
    }

