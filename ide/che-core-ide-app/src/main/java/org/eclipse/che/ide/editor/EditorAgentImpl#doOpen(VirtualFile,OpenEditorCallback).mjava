    private void doOpen(final VirtualFile file, final OpenEditorCallback callback) {
        EditorPartPresenter openedEditor = getOpenedEditor(file.getLocation());
        if (openedEditor != null) {
            workspaceAgent.setActivePart(openedEditor, EDITING);
            callback.onEditorActivated(openedEditor);
        } else {
            FileType fileType = fileTypeRegistry.getFileTypeByFile(file);
            EditorProvider editorProvider = editorRegistry.getEditor(fileType);
            final EditorPartPresenter editor = editorProvider.getEditor();

            editor.init(new EditorInputImpl(fileType, file), callback);
            editor.addCloseHandler(this);

            workspaceAgent.openPart(editor, EDITING);
            openedEditors.add(editor);

            workspaceAgent.setActivePart(editor);
            editor.addPropertyListener(new PropertyListener() {
                @Override
                public void propertyChanged(PartPresenter source, int propId) {
                    if (propId == EditorPartPresenter.PROP_INPUT) {
                        if (editor instanceof HasReadOnlyProperty) {
                            ((HasReadOnlyProperty)editor).setReadOnly(file.isReadOnly());
                        }

                        callback.onEditorOpened(editor);
                        eventBus.fireEvent(new EditorOpenedEvent(file, editor));
                    }
                }
            });
        }
    }

