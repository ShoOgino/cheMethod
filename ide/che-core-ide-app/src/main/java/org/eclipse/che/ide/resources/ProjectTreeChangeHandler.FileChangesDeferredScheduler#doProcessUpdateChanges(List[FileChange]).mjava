    private Promise<Void> doProcessUpdateChanges(List<FileChange> changes) {
      List<FileChange> updateChanges = getUpdateFileChanges(changes);

      if (updateChanges.isEmpty()) {
        return ProjectTreeChangeHandler.this.promises.resolve(null);
      }

      List<Path> updatePaths = getUpdateFileChangePaths(updateChanges);
      Path commonUpdatePath = getCommonUpdatePath(updatePaths);

      Promise<Optional<Container>> containerByPath = getContainerByPath(commonUpdatePath);

      return containerByPath.thenPromise(
          container -> {
            if (container.isPresent()) {
              return synchronizeChanges(container.get());
            } else {
              return ProjectTreeChangeHandler.this.promises.resolve(null);
            }
          });
    }

