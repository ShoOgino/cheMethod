  protected Promise<Resource> copy(
      final Resource source, final Path destination, final boolean force) {
    checkArgument(!source.getLocation().isRoot(), "Workspace root is not allowed to be copied");

    return findResource(destination)
        .thenPromise(
            resource -> {
              if (source.getLocation().equals(destination)) {
                return promises.reject(
                    new IllegalStateException(
                        locale.resourceCopyMoveSamePathErrorMessage(source.getName())));
              }

              if (resource.isPresent() && !force) {
                return promises.reject(
                    new IllegalStateException(
                        locale.resourceCopyMoveAlreadyExistErrorMessage(
                            source.getName(), destination.parent().toString())));
              }

              return ps.copy(
                      source.getLocation(), destination.parent(), destination.lastSegment(), force)
                  .thenPromise(
                      ignored ->
                          findResource(destination)
                              .then(
                                  (Function<Optional<Resource>, Resource>)
                                      copiedResource -> {
                                        if (copiedResource.isPresent()) {
                                          eventBus.fireEvent(
                                              new ResourceChangedEvent(
                                                  new ResourceDeltaImpl(
                                                      copiedResource.get(),
                                                      source,
                                                      ADDED | COPIED_FROM | DERIVED)));
                                          return copiedResource.get();
                                        }

                                        throw new IllegalStateException("Resource not found");
                                      }));
            });
  }

