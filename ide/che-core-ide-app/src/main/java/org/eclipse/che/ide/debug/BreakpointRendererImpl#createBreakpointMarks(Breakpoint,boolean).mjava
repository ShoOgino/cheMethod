  private Element createBreakpointMarks(Breakpoint breakpoint, boolean active) {
    BreakpointResources.Css css = breakpointResources.getCss();

    List<String> styles = new ArrayList<>();
    styles.add(css.breakpoint());
    if (!breakpoint.isEnabled()) {
      styles.add(css.disabled());
    } else if (active) {
      styles.add(css.active());
    } else {
      styles.add(css.inactive());
    }

    BreakpointConfiguration conf = breakpoint.getBreakpointConfiguration();
    boolean hasCondition =
        conf != null
            && ((conf.isConditionEnabled() && !isNullOrEmpty(conf.getCondition()))
                || (conf.isHitCountEnabled() && conf.getHitCount() != 0));

    if (hasCondition) {
      styles.add(css.condition());
    }

    StringBuilder title = new StringBuilder();
    if (conf != null) {
      if (conf.isConditionEnabled() && !isNullOrEmpty(conf.getCondition())) {
        title.append("Condition: ").append(conf.getCondition()).append('\n');
      }

      if (conf.isHitCountEnabled() && conf.getHitCount() != 0) {
        title.append("Hit count: ").append(conf.getHitCount()).append('\n');
      }

      if (conf.getSuspendPolicy() != null) {
        title.append("Suspend: ").append(conf.getSuspendPolicy().toString().toLowerCase());
      }
    }

    DivElement element = Elements.createDivElement(styles.stream().toArray(String[]::new));
    element.setTitle(title.toString());
    return element;
  }

