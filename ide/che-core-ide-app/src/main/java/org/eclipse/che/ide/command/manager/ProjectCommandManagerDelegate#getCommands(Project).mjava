  /** Returns commands for the specified {@code project}. */
  List<CommandImpl> getCommands(Project project) {
    List<String> attrValues = project.getAttributes(COMMANDS_ATTRIBUTE_NAME);
    if (attrValues == null) {
      return new ArrayList<>();
    }

    Map<String, CommandImpl> commands = new HashMap<>(attrValues.size());
    for (String commandJson : attrValues) {
      try {
        CommandDto commandDto = dtoFactory.createDtoFromJson(commandJson, CommandDto.class);
        commands.put(commandDto.getName(), new CommandImpl(commandDto));
      } catch (JSONException e) {
        Log.error(
            ProjectCommandManagerDelegate.class,
            "Unable to parse command of project '"
                + project.getPath()
                + "': "
                + commandJson
                + ". "
                + e.getMessage());
      }
    }

    return new ArrayList<>(commands.values());
  }

