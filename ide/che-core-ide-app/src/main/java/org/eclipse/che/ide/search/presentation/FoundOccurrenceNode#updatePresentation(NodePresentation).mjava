  /** {@inheritDoc} */
  @Override
  // TODO
  public void updatePresentation(@NotNull NodePresentation presentation) {
    SpanElement spanElement = createSpanElement(styles.treeStylesCss().presentableTextContainer());
    spanElement.setAttribute("debugFilePath", itemPath);
    SpanElement lineNumberElement = createSpanElement();
    lineNumberElement.setInnerHTML(
        String.valueOf(searchOccurrence.getLineNumber()) + ":&nbsp;&nbsp;&nbsp;");
    spanElement.appendChild(lineNumberElement);
    SpanElement textElement = createSpanElement();
    String phrase = searchOccurrence.getPhrase();
    String matchedLine = searchOccurrence.getLineContent();
    if (matchedLine != null && phrase != null) {
      String startOfLine = matchedLine.substring(0, matchedLine.indexOf(phrase));
      String endOfLine = matchedLine.substring(matchedLine.indexOf(phrase) + phrase.length());
      textElement.appendChild(createTextNode(startOfLine));
      SpanElement highlightElement = createSpanElement(resources.coreCss().searchMatch());
      highlightElement.setInnerText(phrase);
      textElement.appendChild(highlightElement);
      textElement.appendChild(createTextNode(endOfLine));
    } else {
      textElement.appendChild(createTextNode("Can't find sources"));
    }
    spanElement.appendChild(textElement);
    presentation.setPresentableIcon(resources.searchMatch());
    presentation.setUserElement((Element) spanElement);
  }

