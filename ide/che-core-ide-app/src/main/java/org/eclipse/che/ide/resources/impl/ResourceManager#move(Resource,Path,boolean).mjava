  protected Promise<Resource> move(
      final Resource source, final Path destination, final boolean force) {
    checkArgument(!source.getLocation().isRoot(), "Workspace root is not allowed to be moved");

    return findResource(destination)
        .thenPromise(
            resource -> {
              if (source.getLocation().equals(destination)) {
                return promises.reject(
                    new IllegalStateException(
                        locale.resourceCopyMoveSamePathErrorMessage(source.getName())));
              }

              if (resource.isPresent() && !force) {
                return promises.reject(
                    new IllegalStateException(
                        locale.resourceCopyMoveAlreadyExistErrorMessage(
                            source.getName(), destination.parent().toString())));
              }

              if (isResourceOpened(source)) {
                deletedFilesController.add(source.getLocation().toString());
              }

              return ps.move(
                      source.getLocation(), destination.parent(), destination.lastSegment(), force)
                  .thenPromise(
                      ignored2 ->
                          findResource(destination)
                              .thenPromise(
                                  movedResource -> {
                                    if (movedResource.isPresent()) {
                                      eventBus.fireEvent(
                                          new ResourceChangedEvent(
                                              new ResourceDeltaImpl(
                                                  movedResource.get(),
                                                  source,
                                                  ADDED | MOVED_FROM | MOVED_TO | DERIVED)));
                                      return promises.resolve(movedResource.get());
                                    }

                                    throw new IllegalStateException("Resource not found");
                                  }));
            });
  }

