  protected Promise<Resource> move(
      final Resource source, final Path destination, final boolean force) {
    checkArgument(!source.getLocation().isRoot(), "Workspace root is not allowed to be moved");

    return findResource(destination)
        .thenPromise(
            resource -> {
              checkState(
                  !resource.isPresent() || force,
                  "Cannot create '" + destination.toString() + "'. Resource already exists.");

              if (isResourceOpened(source)) {
                deletedFilesController.add(source.getLocation().toString());
              }

              return clientServerEventService
                  .sendFileTrackingSuspendEvent()
                  .thenPromise(
                      success -> {
                        store.dispose(
                            source.getLocation(), !source.isFile()); // TODO: need to be tested

                        return ps.move(
                                source.getLocation(),
                                destination.parent(),
                                destination.lastSegment(),
                                force)
                            .thenPromise(
                                ignored ->
                                    findResource(destination)
                                        .then(
                                            (Function<Optional<Resource>, Resource>)
                                                movedResource -> {
                                                  if (movedResource.isPresent()) {
                                                    eventBus.fireEvent(
                                                        new ResourceChangedEvent(
                                                            new ResourceDeltaImpl(
                                                                movedResource.get(),
                                                                source,
                                                                ADDED
                                                                    | MOVED_FROM
                                                                    | MOVED_TO
                                                                    | DERIVED)));

                                                    clientServerEventService
                                                        .sendFileTrackingResumeEvent();

                                                    return movedResource.get();
                                                  }

                                                  clientServerEventService
                                                      .sendFileTrackingResumeEvent();

                                                  throw new IllegalStateException(
                                                      "Resource not found");
                                                }));
                      });
            });
  }

