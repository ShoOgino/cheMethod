    private Operation<Project> addCommands(final CompleteCallback callback) {
        return new Operation<Project>() {
            @Override
            public void apply(final Project project) throws OperationException {
                Promise<CommandImpl> chain = null;
                for (final CommandDto command : dataObject.getCommands()) {
                    if (chain == null) {
                        chain = addCommand(project, command);
                    } else {
                        chain = chain.thenPromise(new Function<CommandImpl, Promise<CommandImpl>>() {
                            @Override
                            public Promise<CommandImpl> apply(CommandImpl ignored) throws FunctionException {
                                return addCommand(project, command);
                            }
                        });
                    }
                }
                
                if (chain == null) {
                    callback.onCompleted();
                } else {
                    chain.then(new Operation<CommandImpl>() {
                        @Override
                        public void apply(CommandImpl ignored) throws OperationException {
                            callback.onCompleted();
                        }
                    }).catchError(onFailure(callback));
                }
            }
        };
    }

