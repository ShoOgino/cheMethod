  private Promise<Void> openFile(
      final JsonObject file,
      final EditorPartStack editorPartStack,
      final Map<EditorPartPresenter, EditorPartStack> activeEditors) {
    return AsyncPromiseHelper.createFromAsyncRequest(
        new AsyncPromiseHelper.RequestCall<Void>() {
          @Override
          public void makeCall(final AsyncCallback<Void> callback) {
            String location = file.getString("PATH");
            Path path = Path.valueOf(location);
            if (isFileOpening(path, editorPartStack)) {
              callback.onSuccess(null);
              return;
            }

            addToOpeningFilesList(path, editorPartStack);
            resourceProvider
                .getResource(location)
                .then(
                    new Operation<java.util.Optional<VirtualFile>>() {
                      @Override
                      public void apply(java.util.Optional<VirtualFile> optionalFile)
                          throws OperationException {
                        if (optionalFile.isPresent()) {
                          restoreCreateEditor(
                              optionalFile.get(), file, editorPartStack, callback, activeEditors);
                        } else {
                          removeFromOpeningFilesList(path, editorPartStack);
                          callback.onSuccess(null);
                        }
                      }
                    });
          }
        });
  }

