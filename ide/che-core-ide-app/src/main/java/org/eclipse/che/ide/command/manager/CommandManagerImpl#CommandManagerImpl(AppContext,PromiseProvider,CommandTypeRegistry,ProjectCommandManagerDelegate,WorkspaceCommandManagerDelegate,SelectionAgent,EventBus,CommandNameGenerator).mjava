  @Inject
  public CommandManagerImpl(
      AppContext appContext,
      PromiseProvider promiseProvider,
      CommandTypeRegistry commandTypeRegistry,
      ProjectCommandManagerDelegate projectCommandManagerDelegate,
      WorkspaceCommandManagerDelegate workspaceCommandManagerDelegate,
      SelectionAgent selectionAgent,
      EventBus eventBus,
      CommandNameGenerator commandNameGenerator) {
    this.appContext = appContext;
    this.promiseProvider = promiseProvider;
    this.commandTypeRegistry = commandTypeRegistry;
    this.projectCommandManager = projectCommandManagerDelegate;
    this.workspaceCommandManager = workspaceCommandManagerDelegate;
    this.selectionAgent = selectionAgent;
    this.eventBus = eventBus;
    this.commandNameGenerator = commandNameGenerator;

    commands = new HashMap<>();
    registerNative();

    eventBus.addHandler(WorkspaceReadyEvent.getType(), e -> fetchCommands());
    eventBus.addHandler(ResourceChangedEvent.getType(), event -> {
        if (ResourceDelta.REMOVED == event.getDelta().getKind() && event.getDelta().getResource().isProject()) {
          commands.clear();
          fetchCommands();
      }
    });
    eventBus.addHandler(
        WorkspaceStoppedEvent.TYPE,
        e -> {
          commands.clear();
          notifyCommandsLoaded();
        });
  }

