  /**
   * Adds command node to process tree and displays command output
   *
   * @param machineId id of machine in which the command will be executed
   * @param outputConsole the console for command output
   * @param activate activate terminal tab
   */
  public void addCommandOutput(String machineId, OutputConsole outputConsole, boolean activate) {
    ProcessTreeNode machineTreeNode = findTreeNodeById(machineId);
    if (machineTreeNode == null) {
      notificationManager.notify(
          localizationConstant.failedToExecuteCommand(),
          localizationConstant.machineNotFound(machineId),
          FAIL,
          FLOAT_MODE);
      Log.error(getClass(), localizationConstant.machineNotFound(machineId));
      return;
    }

    String commandId;
    String outputConsoleTitle = outputConsole.getTitle();
    ProcessTreeNode processTreeNode = getProcessTreeNodeByName(outputConsoleTitle, machineTreeNode);
    if (processTreeNode != null && isCommandStopped(processTreeNode.getId())) {
      // 'reuse' already existing console
      // actually - remove 'already used' console
      commandId = processTreeNode.getId();
      view.removeWidget(commandId, (subPanel, tabToActivate) -> {});
    }

    ProcessTreeNode commandNode =
        new ProcessTreeNode(
            COMMAND_NODE, machineTreeNode, outputConsoleTitle, outputConsole.getTitleIcon(), null);
    commandId = commandNode.getId();
    addChildToMachineNode(commandNode, machineTreeNode, activate);

    addOutputConsole(commandId, commandNode, outputConsole, true, activate);

    refreshStopButtonState(commandId);
    workspaceAgentProvider.get().setActivePart(this);
  }

