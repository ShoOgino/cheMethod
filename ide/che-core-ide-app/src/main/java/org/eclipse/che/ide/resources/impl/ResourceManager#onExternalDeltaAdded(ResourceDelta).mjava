    private Promise<Void> onExternalDeltaAdded(final ResourceDelta delta) {
        if (delta.getToPath().segmentCount() == 1) {
            return ps.getProjects().thenPromise(updatedConfiguration -> {
                cachedConfigs = updatedConfiguration.toArray(new ProjectConfigDto[updatedConfiguration.size()]);

                for (ProjectConfigDto config : cachedConfigs) {
                    if (Path.valueOf(config.getPath()).equals(delta.getToPath())) {
                        final Project project = resourceFactory.newProjectImpl(config, ResourceManager.this);

                        store.register(project);

                        eventBus.fireEvent(new ResourceChangedEvent(new ResourceDeltaImpl(project, ADDED)));
                    }
                }

                return promises.resolve(null);
            });
        }

        return findResourceForExternalOperation(delta.getToPath(), true).thenPromise(resource -> {
            if (resource.isPresent()) {
                Resource intercepted = resource.get();

                if (!store.getResource(intercepted.getLocation()).isPresent()) {
                    store.register(intercepted);
                }

                eventBus.fireEvent(new ResourceChangedEvent(new ResourceDeltaImpl(intercepted, ADDED | DERIVED)));
            }

            return promises.resolve(null);
        });
    }

