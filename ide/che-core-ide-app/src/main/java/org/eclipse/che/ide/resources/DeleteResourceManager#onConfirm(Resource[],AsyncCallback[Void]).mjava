    private ConfirmCallback onConfirm(final Resource[] resources,
                                      final AsyncCallback<Void> callback) {
        return new ConfirmCallback() {
            @Override
            public void accepted() {
                if (resources == null) { //sometimes we may occur NPE here while reading length
                    callback.onFailure(new IllegalStateException());
                    return;
                }

                Promise<?>[] deleteAll = new Promise<?>[resources.length];
                for (int i = 0; i < resources.length; i++) {
                    final Resource resource = resources[i];
                    deleteAll[i] = resource.delete().catchError(new Operation<PromiseError>() {
                        @Override
                        public void apply(PromiseError error) throws OperationException {
                            notificationManager.notify("Failed to delete '" + resource.getName() + "'",
                                                       error.getMessage(), FAIL, StatusNotification.DisplayMode.FLOAT_MODE);
                        }
                    });
                }

                promiseProvider.all(deleteAll).then(new Operation<JsArrayMixed>() {
                    @Override
                    public void apply(JsArrayMixed arg) throws OperationException {
                        callback.onSuccess(null);
                    }
                });
            }
        };
    }

