  /**
   * Set part stack state.
   *
   * @param partStack
   * @param controller
   * @param partStackState
   * @param skipRestoreDimensions
   */
  private void loadPartStackState(
      PartStack partStack,
      WorkBenchPartController controller,
      JsonObject partStackState,
      boolean skipRestoreDimensions) {
    if (partStackState.hasKey("PARTS")) {
      JsonArray parts = partStackState.get("PARTS");

      for (int i = 0; i < parts.length(); i++) {
        JsonObject value = parts.get(i);
        if (value.hasKey("CLASS")) {
          String className = value.getString("CLASS");
          Provider<PartPresenter> provider = dynaProvider.getProvider(className);
          if (provider != null) {
            PartPresenter partPresenter = provider.get();
            if (!partStack.containsPart(partPresenter)) {
              partStack.addPart(partPresenter);
            }
          }
        }
      }
    }

    // restore part stack's active part
    if (partStackState.hasKey("ACTIVE_PART")) {
      String activePart = partStackState.getString("ACTIVE_PART");
      Provider<PartPresenter> provider = dynaProvider.getProvider(activePart);
      if (provider != null) {
        partStack.setActivePart(provider.get());
      }
    }

    //hide part stack if it has no parts
    if (partStack.getParts().isEmpty()) {
      controller.setHidden(true);
      return;
    }

    if (skipRestoreDimensions) {
      return;
    }

    if (partStackState.hasKey("HIDDEN") && partStackState.getBoolean("HIDDEN")) {
      partStack.minimize();
      return;
    }

    if (partStackState.hasKey("SIZE")) {
      double size = partStackState.getNumber("SIZE");

      // Size of the part must not be less 100 pixels.
      if (size <= MIN_PART_SIZE) {
        size = DEFAULT_PART_SIZE;
      }

      controller.setSize(size);
    }
  }

