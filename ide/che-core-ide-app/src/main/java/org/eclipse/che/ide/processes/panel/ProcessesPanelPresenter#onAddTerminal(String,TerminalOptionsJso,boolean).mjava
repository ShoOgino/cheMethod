  /**
   * Adds new terminal to the processes panel
   *
   * @param machineId id of machine in which the terminal will be added
   * @param options terminal options
   * @param activate activate terminal tab
   */
  public void onAddTerminal(final String machineId, TerminalOptionsJso options, boolean activate) {
    final MachineImpl machine = getMachine(machineId);
    if (machine == null) {
      notificationManager.notify(
          localizationConstant.failedToConnectTheTerminal(),
          localizationConstant.machineNotFound(machineId),
          FAIL,
          FLOAT_MODE);
      Log.error(getClass(), localizationConstant.machineNotFound(machineId));
      return;
    }

    final ProcessTreeNode machineTreeNode = provideMachineNode(machine.getName(), false, false);
    if (machineTreeNode == null) {
      return;
    }

    final TerminalPresenter newTerminal = terminalFactory.create(machine, options);
    final IsWidget terminalWidget = newTerminal.getView();
    final String terminalName = getUniqueTerminalName(machineTreeNode);
    final ProcessTreeNode terminalNode =
        new ProcessTreeNode(
            TERMINAL_NODE, machineTreeNode, terminalName, resources.terminalTreeIcon(), null);
    addChildToMachineNode(terminalNode, machineTreeNode, activate);

    final String terminalId = terminalNode.getId();
    terminals.put(terminalId, newTerminal);
    view.addProcessNode(terminalNode);
    terminalWidget.asWidget().ensureDebugId(terminalName);
    view.addWidget(terminalId, terminalName, terminalNode.getTitleIcon(), terminalWidget, true);
    refreshStopButtonState(terminalId);

    workspaceAgentProvider.get().setActivePart(this);

    newTerminal.setVisible(true);
    newTerminal.connect();
    newTerminal.setListener(() -> onCloseTerminal(terminalNode));
  }

