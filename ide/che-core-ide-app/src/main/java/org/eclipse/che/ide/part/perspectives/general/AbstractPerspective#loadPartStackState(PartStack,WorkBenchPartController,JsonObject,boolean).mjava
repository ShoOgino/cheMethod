  /**
   * Set part stack state.
   *
   * @param partStack
   * @param controller
   * @param partStackState
   * @param skipRestoreDimensions
   */
  private void loadPartStackState(
      PartStack partStack,
      WorkBenchPartController controller,
      JsonObject partStackState,
      boolean skipRestoreDimensions) {

    if (partStackState.hasKey(PART_STACK_PARTS)) {
      JsonArray parts = partStackState.get(PART_STACK_PARTS);

      for (int i = 0; i < parts.length(); i++) {
        JsonObject value = parts.get(i);
        if (value.hasKey(PART_CLASS_NAME)) {
          String className = value.getString(PART_CLASS_NAME);
          Provider<PartPresenter> provider = dynaProvider.getProvider(className);
          if (provider != null) {
            PartPresenter partPresenter = provider.get();
            if (!partStack.containsPart(partPresenter)) {
              partStack.addPart(partPresenter);
            }
          }
        }
      }
    }

    // restore part stack's active part
    if (partStackState.hasKey(ACTIVE_PART)) {
      String activePart = partStackState.getString(ACTIVE_PART);
      Provider<PartPresenter> provider = dynaProvider.getProvider(activePart);
      if (provider != null) {
        partStack.setActivePart(provider.get());
      }
    }

    // hide part stack if it has no parts
    if (partStack.getParts().isEmpty()) {
      controller.setHidden(true);
      return;
    }

    if (skipRestoreDimensions) {
      return;
    }

    if (partStackState.hasKey(HIDDEN_STATE) && partStackState.getBoolean(HIDDEN_STATE)) {

      partStack.hide();
      controller.setHidden(true);
      return;
    }

    if (partStackState.hasKey(PART_STACK_SIZE)) {
      double size = partStackState.getNumber(PART_STACK_SIZE);

      // Size of the part must not be less 100 pixels.
      if (size <= MIN_PART_SIZE) {
        size = DEFAULT_PART_SIZE;
      }

      controller.setSize(size);
    }
  }

