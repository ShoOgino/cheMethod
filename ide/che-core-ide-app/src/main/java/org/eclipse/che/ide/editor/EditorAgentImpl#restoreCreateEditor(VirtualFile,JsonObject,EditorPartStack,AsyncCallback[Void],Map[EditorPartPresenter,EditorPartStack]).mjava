  private void restoreCreateEditor(
      final VirtualFile resourceFile,
      JsonObject file,
      final EditorPartStack editorPartStack,
      final AsyncCallback<Void> openCallback,
      final Map<EditorPartPresenter, EditorPartStack> activeEditors) {
    String providerId = file.getString("EDITOR_PROVIDER");
    final OpenEditorCallback callback;
    if (file.hasKey("CURSOR_OFFSET") && file.hasKey("TOP_VISIBLE_LINE")) {
      final int cursorOffset = (int) file.getNumber("CURSOR_OFFSET");
      final int topLine = (int) file.getNumber("TOP_VISIBLE_LINE");
      callback = new RestoreStateEditorCallBack(cursorOffset, topLine);
    } else {
      callback = new OpenEditorCallbackImpl();
    }
    final boolean active = file.hasKey("ACTIVE") && file.getBoolean("ACTIVE");

    Set<FileType> fileTypesByFile = getFileTypesByFile(resourceFile);
    Optional<FileType> registeredFileType =
        fileTypesByFile
            .stream()
            .filter(fileType -> editorRegistry.getEditor(fileType) instanceof AsyncEditorProvider)
            .findAny();
    if (registeredFileType.isPresent()) {
      FileType fileType = registeredFileType.get();
      final EditorProvider provider = editorRegistry.getEditor(fileType);
      ((AsyncEditorProvider) provider)
          .createEditor(resourceFile)
          .then(
              editor -> {
                restoreInitEditor(
                        resourceFile,
                        callback,
                        fileTypeRegistry.getFileTypeByFile(resourceFile),
                        editor,
                        provider,
                        editorPartStack)
                    .then(
                        arg -> {
                          if (active) {
                            activeEditors.put(editor, editorPartStack);
                          }
                          openCallback.onSuccess(null);
                        });
              });
    } else {
      FileType fileType = fileTypesByFile.stream().findAny().orElse(unknownFileType);
      final EditorProvider provider = editorRegistry.getEditor(fileType);
      EditorPartPresenter editor = provider.getEditor();
      restoreInitEditor(
              resourceFile,
              callback,
              fileTypeRegistry.getFileTypeByFile(resourceFile),
              editor,
              provider,
              editorPartStack)
          .then(
              arg -> {
                if (active) {
                  activeEditors.put(editor, editorPartStack);
                }
                openCallback.onSuccess(null);
              });
    }
  }

