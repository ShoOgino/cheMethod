    @Override
    public void start(final Callback<Component, Exception> callback) {
        this.callback = callback;
        Jso factoryParams = browserQueryFieldRenderer.getParameters();
        JsoArray<String> keys = factoryParams.getKeys();
        Map<String, String> factoryParameters = new HashMap<>();
        // check all factory parameters
        for (String key : keys.toList()) {
            if (key.startsWith("factory-")) {
                String value = factoryParams.getStringField(key);
                factoryParameters.put(key.substring("factory-".length()), value);
            }
        }

        // get workspace ID to use dedicated workspace for this factory
        this.workspaceId = browserQueryFieldRenderer.getParameterFromURLByName("workspaceId");

        Promise<Factory> factoryPromise;
        // now search if it's a factory based on id or from parameters
        if (factoryParameters.containsKey("id")) {
            factoryPromise = factoryServiceClient.getFactory(factoryParameters.get("id"), true);
        } else {
            factoryPromise = factoryServiceClient.resolveFactory(factoryParameters, true);
        }

        factoryPromise.then(new Function<Factory, Void>() {
            @Override
            public Void apply(final Factory factory) throws FunctionException {
                if (appContext instanceof AppContextImpl) {
                    ((AppContextImpl)appContext).setFactory(factory);
                }

                // get workspace
                tryStartWorkspace();
                return null;
            }
        }).catchError(new Operation<PromiseError>() {
            @Override
            public void apply(PromiseError error) throws OperationException {
                Log.error(FactoryWorkspaceComponent.class, "Unable to load Factory", error);
                callback.onFailure(new Exception(error.getCause()));
            }
        });

    }

