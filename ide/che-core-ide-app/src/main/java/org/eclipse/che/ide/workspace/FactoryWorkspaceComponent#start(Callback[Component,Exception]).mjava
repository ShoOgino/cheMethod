  @Override
  public void start(final Callback<Component, Exception> callback) {
    this.callback = callback;
    Map<String, String> factoryParameters = new HashMap<>();
    for (Map.Entry<String, String> queryParam : queryParameters.getAll().entrySet()) {
      String key = queryParam.getKey();
      if (key.startsWith("factory-")) {
        factoryParameters.put(key.substring("factory-".length()), queryParam.getValue());
      }
    }

    // get workspace ID to use dedicated workspace for this factory
    this.workspaceId = queryParameters.getByName("workspaceId");

    Promise<FactoryDto> factoryPromise;
    // now search if it's a factory based on id or from parameters
    if (factoryParameters.containsKey("id")) {
      factoryPromise = factoryServiceClient.getFactory(factoryParameters.get("id"), true);
    } else {
      factoryPromise = factoryServiceClient.resolveFactory(factoryParameters, true);
    }

    factoryPromise
        .then(
            (Function<FactoryDto, Void>)
                factory -> {
                  if (appContext instanceof AppContextImpl) {
                    (appContext).setFactory(factory);
                  }
                  // get workspace
                  tryStartWorkspace();
                  return null;
                })
        .catchError(
            error -> {
              Log.error(FactoryWorkspaceComponent.class, "Unable to load Factory", error);
              callback.onFailure(new Exception(error.getCause()));
            });
  }

