  private native void addHandler(Element element) /*-{
        var instance = this;

        function readFileContent(evt) {
            // Check for the various File API support.
            if (!window.File || !window.FileReader || !window.FileList || !window.Blob) {
                instance.@org.eclipse.che.ide.factory.json.ImportFromConfigViewImpl::onError(Ljava/lang/String;)
                ('The File APIs are not fully supported in this browser.');
                return;
            }

            var selectedFile = evt.target.files[0];

            var max_size = @org.eclipse.che.ide.factory.json.ImportFromConfigViewImpl::MAX_FILE_SIZE_MB;

            if (selectedFile.size > max_size * 100000) {
                instance.@org.eclipse.che.ide.factory.json.ImportFromConfigViewImpl::resetUploadFileField()();
                instance.@org.eclipse.che.ide.factory.json.ImportFromConfigViewImpl::setErrorMessageOnForm(Ljava/lang/String;)
                ('File size exceeds the limit ' + max_size + 'mb');
                return;
            }

            var reader = new FileReader();
            reader.onload = function () {
                //reseting error message
                instance.@org.eclipse.che.ide.factory.json.ImportFromConfigViewImpl::setErrorMessageOnForm(Ljava/lang/String;)('');
                //getting file's content
                instance.@org.eclipse.che.ide.factory.json.ImportFromConfigViewImpl::fileContent = reader.result;
            };

            reader.onerror = function (event) {
                instance.@org.eclipse.che.ide.factory.json.ImportFromConfigViewImpl::onError(Ljava/lang/String;)
                ('Error reading config file ' + event.target.error.code);
            };

            reader.readAsText(selectedFile);
        }

        element.addEventListener('change', readFileContent, false);
    }-*/;

