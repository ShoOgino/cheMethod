  @Override
  public void addWidget(
      final String processId,
      final String title,
      final SVGResource icon,
      final IsWidget widget,
      final boolean machineConsole) {
    final WidgetToShow widgetToShow =
        new WidgetToShow() {
          @Override
          public IsWidget getWidget() {
            return widget;
          }

          @Override
          public String getTitle() {
            return title;
          }

          @Override
          public SVGResource getIcon() {
            return icon;
          }
        };

    widget2Panels.put(widgetToShow, focusedSubPanel);

    focusedSubPanel.addWidget(
        widgetToShow,
        !machineConsole,
        new SubPanel.WidgetRemovingListener() {
          @Override
          public void onWidgetRemoving(SubPanel.RemoveCallback removeCallback) {
            final ProcessTreeNode treeNode = widget2TreeNodes.get(widgetToShow.getWidget());

            if (treeNode == null) {
              return;
            }

            switch (treeNode.getType()) {
              case COMMAND_NODE:
                delegate.onCommandTabClosing(treeNode, removeCallback);
                break;
              case TERMINAL_NODE:
                delegate.onTerminalTabClosing(treeNode);
                removeCallback.remove();
                break;
              case MACHINE_NODE:
                removeCallback.remove();
                break;
            }
          }
        });

    processWidgets.put(processId, widgetToShow);

    widget2TreeNodes.put(widgetToShow.getWidget(), processTreeNodes.get(processId));

    showProcessOutput(processId);
  }

