  @Inject
  public ProjectExplorerViewImpl(
      final Set<NodeInterceptor> nodeInterceptorSet,
      Resources resources,
      ContextMenu contextMenu,
      CoreLocalizationConstant coreLocalizationConstant,
      SkipHiddenNodesInterceptor skipHiddenNodesInterceptor,
      RefreshPathAction refreshPathAction,
      PresentationFactory presentationFactory,
      Provider<PerspectiveManager> managerProvider,
      ActionManager actionManager,
      EmptyTreePanel emptyTreePanel) {
    super(resources);
    this.skipHiddenNodesInterceptor = skipHiddenNodesInterceptor;

    setTitle(coreLocalizationConstant.projectExplorerTitleBarText());

    NodeStorage nodeStorage = new NodeStorage();

    NodeLoader nodeLoader = new NodeLoader(nodeInterceptorSet);
    nodeLoader.getNodeInterceptors().add(skipHiddenNodesInterceptor);

    tree = new Tree(nodeStorage, nodeLoader, new StatusWidget<Tree>(emptyTreePanel));
    tree.setContextMenuInvocationHandler(
        new Tree.ContextMenuInvocationHandler() {
          @Override
          public void onInvokeContextMenu(int x, int y) {
            contextMenu.show(x, y);
          }
        });

    tree.getNodeStorage().addSortInfo(new StoreSortInfo(new NodeTypeComparator(), SortDir.ASC));
    tree.getNodeStorage()
        .addSortInfo(
            new StoreSortInfo(
                new Comparator<Node>() {
                  @Override
                  public int compare(Node o1, Node o2) {
                    if (o1 instanceof ResourceNode && o2 instanceof ResourceNode) {
                      return ((ResourceNode) o1).compareTo((ResourceNode) o2);
                    }

                    return 0;
                  }
                },
                SortDir.ASC));

    if (tree.getGoInto() != null) {
      tree.getGoInto().addGoIntoHandler(this);
    }

    tree.setPresentationRenderer(new ProjectExplorerRenderer(tree.getTreeStyles()));
    tree.ensureDebugId(PROJECT_TREE_WIDGET_ID);
    tree.setAutoSelect(true);
    tree.getNodeLoader().setUseCaching(false);

    setContentWidget(tree);

    ToolButton collapseAllButton = new ToolButton(FontAwesome.COMPRESS);
    collapseAllButton.addClickHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            if (tree.getGoInto().isActive()) {
              Node lastNode = tree.getGoInto().getLastUsed();
              tree.setExpanded(lastNode, false, true);
              return;
            }

            tree.collapseAll();
          }
        });
    Tooltip.create(
        (elemental.dom.Element) collapseAllButton.getElement(), BOTTOM, MIDDLE, "Collapse All");
    collapseAllButton.ensureDebugId(COLLAPSE_ALL_BUTTON_ID);
    collapseAllButton.setVisible(true);
    addToolButton(collapseAllButton);

    linkWithEditorButton = new ToolButton(FontAwesome.EXCHANGE);
    linkWithEditorButton.getElement().setAttribute("name", LINK_WITH_EDITOR_ID);
    linkWithEditorButton.addClickHandler(event -> delegate.onLinkWithEditorButtonClicked());
    Tooltip.create(
        (elemental.dom.Element) linkWithEditorButton.getElement(),
        BOTTOM,
        MIDDLE,
        coreLocalizationConstant.projectExplorerLinkWithEditorTooltip());
    linkWithEditorButton.ensureDebugId(LINK_WITH_EDITOR_ID);
    linkWithEditorButton.setVisible(true);
    addToolButton(linkWithEditorButton);

    ToolButton refreshPathButton = new ToolButton(FontAwesome.REFRESH);
    refreshPathButton.addClickHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent event) {
            final Presentation presentation =
                presentationFactory.getPresentation(refreshPathAction);
            final ActionEvent actionEvent =
                new ActionEvent(presentation, actionManager, managerProvider.get(), null);

            refreshPathAction.update(actionEvent);

            if (presentation.isEnabled() && presentation.isVisible()) {
              refreshPathAction.actionPerformed(actionEvent);
            }
          }
        });

    Tooltip.create(
        (elemental.dom.Element) refreshPathButton.getElement(),
        BOTTOM,
        MIDDLE,
        "Refresh selected path");
    refreshPathButton.ensureDebugId(REFRESH_BUTTON_ID);
    refreshPathButton.setVisible(true);
    addToolButton(refreshPathButton);
  }

