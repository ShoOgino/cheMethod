    public void initialize() {
        messageLoaderResources.Css().ensureInjected();
        editorResources.editorCss().ensureInjected();
        popupResources.popupStyle().ensureInjected();

        fileTypeRegistry.registerFileType(xmlFile);

        fileTypeRegistry.registerFileType(txtFile);

        fileTypeRegistry.registerFileType(jsonFile);

        fileTypeRegistry.registerFileType(mdFile);

        fileTypeRegistry.registerFileType(pngFile);
        editorRegistry.registerDefaultEditor(pngFile, imageViewerProvider);

        fileTypeRegistry.registerFileType(bmpFile);
        editorRegistry.registerDefaultEditor(bmpFile, imageViewerProvider);

        fileTypeRegistry.registerFileType(gifFile);
        editorRegistry.registerDefaultEditor(gifFile, imageViewerProvider);

        fileTypeRegistry.registerFileType(iconFile);
        editorRegistry.registerDefaultEditor(iconFile, imageViewerProvider);

        fileTypeRegistry.registerFileType(svgFile);
        editorRegistry.registerDefaultEditor(svgFile, imageViewerProvider);

        fileTypeRegistry.registerFileType(jpeFile);
        editorRegistry.registerDefaultEditor(jpeFile, imageViewerProvider);

        fileTypeRegistry.registerFileType(jpegFile);
        editorRegistry.registerDefaultEditor(jpegFile, imageViewerProvider);

        fileTypeRegistry.registerFileType(jpgFile);
        editorRegistry.registerDefaultEditor(jpgFile, imageViewerProvider);

        // Workspace (New Menu)
        DefaultActionGroup workspaceGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_WORKSPACE);

        actionManager.registerAction("importProject", importProjectAction);
        workspaceGroup.add(importProjectAction);

        actionManager.registerAction("createProject", createProjectAction);
        workspaceGroup.add(createProjectAction);

        actionManager.registerAction("downloadAsZipAction", downloadProjectAction);
        workspaceGroup.add(downloadProjectAction);

        workspaceGroup.addSeparator();

        // Project (New Menu)
        DefaultActionGroup projectGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_PROJECT);

        DefaultActionGroup newGroup = new DefaultActionGroup("New", true, actionManager);
        newGroup.getTemplatePresentation().setDescription("Create...");
        newGroup.getTemplatePresentation().setSVGResource(resources.newResource());
        actionManager.registerAction(GROUP_FILE_NEW, newGroup);
        projectGroup.add(newGroup);

        newGroup.addSeparator();

        actionManager.registerAction("newFile", newFileAction);
        newGroup.addAction(newFileAction);

        actionManager.registerAction("newFolder", newFolderAction);
        newGroup.addAction(newFolderAction);

        newGroup.addSeparator();

        actionManager.registerAction("newXmlFile", newXmlFileAction);
        newXmlFileAction.getTemplatePresentation().setSVGResource(xmlFile.getImage());
        newGroup.addAction(newXmlFileAction);

        actionManager.registerAction("uploadFile", uploadFileAction);
        projectGroup.add(uploadFileAction);

        actionManager.registerAction("uploadFolder", uploadFolderAction);
        projectGroup.add(uploadFolderAction);

        projectGroup.add(downloadProjectAction);

        actionManager.registerAction("showHideHiddenFiles", showHiddenFilesAction);
        projectGroup.add(showHiddenFilesAction);

        projectGroup.addSeparator();

        actionManager.registerAction("projectConfiguration", projectConfigurationAction);
        projectGroup.add(projectConfigurationAction);

        // Edit (New Menu)
        DefaultActionGroup editGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_EDIT);

        actionManager.registerAction("openRecentFiles", openRecentFilesAction);
        editGroup.add(openRecentFilesAction);

        editGroup.addSeparator();

        actionManager.registerAction("closeActiveEditor", closeActiveEditor);
        editGroup.add(closeActiveEditor);

        actionManager.registerAction("format", formatterAction);
        editGroup.add(formatterAction);

        actionManager.registerAction("undo", undoAction);
        editGroup.add(undoAction);

        actionManager.registerAction("redo", redoAction);
        editGroup.add(redoAction);

        actionManager.registerAction("cut", cutResourceAction);
        editGroup.add(cutResourceAction);

        actionManager.registerAction("copy", copyResourceAction);
        editGroup.add(copyResourceAction);

        actionManager.registerAction("paste", pasteResourceAction);
        editGroup.add(pasteResourceAction);

        actionManager.registerAction("renameResource", renameItemAction);
        editGroup.add(renameItemAction);

        actionManager.registerAction("deleteItem", deleteResourceAction);
        editGroup.add(deleteResourceAction);

        actionManager.registerAction("fullTextSearch", fullTextSearchAction);
        editGroup.add(fullTextSearchAction);

        editGroup.addSeparator();
        editGroup.add(switchPreviousEditorAction);
        editGroup.add(switchNextEditorAction);

        editGroup.addSeparator();
        editGroup.add(revealResourceAction);

        // Assistant (New Menu)
        DefaultActionGroup assistantGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_ASSISTANT);

        actionManager.registerAction("findActionAction", findActionAction);
        assistantGroup.add(findActionAction);

        actionManager.registerAction("hotKeysList", hotKeysListAction);
        assistantGroup.add(hotKeysListAction);

        assistantGroup.addSeparator();

        actionManager.registerAction("callCompletion", completeAction);
        assistantGroup.add(completeAction);

        actionManager.registerAction("downloadItemAction", downloadResourceAction);
        actionManager.registerAction("navigateToFile", navigateToFileAction);
        assistantGroup.add(navigateToFileAction);

        // Compose Save group
        DefaultActionGroup saveGroup = new DefaultActionGroup(actionManager);
        actionManager.registerAction("saveGroup", saveGroup);
        actionManager.registerAction("save", saveAction);
        actionManager.registerAction("saveAll", saveAllAction);
        saveGroup.addSeparator();
        saveGroup.add(saveAction);
        saveGroup.add(saveAllAction);

        //Compose Profile menu
        DefaultActionGroup profileGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_PROFILE);
        actionManager.registerAction("showPreferences", showPreferencesAction);

        profileGroup.add(showPreferencesAction);

        // Compose Help menu
        DefaultActionGroup helpGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_HELP);
        helpGroup.addSeparator();

        // Compose main context menu
        DefaultActionGroup resourceOperation = new DefaultActionGroup(actionManager);
        actionManager.registerAction("resourceOperation", resourceOperation);
        actionManager.registerAction("refreshPathAction", refreshPathAction);
        resourceOperation.addSeparator();
        resourceOperation.add(showReferenceAction);
        resourceOperation.add(goIntoAction);
        resourceOperation.add(editFileAction);

        resourceOperation.add(cutResourceAction);
        resourceOperation.add(copyResourceAction);
        resourceOperation.add(pasteResourceAction);
        resourceOperation.add(renameItemAction);
        resourceOperation.add(deleteResourceAction);
        resourceOperation.addSeparator();
        resourceOperation.add(downloadResourceAction);
        resourceOperation.add(refreshPathAction);
        resourceOperation.addSeparator();

        DefaultActionGroup mainContextMenuGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_MAIN_CONTEXT_MENU);
        mainContextMenuGroup.add(newGroup, Constraints.FIRST);
        mainContextMenuGroup.addSeparator();
        mainContextMenuGroup.add(resourceOperation);

        actionManager.registerAction("expandEditor", expandEditorAction);
        DefaultActionGroup rightMenuGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_RIGHT_MAIN_MENU);
        rightMenuGroup.add(expandEditorAction, FIRST);

        // Compose main toolbar
        DefaultActionGroup changeResourceGroup = new DefaultActionGroup(actionManager);
        actionManager.registerAction("changeResourceGroup", changeResourceGroup);
        actionManager.registerAction("editFile", editFileAction);
        actionManager.registerAction("goInto", goIntoAction);
        actionManager.registerAction("showReference", showReferenceAction);

        actionManager.registerAction("collapseAll", collapseAllAction);

        actionManager.registerAction("openFile", openFileAction);
        actionManager.registerAction("switchLeftTab", switchPreviousEditorAction);
        actionManager.registerAction("switchRightTab", switchNextEditorAction);
        actionManager.registerAction("scrollFromSource", revealResourceAction);

        changeResourceGroup.add(cutResourceAction);
        changeResourceGroup.add(copyResourceAction);
        changeResourceGroup.add(pasteResourceAction);
        changeResourceGroup.add(deleteResourceAction);

        DefaultActionGroup mainToolbarGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_MAIN_TOOLBAR);
        mainToolbarGroup.add(newGroup);
        mainToolbarGroup.add(changeResourceGroup);
        toolbarPresenter.bindMainGroup(mainToolbarGroup);

        DefaultActionGroup centerToolbarGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_CENTER_TOOLBAR);
        toolbarPresenter.bindCenterGroup(centerToolbarGroup);

        DefaultActionGroup rightToolbarGroup = (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_RIGHT_TOOLBAR);
        toolbarPresenter.bindRightGroup(rightToolbarGroup);

        //Editor context menu group
        DefaultActionGroup editorTabContextMenu =
                (DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_EDITOR_TAB_CONTEXT_MENU);
        editorTabContextMenu.add(closeAction);
        actionManager.registerAction("closeEditor", closeAction);
        editorTabContextMenu.add(closeAllAction);
        actionManager.registerAction("closeAllEditors", closeAllAction);
        editorTabContextMenu.add(closeOtherAction);
        actionManager.registerAction("closeOtherEditorExceptCurrent", closeOtherAction);
        editorTabContextMenu.add(closeAllExceptPinnedAction);
        actionManager.registerAction("closeAllEditorExceptPinned", closeAllExceptPinnedAction);
        editorTabContextMenu.addSeparator();
        editorTabContextMenu.add(reopenClosedFileAction);
        actionManager.registerAction("reopenClosedEditorTab", reopenClosedFileAction);
        editorTabContextMenu.add(pinEditorTabAction);
        actionManager.registerAction("pinEditorTab", pinEditorTabAction);

        final DefaultActionGroup loaderToolbarGroup = new DefaultActionGroup("loader", false, actionManager);
        actionManager.registerAction("loader", loaderToolbarGroup);
        actionManager.registerAction("loaderAction", loaderAction);
        centerToolbarGroup.add(loaderToolbarGroup);
        loaderToolbarGroup.add(loaderAction);

        actionManager.registerAction("noOpAction", new NoOpAction());

        // Define hot-keys
        keyBinding.getGlobal().addKey(new KeyBuilder().action().alt().charCode('n').build(), "navigateToFile");
        keyBinding.getGlobal().addKey(new KeyBuilder().action().charCode('F').build(), "fullTextSearch");
        keyBinding.getGlobal().addKey(new KeyBuilder().action().charCode('A').build(), "findActionAction");
        keyBinding.getGlobal().addKey(new KeyBuilder().alt().charCode('L').build(), "format");
        keyBinding.getGlobal().addKey(new KeyBuilder().action().charCode('c').build(), "copy");
        keyBinding.getGlobal().addKey(new KeyBuilder().action().charCode('x').build(), "cut");
        keyBinding.getGlobal().addKey(new KeyBuilder().action().charCode('v').build(), "paste");
        keyBinding.getGlobal().addKey(new KeyBuilder().alt().charCode(KeyCodeMap.ARROW_LEFT).build(), "switchLeftTab");
        keyBinding.getGlobal().addKey(new KeyBuilder().alt().charCode(KeyCodeMap.ARROW_RIGHT).build(), "switchRightTab");
        keyBinding.getGlobal().addKey(new KeyBuilder().action().charCode('e').build(), "openRecentFiles");
        keyBinding.getGlobal().addKey(new KeyBuilder().action().charCode('s').build(), "noOpAction");
        keyBinding.getGlobal().addKey(new KeyBuilder().charCode(KeyCodeMap.DELETE).build(), "deleteItem");

        if (UserAgent.isMac()) {
            keyBinding.getGlobal().addKey(new KeyBuilder().control().charCode('w').build(), "closeActiveEditor");
        } else {
            keyBinding.getGlobal().addKey(new KeyBuilder().alt().charCode('w').build(), "closeActiveEditor");
        }
    }

