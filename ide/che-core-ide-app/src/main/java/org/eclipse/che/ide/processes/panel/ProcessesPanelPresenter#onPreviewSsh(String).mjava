  @Override
  public void onPreviewSsh(String machineId) {
    ProcessTreeNode machineTreeNode = findTreeNodeById(machineId);
    if (machineTreeNode == null || machineTreeNode.getType() != MACHINE_NODE) {
      return;
    }

    String machineName = (String) machineTreeNode.getData();
    RuntimeImpl runtime = appContext.getWorkspace().getRuntime();
    if (runtime == null) {
      return;
    }

    Optional<MachineImpl> machine = runtime.getMachineByName(machineName);
    if (!machine.isPresent()) {
      return;
    }

    final OutputConsole defaultConsole = commandConsoleFactory.create("SSH");
    addCommandOutput(machineId, defaultConsole, true);

    String sshServiceAddress = getSshServerAddress(machine.get());
    final String machineHost;
    final String sshPort;
    if (sshServiceAddress != null) {
      String[] parts = sshServiceAddress.split(":");
      machineHost = parts[1].substring(2);
      sshPort = (parts.length == 3) ? parts[2] : SSH_PORT;
    } else {
      sshPort = SSH_PORT;
      machineHost = "";
    }

    // user
    final String userName;
    String user = machine.get().getAttributes().get("config.user");
    if (isNullOrEmpty(user)) {
      userName = "root";
    } else {
      userName = user;
    }

    // ssh key
    final String workspaceName = appContext.getWorkspace().getConfig().getName();
    Promise<SshPairDto> sshPairDtoPromise =
        sshServiceClient.getPair("workspace", appContext.getWorkspaceId());

    sshPairDtoPromise
        .then(
            new Operation<SshPairDto>() {
              @Override
              public void apply(SshPairDto sshPairDto) throws OperationException {
                if (defaultConsole instanceof DefaultOutputConsole) {
                  ((DefaultOutputConsole) defaultConsole).enableAutoScroll(false);
                  ((DefaultOutputConsole) defaultConsole)
                      .printText(
                          localizationConstant.sshConnectInfo(
                              machineName,
                              machineHost,
                              sshPort,
                              workspaceName,
                              userName,
                              localizationConstant.sshConnectInfoPrivateKey(
                                  sshPairDto.getPrivateKey())));
                }
              }
            })
        .catchError(
            new Operation<PromiseError>() {
              @Override
              public void apply(PromiseError arg) throws OperationException {
                if (defaultConsole instanceof DefaultOutputConsole) {
                  ((DefaultOutputConsole) defaultConsole).enableAutoScroll(false);
                  ((DefaultOutputConsole) defaultConsole)
                      .printText(
                          localizationConstant.sshConnectInfo(
                              machineName,
                              machineHost,
                              sshPort,
                              workspaceName,
                              userName,
                              localizationConstant.sshConnectInfoNoPrivateKey()));
                }
              }
            });
  }

