    @Override
    public Element render(Node node, String domID, Tree.Joint joint, int depth) {
      Element element = super.render(node, domID, joint, depth);

      element.setAttribute("name", node.getName());

      if (node instanceof ResourceNode) {
        final Resource resource = ((ResourceNode) node).getData();
        element.setAttribute("path", resource.getLocation().toString());

        Project project = resource.getProject();
        if (project != null) {
          element.setAttribute("project", project.getLocation().toString());
        }
      }

      if (node instanceof HasAction) {
        element.setAttribute("actionable", "true");
      }

      if (node instanceof SyntheticNode<?>) {
        element.setAttribute("synthetic", "true");
        element.setAttribute("project", ((SyntheticNode) node).getProject().toString());
      }

      if (node instanceof HasAttributes
          && ((HasAttributes) node).getAttributes().containsKey(CUSTOM_BACKGROUND_FILL)) {
        element
            .getFirstChildElement()
            .getStyle()
            .setBackgroundColor(
                ((HasAttributes) node).getAttributes().get(CUSTOM_BACKGROUND_FILL).get(0));
      }

      if (node instanceof ContainerNode) {
        Container container = ((ContainerNode) node).getData();
        if (container instanceof Project) {
          String head = container.getProject().getAttribute("git.current.head.name");
          if (head != null) {
            Element nodeContainer = element.getFirstChildElement();
            DivElement divElement = Document.get().createDivElement();
            divElement.setInnerText("(" + head + ")");
            divElement.setClassName(treeStyles.styles().vcsHeadContainer());
            nodeContainer.insertBefore(divElement, nodeContainer.getLastChild());
          }
        }
      }
      return element;
    }

