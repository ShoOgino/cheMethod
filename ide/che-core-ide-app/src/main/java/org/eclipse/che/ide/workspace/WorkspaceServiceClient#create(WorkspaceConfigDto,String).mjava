    /**
     * Creates new workspace.
     *
     * @param newWorkspace
     *         the configuration to create the new workspace
     * @param account
     *         the account id related to this operation
     * @return a promise that resolves to the {@link WorkspaceImpl}, or rejects with an error
     */
    @Deprecated
    public Promise<WorkspaceImpl> create(final WorkspaceConfigDto newWorkspace, final String accountId) {
        String url = baseHttpUrl;
        if (accountId != null) {
            url += "?account=" + accountId;
        }
        return asyncRequestFactory.createPostRequest(url, newWorkspace)
                                  .header(ACCEPT, APPLICATION_JSON)
                                  .header(CONTENT_TYPE, APPLICATION_JSON)
                                  .loader(loaderFactory.newLoader("Creating workspace..."))
                                  .send(dtoUnmarshallerFactory.newUnmarshaller(WorkspaceDto.class))
                                  .then((Function<WorkspaceDto, WorkspaceImpl>)WorkspaceImpl::new);
    }

