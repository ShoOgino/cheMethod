  /**
   * Starts workspace based on workspace id and environment.
   *
   * @param id workspace ID
   * @param envName the name of the workspace environment that should be used for start
   * @return a promise that resolves to the {@link WorkspaceImpl}, or rejects with an error
   */
  Promise<WorkspaceImpl> startById(String id, @Nullable String envName) {
    String url = baseHttpUrl + "/" + id + "/runtime";
    if (envName != null) {
      url += "?environment=" + envName;
    }

    return asyncRequestFactory
        .createPostRequest(url, null)
        .header(ACCEPT, APPLICATION_JSON)
        .header(CONTENT_TYPE, APPLICATION_JSON)
        .loader(loaderFactory.newLoader("Starting workspace..."))
        .send(dtoUnmarshallerFactory.newUnmarshaller(WorkspaceDto.class))
        .then((Function<WorkspaceDto, WorkspaceImpl>) WorkspaceImpl::new);
  }

