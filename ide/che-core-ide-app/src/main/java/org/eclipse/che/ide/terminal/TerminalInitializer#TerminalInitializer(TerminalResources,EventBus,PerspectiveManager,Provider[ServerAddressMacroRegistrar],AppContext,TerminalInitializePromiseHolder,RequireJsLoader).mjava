    @Inject
    public TerminalInitializer(final TerminalResources terminalResources,
                               final EventBus eventBus,
                               final PerspectiveManager perspectiveManager,
                               final Provider<ServerAddressMacroRegistrar> machinePortProvider,
                               final AppContext appContext,
                               final TerminalInitializePromiseHolder terminalModule,
                               final RequireJsLoader requireJsLoader) {
        this.perspectiveManager = perspectiveManager;
        terminalResources.getTerminalStyle().ensureInjected();

        eventBus.addHandler(WsAgentStateEvent.TYPE, new WsAgentStateHandler() {
            @Override
            public void onWsAgentStarted(WsAgentStateEvent event) {
                restoreTerminal();
                machinePortProvider.get();
            }

            @Override
            public void onWsAgentStopped(WsAgentStateEvent event) {
            }
        });

        eventBus.addHandler(WorkspaceStartingEvent.TYPE, event -> maximizeTerminal());

        eventBus.addHandler(WorkspaceStoppedEvent.TYPE, event -> maximizeTerminal());

        eventBus.addHandler(BasicIDEInitializedEvent.TYPE, event -> {
            if (RUNNING != appContext.getWorkspace().getStatus()) {
                maximizeTerminal();
            }
        });

        Promise<Void> termInitPromise = AsyncPromiseHelper.createFromAsyncRequest(callback -> injectTerminal(requireJsLoader, callback));
        terminalModule.setInitializerPromise(termInitPromise);
    }

