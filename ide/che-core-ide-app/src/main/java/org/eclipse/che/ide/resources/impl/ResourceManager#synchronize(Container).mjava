  protected Promise<Resource[]> synchronize(final Container container) {
    final int[] maxDepth = new int[] {1};

    final Optional<Resource[]> descendants = store.getAll(container.getLocation());

    if (descendants.isPresent()) {
      final Resource[] resources = descendants.get();

      for (Resource resource : resources) {
        final int segCount =
            resource.getLocation().segmentCount() - container.getLocation().segmentCount();

        if (segCount > maxDepth[0]) {
          maxDepth[0] = segCount;
        }
      }

      java.util.Arrays.stream(descendants.get())
          .forEach(resource -> store.dispose(resource.getLocation(), false));
    }

    if (container.getLocation().isRoot()) {
      return getRemoteResources(container, maxDepth[0], true)
          .thenPromise(
              resources -> {
                eventBus.fireEvent(
                    new ResourceChangedEvent(
                        new ResourceDeltaImpl(container, SYNCHRONIZED | DERIVED)));
                eventBus.fireEvent(
                    new ResourceChangedEvent(new ResourceDeltaImpl(container, UPDATED)));
                return promises.resolve(resources);
              });
    } else {
      return findResource(container.getLocation())
          .thenPromise(
              updatedContainer -> {
                if (updatedContainer.isPresent()) {
                  return getRemoteResources(container, maxDepth[0], true)
                      .thenPromise(
                          resources -> {
                            eventBus.fireEvent(
                                new ResourceChangedEvent(
                                    new ResourceDeltaImpl(
                                        updatedContainer.get(), SYNCHRONIZED | DERIVED)));
                            eventBus.fireEvent(
                                new ResourceChangedEvent(
                                    new ResourceDeltaImpl(updatedContainer.get(), UPDATED)));
                            return promises.resolve(resources);
                          });
                }

                return promises.resolve(null);
              });
    }
  }

