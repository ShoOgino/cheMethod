    protected Promise<Resource[]> synchronize(final Container container) {
        return ps.getProjects().thenPromise(updatedConfiguration -> {
            cachedConfigs = updatedConfiguration.toArray(new ProjectConfigDto[updatedConfiguration.size()]);

            int maxDepth = 1;

            final Optional<Resource[]> descendants = store.getAll(container.getLocation());

            if (descendants.isPresent()) {
                final Resource[] resources = descendants.get();

                for (Resource resource : resources) {
                    final int segCount = resource.getLocation().segmentCount() - container.getLocation().segmentCount();

                    if (segCount > maxDepth) {
                        maxDepth = segCount;
                    }
                }
            }

            final Container[] holder = new Container[]{container};

            if (holder[0].isProject()) {
                final Optional<ProjectConfigDto> config = findProjectConfigDto(holder[0].getLocation());

                if (config.isPresent()) {

                    final ProjectImpl project = resourceFactory.newProjectImpl(config.get(), ResourceManager.this);

                    store.register(project);
                    holder[0] = project;
                }
            }

            return getRemoteResources(holder[0], maxDepth, true).then((Function<Resource[], Resource[]>)resources -> {
                eventBus.fireEvent(new ResourceChangedEvent(new ResourceDeltaImpl(holder[0], SYNCHRONIZED | DERIVED)));
                eventBus.fireEvent(new ResourceChangedEvent(new ResourceDeltaImpl(holder[0], UPDATED)));
                return resources;
            });
        });
    }

