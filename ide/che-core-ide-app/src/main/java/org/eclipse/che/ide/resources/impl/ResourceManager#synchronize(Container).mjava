    protected Promise<Resource[]> synchronize(final Container container) {
        return ps.getProjects().thenPromise(new Function<List<ProjectConfigDto>, Promise<Resource[]>>() {
            @Override
            public Promise<Resource[]> apply(List<ProjectConfigDto> updatedConfiguration) throws FunctionException {
                cachedConfigs = updatedConfiguration.toArray(new ProjectConfigDto[updatedConfiguration.size()]);

                int maxDepth = 1;

                final Optional<Resource[]> descendants = store.getAll(container.getLocation());

                if (descendants.isPresent()) {
                    final Resource[] resources = descendants.get();

                    for (Resource resource : resources) {
                        final int segCount = resource.getLocation().segmentCount() - container.getLocation().segmentCount();

                        if (segCount > maxDepth) {
                            maxDepth = segCount;
                        }
                    }
                }

                final Container[] holder = new Container[]{container};

                if (holder[0].isProject()) {
                    final Optional<ProjectConfigDto> config = findProjectConfigDto(holder[0].getLocation());

                    if (config.isPresent()) {

                        final ProjectImpl project = resourceFactory.newProjectImpl(config.get(), ResourceManager.this);

                        store.register(project);
                        holder[0] = project;
                    }
                }

                return getRemoteResources(holder[0], maxDepth, true).then(
                        new Function<Resource[], Resource[]>() {
                            @Override
                            public Resource[] apply(Resource[] resources) throws FunctionException {

                                eventBus.fireEvent(new ResourceChangedEvent(new ResourceDeltaImpl(holder[0], SYNCHRONIZED | DERIVED)));

                                return resources;
                            }
                        });
            }
        });
    }

