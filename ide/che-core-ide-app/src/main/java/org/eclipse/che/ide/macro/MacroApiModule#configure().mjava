  @Override
  protected void configure() {
    bind(MacroRegistry.class).to(MacroRegistryImpl.class).in(Singleton.class);

    bind(MacroProcessor.class).to(MacroProcessorImpl.class).in(Singleton.class);

    GinMultibinder<Macro> macrosBinder = GinMultibinder.newSetBinder(binder(), Macro.class);
    macrosBinder.addBinding().to(EditorCurrentFileNameMacro.class);
    macrosBinder.addBinding().to(EditorCurrentFileBaseNameMacro.class);
    macrosBinder.addBinding().to(EditorCurrentFilePathMacro.class);
    macrosBinder.addBinding().to(EditorCurrentFileRelativePathMacro.class);
    macrosBinder.addBinding().to(EditorCurrentProjectNameMacro.class);
    macrosBinder.addBinding().to(EditorCurrentProjectTypeMacro.class);
    macrosBinder.addBinding().to(ExplorerCurrentFileNameMacro.class);
    macrosBinder.addBinding().to(ExplorerCurrentFileBaseNameMacro.class);
    macrosBinder.addBinding().to(ExplorerCurrentFilePathMacro.class);
    macrosBinder.addBinding().to(ExplorerCurrentFileParentPathMacro.class);
    macrosBinder.addBinding().to(ExplorerCurrentFileRelativePathMacro.class);
    macrosBinder.addBinding().to(ExplorerCurrentProjectNameMacro.class);
    macrosBinder.addBinding().to(ExplorerCurrentProjectTypeMacro.class);
    macrosBinder.addBinding().to(WorkspaceNameMacro.class);
    macrosBinder.addBinding().to(DevMachineHostNameMacro.class);
    macrosBinder.addBinding().to(CurrentProjectPathMacro.class);
    macrosBinder.addBinding().to(CurrentProjectRelativePathMacro.class);

    bind(MacroChooserView.class).to(MacroChooserViewImpl.class);
  }

