  @Override
  public void complete(@NotNull final CompleteCallback callback) {
    if (mode == CREATE) {
      appContext
          .getWorkspaceRoot()
          .newProject()
          .withBody(dataObject)
          .send()
          .then(onComplete(callback))
          .catchError(onFailure(callback));
    } else if (mode == UPDATE) {
      String path =
          dataObject.getPath().startsWith("/")
              ? dataObject.getPath().substring(1)
              : dataObject.getPath();

      appContext
          .getWorkspaceRoot()
          .getContainer(Path.valueOf(path))
          .then(
              optContainer -> {
                checkState(optContainer.isPresent(), "Failed to update non existed path");

                final Container container = optContainer.get();
                if (container.getResourceType() == PROJECT) {
                  StatusNotification notification =
                      notificationManager.notify(
                          localizedConstant.projectWizardUpdateProject(dataObject.getName()),
                          null,
                          PROGRESS,
                          FLOAT_MODE);

                  ((Project) container)
                      .update()
                      .withBody(dataObject)
                      .send()
                      .then(
                          project -> {
                            notification.setStatus(SUCCESS);
                            callback.onCompleted();
                          })
                      .catchError(
                          error -> {
                            String errorMessage = error.getMessage();
                            if (!isNullOrEmpty(errorMessage)) {
                              notification.setContent(errorMessage);
                            }

                            notification.setStatus(FAIL);
                            callback.onFailure(error.getCause());
                          });
                } else if (container.getResourceType() == FOLDER) {
                  ((Folder) container)
                      .toProject()
                      .withBody(dataObject)
                      .send()
                      .then(onComplete(callback))
                      .catchError(onFailure(callback));
                }
              });
    } else if (mode == IMPORT) {
      appContext
          .getWorkspaceRoot()
          .newProject()
          .withBody(dataObject)
          .send()
          .thenPromise(project -> project.update().withBody(dataObject).send())
          .then(addCommands(callback))
          .catchError(onFailure(callback));
    }
  }

