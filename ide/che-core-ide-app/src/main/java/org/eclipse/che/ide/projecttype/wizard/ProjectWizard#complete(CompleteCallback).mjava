    @Override
    public void complete(@NotNull final CompleteCallback callback) {
        if (mode == CREATE) {
            appContext.getWorkspaceRoot()
                      .newProject()
                      .withBody(dataObject)
                      .send()
                      .then(onComplete(callback))
                      .catchError(onFailure(callback));
        } else if (mode == UPDATE) {
            appContext.getWorkspaceRoot()
                      .getContainer(Path.valueOf(dataObject.getPath()))
                      .then(optContainer -> {
                          checkState(optContainer.isPresent(), "Failed to update non existed path");

                          final Container container = optContainer.get();
                          if (container.getResourceType() == PROJECT) {
                              ((Project)container).update()
                                                  .withBody(dataObject)
                                                  .send()
                                                  .then(onComplete(callback))
                                                  .catchError(onFailure(callback));
                          } else if (container.getResourceType() == FOLDER) {
                              ((Folder)container).toProject()
                                                 .withBody(dataObject)
                                                 .send()
                                                 .then(onComplete(callback))
                                                 .catchError(onFailure(callback));
                          }
                      });
        } else if (mode == IMPORT) {
            appContext.getWorkspaceRoot()
                      .newProject()
                      .withBody(dataObject)
                      .send()
                      .thenPromise(project -> project.update().withBody(dataObject).send())
                      .then(addCommands(callback))
                      .catchError(onFailure(callback));
        }
    }

