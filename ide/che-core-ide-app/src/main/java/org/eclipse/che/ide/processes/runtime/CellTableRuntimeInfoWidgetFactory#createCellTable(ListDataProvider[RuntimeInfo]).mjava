  private Widget createCellTable(ListDataProvider<RuntimeInfo> dataProvider) {
    CellTable<RuntimeInfo> table = new CellTable<>(100, resources);
    table.ensureDebugId("runtimeInfoCellTable");

    TextColumn<RuntimeInfo> referenceColumn =
        new TextColumn<RuntimeInfo>() {
          @Override
          public String getValue(RuntimeInfo record) {
            return valueOrDefault(record.getReference());
          }

          @Override
          public void render(Context context, RuntimeInfo object, SafeHtmlBuilder sb) {
            sb.appendHtmlConstant(
                "<div id=\""
                    + UIObject.DEBUG_ID_PREFIX
                    + "runtime-info-reference-"
                    + context.getIndex()
                    + "\">");
            super.render(context, object, sb);
          }
        };

    TextColumn<RuntimeInfo> portColumn =
        new TextColumn<RuntimeInfo>() {
          @Override
          public String getValue(RuntimeInfo record) {
            return valueOrDefault(record.getPort());
          }

          @Override
          public void render(Context context, RuntimeInfo object, SafeHtmlBuilder sb) {
            sb.appendHtmlConstant(
                "<div id=\""
                    + UIObject.DEBUG_ID_PREFIX
                    + "runtime-info-port-"
                    + context.getIndex()
                    + "\">");
            super.render(context, object, sb);
          }
        };

    TextColumn<RuntimeInfo> protocolColumn =
        new TextColumn<RuntimeInfo>() {
          @Override
          public String getValue(RuntimeInfo record) {
            return valueOrDefault(record.getProtocol());
          }

          @Override
          public void render(Context context, RuntimeInfo object, SafeHtmlBuilder sb) {
            sb.appendHtmlConstant(
                "<div id=\""
                    + UIObject.DEBUG_ID_PREFIX
                    + "runtime-info-protocol-"
                    + context.getIndex()
                    + "\">");
            super.render(context, object, sb);
          }
        };

    Column<RuntimeInfo, SafeHtml> urlColumn =
        new Column<RuntimeInfo, SafeHtml>(
            new AbstractCell<SafeHtml>("click", "keydown") {

              @Override
              public void render(Context context, SafeHtml value, SafeHtmlBuilder sb) {
                sb.appendHtmlConstant(
                    "<div id=\""
                        + UIObject.DEBUG_ID_PREFIX
                        + "runtime-info-url-"
                        + context.getIndex()
                        + "\">");

                if (value != null) {
                  sb.append(value);
                }
              }

              @Override
              protected void onEnterKeyDown(
                  Context context,
                  Element parent,
                  SafeHtml value,
                  NativeEvent event,
                  ValueUpdater<SafeHtml> valueUpdater) {
                if (valueUpdater != null) {
                  valueUpdater.update(value);
                }
              }

              @Override
              public void onBrowserEvent(
                  Context context,
                  Element parent,
                  SafeHtml value,
                  NativeEvent event,
                  ValueUpdater<SafeHtml> valueUpdater) {
                super.onBrowserEvent(context, parent, value, event, valueUpdater);
                if ("click".equals(event.getType())) {
                  onEnterKeyDown(context, parent, value, event, valueUpdater);
                }
              }
            }) {
          @Override
          public SafeHtml getValue(RuntimeInfo record) {
            String value = valueOrDefault(record.getUrl());

            SafeHtmlBuilder sb = new SafeHtmlBuilder();
            sb.appendHtmlConstant("<a target=\"_blank\" href=\"" + value + "\">");
            sb.appendEscaped(value);
            sb.appendHtmlConstant("</a>");
            return sb.toSafeHtml();
          }
        };

    table.addColumn(referenceColumn, locale.cellTableReferenceColumn());
    table.addColumn(portColumn, locale.cellTablePortColumn());
    table.addColumn(protocolColumn, locale.cellTableProtocolColumn());
    table.addColumn(urlColumn, locale.cellTableUrlColumn());

    table.setColumnWidth(referenceColumn, 15., Unit.PCT);
    table.setColumnWidth(portColumn, 7., Unit.PCT);
    table.setColumnWidth(protocolColumn, 7., Unit.PCT);
    table.setColumnWidth(urlColumn, 71., Unit.PCT);

    dataProvider.addDataDisplay(table);

    return table;
  }

