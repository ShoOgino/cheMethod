  @Inject
  public TreeResourceRevealer(
      ProjectExplorerView projectExplorer, EventBus eventBus, PromiseProvider promises) {
    this.tree = projectExplorer.getTree();

    queue = promises.resolve(null);

    eventBus.addHandler(
        RevealResourceEvent.getType(),
        new RevealResourceHandler() {
          @Override
          public void onRevealResource(final RevealResourceEvent event) {
            queue.thenPromise(
                new Function<Void, Promise<Void>>() {
                  @Override
                  public Promise<Void> apply(Void ignored) throws FunctionException {
                    return reveal(
                            event.getLocation(),
                            event.isSelectionRequired(),
                            event.isFocusRequired())
                        .catchError(
                            new Function<PromiseError, Void>() {
                              @Override
                              public Void apply(PromiseError arg) throws FunctionException {
                                return null;
                              }
                            });
                  }
                });
          }
        });
  }

