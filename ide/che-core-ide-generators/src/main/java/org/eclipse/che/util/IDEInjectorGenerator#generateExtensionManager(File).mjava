    /**
     * Generate to source of the Class
     *
     * @param rootFolder
     */
    public static void generateExtensionManager(File rootFolder) throws IOException {
        File extManager = new File(rootFolder, IDE_INJECTOR_PATH);
        StringBuilder builder = new StringBuilder();
        // declare package name
        builder.append("package org.eclipse.che.ide.client.inject;\n\n");

        // declare imports
        builder.append("import org.eclipse.che.ide.bootstrap.IdeBootstrap;\n");
        builder.append("import com.google.gwt.inject.client.GinModules;\n");
        builder.append("import com.google.gwt.inject.client.Ginjector;\n");
        builder.append("\n");

        // declare class Javadoc
        builder.append("/**\n");
        builder.append(" * THIS CLASS WILL BE OVERRIDDEN BY MAVEN BUILD. DON'T EDIT CLASS, IT WILL HAVE NO EFFECT.\n");
        builder.append(" * \n");
        builder.append(" * Interface for GIN Injector, that provides access to the top level\n");
        builder.append(" * application components. Implementation of Injector is generated\n");
        builder.append(" * on compile time.\n");
        builder.append(" */\n");
        builder.append("@GinModules({\n");
        // generate the list of modules includes
        generateListOfModules(builder);
        // close GinModules declaration
        builder.append("})\n");

        // declare class definition
        builder.append("public interface IDEInjector extends Ginjector\n");
        builder.append("{\n");
        builder.append("\n");
        // define method
        builder.append(GeneratorUtils.TAB).append("/**\n");
        builder.append(GeneratorUtils.TAB).append(" * @return the instance of IdeBootstrap\n");
        builder.append(GeneratorUtils.TAB).append(" */\n");
        builder.append(GeneratorUtils.TAB).append("IdeBootstrap getIdeBootstrap();\n");
        // close class definition
        builder.append("\n");
        builder.append("}\n");

        // flush content
        FileUtils.writeStringToFile(extManager, builder.toString());
    }

