    /**
     * Generate the content of the class
     *
     * @param logger
     * @param context
     * @param packageName
     * @param className
     * @param extensions
     * @throws UnableToCompleteException
     */
    private void generateClass(TreeLogger logger, GeneratorContext context, String packageName, String className,
                               List<JClassType> extensions) throws UnableToCompleteException {
        PrintWriter pw = context.tryCreate(logger, packageName, className);
        if (pw == null) {
            return;
        }

        ClassSourceFileComposerFactory composerFactory = new ClassSourceFileComposerFactory(packageName, className);
        // generate imports
        generateImports(extensions, composerFactory);

        // interface
        composerFactory.addImplementedInterface(ExtensionRegistry.class.getCanonicalName());

        // get source writer
        SourceWriter sw = composerFactory.createSourceWriter(context, pw);
        // begin class definition
        // fields
        sw.println("private final Map<String, ExtensionDescription> extensions = new HashMap<>();");

        generateConstructor(className, extensions, sw);

        // methods
        generateGetExtensionsMethod(sw);
        // close it out
        sw.outdent();
        sw.println("}");

        context.commit(logger, pw);
    }

