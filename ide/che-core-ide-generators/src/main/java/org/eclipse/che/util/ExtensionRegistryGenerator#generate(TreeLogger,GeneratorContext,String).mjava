  /** {@inheritDoc} */
  @Override
  public String generate(TreeLogger logger, GeneratorContext context, String typeName)
      throws UnableToCompleteException {
    TypeOracle typeOracle = context.getTypeOracle();
    JClassType extensionManager = typeOracle.findType(typeName);
    if (extensionManager == null) {
      logger.log(TreeLogger.ERROR, "Can't find interface type '" + typeName + "'", null);
      throw new UnableToCompleteException();
    }
    if (extensionManager.isInterface() == null) {
      logger.log(
          TreeLogger.ERROR,
          extensionManager.getQualifiedSourceName() + " is not an interface",
          null);
      throw new UnableToCompleteException();
    }

    List<JClassType> extensions = new ArrayList<>();
    for (JClassType type : typeOracle.getTypes()) {
      if (type.isAnnotationPresent(Extension.class)) {
        extensions.add(type);
      }
    }

    String packageName = extensionManager.getPackage().getName();
    String className = extensionManager.getSimpleSourceName() + "Impl";

    generateClass(logger, context, packageName, className, extensions);

    return packageName + "." + className;
  }

