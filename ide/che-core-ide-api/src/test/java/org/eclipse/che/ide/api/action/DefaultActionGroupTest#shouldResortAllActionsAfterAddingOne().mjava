  @Test
  public void shouldResortAllActionsAfterAddingOne() {
    // add some actions
    defaultActionGroup.add(firstAction);
    when(actionManager.getId(eq(firstAction))).thenReturn("firstAction");

    defaultActionGroup.add(secondAction, Constraints.FIRST);
    when(actionManager.getId(eq(secondAction))).thenReturn("secondAction");

    defaultActionGroup.add(thirdAction, new Constraints(AFTER, "fourthAction"));
    when(actionManager.getId(eq(thirdAction))).thenReturn("thirdAction");

    // verify order
    Action[] result = defaultActionGroup.getChildren(mock(ActionEvent.class));

    assertThat(Arrays.asList(result)).containsExactly(secondAction, firstAction, thirdAction);

    // add other actions
    defaultActionGroup.add(fourthAction);
    when(actionManager.getId(eq(thirdAction))).thenReturn("thirdAction");

    defaultActionGroup.add(fifthAction, Constraints.FIRST);
    when(actionManager.getId(eq(fifthAction))).thenReturn("fifthAction");

    defaultActionGroup.add(sixthAction, new Constraints(BEFORE, "firstAction"));
    when(actionManager.getId(eq(sixthAction))).thenReturn("sixthAction");

    // verify that actions have been resorted
    Action[] newResult = defaultActionGroup.getChildren(mock(ActionEvent.class));

    assertThat(Arrays.asList(newResult))
        .hasSize(6)
        .containsExactly(
            fifthAction, secondAction, sixthAction, firstAction, fourthAction, thirdAction);
  }

