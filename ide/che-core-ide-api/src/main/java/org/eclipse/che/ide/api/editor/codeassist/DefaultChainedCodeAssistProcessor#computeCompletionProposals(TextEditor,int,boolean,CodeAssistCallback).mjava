    @Override
    public void computeCompletionProposals(final TextEditor textEditor, final int offset, final boolean triggered, final CodeAssistCallback callback) {
        if (!this.codeAssistProcessors.isEmpty()) {
            final List<CompletionProposal> proposalList = new ArrayList<>();
            final List<CodeAssistProcessor> expected = new ArrayList<>();
            for (final CodeAssistProcessor processor : this.codeAssistProcessors) {
                expected.add(processor);
                processor.computeCompletionProposals(textEditor, offset, triggered, new CodeAssistCallback() {
                    @Override
                    public void proposalComputed(final List<CompletionProposal> processorProposals) {
                        expected.remove(processor);
                        if (processorProposals == null || processorProposals.isEmpty()) {
                            return;
                        }
                        proposalList.addAll(processorProposals);

                        // all processors have computed their result
                        if (expected.isEmpty()) {
                            callback.proposalComputed(proposalList);
                        }
                    }
                });
            }
        }
    }

