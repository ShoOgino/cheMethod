    private void getNodeByPathRecursively(TreeNode<?> node, final String path, final int offset,
                                          final AsyncCallback<TreeNode<?>> callback) {
        node.refreshChildren(new AsyncCallback<TreeNode<?>>() {
            @Override
            public void onSuccess(TreeNode<?> result) {
                for (TreeNode<?> childNode : result.getChildren()) {
                    if (path.startsWith(childNode.getId(), offset)) {

                        final int nextOffset = offset + childNode.getId().length() + 1;

                        if (nextOffset - 1 == path.length()) {
                            callback.onSuccess(childNode);
                        } else {

                            int indexNextNodeSlash = path.indexOf("/", nextOffset - 1);

                            if (indexNextNodeSlash == nextOffset - 1) {
                                getNodeByPathRecursively(childNode, path, nextOffset, callback);
                            } else {//very similar path, f.e. /com/u but we need another /com/ua, we should get next child of com
                                continue;
                            }
                        }
                        return;
                    }
                }
                callback.onFailure(new IllegalStateException("Node not found"));
            }

            @Override
            public void onFailure(Throwable caught) {
                callback.onFailure(caught);
            }
        });
    }

