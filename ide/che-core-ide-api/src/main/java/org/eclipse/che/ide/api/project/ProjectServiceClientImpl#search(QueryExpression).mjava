    /** {@inheritDoc} */
    @Override
    public Promise<List<SearchResult>> search(QueryExpression expression) {
        final String url =
                encodeAllowEscapes(getBaseUrl() + SEARCH + (isNullOrEmpty(expression.getPath()) ? Path.ROOT : path(expression.getPath())));

        StringBuilder queryParameters = new StringBuilder();
        if (expression.getName() != null && !expression.getName().isEmpty()) {
            queryParameters.append("&name=").append(expression.getName());
        }
        if (expression.getText() != null && !expression.getText().isEmpty()) {
            queryParameters.append("&text=").append(expression.getText());
        }
        if (expression.getMaxItems() != 0) {
            queryParameters.append("&maxItems=").append(expression.getMaxItems());
        }
        if (expression.getSkipCount() != 0) {
            queryParameters.append("&skipCount=").append(expression.getSkipCount());
        }

        return reqFactory.createGetRequest(url + queryParameters.toString().replaceFirst("&", "?"))
                         .header(ACCEPT, MimeType.APPLICATION_JSON)
                         .loader(loaderFactory.newLoader("Searching..."))
                         .send(unmarshaller.newListUnmarshaller(SearchResultDto.class)).then(
                        (Function<List<SearchResultDto>, List<SearchResult>>)arg -> {
                            if (arg.isEmpty()) {
                                return Collections.emptyList();
                            }
                            return arg.stream().map(SearchResult::new).collect(Collectors.toList());
                        });
    }

