    private void internalInitialize() {
        final WorkspaceImpl workspace = appContext.getWorkspace();
        final RuntimeImpl runtime = workspace.getRuntime();

        if (runtime == null) {
            return;
        }

        for (MachineImpl machine : runtime.getMachines().values()) {
            machine.getServerByName(EXEC_AGENT_REFERENCE)
                   .ifPresent(server -> {
                       String execAgentServerURL = server.getUrl();
                       execAgentServerURL = execAgentServerURL.replaceFirst("http", "ws") + "/connect"; // FIXME: spi ide
                       initializer.initialize(machine.getName(), singletonMap("url", execAgentServerURL));
                   });

            final Optional<ServerImpl> wsAgentServer = machine.getServerByName(WSAGENT_REFERENCE);

            if (wsAgentServer.isPresent()) {
                final String wsAgentBaseUrl = wsAgentServer.get().getUrl() + "/api"; // FIXME: spi ide
                final String wsAgentWebSocketUrl = wsAgentBaseUrl.replaceFirst("http", "ws") + "/ws"; // FIXME: spi ide
                final String wsAgentUrl = wsAgentWebSocketUrl.replaceFirst("(api)(/)(ws)", "websocket" + "$2" + appContext.getAppId());

                initializer.initialize("ws-agent", singletonMap("url", wsAgentUrl));
            } else {
                execAgentCommandManager.getProcesses(machine.getName(), false)
                                       .onSuccess(processes -> {
                                           Consumer<Integer> pidConsumer = pid -> execAgentCommandManager
                                                   .getProcessLogs(machine.getName(), pid, null, null, 50, 0)
                                                   .onSuccess(logs -> logs.forEach(log -> {
                                                       String fixedLog = log.getText().replaceAll("\\[STDOUT\\] ", "");
                                                       String machineName = machine.getName();
                                                       eventBus.fireEvent(new EnvironmentOutputEvent(fixedLog, machineName));
                                                   }));

                                           processes.stream()
                                                    .filter(it -> "CheWsAgent".equals(it.getName()))
                                                    .map(DtoWithPid::getPid)
                                                    .forEach(pidConsumer);
                                       });
            }
        }
    }

