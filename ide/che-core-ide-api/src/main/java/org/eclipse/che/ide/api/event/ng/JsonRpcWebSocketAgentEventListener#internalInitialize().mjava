    private void internalInitialize() {
        DevMachine devMachine = appContext.getDevMachine();
        String devMachineId = devMachine.getId();
        String wsAgentWebSocketUrl = devMachine.getWsAgentWebSocketUrl();

        String wsAgentUrl = wsAgentWebSocketUrl.replaceFirst("(api)(/)(ws)", "websocket" + "$2" + appContext.getAppId());
        String execAgentUrl = devMachine.getExecAgentUrl();

        initializer.initialize("ws-agent", singletonMap("url", wsAgentUrl));
        initializer.initialize(devMachineId, singletonMap("url", execAgentUrl));

        for (MachineEntity machineEntity : appContext.getActiveRuntime().getMachines()) {
            if (!machineEntity.isDev()) {
                initializer.initialize(machineEntity.getId(), singletonMap("url", machineEntity.getExecAgentUrl()));
                execAgentCommandManager.getProcesses(machineEntity.getId(), false)
                                       .onSuccess(processes -> {
                                           Consumer<Integer> pidConsumer = pid -> execAgentCommandManager
                                                   .getProcessLogs(machineEntity.getId(), pid, null, null, 50, 0)
                                                   .onSuccess(logs -> logs.forEach(log -> {
                                                       String fixedLog = log.getText().replaceAll("\\[STDOUT\\] ", "");
                                                       String machineName = machineEntity.getDisplayName();
                                                       eventBus.fireEvent(new EnvironmentOutputEvent(fixedLog, machineName));
                                                   }));

                                           processes.stream()
                                                    .filter(it -> "CheWsAgent".equals(it.getName()))
                                                    .map(DtoWithPid::getPid)
                                                    .forEach(pidConsumer);
                                       });
            }
        }
    }

