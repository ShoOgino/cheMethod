    /**
     * Creates the new {@link Folder} in current container.
     * <p/>
     * Fires following events:
     * {@link ResourceChangedEvent} when folder has successfully created.
     * <p/>
     * Method produces new {@link Folder}.
     * <p/>
     * The supplied argument {@code name} should be a valid and pass validation within {@link NameUtils#checkFolderName(String)}.
     * <p/>
     * Note. That folders can not be created in workspace root (obtained by {@link AppContext#getWorkspaceRoot()}).
     * Creating folder in this container will be failed.
     * <p/>
     * Example of usage:
     * <pre>
     *     Container workspace = ... ;
     *
     *     workspace.newFolder("name").then(new Operation<Folder>() {
     *         public void apply(Folder newFolder) throws OperationException {
     *              //do something with new folder
     *         }
     *     });
     * </pre>
     * <p/>
     * Fires {@link ResourceChangedEvent} with the following {@link ResourceDelta}:
     * Delta kind: {@link ResourceDelta#ADDED}.
     * Created resource (instance of {@link Folder}) provided by {@link ResourceDelta#getResource()}
     *
     * @param name
     *         the name of the folder
     * @return the {@link Promise} with created {@link Folder}
     * @throws IllegalArgumentException
     *         if arguments is not a valid. Reasons include:
     *         <ul>
     *         <li>Invalid folder name</li>
     *         <li>Failed to create folder in workspace root</li>
     *         </ul>
     * @throws IllegalStateException
     *         if creation was failed. Reasons include:
     *         <ul>
     *         <li>Resource already exists</li>
     *         </ul>
     * @see NameUtils#checkFolderName(String)
     * @since 4.4.0
     */
    Promise<Folder> newFolder(String name);

