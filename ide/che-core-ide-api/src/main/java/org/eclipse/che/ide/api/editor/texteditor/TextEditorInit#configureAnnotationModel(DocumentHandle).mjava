    /**
     * Configures the editor's annotation model.
     * @param documentHandle the handle on the editor
     */
    private void configureAnnotationModel(final DocumentHandle documentHandle) {
        final AnnotationModel annotationModel = configuration.getAnnotationModel();
        if (annotationModel == null) {
            return;
        }
        // add the renderers (event handler) before the model (event source)
        if(textEditor instanceof HasAnnotationRendering){
            ((HasAnnotationRendering)textEditor).configure(annotationModel, documentHandle);
        }
        annotationModel.setDocumentHandle(documentHandle);
        documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE, annotationModel);

        // the model listens to QueryAnnotation events
        documentHandle.getDocEventBus().addHandler(QueryAnnotationsEvent.TYPE, annotationModel);
//        // gutter renderer
//        if (textEditor instanceof HasGutter && ((HasGutter)this.textEditor).getGutter() != null) {
////            final GutterAnnotationRenderer annotationRenderer = new GutterAnnotationRenderer();
////            annotationRenderer.setDocument(documentHandle.getDocument());
////            annotationRenderer.setHasGutter(((HasGutter)this.textEditor).getGutter());
////            documentHandle.getDocEventBus().addHandler(AnnotationModelEvent.TYPE, annotationRenderer);
////            documentHandle.getDocEventBus().addHandler(ClearAnnotationModelEvent.TYPE, annotationRenderer);
//        }
//
//        // inline renderer
//        final InlineAnnotationRenderer inlineAnnotationRenderer = new InlineAnnotationRenderer();
//        inlineAnnotationRenderer.setDocument(documentHandle.getDocument());
//        inlineAnnotationRenderer.setHasTextMarkers(this.textEditor.getHasTextMarkers());
//        documentHandle.getDocEventBus().addHandler(AnnotationModelEvent.TYPE, inlineAnnotationRenderer);
//        documentHandle.getDocEventBus().addHandler(ClearAnnotationModelEvent.TYPE, inlineAnnotationRenderer);
//
//        // minimap renderer
//        if (this.textEditor instanceof HasMinimap && ((HasMinimap)this.textEditor).getMinimap() != null) {
//            final MinimapAnnotationRenderer minimapAnnotationRenderer = new MinimapAnnotationRenderer();
//            minimapAnnotationRenderer.setDocument(documentHandle.getDocument());
//            minimapAnnotationRenderer.setMinimap(((HasMinimap)this.textEditor).getMinimap());
//            documentHandle.getDocEventBus().addHandler(AnnotationModelEvent.TYPE, minimapAnnotationRenderer);
//            documentHandle.getDocEventBus().addHandler(ClearAnnotationModelEvent.TYPE, minimapAnnotationRenderer);
//        }
//
//        annotationModel.setDocumentHandle(documentHandle);
//        documentHandle.getDocEventBus().addHandler(DocumentChangeEvent.TYPE, annotationModel);
//
//        // the model listens to QueryAnnotation events
//        documentHandle.getDocEventBus().addHandler(QueryAnnotationsEvent.TYPE, annotationModel);
    }

