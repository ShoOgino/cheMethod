  /**
   * Creates the new {@link Project} in current container with specified source storage (in other
   * words, imports a remote project).
   *
   * <p>Fires following events: {@link ResourceChangedEvent} when project has successfully created.
   *
   * <p>Calling this method doesn't import a project immediately. To complete the request method
   * {@link ProjectRequest#send()} should be called.
   *
   * <p>Calling {@link ProjectRequest#send()} produces new {@link Project} resource.
   *
   * <p>The supplied argument {@code name} should be a valid and pass validation within {@link
   * NameUtils#checkProjectName(String)}.
   *
   * <p>
   *
   * <p>Example of usage for creating a new project:
   *
   * <pre>
   *     ProjectConfig config = ... ;
   *     Container workspace = ... ;
   *
   *     Promise<Project> newProjectPromise = workspace.importProject()
   *                                                   .withBody(config)
   *                                                   .send();
   *
   *     newProjectPromise.then(new Operation<Project>() {
   *         public void apply(Project newProject) throws OperationException {
   *              //do something with new project
   *         }
   *     });
   * </pre>
   *
   * <p>Fires {@link ResourceChangedEvent} with the following {@link ResourceDelta}: Delta kind:
   * {@link ResourceDelta#ADDED}. Created resource (instance of {@link Project}) provided by {@link
   * ResourceDelta#getResource()}
   *
   * @return the create project request
   * @throws IllegalArgumentException if arguments is not a valid. Reasons include:
   *     <ul>
   *       <li>Invalid project name
   *     </ul>
   *
   * @throws IllegalStateException if creation was failed. Reasons include:
   *     <ul>
   *       <li>Resource already exists
   *     </ul>
   *
   * @see NameUtils#checkProjectName(String)
   * @see ProjectRequest
   * @see ProjectRequest#send()
   * @since 4.4.0
   */
  ProjectRequest importProject();

