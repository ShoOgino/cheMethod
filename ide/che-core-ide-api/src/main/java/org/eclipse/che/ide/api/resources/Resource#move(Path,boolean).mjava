    /**
     * Moves resource to given new {@code destination}. Move operation performs asynchronously and result of current
     * operation will be displayed in {@code Promise} result.
     * <p/>
     * Move operation produces new {@link Resource} which is already cached.
     * <p/>
     * Fires following events:
     * {@link ResourceChangedEvent} when resource has successfully moved. This event provides information about moved
     * resource.
     * <p/>
     * Before moving mechanism remembers deepest depth which was read and tries to restore it after move.
     * <p/>
     * Passing {@code force} argument as true method will ignore existed resource on the server and overwrite them.
     * <p/>
     * Example of usage:
     * <pre>
     *     Resource resource = ... ;
     *     Path moveTo = ... ;
     *
     *     resource.move(moveTo, true).then(new Operation<Resource>() {
     *          public void apply(Resource movedResource) throws OperationException {
     *              //do something with movedResource
     *          }
     *     })
     * </pre>
     * <p/>
     * Fires {@link ResourceChangedEvent} with the following {@link ResourceDelta}:
     * Delta kind: {@link ResourceDelta#REMOVED}.
     * Removed resource is provided by {@link ResourceDelta#getResource()}.
     * <p/>
     * Also fires {@link ResourceChangedEvent} with the following {@link ResourceDelta}:
     * Delta kind: {@link ResourceDelta#ADDED}.
     * Moved resource provided by {@link ResourceDelta#getResource()}.
     * Contains flags {@link ResourceDelta#MOVED_FROM} and {@link ResourceDelta#MOVED_TO}.
     * Source resource is accessible by calling {@link ResourceDelta#getFromPath()}.
     * Moved resource (or new resource) is accessible by calling {@link ResourceDelta#getToPath()}.
     *
     * @param destination
     *         the destination path
     * @return {@code Promise} with move moved {@link Resource}
     * @throws IllegalStateException
     *         if this resource could not be moved. Reasons include:
     *         <ul>
     *         <li>Resource already exists</li>
     *         <li>Resource with path '/path' isn't a project</li>
     *         </ul>
     * @throws IllegalArgumentException
     *         if current resource can not be moved. Reasons include:
     *         <ul>
     *         <li>Workspace root is not allowed to be moved</li>
     *         </ul>
     * @see ResourceChangedEvent
     * @see Resource
     * @since 4.4.0
     */
    Promise<Resource> move(Path destination, boolean force);

