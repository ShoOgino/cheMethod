    @Override
    protected void initializeEditor(final OpenEditorCallback callback) {
        QuickAssistProcessor processor = configuration.getQuickAssistProcessor();
        if (quickAssistantFactory != null && processor != null) {
            quickAssistant = quickAssistantFactory.createQuickAssistant(this);
            quickAssistant.setQuickAssistProcessor(processor);
        }


        Promise<Document> documentPromice = CallbackPromiseHelper.createFromCallback(new CallbackPromiseHelper.Call<Document, Throwable>() {
            @Override
            public void makeCall(Callback<Document, Throwable> callback) {

            }
        });
        editorInit = new TextEditorInit<>(configuration,
                                          generalEventBus,
                                          this.codeAssistantFactory,
                                          this.quickAssistant,
                                          this);
        editorInit.init();

        if (editorModule.isError()) {
            displayErrorPanel(constant.editorInitErrorMessage());
            return;
        }
        final boolean moduleReady = editorModule.isReady();
        EditorInitCallback<T> dualCallback = new EditorInitCallback<T>(moduleReady, loaderFactory, constant) {
            @Override
            public void onReady(final String content) {
                createEditor(content);
            }

            @Override
            public void onError() {
                displayErrorPanel(constant.editorInitErrorMessage());
                callback.onInitializationFailed();
            }

            @Override
            public void onFileError() {
                displayErrorPanel(constant.editorFileErrorMessage());
                callback.onInitializationFailed();
            }
        };
        documentStorage.getDocument(input.getFile(), dualCallback);
        if (!moduleReady) {
            editorModule.waitReady(dualCallback);
        }
    }

