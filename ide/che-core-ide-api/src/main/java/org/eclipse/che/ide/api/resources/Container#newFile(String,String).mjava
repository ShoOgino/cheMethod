    /**
     * Creates the new {@link File} in current container.
     * <p/>
     * Fires following events:
     * {@link ResourceChangedEvent} when file has successfully created.
     * <p/>
     * Method produces new {@link File}.
     * <p/>
     * The supplied argument {@code name} should be a valid and pass validation within {@link NameUtils#checkFileName(String)} (String)}.
     * <p/>
     * Note. That files can not be created in workspace root (obtained by {@link AppContext#getWorkspaceRoot()}).
     * Creating folder in this container will be failed.
     * <p/>
     * The file content may be a {@code null} or empty.
     * <p/>
     * Example of usage:
     * <pre>
     *     Container workspace = ... ;
     *
     *     workspace.newFile("name", "content").then(new Operation<File>() {
     *         public void apply(File newFile) throws OperationException {
     *              //do something with new file
     *         }
     *     });
     * </pre>
     * <p/>
     * Fires {@link ResourceChangedEvent} with the following {@link ResourceDelta}:
     * Delta kind: {@link ResourceDelta#ADDED}.
     * Created resource (instance of {@link File}) provided by {@link ResourceDelta#getResource()}
     *
     * @param name
     *         the name of the file
     * @param content
     *         the file content
     * @return the {@link Promise} with created {@link File}
     * @throws IllegalArgumentException
     *         if arguments is not a valid. Reasons include:
     *         <ul>
     *         <li>Invalid file name</li>
     *         <li>Failed to create file in workspace root</li>
     *         </ul>
     * @throws IllegalStateException
     *         if creation was failed. Reasons include:
     *         <ul>
     *         <li>Resource already exists</li>
     *         </ul>
     * @see NameUtils#checkFileName(String)
     * @since 4.4.0
     */
    Promise<File> newFile(String name, String content);

