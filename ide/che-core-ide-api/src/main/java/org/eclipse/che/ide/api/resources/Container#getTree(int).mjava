  /**
   * Returns the plain list of file tree with given {@code depth}.
   *
   * <p>Input {@code depth} should be within the range from -1 to {@link Integer#MAX_VALUE}.
   *
   * <p>In case if {@code depth} equals to 0, then empty resource is returned. In case if {@code
   * depth} equals to -1, then whole file tree is loaded and returned.
   *
   * <p>Method doesn't guarantee that resources will be sorted by their {@link #getLocation()} in
   * any order.
   *
   * <p>Fires {@link ResourceChangedEvent} with the following {@link ResourceDelta}: Delta kind:
   * {@link ResourceDelta#ADDED}. Cached and loaded resource provided by {@link
   * ResourceDelta#getResource()}.
   *
   * <p>Or
   *
   * <p>Delta kind: {@link ResourceDelta#UPDATED}. When resource was cached previously. Updated
   * resource provided by {@link ResourceDelta#getResource()}.
   *
   * @param depth the depth
   * @return plain array of loaded resources
   * @throws IllegalArgumentException in case if invalid depth passed as argument. i.e. depth equals
   *     -2, -3 and so on. Reasons include:
   *     <ul>
   *       <li>Invalid depth
   *     </ul>
   *
   * @since 4.4.0
   */
  Promise<Resource[]> getTree(int depth);

