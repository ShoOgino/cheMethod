    /**
     * Returns the position in the partitoner's position category which is close to the given offset. This is, the position has either an
     * offset which is the same as the given offset or an offset which is smaller than the given offset. This method profits from the
     * knowledge that a partitioning is a ordered set of disjoint position.
     * <p>
     * May be extended or replaced by subclasses.
     * </p>
     *
     * @param offset the offset for which to search the closest position
     * @return the closest position in the partitioner's category
     */
    protected TypedPosition findClosestPosition(int offset) {

        int index = -1;
        try {
            index = this.documentPositionMap.computeIndexInCategory(this.positionCategory, offset);
        } catch (final BadLocationException e) {
            Log.warn(DefaultPartitioner.class, "Bad location: " + offset + "(max:" + getContentLength() + ").");
            return null;
        } catch (final BadPositionCategoryException e) {
            Log.warn(DefaultPartitioner.class, "Bad position category: " + this.positionCategory);
            return null;
        }
        if (index == -1) {
            return null;
        }

        List<TypedPosition> category = null;
        try {
            category = getPositions();
        } catch (final BadPositionCategoryException e) {
            Log.warn(DefaultPartitioner.class, "Bad position category: " + this.positionCategory);
            return null;
        }

        if (category == null || category.size() == 0) {
            return null;
        }

        if (index < category.size()) {
            if (offset == category.get(index).offset) {
                return category.get(index);
            }
        }

        if (index > 0) {
            index--;
        }

        return category.get(index);
    }

