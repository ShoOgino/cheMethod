  private void configureChangeInterceptors(final DocumentHandle documentHandle) {
    final ChangeInterceptorProvider interceptors = configuration.getChangeInterceptorProvider();
    if (interceptors != null) {
      documentHandle
          .getDocEventBus()
          .addHandler(
              TextChangeEvent.TYPE,
              new TextChangeHandler() {
                @Override
                public void onTextChange(final TextChangeEvent event) {
                  final TextChange change = event.getChange();
                  if (change == null) {
                    return;
                  }
                  final TextPosition from = change.getFrom();
                  if (from == null) {
                    return;
                  }
                  final int startOffset = documentHandle.getDocument().getIndexFromPosition(from);
                  final TypedRegion region =
                      configuration.getPartitioner().getPartition(startOffset);
                  if (region == null) {
                    return;
                  }
                  final List<TextChangeInterceptor> filteredInterceptors =
                      interceptors.getInterceptors(region.getType());
                  if (filteredInterceptors == null || filteredInterceptors.isEmpty()) {
                    return;
                  }
                  // don't apply the interceptors if the range end doesn't belong to the same
                  // partition
                  final TextPosition to = change.getTo();
                  if (to != null && !from.equals(to)) {
                    final int endOffset = documentHandle.getDocument().getIndexFromPosition(to);
                    if (endOffset < region.getOffset()
                        || endOffset > region.getOffset() + region.getLength()) {
                      return;
                    }
                  }
                  // stop as soon as one interceptors has modified the content
                  for (final TextChangeInterceptor interceptor : filteredInterceptors) {
                    final TextChange result =
                        interceptor.processChange(
                            change, documentHandle.getDocument().getReadOnlyDocument());
                    if (result != null) {
                      event.update(result);
                      break;
                    }
                  }
                }
              });
    }
  }

