  /** {@inheritDoc} */
  @Override
  public void addGutterItem(
      int line, String gutterId, Element element, final LineNumberingChangeCallback lineCallback) {
    if (!Gutters.BREAKPOINTS_GUTTER.equals(gutterId)) {
      return;
    }

    addGutterItem(line, gutterId, element);
    if (beforeChangedEventHandler == null) {
      beforeChangedEventHandler =
          parameter -> {
            int linesAdded = parameter.addedLineCount();
            int linesRemoved = parameter.removedLineCount();
            int fromLine = editorOverlay.getModel().getLineAtOffset(parameter.start());

            if (linesAdded > 0 || linesRemoved > 0) {
              for (int i = fromLine; i < fromLine + Math.abs(linesAdded - linesRemoved); i++) {
                removeAnnotations(getAnnotations(i));
              }
            }
          };

      this.editorOverlay.getModel().addEventListener("Changing", beforeChangedEventHandler, false);
    }

    if (afterChangedEventHandler == null) {
      afterChangedEventHandler =
          parameter -> {
            int linesAdded = parameter.addedLineCount();
            int linesRemoved = parameter.removedLineCount();
            int fromLine = editorOverlay.getModel().getLineAtOffset(parameter.start());

            if (linesAdded > 0
                || linesRemoved > 0
                || editorOverlay.getModel().getLine(fromLine).isEmpty()) {
              lineCallback.onLineNumberingChange(fromLine, linesRemoved, linesAdded);
            }
          };

      this.editorOverlay.getModel().addEventListener("Changed", afterChangedEventHandler, false);
    }
  }

