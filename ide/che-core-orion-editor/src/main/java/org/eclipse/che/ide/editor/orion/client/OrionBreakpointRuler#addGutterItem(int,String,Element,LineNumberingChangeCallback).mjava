  /** {@inheritDoc} */
  @Override
  public void addGutterItem(
      int line, String gutterId, Element element, final LineNumberingChangeCallback lineCallback) {
    if (!Gutters.BREAKPOINTS_GUTTER.equals(gutterId)) {
      return;
    }

    addGutterItem(line, gutterId, element);
    if (modelChangingEventHandler == null) {
      modelChangingEventHandler =
          new OrionTextModelOverlay.EventHandler<ModelChangedEventOverlay>() {
            @Override
            public void onEvent(ModelChangedEventOverlay parameter) {
              int linesAdded = parameter.addedLineCount();
              int linesRemoved = parameter.removedLineCount();
              int fromLine = editorOverlay.getModel().getLineAtOffset(parameter.start());
              String line = editorOverlay.getModel().getLine(fromLine);

              if (linesAdded > 0 || linesRemoved > 0 || line.trim().isEmpty()) {
                removeAnnotations(getAnnotationsFrom(fromLine));
                lineCallback.onLineNumberingChange(fromLine, linesRemoved, linesAdded);
              }
            }
          };

      this.editorOverlay.getModel().addEventListener("Changed", modelChangingEventHandler, false);
    }
  }

