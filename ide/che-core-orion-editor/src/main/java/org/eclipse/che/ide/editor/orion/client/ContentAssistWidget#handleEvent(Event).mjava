  @Override
  public void handleEvent(Event evt) {
    if (Event.KEYDOWN.equalsIgnoreCase(evt.getType())) {
      final KeyboardEvent keyEvent = (KeyboardEvent) evt;
      switch (keyEvent.getKeyCode()) {
        case KeyCodes.KEY_ESCAPE:
          Scheduler.get().scheduleDeferred(this::hide);
          break;

        case KeyCodes.KEY_DOWN:
          selectNext();
          evt.preventDefault();
          break;

        case KeyCodes.KEY_UP:
          selectPrevious();
          evt.preventDefault();
          break;

        case KeyCodes.KEY_PAGEUP:
          selectPreviousPage();
          evt.preventDefault();
          break;

        case KeyCodes.KEY_PAGEDOWN:
          selectNextPage();
          evt.preventDefault();
          break;

        case KeyCodes.KEY_HOME:
          selectFirst();
          break;

        case KeyCodes.KEY_END:
          selectLast();
          break;

        case KeyCodes.KEY_ENTER:
          evt.preventDefault();
          evt.stopImmediatePropagation();
          validateItem(true);
          break;

        case KeyCodes.KEY_TAB:
          evt.preventDefault();
          evt.stopImmediatePropagation();
          validateItem(false);
          break;
      }
    } else if (Event.SCROLL.equalsIgnoreCase(evt.getType())) {
      updateIfNecessary();
    } else if (Event.FOCUS.equalsIgnoreCase(evt.getType())) {
      focused = true;
    }
  }

