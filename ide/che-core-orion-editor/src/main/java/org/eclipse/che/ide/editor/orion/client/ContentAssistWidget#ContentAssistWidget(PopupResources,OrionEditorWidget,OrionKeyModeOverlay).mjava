    @AssistedInject
    public ContentAssistWidget(final PopupResources popupResources,
                               @Assisted final OrionEditorWidget textEditor,
                               @Assisted OrionKeyModeOverlay assistMode) {
        this.popupResources = popupResources;
        this.textEditor = textEditor;
        this.assistMode = assistMode;

        popupElement = Elements.createDivElement(popupResources.popupStyle().popup());

        Element headerElement = Elements.createDivElement(popupResources.popupStyle().header());
        headerElement.setInnerText("Proposals:");
        popupElement.appendChild(headerElement);

        popupBodyElement = Elements.createDivElement(popupResources.popupStyle().body());
        popupElement.appendChild(popupBodyElement);

        listElement = Elements.createUListElement();
        popupBodyElement.appendChild(listElement);

        docPopup = new FlowPanel();
        docPopup.setStyleName(popupResources.popupStyle().popup());
        docPopup.setSize("370px", "180px");

        popupListener = evt -> {
            if (!(evt instanceof MouseEvent)) {
                return;
            }
            final MouseEvent mouseEvent = (MouseEvent) evt;
            final EventTarget target = mouseEvent.getTarget();
            if (target instanceof Element) {
                final Element elementTarget = (Element) target;
                if (docPopup.isVisible() &&
                        (elementTarget.equals(docPopup.getElement()) ||
                                elementTarget.getParentElement().equals(docPopup.getElement()))) {
                    return;
                }

                if (!ContentAssistWidget.this.popupElement.contains(elementTarget)) {
                    hide();
                    evt.preventDefault();
                }
            }
        };

        handler = event -> {
            callCodeAssistTimer.cancel();
            callCodeAssistTimer.schedule(250);
        };
    }

