    public <R> Promise<List<R>> sendAndReceiveResultAsListOfDto(final Class<R> rClass) {
        checkNotNull(rClass, "Result class value must not be null");

        final String requestId = transmitRequest();

        Log.debug(getClass(), "Transmitting request: " +
                              "endpoint ID: " + endpointId + ", " +
                              "request ID: " + requestId + ", " +
                              "method: " + method + ", " +
                              "params object class: " + pValue.getClass() + ", " +
                              "params list value" + pValue + ", " +
                              "result list items class: " + rClass);

        return Promises.create(new Executor.ExecutorBody<List<R>>() {
            @Override
            public void apply(ResolveFunction<List<R>> resolve, RejectFunction reject) {
                dispatcher.registerPromiseOfMany(endpointId, requestId, rClass, resolve, reject);
            }
        });
    }

