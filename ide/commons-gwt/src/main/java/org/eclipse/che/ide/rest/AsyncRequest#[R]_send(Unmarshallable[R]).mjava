    /**
     * Sends an HTTP request based on the current {@link AsyncRequest} configuration.
     *
     * @param unmarshaller
     *         unmarshaller that should be used to deserialize a response
     * @return promise that may be resolved with the deserialized response value or rejected in case request error
     */
    public <R> Promise<R> send(final Unmarshallable<R> unmarshaller) {
        return CallbackPromiseHelper.createFromCallback(new CallbackPromiseHelper.Call<R, Throwable>() {
            @Override
            public void makeCall(final Callback<R, Throwable> callback) {
                send(new AsyncRequestCallback<R>(unmarshaller) {
                    @Override
                    protected void onSuccess(R result) {
                        callback.onSuccess(result);
                    }

                    @Override
                    protected void onFailure(Throwable exception) {
                        callback.onFailure(exception);
                    }
                });
            }
        });
    }

