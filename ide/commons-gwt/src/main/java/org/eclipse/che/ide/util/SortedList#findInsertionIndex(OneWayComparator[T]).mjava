  /**
   * Returns the index where the item with the value would be inserted. The actual value is unknown
   * to this method; it delegates comparison to the given {@code comparator}.
   *
   * <p>If an item with the same value already exists in the list, the returned index will be the
   * first appearance of the value in the list. If the value does not exist in the list, the
   * returned index will be the first value greater than the value being compared, or the size of
   * the list if there is no greater value.
   *
   * <p>An alternate approach to the OneWayComparator used here is to have the SortedList take
   * another type parameter for the type of the value, and have a findInsertionIndex(V value)
   * method. Unfortunately, it is common to have primitives for the value, so we would be boxing
   * unnecessarily.
   *
   * @see #findInsertionIndex(OneWayComparator, boolean)
   */
  public int findInsertionIndex(OneWayComparator<T> comparator) {
    /*
     * Return the greater value, since that will be the insertion index.
     * Remember that if we get here, lower > upper (look at the while loop
     * above).
     */
    return findInsertionIndex(comparator, true);
  }

