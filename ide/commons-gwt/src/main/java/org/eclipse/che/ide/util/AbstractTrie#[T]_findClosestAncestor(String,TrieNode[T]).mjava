  /**
   * Finds the closest ancestor of a search key. Formally it returns a node x, such that: {@code
   * prefix.startsWith(x.prefix)} and there is no other node y, such that {@code
   * (prefix.startsWith(y.prefix) and y.prefix.length > x.prefix)}
   *
   * @param key search key
   * @param searchRoot node to start from
   * @return closest ancestor
   */
  static <T> TrieNode<T> findClosestAncestor(String key, TrieNode<T> searchRoot) {
    Assert.isNotNull(key);
    Assert.isLegal(
        key.startsWith(searchRoot.getPrefix()),
        "key=" + key + " root prefix=" + searchRoot.getPrefix());

    TrieNode<T> result = searchRoot;
    for (TrieNode<T> child = searchRoot; child != null; child = child.findInsertionBranch(key)) {
      result = child;
    }
    return result;
  }

