  private FilterableSimpleList(
      SimpleList.View view,
      SimpleList.Css css,
      SimpleList.ListItemRenderer<M> itemRenderer,
      SimpleList.ListEventDelegate<M> eventDelegate,
      FilterChangedHandler filterChangedHandler) {
    super();
    simpleList = SimpleList.create(view, css, itemRenderer, eventDelegate);
    this.getElement().setAttribute("style", "outline: 0");

    addKeyDownHandler(
        keyDownEvent -> {
          int keyCode = keyDownEvent.getNativeEvent().getKeyCode();
          if (keyCode == KEY_BACKSPACE) {
            filter.deleteCharAt(filter.length() - 1);
            filterChangedHandler.onFilterChanged(filter.toString());
          } else if (keyCode == KEY_ESCAPE && !filter.toString().isEmpty()) {
            clearFilter();
            keyDownEvent.stopPropagation();
            filterChangedHandler.onFilterChanged("");
          } else {
            return;
          }
          doFilter();
        });

    addKeyPressHandler(
        keyPressEvent -> {
          filter.append(String.valueOf(keyPressEvent.getCharCode()));
          filterChangedHandler.onFilterChanged(filter.toString());
          doFilter();
        });

    add(simpleList);
    filter = new StringBuilder();
  }

