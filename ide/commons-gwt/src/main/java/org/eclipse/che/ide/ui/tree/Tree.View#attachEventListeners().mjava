        void attachEventListeners() {

            // There used to be a MOUSEDOWN handler with stopPropagation() and
            // preventDefault() actions, but this badly affected the inline editing
            // experience inside the Tree (e.g. debugger's RemoteObjectTree).

            // Ok. Currently RemoteObjectTree doesn't exist anymore. So, the event can be changed on MOUSEDOWN.

            getElement().addEventListener(Event.MOUSEDOWN, new TreeNodeEventListener(true) {
                @Override
                protected void onTreeNodeBodyChildEvent(Event evt, Element treeNodeBody) {
                    SignalEvent signalEvent = SignalEventImpl.create((com.google.gwt.user.client.Event)evt, true);
                    // Select the node.
                    dispatchNodeSelectedEvent(treeNodeBody, signalEvent, css);
                }

                @Override
                protected void onExpansionControlEvent(Event evt, Element expansionControl) {
                    if (!CssUtils.containsClassName(expansionControl, css.leafIcon())) {
                  /*
                   * they've clicked on the expand control of a tree node that is a
                   * directory (so expand it)
                   */
                        TreeNodeElement<D> treeNode =
                                ((JsElement)expansionControl.getParentElement().getParentElement()).<TreeNodeElement<D>>cast();
                        dispatchExpansionEvent(treeNode, css);
                    }
                }
            }, false);

            getElement().addEventListener(Event.DBLCLICK, new TreeNodeEventListener(true) {
                @Override
                protected void onTreeNodeBodyChildEvent(Event evt, Element treeNodeBody) {
                    SignalEvent signalEvent = SignalEventImpl.create((com.google.gwt.user.client.Event)evt, true);

                    // Select the node.
                    dispatchNodeSelectedEvent(treeNodeBody, signalEvent, css);

                    // Don't dispatch a node action if there is a modifier key depressed.
                    if (!(signalEvent.getCommandKey() || signalEvent.getShiftKey())) {
                        dispatchNodeActionEvent(treeNodeBody, css);

                        TreeNodeElement<D> node = getTreeNodeFromTreeNodeBody(treeNodeBody, css);
                        if (node.hasChildrenContainer()) {
                            dispatchExpansionEvent(node, css);
                        }
                    }
                }

                @Override
                protected void onExpansionControlEvent(Event evt, Element expansionControl) {
                    if (!CssUtils.containsClassName(expansionControl, css.leafIcon())) {
                  /*
                   * they've clicked on the expand control of a tree node that is a
                   * directory (so expand it)
                   */
                        TreeNodeElement<D> treeNode =
                                ((JsElement)expansionControl.getParentElement().getParentElement()).<TreeNodeElement<D>>cast();
                        dispatchExpansionEvent(treeNode, css);
                    }
                }
            }, false);

            getElement().addEventListener(Event.KEYDOWN, new TreeNodeEventListener(false) {
                @Override
                public void handleEvent(Event event) {
                    if (getDelegate() != null) {
                        getDelegate().onKeyBoard((KeyboardEvent)event);
                    }
                }
            }, false);

            getElement().addEventListener(Event.CONTEXTMENU, new TreeNodeEventListener(false) {
                @Override
                public void handleEvent(Event evt) {
                    super.handleEvent(evt);
                    evt.stopPropagation();
                    evt.preventDefault();
                }

                @Override
                protected void onOtherEvent(Event evt) {
                    MouseEvent mouseEvt = (MouseEvent)evt;

                    // This is a click on the root.
                    dispatchOnRootContextMenuEvent(mouseEvt.getClientX(), mouseEvt.getClientY());
                }

                @Override
                protected void onTreeNodeBodyChildEvent(Event evt, Element treeNodeBody) {
                    MouseEvent mouseEvt = (MouseEvent)evt;

                    // Dispatch if eventTarget is the treeNodeBody, or if it is a child
                    // of a treeNodeBody.
                    dispatchContextMenuEvent(mouseEvt.getClientX(), mouseEvt.getClientY(), treeNodeBody, css);
                }
            }, false);

            getElement().addEventListener(Event.FOCUS, new EventListener() {
                @Override
                public void handleEvent(Event event) {
                    if (getDelegate() != null) {
                        getDelegate().onFocus(event);
                    }
                }
            }, false);

            getElement().addEventListener(Event.BLUR, new EventListener() {
                @Override
                public void handleEvent(Event event) {
                    if (getDelegate() != null) {
                        getDelegate().onBlur(event);
                    }
                }
            }, false);
        }

