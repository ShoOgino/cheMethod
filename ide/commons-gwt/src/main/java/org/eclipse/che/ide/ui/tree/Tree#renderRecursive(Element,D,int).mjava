  private void renderRecursive(Element parentContainer, D nodeData, int depth) {
    NodeDataAdapter<D> dataAdapter = getModel().dataAdapter;
    Tree.Css css = getResources().treeCss();

    // Make the node.
    TreeNodeElement<D> newNode = createNode(nodeData);
    parentContainer.appendChild(newNode);
    newNode.updateLeafOffset(parentContainer);

    // If we reach depth 0, we stop the recursion.
    if (depth == 0 || !newNode.hasChildrenContainer()) {
      if (dataAdapter.hasChildren(nodeData)) {
        newNode.closeNode(dataAdapter, css, getModel().animator, false);
      }
      return;
    }

    // Maybe continue the expansion.
    newNode.openNode(dataAdapter, css, getModel().animator, false);
    List<D> children = dataAdapter.getChildren(nodeData);
    for (int i = 0, n = children.size(); i < n; i++) {
      renderRecursive(newNode.getChildrenContainer(), children.get(i), depth - 1);
    }
  }

