  /**
   * Returns a string representation of this path, including its device id. The same separator, "/",
   * is used on all platforms.
   *
   * <p>Example result strings (without and with device id):
   *
   * <pre>
   * "/foo/bar.txt"
   * "bar.txt"
   * "/foo/"
   * "foo/"
   * ""
   * "/"
   * "C:/foo/bar.txt"
   * "C:bar.txt"
   * "C:/foo/"
   * "C:foo/"
   * "C:"
   * "C:/"
   * </pre>
   *
   * This string is suitable for passing to <code>Path(String)</code>.
   *
   * @return a string representation of this path
   * @since 4.0.0-RC5
   */
  public String toString() {
    int resultSize = computeLength();
    if (resultSize <= 0) return EMPTY_STRING;
    char[] result = new char[resultSize];
    int offset = 0;
    if (device != null) {
      int size = device.length();
      device.getChars(0, size, result, offset);
      offset += size;
    }
    if ((separators & HAS_LEADING) != 0) result[offset++] = SEPARATOR;
    if ((separators & IS_UNC) != 0) result[offset++] = SEPARATOR;
    int len = segments.length - 1;
    if (len >= 0) {
      // append all but the last segment, with separators
      for (int i = 0; i < len; i++) {
        int size = segments[i].length();
        segments[i].getChars(0, size, result, offset);
        offset += size;
        result[offset++] = SEPARATOR;
      }
      // append the last segment
      int size = segments[len].length();
      segments[len].getChars(0, size, result, offset);
      offset += size;
    }
    if ((separators & HAS_TRAILING) != 0) result[offset++] = SEPARATOR;
    return new String(result);
  }

