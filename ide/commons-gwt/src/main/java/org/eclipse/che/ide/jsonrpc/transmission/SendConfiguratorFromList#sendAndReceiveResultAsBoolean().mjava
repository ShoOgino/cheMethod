    public Promise<Boolean> sendAndReceiveResultAsBoolean() {
        final String requestId = transmitRequest();

        Log.debug(getClass(), "Transmitting request: " +
                              "endpoint ID: " + endpointId + ", " +
                              "request ID: " + requestId + ", " +
                              "method: " + method + ", " +
                              "params list items class: " + pListValue.iterator().next().getClass() + ", " +
                              "params list value" + pListValue + ", " +
                              "result object class: " + Boolean.class);

        return Promises.create(new Executor.ExecutorBody<Boolean>() {
            @Override
            public void apply(ResolveFunction<Boolean> resolve, RejectFunction reject) {
                dispatcher.registerPromiseOfOne(endpointId, requestId, Boolean.class, resolve, reject);
            }
        });
    }

