  /**
   * Searches the subtree rooted at {@code searchRoot} for a node corresponding to the prefix.
   *
   * <p>There can only ever be one such node, or zero. If no node is found, returns null.
   *
   * <p>Note that the {@code prefix} is relative to the whole trie root, not to the {@code
   * searchRoot}.
   *
   * @param prefix the prefix to be found
   * @param searchRoot the root of the subtree that is searched
   * @return the node in the tree corresponding to prefix, or null if no such node exists
   */
  public static <T> TrieNode<T> findNode(String prefix, TrieNode<T> searchRoot) {
    Assert.isNotNull(prefix);
    if (prefix.equals(searchRoot.getPrefix())) {
      return searchRoot;
    }
    TrieNode<T> closestAncestor = findClosestAncestor(prefix, searchRoot);
    return (closestAncestor.getPrefix().equals(prefix)) ? closestAncestor : null;
  }

