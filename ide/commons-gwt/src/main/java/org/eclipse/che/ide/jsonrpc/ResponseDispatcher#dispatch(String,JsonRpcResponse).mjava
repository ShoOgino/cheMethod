    public void dispatch(String endpointId, JsonRpcResponse response) {
        checkNotNull(endpointId, "Endpoint ID name must not be null");
        checkArgument(!endpointId.isEmpty(), "Endpoint ID name must not be empty");
        checkNotNull(response, "Response name must not be null");

        Log.debug(getClass(), "Dispatching a response: " + response + ", form endpoint: " + endpointId);

        String responseId = response.getId();
        Log.debug(getClass(), "Fetching response ID: " + responseId);

        String key = endpointId + '@' + responseId;
        Log.debug(getClass(), "Generating key: " + key);

        Class<?> rClass = resultClasses.get(key);
        Log.debug(getClass(), "Fetching result class: " + rClass);

        if (response.hasResult()) {
            Log.debug(getClass(), "Response has result. Proceeding...");

            JsonRpcResult result = response.getResult();
            if (result.isArray()) {
                Log.debug(getClass(), "Result is an array - processing array...");

                processMany(response, rClass, resolveFunctionsOfMany.get(key));
            } else {
                Log.debug(getClass(), "Result is a single object - processing single object...");

                processOne(response, rClass, resolveFunctionsOfOne.get(key));
            }
        } else if (response.hasError()) {
            Log.debug(getClass(), "Response has error. Proceeding...");

            JsonRpcError error = response.getError();
            RejectFunction rejectFunction = rejectFunctions.get(key);
            if (rejectFunction != null) {
                Log.debug(getClass(), "Reject function is found, applying");

                rejectFunction.apply(JsPromiseError.create(error.toString()));
            } else {
                Log.debug(getClass(), "Reject function is not found, skipping");
            }
        } else {
            Log.error(getClass(), "Received incorrect response: no error, no result");
        }
    }

