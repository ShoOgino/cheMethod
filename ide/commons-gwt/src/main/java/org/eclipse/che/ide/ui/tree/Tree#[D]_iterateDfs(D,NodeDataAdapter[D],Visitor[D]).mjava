  /**
   * Recursively iterates children of a given root node using DFS.
   *
   * @param rootData root node to start the iteration from
   * @param dataAdapter data adapter to get the children of a node
   * @param callback iteration callback
   */
  public static <D> void iterateDfs(
      D rootData, NodeDataAdapter<D> dataAdapter, Visitor<D> callback) {
    LinkedList<D> nodes = new LinkedList<>();
    nodes.add(rootData);

    // Iterative DFS.
    while (!nodes.isEmpty()) {
      D parentNodeData = nodes.pop();
      boolean willVisitChildren = false;
      List<D> children = dataAdapter.getChildren(parentNodeData);

      for (int i = 0, n = children.size(); i < n; i++) {
        D child = children.get(i);
        if (callback.shouldVisit(child)) {
          // Add a filtered child to the stack of the nodes to visit.
          nodes.add(child);
          willVisitChildren = true;
        }
      }

      callback.visit(parentNodeData, willVisitChildren);
    }
  }

