  /**
   * Sets the {@link org.eclipse.che.ide.websocket.events.MessageReceivedHandler} to be notified
   * when client receives data from the WebSocket server.
   *
   * @param handler WebSocket message handler
   */
  public final native void setOnMessageHandler(MessageReceivedHandler handler) /*-{
       this.onmessage = function (event) {
           if (event.data instanceof Blob) {
               var reader = new FileReader();
               reader.onloadend = function() {
                   var e = @org.eclipse.che.ide.websocket.events.MessageReceivedEvent::new(Ljava/lang/String;)(reader.result);
                   handler.@org.eclipse.che.ide.websocket.events.MessageReceivedHandler::onMessageReceived(Lorg/eclipse/che/ide/websocket/events/MessageReceivedEvent;)(e);

               };

               //reader.readAsBinaryString(event.data);
               reader.readAsText(event.data);
           } else {
               var webSocketMessageEventInstance = @org.eclipse.che.ide.websocket.events.MessageReceivedEvent::new(Ljava/lang/String;)(event.data);
               handler.@org.eclipse.che.ide.websocket.events.MessageReceivedHandler::onMessageReceived(Lorg/eclipse/che/ide/websocket/events/MessageReceivedEvent;)(webSocketMessageEventInstance);
           }
       };
    }-*/;

