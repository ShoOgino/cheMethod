  public Promise<T> trigger(Task<T> task, int delay) {
    this.task = task;
    cancelTimer();

    if (completionPromise == null) {
      completionPromise =
          Promises.create(
                  new Executor.ExecutorBody<T>() {

                    @Override
                    public void apply(ResolveFunction<T> resolve, RejectFunction reject) {
                      resolveFunction = resolve;
                    }
                  })
              .thenPromise(
                  new Function<T, Promise<T>>() {
                    @Override
                    public Promise<T> apply(T arg) throws FunctionException {
                      completionPromise = null;
                      resolveFunction = null;
                      Task<T> t = Delayer.this.task;
                      Delayer.this.task = null;

                      return Promises.resolve(t.run());
                    }
                  });
    }

    timer =
        new Timer() {
          @Override
          public void run() {
            timer = null;
            resolveFunction.apply(null);
          }
        };
    timer.schedule(delay);
    return completionPromise;
  }

