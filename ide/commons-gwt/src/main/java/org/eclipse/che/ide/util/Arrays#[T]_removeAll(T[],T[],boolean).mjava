  /**
   * Remove from array {@code o1} all elements which exists in {@code o2} if {@code retain} flag is
   * set to {@code false}. If argument {@code retain} is set to {@code true}, then in result
   * collection will be common elements from both arrays.
   *
   * @param o1 input array
   * @param o2 array, elements of which should be removed from the {@code o2} array
   * @param retain true if operation should be performed with retain algorithm, false means that
   *     from {@code o1} should be removed all elements that contains in {@code o2}
   * @param <T> type of given {@code o1} and {@code o2}
   * @return new array, which contains elements based on operation type
   * @throws IllegalArgumentException in case if given arrays null
   * @since 4.3.0
   */
  public static <T> T[] removeAll(T[] o1, T[] o2, boolean retain) {
    checkArgument(o1 != null && o2 != null, "Input arrays are null");

    T[] retained = retain ? ObjectArrays.newArray(o1, 0) : o1;

    for (int index = 0; index < o1.length; index++) {
      if (indexOf(o2, o1[index]) != -1) {
        retained = retain ? add(retained, o1[index]) : remove(retained, o1[index]);
      }
    }

    return retained;
  }

