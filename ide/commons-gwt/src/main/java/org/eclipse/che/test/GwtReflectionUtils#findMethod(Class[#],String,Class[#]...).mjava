  public static Method findMethod(Class<?> clazz, String name, Class<?>... paramTypes) {
    Class<?> searchType = clazz;
    while (!Object.class.equals(searchType) && searchType != null) {
      Method[] methods =
          searchType.isInterface() ? searchType.getMethods() : searchType.getDeclaredMethods();
      for (int i = 0; i < methods.length; i++) {
        Method method = methods[i];
        if (name.equals(method.getName())
            && paramTypes.length == method.getParameterTypes().length) {
          boolean compatibleParams = true;
          for (int j = 0; j < paramTypes.length; j++) {

            if (paramTypes[j] == null) {
              // null class is a wildcard
              continue;
            }

            Class<?> methodParamType = getCheckedClass(method.getParameterTypes()[j]);
            Class<?> searchParamType = getCheckedClass(paramTypes[j]);

            if (!methodParamType.isAssignableFrom(searchParamType)) {
              compatibleParams = false;
            }
          }

          if (compatibleParams) {
            return method;
          }
        }
      }
      searchType = searchType.getSuperclass();
    }
    return null;
  }

