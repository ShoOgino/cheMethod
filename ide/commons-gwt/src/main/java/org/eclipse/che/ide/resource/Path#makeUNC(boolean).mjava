  /**
   * Return a new path which is the equivalent of this path converted to UNC form (if the given
   * boolean is true) or this path not as a UNC path (if the given boolean is false). If UNC, the
   * returned path will not have a device and the first 2 characters of the path string will be
   * <code>Path.SEPARATOR</code>. If not UNC, the first 2 characters of the returned path string
   * will not be <code>Path.SEPARATOR</code>.
   *
   * @param toUNC true if converting to UNC, false otherwise
   * @return the new path, either in UNC form or not depending on the boolean parameter
   * @since 4.0.0-RC5
   */
  public Path makeUNC(boolean toUNC) {
    // if we are already in the right form then just return
    if (!(toUNC ^ isUNC())) return this;

    int newSeparators = this.separators;
    if (toUNC) {
      newSeparators |= HAS_LEADING | IS_UNC;
    } else {
      // mask out the UNC bit
      newSeparators &= HAS_LEADING | HAS_TRAILING;
    }
    return new Path(toUNC ? null : device, segments, newSeparators);
  }

