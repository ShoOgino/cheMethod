    /**
     * Transmit a request with params as a list of objects and result as a list of objects
     *
     * @param endpointId
     *         endpoint to address a transmission
     * @param method
     *         method name to address a transmission
     * @param pValue
     *         params value
     * @param rClass
     *         result class
     * @param <P>
     *         params class
     * @param <R>
     *         result class
     *
     * @return
     */
    public <P, R> Promise<List<R>> transmitManyToMany(String endpointId, String method, List<P> pValue, Class<R> rClass) {
        checkEndpointId(endpointId);
        checkMethodName(method);
        checkResultClass(rClass);

        Log.debug(getClass(), "Initiating a transmission of a request: " +
                              "endpoint ID: " + endpointId + ", " +
                              "method: " + method + ", " +
                              "params list item class: " + pValue.iterator().next().getClass() + ", " +
                              "params list value: " + pValue + ", " +
                              "result list class: " + rClass);

        return transmitter.newRequest()
                          .endpointId(endpointId)
                          .methodName(method)
                          .paramsAsListOfDto(pValue)
                          .sendAndReceiveResultAsListOfDto(rClass);
    }

