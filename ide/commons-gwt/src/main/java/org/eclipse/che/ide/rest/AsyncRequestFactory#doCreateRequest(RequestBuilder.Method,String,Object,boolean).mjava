  /**
   * Creates new HTTP request to the specified {@code url}.
   *
   * @param method request method
   * @param url request URL
   * @param dtoBody the DTO to send as body of the request. Must implement {@link JsonSerializable}
   *     interface or contain objects that implement it. May be {@code null}.
   * @param async if <b>true</b> - request will be sent in asynchronous mode
   * @return new {@link AsyncRequest} instance to send POST request
   * @throws NullPointerException in case if request {@code method} is {@code null}, reason
   *     includes:
   *     <ul>
   *       <li>Request method should not be a null
   *     </ul>
   */
  protected AsyncRequest doCreateRequest(
      RequestBuilder.Method method, String url, Object dtoBody, boolean async) {
    Preconditions.checkNotNull(method, "Request method should not be a null");

    AsyncRequest asyncRequest = newAsyncRequest(method, url, async);
    if (dtoBody != null) {
      if (dtoBody instanceof List) {
        asyncRequest.data(dtoFactory.toJson((List) dtoBody));
      } else if (dtoBody instanceof String) {
        asyncRequest.data((String) dtoBody);
      } else {
        asyncRequest.data(dtoFactory.toJson(dtoBody));
      }
      asyncRequest.header(HTTPHeader.CONTENT_TYPE, DTO_CONTENT_TYPE);
    } else if (method.equals(RequestBuilder.POST) || method.equals(RequestBuilder.PUT)) {

      /*
        Here we need to setup wildcard mime type in content-type header, because CORS filter
        responses with 403 error in case if user makes POST/PUT request with null body and without
        content-type header. Setting content-type header with wildcard mime type solves this problem.

        Note, this issue need to be investigated, because the problem may be occurred as a bug in
        CORS filter.
      */

      asyncRequest.header(HTTPHeader.CONTENT_TYPE, MimeType.WILDCARD);
    }
    return asyncRequest;
  }

