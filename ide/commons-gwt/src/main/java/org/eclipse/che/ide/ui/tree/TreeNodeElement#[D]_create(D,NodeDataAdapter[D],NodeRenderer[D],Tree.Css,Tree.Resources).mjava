    /**
     * Creates a TreeNodeElement from some data. Should only be called by
     * {@link Tree}.
     *
     * @param <D>
     *         the type of data
     * @param dataAdapter
     *         An {@link NodeDataAdapter} that allows us to visit the
     *         NodeData
     * @return a new {@link TreeNodeElement} created from the supplied data.
     */
    static <D> TreeNodeElement<D> create(
            D data, NodeDataAdapter<D> dataAdapter, NodeRenderer<D> nodeRenderer,
            Tree.Css css, Tree.Resources resources) {

        @SuppressWarnings("unchecked")
        TreeNodeElement<D> treeNode = (TreeNodeElement<D>)Elements.createElement("li", css.treeNode());
        treeNode.setData(data);
        treeNode.setRenderer(nodeRenderer);

        // Associate the rendered node with the underlying model data.
        dataAdapter.setRenderedTreeNode(data, treeNode);

                // Attach the Tree node body.
                DivElement nodeBody = Elements.createDivElement(css.treeNodeBody());
                nodeBody.setAttribute("draggable", "true");
                treeNode.appendChild(nodeBody);

                        // Attach expand node element
                        DivElement expand = Elements.createDivElement();
                        Elements.addClassName(css.expandControl(), expand);
                        nodeBody.appendChild(expand);

                        expand.setInnerHTML(resources.collapsedIcon().getSvg().getElement().getString() +
                                resources.expandedIcon().getSvg().getElement().getString());
                        ((Element)expand.getChildNodes().item(1)).getStyle().setDisplay("none");

                        SpanElement nodeContent = nodeRenderer.renderNodeContents(data);
                        Elements.addClassName(css.treeNodeLabel(), nodeContent);
                        nodeBody.appendChild(nodeContent);

                // Attach the Tree node children.
                treeNode.ensureChildrenContainer(dataAdapter, css);

        return treeNode;
    }

