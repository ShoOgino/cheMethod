  /**
   * Inserts a chain of children into the given node.
   *
   * @param root node to insert into
   * @param suffix suffix of the last node in the chain
   * @param value value of the last node in the chain
   * @return the inserted chain in direct order (from the root to the leaf)
   */
  LinkedList<TrieNode<T>> makeSuffixChain(TrieNode<T> root, String suffix, T value) {
    LinkedList<TrieNode<T>> result = new LinkedList<>();
    String rootPrefix = root.getPrefix();
    for (int i = 1, suffixSize = suffix.length(); i <= suffixSize; i++) {
      String newPrefix = rootPrefix + suffix.substring(0, i);
      TrieNode<T> newNode = TrieNode.makeNode(newPrefix);
      result.add(newNode);
      root.addChild(newNode);
      root = newNode;
    }
    root.setValue(value);
    return result;
  }

