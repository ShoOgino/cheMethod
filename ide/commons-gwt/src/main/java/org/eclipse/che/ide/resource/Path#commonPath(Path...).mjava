    /**
     * Calculated common path from the several paths given as array.
     * <p>
     * For example we have three paths:
     * <ul>
     * <li>{@code /a/b/c}</li>
     * <li>{@code /a/b/d}</li>
     * <li>{@code /a/b/d/e}</li>
     * </ul>
     * Common path will be {@code /a/b}
     *
     * @param paths
     *         paths array
     * @return common path of empty string if given array is empty
     * @throws NullPointerException
     *         in case if given {@code paths} array is null
     * @since 5.0.0
     */
    public static Path commonPath(Path... paths) {
        checkNotNull(paths);

        Path commonPath = Path.ROOT;

        if (paths.length == 0) {
            return EMPTY;
        }

        if (paths.length == 1) {
            return paths[0];
        }

        for (int i = 0; i < paths[0].segmentCount(); i++) {
            final String currentSegment = paths[0].segment(i);

            boolean segmentsMatched = true;

            for (int j = 1; j < paths.length && segmentsMatched; j++) {
                final Path comparedPath = paths[j];

                if (comparedPath.segmentCount() < i) {
                    segmentsMatched = false;
                    break;
                } else {
                    segmentsMatched = nullToEmpty(comparedPath.segment(i)).equals(currentSegment);
                }
            }

            if (segmentsMatched) {
                commonPath = commonPath.append(currentSegment);
            } else {
                break;
            }
        }

        return commonPath;
    }

