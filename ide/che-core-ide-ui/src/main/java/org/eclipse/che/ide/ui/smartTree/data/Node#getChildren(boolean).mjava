  /**
   * Initialize loading of node descendants. If parameter <code>forceUpdate</code> sets with true,
   * than loading will be performed always, otherwise children will be loaded from cache if they
   * exist or empty list. Method returns <code>Promise<List<NodeDescriptor>></code> promise. To
   * obtain loaded descendants, one of the following methods should be called:
   *
   * <p><code>
   * {@link org.eclipse.che.api.promises.client.Promise#then(org.eclipse.che.api.promises.client.Function)}
   * </code> <code>
   * {@link org.eclipse.che.api.promises.client.Promise#then(org.eclipse.che.api.promises.client.Function,
   * org.eclipse.che.api.promises.client.Function)}</code> <code>
   * {@link org.eclipse.che.api.promises.client.Promise#then(org.eclipse.che.api.promises.client.Operation)}
   * </code> <code>
   * {@link org.eclipse.che.api.promises.client.Promise#then(org.eclipse.che.api.promises.client.Operation,
   * org.eclipse.che.api.promises.client.Function)}</code> <code>
   * {@link org.eclipse.che.api.promises.client.Promise#then(org.eclipse.che.api.promises.client.Operation,
   * org.eclipse.che.api.promises.client.Operation)}</code> <code>
   * {@link org.eclipse.che.api.promises.client.Promise#then(org.eclipse.che.api.promises.client.Thenable)}
   * </code>
   *
   * <p>In case if loading was failed, one of the following methods should be called to obtain error
   * message:
   *
   * <p><code>
   * {@link org.eclipse.che.api.promises.client.Promise#catchError(org.eclipse.che.api.promises.client.Function)}
   * </code> <code>
   * {@link org.eclipse.che.api.promises.client.Promise#catchError(org.eclipse.che.api.promises.client.Operation)}
   * </code>
   *
   * @param forceUpdate true if descendants should be loaded immediately, otherwise descendants
   *     would be loaded from cache if they exist or empty list
   * @return descendants promise
   */
  @NotNull
  Promise<List<Node>> getChildren(boolean forceUpdate);

