  @Override
  public Element render(final Node node, final String domID, final Joint joint, final int depth) {

    final Element rootContainer = super.render(node, domID, joint, depth);
    final Element nodeContainer = rootContainer.getFirstChildElement();

    if (searchRequest == null || searchRequest.isEmpty()) {
      return rootContainer;
    }

    Element item = nodeContainer.getElementsByTagName("span").getItem(0);
    String name = node.getName();
    String innerText = item.getInnerText();

    if (innerText.isEmpty()) {
      item = nodeContainer.getElementsByTagName("div").getItem(0).getFirstChildElement();
      innerText = item.getInnerText();
    }

    List<String> matchings = getMatchings(name);
    if (matchings.isEmpty()) {
      return rootContainer;
    }

    if (!name.toLowerCase().matches(searchPattern)) {
      return rootContainer;
    }

    item.setInnerText("");

    for (int i = 0; i < matchings.size(); i++) {
      String matching = matchings.get(i);
      SpanElement beforeMatchingElement = (SpanElement) Elements.createSpanElement();
      SpanElement matchingElement = (SpanElement) Elements.createSpanElement(matchingStyle);
      int matchingIndex = name.toLowerCase().indexOf(matching);
      int matchingLength = matching.length();
      beforeMatchingElement.setInnerText(name.substring(0, matchingIndex));
      matchingElement.setInnerText(name.substring(matchingIndex, matchingIndex + matchingLength));
      item.appendChild(beforeMatchingElement);
      item.appendChild(matchingElement);

      innerText = innerText.substring(innerText.toLowerCase().indexOf(matching) + matchingLength);
      if (i == matchings.size() - 1) {
        SpanElement afterMatchingElement = (SpanElement) Elements.createSpanElement();
        afterMatchingElement.setInnerText(innerText);
        item.appendChild(afterMatchingElement);
      } else {
        name = name.substring(matchingIndex + matchingLength);
      }
    }

    return rootContainer;
  }

