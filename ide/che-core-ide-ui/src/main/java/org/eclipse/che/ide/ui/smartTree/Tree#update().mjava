    protected void update() {
        if (updateTask == null) {
            updateTask = new DelayedTask() {
                @Override
                public void onExecute() {
                    int count = getVisibleRowCount();
                    if (count > 0) {
                        List<Node> rootItems = getRootNodes();
                        List<Node> visible = getAllChildNodes(rootItems, true);
                        int[] vr = getVisibleRows(visible, count);

                        for (int i = vr[0]; i <= vr[1]; i++) {
                            if (goInto.isActive()) {
                                //constraint node indention
                                int goIntoDirDepth = nodeStorage.getDepth(goInto.getLastUsed());
                                int currentNodeDepth = nodeStorage.getDepth(visible.get(i));

                                view.onDepthUpdated(getNodeDescriptor(visible.get(i)), currentNodeDepth - goIntoDirDepth);
                            }
                            if (!isRowRendered(i, visible)) {
                                Node parent = nodeStorage.getParent(visible.get(i));
                                Element html = renderNode(visible.get(i), nodeStorage.getDepth(parent));
                                Element rootContainer = view.getRootContainer(getNodeDescriptor(visible.get(i)));
                                rootContainer.replaceChild(rootContainer.getFirstChildElement(), html);
                            } else {
                                refresh(visible.get(i));
                            }
                        }
                    }
                }
            };
        }
        updateTask.delay(view.getScrollDelay());
    }

