  /**
   * Initialize popup menu.
   *
   * @param actionGroup action group
   * @param presentationFactory presentation factory
   * @param lockLayer lock layer, uses as root for attaching this popup menu
   * @param actionSelectedHandler handler for action selected event
   * @param keyBindingAgent agent for key binding
   * @param itemIdPrefix id prefix of the item
   */
  private void initPopupMenu(
      ActionGroup actionGroup,
      PresentationFactory presentationFactory,
      MenuLockLayer lockLayer,
      ActionSelectedHandler actionSelectedHandler,
      KeyBindingAgent keyBindingAgent,
      String itemIdPrefix) {
    this.presentationFactory = presentationFactory;
    this.keyBindingAgent = keyBindingAgent;
    this.itemIdPrefix = itemIdPrefix;
    this.lockLayer = lockLayer;
    this.actionSelectedHandler = actionSelectedHandler;

    List<Utils.VisibleActionGroup> visibleActionGroupList =
        Utils.renderActionGroup(actionGroup, presentationFactory, actionManager);

    list = new ArrayList<>();
    if (visibleActionGroupList != null) {
      for (Utils.VisibleActionGroup groupActions : visibleActionGroupList) {
        list.addAll(groupActions.getActionList());
      }
    }

    popupMenuPanel = new SimplePanel();
    disableTextSelection(popupMenuPanel.getElement(), true);
    initWidget(popupMenuPanel);

    popupMenuPanel.addDomHandler(
        event -> {
          closeSubPopupTimer.cancel();

          PopupMenu.this.setStyleNormal(hoveredTR);
          hoveredTR = null;

          if (subPopupAnchor != null) {
            setStyleHovered(subPopupAnchor);
          }
        },
        MouseOutEvent.getType());

    popupMenuPanel.setStyleName(POPUP_RESOURCES.popup().popupMenuMain());

    hasCheckedItems = hasCheckedItems();
  }

