  /**
   * Returns the list of visible action group.
   *
   * @param group action group
   * @param presentationFactory presentation factory
   * @param actionManager action manager
   * @param perspectiveManager perspective manager
   * @return list of visible action group
   */
  public static List<VisibleActionGroup> renderActionGroup(
      @NotNull ActionGroup group,
      PresentationFactory presentationFactory,
      ActionManager actionManager,
      PerspectiveManager perspectiveManager) {
    Presentation presentation = presentationFactory.getPresentation(group);
    ActionEvent event = new ActionEvent(presentation, actionManager, perspectiveManager);

    if (!presentation.isVisible()) { // don't process invisible groups
      return null;
    }

    Action[] children = group.getChildren(event);
    List<VisibleActionGroup> currentVisibleActionGroupList = new ArrayList<>();
    List<Action> currentActionList = new ArrayList<>();
    String currentGroupId = actionManager.getId(group);
    for (Action child : children) {
      if (child == null) {
        Log.error(Utils.class, "action is null: group=" + group + " group id=" + currentGroupId);
        continue;
      }

      presentation = presentationFactory.getPresentation(child);
      child.update(new ActionEvent(presentation, actionManager, perspectiveManager));

      if (!presentation.isVisible()) { // don't create invisible items in the menu
        continue;
      }

      if (child instanceof ActionGroup) {
        ActionGroup actionGroup = (ActionGroup) child;
        if (actionGroup.isPopup()) { // popup menu has its own presentation
          if (actionGroup.disableIfNoVisibleChildren()) {
            final boolean visibleChildren =
                hasVisibleChildren(
                    actionGroup, presentationFactory, actionManager, perspectiveManager);
            if (actionGroup.hideIfNoVisibleChildren() && !visibleChildren) {
              continue;
            }
            presentation.setEnabled(actionGroup.canBePerformed() || visibleChildren);
          }
          currentActionList.add(child);
        } else {
          List<VisibleActionGroup> newVisibleActionGroupList =
              renderActionGroup(
                  (ActionGroup) child, presentationFactory, actionManager, perspectiveManager);
          currentVisibleActionGroupList.addAll(newVisibleActionGroupList);
        }
      } else if (child instanceof Separator) {
        if ((((Separator) child).getText() != null)
            || (!currentActionList.isEmpty()
                && !(currentActionList.get(currentActionList.size() - 1) instanceof Separator))) {
          currentActionList.add(child);
        }
      } else {
        currentActionList.add(child);
      }
    }
    currentVisibleActionGroupList.add(0, new VisibleActionGroup(currentGroupId, currentActionList));

    return currentVisibleActionGroupList;
  }

