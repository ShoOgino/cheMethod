  @Inject
  public SubPanelViewImpl(
      SubPanelViewImplUiBinder uiBinder,
      TabItemFactory tabItemFactory,
      Menu menu,
      @Assisted ClosePaneAction closePaneAction,
      @Assisted RemoveAllWidgetsInPaneAction removeAllWidgetsInPaneAction,
      @Assisted SplitHorizontallyAction splitHorizontallyAction,
      @Assisted SplitVerticallyAction splitVerticallyAction) {
    this.tabItemFactory = tabItemFactory;
    this.menu = menu;

    closePaneMenuItem = new MenuItemActionWidget(closePaneAction);
    menu.addListItem(closePaneMenuItem);
    menu.addListItem(new MenuItemActionWidget(removeAllWidgetsInPaneAction));
    menu.addListItem(new MenuItemActionWidget(splitHorizontallyAction));
    menu.addListItem(new MenuItemActionWidget(splitVerticallyAction));

    menu.setDelegate(this);

    tabs2Widgets = new HashMap<>();
    widgets2Tabs = new HashMap<>();
    widgets2ListItems = new HashMap<>();
    eastSubPanels = new ArrayList<>();
    southSubPanels = new ArrayList<>();

    splitLayoutPanel = new SplitLayoutPanel(3);

    initWidget(uiBinder.createAndBindUi(this));

    menuPanel.add(menu);

    plusPanel.getElement().setInnerHTML(FontAwesome.PLUS);
    plusPanel.addDomHandler(
        new ClickHandler() {
          @Override
          public void onClick(ClickEvent clickEvent) {
            delegate.onAddTabButtonClicked(
                getAbsoluteLeft(plusPanel.getElement()) + POPUP_OFFSET,
                getAbsoluteTop(plusPanel.getElement()) + POPUP_OFFSET);
          }
        },
        ClickEvent.getType());

    widgetsPanel.ensureDebugId("process-output-panel-holder");
    widgetsPanel.addDomHandler(
        event -> delegate.onWidgetFocused(widgetsPanel.getVisibleWidget()), ClickEvent.getType());
  }

