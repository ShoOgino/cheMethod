  private void setSelection() {
    Optional<Node> startsOptional =
        filteredNodes
            .stream()
            .filter(
                node ->
                    node.getName().toLowerCase().startsWith(searchRequest.toString().toLowerCase()))
            .findFirst();
    Optional<Node> containsOptional =
        filteredNodes
            .stream()
            .filter(
                node ->
                    node.getName().toLowerCase().contains(searchRequest.toString().toLowerCase()))
            .findFirst();
    Optional<Node> matchesOptional =
        filteredNodes
            .stream()
            .filter(node -> node.getName().toLowerCase().matches(getSearchPattern()))
            .findFirst();

    if (startsOptional.isPresent()) {
      tree.getSelectionModel().select(startsOptional.get(), true);
    } else if (containsOptional.isPresent()) {
      tree.getSelectionModel().select(containsOptional.get(), true);
    } else if (matchesOptional.isPresent()) {
      tree.getSelectionModel().select(matchesOptional.get(), true);
    } else {
      filteredNodes
          .stream()
          .findFirst()
          .ifPresent(node -> tree.getSelectionModel().select(node, true));
    }
  }

