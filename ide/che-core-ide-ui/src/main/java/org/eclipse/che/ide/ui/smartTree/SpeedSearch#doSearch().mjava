  private void doSearch() {
    if (searchRequest.toString().isEmpty()) {
      removeSearchPopUpFromTreeIfIsShown();
    } else {
      addSearchPopUpToTreeIfNotDisplayed();
      searchPopUp.setSearchRequest(searchRequest.toString());
    }
    searchRender.setSearchRequest(searchRequest.toString());
    searchRender.setRequestPattern(getSearchPattern());
    tree.getSelectionModel().deselectAll();
    List<Node> filteredChildNodes =
        savedNodes.stream().filter(matchesToSearchRequest()::apply).collect(toList());
    filteredNodes =
        savedNodes
            .stream()
            .filter(
                savedNode ->
                    matchesToSearchRequest().apply(savedNode)
                        || filteredChildNodes
                            .stream()
                            .anyMatch(filteredNode -> nestedNodeOf(filteredNode, savedNode)))
            .collect(toList());

    if (filterNodes) {
      for (Node savedNode : savedNodes) {
        if (!filteredNodes.contains(savedNode)) {
          if (getVisibleNodes().contains(savedNode)) {
            nodeStorage.remove(savedNode);
          }
        } else if (!getVisibleNodes().contains(savedNode)) {
          Node parent = savedNode.getParent();
          if (parent == null) {
            nodeStorage.add(savedNode);
          } else if (getVisibleNodes().contains(parent)) {
            List<Node> filteredChildren = getFilteredChildren(parent);
            if (filteredChildren.contains(savedNode)) {
              nodeStorage.insert(parent, filteredChildren.indexOf(savedNode), savedNode);
            }
          }
        }
      }
      tree.expandAll();
    }
    getVisibleNodes().forEach(tree::refresh);

    setSelection();
  }

