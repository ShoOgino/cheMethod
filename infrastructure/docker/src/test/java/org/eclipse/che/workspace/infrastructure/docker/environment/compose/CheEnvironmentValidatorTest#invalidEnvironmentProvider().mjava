    @DataProvider
    public static Object[][] invalidEnvironmentProvider() {
        // InvalidEnvironmentObject | ExceptionMessage
        EnvironmentDto env;
        Map.Entry<String, MachineConfigDto> machineEntry;
        List<List<Object>> data = new ArrayList<>();

        data.add(asList(createEnv().withRecipe(null), "Environment recipe should not be null"));

        env = createEnv();
        env.getRecipe().setType("docker");
        data.add(asList(env, "Type 'docker' of environment 'env' is not supported. Supported types: compose"));

        env = createEnv();
        env.getRecipe().withLocation(null).withContent(null);
        data.add(asList(env, "OldRecipe of environment 'env' must contain location or content"));

        env = createEnv();
        env.getRecipe().withLocation("location").withContent("content");
        data.add(asList(env, "OldRecipe of environment 'env' contains mutually exclusive fields location and content"));

        env = createEnv();
        env.setMachines(null);
        data.add(asList(env, "Environment 'env' doesn't contain machine with 'org.eclipse.che.ws-agent' agent"));

        env = createEnv();
        env.setMachines(emptyMap());
        data.add(asList(env, "Environment 'env' doesn't contain machine with 'org.eclipse.che.ws-agent' agent"));

        env = createEnv();
        env.getMachines().put("missingInEnvMachine",
                              newDto(MachineConfigDto.class).withAgents(singletonList("org.eclipse.che.ws-agent")));
        data.add(asList(env, "Environment 'env' contains machines that are missing in environment recipe: missingInEnvMachine"));

        env = createEnv();
        env.getMachines().entrySet().forEach(entry -> entry.getValue().getAgents().add("org.eclipse.che.ws-agent"));
        data.add(asList(env, "Environment 'env' should contain exactly 1 machine with agent 'org.eclipse.che.ws-agent', but contains '" +
                             env.getMachines().size() + "'. " + "All machines with this agent: " +
                             Joiner.on(", ").join(env.getMachines().keySet())));

        env = createEnv();
        env.getMachines().entrySet().forEach(entry -> entry.getValue().setAgents(null));
        data.add(asList(env,
                        "Environment 'env' should contain exactly 1 machine with agent 'org.eclipse.che.ws-agent', but contains '0'. All machines with this agent: "));

        env = createEnv();
        env.getMachines().entrySet().forEach(entry -> entry.getValue().getAgents().add(null));
        data.add(asList(env, "OldMachine 'machine2' in environment 'env' contains invalid agent 'null'"));

        env = createEnv();
        env.getMachines().entrySet().forEach(entry -> entry.getValue().getAgents().add(""));
        data.add(asList(env, "OldMachine 'machine2' in environment 'env' contains invalid agent ''"));

        env = createEnv();
        machineEntry = env.getMachines().entrySet().iterator().next();
        machineEntry.getValue().setAttributes(singletonMap("memoryLimitBytes", "0"));
        data.add(asList(env, format("Value of attribute 'memoryLimitBytes' of machine '%s' in environment 'env' is illegal",
                                    machineEntry.getKey())));

        env = createEnv();
        machineEntry = env.getMachines().entrySet().iterator().next();
        machineEntry.getValue().setAttributes(singletonMap("memoryLimitBytes", "-1"));
        data.add(asList(env, format("Value of attribute 'memoryLimitBytes' of machine '%s' in environment 'env' is illegal",
                                    machineEntry.getKey())));

        env = createEnv();
        machineEntry = env.getMachines().entrySet().iterator().next();
        machineEntry.getValue().setAttributes(singletonMap("memoryLimitBytes", ""));
        data.add(asList(env, format("Value of attribute 'memoryLimitBytes' of machine '%s' in environment 'env' is illegal",
                                    machineEntry.getKey())));

        return data.stream()
                   .map(list -> list.toArray(new Object[list.size()]))
                   .toArray(value -> new Object[data.size()][]);
    }

