    private DockerEnvironment asDockerEnvironment(ComposeEnvironment composeEnvironment) {
        Map<String, DockerService> services = Maps.newHashMapWithExpectedSize(composeEnvironment.getServices().size());
        for (Map.Entry<String, ComposeService> composeServiceEntry : composeEnvironment.getServices()
                                                                                       .entrySet()) {
            ComposeService service = composeServiceEntry.getValue();

            DockerService cheService = new DockerService().withCommand(service.getCommand())
                                                          .withContainerName(service.getContainerName())
                                                          .withDependsOn(service.getDependsOn())
                                                          .withEntrypoint(service.getEntrypoint())
                                                          .withEnvironment(service.getEnvironment())
                                                          .withExpose(service.getExpose())
                                                          .withImage(service.getImage())
                                                          .withLabels(service.getLabels())
                                                          .withLinks(service.getLinks())
                                                          .withMemLimit(service.getMemLimit())
                                                          .withNetworks(service.getNetworks())
                                                          .withPorts(service.getPorts())
                                                          .withVolumes(service.getVolumes())
                                                          .withVolumesFrom(service.getVolumesFrom());

            if (service.getBuild() != null) {
                cheService.setBuild(new DockerBuildContext().withContext(service.getBuild().getContext())
                                                            .withDockerfilePath(service.getBuild().getDockerfile())
                                                            .withArgs(service.getBuild().getArgs()));
            }

            services.put(composeServiceEntry.getKey(), cheService);
        }
        return new DockerEnvironment(services);
    }

